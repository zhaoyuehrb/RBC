%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:06:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUGAAAGACUAGACUGUCUUAUAUUAUGAGAUACUUGAAUGCUGCAUGUAAAGCCUUUAAAGCAAAAUCCUCAGAAAUGGUCUAAAUAAAACACUUGAUAUGCCUAGAGAACACAGCAA\
) } def
/len { sequence length } bind def

/coor [
[83.76895905 122.66191101]
[72.07569122 132.05699158]
[60.38241959 141.45205688]
[48.68914795 150.84713745]
[37.11681366 160.39077759]
[25.66729355 170.08142090]
[14.21777534 179.77206421]
[3.14783692 189.89413452]
[-7.52627516 200.43280029]
[-18.20038605 210.97145081]
[-28.87449837 221.51011658]
[-39.54861069 232.04876709]
[-39.39888382 247.85235596]
[-50.52731323 259.07437134]
[-66.33158875 259.05700684]
[-77.43532562 247.81054688]
[-77.25086212 232.00733948]
[-65.88764954 221.02313232]
[-50.08726883 221.37466431]
[-39.41315842 210.83599854]
[-28.73904610 200.29734802]
[-18.06493378 189.75868225]
[-7.39082241 179.22003174]
[-7.04241085 175.60017395]
[-4.84957790 171.98631287]
[-0.84373504 169.27828979]
[4.52713394 168.32254028]
[15.97665215 158.63189697]
[27.42617035 148.94125366]
[30.53516197 142.13940430]
[39.29407501 139.15386963]
[50.98734283 129.75878906]
[62.68061447 120.36371613]
[74.37388611 110.96864319]
[72.32293701 103.31498718]
[72.50838470 95.39346313]
[74.91524506 87.84416962]
[79.34903717 81.27710724]
[71.35697937 68.58352661]
[63.36491394 55.88994980]
[55.37284851 43.19636917]
[47.38078690 30.50279236]
[33.48039246 22.94702148]
[33.24685287 8.05424690]
[25.25478745 -4.63933134]
[17.26272392 -17.33290863]
[1.77149844 -18.22819710]
[-10.21357441 -28.08404160]
[-14.08398819 -43.11066818]
[-8.35149002 -57.53003311]
[4.77965641 -65.79759979]
[20.26025963 -64.73431396]
[32.13771057 -54.74903107]
[35.84488678 -39.68130112]
[29.95630264 -25.32497215]
[37.94836426 -12.63139439]
[45.94042969 0.06218319]
[59.26917648 6.71002483]
[60.07436371 22.51072884]
[68.06642914 35.20430756]
[76.05849457 47.89788437]
[84.05055237 60.59146118]
[92.04261780 73.28504181]
[113.62802124 75.68362427]
[126.94054413 92.84346008]
[141.93931580 93.03501129]
[147.98567200 79.11677551]
[158.87077332 68.60213470]
[172.91427612 63.07096481]
[187.96473694 63.33714676]
[201.72929382 69.32898712]
[212.12283325 80.10487366]
[217.58396912 94.00109863]
[232.58274841 94.19265747]
[247.58152771 94.38420868]
[262.58154297 94.38420868]
[277.58029175 94.19265747]
[288.57339478 83.15681458]
[303.78701782 83.17621613]
[314.24026489 93.72445679]
[329.23904419 93.53289795]
[344.23782349 93.34134674]
[352.89474487 90.07186127]
[359.62091064 93.34134674]
[374.61968994 93.53289795]
[380.58355713 79.55073547]
[391.44766235 68.91873169]
[405.55532837 63.25820160]
[420.75527954 63.43232727]
[434.72958374 69.41455841]
[445.34729004 80.29264832]
[450.98925781 94.40776825]
[450.79513550 109.60746765]
[444.79452515 123.57389832]
[433.90249634 134.17727661]
[419.77993774 139.80067444]
[404.58053589 139.58656311]
[390.62200928 133.56758118]
[380.03295898 122.66159058]
[374.42813110 108.53167725]
[359.42935181 108.34012604]
[344.42935181 108.34012604]
[329.43060303 108.53167725]
[314.43182373 108.72323608]
[304.25137329 119.53499603]
[289.04321289 119.94292450]
[277.77185059 109.19142914]
[262.77307129 109.38298798]
[256.04690552 112.65247345]
[247.38996887 109.38298798]
[232.39120483 109.19142914]
[217.39242554 108.99987793]
[211.57817078 122.75210571]
[200.91281128 133.25903320]
[186.99974060 138.89739990]
[171.94737244 138.77911377]
[158.04971313 132.89109802]
[147.43669128 122.10189819]
[141.74777222 108.03379059]
[126.74898529 107.84223175]
[120.16680145 119.24342346]
[109.08639526 126.35235596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 29]
[6 28]
[7 27]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[44 57]
[45 56]
[46 55]
[65 120]
[66 119]
[73 112]
[74 111]
[75 110]
[76 108]
[77 107]
[80 104]
[81 103]
[82 102]
[84 101]
[85 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
