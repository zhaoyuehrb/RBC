%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:22:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUUUUAAACUGUCUACGGUUCUUAACCUCAUCUGUUAAGUUCCCAUGCCUGGAGAAGCUAAUGCCAACUCAUCAUGUGAUAAUUCAAUUUGUACAAUAAAUUAUGAACCUGGAA\
) } def
/len { sequence length } bind def

/coor [
[56.39342499 280.98739624]
[54.57063675 296.01922607]
[47.96353912 309.64367676]
[37.28881836 320.38281250]
[23.70438957 327.07174683]
[8.68378830 328.98492432]
[-6.14366007 325.91485596]
[-19.16958618 318.19448853]
[-28.98103714 306.66131592]
[-34.51373672 292.56634521]
[-35.16754150 277.43850708]
[-30.87152863 262.91876221]
[-22.09170151 250.58209229]
[-9.78042793 241.76670837]
[4.72685766 237.42880249]
[19.85651207 238.03894043]
[25.27513695 224.05184937]
[30.69376183 210.06477356]
[36.11238861 196.07768250]
[35.58798218 188.61024475]
[41.86307144 181.79602051]
[47.64902496 167.95684814]
[53.43497849 154.11766052]
[59.22092819 140.27848816]
[65.00688171 126.43931580]
[58.14414978 113.10129547]
[43.52023315 109.76348114]
[28.89631462 106.42566681]
[14.27239513 103.08785248]
[-0.35152334 99.75003815]
[-12.70666790 109.33567047]
[-28.33072090 108.68530273]
[-39.84648132 98.10602570]
[-41.81656265 82.59303284]
[-33.31074905 69.47109985]
[-18.34522629 64.93599701]
[-3.98625827 71.12905884]
[2.98629069 85.12611389]
[17.61020851 88.46392822]
[32.23412704 91.80174255]
[46.85804749 95.13955688]
[61.48196411 98.47737122]
[68.63336945 80.59606934]
[83.04388428 69.13201904]
[100.40842438 66.44880676]
[103.93898010 51.87022018]
[99.66719818 36.63662338]
[110.18274689 26.08804321]
[113.71330261 11.50945663]
[117.24385071 -3.06913018]
[120.77440643 -17.64771652]
[112.63570404 -26.51777840]
[109.87593842 -38.11128235]
[113.07977295 -49.46466064]
[121.32264709 -57.73426437]
[132.43353271 -60.90849304]
[136.72856140 -75.28044128]
[141.02359009 -89.65238190]
[132.43222046 -104.82138062]
[137.31312561 -121.20680237]
[152.20745850 -128.89346313]
[156.12161255 -143.37377930]
[151.39140320 -159.07591248]
[162.82034302 -170.83648682]
[178.65132141 -166.55723572]
[182.59878540 -150.64028931]
[170.60192871 -139.45962524]
[166.68777466 -124.97930908]
[174.63694763 -114.74591064]
[175.20997620 -101.60494995]
[167.96995544 -90.39010620]
[155.39552307 -85.35736084]
[151.10050964 -70.98541260]
[146.80548096 -56.61347198]
[156.47871399 -41.18047333]
[151.84376526 -23.23962593]
[135.35299683 -14.11716366]
[131.82243347 0.46142280]
[128.29188538 15.04000950]
[124.76133728 29.61859703]
[129.28564453 43.80943680]
[118.51756287 55.40077209]
[114.98701477 69.97936249]
[120.44153595 73.39186096]
[125.14443207 77.78273010]
[128.92277527 82.99052429]
[131.63764954 88.82373810]
[133.18920898 95.06790924]
[133.52043152 101.49342346]
[132.61911011 107.86402893]
[146.04655457 114.55010223]
[159.47401428 121.23617554]
[172.90145874 127.92225647]
[186.32890320 134.60832214]
[199.75636292 141.29440308]
[213.18380737 147.98048401]
[230.05749512 149.62812805]
[233.14535522 166.29850769]
[217.98126221 173.88049316]
[206.49772644 161.40792847]
[193.07028198 154.72184753]
[179.64283752 148.03578186]
[166.21537781 141.34970093]
[152.78793335 134.66363525]
[139.36048889 127.97755432]
[125.93303680 121.29147339]
[113.56159973 132.50270081]
[96.58205414 136.72459412]
[78.84605408 132.22526550]
[73.06010437 146.06443787]
[67.27415466 159.90362549]
[61.48820114 173.74279785]
[55.70224762 187.58197021]
[50.09947205 201.49630737]
[44.68084717 215.48339844]
[39.26222229 229.47047424]
[33.84359741 243.45756531]
[45.43559265 253.19944763]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 117]
[17 116]
[18 115]
[19 114]
[21 113]
[22 112]
[23 111]
[24 110]
[25 109]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[45 83]
[46 82]
[48 80]
[49 79]
[50 78]
[51 77]
[56 74]
[57 73]
[58 72]
[61 68]
[62 67]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
