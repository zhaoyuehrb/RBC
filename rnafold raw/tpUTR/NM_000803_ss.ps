%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:32:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCAGUCCUCCCAGACUACCUGCCCUCAGCUUGGAUAACCAGGCUGGGCUCAGCUCAGCUCCCACAAAUGACAGCCCCUUAAGCAUGCUUCUAUUAGUCACCUAACCCUCUGUCACCCAGUCUGUUGCUGCUCCAUGGUGGGGCCAAGAGUCACUUCUAAUAAACAGACUGUUUUCUAAUAAUUCCA\
) } def
/len { sequence length } bind def

/coor [
[99.97180176 184.04786682]
[103.41104889 169.44999695]
[101.64977264 154.55377197]
[99.88850403 139.65753174]
[98.12722778 124.76129150]
[92.53125763 138.67837524]
[86.93527985 152.59544373]
[81.33930969 166.51252747]
[87.76847076 180.95002747]
[82.02780914 195.67485046]
[67.52313995 201.95100403]
[52.85984039 196.05497742]
[46.73737717 181.48477173]
[52.78810501 166.88462830]
[67.42222595 160.91654968]
[73.01820374 146.99948120]
[78.61417389 133.08239746]
[84.21015167 119.16531372]
[79.06333923 113.71001434]
[68.76971436 102.79940796]
[63.62289810 97.34410858]
[49.40398788 102.12140656]
[35.18507767 106.89870453]
[28.10145569 120.77170563]
[13.61340427 125.41400909]
[0.43127656 118.57536316]
[-13.78763390 123.35266113]
[-28.00654411 128.12995911]
[-42.22545242 132.90725708]
[-56.44436264 137.68455505]
[-70.66327667 142.46186829]
[-84.88218689 147.23916626]
[-99.10109711 152.01646423]
[-113.32000732 156.79376221]
[-127.53891754 161.57106018]
[-137.97839355 174.21817017]
[-154.10382080 171.23439026]
[-159.32672119 155.68919373]
[-148.27424622 143.57414246]
[-132.31620789 147.35215759]
[-118.09730530 142.57484436]
[-103.87839508 137.79754639]
[-89.65948486 133.02024841]
[-75.44057465 128.24295044]
[-61.22166443 123.46565247]
[-47.00275421 118.68835449]
[-32.78384399 113.91104889]
[-18.56493378 109.13375092]
[-4.34602308 104.35645294]
[2.03267407 90.94571686]
[16.38461685 85.89830017]
[30.40777969 92.67979431]
[44.62668991 87.90249634]
[58.84560013 83.12519836]
[44.07697296 80.50076294]
[29.85185242 85.25953674]
[14.87935066 84.35169220]
[1.33342028 77.90904236]
[-8.81911850 66.86703491]
[-14.10415363 52.82892990]
[-13.75431728 37.83300781]
[-7.82040358 24.05662918]
[2.83600426 13.50006771]
[16.66763306 7.69610119]
[31.66618156 7.48744488]
[45.65391541 12.90439415]
[56.59986115 23.16042709]
[62.91471481 36.76640701]
[63.68169785 51.74591064]
[71.52030182 64.53482056]
[70.77261353 49.55347061]
[70.02492523 34.57211685]
[69.27723694 19.59076309]
[68.52954865 4.60940886]
[67.78186035 -10.37194443]
[54.22500992 -14.76980972]
[43.00905228 -23.51513290]
[35.47038269 -35.54001236]
[32.49838638 -49.38736343]
[34.43054962 -63.38747406]
[41.01427078 -75.85932922]
[51.43966293 -85.31245422]
[64.43914795 -90.62503815]
[63.94057846 -105.61675262]
[51.25795746 -114.36074066]
[46.21487427 -128.72808838]
[50.54756546 -143.13960266]
[62.39374161 -152.12882996]
[61.89516830 -167.12054443]
[61.39659500 -182.11224365]
[49.68621826 -192.72557068]
[48.99394226 -208.51469421]
[59.73048019 -220.11219788]
[75.52603149 -220.63751221]
[87.00938416 -209.77896118]
[87.36766052 -193.97872925]
[76.38830566 -182.61082458]
[76.88687897 -167.61911011]
[77.38545227 -152.62739563]
[89.80269623 -144.44509888]
[95.08331299 -130.35328674]
[91.00593567 -115.68262482]
[78.93228912 -106.11532593]
[79.43086243 -91.12361908]
[94.34152222 -85.78293610]
[106.09220886 -75.10616302]
[112.86593628 -60.70432281]
[113.60002136 -44.76741409]
[108.15267181 -29.73143578]
[97.32923126 -17.90600967]
[82.76321411 -11.11963272]
[83.51090240 3.86172080]
[84.25859070 18.84307480]
[85.00627899 33.82442856]
[85.75396729 48.80578232]
[86.50165558 63.78713608]
[108.27150726 68.83291626]
[119.84759521 83.44564056]
[119.38378143 98.46614838]
[134.26736450 100.33129883]
[149.15095520 102.19645691]
[164.03454590 104.06161499]
[178.91813660 105.92676544]
[193.80172729 107.79192352]
[208.68531799 109.65708160]
[223.56889343 111.52223206]
[238.45248413 113.38739014]
[246.49780273 97.94100952]
[262.62777710 88.16639709]
[282.93505859 88.15193176]
[301.57247925 99.37534332]
[316.45605469 97.51019287]
[331.33966064 95.64503479]
[346.22323608 93.77987671]
[361.10681152 91.91472626]
[375.99041748 90.04956818]
[390.95480347 82.08065796]
[402.75482178 94.25421143]
[394.32360840 108.96307373]
[377.85556030 104.93315887]
[362.97198486 106.79830933]
[348.08837891 108.66346741]
[333.20480347 110.52862549]
[318.32122803 112.39377594]
[303.43762207 114.25893402]
[302.44323730 121.69271851]
[300.45443726 136.56028748]
[299.46005249 143.99407959]
[313.33013916 149.70552063]
[327.20022583 155.41697693]
[341.07031250 161.12841797]
[357.24411011 158.41899109]
[367.46722412 171.24160767]
[361.22305298 186.40545654]
[344.93502808 188.31126404]
[335.35888672 174.99850464]
[321.48876953 169.28706360]
[307.61868286 163.57560730]
[293.74859619 157.86416626]
[277.22482300 163.52206421]
[260.76727295 161.85591125]
[247.31124878 153.92633057]
[238.94400024 141.84397888]
[236.58732605 128.27098083]
[221.70375061 126.40582275]
[206.82015991 124.54066467]
[191.93656921 122.67551422]
[177.05297852 120.81035614]
[162.16938782 118.94519806]
[147.28579712 117.08004761]
[132.40222168 115.21488953]
[117.51863098 113.34973145]
[129.68600464 122.12213135]
[141.85337830 130.89453125]
[154.02075195 139.66693115]
[168.45458984 143.74911499]
[180.94506836 152.05502319]
[190.29216003 163.78668213]
[195.59788513 177.81698608]
[196.35247803 192.79798889]
[192.48347473 207.29043579]
[184.36254883 219.90196228]
[172.76992798 229.42094421]
[158.81935120 234.93287659]
[143.85108948 235.90818787]
[129.30320740 232.25318909]
[116.57335663 224.31901550]
[106.88454437 212.86795044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 18]
[6 17]
[7 16]
[8 15]
[21 54]
[22 53]
[23 52]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[70 116]
[71 115]
[72 114]
[73 113]
[74 112]
[75 111]
[83 104]
[84 103]
[88 99]
[89 98]
[90 97]
[119 172]
[120 171]
[121 170]
[122 169]
[123 168]
[124 167]
[125 166]
[126 165]
[127 164]
[131 145]
[132 144]
[133 143]
[134 142]
[135 141]
[136 140]
[148 159]
[149 158]
[150 157]
[151 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
