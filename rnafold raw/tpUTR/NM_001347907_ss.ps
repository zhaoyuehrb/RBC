%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 15:27:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGAACUGAUAUUCUAGUGGGGGAGAUAAUGAAUGAAUACAUCGAAAACGCAAUAUGCAGACAGUGAUGUGUUAAAGAGAAAAAUAAAGCAGGAGACAGAGAGAA\
) } def
/len { sequence length } bind def

/coor [
[80.54815674 329.65490723]
[70.69542694 317.99786377]
[66.88453674 303.21817017]
[69.87213898 288.25030518]
[79.06504822 276.06616211]
[92.63800049 269.08489990]
[92.19349670 254.09149170]
[91.74900055 239.09808350]
[81.16433716 231.58764648]
[76.82084656 219.15016174]
[80.53750610 206.30747986]
[91.15830231 197.86860657]
[91.15830231 182.86860657]
[91.15830231 167.86860657]
[91.15830231 152.86860657]
[87.95958710 146.07083130]
[91.38716888 137.42575073]
[91.83166504 122.43234253]
[80.24246979 113.40042877]
[76.13724518 99.29255676]
[81.07101440 85.45265198]
[93.17491913 77.12315369]
[79.39209747 73.60240173]
[66.66801453 67.25589752]
[55.57426453 58.37175751]
[46.60858917 47.35202026]
[40.17250824 34.69446182]
[36.55336380 20.97011757]
[35.91147614 6.79750729]
[38.27305222 -7.18523169]
[43.52912903 -20.34907913]
[51.44059372 -32.10242844]
[61.64906311 -41.91767883]
[73.69310760 -49.35490799]
[87.02912140 -54.08160019]
[101.05584717 -55.88750839]
[102.38778687 -70.82825470]
[103.71972656 -85.76900482]
[105.05166626 -100.70975494]
[106.38360596 -115.65049744]
[107.71554565 -130.59124756]
[109.04747772 -145.53199768]
[110.37941742 -160.47274780]
[111.71135712 -175.41348267]
[97.72541046 -183.57768250]
[88.69976044 -196.95408630]
[86.38078308 -212.86474609]
[91.17818451 -228.15052795]
[102.09370422 -239.79830933]
[116.92832947 -245.53501892]
[117.81694031 -260.50866699]
[118.70555115 -275.48233032]
[113.60814667 -291.65182495]
[127.73464203 -301.02618408]
[140.65324402 -290.04684448]
[133.67919922 -274.59371948]
[132.79058838 -259.62005615]
[131.90199280 -244.64640808]
[144.40885925 -238.45204163]
[153.61668396 -227.90570068]
[158.09506226 -214.59504700]
[157.12890625 -200.54084778]
[150.83239746 -187.89030457]
[140.13664246 -178.58897400]
[126.65210724 -174.08155823]
[125.32016754 -159.14080811]
[123.98822784 -144.20005798]
[122.65628815 -129.25930786]
[121.32434845 -114.31855774]
[119.99241638 -99.37781525]
[118.66047668 -84.43706512]
[117.32853699 -69.49631500]
[115.99659729 -54.55556870]
[131.03520203 -49.59598160]
[144.48666382 -41.22464752]
[155.58976746 -29.91067123]
[163.71511841 -16.28980637]
[168.40075684 -1.12873328]
[169.37852478 14.71809006]
[166.58930969 30.35658836]
[160.18664551 44.90351105]
[150.52827454 57.53631592]
[138.15615845 67.53968811]
[123.76602936 74.34602356]
[108.16833496 77.56765747]
[119.75753021 86.59957123]
[123.86275482 100.70744324]
[118.92898560 114.54734802]
[106.82508087 122.87684631]
[106.38057709 137.87025452]
[106.15830231 152.86860657]
[106.15830231 167.86860657]
[106.15830231 182.86860657]
[106.15830231 197.86860657]
[118.72783661 209.92350769]
[118.77014923 227.00375366]
[106.74240875 238.65357971]
[107.18691254 253.64700317]
[107.63140869 268.64041138]
[121.59410095 274.80532837]
[131.49266052 286.42346191]
[135.36172485 301.18804932]
[132.43307495 316.16757202]
[123.28822327 328.38781738]
[109.74287415 335.42245483]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 99]
[7 98]
[8 97]
[12 94]
[13 93]
[14 92]
[15 91]
[17 90]
[18 89]
[22 85]
[36 73]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[50 58]
[51 57]
[52 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
