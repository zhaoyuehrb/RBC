%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:57:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAACAAGUGCUAUUCCAAUCUAAAAGUCUCUGAGGGAACCAUAGUAAAAAGUCUCUUAUAAAGUUAGCUUGCUAUAACAUGAA\
) } def
/len { sequence length } bind def

/coor [
[146.27282715 154.48574829]
[149.50241089 138.99726868]
[136.69851685 131.18316650]
[123.89462280 123.36906433]
[111.40903473 131.41496277]
[96.67010498 133.25624084]
[82.58885193 128.52925110]
[71.94638824 118.16757202]
[66.84465790 104.21771240]
[68.29127502 89.43482971]
[55.48737717 81.62072754]
[42.68348312 73.80662537]
[29.87958527 65.99251556]
[17.07568932 58.17841339]
[4.27179289 50.36430740]
[-8.94084740 43.26317215]
[-22.52257156 36.89632034]
[-36.10429382 30.52947044]
[-48.63365555 34.18681335]
[-59.89075851 28.42010498]
[-63.97252274 16.87628174]
[-77.31265259 10.01764679]
[-89.79831696 18.87014961]
[-104.96932220 20.89478111]
[-119.33948517 15.62629604]
[-129.60665894 4.27535200]
[-133.41149902 -10.54968548]
[-129.87969971 -25.44213295]
[-119.82283020 -36.97981262]
[-105.55189514 -42.51145172]
[-90.34625244 -40.76592255]
[-77.70003510 -32.14432907]
[-70.51926422 -18.62785530]
[-70.45401764 -3.32248521]
[-57.11388779 3.53614950]
[-39.77031708 1.63883531]
[-29.73744392 16.94774628]
[-16.15572166 23.31459618]
[-2.57399726 29.68144798]
[1.04043519 28.67039299]
[5.34469938 29.51833534]
[9.38051414 32.53714371]
[12.08589745 37.56040955]
[24.88979340 45.37451553]
[37.69369125 53.18862152]
[50.49758530 61.00272369]
[63.30148315 68.81683350]
[76.10537720 76.63093567]
[88.59096527 68.58503723]
[103.32989502 66.74375153]
[117.41114807 71.47074890]
[128.05361938 81.83242798]
[133.15534973 95.78228760]
[131.70872498 110.56517029]
[144.51261902 118.37927246]
[157.31651306 126.19337463]
[168.40568542 116.93270111]
[181.80577087 111.59003448]
[196.18148804 110.68328094]
[210.10484314 114.28904724]
[222.19697571 122.03636169]
[231.26469421 133.14479065]
[236.41822815 146.50303650]
[237.15847778 160.78013611]
[233.42538452 174.55802917]
[245.93534851 182.83454895]
[258.44531250 191.11105347]
[270.95529175 199.38757324]
[285.44085693 193.82450867]
[300.42108154 197.87081909]
[310.13574219 209.97059631]
[310.84936523 225.47125244]
[302.28753662 238.41246033]
[287.74246216 243.81806946]
[272.80703735 239.60949707]
[263.22418213 227.40502930]
[262.67877197 211.89753723]
[250.16879272 203.62103271]
[237.65882874 195.34451294]
[225.14886475 187.06799316]
[212.71450806 196.54685974]
[197.77317810 201.24285889]
[182.09869385 200.57952881]
[167.55830383 194.61776733]
[155.89033508 184.05076599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 56]
[3 55]
[4 54]
[10 48]
[11 47]
[12 46]
[13 45]
[14 44]
[15 43]
[16 39]
[17 38]
[18 37]
[21 35]
[22 34]
[65 80]
[66 79]
[67 78]
[68 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
