%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:58:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGAGGCCAGUGCACUCAAGCCUGAGCAAUAAGAAUAAAACCGAGUAGAACAAAAUAAAAAAUUCAAAAAACAAAACAAAACCCACACUCCAAAAACUAACAAAGAAUAAAUAAAUAAUAUAAAAAU\
) } def
/len { sequence length } bind def

/coor [
[181.41555786 126.36766052]
[170.45463562 122.47548676]
[159.85437012 117.68653870]
[149.68800354 112.03382111]
[140.02577209 105.55632019]
[130.93441772 98.29872131]
[122.47676849 90.31108856]
[111.18412781 100.18410492]
[100.01254272 110.19388580]
[88.96367645 120.33895111]
[77.91480255 130.48402405]
[73.65164185 138.68225098]
[66.47116089 140.73757935]
[55.17852402 150.61058044]
[54.37107468 166.39422607]
[42.58358002 176.92184448]
[26.80934906 175.94755554]
[16.40695572 164.04942322]
[17.54795265 148.28637695]
[29.55540848 138.01036072]
[45.30551147 139.31794739]
[56.59814835 129.44493103]
[67.76972961 119.43515015]
[78.81860352 109.29008484]
[89.86747742 99.14501190]
[93.24848938 91.72852325]
[101.31111908 88.89146423]
[112.60375214 79.01845551]
[101.25664520 62.12459946]
[92.47969055 43.76567459]
[86.45790863 24.32991600]
[83.31806183 4.22823286]
[83.12597656 -16.11445808]
[85.88519287 -36.26822662]
[91.53687286 -55.80720901]
[99.96105194 -74.31861877]
[110.97921753 -91.41144562]
[124.35806274 -106.72473145]
[139.81443787 -119.93520355]
[157.02134705 -130.76405334]
[175.61485291 -138.98289490]
[195.20178223 -144.41850281]
[215.36802673 -146.95649719]
[235.68733215 -146.54377747]
[237.87135315 -161.38392639]
[240.05537415 -176.22407532]
[242.23939514 -191.06422424]
[227.86259460 -195.44203186]
[214.29888916 -201.91378784]
[201.85130310 -210.33491516]
[190.79791260 -220.51725769]
[181.38566589 -232.23336792]
[173.82482910 -245.22149658]
[168.28431702 -259.19146729]
[164.88789368 -273.83123779]
[163.71145630 -288.81365967]
[164.78128052 -303.80410767]
[168.07347107 -318.46762085]
[173.51445007 -332.47668457]
[180.98269653 -345.51824951]
[190.31137085 -357.30102539]
[201.29203796 -367.56176758]
[213.67939758 -376.07122803]
[227.19671631 -382.63931274]
[241.54200745 -387.11929321]
[256.39480591 -389.41107178]
[271.42327881 -389.46343994]
[286.29168701 -387.27526855]
[300.66784668 -382.89541626]
[314.23065186 -376.42172241]
[326.67703247 -367.99884033]
[337.72897339 -357.81491089]
[347.13952637 -346.09747314]
[354.69851685 -333.10824585]
[360.23706055 -319.13748169]
[363.63137817 -304.49725342]
[364.80569458 -289.51464844]
[363.73373413 -274.52438354]
[360.43945312 -259.86129761]
[354.99645996 -245.85304260]
[347.52636719 -232.81251526]
[338.19604492 -221.03106689]
[327.21389771 -210.77191162]
[314.82531738 -202.26420593]
[301.30706787 -195.69805908]
[286.96115112 -191.22012329]
[272.10803223 -188.93046570]
[257.07952881 -188.88021851]
[254.89552307 -174.04006958]
[252.71150208 -159.19990540]
[250.52749634 -144.35975647]
[261.80880737 -141.58737183]
[272.82135010 -137.88778687]
[283.48901367 -133.28646851]
[293.73815918 -127.81514740]
[303.49795532 -121.51155090]
[312.70095825 -114.41915131]
[321.28359985 -106.58689117]
[329.18655396 -98.06879425]
[336.35522461 -88.92366028]
[342.74005127 -79.21458435]
[348.29684448 -69.00859070]
[352.98724365 -58.37611771]
[356.77877808 -47.39057922]
[359.64520264 -36.12780380]
[361.56668091 -24.66555786]
[362.52984619 -13.08298397]
[362.52801514 -1.46006072]
[361.56112671 10.12294960]
[359.63580322 21.58605385]
[356.76528931 32.85008240]
[352.96932983 43.83723450]
[348.27407837 54.47161865]
[342.71188354 64.67977142]
[336.32116699 74.39117432]
[329.14596558 83.53872681]
[321.23574829 92.05922699]
[312.64517212 99.89378357]
[303.43344116 106.98826599]
[293.66418457 113.29361725]
[283.40481567 118.76624298]
[272.72613525 123.36831665]
[261.70187378 127.06797791]
[250.40814209 129.83963013]
[238.92291260 131.66409302]
[227.32548523 132.52867126]
[215.69593811 132.42735291]
[204.11460876 131.36076355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 28]
[8 27]
[9 25]
[10 24]
[11 23]
[13 22]
[14 21]
[44 91]
[45 90]
[46 89]
[47 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
