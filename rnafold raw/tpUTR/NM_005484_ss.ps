%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 08:31:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUGAUAUUAAAUAAACCAGAGAUCUGAUCUUCAAGCAAGAAAAUAAGCAGUGUUGUACUUGUGAAUUUUGUGAUAUUUUAUGUAAUAAAAACUGUACAGGUCUA\
) } def
/len { sequence length } bind def

/coor [
[61.23220444 236.92448425]
[61.13733673 251.99945068]
[57.43687057 266.61349487]
[50.34594345 279.91693115]
[40.27681351 291.13638306]
[27.81488991 299.61953735]
[13.68469048 304.87319946]
[-1.29227376 306.59191895]
[-16.24526024 304.67578125]
[-30.30492401 299.23617554]
[-42.65385437 290.58935547]
[-52.57409668 279.23806763]
[-59.48890686 265.84219360]
[-62.99626541 251.18061829]
[-62.89225769 236.10572815]
[-59.18292999 221.49394226]
[-52.08393860 208.19477844]
[-42.00801086 196.98143005]
[-29.54094505 188.50582886]
[-15.40756321 183.26074219]
[-0.42956010 181.55110168]
[14.52226257 183.47631836]
[28.57862473 188.92443848]
[37.18227386 176.63716125]
[45.78591919 164.34988403]
[54.38956451 152.06260681]
[62.99321365 139.77531433]
[71.59685516 127.48803711]
[80.20050812 115.20075989]
[75.48323059 104.69160461]
[75.98717499 93.18331146]
[63.45485687 84.94067383]
[50.92253876 76.69803619]
[38.39022446 68.45540619]
[22.45107841 70.27836609]
[11.19010448 58.85164642]
[13.24575710 42.94083786]
[27.04111481 34.75135422]
[41.99356079 40.56546783]
[46.63285828 55.92308807]
[59.16517639 64.16571808]
[71.69749451 72.40835571]
[84.22981262 80.65099335]
[88.83952332 77.67228699]
[93.98876953 75.77298737]
[99.42862701 75.04490662]
[104.89610291 75.52325439]
[110.12688446 77.18489075]
[114.86809540 79.94949341]
[118.89052582 83.68341064]
[132.66377258 77.74221039]
[146.43701172 71.80101776]
[160.21025085 65.85981750]
[173.98348999 59.91862488]
[184.53813171 44.91774368]
[201.83624268 47.44974899]
[215.43084717 41.11047363]
[229.02546692 34.77120209]
[242.62008667 28.43192673]
[256.12106323 21.89560509]
[269.52554321 15.16361809]
[270.76611328 1.34796798]
[278.64224243 -9.93796349]
[290.98522949 -15.77528954]
[304.48901367 -14.71995735]
[315.59552002 -7.15837288]
[329.19012451 -13.49764729]
[342.78475952 -19.83692169]
[356.37936401 -26.17619514]
[359.20785522 -41.43330002]
[370.48721313 -52.08956146]
[385.88027954 -54.04743195]
[399.46810913 -46.55406570]
[406.02590942 -32.49082184]
[403.03204346 -17.26529694]
[391.63778687 -6.73202181]
[376.22436523 -4.94125271]
[362.71862793 -12.58157825]
[349.12402344 -6.24230385]
[335.52938843 0.09696985]
[321.93478394 6.43624401]
[319.36444092 22.57722092]
[307.60131836 34.16144943]
[291.09582520 36.53115463]
[276.25753784 28.56810760]
[262.85305786 35.30009460]
[258.21664429 41.20573425]
[248.95936584 42.02654266]
[235.36474609 48.36581802]
[221.77012634 54.70509338]
[208.17550659 61.04436493]
[203.68388367 72.38050842]
[192.28047180 77.73148346]
[179.92468262 73.69186401]
[166.15144348 79.63306427]
[152.37820435 85.57425690]
[138.60496521 91.51545715]
[124.83172607 97.45664978]
[115.76522827 119.35305786]
[92.48778534 123.80440521]
[83.88414001 136.09169006]
[75.28049469 148.37896729]
[66.67684937 160.66624451]
[58.07320023 172.95352173]
[49.46955109 185.24081421]
[40.86590576 197.52809143]
[50.79302979 208.87338257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 106]
[24 105]
[25 104]
[26 103]
[27 102]
[28 101]
[29 100]
[31 43]
[32 42]
[33 41]
[34 40]
[50 98]
[51 97]
[52 96]
[53 95]
[54 94]
[56 91]
[57 90]
[58 89]
[59 88]
[60 86]
[61 85]
[66 81]
[67 80]
[68 79]
[69 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
