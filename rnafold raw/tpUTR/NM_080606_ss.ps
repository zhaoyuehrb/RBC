%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:56:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGCGGGCCCCCGGCCCUCCCGCACGCGUCCUCCGAUCGCCCCUGUGACUGUCUCUCUGCCCGGACAG\
) } def
/len { sequence length } bind def

/coor [
[93.84384918 139.43283081]
[77.38650513 132.88580322]
[65.38284302 119.86199188]
[51.20126343 124.74900055]
[37.01968384 129.63600159]
[24.88587761 145.45686340]
[6.10558987 141.76522827]
[-7.58857822 147.88648987]
[-21.28274727 154.00773621]
[-34.97691345 160.12899780]
[-48.67108154 166.25024414]
[-60.66392136 178.23390198]
[-75.49920654 170.02716064]
[-71.72000122 153.49980164]
[-54.79233932 152.55607605]
[-41.09816742 146.43482971]
[-27.40400124 140.31356812]
[-13.70983219 134.19230652]
[-0.01566412 128.07106018]
[2.91956306 117.87611389]
[11.26819801 110.97341156]
[22.27844429 109.96527100]
[32.13267517 115.45442963]
[46.31425476 110.56742096]
[60.49583435 105.68041229]
[62.51775360 86.29133606]
[73.48226166 70.17290497]
[90.77341461 61.17067337]
[90.10991669 46.18535614]
[89.44641876 31.20003700]
[88.45157623 16.23306465]
[87.12586975 1.29176223]
[77.26548767 -11.81185532]
[83.93148041 -26.79506302]
[100.26645660 -28.24442291]
[109.46638489 -14.66895485]
[102.06717682 -0.03393932]
[103.39287567 14.90736294]
[107.24458313 21.49980354]
[104.43173981 30.53653717]
[105.09523773 45.52185440]
[105.75873566 60.50717545]
[113.81726074 62.55764771]
[121.27598572 66.23346710]
[127.81114197 71.37506866]
[133.13903809 77.75924683]
[137.02838135 85.10888672]
[139.31036377 93.10494232]
[139.88591003 101.40029907]
[138.73004150 109.63487244]
[135.89291382 117.45120239]
[147.91007996 126.42829132]
[159.92723083 135.40538025]
[171.94438171 144.38246155]
[183.96153259 153.35954285]
[195.97868347 162.33662415]
[210.75817871 157.60946655]
[225.48301697 162.50422668]
[234.49119568 175.13879395]
[234.31889343 190.65492249]
[225.03234863 203.08631897]
[210.20243835 207.65287781]
[195.53157043 202.59866333]
[186.66098022 189.86711121]
[187.00160217 174.35377502]
[174.98445129 165.37669373]
[162.96730042 156.39961243]
[150.95013428 147.42253113]
[138.93298340 138.44544983]
[126.91583252 129.46835327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[28 42]
[29 41]
[30 40]
[31 38]
[32 37]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
