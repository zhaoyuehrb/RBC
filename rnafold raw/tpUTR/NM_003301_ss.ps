%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:30:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAUGAAUUAGAAGAAAAUGGAUGACAAAGAAAAUGAGAAUCUGUGCAGUCAUCAACAAAAGGGAGAACAUGGCCAAUAGUCAUAUGUGAAGACAGAGCAGAUCAGUCUUUGUCAAUGCUCUAACAA\
) } def
/len { sequence length } bind def

/coor [
[27.64443588 504.75817871]
[20.60486221 518.08886719]
[10.57907200 529.34710693]
[-1.85004652 537.87823486]
[-15.95988178 543.18634033]
[-30.93010712 544.96276855]
[-45.89037323 543.10430908]
[-59.97090530 537.71899414]
[-72.35308838 529.11981201]
[-82.31703186 517.80688477]
[-89.28344727 504.43777466]
[-92.84731293 489.78982544]
[-92.80143738 474.71466064]
[-89.14848328 460.08865356]
[-82.10083008 446.76223755]
[-72.06821442 435.51010132]
[-59.63392639 426.98651123]
[-45.52087402 421.68695068]
[-30.54957581 419.91955566]
[-15.59043980 421.78710938]
[-10.23197651 407.77685547]
[-4.87351322 393.76663208]
[0.48494989 379.75637817]
[5.15493345 365.50186157]
[9.12535954 351.03689575]
[13.09578705 336.57189941]
[17.06621361 322.10693359]
[21.03664017 307.64193726]
[25.00706673 293.17694092]
[28.97749329 278.71197510]
[32.94792175 264.24697876]
[36.91834641 249.78201294]
[31.02744865 241.27874756]
[30.84151268 230.71504211]
[36.66787338 221.63780212]
[46.75413132 217.23054504]
[51.42411423 202.97602844]
[56.09409714 188.72151184]
[54.75786972 185.35270691]
[55.05194855 181.15289307]
[57.35572433 176.92646790]
[61.66048431 173.61900330]
[67.35852051 159.74340820]
[73.05655670 145.86779785]
[78.75460052 131.99220276]
[84.45263672 118.11660004]
[76.78826141 105.58094788]
[77.91629028 90.93128967]
[87.40943146 79.71677399]
[101.67176056 76.18536377]
[107.36979675 62.30976105]
[113.06784058 48.43415833]
[111.15278625 32.72928238]
[123.14479828 23.89520645]
[128.84283447 10.01960278]
[134.54087830 -3.85600066]
[134.92115784 -13.08859634]
[140.55030823 -17.99738884]
[146.58454895 -31.73012352]
[133.07699585 -25.20739365]
[118.07866669 -25.43145370]
[104.77198792 -32.35476303]
[95.98042297 -44.50830078]
[93.56941986 -59.31327057]
[98.05055237 -73.62827301]
[108.47299194 -84.41589355]
[122.62525940 -89.38716125]
[137.50445557 -87.48723602]
[149.95343018 -79.11926270]
[157.33070374 -66.05879974]
[158.07096863 -51.07726669]
[167.23858643 -62.94971466]
[176.40618896 -74.82215881]
[185.57379150 -86.69461060]
[194.74139404 -98.56705475]
[194.13015747 -114.59845734]
[206.37648010 -124.96219635]
[222.08604431 -121.70809174]
[229.20780945 -107.33242035]
[222.27857971 -92.86296082]
[206.61384583 -89.39945221]
[197.44624329 -77.52700043]
[188.27864075 -65.65455627]
[179.11102295 -53.78210831]
[169.94342041 -41.90966034]
[168.94306946 -32.31428909]
[160.31727600 -25.69589043]
[154.28305054 -11.96315479]
[148.41647339 1.84203756]
[142.71844482 15.71764088]
[137.02040100 29.59324455]
[139.34301758 44.30564499]
[126.94344330 54.13219452]
[121.24539948 68.00779724]
[115.54736328 81.88339996]
[123.21173859 94.41905212]
[122.08370972 109.06871033]
[112.59056854 120.28322601]
[98.32823944 123.81463623]
[92.63020325 137.69023132]
[86.93215942 151.56584167]
[81.23412323 165.44145203]
[75.53608704 179.31704712]
[70.34861755 193.39149475]
[65.67862701 207.64601135]
[61.00864792 221.90052795]
[66.12101746 241.32907104]
[51.38332748 253.75244141]
[47.41290283 268.21740723]
[43.44247437 282.68240356]
[39.47204971 297.14736938]
[35.50162125 311.61236572]
[31.53119659 326.07733154]
[27.56076813 340.54232788]
[23.59034157 355.00732422]
[19.61991501 369.47229004]
[20.95483589 373.85424805]
[20.77700996 377.99795532]
[19.36206627 381.43975830]
[17.11222076 383.86041260]
[14.49519157 385.11483765]
[9.13672829 399.12509155]
[3.77826476 413.13531494]
[-1.58019853 427.14556885]
[10.80719376 435.73718262]
[20.77799416 447.04412842]
[27.75251198 460.40896606]
[31.32526016 475.05474854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 124]
[21 123]
[22 122]
[23 121]
[24 116]
[25 115]
[26 114]
[27 113]
[28 112]
[29 111]
[30 110]
[31 109]
[32 108]
[36 106]
[37 105]
[38 104]
[42 103]
[43 102]
[44 101]
[45 100]
[46 99]
[50 95]
[51 94]
[52 93]
[54 91]
[55 90]
[56 89]
[58 88]
[59 87]
[71 85]
[72 84]
[73 83]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
