%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:06:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGACAUCCAUCCUGACCCCACCUCAUCAGCCAGGGAGCUCCCUGAAGACAGGCCAUCGAGAGAGGCACACAACAGGCUGUGGUCUAAAAUAAACUUUUAAUUGCACA\
) } def
/len { sequence length } bind def

/coor [
[204.98730469 338.93112183]
[212.66577148 325.96432495]
[223.12805176 315.11822510]
[215.01843262 302.49942017]
[206.90882874 289.88061523]
[198.79920959 277.26184082]
[185.86437988 276.28436279]
[175.73306274 267.87411499]
[172.29064941 254.96240234]
[177.02679443 242.25828552]
[169.28082275 229.41304016]
[156.08267212 222.50958252]
[155.58212280 206.69628906]
[147.83616638 193.85105896]
[140.09019470 181.00582886]
[132.34423828 168.16058350]
[121.58389282 172.29212952]
[110.31976318 174.73632812]
[98.81477356 175.43614197]
[87.33744049 174.37522888]
[76.15566254 171.57836914]
[65.53042603 167.11082458]
[55.70972443 161.07688904]
[46.92277908 153.61738586]
[39.37468719 144.90641785]
[33.24161911 135.14732361]
[28.66672707 124.56785583]
[25.75679207 113.41497040]
[24.57973099 101.94897461]
[25.16301918 90.43748474]
[27.49304199 79.14918518]
[31.51541328 68.34755707]
[37.13625336 58.28471756]
[25.52412796 48.78953171]
[13.91200447 39.29434586]
[2.29988003 29.79915810]
[-9.31224442 20.30397224]
[-25.57547188 18.19696426]
[-31.63173485 2.95709109]
[-21.25086975 -9.73817158]
[-5.11182117 -6.82902622]
[0.18294273 8.69184780]
[11.79506683 18.18703461]
[23.40719032 27.68222046]
[35.01931381 37.17740631]
[46.63143921 46.67259598]
[53.91211700 40.26791000]
[61.95413208 34.84996033]
[70.62464142 30.50824738]
[79.78041077 27.31448746]
[89.27019501 25.32144356]
[98.93722534 24.56203842]
[108.62181854 25.04881859]
[118.16397858 26.77373886]
[123.20471954 12.64607334]
[128.24545288 -1.48159206]
[128.19674683 -10.76911449]
[133.63713074 -15.93721294]
[139.07923889 -29.91517258]
[136.05751038 -46.03352356]
[148.68000793 -56.50275040]
[163.96177673 -50.55301285]
[166.18226624 -34.30488968]
[153.05720520 -24.47305679]
[147.61508179 -10.49509716]
[142.37312317 3.55914879]
[137.33238220 17.68681335]
[132.29164124 31.81447983]
[150.65779114 44.09111404]
[164.68055725 61.16135025]
[173.15763855 81.56159973]
[175.36222839 103.54274750]
[171.10527039 125.22013855]
[160.75178528 144.73516846]
[145.18946838 160.41462708]
[152.93544006 173.25985718]
[160.68139648 186.10510254]
[168.42735291 198.95033264]
[182.17956543 206.77256775]
[182.12606812 221.66708374]
[189.87202454 234.51231384]
[206.86589050 238.34910583]
[215.71746826 252.96333313]
[211.41801453 269.15222168]
[219.52763367 281.77102661]
[227.63723755 294.38983154]
[235.74685669 307.00863647]
[249.95898438 301.99743652]
[264.94375610 300.39944458]
[279.89303589 302.30087280]
[294.00067139 307.59915161]
[306.50579834 316.00857544]
[316.73406982 327.07559204]
[324.13391113 340.20339966]
[328.30618286 354.68405151]
[329.02593994 369.73657227]
[326.25436401 384.54922485]
[320.14089966 398.32321167]
[311.01525879 410.31567383]
[299.36953735 419.87988281]
[285.83181763 426.50006104]
[271.13217163 429.81921387]
[256.06329346 429.65829468]
[241.43785095 426.02603149]
[228.04458618 419.11825562]
[216.60577393 409.30752563]
[207.73829651 397.12292480]
[201.92036438 383.22155762]
[199.46571350 368.35308838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 87]
[4 86]
[5 85]
[6 84]
[10 81]
[11 80]
[13 78]
[14 77]
[15 76]
[16 75]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[54 68]
[55 67]
[56 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
