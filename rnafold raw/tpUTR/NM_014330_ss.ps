%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:38:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCAACUGGUUUGCCUAUAAUUUAUUAACUAUUUAUUUUUUCUAAGUGUGGGUUUAUAUAAGGAAUAAAGCCUUUUGAUUUGUAGCGA\
) } def
/len { sequence length } bind def

/coor [
[53.85771942 225.29444885]
[47.28215408 238.77635193]
[40.70658493 252.25827026]
[34.13101959 265.74017334]
[35.81410980 282.05273438]
[22.37175751 291.44607544]
[7.63230085 284.25717163]
[6.75843048 267.88131714]
[20.64910889 259.16461182]
[27.22467613 245.68269348]
[33.80024338 232.20079041]
[40.37580872 218.71887207]
[46.47686005 205.01568604]
[52.09595871 191.10794067]
[57.71505737 177.20018005]
[57.29203415 169.65528870]
[63.78060150 162.91065979]
[69.88165283 149.20747375]
[75.98269653 135.50428772]
[82.08374786 121.80110931]
[88.18479919 108.09792328]
[86.91442871 94.17392731]
[98.11202240 85.80102539]
[104.21306610 72.09783936]
[110.31411743 58.39466095]
[100.14376831 48.26421738]
[94.08783722 35.28247833]
[92.86556244 21.04009438]
[96.60529327 7.27436399]
[104.83137512 -4.34267998]
[116.52453613 -12.40736485]
[130.24815369 -15.95396233]
[144.32473755 -14.57030392]
[150.90031433 -28.05221558]
[157.47587585 -41.53412628]
[164.05143738 -55.01603699]
[170.62701416 -68.49794769]
[177.20257568 -81.97985840]
[183.77815247 -95.46176910]
[190.35371399 -108.94367981]
[196.92927551 -122.42559052]
[203.50485229 -135.90750122]
[202.94757080 -140.73420715]
[203.99148560 -144.99069214]
[206.21792603 -148.21003723]
[209.09277344 -150.12934875]
[212.05119324 -150.71020508]
[220.43908691 -163.14576721]
[228.82698059 -175.58132935]
[237.21487427 -188.01689148]
[245.60276794 -200.45246887]
[246.20632935 -216.84049988]
[260.82516479 -224.27162170]
[274.42068481 -215.10134888]
[273.00695801 -198.76324463]
[258.03833008 -192.06457520]
[249.65043640 -179.62899780]
[241.26254272 -167.19343567]
[232.87464905 -154.75787354]
[224.48675537 -142.32231140]
[216.98675537 -129.33193970]
[210.41119385 -115.85002136]
[203.83561707 -102.36811066]
[197.26005554 -88.88619995]
[190.68449402 -75.40428925]
[184.10891724 -61.92237854]
[177.53335571 -48.44046783]
[170.95779419 -34.95855713]
[164.38221741 -21.47664833]
[157.80665588 -7.99473715]
[168.43858337 3.61958885]
[173.85441589 18.44541168]
[173.20915222 34.25453949]
[166.57110596 48.65914536]
[154.91590881 59.47242737]
[139.98326111 65.04058838]
[124.01730347 64.49571228]
[117.91625214 78.19889069]
[111.81520081 91.90207672]
[113.08557129 105.82607269]
[101.88797760 114.19897461]
[95.78693390 127.90216064]
[89.68588257 141.60534668]
[83.58483124 155.30851746]
[77.48377991 169.01170349]
[71.62281799 182.81927490]
[66.00371552 196.72703552]
[60.38461685 210.63479614]
[60.95588303 217.58074951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[13 88]
[14 87]
[15 86]
[17 85]
[18 84]
[19 83]
[20 82]
[21 81]
[23 79]
[24 78]
[25 77]
[33 70]
[34 69]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
