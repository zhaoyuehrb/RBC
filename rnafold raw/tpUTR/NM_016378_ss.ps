%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:54:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCAGGCCCAGCCGCCAGACCUCAGAGAUCUCACCAGCGGGGUGCUUGCCAUUCUGAAGAUAAUAAAAUGAAUGUGUUGCAAAUUGA\
) } def
/len { sequence length } bind def

/coor [
[157.04716492 162.79348755]
[164.76393127 149.93069458]
[176.15545654 140.17196655]
[190.04962158 134.52102661]
[175.71975708 130.08764648]
[161.38987732 125.65428162]
[147.06001282 121.22090912]
[132.73013306 116.78753662]
[118.32425690 112.60774994]
[103.84684753 108.68286133]
[98.59682465 110.28592682]
[92.84462738 108.70131683]
[88.50553894 103.93656921]
[74.34104919 99.00023651]
[60.17656708 94.06390381]
[46.01208115 89.12757111]
[24.63142776 95.39682770]
[10.26960754 79.33004761]
[-4.44859171 76.43615723]
[-19.16679192 73.54226685]
[-34.20043182 78.47179413]
[-45.19587326 68.42443085]
[-59.91407013 65.53054047]
[-76.62213898 68.40750885]
[-84.01192474 53.14882660]
[-71.39524841 41.82381058]
[-57.02017975 50.81233978]
[-42.30198288 53.70623016]
[-28.32108498 48.56971359]
[-16.27289963 58.82406616]
[-1.55470073 61.71795654]
[13.16349888 64.61184692]
[18.96628952 58.58198547]
[26.82043076 55.42688751]
[35.37322617 55.77447128]
[43.11667252 59.64195251]
[48.65334702 66.41905975]
[50.94841766 74.96308899]
[65.11289978 79.89942169]
[79.27738190 84.83575439]
[93.44187164 89.77208710]
[107.77174377 94.20545959]
[122.24914551 98.13034821]
[131.58084106 97.35984802]
[137.16351318 102.45766449]
[151.49337769 106.89103699]
[165.82325745 111.32440948]
[180.15312195 115.75778198]
[194.48300171 120.19115448]
[201.97863770 118.17773438]
[208.62123108 120.44071198]
[223.09863281 116.51582336]
[237.57603455 112.59093475]
[252.05343628 108.66604614]
[266.53085327 104.74115753]
[268.09027100 89.64371490]
[275.00167847 76.13088226]
[286.33041382 66.03015137]
[300.54428101 60.70757294]
[315.72103882 60.88296890]
[329.80810547 66.53262329]
[340.90036011 76.89247131]
[347.49765015 90.56142426]
[348.70773315 105.69087219]
[344.36697388 120.23467255]
[335.06243896 132.22590637]
[322.05242920 140.04286194]
[307.09649658 142.62834167]
[292.21731567 139.63269043]
[279.42712402 131.46104431]
[270.45574951 119.21855927]
[255.97833252 123.14344788]
[241.50093079 127.06833649]
[227.02352905 130.99322510]
[212.54611206 134.91812134]
[226.23274231 141.05622864]
[237.27262878 151.21105957]
[244.53045654 164.33828735]
[247.25982666 179.08789062]
[245.18002319 193.94299316]
[238.50494385 207.37591553]
[227.92108154 218.00520325]
[214.51686096 224.73771667]
[199.67077637 226.88110352]
[184.90963745 224.21490479]
[171.75146484 217.01335144]
[161.54945374 206.01702881]
[155.35279846 192.35681152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 49]
[5 48]
[6 47]
[7 46]
[8 45]
[9 43]
[10 42]
[13 41]
[14 40]
[15 39]
[16 38]
[18 32]
[19 31]
[20 30]
[22 28]
[23 27]
[51 75]
[52 74]
[53 73]
[54 72]
[55 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
