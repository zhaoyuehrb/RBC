%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 00:29:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCAGUCCUGGGCUUUCGGUCCCUUUCUUUUAAUGCCCAUCCUCAUUCCUACUCUGAAUUGUCACACUUUUCCCUUCCCCACCAGUUCUUUAAUAAAAGUAUUUGAAAGGCAACA\
) } def
/len { sequence length } bind def

/coor [
[85.42046356 147.13288879]
[78.86085510 160.62255859]
[72.30123901 174.11224365]
[73.22457123 189.90649414]
[60.70059586 197.96870422]
[54.14098740 211.45838928]
[55.84337997 227.76892090]
[42.41215134 237.17819214]
[27.66419792 230.00671387]
[26.77095222 213.63191223]
[40.65130615 204.89877319]
[47.21091461 191.40908813]
[45.81839752 176.57972717]
[58.81156158 167.55264282]
[65.37117004 154.06295776]
[71.93077850 140.57327271]
[65.76172638 135.52200317]
[60.48690414 129.54296875]
[56.24407196 122.79233551]
[53.14405441 115.44641876]
[51.26780701 107.69707489]
[50.66433716 99.74670410]
[51.34941101 91.80294800]
[53.30512619 84.07328033]
[56.48041153 76.75958252]
[60.79233551 70.05287170]
[66.12827301 64.12831116]
[72.34886932 59.14064789]
[79.29164886 55.22013855]
[86.77529144 52.46918106]
[94.60432434 50.95962524]
[102.57428741 50.73089600]
[110.47701263 51.78896713]
[118.10610962 54.10620499]
[125.26230621 57.62208557]
[131.75871277 62.24478531]
[143.04727173 52.36711502]
[154.33583069 42.48944473]
[165.62438965 32.61177444]
[166.82867432 17.08156204]
[178.41758728 7.22500992]
[193.21585083 8.46881104]
[204.50440979 -1.40885925]
[196.58023071 -14.98656654]
[191.41716003 -29.83072281]
[189.20637512 -45.38638306]
[190.02874756 -61.07234955]
[193.85186768 -76.30289459]
[200.53128052 -90.50962067]
[209.81596375 -103.16268158]
[221.35778809 -113.79055023]
[234.72456360 -121.99755859]
[249.41613770 -127.47867584]
[264.88327026 -130.03080750]
[280.54800415 -129.56031799]
[295.82537842 -126.08651733]
[310.14523315 -119.74079895]
[322.97341919 -110.76173401]
[333.72027588 -121.22621155]
[344.46713257 -131.69067383]
[355.21395874 -142.15515137]
[365.96081543 -152.61962891]
[376.70767212 -163.08410645]
[369.47393799 -176.33459473]
[366.08453369 -191.04562378]
[366.79095459 -206.12553406]
[371.54077148 -220.45529175]
[379.98153687 -232.97152710]
[391.48687744 -242.74545288]
[405.20300293 -249.05178833]
[420.11215210 -251.42254639]
[435.10787964 -249.68182373]
[449.07748413 -243.95878601]
[460.98425293 -234.67810059]
[469.94467163 -222.52847290]
[475.29382324 -208.41148376]
[476.63473511 -193.37472534]
[473.86791992 -178.53398132]
[467.19869995 -164.99057007]
[457.12194824 -153.74949646]
[444.38546753 -145.64491272]
[429.93432617 -141.27824402]
[414.84097290 -140.97352600]
[400.22537231 -144.75334167]
[387.17214966 -152.33724976]
[376.42529297 -141.87277222]
[365.67843628 -131.40830994]
[354.93157959 -120.94383240]
[344.18475342 -110.47935486]
[333.43789673 -100.01488495]
[341.43557739 -88.12857819]
[347.21618652 -75.01619720]
[350.59790039 -61.08717346]
[351.47369385 -46.77669525]
[349.81497192 -32.53208542]
[345.67230225 -18.79884720]
[339.17401123 -6.00670290]
[330.52209473 5.44383335]
[319.98605347 15.19400311]
[307.89443970 22.93804169]
[294.62460327 28.43276787]
[280.59091187 31.50522041]
[266.23187256 32.05810165]
[251.99635315 30.07285881]
[238.32957458 25.61030006]
[225.65925598 18.80873871]
[214.38208008 9.87970257]
[203.09352112 19.75737381]
[202.36221313 34.58979797]
[191.05471802 44.76796722]
[175.50205994 43.90033722]
[164.21350098 53.77800751]
[152.92494202 63.65567780]
[141.63638306 73.53334808]
[149.18312073 96.11505127]
[145.27528381 119.60155487]
[130.82298279 138.52291870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[5 12]
[6 11]
[36 114]
[37 113]
[38 112]
[39 111]
[42 108]
[43 107]
[58 90]
[59 89]
[60 88]
[61 87]
[62 86]
[63 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
