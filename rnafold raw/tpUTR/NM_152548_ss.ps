%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:03:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUUUCAGUCAUCUUCUUUUUCAUCAGCCAAUGGAGUGAUUUGUUGGAAAAAGUUCUGAAGAAGAAAGUUACUAUCUCUGGGAUGUUUACUGCUUCUAAUGUCUCCUUUUAAGGAGACGAAUGUACCAGAAAAAUAAUAAAGCAAAGAAGCUUCGG\
) } def
/len { sequence length } bind def

/coor [
[79.90174103 145.23490906]
[73.94646454 142.08741760]
[68.47364807 138.16053772]
[63.58464050 133.52699280]
[59.36998367 128.27258301]
[55.90771866 122.49462891]
[53.26196671 116.30010986]
[51.48171234 109.80374146]
[50.59993362 103.12582397]
[35.65918732 101.79388428]
[20.71843719 100.46194458]
[6.28573799 106.94328308]
[-5.70421886 98.10642242]
[-20.64496613 96.77448273]
[-35.07766724 103.25582123]
[-47.06762314 94.41895294]
[-62.00836945 93.08701324]
[-76.94911957 91.75507355]
[-91.88986969 90.42313385]
[-106.83061218 89.09120178]
[-121.77136230 87.75926208]
[-136.71211243 86.42732239]
[-151.65286255 85.09538269]
[-166.59359741 83.76344299]
[-181.53434753 82.43150330]
[-192.04866028 99.24701691]
[-209.53764343 108.43183136]
[-229.19401550 107.55006409]
[-245.65933228 96.92079926]
[-254.48475647 79.50959015]
[-269.48400879 79.65777588]
[-284.48327637 79.80596161]
[-299.48254395 79.95414734]
[-314.48181152 80.10233307]
[-329.48107910 80.25051880]
[-344.48034668 80.39870453]
[-359.47961426 80.54689026]
[-373.31716919 89.34772491]
[-387.73056030 81.52560425]
[-387.89257812 65.12725830]
[-373.63653564 57.02189636]
[-359.62780762 65.54762268]
[-344.62854004 65.39943695]
[-329.62927246 65.25125122]
[-314.63000488 65.10306549]
[-299.63073730 64.95487976]
[-284.63146973 64.80669403]
[-269.63220215 64.65850830]
[-254.63293457 64.51032257]
[-251.23330688 54.50527573]
[-245.15464783 45.83606720]
[-236.87413025 39.20385742]
[-227.04759216 35.14910507]
[-216.45758057 34.00751495]
[-205.95104980 35.88228989]
[-196.37161255 40.63492966]
[-188.49177551 47.89536667]
[-182.95072937 57.09077835]
[-180.20240784 67.49076080]
[-165.26167297 68.82270050]
[-150.32092285 70.15463257]
[-135.38017273 71.48657227]
[-120.43942261 72.81851196]
[-105.49867249 74.15045166]
[-90.55792999 75.48239136]
[-75.61717987 76.81433105]
[-60.67643356 78.14626312]
[-45.73568344 79.47820282]
[-32.37164688 72.90159607]
[-19.31302834 81.83373260]
[-4.37228012 83.16567230]
[8.99175739 76.58906555]
[22.05037689 85.52120209]
[36.99112320 86.85314178]
[51.93187332 88.18507385]
[65.24127197 64.75843048]
[88.84929657 51.77346039]
[115.76114655 53.07747269]
[138.00314331 68.28410339]
[150.84281921 60.52891159]
[163.68247986 52.77372360]
[176.52214050 45.01853180]
[189.36181641 37.26334381]
[197.17417908 23.50552368]
[212.06871033 23.54832077]
[224.90838623 15.79313183]
[237.74804688 8.03794289]
[250.58772278 0.28275374]
[263.42736816 -7.47243547]
[276.26705933 -15.22762489]
[261.30352783 -16.27298355]
[248.21905518 -23.60761452]
[239.51924133 -35.82699203]
[236.87001038 -50.59119034]
[240.77868652 -65.07298279]
[250.49678040 -76.49920654]
[264.16336060 -82.68183136]
[279.16134644 -82.43693542]
[292.61877441 -75.81140137]
[301.95861816 -64.07397461]
[305.39239502 -49.47229385]
[302.26254272 -34.80245972]
[293.16665649 -22.87216187]
[307.46868896 -27.39452553]
[321.77072144 -31.91688728]
[336.07275391 -36.43925095]
[350.37478638 -40.96161270]
[364.67681885 -45.48397827]
[378.97888184 -50.00634003]
[389.64276123 -62.46480942]
[405.71224976 -59.19326401]
[410.65646362 -43.55718231]
[399.38916016 -31.64163017]
[383.50122070 -35.70430374]
[369.19918823 -31.18194008]
[354.89715576 -26.65957832]
[340.59512329 -22.13721466]
[326.29309082 -17.61485100]
[311.99105835 -13.09248829]
[297.68902588 -8.57012558]
[284.02224731 -2.38795757]
[271.18258667 5.36723137]
[258.34289551 13.12242031]
[245.50323486 20.87760925]
[232.66357422 28.63279915]
[219.82389832 36.38798904]
[212.92993164 49.59110641]
[197.11700439 50.10301208]
[184.27732849 57.85820007]
[171.43766785 65.61338806]
[158.59800720 73.36857605]
[145.75833130 81.12376404]
[147.93855286 87.66982269]
[149.18734741 94.45544434]
[149.48048401 101.34880066]
[148.81225586 108.21594238]
[147.19563293 114.92345428]
[144.66204834 121.34101868]
[141.26071167 127.34394073]
[137.05770874 132.81559753]
[132.13470459 137.64967346]
[126.58736420 141.75224304]
[132.63421631 155.47943115]
[138.68106079 169.20660400]
[144.72792053 182.93379211]
[159.54888916 188.42146301]
[166.07252502 202.81651306]
[160.42846680 217.57864380]
[145.96524048 223.94972229]
[131.26362610 218.14990234]
[125.04580688 203.62013245]
[131.00073242 188.98065186]
[124.95388031 175.25346375]
[118.90702820 161.52627563]
[112.86017609 147.79908752]
[106.25160217 149.10249329]
[99.52725983 149.49661255]
[92.81167603 148.97413635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 75]
[10 74]
[11 73]
[13 71]
[14 70]
[16 68]
[17 67]
[18 66]
[19 65]
[20 64]
[21 63]
[22 62]
[23 61]
[24 60]
[25 59]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[79 132]
[80 131]
[81 130]
[82 129]
[83 128]
[85 126]
[86 125]
[87 124]
[88 123]
[89 122]
[90 121]
[103 120]
[104 119]
[105 118]
[106 117]
[107 116]
[108 115]
[109 114]
[142 155]
[143 154]
[144 153]
[145 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
