%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:15:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUACCAUAGCUAAACUCCUCUGAAGUGGACAGCUGGUCGCUAUUGUGAUAUUCUGUGAAAAAUACAAUCAUAUAACAUCCAA\
) } def
/len { sequence length } bind def

/coor [
[87.10893250 181.31135559]
[83.31372070 166.79942322]
[82.16117096 151.84376526]
[83.68806458 136.92167664]
[87.84567261 122.50938416]
[94.49990845 109.06912231]
[79.93068695 112.63815308]
[65.36147308 116.20717621]
[50.79225922 119.77620697]
[42.57106400 133.00683594]
[27.74496651 136.41879272]
[15.18224144 128.49960327]
[11.56021118 143.37036133]
[1.43357682 154.84686279]
[-12.87063408 160.29187012]
[-28.06541824 158.45417786]
[-40.65912628 149.75607300]
[-47.75781631 136.19630432]
[-47.73025894 120.89082336]
[-40.58279037 107.35670471]
[-27.95784569 98.70400238]
[-12.75654221 96.92102814]
[1.52796936 102.41751099]
[11.61321354 113.93039703]
[19.09322739 101.10132599]
[33.81764221 97.27427673]
[47.22323227 105.20699310]
[61.79244614 101.63796234]
[76.36166382 98.06893158]
[90.93087769 94.49990845]
[101.03631592 83.41477203]
[103.24583435 68.57839966]
[105.45536041 53.74202347]
[107.66488647 38.90565109]
[96.76439667 28.02054405]
[94.39128113 12.97987747]
[101.24858093 -0.41569611]
[114.51998138 -7.12448502]
[116.72950745 -21.96085930]
[118.93903351 -36.79723358]
[121.14855957 -51.63360596]
[123.35808563 -66.46997833]
[116.83988953 -81.51807404]
[126.82877350 -94.52400208]
[143.04904175 -92.10838318]
[148.81465149 -76.75619507]
[138.19445801 -64.26045990]
[135.98493958 -49.42408371]
[133.77540588 -34.58770752]
[131.56588745 -19.75133324]
[129.35635376 -4.91495991]
[140.09696960 5.36984825]
[142.75335693 20.18226051]
[136.10052490 33.87872696]
[122.50126648 41.11517715]
[120.29174042 55.95154953]
[118.08221436 70.78792572]
[115.87268829 85.62429810]
[128.64405823 77.75713348]
[142.61143494 72.28791046]
[157.32907104 69.39116669]
[172.32727051 69.15934753]
[187.12741089 71.59985352]
[201.25714111 76.63479614]
[214.26554871 84.10349274]
[225.73747253 93.76758575]
[235.30682373 105.31867218]
[242.66819763 118.38811493]
[247.58666992 132.55880737]
[249.90525818 147.37852478]
[249.55000305 162.37432861]
[246.53221130 177.06761169]
[240.94821167 190.98950195]
[232.97619629 203.69567871]
[222.87059021 214.78065491]
[210.95387268 223.89065552]
[197.60638428 230.73497009]
[183.25407410 235.09513855]
[168.35498047 236.83204651]
[153.38458252 235.89024353]
[138.82061768 232.29980469]
[125.12791443 226.17529297]
[112.74342346 217.71217346]
[102.06239319 207.18052673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 30]
[7 29]
[8 28]
[9 27]
[12 24]
[31 58]
[32 57]
[33 56]
[34 55]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
