%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:04:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGGUUCCUGGAGUCACUGCAGAGGGAGUGUGCGAAUCAAGCCUGACCAAGAGGCUCCAGAAUAAAGUAUGAUUUGUGUUCAA\
) } def
/len { sequence length } bind def

/coor [
[102.76371765 280.45355225]
[92.15681458 269.84722900]
[85.68684387 256.31433105]
[84.09221649 241.39933777]
[87.55493927 226.80448914]
[95.67980957 214.19551086]
[107.53952789 205.01144409]
[121.78055573 200.30047607]
[136.77755737 200.60026550]
[150.82112122 205.87786865]
[143.47984314 192.79713440]
[136.13858032 179.71640015]
[128.79731750 166.63565063]
[121.45603943 153.55491638]
[114.11477661 140.47416687]
[106.77350616 127.39343262]
[99.43224335 114.31269073]
[87.50881195 107.01039124]
[87.48702240 93.02857971]
[80.14575195 79.94783783]
[64.94699097 80.81913757]
[50.93423843 75.02865601]
[40.86637497 63.77440262]
[36.70038605 49.32429886]
[39.21110535 34.55928040]
[47.84774017 22.39893532]
[40.50647354 9.31819439]
[33.16520691 -3.76254702]
[18.21586800 -8.13919353]
[10.95711803 -21.50950432]
[15.22170925 -35.73443985]
[7.88044167 -48.81518173]
[-7.51792288 -51.53995514]
[-17.52262878 -63.55826950]
[-17.40975952 -79.19544220]
[-7.23260736 -91.06808472]
[8.20348549 -93.57029724]
[21.61006927 -85.52060699]
[26.65696526 -70.71983337]
[20.96118355 -56.15645218]
[28.30245018 -43.07571030]
[42.66635513 -39.30559158]
[50.29778671 -26.14443779]
[46.24594879 -11.10381508]
[53.58721542 1.97692645]
[60.92848206 15.05766773]
[75.80764008 14.02030849]
[89.71889496 19.56886864]
[99.88317108 30.65257263]
[104.24497223 45.10922623]
[101.88787842 60.08691406]
[93.22649384 72.60656738]
[100.56775665 85.68730927]
[112.49118805 92.98960876]
[112.51297760 106.97142029]
[119.85424805 120.05216217]
[127.19551849 133.13290405]
[134.53678894 146.21363831]
[141.87805176 159.29438782]
[149.21931458 172.37512207]
[156.56059265 185.45587158]
[163.90185547 198.53660583]
[170.84600830 202.33328247]
[174.07228088 208.70703125]
[187.15303040 216.04830933]
[200.23376465 223.38957214]
[213.31451416 230.73083496]
[226.39524841 238.07211304]
[241.54035950 233.55532837]
[255.40348816 241.14408875]
[259.75988770 256.33609009]
[252.02497864 270.11822510]
[236.78776550 274.31375122]
[223.08819580 266.43359375]
[219.05398560 251.15284729]
[205.97323608 243.81158447]
[192.89250183 236.47032166]
[179.81175232 229.12904358]
[166.73101807 221.78778076]
[172.00814819 235.82885742]
[172.30879211 250.82583618]
[167.59864807 265.06713867]
[158.41525269 276.92736816]
[145.80673218 285.05294800]
[131.21208191 288.51651001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 55]
[19 53]
[20 52]
[26 46]
[27 45]
[28 44]
[31 41]
[32 40]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
