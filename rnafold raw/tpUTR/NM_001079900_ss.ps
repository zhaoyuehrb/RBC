%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:00:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAGAUUCGAAGAGACAGAUUUUAUCUUCCUUUCAUUUCUUUCUCUUGUGCAUUUAAUAAAGGAUGGUAUCUAUAAACAAUGCAAAAGAU\
) } def
/len { sequence length } bind def

/coor [
[101.90407562 127.83659363]
[89.75522614 125.95276642]
[79.59535980 119.03029633]
[73.39698792 108.41316223]
[58.40573502 108.92527771]
[43.41447830 109.43739319]
[34.68195343 122.12790680]
[20.31916428 127.18396759]
[5.90374088 122.86429596]
[-3.09617734 111.02624512]
[-18.08743286 111.53836060]
[-33.07868958 112.05047607]
[-48.06994247 112.56259918]
[-61.59791183 120.76654053]
[-74.58192444 113.46826935]
[-89.57318115 113.98039246]
[-98.25173950 117.46095276]
[-105.08310699 114.24523163]
[-120.08310699 114.24523163]
[-135.08311462 114.24523163]
[-150.08311462 114.24523163]
[-165.92224121 120.29157257]
[-176.11698914 106.74523163]
[-165.92224121 93.19889069]
[-150.08311462 99.24523163]
[-135.08311462 99.24523163]
[-120.08310699 99.24523163]
[-105.08310699 99.24523163]
[-90.08529663 98.98913574]
[-75.09403992 98.47702026]
[-62.63834763 90.30970764]
[-48.58206177 97.57134247]
[-33.59080505 97.05922699]
[-18.59954834 96.54710388]
[-3.60829401 96.03498840]
[4.56278610 83.61035919]
[18.64982033 78.31701660]
[33.32416153 82.38114166]
[42.90236282 94.44613647]
[57.89361954 93.93402100]
[72.88487244 93.42190552]
[82.01363373 78.66945648]
[98.09592438 72.16340637]
[114.91433716 76.41899109]
[125.96685791 89.79100037]
[140.88821411 88.25703430]
[155.80957031 86.72307587]
[170.73094177 85.18910980]
[183.66751099 76.08111572]
[197.11930847 82.47630310]
[212.04066467 80.94234467]
[226.96202087 79.40837860]
[241.88337708 77.87442017]
[256.80474854 76.34045410]
[271.72610474 74.80649567]
[275.44403076 60.94585800]
[283.68124390 49.23145676]
[295.41760254 41.07811737]
[309.21191406 37.46187973]
[323.37896729 38.80318832]
[336.19528198 44.91812515]
[346.10879517 55.04329681]
[351.92694092 67.93110657]
[366.89199829 66.90747070]
[381.85702515 65.88383484]
[396.82205200 64.86019897]
[412.21163940 57.74705124]
[423.30706787 70.56610107]
[414.06051636 84.77657318]
[397.84567261 79.82522583]
[382.88064575 80.84886169]
[367.91561890 81.87249756]
[352.95059204 82.89614105]
[348.18341064 97.90700531]
[338.02893066 109.99604797]
[323.99859619 117.31848145]
[308.19821167 118.74242401]
[293.01171875 114.02374268]
[280.74169922 103.84732819]
[273.26007080 89.72785187]
[258.33871460 91.26181793]
[243.41734314 92.79577637]
[228.49598694 94.32974243]
[213.57463074 95.86370087]
[198.65325928 97.39766693]
[186.78396606 106.39594269]
[172.26489258 100.11047363]
[157.34353638 101.64443207]
[142.42218018 103.17839813]
[127.50081635 104.71235657]
[122.80587769 116.07461548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 41]
[5 40]
[6 39]
[10 35]
[11 34]
[12 33]
[13 32]
[15 30]
[16 29]
[18 28]
[19 27]
[20 26]
[21 25]
[45 90]
[46 89]
[47 88]
[48 87]
[50 85]
[51 84]
[52 83]
[53 82]
[54 81]
[55 80]
[63 73]
[64 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
