%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:18:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUUGGGGGGACUCUGAGCGGGAGGCAGAGUUUGCCUUCCUUUCUCCAGGACCAAUAAAAUUUCUAAGAGAGCUA\
) } def
/len { sequence length } bind def

/coor [
[118.36894226 124.24160004]
[106.64147186 114.88925934]
[90.09715271 112.95116425]
[83.89052582 97.49320984]
[71.79134369 88.62699890]
[59.69216537 79.76078033]
[47.59298325 70.89456177]
[35.49380112 62.02834320]
[23.39461899 53.16212845]
[11.29543781 44.29590988]
[-0.80374354 35.42969513]
[-12.90292549 26.56347656]
[-11.94531345 41.53287888]
[-19.70476341 54.36997223]
[-33.40394592 60.47999573]
[-48.13953400 57.67599869]
[-58.63724518 46.96161270]
[-61.13964844 32.17181778]
[-54.75106049 18.60030556]
[-41.75814056 11.10470295]
[-26.81209564 12.36762619]
[-35.42966080 0.09010454]
[-44.04722977 -12.18741703]
[-52.66479492 -24.46493912]
[-61.28236008 -36.74246216]
[-69.89992523 -49.01998520]
[-78.51749420 -61.29750443]
[-87.13506317 -73.57502747]
[-102.62585449 -77.74813843]
[-108.88913727 -92.51806641]
[-101.12026215 -106.55458832]
[-85.27883148 -109.09008789]
[-73.51704407 -98.17954254]
[-74.85753632 -82.19259644]
[-66.23997498 -69.91506958]
[-57.62240601 -57.63755035]
[-49.00484085 -45.36002731]
[-40.38727188 -33.08250427]
[-31.76970673 -20.80498314]
[-23.15213966 -8.52746201]
[-14.53457260 3.75006008]
[-4.03670835 14.46429539]
[8.06247330 23.33051300]
[20.16165543 32.19672775]
[32.26083755 41.06294632]
[44.36001968 49.92916489]
[56.45920181 58.79537964]
[68.55838013 67.66159821]
[80.65756226 76.52781677]
[92.75674438 85.39402771]
[104.53280640 84.33945465]
[113.92500305 91.52100372]
[115.99382019 103.16178131]
[127.72129059 112.51412964]
[139.75566101 103.42430878]
[153.67280579 97.61364746]
[168.59788513 95.44741058]
[183.59271240 97.06175995]
[197.71467590 102.35522461]
[210.07608032 110.99505615]
[219.89985657 122.43814087]
[226.56849670 135.96514893]
[229.66278076 150.72578430]
[228.98820496 165.79216003]
[224.58718872 180.21720886]
[216.73635864 193.09414673]
[205.92924500 203.61351013]
[192.84519958 211.11405945]
[178.30667114 215.12431335]
[163.22756958 215.39215088]
[148.55580139 211.90077209]
[135.21362305 204.86961365]
[124.03974152 194.74067688]
[115.73655701 182.15069580]
[110.82601929 167.89105225]
[109.61679840 152.85812378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[4 50]
[5 49]
[6 48]
[7 47]
[8 46]
[9 45]
[10 44]
[11 43]
[12 42]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
