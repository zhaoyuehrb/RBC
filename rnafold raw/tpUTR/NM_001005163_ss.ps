%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGAGCAGAAGUUGGAGAUUUAAAAAAAAGUGUAGGAUGGCUGUCUAGAUACAUUUACAUGGACACACAGUGAUGAUGUGAA\
) } def
/len { sequence length } bind def

/coor [
[160.02348328 161.64134216]
[145.40060425 154.58708191]
[136.22154236 141.08274841]
[135.02966309 124.70442200]
[121.44793701 118.33757019]
[107.86621094 111.97071838]
[93.92010498 112.96958923]
[85.76693726 101.61100769]
[72.18521118 95.24415588]
[58.60348892 88.87730408]
[45.02176666 82.51045227]
[30.31703186 87.64937592]
[16.63393211 80.99900818]
[11.82537270 66.94862366]
[-1.75635040 60.58177185]
[-15.33807373 54.21492386]
[-30.04280853 59.35384750]
[-43.72591019 52.70347977]
[-48.53446960 38.65309143]
[-64.31395721 39.80124283]
[-72.55369568 27.39334106]
[-86.13542175 21.02648926]
[-99.71714020 14.65963936]
[-113.29886627 8.29278851]
[-128.07386780 13.90303898]
[-142.45394897 7.34647083]
[-147.90768433 -7.48701906]
[-141.19944763 -21.79698372]
[-126.30912781 -27.09357643]
[-112.07088470 -20.23442268]
[-106.93201447 -5.28893471]
[-93.35028839 1.07791579]
[-79.76856995 7.44476652]
[-66.18684387 13.81161690]
[-51.37881088 12.20806789]
[-42.16761780 25.07136917]
[-28.29192352 19.77980042]
[-14.42742538 26.04321480]
[-8.97122383 40.63319778]
[4.61049986 47.00004959]
[18.19222450 53.36689758]
[32.06791687 48.07533264]
[45.93241501 54.33874512]
[51.38861847 68.92872620]
[64.97034454 75.29557800]
[78.55206299 81.66242981]
[92.13378906 88.02928162]
[106.07989502 87.03041077]
[114.23306274 98.38899231]
[127.81478882 104.75584412]
[141.39651489 111.12269592]
[152.55436707 102.47630310]
[166.29455566 99.54575348]
[179.87974548 102.85572052]
[190.62907410 111.69346619]
[196.44723511 124.26139832]
[196.23271179 138.04241943]
[209.57284546 144.90104675]
[222.91297913 151.75968933]
[236.25311279 158.61831665]
[249.59324646 165.47695923]
[262.93338013 172.33558655]
[276.27349854 179.19422913]
[292.08441162 178.62313843]
[299.86547852 191.32369995]
[315.67639160 190.75260925]
[323.45745850 203.45317078]
[336.79757690 210.31179810]
[350.13772583 217.17044067]
[366.98876953 219.03549194]
[369.86145020 235.74429321]
[354.60086060 243.13015747]
[343.27908325 230.51057434]
[329.93896484 223.65193176]
[316.59881592 216.79330444]
[301.74209595 217.85494995]
[293.00683594 204.66383362]
[278.15011597 205.72549438]
[269.41488647 192.53436279]
[256.07473755 185.67572021]
[242.73460388 178.81709290]
[229.39447021 171.95845032]
[216.05435181 165.09982300]
[202.71421814 158.24118042]
[189.37408447 151.38255310]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 51]
[5 50]
[6 49]
[8 47]
[9 46]
[10 45]
[11 44]
[14 41]
[15 40]
[16 39]
[19 36]
[21 34]
[22 33]
[23 32]
[24 31]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[62 80]
[63 79]
[65 77]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
