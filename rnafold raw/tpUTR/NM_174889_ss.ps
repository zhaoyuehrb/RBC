%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:08:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAUUAUGGUCAAAUCUUUUCAUGUAUAUGGAUGUGACUAUUUUAACAAAUAAAAGAAGUGAAAAGUUAUUUACCUUGUA\
) } def
/len { sequence length } bind def

/coor [
[59.22782135 172.67211914]
[46.24616623 163.67208862]
[35.19620132 152.38392639]
[26.47500801 139.21331787]
[20.39599800 124.63354492]
[17.17762184 109.16854095]
[16.93553543 93.37406158]
[19.67843628 77.81768799]
[5.63776493 72.53947449]
[-8.40290642 67.26126099]
[-22.44357681 61.98304367]
[-36.48424911 56.70483017]
[-50.52491760 51.42661667]
[-64.56558990 46.14839935]
[-80.20578003 48.53483963]
[-89.39646149 36.81389618]
[-103.43713379 31.53568077]
[-117.47780609 26.25746536]
[-131.51847839 20.97924995]
[-142.52062988 31.55825043]
[-157.02597046 36.30778503]
[-172.15443420 34.28482437]
[-184.90225220 25.89103508]
[-192.73835754 12.79300880]
[-194.10685730 -2.40863442]
[-188.73606873 -16.69559479]
[-177.69233704 -27.23118782]
[-163.16841125 -31.92356110]
[-148.04801941 -29.84104347]
[-135.33335876 -21.39711952]
[-127.54889679 -8.26833534]
[-126.24026489 6.93857908]
[-112.19959259 12.21679401]
[-98.15892029 17.49501038]
[-84.11824799 22.77322388]
[-69.48234558 20.00925064]
[-59.28737640 32.10772705]
[-45.24670410 37.38594437]
[-31.20603371 42.66415787]
[-17.16536140 47.94237518]
[-3.12469101 53.22058868]
[10.91598034 58.49880600]
[24.95665169 63.77701950]
[32.20676422 51.54707718]
[41.43040848 40.72764969]
[52.35907364 31.63370323]
[64.67461395 24.52996826]
[78.01851654 19.62324524]
[92.00231934 17.05637169]
[106.21894073 16.90407181]
[120.25453186 19.17078209]
[133.70048523 23.79051208]
[146.16537476 30.62878036]
[157.28636169 39.48651886]
[166.73966980 50.10586166]
[174.25012207 62.17767715]
[179.59907532 75.35054016]
[182.63081360 89.24097443]
[183.25709534 103.44461823]
[181.45967102 117.54798126]
[177.29086304 131.14050293]
[190.64305115 137.97564697]
[203.99523926 144.81077576]
[217.34742737 151.64591980]
[230.69960022 158.48106384]
[245.66070557 153.38781738]
[259.80416870 160.44030762]
[264.73895264 175.45442200]
[257.53732300 189.52255249]
[242.47187805 194.29830933]
[228.48068237 186.94833374]
[223.86447144 171.83325195]
[210.51228333 164.99810791]
[197.16009521 158.16296387]
[183.80790710 151.32783508]
[170.45571899 144.49269104]
[160.79339600 156.98922729]
[148.94639587 167.43782043]
[135.34046936 175.46296692]
[120.46456146 180.77629089]
[104.85324097 183.18685913]
[89.06752014 182.60804749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[16 35]
[17 34]
[18 33]
[19 32]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
