%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:25:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACCCCAAGCAGUACACUUGCUGGUCUAGGUAUUAACCCCAGGACUCAGAAGUGAAGGAGAAAUGGGUUUUUUGUGGUCUUGAGUCACACUGAGAUAGUCAGUUGUGUGUGACUCUAAUAAACGGAGCCUACCUUUUGUAAAUUAAU\
) } def
/len { sequence length } bind def

/coor [
[101.91748047 133.09605408]
[103.11286163 118.14675140]
[99.40670013 132.68168640]
[95.70053864 147.21662903]
[97.64591980 164.05859375]
[82.00068665 170.59027100]
[71.39323425 157.36459351]
[81.16560364 143.51046753]
[84.87176514 128.97552490]
[88.57792664 114.44058990]
[83.94544983 108.54226685]
[73.72456360 119.52104950]
[63.78413391 130.75437927]
[49.55136108 126.01854706]
[48.32310104 111.06891632]
[61.59228134 104.07356262]
[74.68049622 96.74562836]
[70.04802704 90.84731293]
[55.04883575 91.00334930]
[40.04964828 91.15938568]
[25.05045891 91.31542206]
[10.05127144 91.47145844]
[1.43827057 94.70689392]
[-5.26080227 91.47145844]
[-20.25999069 91.31542206]
[-35.25917816 91.15938568]
[-50.25917816 91.15938568]
[-65.25836945 91.31542206]
[-80.25755310 91.47145844]
[-95.25674438 91.62749481]
[-112.05671692 102.69136047]
[-128.52558899 92.63124084]
[-143.50531006 93.41108704]
[-158.48501587 94.19093323]
[-171.93957520 103.56681061]
[-186.66966248 96.35874939]
[-187.52224731 79.98177338]
[-173.62025452 71.28312683]
[-159.26486206 79.21121216]
[-144.28515625 78.43137360]
[-129.30543518 77.65152740]
[-123.11983490 69.41925812]
[-113.20495605 65.91007996]
[-102.79037476 68.52543640]
[-95.41278076 76.62830353]
[-80.41358948 76.47226715]
[-65.41440582 76.31623077]
[-50.41521454 76.16019440]
[-43.71614456 72.92475128]
[-35.10314178 76.16019440]
[-20.10395432 76.31623077]
[-5.10476542 76.47226715]
[9.89523411 76.47226715]
[24.89442253 76.31623077]
[39.89361191 76.16019440]
[54.89279938 76.00415802]
[69.89199066 75.84812164]
[95.64924622 73.50396729]
[108.14062500 87.27787018]
[120.75175476 79.15632629]
[133.36288452 71.03478241]
[145.97401428 62.91324234]
[158.58514404 54.79169846]
[160.28808594 43.96648026]
[167.54609680 36.05288315]
[177.75622559 33.52857208]
[187.45060730 37.00002289]
[200.38865662 29.41011429]
[213.32672119 21.82020569]
[226.26477051 14.23029709]
[239.20283508 6.64038897]
[252.14088440 -0.94951952]
[265.07894897 -8.53942776]
[268.72802734 -14.17783451]
[273.91189575 -16.69951057]
[278.71685791 -16.16306305]
[291.95944214 -23.20819855]
[305.20205688 -30.25333214]
[303.80984497 -45.36417389]
[308.29696655 -59.81785583]
[317.94985962 -71.42109680]
[331.27368164 -78.42565918]
[346.22354126 -79.79172516]
[360.51852417 -75.34214020]
[371.98953247 -65.78468323]
[385.23211670 -72.82981873]
[398.47470093 -79.87495422]
[411.71731567 -86.92008972]
[424.95989990 -93.96522522]
[438.20248413 -101.01036072]
[451.44506836 -108.05549622]
[464.68765259 -115.10063171]
[477.93023682 -122.14576721]
[480.37057495 -135.43118286]
[489.89279175 -144.73468018]
[502.84625244 -146.80403137]
[514.44305420 -141.10221863]
[527.82934570 -147.87033081]
[541.21563721 -154.63845825]
[547.56677246 -169.37081909]
[563.08215332 -173.45161438]
[575.85968018 -163.75038147]
[576.09753418 -147.70909119]
[563.61328125 -137.63323975]
[547.98376465 -141.25216675]
[534.59747314 -134.48405457]
[521.21118164 -127.71594238]
[516.67828369 -111.55083466]
[501.57412720 -103.47931671]
[484.97537231 -108.90317535]
[471.73278809 -101.85803986]
[458.49020386 -94.81290436]
[445.24761963 -87.76777649]
[432.00503540 -80.72264099]
[418.76242065 -73.67750549]
[405.51983643 -66.63237000]
[392.27725220 -59.58723450]
[379.03466797 -52.54209900]
[380.55053711 -37.68843079]
[376.25238037 -23.34718513]
[366.76538086 -11.71268654]
[353.51104736 -4.57752943]
[338.49438477 -3.05641937]
[324.00057983 -7.41213179]
[312.24716187 -17.01074791]
[299.00457764 -9.96561241]
[285.76199341 -2.92047739]
[272.66885376 4.39862823]
[259.73080444 11.98853683]
[246.79273987 19.57844543]
[233.85469055 27.16835213]
[220.91662598 34.75826263]
[207.97857666 42.34817123]
[195.04051208 49.93807602]
[186.82255554 67.39931488]
[166.70668030 67.40282440]
[154.09555054 75.52436829]
[141.48442078 83.64591217]
[128.87329102 91.76745605]
[116.26216888 99.88899994]
[130.06501770 94.01692200]
[145.05798340 94.47647095]
[158.47529602 101.18285370]
[167.84187317 112.89896393]
[171.42987061 127.46352386]
[168.57739258 142.18980408]
[159.81065369 154.36125183]
[146.74685669 161.73262024]
[131.79585266 162.94407654]
[117.71567535 157.77217102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 10]
[3 9]
[4 8]
[18 57]
[19 56]
[20 55]
[21 54]
[22 53]
[24 52]
[25 51]
[26 50]
[27 48]
[28 47]
[29 46]
[30 45]
[32 41]
[33 40]
[34 39]
[59 140]
[60 139]
[61 138]
[62 137]
[63 136]
[67 134]
[68 133]
[69 132]
[70 131]
[71 130]
[72 129]
[73 128]
[76 127]
[77 126]
[78 125]
[85 118]
[86 117]
[87 116]
[88 115]
[89 114]
[90 113]
[91 112]
[92 111]
[93 110]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
