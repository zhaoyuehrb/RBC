%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:01:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGCUUUAAUGGUGGUGUCUGUACAGCAUGGAUGUGGACAGGGAAAACAGCAAGUGCACACAGUGGGACAGGCCACAGGACAGGCUGGGAGUGAAUAAAGAGUUCACACUGCUUC\
) } def
/len { sequence length } bind def

/coor [
[211.29818726 331.85375977]
[214.15510559 317.12835693]
[223.74299622 305.59265137]
[237.69767761 300.09112549]
[252.57710266 301.97991943]
[243.00343323 290.43243408]
[233.42976379 278.88491821]
[223.85610962 267.33740234]
[209.40599060 271.03326416]
[194.72378540 268.07653809]
[182.73220825 259.00112915]
[175.84205627 245.56437683]
[175.46759033 230.40698242]
[181.73664856 216.53398132]
[172.16297913 204.98646545]
[162.58932495 193.43894958]
[153.01565552 181.89144897]
[143.44200134 170.34393311]
[138.73269653 169.01469421]
[134.86021423 164.63574219]
[133.68595886 157.91751099]
[124.74044800 145.87683105]
[115.79493713 133.83616638]
[106.84942627 121.79548645]
[95.44570160 122.38786316]
[85.17972565 117.38727570]
[78.61617279 108.04299164]
[77.39473724 96.68939972]
[81.82057190 86.16286469]
[73.52857208 73.66315460]
[65.23657227 61.16344452]
[51.16023636 53.94075012]
[50.57219696 39.05775833]
[43.12277222 33.54749298]
[42.23101425 26.11309052]
[34.27470016 13.39707375]
[26.31838608 0.68105781]
[18.36207199 -12.03495884]
[4.48299646 -19.62981415]
[4.29136133 -34.52318573]
[-3.66495252 -47.23920441]
[-18.80588150 -50.89843750]
[-26.69357109 -63.90762711]
[-23.11174202 -78.31964111]
[-38.60038757 -79.25851440]
[-50.55767822 -89.14804077]
[-54.38579559 -104.18550110]
[-48.61274719 -118.58867645]
[-35.45838547 -126.81925964]
[-19.98083687 -125.71241760]
[-8.13153172 -115.69375610]
[-4.46676922 -100.61565399]
[-10.39572525 -86.27595520]
[4.13153172 -83.19465637]
[12.38150978 -70.41214752]
[9.05106354 -55.19551468]
[17.00737762 -42.47949982]
[30.31736374 -35.79417801]
[31.07808876 -19.99127197]
[39.03440094 -7.27525568]
[46.99071503 5.44076061]
[54.94702911 18.15677643]
[63.07190704 30.76575661]
[76.55514526 37.09439087]
[77.73628235 52.87144470]
[86.02828217 65.37115479]
[94.32028198 77.87086487]
[112.04306030 80.58550262]
[122.34869385 95.25724030]
[118.89010620 112.84997559]
[127.83561707 124.89064789]
[136.78112793 136.93132019]
[145.72663879 148.97200012]
[154.98950195 160.77027893]
[164.56317139 172.31777954]
[174.13682556 183.86529541]
[183.71049500 195.41279602]
[193.28414917 206.96031189]
[208.07852173 203.37031555]
[222.90408325 206.54679871]
[234.83148193 215.80732727]
[241.52783203 229.27282715]
[241.71293640 244.24864197]
[235.40362549 257.76373291]
[244.97727966 269.31124878]
[254.55094910 280.85876465]
[264.12460327 292.40628052]
[274.27105713 296.42276001]
[277.85040283 305.41998291]
[289.89108276 314.36550903]
[302.82656860 313.26925659]
[312.69204712 321.07379150]
[314.48272705 333.11813354]
[326.28100586 342.38101196]
[338.07928467 351.64389038]
[349.87753296 360.90673828]
[361.67581177 370.16961670]
[373.47409058 379.43249512]
[389.50988770 378.95031738]
[399.77471924 391.27966309]
[396.39428711 406.96252441]
[381.96176147 413.96835327]
[367.54855347 406.92285156]
[364.21121216 391.23077393]
[352.41296387 381.96789551]
[340.61468506 372.70501709]
[328.81640625 363.44216919]
[317.01812744 354.17929077]
[305.21984863 344.91641235]
[287.78839111 343.43750000]
[280.94555664 326.40618896]
[268.90487671 317.46066284]
[271.58282471 332.21969604]
[266.83123779 346.44720459]
[255.82177734 356.63500977]
[241.26913452 360.27102661]
[226.76170349 356.45861816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 87]
[6 86]
[7 85]
[8 84]
[14 78]
[15 77]
[16 76]
[17 75]
[18 74]
[21 73]
[22 72]
[23 71]
[24 70]
[29 67]
[30 66]
[31 65]
[33 63]
[35 62]
[36 61]
[37 60]
[38 59]
[40 57]
[41 56]
[44 53]
[89 112]
[90 111]
[93 109]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
