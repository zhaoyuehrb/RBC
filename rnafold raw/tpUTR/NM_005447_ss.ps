%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 12:29:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCAAUGGCUCCUUUCUGACCUGCUUUCAUGUUUUAAUGUUUGUUUAAUUUAAUAGGAAACCUCAUUUUAAAUAUAACACUCAAAAAAAUGUAAAUCAUAUUGUAGUAUUCAAUAGUUAAUAAAAACUCGAGAAAUGUGUUGUUUCUG\
) } def
/len { sequence length } bind def

/coor [
[78.56713104 408.16778564]
[68.49028778 396.48614502]
[66.35130310 381.20779419]
[72.83272552 367.20797729]
[85.86635590 358.95401001]
[85.86635590 343.95401001]
[85.86635590 328.95401001]
[85.86635590 313.95401001]
[85.86635590 298.95401001]
[85.86635590 283.95401001]
[78.12905884 271.22674561]
[85.86635590 257.42657471]
[78.12905884 244.69929504]
[85.86635590 230.89912415]
[85.86635590 215.89912415]
[85.86635590 200.89912415]
[85.86635590 185.89912415]
[85.86635590 170.89912415]
[85.70928192 155.89994812]
[85.39514160 140.90322876]
[71.97182465 117.33952332]
[77.67736816 97.31259918]
[91.57829285 91.43827820]
[83.27742004 78.94445801]
[69.19596100 71.73175812]
[68.59735870 56.84918976]
[60.29648590 44.35536957]
[51.99561310 31.86155128]
[44.58963013 26.39969063]
[43.65492630 19.01802254]
[35.61752319 6.35310268]
[27.58012199 -6.31181622]
[19.54271889 -18.97673416]
[11.50531769 -31.64165306]
[3.46791577 -44.30657196]
[-4.56948614 -56.97149277]
[-19.73348808 -60.53390503]
[-27.70413971 -73.49243164]
[-24.21447182 -87.92703247]
[-32.25187302 -100.59195709]
[-47.41587448 -104.15436554]
[-55.38652802 -117.11289215]
[-51.89685822 -131.54750061]
[-59.93426132 -144.21241760]
[-67.97166443 -156.87733459]
[-76.00906372 -169.54225159]
[-91.17306519 -173.10467529]
[-99.14371490 -186.06318665]
[-95.65405273 -200.49780273]
[-103.69145203 -213.16271973]
[-111.72885132 -225.82763672]
[-119.76625824 -238.49255371]
[-127.80365753 -251.15747070]
[-135.84106445 -263.82238770]
[-151.20658875 -264.92083740]
[-162.84301758 -274.74157715]
[-166.42303467 -289.35824585]
[-160.77725220 -303.11553955]
[-168.81465149 -315.78045654]
[-183.59040833 -322.89447021]
[-184.54737854 -339.26568604]
[-170.70112610 -348.05279541]
[-156.29547119 -340.21636963]
[-156.14973450 -323.81787109]
[-148.11233521 -311.15295410]
[-133.26049805 -310.40383911]
[-121.55922699 -300.94107056]
[-117.62770844 -286.23062134]
[-123.17613983 -271.85980225]
[-115.13874054 -259.19488525]
[-107.10133362 -246.52995300]
[-99.06393433 -233.86503601]
[-91.02653503 -221.20011902]
[-82.98912811 -208.53520203]
[-68.44248199 -205.54678345]
[-60.11099625 -192.81726074]
[-63.34414673 -177.57965088]
[-55.30674362 -164.91473389]
[-47.26934052 -152.24981689]
[-39.23194122 -139.58489990]
[-24.68529129 -136.59649658]
[-16.35380554 -123.86695862]
[-19.58695412 -108.62935638]
[-11.54955292 -95.96443939]
[2.99709654 -92.97602844]
[11.32858181 -80.24649811]
[8.09543324 -65.00889587]
[16.13283539 -52.34397507]
[24.17023659 -39.67905426]
[32.20763779 -27.01413727]
[40.24504089 -14.34921837]
[48.28244400 -1.68429899]
[56.31984329 10.98061943]
[64.48943329 23.56067848]
[72.79030609 36.05449677]
[81.09117889 48.54831696]
[94.57890320 54.86737442]
[95.77124023 70.64358521]
[104.07211304 83.13740540]
[117.90006256 88.95014191]
[132.63436890 86.13941956]
[147.36868286 83.32869720]
[162.10298157 80.51798248]
[176.83729553 77.70726013]
[184.30778503 63.96951294]
[198.87980652 58.29587173]
[213.67289734 63.36526108]
[221.70220947 76.78406525]
[219.17652893 92.21633148]
[207.28843689 102.37542725]
[191.65110779 102.46453094]
[179.64801025 92.44156647]
[164.91371155 95.25228882]
[150.17939758 98.06301117]
[135.44508362 100.87372589]
[120.71077728 103.68444824]
[118.98672485 118.58503723]
[132.68991089 124.68608856]
[146.39308167 130.78713989]
[161.05598450 124.89011383]
[175.56108093 131.16529846]
[181.30274963 145.88972473]
[174.87457275 160.32765198]
[160.09025574 165.91333008]
[145.72108459 159.33285522]
[140.29203796 144.49032593]
[126.58885193 138.38926697]
[112.88567352 132.28822327]
[100.39185333 140.58909607]
[100.70599365 155.58580017]
[104.03245544 164.16572571]
[100.86635590 170.89912415]
[100.86635590 185.89912415]
[100.86635590 200.89912415]
[100.86635590 215.89912415]
[100.86635590 230.89912415]
[108.60366058 244.69929504]
[100.86635590 257.42657471]
[108.60366058 271.22674561]
[100.86635590 283.95401001]
[100.86635590 298.95401001]
[100.86635590 313.95401001]
[100.86635590 328.95401001]
[100.86635590 343.95401001]
[100.86635590 358.95401001]
[113.89998627 367.20797729]
[120.38140869 381.20779419]
[118.24242401 396.48614502]
[108.16558075 408.16778564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 140]
[12 138]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 130]
[20 129]
[23 99]
[24 98]
[26 96]
[27 95]
[28 94]
[30 93]
[31 92]
[32 91]
[33 90]
[34 89]
[35 88]
[36 87]
[39 84]
[40 83]
[43 80]
[44 79]
[45 78]
[46 77]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[58 65]
[59 64]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
