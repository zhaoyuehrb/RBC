%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:10:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACCCAGUUAGUCCUGCCAGAUGUCACUGUAGCAAGCCACAGACACCCCACAAAGUUCCCCUGUUGUGCAGGCACAAAUAUUUCCUGAAAUAAAUGUUUUGGACAUAGAAACAGA\
) } def
/len { sequence length } bind def

/coor [
[58.65050507 278.18957520]
[55.35339737 279.75613403]
[49.10552597 293.39300537]
[42.85765076 307.02984619]
[49.72438049 321.07913208]
[45.90375137 336.24279785]
[33.19974899 345.36102295]
[17.61081696 344.12850952]
[6.49756765 333.12713623]
[5.10734081 317.55148315]
[14.09655857 304.75585938]
[29.22078705 300.78198242]
[35.46865845 287.14511108]
[41.71653366 273.50823975]
[47.41024017 259.63085938]
[52.54054260 245.53547668]
[57.67084503 231.44009399]
[47.00813293 219.37887573]
[43.82774353 203.50221252]
[49.08226776 188.08766174]
[61.43874359 177.33648682]
[77.61529541 174.22859192]
[82.36531830 160.00054932]
[87.11533356 145.77249146]
[91.86535645 131.54444885]
[96.61537933 117.31640625]
[84.46054840 113.74856567]
[76.20710754 101.68931580]
[62.04410934 96.74870300]
[47.88111496 91.80809784]
[33.71812057 86.86749268]
[21.04880905 95.82674408]
[5.53347349 95.59442902]
[-6.86192369 86.25988007]
[-11.37109852 71.41242981]
[-6.26018095 56.76121140]
[6.50557613 47.93992615]
[22.01747894 48.34053802]
[34.31088638 57.80899811]
[38.65872955 72.70449829]
[52.82172394 77.64510345]
[66.98471832 82.58570862]
[81.14771271 87.52632141]
[71.08716583 76.40042877]
[61.02662277 65.27453613]
[46.92774963 60.15381622]
[35.63302994 50.28318787]
[28.66976357 36.99737167]
[26.97953415 22.09290314]
[30.79089928 7.58519888]
[39.58847809 -4.56398201]
[52.18264389 -12.71180344]
[66.87039185 -15.75649834]
[81.66560364 -13.28635883]
[94.56764984 -5.63540077]
[103.83189392 6.16179705]
[108.20558929 20.50999260]
[107.09733582 35.46899796]
[100.65831757 49.01417542]
[101.31105042 63.99996948]
[101.96378326 78.98575592]
[108.57552338 65.52155304]
[115.18727112 52.05734634]
[121.79901886 38.59314346]
[128.41076660 25.12893486]
[129.96510315 8.24638939]
[146.61814880 5.06643343]
[154.28385925 20.18838120]
[141.87496948 31.74067879]
[135.26321411 45.20488739]
[128.65147400 58.66909027]
[122.03973389 72.13330078]
[115.42798615 85.59750366]
[123.27404785 98.38184357]
[138.27270508 98.58322144]
[147.02668762 95.53821564]
[153.66990662 98.99674988]
[168.65774536 99.60073853]
[183.64556885 100.20473480]
[198.63340759 100.80872345]
[213.62124634 101.41271210]
[228.60908508 102.01670074]
[243.59690857 102.62068939]
[258.58474731 103.22467804]
[268.09750366 90.96551514]
[283.00860596 86.67144775]
[297.58441162 91.99362946]
[306.22021484 104.88557434]
[305.59539795 120.39006042]
[295.95022583 132.54530334]
[280.99343872 136.67736816]
[266.47622681 131.19737244]
[257.98077393 118.21250916]
[242.99291992 117.60852051]
[228.00509644 117.00453186]
[213.01725769 116.40054321]
[198.02941895 115.79655457]
[183.04158020 115.19256592]
[168.05375671 114.58857727]
[153.06591797 113.98458862]
[138.07131958 113.58187103]
[123.07266998 113.38049316]
[110.84342194 122.06642151]
[106.09340668 136.29446411]
[101.34338379 150.52252197]
[96.59336090 164.75056458]
[91.84334564 178.97860718]
[101.69132996 189.01193237]
[106.20696259 202.25566101]
[104.55546570 216.08335876]
[97.11910248 227.77897644]
[85.41071320 235.07031250]
[71.76623535 236.57038879]
[66.63593292 250.66578674]
[61.50563049 264.76116943]
[62.47412109 270.15966797]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[15 115]
[16 114]
[17 113]
[22 107]
[23 106]
[24 105]
[25 104]
[26 103]
[28 43]
[29 42]
[30 41]
[31 40]
[61 73]
[62 72]
[63 71]
[64 70]
[65 69]
[74 102]
[75 101]
[77 100]
[78 99]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
