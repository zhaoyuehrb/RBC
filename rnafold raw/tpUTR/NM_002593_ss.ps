%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:44:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGCAGGCCAGCCCCGGCCCCUAGCCCUCAGGCCUUCUUUCUUAUCCAAAUAAAUGUUUCUUAAUGAGGAA\
) } def
/len { sequence length } bind def

/coor [
[96.99832153 119.77732849]
[89.12446594 116.78915405]
[83.17829895 110.82511139]
[80.21375275 102.94233704]
[64.98402405 107.22788239]
[54.42594528 96.72187805]
[39.84416962 93.20450592]
[25.26239777 89.68713379]
[10.68062496 86.16976166]
[-3.90114832 82.65238953]
[-12.10869980 93.05535126]
[-23.65368271 99.46179962]
[-36.72949982 100.91115570]
[-49.30609894 97.21527100]
[-59.44515610 88.98195648]
[-65.59878540 77.51537323]
[-66.84581757 64.60951996]
[-81.07123566 59.85165405]
[-95.29666138 55.09378433]
[-110.23723602 60.93833542]
[-124.04924011 52.77696609]
[-126.13729858 36.87037659]
[-114.89961243 25.42074203]
[-98.95679474 27.21124268]
[-90.53879547 40.86835861]
[-76.31336975 45.62622833]
[-62.08794403 50.38409805]
[-49.88364029 38.61096191]
[-33.35729218 34.44137192]
[-16.86123276 39.06250000]
[-4.78420687 51.33459854]
[-0.38377753 68.07061768]
[14.19799519 71.58798981]
[28.77976799 75.10536194]
[43.36154175 78.62273407]
[57.94331360 82.14010620]
[72.13005829 77.60296631]
[83.73112488 88.36055756]
[103.00167847 80.22267151]
[118.98980713 93.71190643]
[133.95855713 94.67953491]
[148.92732239 95.64715576]
[163.89607239 96.61478424]
[178.86483765 97.58241272]
[193.83358765 98.55004120]
[208.80235291 99.51766968]
[222.23028564 86.50740814]
[240.60638428 87.11265564]
[252.73182678 100.51731873]
[267.72836304 100.19457245]
[282.72488403 99.87183380]
[297.72140503 99.54908752]
[311.45559692 90.58780670]
[325.95904541 98.24165344]
[326.31192017 114.63700104]
[312.15115356 122.90773010]
[298.04415894 114.54561615]
[283.04763794 114.86836243]
[268.05111694 115.19110107]
[253.05458069 115.51383972]
[246.90757751 125.54612732]
[236.50462341 131.29876709]
[224.49591064 131.16891479]
[214.00909424 125.07019043]
[207.83471680 114.48642731]
[192.86596680 113.51879883]
[177.89720154 112.55117035]
[162.92845154 111.58354187]
[147.95968628 110.61591339]
[132.99093628 109.64829254]
[118.02217865 108.68066406]
[112.85221863 115.32884216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 38]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[17 27]
[18 26]
[19 25]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
