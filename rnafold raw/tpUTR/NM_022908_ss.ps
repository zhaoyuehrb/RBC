%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:45:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCACCUUUAUUGUCUGGGACAGGCCCUCAGCCCCUCCUGCCCCAUCCACCCAGACAAGCAAUAAAAGUGGUCUCCUCCCUGUGCAUGCUUCUGCUUUCA\
) } def
/len { sequence length } bind def

/coor [
[156.82519531 161.95173645]
[145.74006653 151.84629822]
[131.12190247 148.98992920]
[126.13604736 133.97488403]
[115.05091095 123.86944580]
[103.96577454 113.76400757]
[90.35002136 110.58552551]
[85.92878723 97.32112122]
[74.84365082 87.21569061]
[63.75852203 77.11025238]
[52.67338562 67.00482178]
[41.58825302 56.89938354]
[29.90204430 47.49552536]
[17.65909004 38.82891846]
[5.41613674 30.16231155]
[-6.82681704 21.49570465]
[-19.06977081 12.82909679]
[-31.31272507 4.16248941]
[-43.55567932 -4.50411797]
[-55.79862976 -13.17072582]
[-66.61318970 -10.68912125]
[-76.76557922 -14.58395290]
[-82.89015961 -23.29924965]
[-83.10520935 -33.72734833]
[-94.79141998 -43.13120651]
[-110.86232758 -36.40007019]
[-128.05554199 -38.61887741]
[-141.75158691 -49.10272217]
[-148.31512451 -64.95803070]
[-146.05967712 -81.88072205]
[-158.30262756 -90.54732513]
[-170.54559326 -99.21393585]
[-186.07943726 -96.30277252]
[-199.07467651 -105.29718018]
[-201.82144165 -120.86094666]
[-192.69013977 -133.76036072]
[-177.09820557 -136.34242249]
[-164.29605103 -127.07524872]
[-161.87898254 -111.45688629]
[-149.63603210 -102.79028320]
[-137.39306641 -94.12367249]
[-126.37647247 -100.68491364]
[-113.64112854 -102.53903961]
[-101.11959839 -99.36824036]
[-90.72596741 -91.62000275]
[-84.06324005 -80.44433594]
[-82.17616272 -67.52320862]
[-85.38756561 -54.81741714]
[-73.70135498 -45.41355896]
[-54.51752853 -44.04513168]
[-47.13202286 -25.41367912]
[-34.88906860 -16.74707222]
[-22.64611626 -8.08046436]
[-10.40316296 0.58614326]
[1.83979058 9.25275040]
[14.08274460 17.91935730]
[26.32569885 26.58596611]
[38.56865311 35.25257492]
[41.50249481 34.78624725]
[44.81041336 35.55870819]
[47.97967529 37.72380066]
[50.45034790 41.23081970]
[51.69368744 45.81425095]
[62.77882004 55.91968536]
[73.86395264 66.02511597]
[84.94908905 76.13055420]
[96.03422546 86.23599243]
[109.64997864 89.41447449]
[114.07121277 102.67887878]
[125.15634918 112.78430939]
[136.24148560 122.88974762]
[151.65251160 126.46892548]
[155.84550476 140.76116943]
[166.93063354 150.86660767]
[177.69956970 144.51324463]
[189.75047302 141.23524475]
[202.22460938 141.25817871]
[214.23518372 144.57269287]
[224.93041992 150.93571472]
[233.55390930 159.88822937]
[239.49816895 170.78843689]
[242.34741211 182.85772705]
[241.90657043 195.23631287]
[238.21473694 207.04443359]
[231.54173279 217.44496155]
[241.30101013 228.83604431]
[251.06028748 240.22711182]
[266.83505249 241.19279480]
[277.24392700 253.08526611]
[276.11151123 268.84893799]
[264.10964966 279.13150024]
[248.35884094 277.83248901]
[238.20375061 265.72259521]
[239.66921997 249.98638916]
[229.90994263 238.59530640]
[220.15066528 227.20423889]
[203.53453064 233.42094421]
[185.76702881 232.94059753]
[169.45062256 225.80879211]
[156.98449707 213.04714966]
[150.21185303 196.50712585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[4 71]
[5 70]
[6 69]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 58]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[24 49]
[25 48]
[30 41]
[31 40]
[32 39]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
