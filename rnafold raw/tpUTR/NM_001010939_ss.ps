%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:51:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACCAUGGCGCUGUGUGUUUAAAGAUCUACAUCAUUCCUAAUGAAAUCCAAUUCUUAUUUUUUUUUA\
) } def
/len { sequence length } bind def

/coor [
[90.64598846 125.55326080]
[95.06282043 111.21562195]
[81.85388947 118.32365417]
[68.64495850 125.43167877]
[55.43602371 132.53971863]
[42.38990784 139.94233704]
[29.51317596 147.63581848]
[16.63644409 155.32931519]
[13.01833916 170.71388245]
[-0.46237394 178.96287537]
[-15.80782700 175.18231201]
[-23.91383553 161.61514282]
[-19.97124863 146.31051636]
[-6.31913185 138.34840393]
[8.94295406 142.45257568]
[21.81968689 134.75909424]
[34.69641876 127.06560516]
[38.95965576 120.72509003]
[48.32799530 119.33078003]
[61.53692627 112.22274780]
[74.74585724 105.11471558]
[87.95479584 98.00669098]
[91.55126953 91.24375153]
[98.44897461 87.97322083]
[106.14246368 75.09648895]
[113.83595276 62.21976089]
[121.52944183 49.34302902]
[111.36974335 36.24227524]
[106.89699554 20.31569672]
[108.74285889 3.91238022]
[116.60910797 -10.55881119]
[129.31539917 -20.98297691]
[144.97631836 -25.84825706]
[161.28114319 -24.46505547]
[167.78939819 -37.97958755]
[174.29765320 -51.49412155]
[180.80590820 -65.00865173]
[187.31416321 -78.52318573]
[188.73895264 -95.41716003]
[205.36711121 -98.72477722]
[213.14860535 -83.66208649]
[200.82870483 -72.01493073]
[194.32044983 -58.50039673]
[187.81219482 -44.98586655]
[181.30393982 -31.47133255]
[174.79568481 -17.95679855]
[184.45748901 -8.39114094]
[190.62973022 3.74914885]
[192.67257690 17.23773956]
[190.36412048 30.70694351]
[183.92445374 42.78639221]
[173.99467468 52.24246216]
[161.57318115 58.10425186]
[147.91523743 59.76325607]
[134.40617371 57.03651810]
[126.71268463 69.91324615]
[119.01919556 82.78997803]
[111.32570648 95.66670990]
[125.84447479 91.89771271]
[140.67373657 94.15448761]
[153.41403198 102.07187653]
[162.00389099 114.36879730]
[165.05345154 129.05552673]
[162.06924438 143.75569153]
[153.53414917 156.09068298]
[140.82920837 164.06465149]
[126.01012421 166.38735962]
[111.47473907 162.68298340]
[99.57495117 153.55088806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 22]
[3 21]
[4 20]
[5 19]
[6 17]
[7 16]
[8 15]
[24 58]
[25 57]
[26 56]
[27 55]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
