%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:04:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCUUAAACCAAAACUCAUCAGAGAAUACAUGCUUGAGAGUGAUUUAUUAAAUAUAAUGAAUAUGAGAAAACUCUUAGUUCUCAUCAGAUACUAAGUUUUAAGAAUAAACUUUAGCUAUGUAAUAACUUA\
) } def
/len { sequence length } bind def

/coor [
[113.44569397 350.25485229]
[110.86428070 365.03106689]
[105.00364685 378.83877563]
[96.16833496 390.96054077]
[84.81742096 400.76651001]
[71.54071045 407.74713135]
[57.02807999 411.53970337]
[42.03361511 411.94714355]
[27.33644104 408.94827271]
[13.70023727 402.69897461]
[1.83355415 393.52389526]
[-7.64700556 381.89984131]
[-14.24882317 368.43075562]
[-17.62886238 353.81652832]
[-17.61149406 338.81655884]
[-14.19761944 324.21020508]
[-7.56522989 310.75738525]
[-20.31299782 318.66271973]
[-33.06076431 326.56805420]
[-40.32795715 341.26907349]
[-56.70822144 342.05584717]
[-65.35094452 328.11901855]
[-57.36523438 313.79559326]
[-40.96610641 313.82031250]
[-28.21833801 305.91494751]
[-15.47057056 298.00961304]
[-13.98994827 293.58181763]
[-10.62896442 289.77160645]
[-5.68344069 287.37796021]
[1.14219701 274.02090454]
[7.96783447 260.66387939]
[14.79347229 247.30682373]
[21.61911011 233.94978333]
[28.28652191 220.51304626]
[34.79477692 206.99851990]
[41.30303574 193.48397827]
[40.56219482 188.67768860]
[42.90063095 183.36589050]
[48.45109940 179.49598694]
[55.59030914 166.30387878]
[62.72951889 153.11177063]
[69.86872864 139.91966248]
[77.00794220 126.72756195]
[64.76596069 101.24891663]
[75.17323303 74.96744537]
[67.11788940 62.31392670]
[59.06254959 49.66041183]
[51.00720596 37.00689697]
[42.95186234 24.35338402]
[34.89651871 11.69986820]
[26.84117508 -0.95364702]
[18.78583145 -13.60716248]
[4.00001192 -20.70022583]
[3.01983714 -37.07005310]
[16.85362816 -45.87677002]
[31.27036667 -38.06078339]
[31.43934822 -21.66250610]
[39.49468994 -9.00899029]
[47.55003357 3.64452481]
[55.60537720 16.29804039]
[63.66072083 28.95155525]
[71.71606445 41.60506821]
[79.77140808 54.25858688]
[87.82675171 66.91210175]
[93.82786560 65.28830719]
[100.02088928 64.74384308]
[106.21327209 65.29564667]
[112.21245575 66.92655182]
[117.83190155 69.58585358]
[122.89688110 73.19085693]
[134.84196472 64.11811066]
[146.78706360 55.04536057]
[158.73216248 45.97261047]
[170.67724609 36.89986420]
[182.62234497 27.82711411]
[185.59786987 21.75010109]
[190.48954773 18.62681580]
[195.35261536 18.62389565]
[207.71282959 10.12536907]
[220.07304382 1.62684202]
[232.43327332 -6.87168455]
[244.69226074 -15.51559544]
[256.84829712 -24.30368423]
[269.00436401 -33.09177399]
[275.21243286 -48.27044296]
[291.49588013 -50.21502686]
[301.10366821 -36.92510605]
[294.15216064 -22.07221031]
[277.79244995 -20.93572807]
[265.63638306 -12.14763832]
[253.48034668 -3.35954857]
[249.86836243 3.17088628]
[240.93179321 5.48853540]
[228.57157898 13.98706245]
[216.21134949 22.48558807]
[203.85113525 30.98411560]
[191.69508362 39.77220535]
[179.75000000 48.84495544]
[167.80490112 57.91770554]
[155.85981750 66.99045563]
[143.91471863 76.06320190]
[131.96963501 85.13594818]
[134.68006897 93.65259552]
[135.16184998 102.57714081]
[133.38398743 111.33607483]
[129.46073914 119.36650848]
[123.64424133 126.15238190]
[116.30827332 131.25759888]
[107.92427063 134.35408020]
[99.03102112 135.24284363]
[90.20005035 133.86677551]
[83.06083679 147.05886841]
[75.92162323 160.25097656]
[68.78241730 173.44308472]
[61.64320374 186.63519287]
[54.81756592 199.99223328]
[48.30931091 213.50677490]
[41.80105591 227.02130127]
[40.87737274 236.20718384]
[34.97615433 240.77542114]
[28.15051842 254.13246155]
[21.32488060 267.48950195]
[14.49924278 280.84655762]
[7.67360544 294.20358276]
[20.53378677 286.48248291]
[34.80841064 281.87432861]
[49.75575638 280.61856079]
[64.59914398 282.78048706]
[78.56729889 288.24771118]
[90.93441772 296.73620605]
[101.05789948 307.80487061]
[108.41172028 320.87854004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 26]
[18 25]
[19 24]
[29 124]
[30 123]
[31 122]
[32 121]
[33 120]
[34 118]
[35 117]
[36 116]
[39 115]
[40 114]
[41 113]
[42 112]
[43 111]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[70 102]
[71 101]
[72 100]
[73 99]
[74 98]
[75 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
