%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:49:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUAUUUGAUCAUGUGGCCUCUCUGUUGCUAAUCUCUCCUGGAAACAUCUGCCACAUUUAGUGUGUGUAUGUGUAUUCAUUCUUUCUCAUAACUUCUUAAAGUUUCUUCCCCUCAUUAUUAAAAUGAAUUUACCAGU\
) } def
/len { sequence length } bind def

/coor [
[50.17265701 183.41374207]
[46.81524277 192.64671326]
[41.33726883 200.78515625]
[34.06805038 207.35202026]
[25.44166756 211.96435547]
[15.97101974 214.35566711]
[6.21734428 214.39131165]
[-3.24304438 212.07597351]
[-11.85280704 207.55310059]
[-19.10641670 201.09596252]
[-31.98314857 208.78945923]
[-44.85988235 216.48294067]
[-46.64151382 229.88337708]
[-55.70330048 239.65032959]
[-68.55110168 242.34895325]
[-80.41861725 237.20831299]
[-93.46472931 244.61093140]
[-106.51084900 252.01354980]
[-119.55696106 259.41616821]
[-132.60308838 266.81878662]
[-136.56547546 282.11831665]
[-150.22789001 290.06274414]
[-165.48464966 285.93881226]
[-173.28419495 272.19317627]
[-168.99919128 256.98086548]
[-155.17185974 249.32708740]
[-140.00570679 253.77268982]
[-126.95958710 246.37005615]
[-113.91346741 238.96743774]
[-100.86735535 231.56481934]
[-87.82123566 224.16218567]
[-84.07617188 207.80491638]
[-69.39120483 199.01000977]
[-52.55337143 203.60621643]
[-39.67663956 195.91271973]
[-26.79990578 188.21923828]
[-28.76044846 167.67286682]
[-20.18550873 148.81954956]
[-3.29353714 136.71047974]
[17.45828247 134.62924194]
[36.55002213 143.20167542]
[48.06469345 133.58854675]
[59.57936478 123.97541046]
[71.09403992 114.36227417]
[66.10489655 86.57017517]
[85.86705017 61.89653778]
[120.82451630 60.30999374]
[115.24011230 46.38826752]
[109.65570068 32.46654129]
[104.07129669 18.54481888]
[91.75247955 8.61721897]
[94.19529724 -6.07570028]
[88.61089325 -19.99742508]
[83.02648926 -33.91915131]
[77.28623962 -47.77734375]
[71.39086151 -61.57025909]
[65.49549103 -75.36317444]
[59.60011292 -89.15608978]
[53.70473862 -102.94901276]
[41.91978455 -115.13716888]
[50.36922455 -129.83558655]
[66.83225250 -125.78527069]
[67.49765015 -108.84438324]
[73.39302826 -95.05146790]
[79.28840637 -81.25855255]
[85.18377686 -67.46563721]
[91.07915497 -53.67271805]
[96.64634705 -48.71757507]
[96.94821167 -39.50355530]
[102.53262329 -25.58183098]
[108.11702728 -11.66010571]
[120.03641510 -2.72828126]
[117.99302673 12.96041298]
[123.57743073 26.88213730]
[129.16183472 40.80386353]
[134.74624634 54.72558594]
[136.51989746 39.83081818]
[138.29354858 24.93604851]
[133.74186707 10.64331436]
[134.99168396 -4.30452776]
[141.85362244 -17.64295769]
[153.28816223 -27.35127068]
[167.56301880 -31.95870781]
[182.51562500 -30.76726913]
[195.88075256 -23.95744896]
[205.63362122 -12.56090069]
[210.29676819 1.69585884]
[209.16371155 16.65300369]
[202.40611267 30.04460526]
[191.04772949 39.84190369]
[176.80906677 44.56069183]
[165.80148315 54.75053024]
[154.79388428 64.94037628]
[169.33923340 61.27526855]
[183.88456726 57.61016083]
[198.42991638 53.94505692]
[212.97525024 50.27994919]
[224.36012268 38.47669983]
[240.20701599 42.69670486]
[244.21398926 58.59878922]
[232.25901794 69.82424927]
[216.64036560 64.82529449]
[202.09501648 68.49040222]
[187.54968262 72.15550232]
[173.00433350 75.82061005]
[158.45898438 79.48571777]
[156.54495239 86.73737335]
[171.06684875 90.49434662]
[185.58872986 94.25131989]
[200.05380249 98.22138977]
[196.22557068 112.72464752]
[181.68563843 109.03881836]
[167.20126343 105.13974762]
[152.71688843 101.24067688]
[150.80285645 108.49232483]
[161.64477539 118.85826874]
[172.48669434 129.22421265]
[183.32861328 139.59014893]
[194.17054749 149.95608521]
[210.17727661 151.03506470]
[219.19491577 164.30389404]
[214.30590820 179.58384705]
[199.26068115 185.15347290]
[185.60063171 176.74021912]
[183.80459595 160.79800415]
[172.96267700 150.43206787]
[162.12075806 140.06613159]
[151.27883911 129.70019531]
[140.43690491 119.33425140]
[131.54827881 128.82049561]
[120.76580811 134.93415833]
[109.24079132 137.42543030]
[98.09877014 136.40911865]
[88.33116913 132.32647705]
[80.70716858 125.87694550]
[69.19249725 135.49008179]
[57.67782974 145.10321045]
[46.16315842 154.71635437]
[49.84366608 163.87110901]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 36]
[11 35]
[12 34]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[41 138]
[42 137]
[43 136]
[44 135]
[47 76]
[48 75]
[49 74]
[50 73]
[52 71]
[53 70]
[54 69]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
