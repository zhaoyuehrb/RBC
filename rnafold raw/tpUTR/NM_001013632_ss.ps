%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 20:03:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGAGUCCAAUUCUGCAAAAUUGUUUAUUAUCCUAGGAGGAGGCCCCCCUGGGGCUCACAUCCCAAUAAAUAAGUGUCUGACAAUAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[213.02595520 128.08587646]
[198.23489380 125.59093475]
[183.44384766 123.09600067]
[168.65278625 120.60105896]
[153.86174011 118.10611725]
[146.59646606 120.13898468]
[138.62159729 115.27274323]
[123.92216492 112.28495026]
[109.22274017 109.29716492]
[84.78475952 137.41290283]
[70.97500610 143.26875305]
[57.16526031 149.12458801]
[43.35551071 154.98042297]
[29.54576302 160.83627319]
[23.85302353 175.57968140]
[9.36885166 181.90299988]
[-5.31355190 176.05470276]
[-11.48337650 161.50448608]
[-5.48017550 146.88473511]
[9.13445950 140.86907959]
[23.68992424 147.02651978]
[37.49967194 141.17068481]
[51.30942154 135.31483459]
[65.11917114 129.45899963]
[78.92891693 123.60315704]
[81.03097534 116.40376282]
[67.15238190 122.09451294]
[54.04992676 114.79207611]
[51.58978653 99.99519348]
[61.62445068 88.84595490]
[76.59780121 89.73976135]
[85.23509216 102.00496674]
[87.33715820 94.80556488]
[78.84794617 82.43894196]
[70.35874176 70.07231903]
[61.86953735 57.70569611]
[47.92057037 48.06916428]
[53.31904602 31.99767303]
[70.25690460 32.73614120]
[74.23616028 49.21648788]
[82.72536469 61.58311081]
[91.21456909 73.94973755]
[99.70378113 86.31636047]
[112.21052551 94.59773254]
[126.90995789 97.58552551]
[141.60937500 100.57331848]
[156.35667419 103.31506348]
[171.14773560 105.81000519]
[185.93878174 108.30494690]
[200.72984314 110.79988098]
[215.52088928 113.29482269]
[229.91969299 109.09070587]
[241.04447937 99.02893066]
[252.16925049 88.96716309]
[263.29403687 78.90539551]
[274.41882324 68.84362030]
[274.96035767 53.04861450]
[286.56890869 42.32400513]
[302.35729980 43.03251648]
[312.95858765 54.75380325]
[312.08319092 70.53382874]
[300.25048828 81.01058960]
[284.48059082 79.96839905]
[273.35580444 90.03017426]
[262.23101807 100.09194183]
[251.10624695 110.15371704]
[239.98146057 120.21548462]
[254.97880554 120.49751282]
[269.58697510 123.90367889]
[283.16238403 130.28393555]
[295.10708618 139.35720825]
[304.89483643 150.72383118]
[312.09448242 163.88304138]
[316.38888550 178.25517273]
[317.58880615 193.20710754]
[315.64144897 208.08016968]
[310.63259888 222.21916199]
[302.78286743 235.00123596]
[292.43804932 245.86334229]
[280.05389404 254.32695007]
[266.17593384 260.01922607]
[251.41551208 262.68942261]
[236.42286682 262.21990967]
[221.85844421 258.63134766]
[208.36384583 252.08186340]
[196.53353882 242.85993958]
[186.88865662 231.37184143]
[179.85411072 218.12362671]
[175.73976135 203.69892883]
[174.72685242 188.73316956]
[176.86001587 173.88562012]
[182.04527283 159.81034851]
[190.05421448 147.12741089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 47]
[7 46]
[8 45]
[9 44]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[33 43]
[34 42]
[35 41]
[36 40]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
