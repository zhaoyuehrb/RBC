%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:56:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUGUUUGAGAUGGCAUUUCAAGACUCUGUUUGCUGUCCAGAUUAUUUUGGAAAUAUAUUAACAUUCAAAUUUGG\
) } def
/len { sequence length } bind def

/coor [
[121.48735809 281.85971069]
[132.18455505 270.83856201]
[128.01130676 256.43081665]
[123.83803558 242.02302551]
[119.66477966 227.61526489]
[115.49151611 213.20748901]
[111.31825256 198.79971313]
[107.14498901 184.39195251]
[103.95612335 182.33708191]
[101.72946167 178.49285889]
[101.36417389 173.39483643]
[103.45127869 167.99139404]
[101.04511261 153.18563843]
[98.63893890 138.37988281]
[96.23277283 123.57412720]
[83.14139557 116.90322876]
[76.43591309 103.82953644]
[78.65628815 89.30525208]
[88.96147156 78.83203888]
[86.55530548 64.02628326]
[84.14913940 49.22053146]
[81.74296570 34.41477585]
[79.33679962 19.60902214]
[76.93062592 4.80326843]
[74.52445984 -10.00248528]
[72.11828613 -24.80823898]
[58.59969330 -39.50582504]
[65.53833008 -57.37347794]
[61.94859695 -71.93760681]
[58.35886002 -86.50173187]
[54.76912689 -101.06585693]
[40.13892746 -105.96083832]
[30.49546814 -118.00273132]
[28.91594315 -133.34902954]
[35.90437317 -147.10276794]
[49.23077774 -154.87518311]
[64.64274597 -154.18614197]
[77.22237396 -145.25549316]
[82.95555115 -130.93298340]
[80.01284027 -115.78887177]
[69.33325195 -104.65559387]
[72.92298889 -90.09146881]
[76.51272583 -75.52734375]
[80.10245514 -60.96321487]
[89.56948853 -56.29291534]
[94.88029480 -46.91256332]
[93.97755432 -35.94717789]
[86.92404175 -27.21440887]
[89.33021545 -12.40865421]
[91.73638153 2.39709926]
[94.14254761 17.20285416]
[96.54872131 32.00860596]
[98.95488739 46.81436157]
[101.36106110 61.62011337]
[103.76722717 76.42587280]
[116.85860443 83.09677124]
[123.56408691 96.17046356]
[121.34371185 110.69474792]
[111.03852844 121.16796112]
[113.44469452 135.97370911]
[115.85086060 150.77946472]
[118.25703430 165.58522034]
[121.55276489 180.21868896]
[125.72602081 194.62644958]
[129.89929199 209.03422546]
[134.07254028 223.44200134]
[138.24580383 237.84977722]
[142.41906738 252.25753784]
[146.59233093 266.66531372]
[161.52392578 270.26296997]
[172.64515686 280.85607910]
[176.96449280 295.59509277]
[173.32003784 310.51535034]
[162.69213867 321.60333252]
[147.93965149 325.87643433]
[133.03091431 322.18524170]
[121.97629547 311.52261353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 69]
[3 68]
[4 67]
[5 66]
[6 65]
[7 64]
[8 63]
[12 62]
[13 61]
[14 60]
[15 59]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[28 44]
[29 43]
[30 42]
[31 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
