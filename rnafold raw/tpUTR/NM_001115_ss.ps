%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:50:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCAUUUUCUUUCUGUUUUUUUUUUUUGUAUUUCUUUUAUAUAUAAAAUAAAUAUACUAAUAAAAAGGUUUAAUUUUUUUUAGAACAA\
) } def
/len { sequence length } bind def

/coor [
[108.60473633 215.50122070]
[98.51739502 226.60281372]
[86.65988159 235.78971863]
[73.39052582 242.78430176]
[59.11033630 247.37519836]
[44.25086594 249.42364502]
[29.26116943 248.86773682]
[14.59424210 245.72430420]
[0.69332051 240.08831787]
[-12.02150536 232.13009644]
[-23.16598892 222.09014893]
[-32.40334320 210.27188110]
[-39.45440674 197.03245544]
[-44.10610199 182.77195740]
[-46.21784973 167.92135620]
[-45.72583389 152.92942810]
[-42.64492035 138.24923706]
[-37.06821823 124.32442474]
[-29.16425323 111.57580566]
[-19.17189026 100.38864136]
[-7.39309883 91.10101318]
[5.81616259 83.99359131]
[20.05670738 79.28117371]
[34.89817810 77.10616302]
[49.89207077 77.53428650]
[64.58525085 80.55261230]
[78.53370667 86.06993103]
[91.31157684 93.91630554]
[88.70685577 79.14418793]
[86.10213470 64.37207031]
[83.49741364 49.59995270]
[80.89269257 34.82783890]
[78.28796387 20.05572128]
[75.68324280 5.28360510]
[65.66711426 -6.96334362]
[71.07680511 -20.84082794]
[68.47207642 -35.61294556]
[65.86735535 -50.38505936]
[63.26263428 -65.15717316]
[60.65791321 -79.92929077]
[49.70798874 -92.13712311]
[55.06180191 -107.63773346]
[71.21180725 -110.48541260]
[81.54426575 -97.75072479]
[75.43003082 -82.53401184]
[78.03475189 -67.76190186]
[80.63947296 -52.98978424]
[83.24419403 -38.21766663]
[85.84891510 -23.44555092]
[95.67874146 -12.25520229]
[90.45536041 2.67888236]
[93.06008148 17.45099831]
[95.66480255 32.22311401]
[98.26953125 46.99523163]
[100.87425232 61.76734924]
[103.47897339 76.53946686]
[106.08369446 91.31157684]
[116.31367493 102.28188324]
[130.86810303 105.91071320]
[145.42254639 109.53954315]
[159.97697449 113.16837311]
[175.23904419 108.99946594]
[185.71644592 119.58593750]
[200.27087402 123.21476746]
[214.82531738 126.84359741]
[229.37976074 130.47242737]
[243.93418884 134.10125732]
[256.47805786 124.76395416]
[272.08602905 125.72581482]
[283.38848877 136.53268433]
[285.04876709 152.08187866]
[276.28292847 165.03153992]
[261.22994995 169.26725769]
[246.99734497 162.78903198]
[240.30535889 148.65568542]
[225.75093079 145.02685547]
[211.19648743 141.39804077]
[196.64205933 137.76921082]
[182.08761597 134.14038086]
[167.86657715 138.56884766]
[156.34814453 127.72280884]
[141.79371643 124.09397888]
[127.23928070 120.46514893]
[112.68484497 116.83631897]
[119.62281799 130.13536072]
[124.15280914 144.43498230]
[126.13791656 159.30305481]
[125.51815033 174.29023743]
[122.31224060 188.94363403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[28 57]
[29 56]
[30 55]
[31 54]
[32 53]
[33 52]
[34 51]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[58 84]
[59 83]
[60 82]
[61 81]
[63 79]
[64 78]
[65 77]
[66 76]
[67 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
