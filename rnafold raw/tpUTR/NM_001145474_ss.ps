%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:31:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUCUCACUGAAGGUGGGAGCUGCAGGAAUCAGGUGCAGAGUAGGAAAUGGAACUAACCUCAGGAAGGUGGUAUUGACAGAGGUCAGGACCCACCUGGAUGUCAUGCUAUGAAACAUUAAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[155.42381287 112.26296234]
[140.47827148 110.98595428]
[125.53273010 109.70894623]
[105.73519897 135.16972351]
[66.00902557 127.86410522]
[56.55503082 139.50979614]
[47.10103607 151.15548706]
[37.64704514 162.80116272]
[28.19305038 174.44685364]
[18.73905754 186.09254456]
[9.28506374 197.73822021]
[-0.16892956 209.38391113]
[-5.45754814 225.49188232]
[-22.40005302 224.86907959]
[-26.49173737 208.41629028]
[-11.81461620 199.92991638]
[-2.36062217 188.28422546]
[7.09337139 176.63854980]
[16.54736519 164.99285889]
[26.00135803 153.34716797]
[35.45535278 141.70149231]
[44.90934372 130.05580139]
[54.36333847 118.41011047]
[48.16233826 104.75186920]
[33.17234421 104.20404053]
[18.18235207 103.65621185]
[3.19235873 103.10838318]
[-11.79763412 102.56055450]
[-20.52211380 115.28403473]
[-34.74930191 121.24983215]
[-49.93934631 118.55427551]
[-61.24516678 108.05751801]
[-65.05911255 93.10903168]
[-60.16417313 78.47881317]
[-48.12229919 68.83533478]
[-32.77601242 67.25577545]
[-19.02225494 74.24417114]
[-11.24980354 87.57055664]
[3.74018908 88.11838531]
[18.73018265 88.66622162]
[33.72017288 89.21405029]
[48.71016693 89.76187897]
[53.14805603 83.71579742]
[40.25574493 76.04844666]
[27.36343384 68.38109589]
[12.85031033 64.59040833]
[7.83272171 50.45450592]
[16.70805359 38.36200714]
[31.69801331 38.91071320]
[39.66557312 51.62092972]
[50.84470367 61.62228012]
[62.02383804 71.62362671]
[66.46173096 65.57754517]
[61.44601822 51.44097519]
[47.07119370 44.87287521]
[41.62936401 30.03501701]
[48.34907532 15.73043537]
[63.24363708 10.44578648]
[77.47637177 17.31635666]
[82.60325623 32.26596069]
[75.58258820 46.42526245]
[80.59829712 60.56183243]
[105.91058350 62.05060959]
[122.78643036 76.32160950]
[126.80973816 94.76340485]
[141.75527954 96.04041290]
[156.70082092 97.31742096]
[176.18948364 79.84789276]
[201.29162598 85.44664764]
[213.49096680 76.71875763]
[225.69030762 67.99087524]
[237.88966370 59.26299286]
[250.08900452 50.53511047]
[262.28836060 41.80722427]
[264.79873657 24.54500389]
[278.71316528 14.59251308]
[295.19921875 17.67100906]
[307.18243408 8.64864731]
[319.16561890 -0.37371516]
[331.14883423 -9.39607716]
[343.13201904 -18.41843987]
[349.04431152 -33.71473694]
[365.28695679 -35.97498703]
[375.15090942 -22.87404060]
[368.48895264 -7.88902712]
[352.15438843 -6.43524408]
[340.17117310 2.58711839]
[328.18798828 11.60948086]
[316.20480347 20.63184357]
[304.22158813 29.65420532]
[304.21170044 42.59936142]
[296.60797119 53.31632233]
[284.02435303 57.73115540]
[271.01623535 54.00657272]
[258.81689453 62.73445511]
[246.61753845 71.46234131]
[234.41819763 80.19022369]
[222.21885681 88.91810608]
[210.01950073 97.64598846]
[211.67625427 108.18035889]
[209.25495911 118.56568146]
[220.78466797 128.16078186]
[232.31437683 137.75587463]
[243.84408569 147.35096741]
[255.60401917 156.66246033]
[267.58721924 165.68482971]
[279.57040405 174.70718384]
[291.55361938 183.72955322]
[307.84399414 188.42634583]
[307.84036255 205.38029480]
[291.54800415 210.07012939]
[282.53125000 195.71273804]
[270.54806519 186.69038391]
[258.56484985 177.66801453]
[246.58166504 168.64566040]
[241.71578979 168.43528748]
[236.95643616 165.09603882]
[234.24899292 158.88067627]
[222.71928406 149.28558350]
[211.18957520 139.69049072]
[199.65986633 130.09539795]
[194.26493835 133.11994934]
[188.31307983 134.88940430]
[182.09333801 135.30657959]
[175.91026306 134.34030151]
[170.06900024 132.02740479]
[164.86016846 128.47137451]
[160.54548645 123.83790588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[12 16]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[53 62]
[54 61]
[69 99]
[70 98]
[71 97]
[72 96]
[73 95]
[74 94]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
[101 121]
[102 120]
[103 119]
[104 118]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
