%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:28:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCGCCAAAGAGACCAACAAGAUGAUUUUAGCGUGGACUAGGACACUUAACCUAAGAAGAGUUUCACUUAAUCAUUCAAAUCACUAUCUGAAGGGUCACGGAGCGCAAAAUAAAGUUUAAAACCCUGCUACCACAAUGUUUCUGGAACAAGACUAGAUCA\
) } def
/len { sequence length } bind def

/coor [
[311.30117798 300.48541260]
[309.93182373 274.85900879]
[317.25781250 250.24493408]
[304.56799316 242.24685669]
[291.87820435 234.24879456]
[279.18841553 226.25073242]
[267.27688599 232.34036255]
[253.80432129 231.73168945]
[242.30705261 224.47709656]
[235.85601807 212.38745117]
[236.23683167 198.58116150]
[221.35163879 198.05183411]
[214.07347107 184.00408936]
[201.54115295 175.76145935]
[189.00883484 167.51882935]
[176.47651672 159.27619934]
[163.22758484 166.08288574]
[148.25083923 165.33906555]
[135.57350159 157.14447021]
[128.65457153 143.61578369]
[129.44139099 128.34069824]
[116.90907288 120.09806824]
[104.37676239 111.85543060]
[91.61000824 103.98078156]
[78.61962891 96.48078156]
[65.62924957 88.98078156]
[52.63886642 81.48078156]
[39.64848328 73.98078156]
[26.65810394 66.48078156]
[19.97813416 66.09462738]
[15.23521614 62.85256577]
[13.31753349 58.42970657]
[-2.48278761 57.61704636]
[-9.12432384 44.28515625]
[-21.81412125 36.28709030]
[-34.50391769 28.28902435]
[-47.19371414 20.29095650]
[-61.54727173 25.88395119]
[-76.26982117 21.99809837]
[-85.76885223 10.32623577]
[-86.56404877 -4.52319765]
[-99.25384521 -12.52126408]
[-112.02059937 -20.39591217]
[-124.86309814 -28.14640427]
[-140.67620850 -28.65252304]
[-147.57501221 -41.85311890]
[-160.41752625 -49.60360718]
[-173.26002502 -57.35409927]
[-186.10252380 -65.10459137]
[-199.51118469 -57.61436462]
[-214.86830139 -57.84801102]
[-228.04289246 -65.74268341]
[-235.49104309 -79.17475128]
[-235.20925903 -94.53105927]
[-227.27333069 -107.68083954]
[-213.81797791 -115.08685303]
[-198.46263123 -114.75693512]
[-185.33779907 -106.77983093]
[-177.97399902 -93.30133057]
[-178.35203552 -77.94709015]
[-165.50953674 -70.19660187]
[-152.66703796 -62.44610977]
[-139.82452393 -54.69562149]
[-124.93000031 -54.74386597]
[-117.11260986 -40.98890686]
[-104.27010345 -33.23841476]
[-96.88207245 -32.47093201]
[-91.25578308 -25.21106148]
[-78.56598663 -17.21299362]
[-64.82627106 -22.90143394]
[-50.19854736 -19.36679459]
[-40.34175491 -7.76089096]
[-39.19564819 7.60116053]
[-26.50584984 15.59922695]
[-13.81605434 23.59729385]
[-1.12625766 31.59535980]
[13.76640415 31.83594704]
[21.31559944 45.73991013]
[34.15810394 53.49040222]
[47.14848328 60.99040222]
[60.13886642 68.49040222]
[73.12924957 75.99040222]
[86.11962891 83.49040222]
[99.11000824 90.99040222]
[102.99207306 90.51108551]
[107.06430054 91.77075958]
[110.53398132 94.81364441]
[112.61939240 99.32311249]
[125.15171051 107.56575012]
[137.68402100 115.80838013]
[151.39820862 109.03575897]
[166.56091309 110.03038788]
[179.10655212 118.42521667]
[185.72152710 131.88249207]
[184.71916199 146.74388123]
[197.25148010 154.98651123]
[209.78379822 163.22914124]
[222.31611633 171.47177124]
[238.09770203 172.59068298]
[244.47946167 186.04884338]
[260.19714355 179.86369324]
[276.34887695 184.20498657]
[286.64144897 197.17677307]
[287.18649292 213.56092834]
[299.87628174 221.55900574]
[312.56607056 229.55706787]
[325.25585938 237.55513000]
[330.16162109 231.88565063]
[335.60580444 226.73260498]
[341.53442383 222.14685059]
[347.88858032 218.17367554]
[354.60522461 214.85221863]
[361.61776733 212.21520996]
[368.85668945 210.28855896]
[376.25018311 209.09115601]
[383.72503662 208.63462830]
[391.20718384 208.92330933]
[398.62252808 209.95411682]
[405.89764404 211.71664429]
[412.96054077 214.19320679]
[419.74133301 217.35910034]
[426.17297363 221.18275452]
[432.19183350 225.62612915]
[437.73843384 230.64505005]
[442.75796509 236.18965149]
[447.20092773 242.20484924]
[451.02340698 248.63098145]
[454.18780518 255.40426636]
[456.66290283 262.45751953]
[458.42443848 269.72085571]
[459.45513916 277.12225342]
[459.74502563 284.58837891]
[459.29141235 292.04525757]
[458.09902954 299.41909790]
[456.17987061 306.63687134]
[453.55319214 313.62713623]
[450.24514771 320.32077026]
[446.28872681 326.65151978]
[441.72329712 332.55682373]
[436.59423828 337.97830200]
[430.95248413 342.86245728]
[424.85409546 347.16101074]
[431.58609009 360.56549072]
[438.31808472 373.96997070]
[445.05004883 387.37448120]
[451.78204346 400.77896118]
[467.03881836 404.20895386]
[476.48028564 416.67459106]
[475.64846802 432.29003906]
[464.93612671 443.68212891]
[449.40130615 445.47186279]
[436.37905884 436.81420898]
[432.01809692 421.79699707]
[438.37756348 407.51095581]
[431.64556885 394.10644531]
[424.91357422 380.70196533]
[418.18157959 367.29748535]
[411.44961548 353.89300537]
[386.36709595 358.87136841]
[361.05206299 355.12985229]
[338.44989014 343.09140015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 107]
[4 106]
[5 105]
[6 104]
[11 100]
[13 98]
[14 97]
[15 96]
[16 95]
[21 90]
[22 89]
[23 88]
[24 84]
[25 83]
[26 82]
[27 81]
[28 80]
[29 79]
[32 78]
[34 76]
[35 75]
[36 74]
[37 73]
[41 69]
[42 68]
[43 66]
[44 65]
[46 63]
[47 62]
[48 61]
[49 60]
[142 158]
[143 157]
[144 156]
[145 155]
[146 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
