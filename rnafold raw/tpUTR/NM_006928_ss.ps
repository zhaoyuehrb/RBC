%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:24:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUACUCUCAUAUGAUGCUGUGAUUUUCCUGGAGUUGACAGAAACACCUAUAUUUCCCCCAGUCUUCCCUGGGAGACUACUAUUAACUGAAAUAAAUACUCAGAGCCUGA\
) } def
/len { sequence length } bind def

/coor [
[72.39013672 349.72592163]
[62.18022919 360.85848999]
[49.24677277 368.66247559]
[34.63822174 372.50524902]
[19.53882217 372.07528687]
[5.17262125 367.40740967]
[-7.29578114 358.88006592]
[-16.85562515 347.18450928]
[-22.73193932 333.26885986]
[-24.44835663 318.26116943]
[-21.86573410 303.37808228]
[-15.19343472 289.82604980]
[-4.97234964 278.70373535]
[7.96894217 270.91271973]
[22.58134842 267.08465576]
[37.68030548 267.52978516]
[42.31555939 253.26394653]
[46.95081711 238.99809265]
[43.52515030 224.50277710]
[55.14824677 213.76899719]
[59.78350067 199.50314331]
[64.41875458 185.23730469]
[47.03030396 175.66790771]
[32.08768845 162.60462952]
[20.28086281 146.65061951]
[12.15500259 128.54257202]
[8.08531284 109.11658478]
[8.25970650 89.26964569]
[12.67013264 69.91817474]
[21.11294174 51.95570755]
[8.97768784 43.13892746]
[-6.73475742 41.28699875]
[-12.48346519 27.54648781]
[-24.61872101 18.72970963]
[-36.75397491 9.91293049]
[-52.32251740 12.63250256]
[-65.20595551 3.47867465]
[-67.76077271 -12.11774921]
[-58.47124481 -24.90368843]
[-42.84868240 -27.29347038]
[-30.16167450 -17.86927986]
[-27.93719673 -2.22232413]
[-15.80194187 6.59445477]
[-3.66668677 15.41123390]
[11.17776394 16.63252831]
[17.79446602 31.00367355]
[29.92972183 39.82045364]
[42.47907639 27.73129845]
[57.07560730 18.21419144]
[73.19982147 11.60784912]
[90.27785492 8.14739132]
[107.70190430 7.95597506]
[124.85183716 11.04041290]
[141.11729431 17.29093170]
[148.86325073 4.44569540]
[149.36380005 -11.36759090]
[162.56196594 -18.27105522]
[170.30792236 -31.11629105]
[178.05387878 -43.96152496]
[185.79985046 -56.80676270]
[193.54580688 -69.65200043]
[189.50393677 -84.93070221]
[197.52168274 -98.55021667]
[212.84226990 -102.43032837]
[226.37625122 -94.26903534]
[230.09417725 -78.90828705]
[221.79023743 -65.46134186]
[206.39103699 -61.90603638]
[198.64508057 -49.06079865]
[190.89912415 -36.21556473]
[183.15315247 -23.37032890]
[175.40719604 -10.52509403]
[175.46069336 4.36941528]
[161.70849609 12.19165707]
[153.96252441 25.03689194]
[162.18093872 31.69953728]
[169.58352661 39.25828934]
[176.07316589 47.61397934]
[181.56472778 56.65697861]
[185.98614502 66.26863861]
[189.27941895 76.32286072]
[191.40133667 86.68772888]
[192.32406616 97.22725677]
[192.03549194 107.80316162]
[190.53941345 118.27668762]
[187.85543823 128.51042175]
[184.01879883 138.37010193]
[179.07981873 147.72634888]
[173.10330200 156.45643616]
[166.16766357 164.44580078]
[158.36390686 171.58963013]
[149.79440308 177.79420471]
[140.57159424 182.97811890]
[130.81648254 187.07333374]
[120.65706635 190.02615356]
[110.22661591 191.79780579]
[99.66199493 192.36508179]
[89.10180664 191.72050476]
[78.68460083 189.87255859]
[74.04934692 204.13839722]
[69.41409302 218.40425110]
[72.50821686 233.91995239]
[61.21666336 243.63334656]
[56.58140945 257.89920044]
[51.94615173 272.16503906]
[64.42311859 280.67987061]
[73.99470520 292.36581421]
[79.88499451 306.27554321]
[81.61648560 321.28149414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 105]
[17 104]
[18 103]
[20 101]
[21 100]
[22 99]
[30 47]
[31 46]
[33 44]
[34 43]
[35 42]
[54 75]
[55 74]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
