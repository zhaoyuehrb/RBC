%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 15:00:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGGCUGCAUCUCCCUUUCCUCUGUCCUCCAUCCUUCUCCCAGGAUGGUGAAGGGGGACCUGGUACCCAGUGAUCCCCACCCCAGGAUCCUAAAUCAUGACUUACCUGCUAAUAAAAACUCAUUGGAAAAGUGAGA\
) } def
/len { sequence length } bind def

/coor [
[88.08084869 103.05726624]
[73.14299774 101.69324493]
[58.20514679 100.32922363]
[43.26729202 98.96519470]
[28.32944107 97.60117340]
[13.88285446 104.05149841]
[1.91190434 95.18890381]
[-13.02594852 93.82488251]
[-27.96380043 92.46086121]
[-46.71883011 102.70918274]
[-63.22540283 90.39820099]
[-78.22151184 90.05675507]
[-93.21762848 89.71530151]
[-108.21374512 89.37385559]
[-123.20985413 89.03240967]
[-138.20596313 88.69096375]
[-153.20208740 88.34951019]
[-168.19819641 88.00806427]
[-183.19430542 87.66661835]
[-172.29843140 97.97582245]
[-167.70481873 112.25513458]
[-170.54617310 126.98356628]
[-180.12187195 138.52938843]
[-194.07073975 144.04563904]
[-208.95327759 142.17210388]
[-221.09974670 133.37078857]
[-227.51507568 119.81189728]
[-226.61738586 104.83878326]
[-218.62802124 92.14350891]
[-205.51817322 84.85678101]
[-220.13116455 81.47142792]
[-234.74414062 78.08607483]
[-249.35713196 74.70071411]
[-263.97012329 71.31536102]
[-278.58309937 67.93000793]
[-293.19607544 64.54464722]
[-306.47088623 73.12107086]
[-321.90426636 69.71717834]
[-330.33987427 56.35243225]
[-326.77297974 40.95590973]
[-313.31979370 32.66209030]
[-297.96185303 36.39154816]
[-289.81072998 49.93166351]
[-275.19775391 53.31701660]
[-260.58474731 56.70237350]
[-245.97177124 60.08773041]
[-231.35879517 63.47308731]
[-216.74580383 66.85844421]
[-202.13281250 70.24379730]
[-192.64082336 67.08390045]
[-182.85285950 72.67050171]
[-167.85675049 73.01195526]
[-152.86064148 73.35340118]
[-137.86451721 73.69484711]
[-122.86840820 74.03629303]
[-107.87229156 74.37774658]
[-92.87618256 74.71919250]
[-77.88006592 75.06063843]
[-62.88395309 75.40208435]
[-57.45122528 68.19107056]
[-49.16292953 64.27489471]
[-39.86589813 64.66846466]
[-31.69871521 69.41003418]
[-26.59977722 77.52301025]
[-11.66192532 78.88703156]
[3.27592731 80.25105286]
[16.65405846 73.70316315]
[29.69346428 82.66332245]
[44.63131714 84.02734375]
[59.56916809 85.39136505]
[74.50701904 86.75539398]
[89.44487762 88.11941528]
[102.91679382 81.52339172]
[111.00026703 68.88783264]
[119.08374786 56.25227356]
[127.16722870 43.61671448]
[135.25070190 30.98115540]
[129.46591187 16.58269501]
[133.28175354 1.54211676]
[145.23095703 -8.35716915]
[160.71884155 -9.30868530]
[173.78996277 -0.94655460]
[179.41822815 13.51381302]
[175.43945312 28.51211166]
[163.38356018 38.28118896]
[147.88626099 39.06463623]
[139.80279541 51.70019531]
[131.71931458 64.33575439]
[123.63582611 76.97131348]
[115.55235291 89.60687256]
[128.70408630 82.39355469]
[138.30599976 70.86952209]
[152.31646729 65.51166534]
[167.15771484 67.68817902]
[179.03982544 76.84326935]
[184.92849731 90.63904572]
[183.31999207 105.55255890]
[174.62506104 117.77541351]
[161.06408691 124.18633270]
[146.10005188 123.14819336]
[133.55332947 114.92507172]
[118.86962128 111.86099243]
[130.28678894 121.58972168]
[141.70396423 131.31845093]
[153.12112427 141.04718018]
[164.53829956 150.77590942]
[180.88108826 146.57843018]
[196.36401367 152.85711670]
[204.99432373 166.96926880]
[203.55831909 183.28245544]
[215.19398499 192.74877930]
[226.82966614 202.21510315]
[238.46533203 211.68141174]
[250.10099792 221.14773560]
[265.06332397 217.03575134]
[279.57318115 222.53520203]
[288.05120850 235.53146362]
[287.23745728 251.02717590]
[277.44479370 263.06396484]
[262.43875122 267.01339722]
[247.98942566 261.35684204]
[239.65287781 248.26939392]
[240.63467407 232.78340149]
[228.99900818 223.31709290]
[217.36334229 213.85076904]
[205.72767639 204.38444519]
[194.09201050 194.91813660]
[181.51397705 199.53387451]
[168.19453430 197.29229736]
[157.65209961 188.67648315]
[152.72538757 175.86749268]
[154.80957031 162.19308472]
[143.39239502 152.46435547]
[131.97523499 142.73562622]
[120.55805969 133.00689697]
[109.14088440 123.27816010]
[96.06747437 120.39843750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[5 68]
[7 66]
[8 65]
[9 64]
[11 59]
[12 58]
[13 57]
[14 56]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[73 90]
[74 89]
[75 88]
[76 87]
[77 86]
[102 136]
[103 135]
[104 134]
[105 133]
[106 132]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
