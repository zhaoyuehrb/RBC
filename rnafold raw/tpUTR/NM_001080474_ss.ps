%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:09:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUGAGAUUGUUGGUUUUACUUUGGAUACCGCUGGUUUUCCACAUAUAUAGAUAGAUACUAAUUUAUUUAUUCUGAUAUAUUUUUAAAACAUAAUAAAGAAAUGUAAUAGAAUUGAUUAAUAGAUAAGUAAUAAAGAGGCCUUUUGAGUUUUG\
) } def
/len { sequence length } bind def

/coor [
[112.23730469 441.86416626]
[111.63330841 426.87631226]
[111.02931976 411.88848877]
[110.42533112 396.90063477]
[109.82134247 381.91281128]
[101.57784271 369.50741577]
[108.75318909 355.40689087]
[108.14920044 340.41903687]
[107.54521179 325.43121338]
[96.45755005 315.55197144]
[95.63151550 300.36077881]
[106.06894684 288.79800415]
[105.46495819 273.81018066]
[104.86096954 258.82232666]
[89.36865997 251.41961670]
[79.68124390 237.13612366]
[78.52185059 219.82752991]
[86.29680634 204.22093201]
[100.96012115 194.62393188]
[99.75312042 179.67257690]
[98.54612732 164.72120667]
[97.33912659 149.76985168]
[96.13212585 134.81849670]
[94.92513275 119.86713409]
[83.02482605 110.73571014]
[68.27053070 113.43953705]
[53.51623154 116.14336395]
[38.76193237 118.84719086]
[25.05245018 131.10093689]
[8.76291466 124.63872528]
[-5.93394518 127.63910675]
[-20.63080597 130.63949585]
[-34.94041443 139.73187256]
[-47.63875580 128.49850464]
[-40.35964584 113.18672180]
[-23.63119125 115.94263458]
[-8.93433094 112.94224548]
[5.76252890 109.94186401]
[12.72049141 100.00287628]
[24.98316574 97.40884399]
[36.05810928 104.09288788]
[50.81240845 101.38906097]
[65.56670380 98.68524170]
[80.32100677 95.98141479]
[82.98053741 88.96878815]
[67.99806976 88.24390411]
[64.05781555 73.77067566]
[76.60517883 65.55095673]
[88.29961395 74.94355011]
[90.95915222 67.93092346]
[81.70836639 56.12317276]
[72.45758820 44.31542206]
[63.20680237 32.50766754]
[53.95601654 20.69991684]
[44.70523453 8.89216518]
[35.45445251 -2.91558719]
[26.20366859 -14.72333908]
[16.95288658 -26.53109169]
[7.70210266 -38.33884430]
[-7.70489311 -43.95636368]
[-10.27659512 -60.15260696]
[2.63254261 -70.26627350]
[17.74270630 -63.89328384]
[19.50985527 -47.58962631]
[28.76063728 -35.78187561]
[38.01142120 -23.97412300]
[47.26220322 -12.16637039]
[56.51298904 -0.35861808]
[65.76377106 11.44913387]
[75.01455688 23.25688553]
[84.26533508 35.06464005]
[93.51612091 46.87239075]
[102.76689911 58.68014145]
[117.76386261 58.37808609]
[126.53169250 46.20742035]
[135.29951477 34.03675079]
[144.06735229 21.86608505]
[145.85598755 6.14630795]
[159.57322693 0.34230405]
[168.34106445 -11.82836342]
[177.10888672 -23.99903107]
[185.87672424 -36.16969681]
[194.64454651 -48.34036636]
[203.41238403 -60.51103210]
[212.18020630 -72.68170166]
[220.94804382 -84.85237122]
[229.71586609 -97.02303314]
[222.38385010 -110.40975952]
[221.59478760 -125.65246582]
[227.50535583 -139.72471619]
[238.94198608 -149.83242798]
[253.63394165 -153.96875000]
[268.66412354 -151.31237793]
[281.04827881 -142.39074707]
[288.32754517 -128.97525024]
[289.05654907 -113.72956085]
[283.09063721 -99.68070221]
[271.61428833 -89.61808777]
[256.90615845 -85.53966522]
[241.88653564 -88.25520325]
[233.11871338 -76.08454132]
[224.35087585 -63.91387177]
[215.58305359 -51.74320221]
[206.81521606 -39.57253647]
[198.04739380 -27.40186882]
[189.27955627 -15.23120022]
[180.51171875 -3.06053305]
[171.74389648 9.11013412]
[170.58239746 23.95938301]
[156.23802185 30.63391495]
[147.47018433 42.80458069]
[138.70236206 54.97525024]
[129.93452454 67.14591980]
[143.86657715 61.58730698]
[158.84933472 60.86830139]
[173.24963379 65.06727600]
[185.49778748 73.72651672]
[194.25871277 85.90215302]
[198.57745361 100.26699829]
[197.98321533 115.25521851]
[192.54080200 129.23306274]
[182.84344482 140.67689514]
[169.94818115 148.33929443]
[155.26066589 151.38504028]
[140.38185120 149.48211670]
[126.93360138 142.83798218]
[116.38182068 132.17683411]
[109.87648773 118.66013336]
[111.08348846 133.61149597]
[112.29048920 148.56285095]
[113.49748230 163.51422119]
[114.70448303 178.46557617]
[115.91148376 193.41693115]
[128.10929871 197.84756470]
[137.67709351 206.54586792]
[143.20610046 218.18301392]
[143.90055847 231.00120544]
[139.69200134 243.07908630]
[131.24420166 252.61982727]
[119.84880066 258.21835327]
[120.45278931 273.20617676]
[121.05677795 288.19403076]
[132.39077759 298.87942505]
[132.78981018 314.08782959]
[122.53305054 324.82720947]
[123.13703918 339.81506348]
[123.74102783 354.80288696]
[132.02772522 368.28033447]
[124.80918121 381.30883789]
[125.41316986 396.29666138]
[126.01715851 411.28448486]
[126.62114716 426.27233887]
[127.22513580 441.26016235]
[133.90434265 456.84298706]
[120.77949524 467.57492065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[7 147]
[8 146]
[9 145]
[12 142]
[13 141]
[14 140]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
[25 44]
[26 43]
[27 42]
[28 41]
[30 38]
[31 37]
[32 36]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[74 113]
[75 112]
[76 111]
[77 110]
[79 108]
[80 107]
[81 106]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[87 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
