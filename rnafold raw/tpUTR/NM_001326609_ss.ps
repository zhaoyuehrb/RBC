%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 07:05:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCCGUAACUGAUUUUAAAGGGUUUAGAUUUUAAGAAUGGUGCUCUUUCAUGCCUAUUAUCAGUAAGGGGACUUGUAUUAGAGUCAGAGUCUUUUUAUUUAGGCCAGUUGUCAAGUGUCAAUAAAAGCAUCAUGUAAUUUA\
) } def
/len { sequence length } bind def

/coor [
[100.84905243 299.44116211]
[93.19098663 312.33898926]
[82.61839294 322.97949219]
[69.76985168 330.71997070]
[55.42142487 335.09292603]
[40.43975067 335.83419800]
[25.72972679 332.89901733]
[12.17984009 326.46469116]
[0.60850197 316.91986084]
[-8.28537655 304.84100342]
[-13.96460629 290.95767212]
[-16.08615875 276.10845947]
[-14.52189541 261.19024658]
[-9.36629486 247.10409546]
[-0.93084055 234.70089722]
[-14.66051292 240.74209595]
[-28.39018440 246.78329468]
[-42.11985779 252.82449341]
[-55.84952927 258.86569214]
[-69.57920074 264.90689087]
[-83.30887604 270.94808960]
[-97.03854370 276.98928833]
[-100.19919586 292.18106079]
[-111.70832825 302.58874512]
[-127.14044189 304.21035767]
[-140.56156921 296.42236328]
[-146.81101990 282.21939087]
[-143.48574829 267.06280518]
[-131.86439514 256.78060913]
[-116.41560364 255.32649231]
[-103.07974243 263.25964355]
[-89.35007477 257.21844482]
[-75.62039948 251.17723083]
[-61.89072800 245.13603210]
[-48.16105652 239.09483337]
[-34.43138504 233.05363464]
[-20.70171356 227.01242065]
[-6.97204113 220.97122192]
[4.82794476 211.71054077]
[13.95936584 199.81024170]
[23.09078789 187.90994263]
[32.22220993 176.00964355]
[41.35363007 164.10934448]
[50.48505020 152.20904541]
[59.61647415 140.30874634]
[68.74789429 128.40843201]
[61.57329178 117.52488708]
[58.05939484 104.97183228]
[58.54095078 91.94514465]
[62.97208786 79.68579102]
[70.93067169 69.36166382]
[81.65853119 61.95628738]
[94.13368225 58.17512894]
[107.16769409 58.37839890]
[112.29799652 44.28300858]
[117.42829132 30.18762016]
[122.55859375 16.09222984]
[127.68889618 1.99684143]
[113.09192657 5.45060396]
[101.15380096 -3.63130212]
[100.58734894 -18.62060356]
[111.80599213 -28.57761192]
[126.62199402 -26.23537636]
[134.22227478 -13.30193996]
[140.85659790 -26.75503159]
[147.49093628 -40.20812225]
[154.12525940 -53.66121292]
[160.75959778 -67.11430359]
[167.39392090 -80.56739807]
[174.02825928 -94.02048492]
[180.66258240 -107.47357941]
[187.29692078 -120.92666626]
[193.93124390 -134.37976074]
[200.56558228 -147.83285522]
[207.19990540 -161.28594971]
[213.83424377 -174.73902893]
[208.98725891 -189.54257202]
[215.90705872 -203.09140015]
[230.04983521 -207.62101746]
[236.68417358 -221.07411194]
[235.07228088 -237.39385986]
[248.55548096 -246.72846985]
[263.26342773 -239.47531128]
[264.06585693 -223.09580994]
[250.13726807 -214.43978882]
[243.50292969 -200.98669434]
[248.51892090 -187.00901794]
[241.98240662 -173.27116394]
[227.28732300 -168.10470581]
[220.65299988 -154.65161133]
[214.01866150 -141.19851685]
[207.38433838 -127.74542999]
[200.75001526 -114.29233551]
[194.11567688 -100.83924866]
[187.48135376 -87.38615417]
[180.84701538 -73.93306732]
[174.21269226 -60.47997284]
[167.57835388 -47.02688217]
[160.94403076 -33.57379150]
[154.30969238 -20.12070084]
[147.67536926 -6.66760969]
[141.78428650 7.12714338]
[136.65399170 21.22253227]
[131.52368164 35.31792068]
[126.39337921 49.41331100]
[121.26307678 63.50870132]
[134.09281921 75.07184601]
[141.22093201 90.80393219]
[141.45533752 108.07395172]
[155.43545532 113.51052856]
[169.41557312 118.94709778]
[183.39569092 124.38366699]
[199.06184387 122.17414856]
[208.11947632 133.99821472]
[224.23661804 130.97009277]
[234.71086121 143.58843994]
[228.76718140 158.87257385]
[212.51994324 161.09950256]
[202.68290710 147.97833252]
[188.01669312 150.57672119]
[177.95912170 138.36378479]
[163.97900391 132.92721558]
[149.99888611 127.49064636]
[136.01876831 122.05407715]
[125.46020508 133.69735718]
[111.37538147 140.67350769]
[95.71504974 142.01634216]
[80.64819336 137.53985596]
[71.51677704 149.44015503]
[62.38535309 161.34045410]
[53.25392914 173.24076843]
[44.12250900 185.14106750]
[34.99108887 197.04136658]
[25.85966682 208.94166565]
[16.72824478 220.84196472]
[30.78110504 215.59628296]
[45.68899918 213.93653870]
[60.55148697 215.96298218]
[74.47087097 221.55322266]
[86.60643005 230.36958313]
[96.22515869 241.87957764]
[102.74610138 255.38800049]
[105.77538300 270.07891846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[39 135]
[40 134]
[41 133]
[42 132]
[43 131]
[44 130]
[45 129]
[46 128]
[54 106]
[55 105]
[56 104]
[57 103]
[58 102]
[64 101]
[65 100]
[66 99]
[67 98]
[68 97]
[69 96]
[70 95]
[71 94]
[72 93]
[73 92]
[74 91]
[75 90]
[76 89]
[79 86]
[80 85]
[109 124]
[110 123]
[111 122]
[112 121]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
