%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 23:51:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCCUGUUUGACUCCGCCACUAUCUGCCAUGUGAGUUGGGCAAAUUGUUGACCACCUCUGAGCCUUGAAAAAGUAGGAGGUUACUUUGUUAGAGCAAAAUAAUAAAAUUUAAUUUUAAAAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[74.92028046 138.02450562]
[62.59142303 125.98949432]
[49.03158188 132.40281677]
[35.47174454 138.81614685]
[21.91190529 145.22947693]
[8.35206509 151.64280701]
[21.06842995 159.59855652]
[23.02641869 174.47021484]
[12.80259800 185.44625854]
[-2.17043638 184.54724121]
[-11.00746536 172.42671204]
[-7.28362608 157.89564514]
[-21.52654839 162.60087585]
[-35.76947021 167.30609131]
[-50.01239395 172.01132202]
[-64.25531769 176.71655273]
[-78.43943024 181.59620667]
[-92.36701965 187.16595459]
[-106.08016205 193.24458313]
[-109.19937897 208.44491577]
[-120.68008423 218.88392639]
[-136.10771179 220.54760742]
[-149.55003357 212.79624939]
[-155.83819580 198.61038208]
[-152.55426025 183.44477844]
[-140.96099854 173.13092041]
[-125.51622009 171.63470459]
[-112.15878296 179.53143311]
[-98.44564056 173.45281982]
[-96.83879089 170.20214844]
[-93.52075195 167.60629272]
[-88.83550262 166.48731995]
[-83.49277496 167.47303772]
[-78.19910431 162.20195007]
[-68.96054077 162.47363281]
[-54.71762085 157.76840210]
[-40.47469711 153.06317139]
[-26.23177528 148.35794067]
[-11.98885250 143.65272522]
[1.93873894 138.08296204]
[15.49857807 131.66963196]
[29.05841827 125.25630951]
[42.61825562 118.84298706]
[56.17809677 112.42965698]
[54.74371338 105.16954041]
[54.50389099 97.77296448]
[55.46496201 90.43517303]
[57.60155487 83.34985352]
[60.85727310 76.70402527]
[65.14618683 70.67309570]
[70.35507965 65.41626740]
[76.34646606 61.07229996]
[82.96219635 57.75584030]
[90.02764893 55.55443954]
[97.35633087 54.52619934]
[104.75479126 54.69826126]
[108.75547791 40.24161911]
[112.75617218 25.78497887]
[116.75686646 11.32833767]
[120.75755310 -3.12830353]
[124.75824738 -17.58494377]
[116.92479706 -26.69396973]
[114.53482056 -38.34486389]
[118.07693481 -49.57231903]
[126.54499054 -57.57673264]
[137.72029114 -60.42217636]
[142.42550659 -74.66510010]
[147.13073730 -88.90802002]
[143.27195740 -104.84671021]
[155.33088684 -115.96040344]
[170.90232849 -110.81629181]
[173.96774292 -94.70619202]
[161.37365723 -84.20279694]
[156.66844177 -69.95986938]
[151.96321106 -55.71694946]
[161.18594360 -39.99309158]
[156.00076294 -22.18716812]
[139.21488953 -13.58425331]
[135.21420288 0.87238777]
[131.21350098 15.32902908]
[127.21281433 29.78566933]
[123.21212006 44.24230957]
[119.21143341 58.69895172]
[136.07846069 72.19352722]
[144.83206177 91.94130707]
[143.50366211 113.50135803]
[156.90202332 120.24552917]
[170.30039978 126.98970032]
[183.69876099 133.73387146]
[199.50418091 133.02743530]
[207.39372253 145.66090393]
[220.79208374 152.40507507]
[234.19044495 159.14924622]
[247.58880615 165.89341736]
[260.98718262 172.63758850]
[274.38552856 179.38175964]
[289.22824097 174.65605164]
[302.72000122 181.68646240]
[307.13375854 195.86582947]
[320.53213501 202.61000061]
[333.93051147 209.35417175]
[347.32885742 216.09834290]
[362.25497437 210.90345764]
[376.44607544 217.85960388]
[381.48287964 232.83979797]
[374.37707520 246.95657349]
[359.34445190 251.83470154]
[345.30358887 244.58004761]
[340.58468628 229.49670410]
[327.18634033 222.75253296]
[313.78796387 216.00836182]
[300.38958740 209.26419067]
[286.37136841 214.16566467]
[272.68743896 207.51698303]
[267.64135742 192.78012085]
[254.24301147 186.03594971]
[240.84463501 179.29177856]
[227.44627380 172.54760742]
[214.04791260 165.80343628]
[200.64955139 159.05926514]
[185.80245972 160.24809265]
[176.95458984 147.13223267]
[163.55622864 140.38806152]
[150.15786743 133.64389038]
[136.75949097 126.89971924]
[124.13899994 138.62854004]
[108.06501770 144.83091736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 44]
[3 43]
[4 42]
[5 41]
[6 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 33]
[18 29]
[19 28]
[56 83]
[57 82]
[58 81]
[59 80]
[60 79]
[61 78]
[66 75]
[67 74]
[68 73]
[86 125]
[87 124]
[88 123]
[89 122]
[91 120]
[92 119]
[93 118]
[94 117]
[95 116]
[96 115]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
