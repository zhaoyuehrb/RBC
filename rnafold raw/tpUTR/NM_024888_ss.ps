%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:15:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGCGGGGCCGGGGGCGGGCGGGGGGCGGGCCGAGGGCGCGGGCGGCCGCGCGGAUGCUCAAUAAAGCGGCAGAAACCGA\
) } def
/len { sequence length } bind def

/coor [
[91.51168060 152.13275146]
[91.79576874 137.13589478]
[84.29711151 136.99397278]
[75.75817871 149.32630920]
[67.21924591 161.65864563]
[58.68030930 173.99098206]
[54.63472366 190.45518494]
[37.69403076 191.12544250]
[32.36031342 175.03233337]
[46.34796906 165.45205688]
[54.88690186 153.11972046]
[63.42583466 140.78736877]
[71.96476746 128.45503235]
[65.89627838 95.03586578]
[86.38974762 74.41427612]
[83.01240540 59.79943466]
[79.63507080 45.18459320]
[76.25772858 30.56975174]
[72.88039398 15.95491028]
[59.75889206 7.56062651]
[56.54198456 -7.30901194]
[64.62551117 -19.76662636]
[61.24817276 -34.38146591]
[50.60235596 -46.08518982]
[55.27536392 -60.22776031]
[44.62954330 -71.93148041]
[49.30255127 -86.07405090]
[45.92521286 -100.68889618]
[42.54787064 -115.30373383]
[31.90205383 -127.00745392]
[36.57506180 -141.15002441]
[25.92924118 -152.85374451]
[30.60224915 -166.99632263]
[27.22490883 -181.61116028]
[23.84757042 -196.22599792]
[10.31192780 -204.38455200]
[6.59089518 -219.74453735]
[14.89209557 -233.19317627]
[30.29057312 -236.75160217]
[43.65068436 -228.30868530]
[47.04611588 -212.87344360]
[38.46240997 -199.60333252]
[41.83975220 -184.98849487]
[45.21709061 -170.37365723]
[55.62133789 -159.71528625]
[51.18990326 -144.52735901]
[61.59415054 -133.86898804]
[57.16271210 -118.68107605]
[60.54005051 -104.06623077]
[63.91739273 -89.45139313]
[74.32164001 -78.79302216]
[69.89020538 -63.60509872]
[80.29444885 -52.94672775]
[75.86301422 -37.75880432]
[79.24035645 -23.14396477]
[91.97005463 -15.49607468]
[95.60335541 -0.72265923]
[87.49523163 12.57757092]
[90.87257385 27.19241142]
[94.24990845 41.80725479]
[97.62725067 56.42209244]
[101.00458527 71.03693390]
[109.85005951 71.29167175]
[118.59562683 74.30029297]
[126.37291718 80.01050568]
[132.34141541 88.09458160]
[135.77584839 97.96316528]
[136.14709473 108.80667877]
[133.18829346 119.66150665]
[126.93836975 129.49554443]
[135.00451660 142.14218140]
[143.07066345 154.78881836]
[158.55429077 157.95622253]
[167.19334412 171.19036865]
[163.86239624 186.63964844]
[150.53767395 195.13829041]
[135.12446594 191.64421082]
[126.76717377 178.23036194]
[130.42402649 162.85496521]
[122.35787964 150.20832825]
[114.29174042 137.56169128]
[106.79308319 137.41975403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[5 11]
[6 10]
[15 62]
[16 61]
[17 60]
[18 59]
[19 58]
[22 55]
[23 54]
[25 52]
[27 50]
[28 49]
[29 48]
[31 46]
[33 44]
[34 43]
[35 42]
[70 81]
[71 80]
[72 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
