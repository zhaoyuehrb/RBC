%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:28:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGAAAGCUGAGAACUUCGGAAAAGGCUCAUCUGUCACCCUGGAGAAGGGAAACUGUACUUUUCCCUGUGAGGAAACGGCUUUGUAUUUUCUCUGUAAUAAAAUGGGGCUUCUUUGGAA\
) } def
/len { sequence length } bind def

/coor [
[113.08117676 264.60083008]
[123.54978943 252.76089478]
[122.39215088 237.80563354]
[121.23451996 222.85037231]
[120.07688904 207.89511108]
[118.91925812 192.93984985]
[117.76162720 177.98457336]
[114.06462097 171.48156738]
[116.77178955 162.63020325]
[115.99961090 147.65008545]
[115.22743225 132.66998291]
[104.56983185 134.75962830]
[94.07697296 133.55426025]
[84.71622467 129.34580994]
[77.29611206 122.69462585]
[72.39682007 114.36186218]
[70.32641602 105.22550964]
[55.37115479 104.06787872]
[40.41589355 102.91024780]
[25.46063042 101.75261688]
[10.50536728 100.59498596]
[-4.44989586 99.43735504]
[-12.63188457 110.61309814]
[-25.18083382 116.21384430]
[-38.74714279 114.86264038]
[-49.76779175 107.02264404]
[-55.40210724 94.84693909]
[-70.32260895 93.30462646]
[-85.24310303 91.76231384]
[-97.34864807 101.92259979]
[-113.08547211 100.46388245]
[-123.11720276 88.25159454]
[-121.49218750 72.53107452]
[-109.17452240 62.62901688]
[-93.47206116 64.42014313]
[-83.70079041 76.84181213]
[-68.78028870 78.38412476]
[-53.85979462 79.92644501]
[-43.34803772 67.38879395]
[-27.28380013 63.50666046]
[-11.90175915 69.98887634]
[-3.29226375 84.48209381]
[11.66299915 85.63972473]
[26.61826134 86.79735565]
[41.57352448 87.95498657]
[56.52878952 89.11261749]
[71.48405457 90.27024841]
[78.42221069 78.97081757]
[89.53924561 71.74402618]
[87.99693298 56.82352829]
[86.45462036 41.90303040]
[84.91230774 26.98253059]
[83.36998749 12.06203270]
[81.82767487 -2.85846519]
[80.28536224 -17.77896309]
[67.23567963 -26.39521980]
[62.82704163 -41.39848328]
[69.14107513 -55.70467377]
[83.19647980 -62.55884171]
[98.35671997 -58.72466278]
[107.46360779 -46.01251602]
[106.21714020 -30.42468834]
[95.20585632 -19.32127762]
[96.74816895 -4.40078020]
[98.29048920 10.51971817]
[99.83280182 25.44021606]
[101.37511444 40.36071396]
[102.91743469 55.28121185]
[104.45974731 70.20171356]
[118.48252869 73.75292969]
[130.02656555 83.89484406]
[136.03096008 99.01419067]
[149.77571106 93.00738525]
[163.52047729 87.00057983]
[177.26522827 80.99376678]
[191.00997925 74.98696136]
[204.75473022 68.98014832]
[218.49948120 62.97334290]
[223.96955872 51.20706177]
[235.63597107 46.51877213]
[246.97657776 50.93680573]
[260.87142944 45.28588486]
[273.26577759 33.71797562]
[287.81271362 42.42562485]
[283.47235107 58.81457138]
[266.52236938 59.18074799]
[252.62750244 64.83166504]
[242.69190979 79.23551941]
[224.50628662 76.71809387]
[210.76153564 82.72490692]
[197.01678467 88.73171234]
[183.27203369 94.73851776]
[169.52728271 100.74533081]
[155.78253174 106.75213623]
[142.03776550 112.75894928]
[156.97975159 114.07706451]
[171.47991943 110.23712921]
[186.25222778 112.84074402]
[198.56587219 121.40660858]
[206.14457703 134.35122681]
[207.58732605 149.28169250]
[202.62742615 163.43794250]
[192.18176270 174.20306396]
[178.18130493 179.58703613]
[163.21417236 178.59457397]
[150.04718018 171.40914917]
[141.11437988 159.35903931]
[138.06704712 144.67387390]
[130.20753479 131.89779663]
[130.97972107 146.87791443]
[131.75190735 161.85801697]
[132.71688843 176.82695007]
[133.87452698 191.78221130]
[135.03215027 206.73747253]
[136.18978882 221.69273376]
[137.34741211 236.64799500]
[138.50505066 251.60325623]
[150.67100525 261.69113159]
[152.05723572 277.43450928]
[141.84130859 289.49313354]
[126.08415985 290.71282959]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 117]
[3 116]
[4 115]
[5 114]
[6 113]
[7 112]
[9 111]
[10 110]
[11 109]
[17 47]
[18 46]
[19 45]
[20 44]
[21 43]
[22 42]
[27 38]
[28 37]
[29 36]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[72 95]
[73 94]
[74 93]
[75 92]
[76 91]
[77 90]
[78 89]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
