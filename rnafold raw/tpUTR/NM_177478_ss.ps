%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 13:22:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACGAGCUGCCUUCCUCCCAGGCUAGUGGAUCCAAAGACCAAAGUCAGCUGUCUCCUGCUUUCUUGCCCUUAAAAUCACCUCCAUCUUUAUAUUCUUCUGUUAUACUAUUCCUCCAAUAAAGUGAUUUGUAGAA\
) } def
/len { sequence length } bind def

/coor [
[81.74517059 129.00285339]
[69.44647980 118.24987793]
[59.14822388 129.15611267]
[48.84996414 140.06234741]
[38.55170822 150.96858215]
[34.70284653 166.31448364]
[20.33927917 170.25621033]
[10.04102325 181.16244507]
[-0.25723380 192.06867981]
[-10.55549049 202.97489929]
[-5.05548716 217.21263123]
[-6.28623009 232.42604065]
[-14.00335407 245.59451294]
[-26.67461967 254.10343933]
[-41.78413773 256.26336670]
[-56.33189774 251.64543152]
[-67.42944336 241.16651917]
[-72.87332916 226.90725708]
[-71.58268738 211.69880676]
[-63.81376648 198.56082153]
[-51.10909271 190.10186768]
[-35.99118805 188.00146484]
[-21.46172333 192.67665100]
[-11.16346645 181.77041626]
[-0.86520934 170.86418152]
[9.43304729 159.95794678]
[12.54530907 145.39213562]
[27.64547729 140.67031860]
[37.94373322 129.76408386]
[48.24198914 118.85785675]
[58.54024887 107.95162201]
[44.27394867 112.58549500]
[32.79210281 122.23780823]
[18.18376923 125.64318085]
[3.61728072 122.06304169]
[-7.74810457 112.27386475]
[-13.44740200 98.39878082]
[-12.24451828 83.44709015]
[-4.40034056 70.66159058]
[8.38384438 62.81528091]
[23.33533478 61.60990143]
[37.21137238 67.30688477]
[47.00189209 78.66955566]
[60.34415054 85.52404785]
[51.92143631 73.11204529]
[43.49872208 60.70003891]
[28.23243141 57.60519409]
[19.86741638 44.89767075]
[22.91196060 30.36266518]
[14.48924637 17.95065880]
[6.06653214 5.53865337]
[-9.44628620 5.17519569]
[-21.76233292 -4.26379728]
[-26.14583969 -19.14883995]
[-20.91125679 -33.75632858]
[-8.07138729 -42.46939087]
[7.43657494 -41.93766785]
[19.64950371 -32.36562347]
[23.87127686 -17.43390656]
[18.47853851 -2.88406062]
[26.90125275 9.52794552]
[35.32396698 21.93995094]
[49.95556259 24.48003006]
[58.67420578 36.94758606]
[55.91072845 52.27732468]
[64.33344269 64.68933105]
[72.75615692 77.10134125]
[89.01929474 67.88567352]
[106.82321167 68.43862915]
[121.00451660 77.69088745]
[127.91728210 92.17940521]
[142.91630554 92.00742340]
[153.92378235 80.98593903]
[169.13735962 81.02519226]
[179.57682800 91.58706665]
[194.57583618 91.41508484]
[209.57485962 91.24310303]
[224.57386780 91.07112122]
[239.57289124 90.89913940]
[254.57189941 90.72715759]
[269.57092285 90.55517578]
[271.53689575 75.65834808]
[275.60302734 61.19295502]
[281.68646240 47.45350266]
[289.66336060 34.71970749]
[299.37136841 23.25081062]
[310.61279297 13.28030491]
[323.15881348 5.01117945]
[336.75396729 -1.38821912]
[351.12152100 -5.78760672]
[365.96890259 -8.09741783]
[380.99392700 -8.27062702]
[395.89062500 -6.30370808]
[410.35577393 -2.23670530]
[424.09484863 3.84758234]
[436.82815552 11.82528687]
[448.29644775 21.53399277]
[458.26626587 32.77604294]
[466.53460693 45.32255936]
[472.93316650 58.91812134]
[477.33166504 73.28593445]
[479.64056396 88.13348389]
[479.81283569 103.15850067]
[477.84500122 118.05508423]
[473.77709961 132.51997375]
[467.69195557 146.25866699]
[459.71347046 158.99148560]
[450.00405884 170.45918274]
[438.76138306 180.42828369]
[426.21435547 188.69586182]
[412.61840820 195.09358215]
[398.25030518 199.49118042]
[383.40261841 201.79916382]
[368.37759399 201.97050476]
[353.48110962 200.00175476]
[339.01647949 195.93295288]
[325.27816772 189.84696960]
[312.54583740 181.86769104]
[301.07876587 172.15756226]
[291.11035156 160.91427612]
[282.84353638 148.36672974]
[276.44665527 134.77038574]
[272.04995728 120.40203094]
[269.74288940 105.55419159]
[254.74388123 105.72617340]
[239.74487305 105.89815521]
[224.74584961 106.07013702]
[209.74684143 106.24211884]
[194.74781799 106.41410065]
[179.74880981 106.58608246]
[169.55427551 117.38454437]
[154.34558105 117.77262878]
[143.08828735 107.00643921]
[128.08926392 107.17841339]
[122.77243805 120.00492859]
[111.71527100 129.38128662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[7 26]
[8 25]
[9 24]
[10 23]
[44 67]
[45 66]
[46 65]
[49 62]
[50 61]
[51 60]
[71 134]
[72 133]
[75 130]
[76 129]
[77 128]
[78 127]
[79 126]
[80 125]
[81 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
