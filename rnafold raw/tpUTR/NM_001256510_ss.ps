%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:20:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGAUGAUUCUUCUUUGGCCAUCAUUUGGUACAGUCUCAUUUCCAAGUCAUGUAUAAUCUUUAUGGCUUCCAAGGACAAGAAUUAAAAUACUCUUUUACGUAAAAUGAGUAAUAAUCUUUUUUCUGACUGUC\
) } def
/len { sequence length } bind def

/coor [
[126.54878998 126.02609253]
[122.89053345 141.03593445]
[116.15854645 154.44042969]
[109.42655945 167.84492493]
[102.69457245 181.24940491]
[95.96258545 194.65390015]
[102.32203674 208.93995667]
[97.96108246 223.95715332]
[84.93885040 232.61482239]
[69.40402222 230.82508850]
[58.69167328 219.43299866]
[57.85985565 203.81755066]
[67.30131531 191.35188293]
[82.55809784 187.92190552]
[89.29008484 174.51742554]
[96.02207184 161.11293030]
[102.75405884 147.70843506]
[109.48604584 134.30395508]
[99.44863129 123.15628815]
[89.41212463 112.00960541]
[75.37738800 117.30356598]
[61.34263992 122.59752655]
[47.30789948 127.89148712]
[39.41391373 141.85803223]
[23.55046654 144.25189209]
[11.88663387 133.23669434]
[13.36991119 117.26235962]
[26.86245537 108.58303070]
[42.01393890 113.85674286]
[56.04868317 108.56278229]
[70.08342743 103.26882172]
[84.11817169 97.97486877]
[96.45529175 89.44284821]
[106.36187744 78.17964935]
[116.26845551 66.91645050]
[126.17503357 55.65324783]
[136.08161926 44.39004517]
[145.98818970 33.12684631]
[134.07400513 42.24013138]
[119.09777069 43.08433533]
[106.23488617 35.36772156]
[99.93039703 21.75693703]
[102.36296844 6.95549679]
[112.69195557 -3.92162943]
[127.34796143 -7.11560774]
[141.26626587 -1.52268648]
[149.63719177 10.92471123]
[143.85665894 -2.91672516]
[138.07611084 -16.75816154]
[132.29557800 -30.59959793]
[126.51503754 -44.44103622]
[120.73449707 -58.28247070]
[114.95396423 -72.12390900]
[109.17342377 -85.96534729]
[93.96565247 -88.55904388]
[82.58974457 -98.97979736]
[78.67570496 -113.90239716]
[83.47249603 -128.56507874]
[95.44947052 -138.28904724]
[110.78482819 -139.97142029]
[124.58510590 -133.07533264]
[132.44668579 -119.80133820]
[131.86097717 -104.38510132]
[123.01486206 -91.74588776]
[128.79539490 -77.90444946]
[134.57594299 -64.06301117]
[140.35647583 -50.22157288]
[146.13700867 -36.38013840]
[151.91755676 -22.53870010]
[157.69808960 -8.69726372]
[163.47863770 5.14417267]
[168.21606445 8.83240604]
[170.96812439 13.34997940]
[171.71394348 17.90417290]
[170.70812988 21.77436447]
[185.70710754 21.59983444]
[200.70610046 21.42530632]
[215.70507812 21.25077629]
[231.26499939 11.48306847]
[246.23757935 20.56143761]
[261.22842407 20.03794479]
[276.21929932 19.51445389]
[291.21017456 18.99096107]
[299.76800537 15.53775501]
[306.55505371 18.63380432]
[321.55404663 18.45927429]
[336.55303955 18.28474617]
[343.77465820 9.99756622]
[354.16616821 7.16177607]
[364.17733765 10.49279881]
[370.52667236 18.64114952]
[385.51754761 19.16464233]
[400.50839233 19.68813324]
[415.49926758 20.21162605]
[430.49014282 20.73511887]
[444.55191040 13.48415089]
[457.00140381 21.66091347]
[471.99227905 22.18440628]
[486.98312378 22.70789909]
[499.64968872 12.86218739]
[515.21038818 16.76651001]
[521.72845459 31.42580223]
[514.20367432 45.59471130]
[498.40853882 48.40406036]
[486.45965576 37.69876099]
[471.46878052 37.17527008]
[456.47790527 36.65177536]
[443.48837280 43.94018555]
[429.96664429 35.72598267]
[414.97576904 35.20248795]
[399.98492432 34.67899704]
[384.99404907 34.15550232]
[370.00317383 33.63201141]
[353.73767090 43.98794556]
[336.72756958 33.28372955]
[321.72857666 33.45825958]
[306.72958374 33.63278961]
[291.73364258 33.98182297]
[276.74279785 34.50531387]
[261.75192261 35.02880859]
[246.76106262 35.55229950]
[238.23300171 44.21189499]
[225.68731689 44.71841431]
[215.87960815 36.24976349]
[200.88063049 36.42428970]
[185.88163757 36.59881973]
[170.88265991 36.77334976]
[157.25138855 43.03342438]
[147.34481812 54.29662704]
[137.43823242 65.55982971]
[127.53165436 76.82302856]
[117.62507629 88.08622742]
[107.71849823 99.34942627]
[117.19806671 103.52968597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[20 32]
[21 31]
[22 30]
[23 29]
[33 133]
[34 132]
[35 131]
[36 130]
[37 129]
[38 128]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[75 127]
[76 126]
[77 125]
[78 124]
[80 121]
[81 120]
[82 119]
[83 118]
[85 117]
[86 116]
[87 115]
[91 113]
[92 112]
[93 111]
[94 110]
[95 109]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
