%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:06:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAGGAGAGUUUAUAAAUCUGCCAGACCAUCCAUCAGAAUCAGCUUGGGAUGAACUUAUUCAGAUGGUUUUACUUUAUUAAUUCCUCCAAUUAUUACAAUAAUCAUAAAAAGGUGAAAACGGAAAAGUUAUUCCCAAAACUGAUUCUAUGUAACUUACUAUUUUUCCAGGAGUAAAUAUUUAAAAUAGC\
) } def
/len { sequence length } bind def

/coor [
[105.30386353 129.93510437]
[105.92072296 114.94828796]
[98.42706299 114.63996887]
[89.45137024 126.65816498]
[80.57482147 138.74975586]
[71.79800415 150.91395569]
[63.02119827 163.07815552]
[65.34187317 178.48114014]
[56.26765442 190.69233704]
[41.56895065 192.80981445]
[32.79214096 204.97401428]
[24.01532936 217.13821411]
[15.23851871 229.30239868]
[22.12391090 242.97171021]
[21.85658455 258.27487183]
[14.49796963 271.69537354]
[1.73902059 280.14923096]
[-13.48834896 281.69384766]
[-27.68499947 275.97424316]
[-37.58864594 264.30477905]
[-40.92350388 249.36700439]
[-36.92324448 234.59349060]
[-26.50710106 223.37910461]
[-12.06862545 218.30082703]
[3.07432604 220.52558899]
[11.85113716 208.36138916]
[20.62794685 196.19720459]
[29.40475845 184.03300476]
[26.78023529 169.41632080]
[35.50788498 156.95507812]
[50.85700226 154.30134583]
[59.63381577 142.13714600]
[68.41062164 129.97294617]
[69.77716827 122.69667053]
[77.43317413 117.68247223]
[86.40886688 105.66427612]
[90.42999268 91.21330261]
[88.95206451 76.28629303]
[87.47413635 61.35927963]
[85.99620056 46.43226624]
[84.51827240 31.50525284]
[83.04034424 16.57823944]
[81.56241608 1.65122581]
[80.08448029 -13.27578735]
[69.00551605 -27.97436905]
[76.83760834 -43.67057800]
[75.11437225 -58.57126617]
[73.39112854 -73.47195435]
[71.66789246 -88.37263489]
[69.94464874 -103.27332306]
[68.22141266 -118.17401123]
[56.11998367 -127.98182678]
[54.58464050 -143.11778259]
[64.00947571 -154.59420776]
[62.28623199 -169.49488831]
[60.56299210 -184.39558411]
[58.83975220 -199.29626465]
[57.11651230 -214.19694519]
[53.01572800 -222.37864685]
[55.48954391 -229.35661316]
[54.01161575 -244.28363037]
[52.53368378 -259.21063232]
[49.46834183 -263.47760010]
[48.45901871 -268.03765869]
[49.27085114 -272.05447388]
[51.36972046 -274.90762329]
[50.62985611 -289.88937378]
[39.19942856 -300.47158813]
[38.66252136 -315.67575073]
[48.82147980 -326.50769043]
[48.08161163 -341.48944092]
[47.34174728 -356.47116089]
[46.60188293 -371.45291138]
[45.86201859 -386.43466187]
[45.12215042 -401.41641235]
[44.38228607 -416.39813232]
[43.64242172 -431.37988281]
[35.23385239 -444.78161621]
[42.33397293 -457.87503052]
[41.59410477 -472.85678101]
[40.85424042 -487.83853149]
[26.03577423 -490.57891846]
[12.24896526 -496.66339111]
[0.23731771 -505.76376343]
[-9.35139465 -517.38934326]
[-16.00006485 -530.91308594]
[-19.35013771 -545.60571289]
[-19.22094917 -560.67486572]
[-15.61946583 -575.30792236]
[-8.73991108 -588.71569824]
[1.04670930 -600.17517090]
[13.21261501 -609.06823730]
[27.10171509 -614.91546631]
[41.96498489 -617.40136719]
[57.00087357 -616.39202881]
[71.39850616 -611.94171143]
[84.38143921 -604.29058838]
[95.24952698 -593.85119629]
[103.41665649 -581.18646240]
[108.44239044 -566.97949219]
[110.05569458 -551.99633789]
[108.16957092 -537.04510498]
[102.88572693 -522.93206787]
[94.48912048 -510.41833496]
[83.43257141 -500.17874146]
[70.31233978 -492.76550293]
[55.83598328 -488.57839966]
[56.57584763 -473.59664917]
[57.31571198 -458.61489868]
[65.67136383 -446.28475952]
[58.62416458 -432.11975098]
[59.36402893 -417.13800049]
[60.10389328 -402.15628052]
[60.84375763 -387.17453003]
[61.58362579 -372.19277954]
[62.32349014 -357.21102905]
[63.06335449 -342.22930908]
[63.80322266 -327.24755859]
[74.98000336 -317.46926880]
[75.94375610 -302.28619385]
[65.61159515 -290.62924194]
[66.35146332 -275.64749146]
[67.46070099 -260.68856812]
[68.93862915 -245.76155090]
[70.41655731 -230.83454895]
[72.01719666 -215.92019653]
[73.74044037 -201.01950073]
[75.46367645 -186.11882019]
[77.18692017 -171.21812439]
[78.91015625 -156.31744385]
[90.70563507 -147.29512024]
[92.66551208 -132.20825195]
[83.12209320 -119.89724731]
[84.84533691 -104.99656677]
[86.56857300 -90.09587860]
[88.29181671 -75.19519043]
[90.01505280 -60.29450607]
[91.73829651 -45.39381790]
[101.02617645 -37.62720871]
[102.57503510 -25.21522141]
[95.01149750 -14.75371742]
[96.48942566 0.17329592]
[97.96735382 15.10030937]
[99.44528961 30.02732277]
[100.92321777 44.95433426]
[102.40114594 59.88134766]
[103.87907410 74.80836487]
[105.35700226 89.73537445]
[111.21639252 75.92713165]
[118.13403320 62.61750412]
[130.22485352 53.73988342]
[144.99520874 51.12521362]
[159.39884949 55.31274796]
[170.46510315 65.43884277]
[175.91168213 79.41506195]
[174.61524963 94.35893250]
[166.84320068 107.18840027]
[154.19633484 115.25821686]
[141.11660767 107.91514587]
[149.07469177 120.63005066]
[157.03277588 133.34495544]
[164.99087524 146.05986023]
[172.94895935 158.77478027]
[180.90704346 171.48968506]
[188.86512756 184.20458984]
[203.60853577 180.75340271]
[218.67344666 182.27888489]
[232.42573547 188.61553955]
[243.37365723 199.07601929]
[250.32966614 212.52565002]
[252.53923035 227.50552368]
[249.76264954 242.39073181]
[242.30113220 255.56663513]
[230.96403503 265.60400391]
[216.98110962 271.41409302]
[201.86915588 272.36660767]
[187.26737976 268.35827637]
[174.75965881 259.82388306]
[165.70277405 247.68916321]
[161.07911682 233.27040100]
[161.39024353 218.13165283]
[166.60240173 203.91503906]
[176.15022278 192.16267395]
[168.19213867 179.44776917]
[160.23405457 166.73286438]
[152.27595520 154.01795959]
[144.31787109 141.30303955]
[136.35978699 128.58813477]
[128.40170288 115.87322998]
[120.90804291 115.56491852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 36]
[4 35]
[5 33]
[6 32]
[7 31]
[10 28]
[11 27]
[12 26]
[13 25]
[37 148]
[38 147]
[39 146]
[40 145]
[41 144]
[42 143]
[43 142]
[44 141]
[46 138]
[47 137]
[48 136]
[49 135]
[50 134]
[51 133]
[54 130]
[55 129]
[56 128]
[57 127]
[58 126]
[60 125]
[61 124]
[62 123]
[66 122]
[67 121]
[70 118]
[71 117]
[72 116]
[73 115]
[74 114]
[75 113]
[76 112]
[77 111]
[79 109]
[80 108]
[81 107]
[159 189]
[160 188]
[161 187]
[162 186]
[163 185]
[164 184]
[165 183]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
