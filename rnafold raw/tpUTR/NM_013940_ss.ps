%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:15:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAAUUCACUGGGAACAACUAAAUUGGAUUACCGAAGGCUAUUGUUAAAAAUUACGUUCCGUGGUGACUCAU\
) } def
/len { sequence length } bind def

/coor [
[83.38912201 350.20101929]
[82.13395691 335.25363159]
[80.87878418 320.30624390]
[78.48735046 318.34741211]
[76.85454559 315.18365479]
[76.50266266 311.15267944]
[77.79849243 306.79742432]
[80.87878418 302.79589844]
[82.13395691 287.84851074]
[83.38912201 272.90112305]
[84.64428711 257.95373535]
[85.89945984 243.00633240]
[77.52205658 227.73144531]
[87.77399445 212.60197449]
[88.40213013 197.61512756]
[89.03026581 182.62828064]
[89.65840149 167.64144897]
[90.28653717 152.65460205]
[75.65940857 147.69061279]
[63.05802536 138.75756836]
[53.53113556 126.59893036]
[47.87161255 112.22660065]
[46.55046844 96.83671570]
[49.67765808 81.71009064]
[56.99292374 68.10564423]
[67.88744354 57.15560150]
[60.66114044 44.01100159]
[53.43483353 30.86640167]
[46.20853043 17.72180176]
[31.90862656 9.69404984]
[31.98149681 -6.70493555]
[46.35218048 -14.60528564]
[60.23734665 -5.87979650]
[59.35313034 10.49549580]
[66.57943726 23.64009666]
[73.80574036 36.78469467]
[81.03204346 49.92929459]
[100.00000000 46.45694733]
[118.96795654 49.92929459]
[126.19425964 36.78469467]
[133.42056274 23.64009666]
[132.53634644 7.26480389]
[146.42150879 -1.46068501]
[160.79219055 6.43966436]
[160.86506653 22.83864975]
[146.56517029 30.86640167]
[139.33886719 44.01100159]
[132.11254883 57.15560150]
[141.37553406 66.01582336]
[148.26718140 76.82376099]
[152.39251709 88.95998383]
[153.51513672 101.72892761]
[151.57066345 114.39878845]
[146.67056274 126.24342346]
[139.09565735 136.58398438]
[129.28010559 144.82783508]
[117.78643036 150.50248718]
[105.27337646 153.28274536]
[104.64524078 168.26957703]
[104.01710510 183.25642395]
[103.38896942 198.24327087]
[102.76083374 213.23010254]
[110.99049377 223.40982056]
[109.98297882 236.05514526]
[100.84684753 244.26150513]
[99.59168243 259.20889282]
[98.33651733 274.15628052]
[97.08134460 289.10366821]
[95.82617950 304.05108643]
[95.82617950 319.05108643]
[97.08134460 333.99847412]
[98.33651733 348.94586182]
[105.68703461 364.22351074]
[93.04127502 375.51602173]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[26 37]
[27 36]
[28 35]
[29 34]
[39 48]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
