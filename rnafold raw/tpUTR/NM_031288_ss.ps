%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:21:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCUUAACCCGGACUCUGCGCCCCGUCCCAUGCCCGCUCUUGAGUAUCUUCCCCACCCUAUUAAAUUACAUCCGGUGCUUCGGCUUGUACAGAA\
) } def
/len { sequence length } bind def

/coor [
[112.62608337 127.42044830]
[106.49546051 141.11042786]
[114.34143829 154.49774170]
[112.78660583 169.93672180]
[102.42881775 181.49076843]
[87.25086212 184.71710205]
[73.08896637 178.37515259]
[65.38867950 164.90350342]
[67.11090088 149.48229980]
[77.59341431 138.04130554]
[92.80548096 134.97979736]
[98.93610382 121.28982544]
[89.69267273 109.47631073]
[74.93003082 112.13417816]
[60.16738129 114.79204559]
[45.40473557 117.44990540]
[40.27922440 131.92832947]
[28.59077263 141.89204407]
[13.48351574 144.66087341]
[-0.97876889 139.49000549]
[-10.90580082 127.77037811]
[-13.62725830 112.65451813]
[-8.41108227 98.20851135]
[3.33960104 88.31826782]
[18.46391869 85.64420319]
[32.89350128 90.90563202]
[42.74686813 102.68726349]
[57.50951767 100.02939606]
[72.27216339 97.37152863]
[87.03481293 94.71366882]
[100.18408966 87.49588013]
[110.35271454 76.46868134]
[114.01992035 61.07835388]
[128.33589172 56.96712494]
[138.50451660 45.93992996]
[148.67314148 34.91273499]
[151.99577332 15.16036701]
[170.45132446 9.78703499]
[179.88482666 -1.87524831]
[182.54812622 -17.47067642]
[196.56796265 -22.49995232]
[206.00148010 -34.16223526]
[208.66477966 -49.75766373]
[222.68460083 -54.78694153]
[232.11811829 -66.44922638]
[241.36154175 -78.26273346]
[250.41246033 -90.22438049]
[259.46337891 -102.18601990]
[250.46232605 -114.31687927]
[245.24482727 -128.49272156]
[244.23385620 -143.56436157]
[247.51133728 -158.31002808]
[254.81161499 -171.53434753]
[265.54287720 -182.16529846]
[278.83517456 -189.34104919]
[293.61096191 -192.47990417]
[308.67245483 -191.32742310]
[322.79867554 -185.97702026]
[334.84445190 -176.86244202]
[343.83331299 -164.72253418]
[349.03659058 -150.54147339]
[350.03240967 -135.46881104]
[346.74011230 -120.72644043]
[339.42654419 -107.50946045]
[328.68463135 -96.88931274]
[315.38513184 -89.72691345]
[300.60617065 -86.60289764]
[285.54586792 -87.77050781]
[271.42501831 -93.13510132]
[262.37411499 -81.17346191]
[253.32318115 -69.21181488]
[251.76815796 -61.83831787]
[243.78039551 -57.01571274]
[234.34689331 -45.35342789]
[232.35833740 -30.59216499]
[217.66375732 -24.72872353]
[208.23023987 -13.06644058]
[206.24169922 1.69482350]
[191.54711914 7.55826378]
[182.11360168 19.22054672]
[184.10951233 29.47964478]
[179.94622803 39.30762482]
[170.81642151 45.25377274]
[159.70033264 45.08135986]
[149.53170776 56.10855484]
[139.36308289 67.13574982]
[136.42321777 81.73734283]
[121.37991333 86.63730621]
[111.21128845 97.66450500]
[122.23249054 87.48937988]
[136.99467468 84.82896423]
[150.87460327 90.51644135]
[159.52536011 102.77060699]
[160.23767090 117.75368500]
[152.78846741 130.77325439]
[139.51069641 137.75184631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[13 30]
[14 29]
[15 28]
[16 27]
[31 89]
[32 88]
[34 86]
[35 85]
[36 84]
[38 80]
[39 79]
[41 77]
[42 76]
[44 74]
[45 73]
[46 71]
[47 70]
[48 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
