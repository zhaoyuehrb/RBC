%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:40:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGAGCUUCUACCCAGGAAAAACCUCAUUUUAUUAAUCAAAGGCAAUACUUUGGUUUAUAUAUAUAUUUUUAAAUGGUUAUGUUUAUGGAUUAAUCAAUAAACUUUGUUUAUUAUAA\
) } def
/len { sequence length } bind def

/coor [
[27.14218521 227.37236023]
[12.18322659 227.98469543]
[-1.83223629 222.83726501]
[-11.93767071 233.92239380]
[-8.95658970 249.03594971]
[-15.37147522 262.84545898]
[-28.53219032 270.14337158]
[-43.28997421 268.31423950]
[-53.39540863 279.39938354]
[-63.50084686 290.48449707]
[-73.60627747 301.56964111]
[-74.30467224 317.59747314]
[-87.35551453 326.92782593]
[-102.74731445 322.40319824]
[-108.67279816 307.49453735]
[-100.58644867 293.63848877]
[-84.69141388 291.46420288]
[-74.58597565 280.37905884]
[-64.48054504 269.29394531]
[-54.37511063 258.20880127]
[-57.55812073 243.68273926]
[-51.50565338 229.90480042]
[-38.34693909 222.24310303]
[-23.02280426 223.81697083]
[-12.91736984 212.73182678]
[-19.33602905 199.25109863]
[-20.10654068 184.29945374]
[-15.08039379 170.15368652]
[-4.99415064 158.97982788]
[8.63831997 152.50144958]
[23.75300980 151.73388672]
[38.04825974 156.82519531]
[48.15369415 145.74006653]
[51.01007080 131.12190247]
[66.02511597 126.13604736]
[76.13055420 115.05091095]
[86.23599243 103.96577454]
[89.41447449 90.35002136]
[102.67887878 85.92878723]
[112.78430939 74.84365082]
[122.88974762 63.75852203]
[132.99517822 52.67338562]
[143.10061646 41.58825302]
[135.66358948 28.42967796]
[132.66192627 13.63668823]
[134.37727356 -1.33949113]
[140.62911987 -15.03362942]
[150.79377747 -26.10984230]
[163.86650085 -33.49190903]
[178.56085205 -36.46784210]
[193.43527222 -34.75852966]
[207.03450012 -28.54386902]
[217.13992310 -39.62900162]
[227.24536133 -50.71413803]
[237.35079956 -61.79927063]
[247.45623779 -72.88440704]
[257.56167603 -83.96953583]
[267.66711426 -95.05467224]
[277.77252197 -106.13980865]
[287.87796021 -117.22493744]
[297.98339844 -128.31007385]
[301.56259155 -143.72111511]
[315.85482788 -147.91409302]
[325.96026611 -158.99922180]
[336.06570435 -170.08436584]
[346.17114258 -181.16949463]
[356.27658081 -192.25462341]
[359.85574341 -207.66566467]
[374.14797974 -211.85864258]
[384.25341797 -222.94377136]
[383.27325439 -238.71763611]
[393.79644775 -250.50906372]
[409.57980347 -251.32241821]
[421.25930786 -240.67514038]
[421.90573120 -224.88406372]
[411.13558960 -213.31777954]
[395.33856201 -212.83834839]
[385.23312378 -201.75320435]
[382.37673950 -187.13505554]
[367.36169434 -182.14918518]
[357.25625610 -171.06405640]
[347.15081787 -159.97892761]
[337.04541016 -148.89378357]
[326.93997192 -137.80865479]
[324.08358765 -123.19050598]
[309.06854248 -118.20463562]
[298.96310425 -107.11950684]
[288.85766602 -96.03437042]
[278.75222778 -84.94923401]
[268.64678955 -73.86410522]
[258.54135132 -62.77896881]
[248.43592834 -51.69383621]
[238.33049011 -40.60870361]
[228.22506714 -29.52356911]
[218.11962891 -18.43843460]
[225.56256104 -5.47063541]
[228.63700867 9.18261814]
[227.02960205 24.08886909]
[220.88522339 37.78695679]
[210.79412842 48.93022919]
[197.73526001 56.41894531]
[182.98123169 59.50879669]
[167.97439575 57.88486862]
[154.18574524 51.69368744]
[144.08032227 62.77882004]
[133.97488403 73.86395264]
[123.86944580 84.94908905]
[113.76400757 96.03422546]
[110.58552551 109.64997864]
[97.32112122 114.07121277]
[87.21569061 125.15634918]
[77.11025238 136.24148560]
[73.53107452 151.65251160]
[59.23883057 155.84550476]
[49.13339615 166.93063354]
[55.52199173 180.69512939]
[56.15230942 195.81616211]
[50.95941162 209.98823547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[8 20]
[9 19]
[10 18]
[11 17]
[32 115]
[33 114]
[35 112]
[36 111]
[37 110]
[39 108]
[40 107]
[41 106]
[42 105]
[43 104]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[61 86]
[63 84]
[64 83]
[65 82]
[66 81]
[67 80]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
