%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:24:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUACCAACUUAAUGUUUUUCUCGAAGAAUGUGAAAAUAAUUAGACCUGUUAAAUUAUAAUAUUCAAAUAUCUAUUUAAAGACAUUUAUAUUAAUUUGAAAUAAUAACAUAUACAAUUAAAAGUGAUUUUAUUUUA\
) } def
/len { sequence length } bind def

/coor [
[128.90130615 157.00239563]
[118.43391418 161.19435120]
[107.39272308 163.48153687]
[96.12142181 163.79275513]
[84.97084808 162.11830139]
[74.28807831 158.51029968]
[64.40564728 153.08106995]
[55.63114548 145.99960327]
[48.23770523 137.48631287]
[42.45545959 127.80619049]
[28.27704048 132.70236206]
[14.09862232 137.59852600]
[-0.07979544 142.49468994]
[-14.25821304 147.39085388]
[-21.22544861 161.32267761]
[-35.67412949 166.08610535]
[-48.91304398 159.35806274]
[-63.09146500 164.25422668]
[-77.26988220 169.15039062]
[-91.44830322 174.04655457]
[-105.62671661 178.94273376]
[-116.14548492 190.76077271]
[-130.70120239 187.60157776]
[-136.12283325 202.26922607]
[-149.72978210 209.97538757]
[-165.09725952 207.08146667]
[-174.96920776 194.95385742]
[-174.68438721 179.31886292]
[-164.37728882 167.55885315]
[-148.91462708 165.22653198]
[-135.59736633 173.42317200]
[-126.09273529 161.95532227]
[-110.52288818 164.76431274]
[-96.34446716 159.86814880]
[-82.16604614 154.97196960]
[-67.98763275 150.07580566]
[-53.80921555 145.17964172]
[-47.54301071 131.71597290]
[-33.23382568 126.54858398]
[-19.15438080 133.21244812]
[-4.97596359 128.31626892]
[9.20245457 123.42010498]
[23.38087273 118.52394104]
[37.55929184 113.62776947]
[36.25875092 104.64881134]
[36.24274063 95.57616425]
[37.51158524 86.59267426]
[40.03971481 77.87937164]
[43.77617645 69.61184692]
[48.64567947 61.95671082]
[54.55008698 55.06823349]
[61.37041092 49.08523560]
[68.96920776 44.12828445]
[77.19335175 40.29727554]
[85.87709808 37.66941452]
[94.84545135 36.29765320]
[103.91768646 36.20964050]
[112.91096497 37.40714645]
[117.64424896 23.17352295]
[122.37753296 8.93990135]
[127.11081696 -5.29372120]
[131.84410095 -19.52734375]
[136.57739258 -33.76096725]
[135.60247803 -40.44430542]
[137.86686707 -45.77767563]
[141.86776733 -48.52990341]
[147.24864197 -62.53155136]
[152.62951660 -76.53320312]
[158.01037598 -90.53485107]
[155.73851013 -106.19209290]
[167.52642822 -115.29672241]
[172.90730286 -129.29837036]
[178.28817749 -143.30001831]
[171.63731384 -157.63674927]
[177.15042114 -172.44827271]
[191.55665588 -178.94718933]
[206.30906677 -173.27780151]
[212.65530396 -158.80364990]
[206.83026123 -144.11201477]
[192.28982544 -137.91915894]
[186.90895081 -123.91750336]
[181.52807617 -109.91584778]
[184.18482971 -95.26010132]
[172.01203918 -85.15398407]
[166.63116455 -71.15233612]
[161.25028992 -57.15068054]
[155.86941528 -43.14903259]
[150.81101990 -29.02768135]
[146.07772827 -14.79405880]
[141.34443665 -0.56043649]
[136.61116028 13.67318630]
[131.87786865 27.90680885]
[127.14458466 42.14043045]
[148.01231384 57.81734467]
[160.87248230 80.52952576]
[163.58027649 106.48901367]
[155.68406677 131.36625671]
[167.79907227 140.21084595]
[179.91407776 149.05543518]
[192.02908325 157.90000916]
[204.14408875 166.74459839]
[216.25909424 175.58917236]
[228.37409973 184.43376160]
[240.48910522 193.27835083]
[255.19056702 188.67691040]
[269.61395264 193.55743408]
[278.29516602 205.84973145]
[278.07614136 220.71884155]
[290.19116211 229.56341553]
[302.30615234 238.40800476]
[315.73895264 231.16075134]
[330.98632812 230.46804810]
[345.02093506 236.46743774]
[355.05618286 247.96772766]
[359.09954834 262.68554688]
[356.34823608 277.69863892]
[347.34851074 290.02615356]
[333.88726807 297.22045898]
[318.63726807 297.85311890]
[304.62640381 291.79849243]
[294.63653564 280.25875854]
[290.65115356 265.52514648]
[293.46157837 250.52301025]
[281.34655762 241.67842102]
[269.23156738 232.83384705]
[255.13600159 237.57234192]
[240.78329468 233.04867554]
[231.74066162 220.79779053]
[231.64453125 205.39335632]
[219.52952576 196.54876709]
[207.41452026 187.70417786]
[195.29951477 178.85960388]
[183.18450928 170.01501465]
[171.06950378 161.17044067]
[158.95449829 152.32585144]
[146.83949280 143.48126221]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[23 31]
[58 93]
[59 92]
[60 91]
[61 90]
[62 89]
[63 88]
[66 87]
[67 86]
[68 85]
[69 84]
[71 82]
[72 81]
[73 80]
[97 136]
[98 135]
[99 134]
[100 133]
[101 132]
[102 131]
[103 130]
[104 129]
[108 125]
[109 124]
[110 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
