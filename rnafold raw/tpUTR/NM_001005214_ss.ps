%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 01:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCCAGAGACCACUAUCUUAUGUGCCUCCCCCAGGCUCCCUGCUUUCUCUCUUGCCCUCCCCAUCCCACCACCUUGGAGCUGUCAUAGAGAUUGAAACCUUCUAGUAAAAUAAAUAAAAUCUC\
) } def
/len { sequence length } bind def

/coor [
[146.79321289 238.55969238]
[141.27134705 224.61305237]
[135.74946594 210.66639709]
[130.22760010 196.71975708]
[118.34841919 187.73452759]
[120.46219635 172.05516052]
[114.94033051 158.10850525]
[109.41846466 144.16186523]
[103.89659882 130.21520996]
[90.22909546 133.17462158]
[75.03465271 129.57296753]
[61.53645325 118.81770325]
[49.51294708 127.78627777]
[37.48944473 136.75485229]
[37.81908035 152.26841736]
[28.93947983 164.99368286]
[14.26503277 170.03752136]
[-0.56163740 165.46046448]
[-9.83937359 153.02249146]
[-10.00069809 137.50624084]
[-0.98357606 124.87805939]
[13.74472332 119.99371338]
[28.52087021 124.73134613]
[40.54437256 115.76277161]
[52.56787872 106.79419708]
[51.44118881 99.37931061]
[36.61141205 101.63269043]
[23.20370483 108.35827637]
[12.66422176 97.68497467]
[19.55841827 84.36318970]
[34.35802841 86.80291748]
[49.18780136 84.54953003]
[48.06111145 77.13464355]
[33.91625214 72.14234924]
[19.77139473 67.15005493]
[5.62653685 62.15776443]
[-11.32195473 62.58783340]
[-16.42702484 46.42074966]
[-2.30498171 37.03969193]
[10.61883068 48.01290512]
[24.76368904 53.00519943]
[38.90854645 57.99749374]
[53.05340576 62.98978424]
[66.62580872 56.60309601]
[60.23567581 42.39732361]
[65.67902374 28.19082451]
[79.26143646 22.18635368]
[84.43107605 8.10534573]
[89.60072327 -5.97566223]
[94.77036285 -20.05666924]
[99.94001007 -34.13767624]
[91.47098541 -47.00553513]
[92.19441223 -62.21507645]
[101.62352753 -73.94349670]
[115.97892761 -77.82427216]
[121.14857483 -91.90528107]
[117.54463196 -109.91033173]
[131.33213806 -120.68963623]
[136.14628601 -134.89611816]
[140.96043396 -149.10258484]
[145.77459717 -163.30906677]
[134.11135864 -173.02159119]
[126.74768829 -186.29339600]
[124.67948914 -201.32958984]
[128.18644714 -216.09663391]
[136.79428101 -228.59741211]
[149.33886719 -237.14131165]
[164.12362671 -240.57281494]
[179.14906311 -238.42785645]
[192.38308716 -230.99652100]
[202.03593445 -219.28382874]
[206.80212402 -204.87384033]
[206.03704834 -189.71536255]
[199.84420776 -175.85848999]
[189.06112671 -165.17721558]
[175.14611816 -159.11611938]
[159.98106384 -158.49490356]
[155.16691589 -144.28843689]
[150.35276794 -130.08195496]
[145.53860474 -115.87548065]
[150.62290955 -104.82218170]
[146.64230347 -92.90027618]
[135.22958374 -86.73564148]
[130.05993652 -72.65463257]
[138.49401855 -60.40701294]
[138.09423828 -45.36360168]
[128.80438232 -33.29910278]
[114.02101898 -28.96803474]
[108.85137177 -14.88702583]
[103.68172455 -0.80601817]
[98.51208496 13.27499008]
[93.34243774 27.35599709]
[99.81301880 40.72264099]
[94.77085876 55.07643127]
[80.70681763 61.77273941]
[101.21498871 59.25722885]
[119.46553802 66.54971313]
[131.30444336 80.95479584]
[134.54150391 98.29388428]
[129.31686401 114.08425903]
[117.84323883 124.69334412]
[123.36511230 138.63999939]
[128.88697815 152.58663940]
[134.40884399 166.53329468]
[146.68298340 176.51606750]
[144.17425537 191.19787598]
[149.69612122 205.14453125]
[155.21798706 219.09117126]
[160.73985291 233.03782654]
[175.89158630 232.58975220]
[190.28182983 237.35385132]
[202.17289734 246.75483704]
[210.12887573 259.65747070]
[213.18905640 274.50372314]
[210.98388672 289.50082397]
[203.77966309 302.83779907]
[192.44633484 312.90417480]
[178.35244751 318.48431396]
[163.19992065 318.90447998]
[148.81848145 314.11386108]
[136.94474792 304.69097900]
[129.01257324 291.77371216]
[125.97975922 276.92184448]
[128.21255493 261.92883301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[3 107]
[4 106]
[6 104]
[7 103]
[8 102]
[9 101]
[12 25]
[13 24]
[14 23]
[33 43]
[34 42]
[35 41]
[36 40]
[44 95]
[47 92]
[48 91]
[49 90]
[50 89]
[51 88]
[55 84]
[56 83]
[58 80]
[59 79]
[60 78]
[61 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
