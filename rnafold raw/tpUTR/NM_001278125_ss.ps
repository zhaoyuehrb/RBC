%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:25:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAACCUCAGUUGAUGCCUUCCCAGAGUCAACCUCCUGUGACGCCCUCCCAGAGCCAACCUCGGGUGACACCCUCCCAGAGUCAACCUCAUGUGACACCUUACCGGAGUAAAAGUGGUAAACAAAAGCAAUCAGUACCAAUUCCAAAAACUGUAUCCAGAAAAGGUACAUUAAAAAAAUAAUUCCUAGUA\
) } def
/len { sequence length } bind def

/coor [
[161.79821777 149.00315857]
[165.22018433 136.93754578]
[151.49392700 130.88859558]
[137.76766968 124.83963013]
[124.04141998 118.79067230]
[118.42171478 125.19018555]
[111.10291290 129.90684509]
[102.58953094 132.49215698]
[93.50330353 132.64894104]
[84.53782654 130.26150513]
[76.40561676 125.41226959]
[69.78162384 118.38290405]
[59.57051468 129.37077332]
[49.35940170 140.35864258]
[39.14828873 151.34651184]
[28.93717957 162.33436584]
[18.72606850 173.32223511]
[18.41530609 186.22659302]
[9.67152119 195.16934204]
[-2.42145538 195.73196411]
[-12.81006241 206.55216980]
[-16.20378876 222.59632874]
[-31.87703514 227.42140198]
[-43.70651245 216.06378174]
[-39.52306366 200.20721436]
[-23.63026810 196.16357422]
[-13.24166012 185.34336853]
[-9.97800159 168.10708618]
[7.73820210 163.11112976]
[17.94931221 152.12326050]
[28.16042328 141.13539124]
[38.37153625 130.14752197]
[48.58264542 119.15966034]
[58.79375839 108.17179871]
[58.54960251 93.17378235]
[47.98625183 82.52410889]
[37.42290115 71.87442780]
[26.85954857 61.22475433]
[11.64782810 56.87571716]
[8.17830181 42.39083862]
[-2.38504958 31.74116325]
[-12.94840050 21.09148598]
[-23.51175117 10.44180965]
[-31.79033089 6.54477406]
[-34.15860748 -0.46823010]
[-49.43693924 1.50123346]
[-62.78930664 -5.81775665]
[-69.19591522 -19.43463707]
[-66.38945770 -34.03812408]
[-76.77806854 -44.85832977]
[-91.91698456 -49.45438766]
[-95.15028381 -63.99382019]
[-105.53888702 -74.81402588]
[-116.01521301 -85.54932404]
[-126.57856750 -96.19899750]
[-137.14192200 -106.84867096]
[-151.55809021 -101.95629883]
[-166.60751343 -103.80075836]
[-179.31172180 -111.96305084]
[-187.17988586 -124.77917480]
[-188.69703674 -139.67910767]
[-183.61552429 -153.70207214]
[-194.17887878 -164.35174561]
[-204.74223328 -175.00143433]
[-215.39190674 -185.56477356]
[-226.12721252 -196.04110718]
[-236.86250305 -206.51742554]
[-252.14299011 -210.61828613]
[-255.84783936 -225.04476929]
[-271.84268188 -226.28747559]
[-280.72409058 -239.64787292]
[-275.67901611 -254.87699890]
[-260.57757568 -260.29238892]
[-247.00433350 -251.73982239]
[-245.37150574 -235.78007507]
[-230.85887146 -232.42854309]
[-226.38616943 -217.25273132]
[-215.65087891 -206.77639771]
[-204.91558838 -196.30007935]
[-197.92208862 -193.87480164]
[-194.09255981 -185.56477356]
[-183.52920532 -174.91510010]
[-172.96585083 -164.26542664]
[-158.90199280 -169.23263550]
[-144.01490784 -167.59426880]
[-131.26324463 -159.62205505]
[-123.20461273 -146.85183716]
[-121.48269653 -131.78790283]
[-126.49224091 -117.41202545]
[-115.92889404 -106.76235199]
[-105.36553955 -96.11267090]
[-98.41244507 -93.57388306]
[-94.71868134 -85.20263672]
[-84.33007812 -74.38243103]
[-69.93422699 -70.56030273]
[-65.95786285 -55.24693680]
[-55.56925583 -44.42673111]
[-40.86368561 -46.63674545]
[-27.51871681 -39.68146896]
[-20.74900055 -26.04239655]
[-23.33840179 -10.85683727]
[-12.86207581 -0.12154132]
[-2.29872441 10.52813530]
[8.26462650 21.17781258]
[18.82797813 31.82748795]
[33.28413773 35.41478729]
[37.50922394 50.66139984]
[48.07257843 61.31107712]
[58.63592911 71.96075439]
[69.19927979 82.61042786]
[78.80405426 72.55532837]
[91.31504822 67.14562988]
[104.67029572 67.04019928]
[116.75709534 72.04207611]
[125.74616241 81.16309357]
[130.36811829 92.81094360]
[130.09037781 105.06441498]
[143.81663513 111.11337280]
[157.54289246 117.16233826]
[171.26914978 123.21129608]
[180.99929810 108.36121368]
[193.20031738 95.46839142]
[207.48670959 84.93854523]
[223.40739441 77.10277557]
[240.45996094 72.20713806]
[258.10641479 70.40492249]
[275.79034424 71.75184631]
[292.95425415 76.20434570]
[309.05725098 83.62097168]
[323.59216309 93.76687622]
[336.10128784 106.32128906]
[346.19107056 120.88758850]
[353.54431152 137.00592041]
[357.93014526 154.16761780]
[359.21136475 171.83134460]
[357.34872437 189.44010925]
[371.81094360 193.42056274]
[386.27316284 197.40103149]
[400.73538208 201.38150024]
[415.19760132 205.36196899]
[428.82263184 197.81233215]
[443.43267822 202.05511475]
[450.54611206 215.09100342]
[465.00833130 219.07145691]
[479.47055054 223.05192566]
[488.48892212 210.84399414]
[501.31039429 202.72152710]
[516.20098877 199.78305054]
[531.14685059 202.42596436]
[544.12670898 210.29281616]
[553.38519287 222.31970215]
[557.67004395 236.88006592]
[556.40185547 252.00474548]
[549.75213623 265.64825439]
[538.62017822 275.96542358]
[524.51147461 281.56094360]
[509.33416748 281.67803955]
[495.14083862 276.30090332]
[483.85098267 266.15673828]
[476.99151611 252.61746216]
[475.49011230 237.51414490]
[461.02786255 233.53369141]
[446.56564331 229.55322266]
[433.78356934 237.11322021]
[419.06008911 233.28248596]
[411.21713257 219.82418823]
[396.75491333 215.84371948]
[382.29269409 211.86325073]
[367.83047485 207.88279724]
[353.36825562 203.90232849]
[348.43173218 215.39448547]
[342.09472656 226.17951965]
[334.45663452 236.08755493]
[325.63732910 244.96252441]
[315.77532959 252.66456604]
[305.02554321 259.07220459]
[293.55691528 264.08435059]
[281.54971313 267.62182617]
[269.19271851 269.62863159]
[256.68032837 270.07287598]
[244.20935059 268.94717407]
[231.97599792 266.26892090]
[220.17279053 262.07986450]
[208.98556519 256.44561768]
[198.59045410 249.45448303]
[189.15119934 241.21615601]
[180.81652832 231.85995483]
[173.71783447 221.53285217]
[167.96707153 210.39710999]
[163.65502930 198.62776184]
[160.84988403 186.40982056]
[159.59609985 173.93544006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 120]
[3 119]
[4 118]
[5 117]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[20 27]
[21 26]
[35 110]
[36 109]
[37 108]
[38 107]
[40 105]
[41 104]
[42 103]
[43 102]
[45 101]
[49 97]
[50 96]
[52 94]
[53 93]
[54 91]
[55 90]
[56 89]
[62 83]
[63 82]
[64 81]
[65 79]
[66 78]
[67 77]
[69 75]
[136 170]
[137 169]
[138 168]
[139 167]
[140 166]
[143 163]
[144 162]
[145 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
