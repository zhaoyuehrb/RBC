%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:22:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCAGGCGGGCGUGGUCAGCUGGGAGGAGAGCUGUGCCCAGCCCAACCGGCCUGGCAUCUACACCCGUGUCACCUACUACUUGGACUGGAUCCACCACUAUGUCCCCAAGAAGCCC\
) } def
/len { sequence length } bind def

/coor [
[135.94529724 138.87127686]
[135.29170227 124.82900238]
[121.63217926 118.63082123]
[114.14519501 118.73368835]
[107.69495392 112.08152008]
[93.73603058 112.88169861]
[85.74543762 101.40816498]
[72.25576019 94.84854889]
[58.76607513 88.28894043]
[45.27639389 81.72933197]
[31.78671265 75.16972351]
[15.99247169 76.09305573]
[7.93025970 63.56907654]
[-5.55942202 57.00946808]
[-19.04910469 50.44985580]
[-32.78992081 44.43405151]
[-46.75996399 38.97164154]
[-60.73000717 33.50923538]
[-74.70005035 28.04682541]
[-88.67008972 22.58441734]
[-102.71160889 17.30845261]
[-116.82211304 12.21987057]
[-130.93261719 7.13128757]
[-145.04312134 2.04270458]
[-159.21191406 8.51442528]
[-173.44947815 3.15286851]
[-179.53195190 -10.39478970]
[-193.64245605 -15.48337269]
[-199.03308105 -14.50011063]
[-203.74967957 -15.65188122]
[-207.06962585 -18.29351044]
[-208.64816284 -21.58224106]
[-222.30767822 -27.78042412]
[-235.96719360 -33.97860718]
[-249.62672424 -40.17678833]
[-265.88616943 -38.04080582]
[-275.64962769 -51.21679306]
[-268.87332153 -66.15042877]
[-252.52809143 -67.47926331]
[-243.42854309 -53.83631134]
[-229.76901245 -47.63812637]
[-216.10949707 -41.43994522]
[-202.44996643 -35.24176407]
[-188.55387878 -29.59387589]
[-174.44337463 -24.50529289]
[-161.11416626 -31.05263519]
[-146.73161316 -26.09309769]
[-139.95454407 -12.06779957]
[-125.84403229 -6.97921658]
[-111.73352814 -1.89063358]
[-97.62302399 3.19794941]
[-90.16811371 2.49805617]
[-83.20768738 8.61437416]
[-69.23764038 14.07678223]
[-55.26759720 19.53919220]
[-41.29755783 25.00160027]
[-27.32751274 30.46400833]
[-23.87004471 29.30063629]
[-19.66133308 29.83635139]
[-15.54568958 32.41208267]
[-12.48949432 36.96017456]
[1.00018775 43.51978302]
[14.48987007 50.07939529]
[29.31923866 48.68687439]
[38.34632111 61.68003845]
[51.83600235 68.23964691]
[65.32568359 74.79926300]
[78.81536865 81.35887146]
[92.30504608 87.91847992]
[106.26396942 87.11830139]
[114.25456238 98.59183502]
[127.83036804 104.97129822]
[141.48988342 111.16947937]
[154.77407837 101.42734528]
[171.06141663 99.68623352]
[185.93409729 106.32399750]
[195.40534973 119.45854950]
[196.98811340 135.48036194]
[210.80780029 141.31271362]
[226.53050232 139.55009460]
[235.24784851 151.62722778]
[249.06752014 157.45959473]
[262.88720703 163.29196167]
[276.70687866 169.12431335]
[290.52658081 174.95668030]
[295.96185303 174.26171875]
[300.61047363 175.66288757]
[303.78512573 178.47746277]
[305.18640137 181.84553528]
[318.49667358 188.76193237]
[331.80694580 195.67831421]
[345.11724854 202.59471130]
[358.02136230 194.26527405]
[373.36215210 193.51986694]
[387.01303101 200.55897522]
[395.30197144 213.48913574]
[395.99929810 228.83218384]
[388.91741943 242.46093750]
[375.96133423 250.70930481]
[360.61618042 251.35853577]
[347.00970459 244.23397827]
[338.80197144 231.25210571]
[338.20083618 215.90498352]
[324.89056396 208.98860168]
[311.58029175 202.07220459]
[298.27001953 195.15582275]
[284.69421387 188.77636719]
[270.87451172 182.94400024]
[257.05484009 177.11163330]
[243.23516846 171.27928162]
[229.41548157 165.44691467]
[214.68124390 167.62670898]
[204.97543335 155.13240051]
[191.15574646 149.30003357]
[180.77287292 158.27676392]
[167.46417236 161.89503479]
[153.83479309 159.38700867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 73]
[3 72]
[5 71]
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[13 63]
[14 62]
[15 61]
[16 57]
[17 56]
[18 55]
[19 54]
[20 53]
[21 51]
[22 50]
[23 49]
[24 48]
[27 45]
[28 44]
[32 43]
[33 42]
[34 41]
[35 40]
[78 114]
[79 113]
[81 111]
[82 110]
[83 109]
[84 108]
[85 107]
[89 106]
[90 105]
[91 104]
[92 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
