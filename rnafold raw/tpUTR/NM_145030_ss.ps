%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:08:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAAAGAUCCCUGGAGGGCUAGUUCGUAUUUUUGUGUUAAACUAUUUGUUAGAAUAAAGUAAUUUUGCUAAUAAAUGGGA\
) } def
/len { sequence length } bind def

/coor [
[241.24523926 143.29658508]
[226.40821838 140.74064636]
[213.31654358 133.24876404]
[203.55987549 121.70841980]
[198.33053589 107.50000000]
[183.33053589 107.50000000]
[168.33053589 107.50000000]
[153.33053589 107.50000000]
[138.33053589 107.50000000]
[123.33053589 107.50000000]
[108.33053589 107.50000000]
[93.33316040 107.78047943]
[77.04360199 119.36981964]
[60.18788528 110.20201111]
[45.28219986 111.88147736]
[30.37651825 113.56094360]
[15.47083378 115.24040985]
[2.60460806 125.40860748]
[-12.53238773 119.09961700]
[-14.36851025 102.80358124]
[-1.01491308 93.28446960]
[13.79136658 100.33473206]
[28.69705009 98.65525818]
[43.60273361 96.97579193]
[58.50841522 95.29632568]
[64.33600616 86.54019928]
[74.27893066 82.47784424]
[85.00653076 84.73970795]
[92.77228546 92.79096985]
[100.27369690 89.29470062]
[108.33053589 92.50000000]
[123.33053589 92.50000000]
[138.33053589 92.50000000]
[153.33053589 92.50000000]
[168.33053589 92.50000000]
[183.33053589 92.50000000]
[198.33053589 92.50000000]
[203.55987549 78.29158020]
[213.31654358 66.75123596]
[226.40821838 59.25935364]
[241.24523926 56.70340729]
[256.03359985 59.37286377]
[268.99185181 66.92653656]
[278.56576538 78.43607330]
[283.61465454 92.50000000]
[298.61465454 92.50000000]
[313.61465454 92.50000000]
[328.61465454 92.50000000]
[343.61465454 92.50000000]
[358.61465454 92.50000000]
[373.61465454 92.50000000]
[388.61465454 92.50000000]
[403.61465454 92.50000000]
[418.61465454 92.50000000]
[433.61465454 92.50000000]
[439.07012939 78.33658600]
[449.27651978 67.10297394]
[462.85348511 60.31841660]
[477.96487427 58.90046310]
[492.56695557 63.04088593]
[504.68496704 72.17972565]
[512.67999268 85.08103180]
[515.47082520 100.00000000]
[512.67999268 114.91896820]
[504.68496704 127.82027435]
[492.56695557 136.95912170]
[477.96487427 141.09953308]
[462.85348511 139.68157959]
[449.27651978 132.89701843]
[439.07012939 121.66341400]
[433.61465454 107.50000000]
[418.61465454 107.50000000]
[403.61465454 107.50000000]
[388.61465454 107.50000000]
[373.61465454 107.50000000]
[358.61465454 107.50000000]
[343.61465454 107.50000000]
[328.61465454 107.50000000]
[313.61465454 107.50000000]
[298.61465454 107.50000000]
[283.61465454 107.50000000]
[278.56576538 121.56392670]
[268.99185181 133.07347107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[12 29]
[14 25]
[15 24]
[16 23]
[17 22]
[45 81]
[46 80]
[47 79]
[48 78]
[49 77]
[50 76]
[51 75]
[52 74]
[53 73]
[54 72]
[55 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
