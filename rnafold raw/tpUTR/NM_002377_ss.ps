%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:15:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACUGUGAGGGAAGUUGUGGAUAAAAAUGGUGGAACACAGGUCAUUUUUAGUUUGUGCUUGGAAUAUGACUUAAGUAUCUCCUAAAUGUGAUACAGAAGAACAUCUCAUCCCAUAUGCAUGAGAUACUAAUUAAUGAUGAA\
) } def
/len { sequence length } bind def

/coor [
[-18.91058350 268.89944458]
[-32.89712524 263.47943115]
[-40.28872681 250.42704773]
[-37.74372101 235.64619446]
[-50.27268600 243.89393616]
[-62.80164719 252.14166260]
[-75.33061218 260.38940430]
[-87.85957336 268.63711548]
[-84.72835541 284.37054443]
[-87.85134125 300.06640625]
[-96.72386169 313.33905029]
[-109.96962738 322.18258667]
[-125.55418396 325.27410889]
[-141.09733582 322.17147827]
[-154.23670959 313.37622070]
[-166.58146667 321.89718628]
[-178.92622375 330.41815186]
[-178.31515503 345.83340454]
[-186.15490723 359.12033081]
[-199.94383240 366.03906250]
[-215.28193665 364.38192749]
[-227.27488708 354.67764282]
[-232.09577942 340.02285767]
[-228.20626831 325.09387207]
[-216.84750366 314.65441895]
[-201.64402771 312.03570557]
[-187.44718933 318.07339478]
[-175.10243225 309.55242920]
[-162.75767517 301.03146362]
[-166.22731018 287.39300537]
[-164.81764221 273.36083984]
[-158.67848206 260.63113403]
[-148.53259277 250.74971008]
[-135.59062195 244.92428589]
[-121.40669250 243.87683105]
[-107.69178009 247.75427246]
[-96.10730743 256.10815430]
[-83.57833862 247.86042786]
[-71.04937744 239.61270142]
[-58.52041626 231.36497498]
[-45.99145508 223.11723328]
[-34.13307190 213.93144226]
[-23.01534843 203.86187744]
[-11.89762402 193.79231262]
[-0.77990001 183.72273254]
[10.33782387 173.65316772]
[21.45554733 163.58360291]
[25.87795448 146.63511658]
[43.85507584 142.81602478]
[54.74891663 132.50465393]
[65.64275360 122.19329071]
[76.53659058 111.88192749]
[87.43043518 101.57055664]
[97.97862244 90.90586090]
[108.16970062 79.89941406]
[118.36078644 68.89297485]
[128.55186462 57.88652420]
[138.74295044 46.88008118]
[148.93403625 35.87363434]
[152.42201233 16.07108116]
[171.03086853 10.98688316]
[180.72866821 -0.45657480]
[190.42646790 -11.90003300]
[188.90069580 -22.76779747]
[193.55265808 -32.46332550]
[202.60566711 -37.84775162]
[212.90530396 -37.32881546]
[223.09637451 -48.33526230]
[233.28746033 -59.34170914]
[243.47854614 -70.34815216]
[252.92262268 -82.00188446]
[261.57867432 -94.25230408]
[270.23474121 -106.50271606]
[267.76181030 -121.88200378]
[276.71478271 -134.18235779]
[291.39184570 -136.44512939]
[300.04788208 -148.69555664]
[308.70394897 -160.94596863]
[317.36001587 -173.19638062]
[326.01605225 -185.44679260]
[319.51184082 -199.36048889]
[320.85189819 -214.66081238]
[329.67568970 -227.23205566]
[343.60971069 -233.69261169]
[358.90576172 -232.30462646]
[371.44927979 -223.44146729]
[377.86611938 -209.48727417]
[376.43020630 -194.19564819]
[367.52777100 -181.67997742]
[353.55352783 -175.30690002]
[338.26647949 -176.79074097]
[329.61041260 -164.54032898]
[320.95434570 -152.28990173]
[312.29830933 -140.03948975]
[303.64224243 -127.78907776]
[306.41122437 -113.19906616]
[297.80725098 -100.65209961]
[282.48513794 -97.84665680]
[273.82910156 -85.59624481]
[265.17303467 -73.34582520]
[280.14257812 -74.30128479]
[291.53625488 -64.54506683]
[292.89633179 -49.60685349]
[283.45190430 -37.95340729]
[268.55593872 -36.18973160]
[256.65127563 -45.31545258]
[254.48498535 -60.15707016]
[244.29391479 -49.15062714]
[234.10282898 -38.14418030]
[223.91174316 -27.13773346]
[221.10766602 -8.05171490]
[201.86991882 -2.20223594]
[192.17213440 9.24122238]
[182.47433472 20.68468094]
[184.23097229 30.84666252]
[179.97702026 40.48269272]
[170.91291809 46.26940536]
[159.94047546 46.06471634]
[149.74938965 57.07116318]
[139.55831909 68.07760620]
[129.36723328 79.08405304]
[119.17614746 90.09049988]
[108.98506927 101.09694672]
[108.59675598 105.02104950]
[106.44200134 108.74243927]
[102.65782166 111.45923615]
[97.74179840 112.46439362]
[86.84796143 122.77576447]
[75.95412445 133.08712769]
[65.06027985 143.39849854]
[54.16644287 153.70986938]
[53.01794434 166.60752869]
[43.66704941 174.97314453]
[31.52511597 174.70132446]
[20.40739250 184.77088928]
[9.28966808 194.84046936]
[-1.82805550 204.91003418]
[-12.94577980 214.97959900]
[-24.06350327 225.04916382]
[-9.11411953 226.28039551]
[1.67542756 236.70083618]
[3.42605710 251.59832764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 41]
[5 40]
[6 39]
[7 38]
[8 37]
[15 29]
[16 28]
[17 27]
[42 139]
[43 138]
[44 137]
[45 136]
[46 135]
[47 134]
[49 131]
[50 130]
[51 129]
[52 128]
[53 127]
[54 123]
[55 122]
[56 121]
[57 120]
[58 119]
[59 118]
[61 114]
[62 113]
[63 112]
[67 110]
[68 109]
[69 108]
[70 107]
[71 100]
[72 99]
[73 98]
[76 95]
[77 94]
[78 93]
[79 92]
[80 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
