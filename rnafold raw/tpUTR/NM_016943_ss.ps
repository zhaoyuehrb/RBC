%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:59:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAACAGAGGGCAUGGGGUGGAGCCCUUGAGCCUUUUGGCCUGGCUCAAGACUACAGGACUCUUCCUGACCUUCCUAUGUUACCAGU\
) } def
/len { sequence length } bind def

/coor [
[109.89918518 289.13201904]
[120.02439880 276.99713135]
[118.43892670 262.08117676]
[116.85344696 247.16520691]
[115.26796722 232.24922180]
[113.68248749 217.33325195]
[112.09700775 202.41728210]
[109.72434998 187.60612488]
[106.57115173 172.94128418]
[103.41796112 158.27644348]
[100.26476288 143.61161804]
[97.11157227 128.94677734]
[93.46821594 125.54956055]
[92.06536865 119.74916840]
[94.29199219 113.13750458]
[85.81860352 102.01576233]
[90.85727692 88.97338867]
[88.74638367 74.12266541]
[86.63548279 59.27193832]
[77.03313446 46.69794083]
[82.90237427 33.00848007]
[80.79147339 18.15775299]
[78.68058014 3.30702496]
[76.56967926 -11.54370308]
[74.19701385 -26.35486412]
[71.56333160 -41.12184143]
[67.38355255 -55.52772522]
[61.70450211 -69.41110992]
[56.02545166 -83.29449463]
[50.34640503 -97.17787933]
[44.66735458 -111.06127167]
[38.98830795 -124.94465637]
[33.30925751 -138.82803345]
[27.63020897 -152.71142578]
[12.44183445 -155.41639709]
[1.14252162 -165.92015076]
[-2.66216087 -180.87100220]
[2.24184752 -195.49818420]
[14.28969574 -205.13420105]
[29.63695908 -206.70425415]
[43.38638306 -199.70732117]
[51.15057373 -186.37612915]
[50.45200729 -170.96458435]
[41.51359558 -158.39047241]
[47.19264221 -144.50709534]
[52.87169266 -130.62370300]
[58.55073929 -116.74031830]
[64.22978973 -102.85693359]
[69.90883636 -88.97354889]
[75.58788300 -75.09015656]
[81.26693726 -61.20677185]
[89.33464050 -73.85240936]
[103.90773773 -77.40554810]
[116.89048004 -69.89233398]
[121.07061005 -55.48655319]
[114.12594604 -42.19100189]
[99.91444397 -37.39171600]
[86.33031464 -43.75553131]
[88.96399689 -28.98855019]
[93.33499908 -22.82022095]
[91.42041016 -13.65460014]
[93.53130341 1.19612765]
[95.64220428 16.04685593]
[97.75309753 30.89758301]
[107.20446777 42.40935516]
[101.48621368 57.16104126]
[103.59710693 72.01176453]
[105.70800781 86.86249542]
[114.18139648 97.98423767]
[109.14272308 111.02661133]
[111.77640533 125.79358673]
[114.92960358 140.45841980]
[118.08279419 155.12326050]
[121.23598480 169.78808594]
[124.38918304 184.45292664]
[128.21849060 188.64401245]
[129.73742676 193.42524719]
[129.13546753 197.75244141]
[127.01298523 200.83180237]
[128.59846497 215.74777222]
[130.18394470 230.66374207]
[131.76942444 245.57972717]
[133.35490417 260.49569702]
[134.94036865 275.41168213]
[147.39025879 285.14694214]
[149.22682190 300.84417725]
[139.36044312 313.19042969]
[123.64468384 314.86093140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 84]
[3 83]
[4 82]
[5 81]
[6 80]
[7 79]
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[15 70]
[17 68]
[18 67]
[19 66]
[21 64]
[22 63]
[23 62]
[24 61]
[25 59]
[26 58]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
