%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 16:39:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCACCUGAUGCUCGUUGCCAUGGGACACCUCCGAGAGAGUGGAGGGAAAAUGUGUGAGAAAUAAAUUCUCCUAAAUACUCGG\
) } def
/len { sequence length } bind def

/coor [
[91.24185944 117.91751862]
[80.07027435 127.92730713]
[68.89869690 137.93708801]
[74.56591034 151.99618530]
[75.07975006 167.14584351]
[70.37816620 181.55662537]
[61.02889633 193.48838806]
[48.16091156 201.50030518]
[33.32808685 204.62490845]
[18.32155418 202.48486328]
[4.95342636 195.33860779]
[-5.16203070 184.04908752]
[-10.80332661 169.97955322]
[-11.28924561 154.82899475]
[-6.56111288 140.42689514]
[2.81012821 128.51237488]
[15.69285393 120.52418518]
[30.53141212 117.42693329]
[45.53397751 119.59462738]
[58.88891220 126.76550293]
[70.06049347 116.75572205]
[81.23207855 106.74594116]
[80.40821838 103.72889709]
[80.06616211 100.62015533]
[80.21430969 97.49616241]
[67.13357544 90.15489960]
[50.75115585 90.89551544]
[42.14773560 76.93438721]
[50.17377090 62.63351822]
[66.57276917 62.70442200]
[74.47483826 77.07415771]
[87.55558014 84.41542053]
[101.45578003 80.10971832]
[114.58093262 86.39342499]
[128.59117126 81.03495789]
[142.60142517 75.67649841]
[156.61166382 70.31803131]
[170.62190247 64.95957184]
[173.13435364 49.87199783]
[182.79759216 38.14516449]
[196.93916321 32.86477661]
[211.72612000 35.35514069]
[223.20384216 44.84868240]
[237.21408081 39.49021912]
[251.22431946 34.13175583]
[258.32183838 28.00317001]
[265.84536743 28.84371758]
[280.04196167 24.00051117]
[294.23855591 19.15730476]
[308.43515015 14.31409836]
[322.63174438 9.47089195]
[329.65093994 -4.43481398]
[344.11730957 -9.14427757]
[357.33099365 -2.36685228]
[371.52758789 -7.21005821]
[385.72418213 -12.05326462]
[391.20056152 -26.70056915]
[404.83618164 -34.35588455]
[420.19274902 -31.40460396]
[430.01934814 -19.24023438]
[429.67614746 -3.60641646]
[419.32525635 8.11503696]
[403.85397339 10.38961601]
[390.56741333 2.14333200]
[376.37081909 6.98653793]
[362.17419434 11.82974434]
[355.85778809 25.26992416]
[341.52941895 30.38385963]
[327.47494507 23.66748810]
[313.27835083 28.51069450]
[299.08175659 33.35390091]
[284.88516235 38.19710541]
[270.68856812 43.04031372]
[256.58279419 48.14199829]
[242.57254028 53.50046158]
[228.56230164 58.85892487]
[226.34922791 73.58875275]
[216.99818420 85.31111908]
[202.94224548 90.81536865]
[187.91978455 88.53001404]
[175.98036194 78.96981049]
[161.97012329 84.32827759]
[147.95988464 89.68673706]
[133.94964600 95.04520416]
[119.93939972 100.40366364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[25 32]
[26 31]
[34 85]
[35 84]
[36 83]
[37 82]
[38 81]
[43 76]
[44 75]
[45 74]
[47 73]
[48 72]
[49 71]
[50 70]
[51 69]
[54 66]
[55 65]
[56 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
