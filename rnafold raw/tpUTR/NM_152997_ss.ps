%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 02:21:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGAAGGAAAAGUCACGAUAAACCUGGUCACCUGAAAUUGAAAUUGAGCCACUUCCUUGAAGAAUCAAAAUUCCUGUUAAUAAAAGAAAAACAAAUGUAAUUGAAAUAGCACACAGCAUUCUCUAGUCAAUAUCUUUAGUGAUCUUCUUUAAUAAACUUGAAAGCAAAGAUUUUGGUUUCUUAAUUUCCACAA\
) } def
/len { sequence length } bind def

/coor [
[297.45471191 730.84362793]
[282.20922852 730.10998535]
[268.79595947 722.82666016]
[259.87808228 710.43981934]
[257.22625732 695.40881348]
[261.36703491 680.71813965]
[271.47821045 669.28454590]
[285.55224609 663.37829590]
[286.27325439 648.39562988]
[286.99426270 633.41296387]
[287.71527100 618.43029785]
[285.32125854 603.62255859]
[279.91583252 589.63037109]
[274.51040649 575.63818359]
[269.10498047 561.64599609]
[255.49534607 560.43066406]
[243.68174744 553.43420410]
[236.00067139 541.97406006]
[233.99978638 528.25689697]
[238.12634277 514.95367432]
[247.62884521 504.67968750]
[242.44837952 490.60266113]
[237.26789856 476.52563477]
[232.08741760 462.44860840]
[217.72903442 458.57888794]
[208.29090881 446.85772705]
[207.55577087 431.64874268]
[216.01489258 418.77438354]
[210.83442688 404.69735718]
[205.65394592 390.62033081]
[200.47346497 376.54330444]
[195.29299927 362.46627808]
[190.11251831 348.38925171]
[173.06735229 341.73721313]
[166.16741943 324.44686890]
[174.22085571 307.30950928]
[168.59184265 293.40576172]
[156.64389038 284.51217651]
[158.63697815 268.81701660]
[153.00796509 254.91326904]
[147.37896729 241.00952148]
[141.74995422 227.10577393]
[136.12095642 213.20201111]
[122.91496277 211.19509888]
[112.34227753 202.85551453]
[107.23325348 190.27949524]
[109.02273560 176.71455383]
[117.34900665 165.72099304]
[111.94357300 151.72880554]
[106.53813934 137.73661804]
[88.86864471 136.64550781]
[73.57751465 127.72457886]
[63.93190765 112.87992859]
[61.99272919 95.28330994]
[47.75689316 90.55668640]
[33.52105713 85.83006287]
[19.28521919 81.10343933]
[2.34774876 81.85070801]
[-3.05907869 65.78202820]
[10.88487434 56.13824844]
[24.01184273 66.86759949]
[38.24768066 71.59422302]
[52.48351669 76.32084656]
[66.71935272 81.04747009]
[67.91123199 73.78115845]
[70.66201019 66.43771362]
[75.02052307 59.34403229]
[69.61508942 45.35184860]
[64.20964813 31.35966110]
[58.80421829 17.36747551]
[42.73430634 17.08585167]
[28.03709984 10.67674828]
[16.94947815 -0.85214162]
[11.14656353 -15.71639347]
[11.48868275 -31.63100433]
[17.89394379 -46.16164780]
[29.35528946 -57.09702682]
[23.72628403 -71.00077820]
[18.09727859 -84.90453339]
[12.46827412 -98.80828094]
[-2.76898789 -100.25204468]
[-15.58362675 -108.62124634]
[-23.03093338 -121.99272156]
[-23.39956856 -137.29379272]
[-16.60482597 -151.00837708]
[-4.20808649 -159.98498535]
[10.94197083 -162.16084290]
[25.36397171 -157.03594971]
[35.74384689 -145.78799438]
[39.69638062 -131.00164795]
[36.31330490 -116.07470703]
[26.37202454 -104.43728638]
[32.00102997 -90.53353882]
[37.63003540 -76.62978363]
[43.25904083 -62.72603226]
[57.29257584 -63.14717102]
[70.65473938 -58.74151230]
[81.73275757 -50.01932526]
[89.18221283 -38.01315689]
[92.09018707 -24.15562057]
[90.08713531 -10.10847092]
[83.39363861 2.43667436]
[72.79640198 11.96203995]
[78.20183563 25.95422554]
[83.60726929 39.94641113]
[89.01271057 53.93859863]
[96.48358154 54.59891891]
[97.80447388 39.65719223]
[112.74617767 40.97832870]
[111.42533112 55.91956329]
[118.89620972 56.57988358]
[126.67209625 43.75274277]
[124.26383972 27.89147186]
[135.26844788 16.21764565]
[151.24412537 17.68642044]
[159.93569946 31.17107964]
[154.67573547 46.32734680]
[139.49923706 51.52862930]
[131.72334290 64.35577393]
[142.10284424 83.11564636]
[142.86759949 103.46918488]
[134.80802917 121.00217438]
[120.53032684 132.33119202]
[125.93576050 146.32337952]
[131.34120178 160.31556702]
[147.74098206 164.43167114]
[158.35411072 177.38027954]
[159.15452576 193.93713379]
[150.02470398 207.57301331]
[155.65370178 221.47676086]
[161.28271484 235.38050842]
[166.91171265 249.28427124]
[172.54072571 263.18801880]
[184.89131165 273.07608032]
[182.49560547 287.77676392]
[188.12460327 301.68051147]
[199.77883911 304.10296631]
[208.72131348 311.77636719]
[212.80162048 322.70278931]
[211.11270142 334.12210083]
[204.18954468 343.20877075]
[209.37002563 357.28579712]
[214.55049133 371.36282349]
[219.73097229 385.43984985]
[224.91145325 399.51687622]
[230.09191895 413.59390259]
[244.87861633 417.91360474]
[254.17774963 429.97094727]
[254.58911133 445.01403809]
[246.16444397 457.26812744]
[251.34492493 471.34515381]
[256.52539062 485.42218018]
[261.70587158 499.49920654]
[278.02200317 502.14138794]
[290.70895386 512.58862305]
[296.36697388 527.91876221]
[293.54183960 543.91839600]
[283.09713745 556.24053955]
[288.50259399 570.23272705]
[293.90802002 584.22491455]
[299.31344604 598.21710205]
[341.54327393 598.12982178]
[351.97851562 608.90502930]
[362.41375732 619.68029785]
[372.84899902 630.45550537]
[388.00762939 634.98614502]
[391.30368042 649.51147461]
[401.73892212 660.28674316]
[412.17416382 671.06195068]
[422.60940552 681.83721924]
[437.97180176 689.00891113]
[435.33309937 705.75628662]
[418.50976562 707.85681152]
[411.83416748 692.27246094]
[401.39892578 681.49719238]
[390.96368408 670.72198486]
[380.52844238 659.94671631]
[366.11621094 656.18682861]
[362.07376099 640.89074707]
[351.63851929 630.11553955]
[341.20327759 619.34027100]
[330.76803589 608.56506348]
[323.75051880 611.21160889]
[333.12164307 622.92407227]
[324.87820435 635.45587158]
[310.41241455 631.48846436]
[309.71545410 616.50469971]
[302.69793701 619.15130615]
[301.97692871 634.13397217]
[301.25592041 649.11663818]
[300.53491211 664.09930420]
[313.97677612 671.32971191]
[322.94335938 683.68133545]
[325.65432739 698.70178223]
[321.57147217 713.40869141]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 191]
[9 190]
[10 189]
[11 188]
[12 161]
[13 160]
[14 159]
[15 158]
[21 153]
[22 152]
[23 151]
[24 150]
[28 146]
[29 145]
[30 144]
[31 143]
[32 142]
[33 141]
[36 136]
[37 135]
[39 133]
[40 132]
[41 131]
[42 130]
[43 129]
[48 125]
[49 124]
[50 123]
[54 64]
[55 63]
[56 62]
[57 61]
[67 106]
[68 105]
[69 104]
[70 103]
[77 95]
[78 94]
[79 93]
[80 92]
[111 119]
[112 118]
[162 182]
[163 181]
[164 180]
[165 179]
[167 177]
[168 176]
[169 175]
[170 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
