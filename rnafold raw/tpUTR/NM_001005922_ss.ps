%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 05:51:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUGGCUUUGCAGGACUCUUACCAUGGCCAGGCAUUCCUGCCCAGCCUUUACCUCCUUUUCCUGGCACC\
) } def
/len { sequence length } bind def

/coor [
[69.41612244 300.36074829]
[57.76053619 310.16213989]
[43.12424850 314.36917114]
[28.04308701 312.25292969]
[15.12995434 304.18008423]
[6.62212753 291.54928589]
[3.99363971 276.54891968]
[7.69989157 261.77789307]
[17.09875298 249.79534912]
[30.56181526 242.67735291]
[45.75651932 241.65713501]
[50.88682175 227.56173706]
[56.01712418 213.46635437]
[60.83871460 199.26240540]
[65.34930420 184.95664978]
[69.85989380 170.65089417]
[74.37047577 156.34513855]
[60.95847702 148.03547668]
[50.08290100 136.60505676]
[42.45031738 122.79651642]
[38.55658722 107.50693512]
[38.65467834 91.72965240]
[42.73821640 76.48966980]
[50.54191208 62.77709579]
[61.55876923 51.48279572]
[75.07305908 43.34053802]
[90.20678711 38.87929916]
[105.97675323 38.38891602]
[109.22334290 23.74447632]
[112.46994019 9.10003567]
[104.24327850 -4.12720251]
[107.74440765 -18.93249893]
[120.40525055 -26.69384575]
[123.65184784 -41.33828735]
[126.89844513 -55.98272705]
[130.14503479 -70.62716675]
[124.70036316 -86.09608459]
[135.57846069 -98.36796570]
[151.58888245 -94.81853485]
[156.26147461 -79.09915924]
[144.78947449 -67.38056946]
[141.54287720 -52.73613358]
[138.29627991 -38.09169006]
[135.04969788 -23.44725227]
[143.24423218 -11.06237602]
[140.16033936 3.83541751]
[127.11437988 12.34663010]
[123.86779022 26.99106979]
[120.62119293 41.63550949]
[133.36766052 47.86319351]
[144.36149597 56.82935715]
[153.02525330 68.06304169]
[158.90388489 80.97422028]
[161.68858337 94.88471222]
[161.23310852 109.06389618]
[157.56137085 122.76699066]
[150.86624146 135.27426147]
[141.49935913 145.92875671]
[129.95274353 154.17083740]
[116.83286285 159.56762695]
[102.82884216 161.83563232]
[88.67623138 160.85572815]
[84.16564178 175.16148376]
[79.65505981 189.46723938]
[75.14447021 203.77299500]
[75.52883911 213.22262573]
[70.11251068 218.59666443]
[64.98220825 232.69204712]
[59.85190964 246.78742981]
[70.83594513 257.33593750]
[76.57389069 271.44253540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 69]
[12 68]
[13 67]
[14 65]
[15 64]
[16 63]
[17 62]
[28 49]
[29 48]
[30 47]
[33 44]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
