%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 16:58:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGGACCUCUCCUGGCACCGCUGGGGGCCCCCCGCCCCCACCGUCCCACUCGGUGACCCCAGGCCCCUCCGGCGCGGGAUGGCGCCCCAGGUCUCCCCUACUCCGCUCACCCCGCAGUUAAUGGCAAACGAAUAAAUAAAUGAGGCGGCCUCGGA\
) } def
/len { sequence length } bind def

/coor [
[117.69081879 140.00410461]
[112.15785980 153.94635010]
[106.62490082 167.88859558]
[108.72621155 183.56964111]
[96.83988190 192.54542542]
[91.30692291 206.48767090]
[85.77396393 220.42993164]
[88.69075012 236.56759644]
[76.00039673 246.95446777]
[60.75765991 240.90541077]
[58.64295959 224.64318848]
[71.83171844 214.89697266]
[77.36467743 200.95471191]
[82.89763641 187.01246643]
[80.40057373 172.32865906]
[92.68264771 162.35563660]
[98.21560669 148.41339111]
[103.74856567 134.47114563]
[98.77085876 128.86111450]
[84.07630157 131.87277222]
[88.81543732 117.64106750]
[83.83772278 112.03103638]
[72.47380066 123.03884888]
[58.19156647 118.81189728]
[43.68989182 122.64614868]
[29.18822098 126.48039246]
[14.68654633 130.31465149]
[0.18487331 134.14889526]
[-14.31680012 137.98313904]
[-28.81847382 141.81739807]
[-38.09637451 154.90556335]
[-54.12128830 155.66824341]
[-64.60027313 143.52038574]
[-61.49474716 127.78078461]
[-47.18700409 120.52350616]
[-32.65272141 127.31571960]
[-18.15104866 123.48146820]
[-3.64937615 119.64721680]
[10.85229683 115.81297302]
[25.35397148 111.97872162]
[39.85564423 108.14447021]
[54.35731888 104.31021881]
[64.68398285 93.57666779]
[80.00347137 97.52936554]
[81.78874207 82.63598633]
[68.60411835 75.48297119]
[55.41949081 68.32996368]
[42.16440201 61.30837631]
[28.84016228 54.41891861]
[12.49267483 55.71957016]
[3.41666031 42.06094742]
[10.94874477 27.49386787]
[27.34056473 27.00369644]
[35.72962189 41.09467697]
[49.05385971 47.98413849]
[56.48042297 48.26430511]
[62.57250214 55.14533234]
[75.75713348 62.29834366]
[88.94175720 69.45135498]
[103.92990112 70.04770660]
[117.64115906 63.96482468]
[127.11799622 51.29596329]
[141.88946533 53.20727539]
[155.60072327 47.12439346]
[169.31198120 41.04151535]
[183.02323914 34.95863342]
[196.73449707 28.87575531]
[210.38459778 22.65686417]
[223.97219849 16.30257797]
[237.55981445 9.94828987]
[251.14741516 3.59400296]
[250.57192993 -17.44736671]
[259.62573242 -36.38449860]
[276.26953125 -49.07677078]
[296.81103516 -52.77626801]
[316.72409058 -46.72256851]
[326.34048462 -58.23450851]
[335.95687866 -69.74644470]
[345.57330322 -81.25838470]
[355.18969727 -92.77032471]
[358.09881592 -108.32177734]
[372.19625854 -113.12915039]
[381.81268311 -124.64109039]
[391.31414795 -136.24806213]
[400.69976807 -147.94892883]
[410.08538818 -159.64978027]
[404.63366699 -173.94053650]
[407.05102539 -188.94230652]
[416.58944702 -200.64212036]
[430.60958862 -205.96109009]
[445.31063843 -203.56436157]
[454.69625854 -215.26522827]
[464.08187866 -226.96607971]
[463.76724243 -243.00604248]
[476.20315552 -253.14151001]
[491.84985352 -249.59741211]
[498.70452881 -235.09248352]
[491.50885010 -220.75366211]
[475.78274536 -217.58045959]
[466.39712524 -205.87960815]
[457.01150513 -194.17874146]
[462.54095459 -180.34794617]
[460.39077759 -165.50770569]
[451.03933716 -153.65794373]
[436.91946411 -148.04310608]
[421.78625488 -150.26416016]
[412.40063477 -138.56330872]
[403.01501465 -126.86244202]
[401.27343750 -119.63754272]
[393.32461548 -115.02468872]
[383.70822144 -103.51274872]
[381.48693848 -88.78470612]
[366.70162964 -83.15392303]
[357.08523560 -71.64198303]
[347.46884155 -60.13004303]
[337.85241699 -48.61810303]
[328.23602295 -37.10616302]
[336.70935059 -21.83336449]
[338.62442017 -4.47283649]
[353.12609863 -0.63858700]
[367.62777710 3.19566250]
[380.30242920 -5.96334982]
[395.89523315 -4.78090382]
[407.04376221 6.18468475]
[408.48403931 21.75580025]
[399.53598022 34.58023834]
[384.42459106 38.60269165]
[370.28500366 31.92388153]
[363.79351807 17.69733620]
[349.29187012 13.86308670]
[334.79019165 10.02883720]
[331.32818604 16.32302475]
[326.89053345 21.98186493]
[321.59170532 26.85530663]
[315.56900024 30.81361198]
[308.97906494 33.75080109]
[301.99377441 35.58748627]
[294.79577637 36.27302551]
[287.57366943 35.78690720]
[280.51718140 34.13935852]
[273.81201172 31.37113762]
[267.63507080 27.55253983]
[262.14978027 22.78160667]
[257.50170898 17.18160820]
[243.91409302 23.53589630]
[230.32649231 29.89018250]
[216.73889160 36.24446869]
[211.98612976 41.95793533]
[202.81736755 42.58701324]
[189.10610962 48.66989136]
[175.39485168 54.75277328]
[161.68359375 60.83565140]
[147.97235107 66.91853333]
[139.47622681 79.15230560]
[123.72403717 77.67607880]
[110.01277924 83.75896454]
[126.12809753 92.08696747]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[5 14]
[6 13]
[7 12]
[22 44]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[45 59]
[46 58]
[47 57]
[48 55]
[49 54]
[60 156]
[61 155]
[63 153]
[64 152]
[65 151]
[66 150]
[67 149]
[68 147]
[69 146]
[70 145]
[71 144]
[76 117]
[77 116]
[78 115]
[79 114]
[80 113]
[82 111]
[83 110]
[84 108]
[85 107]
[86 106]
[91 101]
[92 100]
[93 99]
[119 131]
[120 130]
[121 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
