%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 20:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCACUUGCUGUUUUUUUAUAUAAAAAUGUGUACAAAGUUAAUUUAUUGCAUUAAUAAAGCUCUUUAAACUAUAAAAUGUUAUAAAGUGUAUCUACAACCUC\
) } def
/len { sequence length } bind def

/coor [
[140.39253235 371.93789673]
[144.54374695 357.37606812]
[153.20028687 344.95260620]
[165.42317200 336.01504517]
[160.96063232 321.69424438]
[156.49807739 307.37341309]
[152.03553772 293.05261230]
[147.57299805 278.73178101]
[132.64381409 278.09558105]
[118.80714417 272.37930298]
[107.74037933 262.25500488]
[100.79221344 248.93043518]
[98.81836700 234.00482178]
[102.07621002 219.27706909]
[110.19137573 206.52888489]
[122.20070648 197.30928040]
[117.73816681 182.98846436]
[113.27561951 168.66764832]
[108.81307220 154.34683228]
[104.35052490 140.02601624]
[99.88797760 125.70520782]
[95.42543793 111.38439178]
[88.64236450 124.76310730]
[75.81257629 132.53462219]
[60.81370926 132.35009766]
[48.17899323 124.26529694]
[41.72711945 110.72375488]
[43.40808105 95.81824493]
[52.71383667 84.05376434]
[66.83182526 78.98599243]
[81.49506378 82.14659119]
[92.27241516 92.58144379]
[91.81936646 77.58828735]
[80.59352875 66.78929138]
[80.34765625 51.57764053]
[90.71203613 40.94207382]
[90.25898743 25.94891548]
[89.80594635 10.95575905]
[89.35289764 -4.03739786]
[77.34283447 -10.99155617]
[70.42997742 -22.89979744]
[70.34815216 -36.56006241]
[77.01091003 -48.36076355]
[88.56288910 -55.23563766]
[88.56288910 -70.23563385]
[88.56288910 -85.23563385]
[88.56288910 -100.23563385]
[88.56288910 -115.23563385]
[88.56288910 -130.23564148]
[88.56288910 -145.23564148]
[82.51654816 -161.07476807]
[96.06288910 -171.26953125]
[109.60922241 -161.07476807]
[103.56288910 -145.23564148]
[103.56288910 -130.23564148]
[103.56288910 -115.23563385]
[103.56288910 -100.23563385]
[103.56288910 -85.23563385]
[103.56288910 -70.23563385]
[103.56288910 -55.23563766]
[117.10207367 -46.08998489]
[122.63440704 -30.54106522]
[117.81942749 -14.58270550]
[104.34605408 -4.49044371]
[104.79910278 10.50271320]
[105.25214386 25.49587059]
[105.70519257 40.48902512]
[116.69281769 50.47940826]
[117.36585236 65.67814636]
[106.81252289 77.13523865]
[107.26557159 92.12839508]
[109.74624634 106.92185211]
[114.20879364 121.24266052]
[118.67134094 135.56347656]
[123.13388824 149.88429260]
[127.59642792 164.20510864]
[132.05897522 178.52590942]
[136.52153015 192.84672546]
[151.64234924 193.61224365]
[165.56278992 199.49385071]
[176.61026001 209.76388550]
[183.46453857 223.16870117]
[185.31553650 238.08161926]
[181.95899963 252.70037842]
[173.81887817 265.26492310]
[161.89379883 274.26925659]
[166.35635376 288.59005737]
[170.81889343 302.91085815]
[175.28144836 317.23168945]
[179.74398804 331.55249023]
[194.88034058 331.96456909]
[209.06187439 337.27142334]
[220.75030518 346.89739990]
[228.67774963 359.79833984]
[231.98429871 374.57485962]
[230.31127930 389.62408447]
[223.84017944 403.31362915]
[213.27293396 414.15853882]
[199.75578308 420.98242188]
[184.75497437 423.04510498]
[169.89768982 420.12280273]
[156.79553223 412.53253174]
[146.86972046 401.09762573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 90]
[5 89]
[6 88]
[7 87]
[8 86]
[16 78]
[17 77]
[18 76]
[19 75]
[20 74]
[21 73]
[22 72]
[32 71]
[33 70]
[36 67]
[37 66]
[38 65]
[39 64]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
