%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:15:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACCCCUUGGCCCUGGCCUUCAAACCCACCCCCUUUCCUUCCAGCCUUUCUGUCAUCAUCUCCACAGCCCACCCAUCCCCUGAGCACACUAACCACCUCAUGCAGGCCCCACCUGCCAAUAGUAAUAAAGCAAUGUCACUUUUUUAAAACAUGAA\
) } def
/len { sequence length } bind def

/coor [
[13.26330090 131.80010986]
[-1.19271421 135.80305481]
[-15.64872932 139.80599976]
[-18.43442154 154.77267456]
[-27.40551949 166.99586487]
[-40.73948288 174.08287048]
[-55.76646042 174.67532349]
[-69.50382233 168.70921326]
[-79.24816895 157.41705322]
[-93.70418549 161.41999817]
[-108.16020203 165.42294312]
[-122.61621857 169.42590332]
[-128.42349243 186.55340576]
[-143.19557190 196.71331787]
[-160.95428467 196.02130127]
[-174.64756775 184.93954468]
[-188.93185425 189.51766968]
[-203.21614075 194.09579468]
[-201.91905212 209.10464478]
[-203.99476624 224.02574158]
[-209.33920288 238.11065674]
[-217.68424988 250.65289307]
[-228.61134338 261.02334595]
[-241.57238770 268.70184326]
[-255.91725159 273.30322266]
[-270.92639160 274.59667969]
[-285.84698486 272.51733398]
[-299.93060303 267.16949463]
[-312.47082520 258.82138062]
[-322.83865356 247.89178467]
[-330.51397705 234.92889404]
[-335.11187744 220.58291626]
[-336.40170288 205.57344055]
[-334.31875610 190.65335083]
[-328.96749878 176.57102966]
[-320.61636353 164.03283691]
[-309.68426514 153.66767883]
[-296.71948242 145.99546814]
[-282.37240601 141.40104675]
[-267.36260986 140.11486816]
[-252.44303894 142.20143127]
[-238.36201477 147.55609131]
[-225.82583618 155.91026306]
[-215.46333313 166.84489441]
[-207.79426575 179.81150818]
[-193.50997925 175.23338318]
[-179.22569275 170.65525818]
[-177.16085815 158.62864685]
[-170.11898804 148.57444763]
[-159.39665222 142.45159912]
[-147.01455688 141.48513794]
[-135.33671570 145.92156982]
[-126.61917114 154.96987915]
[-112.16315460 150.96693420]
[-97.70713806 146.96398926]
[-83.25112152 142.96102905]
[-80.70304871 128.26501465]
[-71.99111176 116.08258820]
[-58.79972458 108.86120605]
[-43.71960068 108.08019257]
[-29.73902130 113.94792938]
[-19.65168190 125.34999084]
[-5.19566536 121.34703827]
[9.26035023 117.34408569]
[7.82315588 106.15880585]
[7.75952578 94.88175201]
[9.07040787 83.68096924]
[11.73626709 72.72336578]
[15.71737957 62.17221451]
[20.95442009 52.18475342]
[27.36935043 42.90980530]
[34.86658096 34.48558044]
[43.33438492 27.03761482]
[52.64659119 20.67688751]
[62.66442490 15.49818707]
[73.23861694 11.57868004]
[84.21158600 8.97677517]
[95.41982269 7.73124313]
[106.69631195 7.86064434]
[117.87302399 9.36305046]
[128.78340149 12.21607399]
[139.26486206 16.37719917]
[146.72149658 3.36187863]
[154.17813110 -9.65344238]
[161.63476562 -22.66876411]
[152.95231628 -35.22176361]
[150.58471680 -50.30013275]
[155.00205994 -64.91005707]
[165.32730103 -76.15071106]
[179.51031494 -81.79026794]
[194.73509216 -80.70899200]
[207.97871399 -73.12155151]
[216.61166382 -60.53446198]
[218.91986084 -45.44688416]
[214.44500732 -30.85447311]
[204.07559204 -19.65456200]
[189.87046814 -14.07089996]
[174.65008545 -15.21212959]
[167.19345093 -2.19680762]
[159.73681641 10.81851387]
[152.28018188 23.83383560]
[171.81396484 41.88584137]
[185.39494324 64.75505829]
[199.67922974 60.17693329]
[213.96350098 55.59880829]
[228.24778748 51.02067947]
[242.53207397 46.44255447]
[251.12159729 32.89266586]
[267.08572388 31.30332565]
[278.17816162 42.89374161]
[275.88970947 58.77273941]
[261.97589111 66.75930786]
[247.11019897 60.72684097]
[232.82591248 65.30496216]
[218.54162598 69.88308716]
[204.25735474 74.46121979]
[189.97306824 79.03934479]
[191.86074829 90.19673920]
[192.37016296 101.50122070]
[191.49366760 112.78317261]
[189.24441528 123.87333679]
[185.65614319 134.60530090]
[180.78269958 144.81805420]
[174.69718933 154.35836792]
[186.06909180 164.13996887]
[197.44099426 173.92156982]
[212.94883728 177.05490112]
[217.55216980 191.22029114]
[228.92408752 201.00189209]
[240.29598999 210.78349304]
[251.66789246 220.56510925]
[266.73727417 216.86465454]
[281.09097290 222.75964355]
[289.20971680 235.98332214]
[287.97164917 251.45092773]
[277.85284424 263.21484375]
[262.74420166 266.75161743]
[248.45530701 260.70126343]
[240.48051453 247.39027405]
[241.88629150 231.93701172]
[230.51438904 222.15541077]
[219.14247131 212.37380981]
[207.77056885 202.59219360]
[193.07614136 200.15852356]
[187.65939331 185.29347229]
[176.28749084 175.51187134]
[164.91558838 165.73027039]
[151.97041321 176.37785339]
[137.31442261 184.51115417]
[121.43006897 189.86241150]
[104.84025574 192.25547791]
[88.09110260 191.61157227]
[71.73398590 187.95188904]
[56.30735779 181.39689636]
[42.31905746 172.16238403]
[30.22956467 160.55235291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[9 56]
[10 55]
[11 54]
[12 53]
[16 47]
[17 46]
[18 45]
[82 101]
[83 100]
[84 99]
[85 98]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
[124 147]
[125 146]
[126 145]
[128 143]
[129 142]
[130 141]
[131 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
