%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:40:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGUUUUCAGAUUCCACACAAAAUGUCACACUUGUUUCUUGUUCAUCCAAGGAACCUAAUUGAAAUUUAAAAAUAAAGCUACUGAAUUUAUUGCCGCACCCA\
) } def
/len { sequence length } bind def

/coor [
[149.15975952 326.73007202]
[146.04109192 312.05786133]
[142.92240906 297.38565063]
[139.80374146 282.71343994]
[136.68505859 268.04122925]
[133.56639099 253.36900330]
[119.56212616 240.17810059]
[125.63305664 221.07087708]
[121.64250946 206.61143494]
[117.65195465 192.15199280]
[113.66139984 177.69255066]
[109.67084503 163.23310852]
[93.33959961 163.62068176]
[77.44271851 159.85917664]
[63.01692963 152.19390869]
[51.00301743 141.12477112]
[42.18447876 127.37366486]
[37.13642502 111.83734894]
[36.18806839 95.52906036]
[39.40125656 79.51234436]
[46.56643677 64.83174896]
[57.21632767 52.44467163]
[70.65638733 43.15895462]
[65.38576508 29.11543274]
[60.11514282 15.07190895]
[54.84452057 1.02838624]
[42.75155640 -9.17312336]
[45.52344513 -23.80753136]
[40.25282288 -37.85105515]
[34.98220062 -51.89457703]
[19.82730675 -53.34045029]
[6.85588837 -61.19088364]
[-1.38698375 -73.84296417]
[-3.31126189 -88.75799561]
[1.41160214 -102.97080994]
[11.79402447 -113.67925262]
[6.52340174 -127.72277832]
[1.25277960 -141.76629639]
[-4.01784277 -155.80982971]
[-9.28846550 -169.85334778]
[-14.55908775 -183.89686584]
[-19.82971001 -197.94039917]
[-25.10033226 -211.98391724]
[-39.59162521 -218.29089355]
[-45.30097961 -233.02787781]
[-38.84114075 -247.45169067]
[-24.04461670 -253.00491333]
[-9.68991852 -246.39294434]
[-4.29343748 -231.53852844]
[-11.05680943 -217.25453186]
[-5.78618670 -203.21101379]
[-0.51556444 -189.16749573]
[4.75505781 -175.12396240]
[10.02568054 -161.08044434]
[15.29630280 -147.03692627]
[20.56692505 -132.99339294]
[25.83754730 -118.94987488]
[40.70175552 -117.71665192]
[53.60956573 -110.12074280]
[61.97362518 -97.62260437]
[64.09044647 -82.67137146]
[59.48714828 -68.22503662]
[49.02572250 -57.16519928]
[54.29634476 -43.12167740]
[59.56696701 -29.07815361]
[71.28294373 -19.88113213]
[68.88804626 -4.24223614]
[74.15866852 9.80128670]
[79.42929077 23.84481049]
[84.69991302 37.88833237]
[98.24105835 36.05582047]
[111.86247253 37.14116287]
[124.94258118 41.09482574]
[136.88453674 47.73640823]
[147.14340210 56.76284409]
[155.25105286 67.76223755]
[160.83752441 80.23268890]
[163.64791870 93.60514069]
[163.55397034 107.26940155]
[160.55998230 120.60195160]
[154.80256653 132.99440002]
[146.54443359 143.88128662]
[136.16242981 152.76580811]
[124.13028717 159.24255371]
[128.12084961 173.70199585]
[132.11138916 188.16145325]
[136.10194397 202.62089539]
[140.09249878 217.08033752]
[150.02462769 221.99946594]
[155.41748047 231.42803955]
[154.65354919 242.04083252]
[148.23860168 250.25032043]
[151.35728455 264.92254639]
[154.47595215 279.59475708]
[157.59463501 294.26696777]
[160.71330261 308.93917847]
[163.83198547 323.61138916]
[178.06176758 329.79949951]
[185.90760803 343.18688965]
[184.35261536 358.62585449]
[173.99470520 370.17980957]
[158.81672668 373.40597534]
[144.65489197 367.06387329]
[136.95474243 353.59216309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 94]
[5 93]
[6 92]
[8 88]
[9 87]
[10 86]
[11 85]
[12 84]
[23 70]
[24 69]
[25 68]
[26 67]
[28 65]
[29 64]
[30 63]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
