%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:23:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCUGUCCCCUACCUGCCAAGACAAUUGGUGGUGGAGUCCUGACCCCAAUCCCCAACCUCCCAGGACUGUGUUCUUUCUGGAGUUUUCGCUGAGAACAAAACAGUGUUGUCUGGACCCUG\
) } def
/len { sequence length } bind def

/coor [
[130.47613525 213.37939453]
[125.91440582 199.08987427]
[121.35268402 184.80033875]
[116.60736084 170.57072449]
[111.67922211 156.40338135]
[106.75109100 142.23603821]
[101.82295227 128.06871033]
[91.30694580 128.18537903]
[80.99958801 124.32118225]
[72.41489410 116.67000580]
[66.94168854 106.00062561]
[52.90593338 111.29190826]
[38.87018204 116.58319092]
[24.83443069 121.87447357]
[10.79867840 127.16574860]
[3.77211952 133.19094849]
[-3.66718197 132.40747070]
[-17.83452034 137.33560181]
[-32.00185776 142.26374817]
[-46.16919708 147.19187927]
[-60.33653641 152.12001038]
[-68.59013367 165.87710571]
[-84.51033783 167.85868835]
[-95.88452911 156.54464722]
[-93.98739624 140.61416626]
[-80.27426910 132.28773499]
[-65.26467133 137.95268250]
[-51.09733200 133.02453613]
[-36.92999268 128.09640503]
[-22.76265526 123.16826630]
[-8.59531784 118.24013519]
[5.50739670 113.12999725]
[19.54314804 107.83872223]
[33.57889938 102.54743958]
[47.61465454 97.25615692]
[61.65040588 91.96487427]
[67.47975159 78.14392090]
[61.47294235 64.39916992]
[55.46613693 50.65441513]
[49.45932770 36.90966034]
[43.45251846 23.16490936]
[37.44570923 9.42015457]
[31.43890190 -4.32459879]
[16.42084312 -2.60722923]
[1.56409943 -5.39444399]
[-11.81027985 -12.43840599]
[-22.51305199 -23.11277008]
[-29.59253693 -36.46837997]
[-32.41922760 -51.31766510]
[-30.74178123 -66.34023285]
[-24.70935249 -80.20028687]
[-14.85834026 -91.66541290]
[-2.06469107 -99.71611786]
[12.53399277 -103.63655853]
[27.63960648 -103.07812500]
[41.90896988 -98.09046936]
[54.07325745 -89.11708832]
[63.05083084 -76.95590210]
[68.04341125 -62.68825912]
[68.60706329 -47.58283997]
[64.69166565 -32.98280334]
[56.64537430 -20.18637657]
[45.18365479 -10.33140755]
[51.19046402 3.41334629]
[57.19727325 17.15810013]
[63.20407867 30.90285301]
[69.21089172 44.64760590]
[75.21769714 58.39236069]
[81.22450256 72.13711548]
[105.72525024 69.67250824]
[123.14057159 84.00970459]
[137.30790710 79.08157349]
[151.47525024 74.15343475]
[165.64259338 69.22530365]
[179.80992126 64.29716492]
[193.97726440 59.36903000]
[208.14460754 54.44089508]
[211.16653442 40.92386246]
[220.42250061 30.76652718]
[233.39463806 26.57197762]
[246.63259888 29.34263229]
[256.67123413 38.24315262]
[270.96075439 33.68143082]
[281.59030151 21.19364548]
[297.66876221 24.42093849]
[302.65597534 40.04334641]
[291.42153931 51.98987579]
[275.52249146 47.97096252]
[261.23294067 52.53268433]
[256.62158203 68.23062134]
[243.45628357 78.22087097]
[226.76562500 78.44090271]
[213.07273865 68.60823059]
[198.90539551 73.53636932]
[184.73806763 78.46450043]
[170.57072449 83.39263916]
[156.40338135 88.32077789]
[142.23603821 93.24890900]
[128.06871033 98.17704773]
[127.04167175 107.74103546]
[122.85221863 116.39974976]
[115.99029541 123.14057159]
[120.91842651 137.30790710]
[125.84656525 151.47525024]
[130.77470398 165.64259338]
[136.61697388 172.82194519]
[135.64221191 180.23861694]
[140.20393372 194.52813721]
[144.76565552 208.81767273]
[159.90731812 210.44555664]
[173.07453918 218.09698486]
[181.98600769 230.44630432]
[185.09776306 245.35391235]
[181.87068176 260.23699951]
[172.86386108 272.51693726]
[159.63780212 280.06619263]
[144.48399353 281.57678223]
[130.02792358 276.78701782]
[118.77418518 266.52673340]
[112.67257690 252.57359314]
[112.78022003 237.34506226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[3 107]
[4 105]
[5 104]
[6 103]
[7 102]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[37 69]
[38 68]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[71 99]
[72 98]
[73 97]
[74 96]
[75 95]
[76 94]
[77 93]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
