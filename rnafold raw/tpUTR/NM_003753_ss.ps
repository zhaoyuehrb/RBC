%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 21:38:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGUGAUGUGGAGCUGGAGUUUGUCCUUCCACCGAGACUACGAGGGCCUUUGAUGCUUAGUGGAAUGUGUGUCUAACUUGCUCUCUGACAUUUAGCAGAUGAAAUAAAAUAUAUAUCUGUUUAGUCUUUCCCUCA\
) } def
/len { sequence length } bind def

/coor [
[100.19326782 263.73510742]
[87.73086548 272.08306885]
[73.26683044 276.05694580]
[58.28865814 275.24804688]
[44.33670807 269.73959351]
[32.84580994 260.09805298]
[24.99769402 247.31498718]
[21.59946823 232.70498657]
[23.00060463 217.77056885]
[29.05665779 204.04814148]
[16.42109871 212.13162231]
[3.78553915 220.21510315]
[-8.85002041 228.29858398]
[-21.48557854 236.38206482]
[-34.12113953 244.46554565]
[-37.56765366 250.27062988]
[-42.68106842 252.99064636]
[-47.52090836 252.61412048]
[-60.51129150 260.11413574]
[-73.50167084 267.61413574]
[-79.02608490 282.67599487]
[-94.29129791 287.61087036]
[-107.58713531 278.63311768]
[-108.71417999 262.62969971]
[-96.80785370 251.87707520]
[-81.00167084 254.62374878]
[-68.01129150 247.12374878]
[-55.02090836 239.62374878]
[-42.20461655 231.82998657]
[-29.56905937 223.74650574]
[-16.93350029 215.66302490]
[-4.29794025 207.57954407]
[8.33761883 199.49606323]
[20.97317886 191.41258240]
[24.58689690 183.61204529]
[33.44599915 179.76377869]
[42.37291718 167.70932007]
[51.29983139 155.65484619]
[60.22674942 143.60038757]
[69.15366364 131.54591370]
[78.08058167 119.49144745]
[87.00749969 107.43698120]
[82.23806000 96.14925385]
[87.50999451 82.64925385]
[85.12975311 67.83930969]
[82.74951172 53.02936172]
[80.36927795 38.21941757]
[77.98903656 23.40947151]
[75.60880280 8.59952736]
[59.10487366 2.77969241]
[47.83873367 -10.49571323]
[44.81174850 -27.55230713]
[50.76082611 -43.72766113]
[63.98156357 -54.64574814]
[60.92972183 -69.33200836]
[57.87788391 -84.01827240]
[54.82604218 -98.70453644]
[51.77420044 -113.39079285]
[41.39100647 -125.32812500]
[46.37703323 -139.36338806]
[43.32519531 -154.04965210]
[29.97413254 -162.50688171]
[26.59523582 -177.94575500]
[35.19314575 -191.20664978]
[50.66687393 -194.42213440]
[63.83613205 -185.68449402]
[66.88783264 -170.17764282]
[58.01145554 -157.10150146]
[61.06329346 -142.41523743]
[71.22820282 -131.52836609]
[66.46046448 -116.44263458]
[69.51230621 -101.75637054]
[72.56414032 -87.07011414]
[75.61598206 -72.38385010]
[78.66782379 -57.69758987]
[91.11094666 -55.02194595]
[101.63968658 -47.78779984]
[108.65099335 -37.05326843]
[111.06092834 -24.41260529]
[108.47212219 -11.75945282]
[101.23880005 -1.00316799]
[90.41874695 6.21928930]
[92.79898071 21.02923393]
[95.17922211 35.83917999]
[97.55946350 50.64912415]
[99.93969727 65.45906830]
[102.31993866 80.26901245]
[102.71646118 65.27425385]
[111.46984100 53.09318924]
[125.55513763 47.93525314]
[140.10487366 51.58288956]
[150.09104919 62.77557755]
[152.06272888 77.64543152]
[145.33854675 91.05383301]
[132.24220276 98.36721802]
[117.29908752 97.05814362]
[131.74284363 101.10509491]
[146.18661499 105.15204620]
[160.63037109 109.19899750]
[175.07412720 113.24595642]
[189.51788330 117.29290771]
[203.96163940 121.33985901]
[218.40541077 125.38681030]
[228.45365906 113.89788818]
[242.49504089 107.91439819]
[257.74163818 108.62436676]
[271.16622925 115.88683319]
[280.10333252 128.25982666]
[282.77850342 143.28668213]
[278.66055298 157.98379517]
[268.56713867 169.43305969]
[254.50228882 175.36120605]
[239.25860596 174.59120178]
[225.86273193 167.27592468]
[216.97441101 154.86784363]
[214.35845947 139.83056641]
[199.91468811 135.78361511]
[185.47093201 131.73666382]
[171.02717590 127.68971252]
[156.58341980 123.64276123]
[142.13966370 119.59580994]
[127.69589996 115.54885864]
[113.25213623 111.50190735]
[99.06196594 116.36389923]
[90.13504791 128.41836548]
[81.20812988 140.47282410]
[72.28121185 152.52729797]
[63.35429764 164.58177185]
[54.42738342 176.63623047]
[45.50046539 188.69070435]
[59.60482025 183.58509827]
[74.60004425 183.20658875]
[88.94402313 187.59411621]
[101.16160583 196.29644775]
[109.99633026 208.41865540]
[114.53963470 222.71405029]
[114.32427216 237.71250916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[18 28]
[19 27]
[20 26]
[36 130]
[37 129]
[38 128]
[39 127]
[40 126]
[41 125]
[42 124]
[44 87]
[45 86]
[46 85]
[47 84]
[48 83]
[49 82]
[54 75]
[55 74]
[56 73]
[57 72]
[58 71]
[60 69]
[61 68]
[96 123]
[97 122]
[98 121]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
