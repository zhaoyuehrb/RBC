%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:30:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGAGGCCAGUGCACUCAAGCCUGAGCAAUAAGAAUAAAACCGAGUAGAACAAAAUAAAAAAUUCAAAAAACAAAACAAAACCCACACUCCAAAAACUAACAAAGAAUAAAUAAAUAAUAUAAAAAUAAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[180.48596191 124.03613281]
[169.75419617 120.12641144]
[159.34307861 115.42839813]
[149.31040955 109.96813202]
[139.71192932 103.77589417]
[130.60090637 96.88603210]
[122.02797699 89.33675385]
[111.17921448 99.69554138]
[100.45081329 110.17893219]
[89.84421539 120.78553009]
[79.23760986 131.39213562]
[75.33487701 139.75242615]
[68.26139832 142.11769104]
[57.41263199 152.47647095]
[57.29819870 168.28033447]
[45.98376465 179.31478882]
[30.18198395 179.03327942]
[19.26777267 167.60281372]
[19.71633720 151.80488586]
[31.26155472 141.01213074]
[47.05385208 141.62770081]
[57.90261459 131.26892090]
[68.63101196 120.78553009]
[79.23760986 110.17893219]
[89.84421539 99.57232666]
[92.90056610 92.02918243]
[100.82043457 88.84677887]
[111.66919708 78.48799133]
[98.95850372 61.54719543]
[88.70454407 43.01771927]
[81.10261536 23.25339317]
[76.29737854 2.63154721]
[74.38010406 -18.45417976]
[75.38696289 -39.60135269]
[79.29828644 -60.40642548]
[86.03901672 -80.47244263]
[95.48008728 -99.41661072]
[107.44095612 -116.87759399]
[121.69298553 -132.52243042]
[137.96388245 -146.05284119]
[155.94285583 -157.21095276]
[175.28657532 -165.78421021]
[195.62570190 -171.60939026]
[216.57197571 -174.57575989]
[216.22550964 -189.57176208]
[215.87904358 -204.56774902]
[215.53257751 -219.56375122]
[200.62384033 -221.45777893]
[186.16394043 -225.55276489]
[172.47592163 -231.75724792]
[159.86555481 -239.93261719]
[148.61459351 -249.89622498]
[138.97438049 -261.42547607]
[131.16026306 -274.26281738]
[125.34681702 -288.12145996]
[121.66393280 -302.69177246]
[120.19387054 -317.64825439]
[120.96948242 -332.65679932]
[123.97343445 -347.38208008]
[129.13862610 -361.49511719]
[136.34965515 -374.68066406]
[145.44541931 -386.64413452]
[156.22273254 -397.11825562]
[168.44082642 -405.86904907]
[181.82672119 -412.70095825]
[196.08139038 -417.46142578]
[210.88638306 -420.04406738]
[225.91093445 -420.39120483]
[240.81939697 -418.49505615]
[255.27871704 -414.39801025]
[268.96585083 -408.19158936]
[281.57504272 -400.01440430]
[292.82458496 -390.04919434]
[302.46316528 -378.51858521]
[310.27545166 -365.68011475]
[316.08691406 -351.82067871]
[319.76773071 -337.24981689]
[321.23565674 -322.29312134]
[320.45791626 -307.28469849]
[317.45187378 -292.55984497]
[312.28466797 -278.44754028]
[305.07174683 -265.26300049]
[295.97427368 -253.30082703]
[285.19546509 -242.82824707]
[272.97613525 -234.07920837]
[259.58926392 -227.24919128]
[245.33392334 -222.49075317]
[230.52856445 -219.91021729]
[230.87504578 -204.91421509]
[231.22151184 -189.91822815]
[231.56797791 -174.92222595]
[242.95512390 -174.20561218]
[254.25755310 -172.64311218]
[265.41253662 -170.24337769]
[276.35815430 -167.01966858]
[287.03359985 -162.98986816]
[297.37960815 -158.17630005]
[307.33874512 -152.60563660]
[316.85568237 -146.30879211]
[325.87759399 -139.32067871]
[334.35437012 -131.68005371]
[342.23889160 -123.42930603]
[349.48736572 -114.61421204]
[356.05957031 -105.28369141]
[361.91897583 -95.48950195]
[367.03298950 -85.28599548]
[371.37319946 -74.72981262]
[374.91546631 -63.87952042]
[377.64013672 -52.79535294]
[379.53198242 -41.53882599]
[380.58053589 -30.17241859]
[380.77984619 -18.75923157]
[380.12884521 -7.36261988]
[378.63107300 3.95414972]
[376.29483032 15.12824821]
[373.13299561 26.09763908]
[369.16314697 36.80141449]
[364.40725708 47.18014145]
[358.89166260 57.17618942]
[352.64700317 66.73404694]
[345.70785522 75.80064392]
[338.11276245 84.32560730]
[329.90380859 92.26160431]
[321.12658691 99.56453705]
[311.82977295 106.19384766]
[302.06494141 112.11269379]
[291.88629150 117.28818512]
[281.35031128 121.69155884]
[270.51547241 125.29833984]
[259.44189453 128.08845520]
[248.19107056 130.04640198]
[236.82542419 131.16123962]
[225.40806580 131.42677307]
[214.00234985 130.84146118]
[202.67163086 129.40853882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 28]
[8 27]
[9 25]
[10 24]
[11 23]
[13 22]
[14 21]
[44 91]
[45 90]
[46 89]
[47 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
