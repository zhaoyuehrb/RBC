%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 03:08:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAUGCAUAUGCAAAUGUAGCUUAGUCAAUUAUAGAUAUCACAAAAGAAAUCUAUCAUCUAAGGAUUAAAAAUUGUUCUUUGGAAACCUUUAUAA\
) } def
/len { sequence length } bind def

/coor [
[93.32467651 161.92703247]
[85.82146454 160.65052795]
[78.52996826 158.46841431]
[71.55905151 155.41326904]
[65.01280975 151.53071594]
[58.98897934 146.87870789]
[53.57751083 141.52673340]
[41.27492905 150.10848999]
[29.11147118 158.88632202]
[17.09026718 167.85797119]
[5.06906223 176.82963562]
[-6.95214224 185.80130005]
[-12.92901611 201.07247925]
[-29.18105888 203.26408386]
[-38.98955917 190.12159729]
[-32.26437759 175.16485596]
[-15.92380047 173.78009033]
[-3.90259600 164.80842590]
[8.11860847 155.83677673]
[20.13981247 146.86511230]
[23.68343735 140.21772766]
[32.69317627 137.80590820]
[44.99576187 129.22415161]
[41.12676239 120.33370972]
[38.68439484 110.95053101]
[37.72783661 101.30199432]
[38.28026962 91.62191010]
[40.32830811 82.14484406]
[43.82231903 73.10044861]
[48.67764282 64.70788574]
[54.77661896 57.17053223]
[61.97145462 50.67102814]
[70.08780670 45.36687469]
[78.92900085 41.38660049]
[75.59118652 26.76268387]
[72.25337219 12.13876438]
[68.91555786 -2.48515415]
[65.57774353 -17.10907364]
[62.23992920 -31.73299217]
[51.62578964 -43.46545410]
[56.33701706 -57.59533691]
[52.99920273 -72.21925354]
[39.48566818 -80.41436768]
[35.80617523 -95.78437042]
[44.14370346 -109.21051025]
[59.55174637 -112.72729492]
[72.88898468 -104.24827576]
[76.24266815 -88.80391693]
[67.62312317 -75.55706787]
[70.96093750 -60.93315125]
[81.33632660 -50.24668884]
[76.86384583 -35.07080460]
[80.20166016 -20.44688606]
[83.53947449 -5.82296801]
[86.87728882 8.80095100]
[90.21510315 23.42486954]
[93.55291748 38.04878616]
[124.45864868 42.71743774]
[149.20507812 61.81128693]
[161.56042480 90.52201843]
[176.55271912 90.04124451]
[191.54501343 89.56047821]
[206.53730774 89.07970428]
[221.52958679 88.59893036]
[236.52188110 88.11815643]
[251.51417542 87.63738251]
[266.50646973 87.15660858]
[280.05157471 78.98096466]
[293.02029419 86.30635834]
[308.01257324 85.82558441]
[323.00488281 85.34481049]
[338.64208984 78.79390717]
[349.26577759 92.00653076]
[339.51043701 105.87267303]
[323.48565674 100.33710480]
[308.49334717 100.81787872]
[293.50106812 101.29865265]
[281.02832031 109.43990326]
[266.98724365 102.14890289]
[251.99494934 102.62967682]
[237.00265503 103.11044312]
[222.01036072 103.59121704]
[207.01808167 104.07199097]
[192.02578735 104.55276489]
[177.03349304 105.03353882]
[162.04119873 105.51431274]
[160.90544128 113.04011536]
[158.86027527 120.37120056]
[155.93621826 127.39811707]
[152.17695618 134.01593018]
[147.63859558 140.12582397]
[142.38890076 145.63658142]
[136.50628662 150.46591187]
[130.07856750 154.54170227]
[123.20172882 157.80308533]
[115.97845459 160.20138550]
[108.51658630 161.70077515]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 23]
[8 22]
[9 20]
[10 19]
[11 18]
[12 17]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[41 50]
[42 49]
[60 86]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[67 79]
[69 77]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
