%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 04:21:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGUACUCCAUUGUGAUGAGAAUCUUCUUAGUCUUUCCUUAUCUUCAAUGAUGGUAAUGACCUUUGAACUCAUUUUCCUAUUUUCCAGGCUCUGGUGA\
) } def
/len { sequence length } bind def

/coor [
[83.81387329 141.87460327]
[77.60953522 138.91195679]
[71.93034363 135.03666687]
[66.90950012 130.33961487]
[62.66476059 124.93097687]
[59.29569244 118.93759918]
[56.88130569 112.50006104]
[55.47822952 105.76934814]
[55.11937332 98.90332031]
[55.81314850 92.06301117]
[41.69993973 86.98194122]
[27.58672714 81.90087128]
[13.47351551 76.81980133]
[-0.63969582 71.73873138]
[-18.58426666 75.47781372]
[-29.49228096 61.82991409]
[-43.75812912 57.19465637]
[-58.02397537 52.55940247]
[-72.28982544 47.92414856]
[-86.55567169 43.28889084]
[-100.82151794 38.65363693]
[-109.90610504 50.76763535]
[-122.43328094 59.27344131]
[-137.04417419 63.24840546]
[-152.15393066 62.26135254]
[-166.12353516 56.41935730]
[-177.43766785 46.35610580]
[-184.86906433 33.16319275]
[-187.61163330 18.27168465]
[-185.36787415 3.29689789]
[-178.38114929 -10.13681221]
[-167.40936279 -20.57225800]
[-153.64263916 -26.87747955]
[-138.57426453 -28.36853600]
[-123.83878326 -24.88368416]
[-111.03456879 -16.80093956]
[-101.55052948 -4.99705505]
[-96.41542053 9.24757195]
[-96.18626404 24.38779068]
[-81.92041779 29.02304459]
[-67.65457153 33.65829849]
[-53.38872147 38.29355621]
[-39.12287521 42.92881012]
[-24.85702515 47.56406403]
[-13.82457352 42.33389282]
[-1.82457674 46.21709442]
[4.44137287 57.62552261]
[18.55458450 62.70659256]
[32.66779709 67.78765869]
[46.78100586 72.86872864]
[60.89421844 77.94979858]
[81.88727570 58.92199326]
[110.09465027 56.25561142]
[134.28131104 71.01267242]
[147.19244385 63.37705231]
[155.74974060 47.16714859]
[173.21865845 47.46187592]
[185.88357544 39.42447281]
[198.54849243 31.38707161]
[211.21340942 23.34967041]
[223.87832642 15.31226826]
[223.86361694 -0.11508829]
[232.21113586 -13.08900833]
[246.25720215 -19.46956062]
[261.51977539 -17.22073555]
[273.12863159 -7.06012297]
[277.37942505 7.77006102]
[272.91574097 22.53755951]
[261.16189575 32.53011703]
[245.86856079 34.55914307]
[231.91572571 27.97718620]
[219.25080872 36.01458740]
[206.58589172 44.05199051]
[193.92097473 52.08939362]
[181.25605774 60.12679291]
[178.25361633 71.96128082]
[167.61247253 78.73219299]
[154.82806396 76.28818512]
[141.91693115 83.92380524]
[144.04953003 91.33325958]
[144.88284302 98.99835205]
[144.39231873 106.69297791]
[142.59239197 114.19020081]
[139.53617859 121.26886749]
[135.31379700 127.72019196]
[130.04981995 133.35388184]
[138.08721924 146.01879883]
[146.12463379 158.68371582]
[154.16203308 171.34864807]
[167.75415039 181.48226929]
[161.77922058 197.34848022]
[144.87904358 195.99925232]
[141.49711609 179.38604736]
[133.45970154 166.72113037]
[125.42230988 154.05619812]
[117.38490295 141.39128113]
[110.86067963 143.56051636]
[104.08171844 144.70808411]
[97.20703125 144.80706787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[16 44]
[17 43]
[18 42]
[19 41]
[20 40]
[21 39]
[54 79]
[55 78]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
