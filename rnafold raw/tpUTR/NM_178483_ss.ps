%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:32:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUGCAAAAAUACCAAGGAAGAACUUCUCUUCGAUGAUAAUGUCGAGUGGAAAUCAUGCUUAAUCUGAAGAUUAAAGUAAAAAGUAUCCAAUAUUUUUACUCAA\
) } def
/len { sequence length } bind def

/coor [
[91.09487915 101.13727570]
[76.51454163 97.61398315]
[61.93419266 94.09069061]
[47.35385132 90.56739807]
[32.77350616 87.04411316]
[42.63170242 98.34968567]
[48.99275970 111.93412018]
[51.36410522 126.74549103]
[49.56210709 141.63685608]
[43.72631073 155.45509338]
[34.30860901 167.13014221]
[22.03828621 175.75794983]
[7.86550379 180.67041016]
[-7.11224651 181.48712158]
[-21.73514175 178.14482117]
[-34.87083817 170.90234375]
[-45.50215530 160.32051086]
[-52.80584335 147.21875000]
[-56.21632767 132.61161804]
[-55.46951675 117.63021851]
[-50.62323761 103.43466949]
[-42.05277252 91.12422180]
[-30.42178345 81.65215302]
[-16.63093376 75.75194550]
[-1.74813640 73.88048553]
[13.06947041 76.18128967]
[2.30686164 65.73301697]
[-8.45574665 55.28475571]
[-19.21835518 44.83649063]
[-34.50950241 40.77553558]
[-38.25199127 26.35877037]
[-49.01459885 15.91050529]
[-59.77720642 5.46224022]
[-70.53981781 -4.98602533]
[-81.30242157 -15.43429089]
[-92.06503296 -25.88255692]
[-107.86188507 -25.39778709]
[-119.31732941 -36.28577423]
[-119.63506317 -52.08687210]
[-108.62656403 -63.42656326]
[-92.82299805 -63.57721329]
[-81.60032654 -52.44944382]
[-81.61676788 -36.64516449]
[-70.85415649 -26.19689941]
[-60.09155273 -15.74863434]
[-49.32894135 -5.30036879]
[-38.56633377 5.14789677]
[-27.80372429 15.59616184]
[-13.28238964 18.90978813]
[-8.77009010 34.07387924]
[1.99251831 44.52214813]
[12.75512695 54.97041321]
[23.51773643 65.41867828]
[28.21848297 65.78420258]
[32.76963043 68.16577148]
[36.29679871 72.46376801]
[50.87714005 75.98706055]
[65.45748138 79.51034546]
[80.03782654 83.03363800]
[94.61817169 86.55693054]
[109.29651642 83.46724701]
[121.21933746 74.36524963]
[133.14215088 65.26324463]
[145.06497192 56.16124344]
[156.98779297 47.05924225]
[168.91059875 37.95724106]
[174.72087097 22.62189102]
[190.94808960 20.25347137]
[200.89909363 33.28840637]
[194.33714294 48.31747437]
[178.01260376 49.88005447]
[166.08978271 58.98205948]
[154.16697693 68.08406067]
[142.24415588 77.18606567]
[130.32133484 86.28806305]
[118.39852142 95.39006805]
[118.84302521 110.38347626]
[131.28410339 118.76318359]
[143.72518921 127.14288330]
[156.16627502 135.52258301]
[168.60736084 143.90228271]
[181.04844666 152.28198242]
[193.48953247 160.66168213]
[205.93061829 169.04139709]
[219.69525146 162.22740173]
[235.02172852 163.22463989]
[247.78732300 171.76487732]
[254.55813599 185.55079651]
[253.51284790 200.87408447]
[244.93264771 213.61282349]
[231.12556458 220.34039307]
[215.80564880 219.24708557]
[203.09384155 210.62699890]
[196.40959167 196.79890442]
[197.55091858 181.48246765]
[185.10983276 173.10276794]
[172.66874695 164.72306824]
[160.22766113 156.34336853]
[147.78657532 147.96366882]
[135.34548950 139.58396912]
[122.90440369 131.20426941]
[110.46331787 122.82456207]
[101.20542908 121.84914398]
[94.13835907 117.71137238]
[90.12686157 111.85762024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[4 57]
[5 56]
[26 53]
[27 52]
[28 51]
[29 50]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
[77 102]
[78 101]
[79 100]
[80 99]
[81 98]
[82 97]
[83 96]
[84 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
