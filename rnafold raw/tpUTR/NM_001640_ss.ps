%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 18:44:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCUGCCAUUCUGCAUGAGCUGAUCAGCCUGUGCCACACUUCGCUCUUGAGGAGCUCAACGGUCUGGCAGGGCAGCAGGAGGCUUUCUGGGCUCUGGACUCCACGGAUGCGUGGGCAGAGGAAUGUGGGCUAUGUAGUCAUAAUAAAUUAGGACACA\
) } def
/len { sequence length } bind def

/coor [
[80.57394409 113.51113892]
[78.03781128 108.80821228]
[63.06382751 109.69126892]
[48.08983994 110.57433319]
[33.11585617 111.45739746]
[18.14187241 112.34045410]
[3.16788912 113.22351837]
[-11.80609512 114.10658264]
[-26.78007889 114.98963928]
[-41.75406265 115.87270355]
[-52.22650909 127.40377808]
[-67.42483521 128.08601379]
[-78.35341644 118.03108215]
[-93.32740021 118.91414642]
[-108.30138397 119.79720306]
[-117.46563721 128.92158508]
[-129.98977661 129.32156372]
[-139.11283875 121.32888031]
[-154.10127258 121.91777802]
[-169.08970642 122.50667572]
[-184.07814026 123.09557343]
[-199.06657410 123.68447113]
[-214.05500793 124.27336884]
[-224.75183105 135.59660339]
[-239.96063232 135.98031616]
[-250.68968201 125.71274567]
[-265.67813110 126.30164337]
[-280.66656494 126.89054108]
[-295.65499878 127.47943878]
[-303.62161255 138.37826538]
[-316.23214722 142.62097168]
[-328.79302979 138.86563110]
[-336.76470947 128.70405579]
[-351.76181030 128.99855042]
[-366.75891113 129.29306030]
[-375.52059937 142.09980774]
[-390.14782715 147.27899170]
[-405.01614380 142.83909607]
[-414.40838623 130.48736572]
[-414.71304321 114.97328186]
[-405.81295776 102.26232910]
[-391.13040161 97.24213409]
[-376.31112671 101.84305573]
[-367.05343628 114.29595184]
[-352.05633545 114.00144958]
[-337.05920410 113.70694733]
[-325.95870972 101.10411072]
[-308.84210205 100.38990784]
[-296.24389648 112.49100494]
[-281.25546265 111.90210724]
[-266.26702881 111.31320953]
[-251.27857971 110.72431183]
[-241.38818359 99.64660645]
[-226.19616699 98.83586121]
[-214.64390564 109.28493500]
[-199.65547180 108.69603729]
[-184.66703796 108.10713959]
[-169.67860413 107.51824188]
[-154.69017029 106.92934418]
[-139.70173645 106.34044647]
[-125.41839600 96.18278503]
[-109.18444824 104.82321930]
[-94.21046448 103.94016266]
[-79.23648071 103.05709839]
[-69.56548309 91.78733826]
[-54.39231110 90.67848206]
[-42.63712692 100.89871979]
[-27.66314125 100.01565552]
[-12.68915749 99.13259888]
[2.28482699 98.24953461]
[17.25881195 97.36647034]
[32.23279572 96.48341370]
[47.20677948 95.60034943]
[62.18076324 94.71728516]
[77.15474701 93.83422089]
[93.35372162 77.28988647]
[115.91645813 82.49032593]
[129.00390625 75.16101074]
[142.09133911 67.83168793]
[144.45307922 57.14734650]
[152.16740417 49.70079803]
[162.49536133 47.79794693]
[171.95178223 51.83367157]
[185.31687927 45.02381516]
[198.68197632 38.21395493]
[212.04707336 31.40409851]
[225.41217041 24.59424019]
[234.19555664 11.43510914]
[249.04829407 12.55103302]
[249.95130920 -2.71762133]
[258.32037354 -15.40049648]
[271.82434082 -22.14660454]
[286.79171753 -21.23376656]
[299.20892334 -13.00709152]
[312.57403564 -19.81694984]
[325.93911743 -26.62680626]
[339.30422974 -33.43666458]
[352.66934204 -40.24652100]
[355.56280518 -44.71545792]
[359.50054932 -47.33189392]
[363.58761597 -48.01004791]
[367.02780151 -47.03757095]
[380.77059937 -53.04880142]
[394.51342773 -59.06003571]
[408.25625610 -65.07126617]
[421.99908447 -71.08249664]
[435.74188232 -77.09373474]
[445.02673340 -90.61125946]
[461.35229492 -89.05953217]
[467.92425537 -74.03482819]
[457.98190308 -60.99328232]
[441.75311279 -63.35091400]
[428.01031494 -57.33967972]
[414.26748657 -51.32844925]
[400.52465820 -45.31721497]
[386.78182983 -39.30598450]
[373.03903198 -33.29475021]
[359.47918701 -26.88142395]
[346.11407471 -20.07156563]
[332.74899292 -13.26170921]
[319.38388062 -6.45185137]
[306.01879883 0.35800624]
[305.37564087 15.23926830]
[297.31655884 27.88469124]
[283.92141724 34.84434509]
[268.74151611 34.16026688]
[255.85815430 25.91613197]
[248.03073120 38.58817673]
[232.22203064 37.95933914]
[218.85693359 44.76919556]
[205.49182129 51.57905197]
[192.12672424 58.38891220]
[178.76162720 65.19876862]
[169.50781250 82.14241791]
[149.42065430 80.91912842]
[136.33322144 88.24845123]
[123.24578094 95.57776642]
[122.71011353 106.64627838]
[117.19380188 116.25717163]
[124.26474762 129.48599243]
[131.33570862 142.71481323]
[144.66474915 151.23812866]
[143.84065247 166.10992432]
[150.91160583 179.33874512]
[157.98255920 192.56756592]
[172.18688965 200.76321411]
[171.92083740 217.16021729]
[157.45808411 224.89071655]
[143.67666626 216.00225830]
[144.75373840 199.63851929]
[137.68278503 186.40969849]
[130.61183167 173.18087769]
[117.78855133 165.60375977]
[118.10688019 149.78576660]
[111.03593445 136.55694580]
[103.96498108 123.32812500]
[98.62994385 123.62298584]
[93.36476898 122.71334839]
[88.43791199 120.64559174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[7 70]
[8 69]
[9 68]
[10 67]
[13 64]
[14 63]
[15 62]
[18 60]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[26 52]
[27 51]
[28 50]
[29 49]
[33 46]
[34 45]
[35 44]
[77 137]
[78 136]
[79 135]
[83 133]
[84 132]
[85 131]
[86 130]
[87 129]
[89 127]
[94 122]
[95 121]
[96 120]
[97 119]
[98 118]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
[139 156]
[140 155]
[141 154]
[143 152]
[144 151]
[145 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
