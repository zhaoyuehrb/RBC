%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Sep  9 22:52:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCAGGGCACCCAGAUGUGCUGCUCAAGGGAGCCCCAAGGGCUGGAAGGGGGUUGUGAAACCGAAAUAAACUGCCAAGCCUGGUCUGUCCUCCAGGGUGCA\
) } def
/len { sequence length } bind def

/coor [
[143.00436401 237.75782776]
[136.43785095 224.27149963]
[129.87133789 210.78518677]
[123.30482483 197.29885864]
[116.73831177 183.81254578]
[110.17179108 170.32621765]
[103.60527802 156.83988953]
[97.03876495 143.35357666]
[82.47463226 139.76383972]
[70.39286804 148.65377808]
[58.31110001 157.54370117]
[46.22933578 166.43363953]
[44.09942627 182.09375000]
[31.46958733 191.59442139]
[15.83287048 189.29905701]
[6.46626568 176.56947327]
[8.92681313 160.95790100]
[21.75471306 151.72640991]
[37.33940125 154.35186768]
[49.42116928 145.46194458]
[61.50293350 136.57200623]
[73.58470154 127.68207550]
[65.62776947 109.76052856]
[67.87802124 91.61129761]
[54.59617996 84.64044952]
[41.31433868 77.66960144]
[28.03249741 70.69875336]
[13.11165428 75.17157745]
[-0.25871813 67.91294098]
[-4.43092251 53.66063690]
[-17.71276283 46.68978882]
[-30.99460411 39.71894073]
[-47.82933426 37.71189499]
[-50.56104279 20.97946930]
[-35.23873520 13.72251987]
[-24.02375603 26.43709946]
[-10.74191570 33.40794754]
[2.53992510 40.37879562]
[16.63942719 35.71621704]
[30.20840454 42.59644318]
[35.00334549 57.41691208]
[48.28518677 64.38775635]
[61.56702805 71.35860443]
[74.84886932 78.32945251]
[80.21308899 73.34159851]
[86.54051971 69.65145111]
[93.52313995 67.43863678]
[100.82105255 66.81087494]
[108.07899475 67.79872894]
[114.94365692 70.35410309]
[124.54685211 58.83114243]
[127.43812561 43.27636337]
[141.53005981 38.45282364]
[151.13325500 26.92985916]
[160.73645020 15.40689564]
[170.33964539 3.88393211]
[163.24444580 -9.55953026]
[161.83891296 -24.69534492]
[166.33737183 -39.21541214]
[176.05383301 -50.90552521]
[189.50660706 -57.98302841]
[204.64427185 -59.36865234]
[219.15840149 -54.85110092]
[230.83572388 -45.11926651]
[237.89552307 -31.65718460]
[239.26123047 -16.51772308]
[234.72459412 -2.00954223]
[224.97740173 9.65496731]
[211.50604248 16.69705200]
[196.36480713 18.04284668]
[181.86260986 13.48712444]
[172.25941467 25.01008797]
[162.65621948 36.53305054]
[153.05302429 48.05601501]
[150.84863281 62.78659439]
[136.06980896 68.43433380]
[126.46662140 79.95729828]
[134.00796509 94.40442657]
[133.89483643 111.30742645]
[125.58806610 126.72151947]
[110.52508545 136.78706360]
[117.09159851 150.27337646]
[123.65811157 163.75970459]
[130.22462463 177.24601746]
[136.79115295 190.73234558]
[143.35766602 204.21867371]
[149.92417908 217.70498657]
[156.49069214 231.19131470]
[163.46154785 244.47314453]
[170.83035278 257.53839111]
[178.39566040 270.49084473]
[186.15573120 283.32757568]
[193.91580200 296.16427612]
[207.28433228 306.59112549]
[200.96575928 322.32363892]
[184.09892273 320.60717773]
[181.07908630 303.92434692]
[173.31901550 291.08764648]
[165.55894470 278.25091553]
[159.30076599 274.08581543]
[157.76512146 264.90722656]
[150.39630127 251.84196472]
[145.96112061 249.69023132]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 88]
[2 87]
[3 86]
[4 85]
[5 84]
[6 83]
[7 82]
[8 81]
[9 22]
[10 21]
[11 20]
[12 19]
[24 44]
[25 43]
[26 42]
[27 41]
[30 38]
[31 37]
[32 36]
[50 77]
[51 76]
[53 74]
[54 73]
[55 72]
[56 71]
[89 102]
[90 101]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
