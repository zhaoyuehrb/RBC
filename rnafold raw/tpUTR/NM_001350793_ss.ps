%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 14:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGGCUUGCAGGUGCUGAUGCCAGAAGCUUCUGUGCCAUUGCAUUAAAGACUUGUCAUUUGAUCCAUGUUCAAGACCCUUGAGGUAUUGUUUCAUCAUUUCUGUAUUGUCUUUCAAUAAAGAAAACAAACAUGUGCAACCAGAA\
) } def
/len { sequence length } bind def

/coor [
[56.52844620 349.67080688]
[46.45160294 337.98916626]
[44.31262207 322.71081543]
[50.79404449 308.71099854]
[63.82767105 300.45703125]
[63.82767105 285.45703125]
[60.65997696 278.72048950]
[63.99137878 270.13732910]
[64.31192780 255.14076233]
[64.63246918 240.14418030]
[64.95301819 225.14761353]
[65.27356720 210.15103149]
[57.81000900 197.26132202]
[65.84044647 183.62965393]
[66.16099548 168.63307190]
[66.48154449 153.63650513]
[53.10917664 146.84092712]
[41.18452454 155.94052124]
[29.25987244 165.04013062]
[23.44651985 180.37429810]
[7.21882391 182.73945618]
[-2.72955298 169.70251465]
[3.83542633 154.67475891]
[20.16027451 153.11547852]
[32.08492661 144.01586914]
[44.00957870 134.91627502]
[40.51568985 120.32885742]
[25.76250267 117.61897278]
[11.00931740 114.90908051]
[-3.77198291 112.35699463]
[-18.57971001 109.96298981]
[-33.38743591 107.56899261]
[-46.11662292 116.54705048]
[-61.09966278 113.90825653]
[-69.58042145 101.71759033]
[-84.38814545 99.32359314]
[-99.19587708 96.92959595]
[-114.00360107 94.53559875]
[-129.13165283 100.86601257]
[-142.01225281 90.71603394]
[-139.39495850 74.52709198]
[-123.97220612 68.95298767]
[-111.60960388 79.72786713]
[-96.80187988 82.12187195]
[-81.99414825 84.51586914]
[-67.18642426 86.90986633]
[-55.29632950 78.01260376]
[-40.24508667 80.22951508]
[-30.99343872 92.76126862]
[-16.18571091 95.15526581]
[-1.37798440 97.54926300]
[5.77777433 95.49732208]
[13.71920681 100.15589142]
[28.47239304 102.86578369]
[43.22557831 105.57567596]
[44.88577271 91.57679749]
[49.86397171 78.73128510]
[57.69878387 67.79155731]
[67.76730347 59.35554123]
[79.33219910 53.83455276]
[91.59445953 51.43471146]
[103.74797821 52.15261459]
[107.24186707 37.56519699]
[110.73575592 22.97778130]
[102.73405457 9.61325550]
[106.48515320 -5.13068867]
[119.27549744 -12.67672634]
[122.76938629 -27.26414490]
[112.24542236 -42.95046997]
[116.38584137 -61.05514145]
[132.13420105 -70.28665161]
[135.00158691 -85.01004028]
[137.86895752 -99.73342896]
[140.73634338 -114.45681763]
[143.60372925 -129.18020630]
[146.47109985 -143.90359497]
[143.56405640 -160.60644531]
[158.80940247 -168.02369690]
[170.15711975 -155.42744446]
[161.19448853 -141.03620911]
[158.32711792 -126.31282043]
[155.45973206 -111.58943939]
[152.59234619 -96.86605072]
[149.72497559 -82.14266205]
[146.85758972 -67.41927338]
[155.18511963 -59.50043106]
[158.66088867 -48.42095184]
[156.30053711 -36.92863846]
[148.58256531 -27.93334198]
[137.35681152 -23.77025795]
[133.86291504 -9.18283939]
[141.84675598 3.33890009]
[138.51126099 18.18238831]
[125.32317352 26.47166824]
[121.82928467 41.05908585]
[118.33539581 55.64650345]
[130.06074524 62.58648682]
[139.36331177 72.54186249]
[145.49333191 84.71025848]
[147.95675659 98.11095428]
[162.85325623 99.87004089]
[177.74975586 101.62911987]
[192.64625549 103.38819885]
[207.54275513 105.14728546]
[222.15507507 99.08174896]
[233.88714600 108.25820923]
[248.78364563 110.01729584]
[263.68014526 111.77637482]
[278.57662964 113.53545380]
[293.47314453 115.29454041]
[306.90914917 106.52794647]
[322.09451294 111.70335388]
[327.38027954 126.85063934]
[318.71170044 140.35008240]
[302.73855591 141.84608459]
[291.71405029 130.19104004]
[276.81756592 128.43194580]
[261.92105103 126.67287445]
[247.02456665 124.91378784]
[232.12806702 123.15470886]
[218.58125305 129.34606934]
[205.78367615 120.04377747]
[190.88717651 118.28469849]
[175.99067688 116.52561951]
[161.09417725 114.76653290]
[146.19767761 113.00745392]
[142.31526184 125.68957520]
[134.92083740 137.18522644]
[124.38504028 146.51664734]
[111.35118103 152.82383728]
[96.69743347 155.44033813]
[81.47811890 153.95704651]
[81.15756989 168.95362854]
[80.83702087 183.95019531]
[88.27764893 197.91256714]
[80.27014160 210.47158813]
[79.94959259 225.46815491]
[79.62904358 240.46473694]
[79.30850220 255.46130371]
[78.98795319 270.45788574]
[78.82767487 285.45703125]
[78.82767487 300.45703125]
[91.86129761 308.71099854]
[98.34272003 322.71081543]
[96.20374298 337.98916626]
[86.12689209 349.67080688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 142]
[6 141]
[8 140]
[9 139]
[10 138]
[11 137]
[12 136]
[14 134]
[15 133]
[16 132]
[17 26]
[18 25]
[19 24]
[27 55]
[28 54]
[29 53]
[30 51]
[31 50]
[32 49]
[35 46]
[36 45]
[37 44]
[38 43]
[62 96]
[63 95]
[64 94]
[67 91]
[68 90]
[71 85]
[72 84]
[73 83]
[74 82]
[75 81]
[76 80]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
