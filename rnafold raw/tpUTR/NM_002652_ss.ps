%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 19:06:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGAAGCCCUGUCUGUUUGCCACACCCAGGUGAUUUCCUCUAAAGAAACUUGGCUGGAAUUUCUGCUGUGGUCUAUAAAAUAAACUUCUUAACAUGCUU\
) } def
/len { sequence length } bind def

/coor [
[165.49487305 401.68771362]
[176.88720703 391.53005981]
[172.70233154 377.12564087]
[168.51747131 362.72125244]
[164.33259583 348.31683350]
[160.14773560 333.91244507]
[145.23364258 332.98773193]
[131.51007080 327.00503540]
[120.64109039 316.66870117]
[113.95180511 303.21231079]
[112.26686859 288.25131226]
[115.80881500 273.58929443]
[124.16890717 261.00036621]
[136.35423279 252.01464844]
[132.16935730 237.61024475]
[127.98449707 223.20584106]
[114.84918213 216.27769470]
[110.39993286 201.72920227]
[117.75585938 187.99864197]
[113.57099152 173.59423828]
[109.38612366 159.18983459]
[105.20126343 144.78543091]
[101.01639557 130.38102722]
[96.83152771 115.97662354]
[86.90035248 109.67940521]
[83.79736328 98.33679199]
[89.13999939 87.86112976]
[85.40965271 73.33238220]
[81.67930603 58.80363846]
[77.94895172 44.27489090]
[66.53871918 40.23858261]
[58.63896942 31.22946548]
[56.17832184 19.62645912]
[59.66949081 8.41754246]
[68.10784149 0.43035409]
[65.29711914 -14.30395508]
[62.48640442 -29.03826332]
[59.67568207 -43.77257156]
[47.32277298 -57.31487274]
[53.51746368 -73.65120697]
[50.24531174 -88.28995514]
[46.97316360 -102.92871094]
[43.70101547 -117.56745911]
[30.22439575 -125.82314301]
[26.61392212 -141.20950317]
[35.01162338 -154.59808350]
[50.43529510 -158.04568481]
[63.73434448 -149.50689697]
[67.01868439 -134.04763794]
[58.33976746 -120.83960724]
[61.61191559 -106.20085907]
[64.88406372 -91.56210327]
[68.15621185 -76.92335510]
[78.27401733 -70.08963013]
[81.04007721 -57.78402328]
[74.40998840 -46.58329010]
[77.22071075 -31.84898376]
[80.03143311 -17.11467361]
[82.84214783 -2.38036561]
[98.52184296 6.80649233]
[102.75738525 24.80196571]
[92.47769928 40.54454422]
[96.20805359 55.07329178]
[99.93840027 69.60203552]
[103.66874695 84.13078308]
[115.71049500 95.70209503]
[111.23593140 111.79175568]
[115.42079926 126.19615936]
[119.60566711 140.60057068]
[123.79053497 155.00497437]
[127.97539520 169.40937805]
[132.16026306 183.81378174]
[145.72827148 191.46536255]
[149.76713562 206.13310242]
[142.38890076 219.02096558]
[146.57376099 233.42538452]
[150.75863647 247.82978821]
[165.86183167 248.88746643]
[179.66596985 255.03707886]
[190.51283264 265.51876831]
[197.10668945 279.05355835]
[198.66905212 293.99948120]
[195.03054810 308.55062866]
[186.64904785 320.95544434]
[174.55213928 329.72756958]
[178.73701477 344.13198853]
[182.92187500 358.53637695]
[187.10673523 372.94079590]
[191.29161072 387.34518433]
[206.35319519 389.81726074]
[218.84570312 398.58651733]
[226.28872681 411.91186523]
[227.20445251 427.14749146]
[221.41104126 441.26837158]
[210.05880737 451.47079468]
[195.40173340 455.72906494]
[180.34999084 453.19769287]
[167.89212036 444.37930298]
[160.50163269 431.02478027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[14 77]
[15 76]
[16 75]
[19 72]
[20 71]
[21 70]
[22 69]
[23 68]
[24 67]
[27 65]
[28 64]
[29 63]
[30 62]
[35 59]
[36 58]
[37 57]
[38 56]
[40 53]
[41 52]
[42 51]
[43 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
