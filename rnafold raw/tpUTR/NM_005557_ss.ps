%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:12:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUGAGCUGCCUCUACCACAGCCUCCUGCCCACCAGCUGGCCUCACCUCCUGAAGGCCCGGGUCAGGACCCUGCUCUCCUGGCGCAGUUCCCAGCUAUCUCCCCUGCUCCUCUGCUGGUGGUGGGCUAAUAAAGCUGACUUUCUGGUUGAUGCAA\
) } def
/len { sequence length } bind def

/coor [
[142.64022827 526.25885010]
[133.20426941 538.37731934]
[118.96720886 544.13940430]
[103.75874329 541.99511719]
[91.66986847 532.52124023]
[85.95243073 518.26617432]
[88.14440155 503.06448364]
[97.65614319 491.00537109]
[111.92904663 485.33264160]
[114.02324677 470.47955322]
[116.11744690 455.62646484]
[110.23282623 441.94363403]
[119.82103729 429.35882568]
[121.91523743 414.50573730]
[116.03061676 400.82290649]
[125.61882782 388.23809814]
[127.71302795 373.38500977]
[129.80723572 358.53192139]
[131.90142822 343.67883301]
[133.10075378 328.72686768]
[133.40089417 313.72985840]
[133.70101929 298.73284912]
[134.00115967 283.73587036]
[118.74933624 276.57714844]
[108.10458374 263.44647217]
[104.23042297 246.93638611]
[107.94744110 230.33372498]
[118.56005096 216.96528625]
[133.98605347 209.53118896]
[133.68591309 194.53417969]
[133.38578796 179.53718567]
[133.08564758 164.54019165]
[132.78552246 149.54319763]
[132.48539734 134.54620361]
[132.18525696 119.54920197]
[131.88513184 104.55220032]
[118.33369446 123.67022705]
[96.93662262 127.50148010]
[80.40640259 116.16817474]
[76.93939972 98.14994812]
[63.18383408 92.16794586]
[49.42826462 86.18595123]
[35.67269516 80.20394897]
[21.91712761 74.22194672]
[8.10239887 68.37786865]
[-5.77010870 62.67229843]
[-21.07053566 67.49686432]
[-34.30123901 58.42338562]
[-35.31275177 42.41225052]
[-23.32913208 31.74583817]
[-7.54318476 34.60650253]
[-0.06453832 48.79978943]
[13.80796909 54.50535965]
[21.23182869 54.13904572]
[27.89912796 60.46637726]
[41.65469742 66.44837952]
[55.41026688 72.43038177]
[69.16583252 78.41237640]
[82.92140198 84.39437866]
[91.07556915 73.80706024]
[105.56552887 68.27605438]
[95.23957825 56.28918076]
[100.29270172 42.27792740]
[97.31117249 27.57723236]
[94.32964325 12.87653542]
[91.34811401 -1.82416058]
[88.36657715 -16.52485657]
[85.38504791 -31.22555351]
[82.40351868 -45.92625046]
[68.23212433 -52.24695969]
[60.51163864 -65.70703888]
[62.21073532 -81.13080597]
[72.67607880 -92.58751678]
[87.88353729 -95.67182922]
[101.98551941 -89.19775391]
[109.55953979 -75.65471649]
[107.69322205 -60.25028610]
[97.10420990 -48.90777969]
[100.08574677 -34.20708466]
[103.06727600 -19.50638771]
[106.04880524 -4.80569172]
[109.03033447 9.89500427]
[112.01187134 24.59570122]
[114.99340057 39.29639816]
[125.10609436 50.23178101]
[120.26622772 65.29452515]
[127.05115509 68.49058533]
[128.93728638 53.60964203]
[143.67279053 50.80518723]
[150.89334106 63.95294571]
[140.62100220 74.88270569]
[147.40592957 78.07876587]
[160.63916016 71.01609039]
[173.87240601 63.95341110]
[187.10563660 56.89073181]
[200.33888245 49.82805634]
[197.67079163 34.93723679]
[199.73681641 19.95101738]
[206.33453369 6.33759689]
[216.81758118 -4.56932163]
[230.15893555 -11.70118999]
[245.05154419 -14.35929966]
[260.03637695 -12.28323650]
[273.64535522 -5.67639256]
[284.54525757 4.81396198]
[291.66818237 18.16008949]
[294.31631470 33.05447006]
[292.23022461 48.03790665]
[285.61425781 61.64247131]
[275.11657715 72.53533173]
[261.76568604 79.64931488]
[246.86953735 82.28746796]
[231.88751221 80.19132233]
[218.28738403 73.56624603]
[207.40155029 63.06129456]
[194.16831970 70.12397003]
[180.93507385 77.18664551]
[167.70184326 84.24932861]
[154.46859741 91.31200409]
[146.88212585 104.25206757]
[147.18225098 119.24906921]
[147.48239136 134.24606323]
[147.78251648 149.24305725]
[148.08265686 164.24005127]
[148.38278198 179.23706055]
[148.68292236 194.23405457]
[148.98304749 209.23104858]
[161.41725159 213.87680054]
[171.49694824 222.46414185]
[178.02754211 233.94660950]
[180.24482727 246.93638611]
[177.90444946 259.87197876]
[171.30854797 271.20602417]
[161.26704407 279.59027100]
[148.99815369 284.03601074]
[148.69801331 299.03298950]
[148.39788818 314.02999878]
[148.09774780 329.02697754]
[159.87052917 319.73171997]
[174.78834534 321.29971313]
[184.37117004 332.83963013]
[183.17161560 347.79159546]
[171.87159729 357.65612793]
[156.89459229 356.82574463]
[146.75451660 345.77304077]
[144.66032410 360.62612915]
[142.56611633 375.47921753]
[140.47192383 390.33230591]
[146.20675659 405.07754517]
[136.76832581 416.59994507]
[134.67413330 431.45303345]
[140.40896606 446.19827271]
[130.97053528 457.72067261]
[128.87634277 472.57376099]
[126.78213501 487.42684937]
[138.93016052 496.82476807]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 155]
[10 154]
[11 153]
[13 151]
[14 150]
[16 148]
[17 147]
[18 146]
[19 145]
[20 138]
[21 137]
[22 136]
[23 135]
[29 127]
[30 126]
[31 125]
[32 124]
[33 123]
[34 122]
[35 121]
[36 120]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 53]
[46 52]
[61 86]
[63 84]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
[92 119]
[93 118]
[94 117]
[95 116]
[96 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
