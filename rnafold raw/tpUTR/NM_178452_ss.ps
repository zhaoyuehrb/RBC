%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 21:55:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCCCCAGUUAUAUGUAGCAUAAAUGGUUUAAUCAUAAAUGUCUCCCUUAGGCAUGAUAAACAUUUUAACACCCACG\
) } def
/len { sequence length } bind def

/coor [
[120.83950806 250.95329285]
[106.37767029 254.93515015]
[91.38179779 254.58319092]
[77.12269592 249.92721558]
[64.80873108 241.36180115]
[55.48342896 229.61280823]
[49.93704987 215.67590332]
[48.63961411 200.73211670]
[51.70106506 186.04785156]
[58.86431885 172.86437988]
[44.79144669 178.05613708]
[30.71857643 183.24789429]
[16.64570808 188.43965149]
[6.58117104 201.38713074]
[-9.62473011 198.87698364]
[-15.30075550 183.49145508]
[-4.60789537 171.05783081]
[11.45395088 174.36677551]
[25.52682114 169.17501831]
[39.59968948 163.98326111]
[53.67256165 158.79151917]
[57.06839752 153.86149597]
[62.88601303 150.92248535]
[70.21533203 137.83503723]
[77.54464722 124.74760437]
[84.87397003 111.66016388]
[81.04204559 97.68652344]
[88.12193298 85.04447174]
[102.03858948 81.01052094]
[109.36791229 67.92308044]
[116.69722748 54.83563995]
[124.02655029 41.74819946]
[131.35586548 28.66075897]
[132.89079285 19.37860870]
[139.23857117 15.21158218]
[147.07604980 2.42198014]
[154.91352844 -10.36762238]
[154.80824280 -15.34398270]
[156.30917358 -19.56816101]
[158.92398071 -22.59033966]
[162.05880737 -24.19377899]
[165.11381531 -24.40711975]
[174.85552979 -35.81320953]
[184.59725952 -47.21929932]
[194.33897400 -58.62538910]
[204.08070374 -70.03147888]
[204.26048279 -86.07352448]
[217.00280762 -95.82096863]
[232.53285217 -91.79640198]
[238.93730164 -77.08713531]
[231.30320740 -62.97685242]
[215.48678589 -60.28975677]
[205.74507141 -48.88366699]
[196.00334167 -37.47757721]
[186.26162720 -26.07148743]
[176.51989746 -14.66539860]
[167.70312500 -2.53014374]
[159.86564636 10.25945854]
[152.02816772 23.04906082]
[144.44331360 35.99007797]
[137.11398315 49.07751846]
[129.78466797 62.16495895]
[122.45535278 75.25239563]
[115.12602997 88.33983612]
[118.95795441 102.31347656]
[111.87806702 114.95552826]
[97.96141052 118.98947906]
[90.63208771 132.07691956]
[83.30277252 145.16436768]
[75.97344971 158.25180054]
[90.11135101 153.23985291]
[105.09368896 152.51206970]
[119.65080261 156.13015747]
[132.54907227 163.78749084]
[142.69544983 174.83515930]
[149.23010254 188.33694458]
[151.59925842 203.14866638]
[149.60214233 218.01512146]
[143.40800476 231.67648315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 21]
[11 20]
[12 19]
[13 18]
[23 70]
[24 69]
[25 68]
[26 67]
[29 64]
[30 63]
[31 62]
[32 61]
[33 60]
[35 59]
[36 58]
[37 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
