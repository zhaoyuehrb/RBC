%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:11:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCACCCCCAGGACAGCACACGGUGAGGGUGCGGGGCCUGCAGGCCAGUCCCACGGCUCUGUGCCCGGUGCCAUCUUCCAUAUCCGGGUGCUCAAUAAACUUGUGCCUCCAAUGUGGUA\
) } def
/len { sequence length } bind def

/coor [
[172.97583008 133.47058105]
[158.83619690 128.46348572]
[144.69657898 123.45637512]
[130.55696106 118.44927216]
[116.41733551 113.44216919]
[102.27770996 108.43506622]
[99.31398010 109.60491943]
[95.84130096 109.66484070]
[92.29214478 108.41806793]
[89.16741943 105.83892059]
[86.96895599 102.09397125]
[73.43017578 95.63630676]
[67.97869873 96.08086395]
[63.40576553 94.47399902]
[60.36399460 91.52547455]
[59.11302567 88.10369110]
[46.12264633 80.60369110]
[33.13226318 73.10369110]
[20.14188385 65.60369110]
[7.15150309 58.10369110]
[-8.66844654 57.90430450]
[-15.82193756 44.83996964]
[-28.81231880 37.33996964]
[-41.80270004 29.83996964]
[-58.54779816 34.69302750]
[-73.36182404 26.15555763]
[-77.39583588 9.88627434]
[-90.57809448 2.72889280]
[-103.76035309 -4.42848873]
[-112.91844177 -5.80471134]
[-117.19040680 -11.94968319]
[-130.18078613 -19.44968224]
[-142.90086365 -16.87165070]
[-153.59794617 -23.48475266]
[-156.76679993 -35.23881149]
[-169.55639648 -43.07629013]
[-182.34599304 -50.91376877]
[-195.13560486 -58.75124741]
[-211.53436279 -58.63939285]
[-219.59608459 -72.92017365]
[-211.02755737 -86.90274048]
[-194.64334106 -86.20303345]
[-187.29812622 -71.54084778]
[-174.50851440 -63.70336914]
[-161.71891785 -55.86589050]
[-148.92932129 -48.02841187]
[-131.44157410 -48.57147217]
[-122.68079376 -32.44006348]
[-109.69040680 -24.94006348]
[-96.60296631 -17.61074448]
[-83.42071533 -10.45336437]
[-70.23845673 -3.29598260]
[-58.44528580 -8.66227436]
[-45.52931976 -6.18152809]
[-36.29288864 3.45388317]
[-34.30270004 16.84958839]
[-21.31231880 24.34958839]
[-8.32193756 31.84958839]
[6.56885338 31.51252556]
[14.65150261 45.11331177]
[27.64188385 52.61331177]
[40.63226318 60.11331177]
[53.62264633 67.61331177]
[66.61302948 75.11331177]
[79.88784027 82.09752655]
[93.42662048 88.55519867]
[107.28481293 94.29544830]
[121.42443848 99.30255127]
[135.56405640 104.30965424]
[149.70367432 109.31675720]
[163.84330750 114.32386017]
[177.98292542 119.33096313]
[187.37617493 110.87123108]
[199.41983032 107.27687836]
[211.76957703 109.18253326]
[222.04931641 116.15852356]
[228.30825806 126.80573273]
[229.39106750 139.03585815]
[243.24926758 144.77610779]
[257.10745239 150.51635742]
[270.96563721 156.25660706]
[284.82385254 161.99685669]
[298.68203735 167.73710632]
[313.13687134 161.93232727]
[327.10928345 167.95117188]
[332.55416870 181.76741028]
[346.41238403 187.50765991]
[360.27056885 193.24790955]
[369.52233887 193.65931702]
[374.41323853 199.32408142]
[388.11642456 205.42514038]
[403.87054443 203.96978760]
[412.35043335 216.21481323]
[426.05361938 222.31587219]
[439.75680542 228.41691589]
[455.18930054 224.03311157]
[468.15435791 233.48228455]
[468.70629883 249.51583862]
[456.42172241 259.83419800]
[440.72430420 256.52200317]
[433.65576172 242.12010193]
[419.95257568 236.01904297]
[406.24938965 229.91799927]
[391.47540283 231.80972290]
[382.01535034 219.12831116]
[368.31219482 213.02726746]
[354.53030396 207.10610962]
[340.67211914 201.36585999]
[326.81393433 195.62561035]
[313.19424438 201.54504395]
[299.05828857 195.92102051]
[292.94177246 181.59530640]
[279.08358765 175.85505676]
[265.22540283 170.11480713]
[251.36720276 164.37455750]
[237.50901794 158.63430786]
[223.65081787 152.89404297]
[209.15351868 162.80560303]
[191.44961548 162.11784363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[11 66]
[12 65]
[16 64]
[17 63]
[18 62]
[19 61]
[20 60]
[22 58]
[23 57]
[24 56]
[27 52]
[28 51]
[29 50]
[31 49]
[32 48]
[35 46]
[36 45]
[37 44]
[38 43]
[78 117]
[79 116]
[80 115]
[81 114]
[82 113]
[83 112]
[86 109]
[87 108]
[88 107]
[90 106]
[91 105]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
