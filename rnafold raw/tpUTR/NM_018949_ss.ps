%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 22:01:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACGCGGAGGGGCGGCUGGAGUCCAGGCGGGGACGCGCCCCAAAGCCCCAGCCACUCCCGGGAGCCCCCCCAACUCCCAAAUCACAGGCCC\
) } def
/len { sequence length } bind def

/coor [
[152.45375061 353.38101196]
[149.43449402 338.62640381]
[149.65806580 323.56771851]
[153.11402893 308.90927124]
[159.64074707 295.33663940]
[168.93293762 283.48464966]
[180.55598450 273.90768433]
[173.72357178 260.55410767]
[161.03831482 252.74809265]
[161.64045715 236.93833923]
[154.80802917 223.58476257]
[147.97561646 210.23118591]
[141.14318848 196.87760925]
[134.31076050 183.52403259]
[120.10259247 179.20391846]
[112.98332214 165.75883484]
[117.61099243 150.88528442]
[110.77856445 137.53170776]
[103.94614410 124.17812347]
[97.11372375 110.82454681]
[90.05673981 97.58827209]
[82.77721405 84.47307587]
[75.49768066 71.35787201]
[70.64656067 68.47684479]
[67.81188202 64.37239075]
[67.11547852 60.08197021]
[68.22260284 56.52661514]
[62.30726624 42.74224854]
[56.39192581 28.95788193]
[50.24462128 15.27538681]
[43.86710358 1.69866955]
[37.48958588 -11.87804794]
[31.11206818 -25.45476532]
[24.49618530 -32.05662537]
[24.75711250 -39.59944153]
[9.49618816 -41.33142090]
[-2.84462166 -50.47472382]
[-8.94570255 -64.56984711]
[-7.16589260 -79.82526398]
[2.01604700 -92.13735199]
[16.13022041 -98.19422150]
[31.37998772 -96.36660767]
[43.66323471 -87.14611816]
[49.67583466 -73.01303101]
[47.80042267 -57.76906586]
[38.54148102 -45.51477814]
[44.68878555 -31.83228302]
[51.06630325 -18.25556564]
[57.44382095 -4.67884874]
[63.82133865 8.89786911]
[69.63399506 13.71193027]
[70.17629242 23.04254341]
[76.09162903 36.82691193]
[82.00697327 50.61127853]
[88.61288452 64.07834625]
[95.89241028 77.19354248]
[103.17194366 90.30874634]
[109.65759277 95.39352417]
[110.46730042 103.99212646]
[117.29972076 117.34570312]
[124.13214111 130.69927979]
[130.96456909 144.05285645]
[145.73439026 149.00158691]
[152.47322083 162.64134216]
[147.66433716 176.69161987]
[154.49676514 190.04519653]
[161.32919312 203.39877319]
[168.16160583 216.75234985]
[174.99403381 230.10592651]
[188.16798401 238.86706543]
[187.07714844 253.72167969]
[193.90956116 267.07525635]
[208.47653198 263.25198364]
[223.52485657 262.65002441]
[238.35066223 265.29751587]
[252.26055908 271.07064819]
[264.60391235 279.69940186]
[274.80346680 290.78018188]
[282.38208008 303.79473877]
[286.98538208 318.13430786]
[288.39801025 333.12826538]
[286.55389404 348.07528687]
[281.53930664 362.27627563]
[273.58877563 375.06701660]
[263.07415771 385.84927368]
[250.48727417 394.11874390]
[236.41679382 399.48864746]
[221.52084351 401.70782471]
[206.49612427 400.67245483]
[192.04537964 396.43103027]
[178.84448242 389.18185425]
[167.51087952 379.26400757]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 72]
[8 71]
[10 69]
[11 68]
[12 67]
[13 66]
[14 65]
[17 62]
[18 61]
[19 60]
[20 59]
[21 57]
[22 56]
[23 55]
[27 54]
[28 53]
[29 52]
[30 50]
[31 49]
[32 48]
[33 47]
[35 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
