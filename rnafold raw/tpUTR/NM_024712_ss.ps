%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 09:33:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUGUGGCUGGCCAUGGGCCACAGCUGCGGCCACUGCAGCAGCCAUGAAGGGCAGUGGGUAGAGGAGUGCAGGCACCCUGACCAGCAGAGAUUGCUGCAGAAAUAAAGUCUGCUUGGCUCUUGGGAUAUGUUGAGCCAGCUCUGUA\
) } def
/len { sequence length } bind def

/coor [
[24.35148239 207.01100159]
[16.23358154 208.82707214]
[7.97700405 208.14599609]
[0.32932672 205.04975891]
[-6.02305031 199.83802795]
[-19.41693878 206.59107971]
[-32.81082535 213.34413147]
[-46.20471573 220.09718323]
[-59.59860229 226.85025024]
[-72.99249268 233.60330200]
[-84.66302490 243.02659607]
[-94.08632660 254.69714355]
[-103.50962830 266.36767578]
[-112.93292236 278.03820801]
[-118.17911530 294.16006470]
[-135.12319946 293.58184814]
[-139.25819397 277.13989258]
[-124.60346222 268.61489868]
[-115.18016052 256.94436646]
[-105.75685883 245.27383423]
[-96.33356476 233.60330200]
[-100.12942505 227.13481140]
[-115.12905121 227.24096680]
[-107.72115326 214.19781494]
[-111.51701355 207.72932434]
[-126.30125427 210.26434326]
[-141.08549500 212.79934692]
[-155.86973572 215.33436584]
[-170.65397644 217.86936951]
[-185.43821716 220.40438843]
[-200.22244263 222.93939209]
[-214.81192017 231.57559204]
[-227.14936829 219.94702148]
[-219.39059448 204.87261963]
[-202.75746155 208.15515137]
[-187.97322083 205.62014771]
[-173.18898010 203.08512878]
[-158.40473938 200.55012512]
[-143.62049866 198.01510620]
[-128.83627319 195.48010254]
[-114.05203247 192.94508362]
[-79.74554443 220.20941162]
[-66.35166168 213.45635986]
[-52.95777130 206.70330811]
[-39.56388092 199.95024109]
[-26.16999435 193.19718933]
[-12.77610683 186.44413757]
[-8.23368740 165.02864075]
[10.78039837 153.64344788]
[32.32194138 159.90180969]
[44.74958420 151.50218201]
[57.17723083 143.10256958]
[69.60487366 134.70294189]
[82.03251648 126.30332184]
[70.24990845 116.42550659]
[63.91294479 101.35106659]
[65.23390198 84.07138824]
[74.80013275 68.46057129]
[91.26184082 58.40858459]
[89.67280579 43.49298859]
[88.08377075 28.57739449]
[78.53009796 19.84475136]
[77.54790497 7.34162664]
[85.12044525 -2.14699388]
[83.84835815 -17.09295654]
[82.57627106 -32.03891754]
[78.70713806 -40.39168167]
[81.43924713 -47.31505966]
[80.48468018 -62.28465652]
[79.53010559 -77.25424957]
[69.99788666 -90.59849548]
[77.03359222 -105.41168976]
[93.39949799 -106.45529938]
[102.25976562 -92.65573883]
[94.49970245 -78.20882416]
[95.45426941 -63.23922348]
[96.40884399 -48.26963043]
[97.52223206 -33.31100845]
[98.79431915 -18.36504555]
[100.06640625 -3.41908264]
[110.86698151 10.37506008]
[102.99936676 26.98835754]
[104.58840179 41.90395355]
[106.17743683 56.81954575]
[120.47251129 61.36386108]
[130.38262939 50.10377884]
[140.29275513 38.84369278]
[150.20288086 27.58360863]
[150.62100220 11.54600525]
[163.50674438 1.98896706]
[178.97528076 6.24383593]
[185.16047668 21.04664040]
[177.31756592 35.04193497]
[161.46296692 37.49372864]
[151.55284119 48.75381470]
[141.64271545 60.01390076]
[131.73260498 71.27398682]
[139.32432556 84.21097565]
[153.98765564 81.05078125]
[168.65098572 77.89059448]
[183.31431580 74.73040771]
[197.97764587 71.57021332]
[205.11944580 57.65876389]
[219.55249023 51.64031982]
[234.46189880 56.35661316]
[242.80792236 69.58074951]
[240.64982605 85.06870270]
[229.00659180 95.50753021]
[213.37579346 95.96833801]
[201.13783264 86.23354340]
[186.47450256 89.39373779]
[171.81117249 92.55392456]
[157.14784241 95.71411133]
[142.48451233 98.87429810]
[132.15925598 118.65210724]
[115.07991791 128.05871582]
[126.54780579 137.72760010]
[138.01570129 147.39648438]
[149.48359680 157.06538391]
[160.95149231 166.73426819]
[172.41938782 176.40315247]
[186.32540894 170.11148071]
[201.58395386 170.48507690]
[215.16542053 177.44973755]
[224.37319946 189.62265015]
[227.37907410 204.58685303]
[223.58622742 219.37121582]
[213.74772644 231.04026794]
[199.81703186 237.27711487]
[184.56007385 236.84344482]
[171.00614929 229.82534790]
[161.84637451 217.61627197]
[158.89945984 202.64035034]
[162.75048828 187.87104797]
[151.28260803 178.20216370]
[139.81471252 168.53326416]
[128.34681702 158.86437988]
[116.87892151 149.19549561]
[105.41102600 139.52661133]
[90.43214417 138.73097229]
[78.00449371 147.13058472]
[65.57685089 155.53021240]
[53.14920807 163.92984009]
[40.72156143 172.32945251]
[42.08417511 180.70762634]
[40.89472580 189.07785034]
[37.28116226 196.68342590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 21]
[12 20]
[13 19]
[14 18]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[50 144]
[51 143]
[52 142]
[53 141]
[54 140]
[59 84]
[60 83]
[61 82]
[64 80]
[65 79]
[66 78]
[68 77]
[69 76]
[70 75]
[85 97]
[86 96]
[87 95]
[88 94]
[98 114]
[99 113]
[100 112]
[101 111]
[102 110]
[116 139]
[117 138]
[118 137]
[119 136]
[120 135]
[121 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
