%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 05:46:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGCCGCCGCCGCCGCCGGAGCCUGUCGCCGUCCUGUCCCCAGCCUGCUUGUGUCCCGUGAGGUUGUCAAUAAACCUGCCCUCGGGCUGCCGCCUCCCA\
) } def
/len { sequence length } bind def

/coor [
[79.73411560 194.16236877]
[73.18680573 193.84928894]
[65.68680573 206.83966064]
[65.48741913 222.65962219]
[52.42308044 229.81311035]
[44.92308044 242.80348206]
[45.46416855 259.19369507]
[31.39931107 267.62649536]
[17.19723320 259.42691040]
[17.46781158 243.02999878]
[31.93270111 235.30348206]
[39.43270111 222.31311035]
[39.09563828 207.42231750]
[52.69642258 199.33966064]
[60.19642258 186.34928894]
[56.42373657 162.83668518]
[76.56425476 148.92883301]
[81.11154938 134.63470459]
[77.59665680 120.16075897]
[89.15341187 109.35558319]
[86.35011292 95.65766144]
[96.55245972 86.09712982]
[101.09974670 71.80300140]
[105.64704132 57.50886917]
[110.19432831 43.21473694]
[114.74161530 28.92060852]
[119.28890991 14.62647820]
[110.96518707 -0.66453141]
[116.09169769 -16.95106506]
[131.07292175 -24.41789818]
[135.17785645 -38.84528351]
[122.10613251 -46.34298706]
[111.21539307 -56.74510193]
[103.13569641 -69.44382477]
[98.33303833 -83.69867706]
[97.08248901 -98.67964935]
[99.45240021 -113.51556396]
[105.30072784 -127.34471130]
[114.28353119 -139.36491394]
[125.87516022 -148.88005066]
[139.39906311 -155.34039307]
[154.06723022 -158.37432861]
[169.02616882 -157.80972290]
[173.13110352 -172.23710632]
[177.23605347 -186.66448975]
[181.34100342 -201.09187317]
[185.44593811 -215.51925659]
[189.55088806 -229.94664001]
[193.43316650 -244.43553162]
[197.09187317 -258.98248291]
[186.46516418 -270.16625977]
[183.59423828 -285.32412720]
[189.39521790 -299.61929321]
[202.01702881 -308.49023438]
[217.43209839 -309.10626221]
[230.72151184 -301.27078247]
[237.64469910 -287.48406982]
[235.99247742 -272.14544678]
[226.29206848 -260.14938354]
[211.63883972 -255.32377625]
[207.98013306 -240.77682495]
[209.42630005 -233.39469910]
[203.97827148 -225.84170532]
[199.87332153 -211.41432190]
[195.76838684 -196.98693848]
[191.66343689 -182.55953979]
[187.55848694 -168.13215637]
[183.45355225 -153.70477295]
[196.46911621 -146.30995178]
[207.34309387 -136.00865173]
[215.44041443 -123.39654541]
[220.28672791 -109.20439911]
[221.59623718 -94.25578308]
[219.28848267 -79.41925812]
[213.49331665 -65.55790710]
[204.54360962 -53.47916412]
[192.95610046 -43.88771820]
[179.40159607 -37.34445572]
[164.66609192 -34.23363876]
[149.60523987 -34.74033737]
[145.50030518 -20.31295395]
[153.32510376 -9.94933701]
[153.70344543 3.22672725]
[146.26884460 14.34765244]
[133.58303833 19.17376709]
[129.03575134 33.46789932]
[124.48845673 47.76202774]
[119.94116974 62.05615616]
[115.39387512 76.35028839]
[110.84658813 90.64441681]
[113.64988708 104.34233856]
[103.44754028 113.90287018]
[106.63718414 129.39921570]
[95.40567780 139.18199158]
[90.85838318 153.47612000]
[95.62783813 158.43818665]
[98.71159363 164.54537964]
[99.85925293 171.24847412]
[98.99336243 177.95243835]
[96.21409607 184.06932068]
[91.78838348 189.06980896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[5 12]
[6 11]
[17 95]
[18 94]
[20 92]
[22 90]
[23 89]
[24 88]
[25 87]
[26 86]
[27 85]
[30 81]
[31 80]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 61]
[50 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
