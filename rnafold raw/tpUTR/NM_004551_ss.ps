%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 03:25:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCAGGGAACGCAUGUGGAUCCUAGACAGCGCCUUAUCUAUGAUUGAGUGUCCGUGUAAAUAAAUUCCUACUUAGACUUAC\
) } def
/len { sequence length } bind def

/coor [
[169.92153931 230.89950562]
[171.87770081 215.97441101]
[176.79853821 201.74871826]
[184.48255920 188.80497742]
[173.38618469 178.71188354]
[158.76486206 175.87178040]
[153.76228333 160.86228943]
[142.66590881 150.76921082]
[131.56953430 140.67611694]
[124.32230377 138.45007324]
[120.25346375 129.98497009]
[109.54697418 119.47920227]
[98.84048462 108.97344208]
[94.72559357 108.49452972]
[90.88926697 106.07356262]
[88.25320435 101.90568542]
[87.60192108 96.61772919]
[72.90048981 90.77149200]
[70.89466095 76.01256561]
[61.44750214 64.36133575]
[52.00034714 52.71010208]
[42.55318832 41.05887222]
[27.85175514 35.21263885]
[25.84592438 20.45371056]
[16.39876556 8.80247879]
[6.95160866 -2.84875321]
[-2.49554944 -14.49998569]
[-17.65102005 -12.00854683]
[-32.01609039 -17.44364548]
[-41.72663116 -29.34326744]
[-44.17055130 -44.50647354]
[-38.69045258 -58.85443878]
[-26.76045036 -68.52763367]
[-11.58965874 -70.92401123]
[2.74105763 -65.39896393]
[12.37680721 -53.43870163]
[14.72562218 -38.26047134]
[9.15568256 -23.94714355]
[18.60284042 -12.29591084]
[28.04999924 -0.64467889]
[37.49715805 11.00655270]
[51.52286530 16.01941299]
[54.20441818 31.61171341]
[63.65157700 43.26294708]
[73.09873199 54.91417694]
[82.54589081 66.56540680]
[96.57160187 71.57826996]
[99.25315857 87.17057037]
[109.34624481 98.26694489]
[120.05273438 108.77271271]
[130.75923157 119.27847290]
[141.66261292 129.57974243]
[152.75898743 139.67283630]
[163.85536194 149.76591492]
[179.27038574 153.32794189]
[183.47926331 167.61550903]
[194.57565308 177.70858765]
[206.73547363 168.83595276]
[220.43257141 162.59301758]
[235.10606384 159.23541260]
[250.15507507 158.90063477]
[264.96334839 161.60240173]
[278.92453003 167.23005676]
[291.46688843 175.55317688]
[302.07681274 186.23091125]
[310.31985474 198.82603455]
[315.85845947 212.82278442]
[318.46585083 227.64797974]
[318.03521729 242.69454956]
[314.58419800 257.34634399]
[308.25411987 271.00341797]
[299.30419922 283.10644531]
[288.10092163 293.15991211]
[275.10305786 300.75204468]
[260.84289551 305.57199097]
[245.90431213 307.42239380]
[230.89907837 306.22744751]
[216.44163513 302.03610229]
[203.12402344 295.01998901]
[191.49156189 285.46640015]
[182.02061462 273.76657104]
[175.09901428 260.39959717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 57]
[5 56]
[7 54]
[8 53]
[9 52]
[11 51]
[12 50]
[13 49]
[17 48]
[19 46]
[20 45]
[21 44]
[22 43]
[24 41]
[25 40]
[26 39]
[27 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
