%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:55:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGAAGGGGAGAACGUCUCCAGACAGAAUUCUACAUCGGUCUAAUCUACUUUAGGACUGGAUCCCAUAAAAGUUAUAAGUUCCUUAAGA\
) } def
/len { sequence length } bind def

/coor [
[94.21168518 217.18812561]
[84.13483429 205.50648499]
[81.99585724 190.22811890]
[88.47727966 176.22831726]
[101.51091003 167.97434998]
[101.51091003 152.97434998]
[101.51091003 137.97434998]
[101.51091003 122.97434235]
[88.47758484 115.54920959]
[75.57437134 123.19819641]
[62.67115784 130.84718323]
[49.76794052 138.49618530]
[36.86472702 146.14517212]
[26.32290268 159.42320251]
[10.64550781 152.96908569]
[12.50746155 136.11769104]
[29.21573639 133.24195862]
[42.11894989 125.59296417]
[55.02216721 117.94396973]
[67.92538452 110.29498291]
[80.82859802 102.64599609]
[79.27783966 87.72637177]
[65.07735443 82.89456940]
[50.87687683 78.06275940]
[36.80989075 85.26660919]
[21.79500389 80.33419800]
[14.74028206 66.19183350]
[19.83116722 51.22993088]
[34.04732513 44.32512665]
[48.95456696 49.57391357]
[55.70868301 63.86227798]
[69.90916443 68.69408417]
[84.10964203 73.52589417]
[72.17713928 64.43659210]
[70.83961487 49.49634552]
[80.96788025 38.43206406]
[95.96787262 38.44720078]
[106.07378387 49.53189850]
[104.70632172 64.46903229]
[110.74423218 50.73790741]
[116.78214264 37.00679016]
[122.82005310 23.27566910]
[128.85795593 9.54454899]
[134.89587402 -4.18657160]
[133.36802673 -19.93383408]
[145.57388306 -28.47000694]
[151.61180115 -42.20112610]
[157.64970398 -55.93224716]
[151.68524170 -70.56784821]
[157.89358521 -85.10166931]
[172.59143066 -90.91105652]
[187.05880737 -84.54940033]
[192.71247864 -69.79096222]
[186.19821167 -55.39165497]
[171.38082886 -49.89433670]
[165.34291077 -36.16321945]
[159.30500793 -22.43209839]
[161.26472473 -7.66697693]
[148.62698364 1.85133708]
[142.58908081 15.58245754]
[136.55117798 29.31357765]
[130.51325989 43.04469681]
[124.47535706 56.77581787]
[118.43744659 70.50693512]
[127.87852478 58.85077667]
[140.15167236 50.22698593]
[154.31781006 45.29541397]
[169.29302979 44.43340302]
[183.93147278 47.70690536]
[197.11309814 54.86545181]
[207.82929993 65.36130524]
[215.26014709 78.39137268]
[218.83703613 92.95865631]
[218.28630066 107.94854736]
[213.65008545 122.21408081]
[205.28311157 134.66372681]
[193.82560730 144.34490967]
[180.15420532 150.51687622]
[165.31501770 152.70736694]
[150.44343567 150.74876404]
[136.67736816 144.79096985]
[125.07012939 135.28979492]
[116.51091003 122.97434235]
[116.51091003 137.97434998]
[116.51091003 152.97434998]
[116.51091003 167.97434998]
[129.54454041 176.22831726]
[136.02595520 190.22811890]
[133.88697815 205.50648499]
[123.81012726 217.18812561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 86]
[6 85]
[7 84]
[8 83]
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[22 33]
[23 32]
[24 31]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
