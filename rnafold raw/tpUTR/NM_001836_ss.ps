%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 19:28:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUGGAUCCUGAGCCAGCCUGAAAGGGAAGCUGGAACUGGACCUGAGCAGCAAAGUGUGUGCCACUCAUUCUGGUCUACCCUUGGUCCCUCAGCCACAACCCUAAGCCUCCAGAAGUAUCCUACAGGUCACAGAACUCUCAAUAAACCUCAGUGAAGACA\
) } def
/len { sequence length } bind def

/coor [
[111.44760895 126.37387848]
[110.05825806 111.43836212]
[102.67220306 112.74072266]
[96.73100281 126.51396942]
[90.78981018 140.28720093]
[84.84860992 154.06045532]
[92.87851715 167.33825684]
[91.53679657 182.79722595]
[81.33937836 194.49304199]
[66.20736694 197.92845154]
[51.95934296 191.78244019]
[44.07394791 178.41830444]
[45.58328629 162.97480774]
[55.90698624 151.39030457]
[71.07537079 148.11924744]
[77.01656342 134.34600830]
[82.95776367 120.57276917]
[88.89895630 106.79953003]
[89.77113342 91.82490540]
[85.46908569 77.45506287]
[81.16703033 63.08522034]
[76.86498260 48.71537781]
[66.95470428 44.08434296]
[61.36788177 34.93674850]
[61.75748825 24.44544983]
[67.75087738 16.09538460]
[64.00926208 1.56953454]
[60.26764297 -12.95631504]
[56.52602386 -27.48216438]
[38.72315979 -36.69583511]
[33.43975449 -55.71832275]
[43.62351227 -72.27670288]
[39.04362106 -86.56041718]
[34.46373367 -100.84413910]
[29.88384247 -115.12785339]
[25.30395126 -129.41157532]
[13.30324841 -126.54240417]
[-0.80355048 -130.89631653]
[-12.73689079 -143.38188171]
[-24.03842926 -153.24470520]
[-35.33996964 -163.10751343]
[-46.64150620 -172.97033691]
[-57.94304657 -182.83316040]
[-69.24458313 -192.69598389]
[-80.92005920 -202.11315918]
[-92.95190430 -211.07054138]
[-104.98374939 -220.02792358]
[-117.01560211 -228.98530579]
[-132.45150757 -226.89476013]
[-144.52592468 -236.15022278]
[-146.42379761 -250.87889099]
[-158.45564270 -259.83627319]
[-170.48748779 -268.79364014]
[-185.66081238 -265.01156616]
[-199.69259644 -271.91397095]
[-205.95745850 -286.24176025]
[-201.49731445 -301.22979736]
[-188.41812134 -309.80117798]
[-172.89546204 -307.90875244]
[-162.25866699 -296.44610596]
[-161.53010559 -280.82550049]
[-149.49826050 -271.86810303]
[-137.46641541 -262.91073608]
[-122.81218719 -265.31683350]
[-110.48258209 -256.40417480]
[-108.05821991 -241.01715088]
[-96.02637482 -232.05976868]
[-83.99452972 -223.10238647]
[-71.96267700 -214.14500427]
[-69.12899017 -214.45019531]
[-66.00138092 -213.62315369]
[-63.02102280 -211.54524231]
[-60.66406631 -208.26341248]
[-59.38176346 -203.99751282]
[-48.08022308 -194.13470459]
[-36.77868652 -184.27188110]
[-25.47714806 -174.40905762]
[-14.17560863 -164.54623413]
[-2.87407041 -154.68341064]
[4.40665245 -156.48371887]
[0.80629712 -171.04522705]
[15.36786270 -174.64533997]
[18.96809769 -160.08430481]
[26.24882126 -161.88461304]
[31.65148735 -175.87786865]
[37.05415344 -189.87112427]
[42.45681763 -203.86437988]
[35.82828903 -218.21144104]
[41.36444473 -233.01435852]
[55.78078461 -239.49082947]
[70.52434540 -233.79847717]
[76.84804535 -219.31446838]
[71.00012970 -204.63191223]
[56.45007324 -198.46171570]
[51.04740906 -184.46846008]
[45.64474106 -170.47520447]
[40.24207687 -156.48194885]
[48.38067627 -169.08207703]
[61.05410004 -177.10604858]
[75.92448425 -179.07371521]
[90.24868774 -174.62207031]
[101.38433075 -164.57232666]
[107.27722168 -150.77833557]
[106.84029388 -135.78469849]
[100.15415192 -122.35729218]
[88.45218658 -112.97304535]
[73.89305878 -109.36309052]
[59.16248703 -112.19334412]
[46.97782516 -120.94171143]
[39.58766937 -133.99147034]
[44.16756058 -119.70774841]
[48.74745178 -105.42402649]
[53.32733917 -91.14030457]
[57.90723038 -76.85659027]
[68.04412842 -74.76988983]
[76.45027924 -68.59482574]
[81.55132294 -59.40401077]
[82.35707092 -48.84216690]
[78.65304565 -38.83190918]
[71.05187225 -31.22378159]
[74.79349518 -16.69793129]
[78.53511047 -2.17208266]
[82.27672577 12.35376644]
[96.80284119 25.07275391]
[91.23482513 44.41333008]
[95.53687286 58.78317261]
[99.83892822 73.15301514]
[104.14097595 87.52285767]
[143.12702942 97.23765564]
[153.42065430 108.14826202]
[163.71427917 119.05886078]
[174.00790405 129.96946716]
[189.10607910 134.69769287]
[192.21214294 149.26483154]
[202.50576782 160.17543030]
[216.70037842 154.73652649]
[231.89572144 155.14865112]
[245.77462769 161.34898376]
[256.22067261 172.39201355]
[261.64093018 186.59375000]
[261.20880127 201.78854370]
[254.99021912 215.65930176]
[243.93345642 226.09080505]
[229.72459412 231.49235535]
[214.53038025 231.04025269]
[200.66783142 224.80342102]
[190.25086975 213.73295593]
[184.86801147 199.51699829]
[185.34011841 184.32339478]
[191.59516907 170.46905518]
[181.30154419 159.55845642]
[166.93965149 155.61062622]
[163.09730530 140.26309204]
[152.80368042 129.35249329]
[142.51005554 118.44188690]
[132.21643066 107.53128052]
[124.83037567 108.83364105]
[128.63305664 123.34362030]
[137.54022217 135.41268921]
[131.97322083 149.34138489]
[117.20114136 151.94636536]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[5 16]
[6 15]
[19 128]
[20 127]
[21 126]
[22 125]
[26 123]
[27 122]
[28 121]
[29 120]
[32 114]
[33 113]
[34 112]
[35 111]
[36 110]
[39 79]
[40 78]
[41 77]
[42 76]
[43 75]
[44 74]
[45 69]
[46 68]
[47 67]
[48 66]
[51 63]
[52 62]
[53 61]
[84 97]
[85 96]
[86 95]
[87 94]
[129 156]
[130 155]
[131 154]
[132 153]
[134 151]
[135 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
