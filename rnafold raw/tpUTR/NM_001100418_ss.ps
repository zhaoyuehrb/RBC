%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:04:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCGGCUCCCCAGGGAUGCGCCGAGGGAGAUGGGAAACGGGGCGGAUGGCGCCCAGCCCAGCCCUAACUGCCAGCUGGCUGGGGUUGCGCCCCACUGCGCUGCUGACCUUCCUGCAGUUCCAGACACCUCCCACAAUAAAGAGCUCCUCCUCUGUA\
) } def
/len { sequence length } bind def

/coor [
[80.62272644 287.65090942]
[73.46971130 300.83554077]
[66.31670380 314.02017212]
[59.16368866 327.20480347]
[52.01067734 340.38943481]
[56.27769089 355.37042236]
[48.83570099 368.63961792]
[34.52731323 372.61523438]
[27.37430000 385.79986572]
[20.22128677 398.98449707]
[21.19665718 415.35461426]
[7.36028242 424.15728760]
[-7.05416155 416.33706665]
[-7.21833038 399.93872070]
[7.03665876 391.83148193]
[14.18967152 378.64685059]
[21.34268379 365.46224976]
[16.87462807 351.29989624]
[23.94098091 337.82690430]
[38.82604980 333.23641968]
[45.97906113 320.05178833]
[53.13207245 306.86715698]
[60.28508377 293.68252563]
[67.43809509 280.49789429]
[65.73784637 245.98330688]
[89.91690826 229.81982422]
[90.21513367 214.82279968]
[90.51336670 199.82575989]
[90.81159973 184.82872009]
[91.10983276 169.83169556]
[83.62711334 156.95309448]
[91.63726044 143.30949402]
[91.93549347 128.31245422]
[83.82571411 124.59723663]
[77.20100403 118.62356567]
[72.66963196 110.93994904]
[70.64765167 102.25185394]
[71.32070160 93.35700226]
[74.62700653 85.07209015]
[80.26296997 78.15781403]
[73.37351227 64.83357239]
[66.48405457 51.50933456]
[59.59459686 38.18509293]
[52.70513535 24.86085510]
[45.81567764 11.53661537]
[32.60438538 2.83188367]
[33.63169479 -12.02725124]
[28.20910454 -15.96213818]
[25.96615028 -21.25869179]
[26.74514389 -26.02100754]
[20.39085770 -39.60861206]
[13.88524818 -46.10007095]
[14.04831505 -53.53012466]
[7.96543503 -67.24138641]
[1.88255501 -80.95263672]
[-4.20032454 -94.66389465]
[-10.28320503 -108.37515259]
[-16.36608505 -122.08641052]
[-22.44896507 -135.79766846]
[-28.82422256 -142.41719055]
[-28.51346207 -149.84252930]
[-34.32252884 -163.67202759]
[-40.13159943 -177.50151062]
[-55.38632202 -178.74729919]
[-68.30855560 -186.94940186]
[-75.92885590 -200.22303772]
[-76.49613953 -215.51803589]
[-69.88005066 -229.31970215]
[-57.60091782 -238.45651245]
[-42.48039246 -240.82890320]
[-27.99305916 -235.89172363]
[-17.46800613 -224.77947998]
[-13.32381058 -210.04570007]
[-16.51277924 -195.07609558]
[-26.30211067 -183.31057739]
[-20.49304199 -169.48109436]
[-14.68397427 -155.65159607]
[-8.73770714 -141.88055420]
[-2.65482712 -128.16929626]
[3.42805266 -114.45803833]
[9.51093197 -100.74678040]
[15.59381199 -87.03552246]
[21.67669296 -73.32426453]
[27.75957108 -59.61300659]
[33.97846222 -45.96289825]
[40.33274841 -32.37529373]
[46.95593262 -18.91671181]
[59.67444229 -11.16501808]
[59.13991547 4.64715672]
[66.02937317 17.97139549]
[72.91883087 31.29563522]
[79.80829620 44.61987305]
[86.69775391 57.94411469]
[93.58721161 71.26834869]
[110.85884094 72.63730621]
[124.36918640 83.48413086]
[138.52038574 78.50984192]
[152.67158508 73.53555298]
[164.30146790 59.29133224]
[181.40066528 63.13431931]
[195.45016479 57.87965393]
[209.49967957 52.62499237]
[223.54917908 47.37033081]
[237.59867859 42.11566544]
[247.81391907 30.03430176]
[262.44515991 32.82281494]
[268.76861572 18.33869934]
[283.51208496 12.64609051]
[297.92852783 19.12231255]
[303.46493530 33.92514038]
[296.83666992 48.27231598]
[281.97613525 53.65191650]
[267.69982910 46.87231827]
[258.48950195 58.57783508]
[242.85334778 56.16516876]
[228.80383301 61.41983414]
[214.75433350 66.67449188]
[200.70483398 71.92916107]
[186.65533447 77.18382263]
[181.33293152 88.08457184]
[169.62677002 92.55933380]
[157.64587402 87.68675232]
[143.49467468 92.66104126]
[129.34347534 97.63533020]
[123.85069275 117.25618744]
[106.93252563 128.61068726]
[106.63429260 143.60772705]
[114.09568787 157.55900574]
[106.10687256 170.12992859]
[105.80863953 185.12695312]
[105.51040649 200.12399292]
[105.21217346 215.12103271]
[104.91394043 230.11805725]
[111.91368866 231.75674438]
[118.55590057 235.34526062]
[124.29093170 240.79417419]
[128.59556580 247.85861206]
[131.01683044 256.14709473]
[131.21263123 265.14257812]
[128.98609924 274.23458862]
[124.31026459 282.76074219]
[130.39314270 296.47198486]
[136.47602844 310.18325806]
[142.55889893 323.89450073]
[157.39422607 329.34323120]
[163.95565796 343.72109985]
[158.35038757 358.49798584]
[143.90394592 364.90704346]
[129.18713379 359.14584351]
[122.93119049 344.63244629]
[128.84764099 329.97738647]
[122.76477051 316.26614380]
[116.68188477 302.55487061]
[110.59900665 288.84362793]
[103.10493469 288.54544067]
[102.50836182 303.53356934]
[87.52023315 302.93676758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[5 20]
[8 17]
[9 16]
[10 15]
[26 133]
[27 132]
[28 131]
[29 130]
[30 129]
[32 127]
[33 126]
[40 94]
[41 93]
[42 92]
[43 91]
[44 90]
[45 89]
[47 87]
[50 86]
[51 85]
[53 84]
[54 83]
[55 82]
[56 81]
[57 80]
[58 79]
[59 78]
[61 77]
[62 76]
[63 75]
[96 124]
[97 123]
[98 122]
[100 119]
[101 118]
[102 117]
[103 116]
[104 115]
[106 113]
[141 154]
[142 153]
[143 152]
[144 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
