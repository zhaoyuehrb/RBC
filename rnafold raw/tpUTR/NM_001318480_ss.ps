%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:52:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACAGCAUCCAAGGGAGUGGGUUUUGUGCAAGGGCUGGGGGUCUCCUGCCUCUCCUGGUGUCGCCGGUGGCUCAUUUUCUGGCAAAUGGAGGCACGAACGCAGGGGCCAAAUAGCAAUAAAUGGGUUUUGUUUUUUUUUUGCAAUAA\
) } def
/len { sequence length } bind def

/coor [
[43.98750687 227.68789673]
[34.09821320 216.40951538]
[32.56484985 201.48878479]
[23.44388580 213.39710999]
[14.32292271 225.30541992]
[5.20195961 237.21374512]
[2.95311737 252.87429810]
[-10.92842960 258.27355957]
[-20.04939270 270.18188477]
[-29.17035675 282.09017944]
[-38.29132080 293.99850464]
[-47.41228104 305.90682983]
[-45.08744431 321.53918457]
[-54.56427765 334.18692017]
[-70.22034454 336.34634399]
[-82.76717377 326.73632812]
[-84.76096344 311.05831909]
[-75.01882172 298.61376953]
[-59.32060242 296.78585815]
[-50.19963837 284.87753296]
[-41.07867432 272.96923828]
[-31.95771027 261.06091309]
[-22.83674812 249.15258789]
[-21.24029732 234.34379578]
[-6.70635796 228.09277344]
[2.41460514 216.18446350]
[11.53556824 204.27613831]
[20.65653229 192.36782837]
[28.74194145 179.73350525]
[35.73432159 166.46298218]
[42.72670364 153.19245911]
[49.71908188 139.92195129]
[56.71146011 126.65143585]
[63.70384216 113.38091278]
[91.91117096 85.93609619]
[92.54351807 70.94943237]
[93.17586517 55.96276474]
[93.80821228 40.97610092]
[81.74573517 28.35140991]
[82.49705505 11.24378586]
[95.11368561 0.16984715]
[95.42993164 -14.82681847]
[95.74617767 -29.82348442]
[96.06242371 -44.82015228]
[93.09903717 -53.53380585]
[96.54674530 -60.12875366]
[97.17909241 -75.11541748]
[97.81143951 -90.10208130]
[98.44378662 -105.08875275]
[99.07613373 -120.07541656]
[90.59465027 -125.09258270]
[84.58974457 -132.83241272]
[81.87004089 -142.18281555]
[82.77597046 -151.82003784]
[87.13781738 -160.39602661]
[94.30545044 -166.72702026]
[103.24494171 -169.95692444]
[97.31063843 -184.62301636]
[106.59190369 -196.27236938]
[108.48445892 -211.15249634]
[110.37700653 -226.03263855]
[112.26955414 -240.91276550]
[114.16210175 -255.79289246]
[108.22779846 -270.45898438]
[117.50906372 -282.10833740]
[119.40161896 -296.98846436]
[121.29416656 -311.86859131]
[110.16396332 -322.51870728]
[107.47055054 -337.50534058]
[114.04055786 -351.04412842]
[127.16583252 -358.03448486]
[129.05838013 -372.91461182]
[130.95092773 -387.79473877]
[119.55658722 -398.32797241]
[116.56267548 -413.55346680]
[123.12039948 -427.61676025]
[136.70819092 -435.11019897]
[152.10125732 -433.15240479]
[163.38066101 -422.49621582]
[166.20924377 -407.23910522]
[159.49934387 -393.24780273]
[145.83105469 -385.90219116]
[143.93850708 -371.02206421]
[142.04595947 -356.14193726]
[153.00350952 -346.08859253]
[155.97526550 -331.33621216]
[149.61610413 -317.50094604]
[136.17430115 -309.97604370]
[134.28173828 -295.09591675]
[132.38919067 -280.21578979]
[138.45886230 -266.61401367]
[129.04223633 -253.90034485]
[127.14968109 -239.02021790]
[125.25713348 -224.14009094]
[123.36458588 -209.25994873]
[121.47203827 -194.37982178]
[127.54170990 -180.77804565]
[118.12506866 -168.06437683]
[131.99291992 -153.12751770]
[130.45137024 -132.51303101]
[114.06280518 -119.44306946]
[113.43045807 -104.45639801]
[112.79810333 -89.46973419]
[112.16575623 -74.48307037]
[111.53340912 -59.49640656]
[111.05908966 -44.50390625]
[110.74284363 -29.50724030]
[110.42659760 -14.51057434]
[110.11035156 0.48609143]
[120.26621246 8.47989845]
[123.99906921 21.05713844]
[119.72333527 33.66642380]
[108.79487610 41.60844803]
[108.16252899 56.59511566]
[107.53018188 71.58177948]
[106.89783478 86.56844330]
[113.89021301 99.83895874]
[126.60907745 107.79073334]
[139.32792664 115.74250031]
[152.04679871 123.69426727]
[164.76565552 131.64604187]
[177.48451233 139.59780884]
[193.37744141 137.40817261]
[204.89863586 148.57246399]
[203.21002197 164.52641296]
[189.60696411 173.03149414]
[174.52456665 167.56333923]
[169.53274536 152.31666565]
[156.81388855 144.36489868]
[144.09501648 136.41313171]
[131.37615967 128.46136475]
[118.65730286 120.50959015]
[105.93844604 112.55782318]
[98.69742584 114.51168823]
[102.60491943 128.99380493]
[88.12274933 132.90106201]
[84.21537781 118.41942596]
[76.97435760 120.37329865]
[69.98197937 133.64381409]
[62.98959732 146.91432190]
[55.99721909 160.18484497]
[49.00483704 173.45536804]
[42.01245880 186.72587585]
[56.20401764 181.86793518]
[70.58764648 186.12364197]
[79.85126495 197.92134094]
[80.57367706 212.90393066]
[72.48808289 225.53813171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 28]
[4 27]
[5 26]
[6 25]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[29 143]
[30 142]
[31 141]
[32 140]
[33 139]
[34 138]
[35 116]
[36 115]
[37 114]
[38 113]
[41 109]
[42 108]
[43 107]
[44 106]
[46 105]
[47 104]
[48 103]
[49 102]
[50 101]
[57 98]
[59 96]
[60 95]
[61 94]
[62 93]
[63 92]
[65 90]
[66 89]
[67 88]
[71 84]
[72 83]
[73 82]
[117 133]
[118 132]
[119 131]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
