%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 10:31:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUGAUUGAAGAUUCUUUUAAAAUACUAUCAGUUAAACAUUUAAUAUGAUUAUGAUUAAUGUAUUCAUUAUGCUACAGAACUGACAUAAGAAUCAAUAAAAUGAUUGUUUUACUCUGCA\
) } def
/len { sequence length } bind def

/coor [
[-83.72023773 275.91619873]
[-94.14234161 272.69512939]
[-103.45246124 267.03515625]
[-111.09107208 259.28381348]
[-124.33125305 266.33346558]
[-137.57144165 273.38311768]
[-150.81161499 280.43276978]
[-164.05180359 287.48242188]
[-177.29199219 294.53207397]
[-190.53216553 301.58172607]
[-203.77235413 308.63137817]
[-216.92066956 315.85089111]
[-229.97494507 323.23913574]
[-242.93301392 330.79479980]
[-255.79273987 338.51669312]
[-268.65246582 346.23858643]
[-270.92428589 361.71026611]
[-282.64389038 372.06329346]
[-298.27764893 372.40924072]
[-310.44375610 362.58480835]
[-313.39779663 347.22879028]
[-305.74490356 333.59179688]
[-291.09857178 328.11282349]
[-276.37435913 333.37887573]
[-263.51461792 325.65698242]
[-250.65490723 317.93508911]
[-246.49096680 311.72070312]
[-237.36317444 310.18484497]
[-224.30888367 302.79663086]
[-219.98631287 296.69149780]
[-210.82200623 295.39117432]
[-197.58181763 288.34152222]
[-184.34162903 281.29187012]
[-171.10145569 274.24221802]
[-157.86126709 267.19256592]
[-144.62109375 260.14291382]
[-131.38090515 253.09327698]
[-118.14072418 246.04362488]
[-120.14369965 226.75323486]
[-113.69705963 208.41308594]
[-99.99986267 194.55305481]
[-81.65061188 187.85856628]
[-62.15439224 189.65031433]
[-45.25331116 199.62390137]
[-33.25572205 190.62069702]
[-21.25813293 181.61747742]
[-15.72239971 167.78979492]
[-0.04044169 165.69532776]
[11.95714664 156.69210815]
[23.95473480 147.68890381]
[35.95232391 138.68568420]
[47.94991302 129.68246460]
[59.94750214 120.67926025]
[71.94509125 111.67604065]
[83.94268036 102.67282867]
[86.30957794 91.19353485]
[95.77410889 84.27983856]
[107.42950439 85.51607513]
[119.65492249 76.82476044]
[131.88035583 68.13343811]
[138.64472961 53.83121109]
[153.50097656 52.76288223]
[165.72639465 44.07156372]
[170.98683167 36.45557404]
[178.38037109 35.31864166]
[190.82551575 26.94498444]
[203.27067566 18.57132912]
[215.71583557 10.19767380]
[221.17062378 2.71965480]
[228.59098816 1.77346516]
[241.24761963 -6.27697802]
[253.90425110 -14.32742023]
[266.56088257 -22.37786293]
[279.21752930 -30.42830658]
[291.76943970 -38.64103699]
[291.34164429 -54.06246567]
[299.33874512 -67.25526428]
[313.20892334 -74.00964355]
[328.52624512 -72.17031860]
[340.40301514 -62.32421112]
[345.04940796 -47.61317062]
[340.98275757 -32.73144150]
[329.50070190 -22.42772675]
[314.26718140 -19.98990822]
[300.14309692 -26.19588089]
[296.30459595 -19.77538490]
[287.26794434 -17.77167320]
[274.61132812 -9.72123051]
[261.95468140 -1.67078733]
[249.29804993 6.37965584]
[236.64141846 14.43009853]
[224.08949280 22.64282799]
[211.64433289 31.01648521]
[199.19917297 39.39014053]
[186.75402832 47.76379776]
[174.41770935 56.29698944]
[162.19229126 64.98830414]
[156.30235291 78.66887665]
[140.57167053 80.35886383]
[128.34623718 89.05018616]
[116.12081909 97.74150085]
[109.60199738 113.14469910]
[92.94589233 114.67041779]
[80.94830322 123.67362976]
[68.95071411 132.67684937]
[56.95312881 141.68005371]
[44.95553970 150.68327332]
[32.95795059 159.68649292]
[20.96036148 168.68969727]
[8.96277237 177.69291687]
[2.56889129 192.16458130]
[-12.25491810 193.61506653]
[-24.25250626 202.61828613]
[-36.25009537 211.62149048]
[-32.49197388 221.98611450]
[-31.37771225 232.94155884]
[-32.96838379 243.82498169]
[-37.16159058 253.97937012]
[-43.69801712 262.79333496]
[-52.17748260 269.73779297]
[-62.08340073 274.39785767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[12 29]
[13 28]
[14 26]
[15 25]
[16 24]
[44 114]
[45 113]
[46 112]
[48 110]
[49 109]
[50 108]
[51 107]
[52 106]
[53 105]
[54 104]
[55 103]
[58 101]
[59 100]
[60 99]
[62 97]
[63 96]
[65 95]
[66 94]
[67 93]
[68 92]
[70 91]
[71 90]
[72 89]
[73 88]
[74 87]
[75 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
