%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 09:01:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCACUCUGGCAGCCAGUGCCCUUAUCUCUCCUGUACAGCUUCCGGAUCGUCAGCCACCUUGCCUUUGCCAACCACCUCUGCUUGCCUGUCCACAUUUAAAAAUAAAAUCAUUUUAGCCCUUUCAA\
) } def
/len { sequence length } bind def

/coor [
[163.00598145 119.45626068]
[148.26339722 116.68929291]
[133.52081299 113.92232513]
[118.77822113 111.15535736]
[96.27575684 126.08280945]
[70.12451172 107.70442200]
[55.62765121 111.55683136]
[41.13079453 115.40924072]
[26.63393402 119.26165009]
[12.13707352 123.11405945]
[0.78694671 134.13609314]
[-13.50056839 129.92703247]
[-27.99742889 133.77943420]
[-42.49428940 137.63185120]
[-49.68059158 148.42707825]
[-61.91489792 151.29579163]
[-72.45330811 145.22111511]
[-87.04102325 148.71377563]
[-101.62873077 152.20643616]
[-116.21644592 155.69909668]
[-118.95944977 170.67893982]
[-127.56352997 183.24435425]
[-140.53796387 191.21832275]
[-155.63484192 193.21928406]
[-170.23857117 188.90057373]
[-181.81892395 179.01042175]
[-188.36958313 165.26237488]
[-188.75556946 150.03834534]
[-182.91001892 135.97599792]
[-171.84571838 125.51172638]
[-157.47961426 120.45851898]
[-142.30072021 121.69187927]
[-128.93887329 128.99810791]
[-119.70909882 141.11137390]
[-105.12139130 137.61871338]
[-90.53367615 134.12606812]
[-75.94596863 130.63340759]
[-63.94633865 117.89123535]
[-46.34669876 123.13499451]
[-31.84983826 119.28258514]
[-17.35297775 115.43017578]
[-7.03976345 104.68369293]
[8.28466415 108.61720276]
[22.78152275 104.76479340]
[37.27838516 100.91237640]
[51.77524185 97.05996704]
[66.27210236 93.20755768]
[51.35056686 94.73979187]
[39.25357437 85.87058258]
[36.22683716 71.17913055]
[43.83305740 58.25065613]
[58.14513397 53.76016617]
[71.77370453 60.02611160]
[77.68238831 73.81541443]
[74.00957489 59.27201462]
[60.31137848 51.38944244]
[56.27983856 36.10800934]
[64.30679321 22.49391556]
[79.62999725 18.62416649]
[93.15846252 26.79461288]
[96.86598969 42.15787506]
[88.55297089 55.59920120]
[92.22578430 70.14260101]
[104.56813812 71.76703644]
[114.34065247 77.89730835]
[120.15264893 86.79322052]
[121.54519653 96.41276550]
[136.28778076 99.17973328]
[151.03036499 101.94670868]
[165.77294922 104.71367645]
[170.09472656 90.33471680]
[175.92042542 76.49660492]
[183.18405151 63.35613632]
[191.80328369 51.06220245]
[201.68048096 39.75410080]
[212.70370483 29.55996132]
[224.74807739 20.59529305]
[237.67710876 12.96167183]
[251.34431458 6.74559212]
[265.59481812 2.01748729]
[280.26718140 -1.16907001]
[295.19512939 -2.77797341]
[310.20950317 -2.79099274]
[325.14022827 -1.20798063]
[339.81808472 1.95312643]
[354.07678223 6.65651035]
[367.75473022 12.84887886]
[380.69699097 20.46006584]
[392.75689697 29.40383339]
[403.79779053 39.57883835]
[413.69458008 50.86979675]
[422.33511353 63.14876556]
[429.62152100 76.27661896]
[435.47119141 90.10460663]
[439.81790161 104.47604370]
[442.61236572 119.22809601]
[443.82290649 134.19361877]
[443.43585205 149.20301819]
[441.45553589 164.08624268]
[437.90444946 178.67466736]
[432.82278442 192.80296326]
[426.26815796 206.31106567]
[418.31478882 219.04591370]
[409.05285645 230.86320496]
[398.58724976 241.62904358]
[387.03659058 251.22146606]
[374.53173828 259.53173828]
[361.21441650 266.46572876]
[347.23544312 271.94488525]
[332.75329590 275.90710449]
[317.93200684 278.30746460]
[302.93954468 279.11880493]
[287.94580078 278.33193970]
[273.12060547 275.95574951]
[258.63201904 272.01718140]
[244.64413452 266.56088257]
[231.31549072 259.64862061]
[218.79708862 251.35874939]
[207.23078918 241.78520203]
[196.74763489 231.03645325]
[187.46641541 219.23428345]
[179.49229431 206.51243591]
[172.91561890 193.01504517]
[167.81091309 178.89506531]
[164.23600769 164.31246948]
[162.23141479 149.43249512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[12 41]
[13 40]
[14 39]
[17 37]
[18 36]
[19 35]
[20 34]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
