%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:04:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCAGAGCAGGCCUCCUUCCCUGUGUGCUGGGGAGUCUCAUCACCGCCCCCUAAAAAUGACGUUAUUAAAUGUUGUAGCUCUGUGA\
) } def
/len { sequence length } bind def

/coor [
[94.07866669 126.10720062]
[77.15954590 113.96287537]
[62.68214417 117.88776398]
[48.20473862 121.81265259]
[33.72733307 125.73754120]
[19.24992943 129.66242981]
[4.77252531 133.58732605]
[-8.51352596 148.54690552]
[-27.00056648 143.35577393]
[-41.16505051 148.29211426]
[-55.32953644 153.22843933]
[-69.49401855 158.16477966]
[-83.65850067 163.10112000]
[-88.01084137 177.99530029]
[-100.30710602 187.46005249]
[-115.81912231 187.85598755]
[-128.58221436 179.03085327]
[-133.68872070 164.37809753]
[-129.17506409 149.53199768]
[-116.77684784 140.20118713]
[-101.26144409 139.97355652]
[-88.59484100 148.93663025]
[-74.43035126 144.00028992]
[-60.26586914 139.06396484]
[-46.10138321 134.12762451]
[-31.93690109 129.19129944]
[-28.20516777 119.38732147]
[-19.44056320 113.22772980]
[-8.50741005 113.02967072]
[0.84763640 119.10991669]
[15.32504082 115.18502808]
[29.80244637 111.26013947]
[44.27985001 107.33525085]
[58.75725555 103.41036224]
[73.23465729 99.48547363]
[74.97409821 90.49461365]
[79.64203644 82.61605835]
[86.69223785 76.77175140]
[95.29969788 73.64558411]
[104.45717621 73.60337830]
[113.09308624 76.65007019]
[120.19686127 82.42914581]
[124.93722534 90.26433563]
[139.87886047 88.94235229]
[154.82048035 87.62036133]
[169.76211548 86.29837799]
[185.46836853 73.90393829]
[202.75675964 82.26035309]
[217.56791687 79.88769531]
[219.62348938 73.54154968]
[223.32150269 68.02935028]
[228.36364746 63.76330566]
[234.35198975 61.05640030]
[240.82028198 60.09951782]
[247.27040100 60.94807053]
[253.21054077 63.51910400]
[258.19284058 67.59905243]
[261.84704590 72.86135864]
[263.90808105 78.89255524]
[278.79376221 80.74103546]
[293.67944336 82.58950806]
[308.56509399 84.43798065]
[323.45077515 86.28646088]
[338.33642578 88.13493347]
[353.22210693 89.98341370]
[368.10775757 91.83188629]
[382.99310303 84.95007324]
[396.23782349 94.62007904]
[394.21691895 110.89423370]
[379.00933838 117.03107452]
[366.25930786 106.71755981]
[351.37362671 104.86907959]
[336.48794556 103.02060699]
[321.60229492 101.17212677]
[306.71661377 99.32365417]
[291.83096313 97.47517395]
[276.94528198 95.62670135]
[262.05960083 93.77822113]
[241.65214539 107.22694397]
[219.94058228 94.69885254]
[205.12942505 97.07151794]
[199.73428345 106.06797791]
[190.02433777 110.59299469]
[179.22625732 108.86834717]
[171.08410645 101.24000549]
[156.14247131 102.56199646]
[141.20083618 103.88397980]
[126.25920868 105.20597076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[43 88]
[44 87]
[45 86]
[46 85]
[48 81]
[49 80]
[59 78]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
