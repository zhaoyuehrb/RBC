%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 08:14:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCGCUUUCUUGCUGUCCAAUUUCUAUUAAAGGUUCCUUUGUUCCCUAAGUCCAACUACUAAACUGGGGGAUAUUAUGAAGGGCCUUGAGCAUCUGGAUUCUGCCUAAUAAAAAACAUUUAUUUUCAUUGC\
) } def
/len { sequence length } bind def

/coor [
[152.29969788 137.28787231]
[140.14364624 128.49978638]
[127.98760223 119.71169281]
[115.83155060 110.92360687]
[101.29055023 114.60588837]
[94.78229523 128.12042236]
[100.23802948 142.95317078]
[93.53173065 157.26403809]
[78.64212799 162.56265259]
[64.40296173 155.70542908]
[59.26206589 140.76063538]
[66.26944733 126.59476471]
[81.26776123 121.61215973]
[87.77601624 108.09763336]
[80.78358459 121.36811829]
[69.77141571 131.55300903]
[55.99631882 137.48991394]
[41.03044891 138.50123596]
[26.58185959 134.47157288]
[14.29956436 125.86080170]
[5.58534098 113.65169525]
[1.43374145 99.23767090]
[2.31858802 84.26378632]
[8.13889313 70.43902588]
[18.23038673 59.34120178]
[31.44132614 52.23690033]
[46.26395035 49.93694305]
[61.00655365 52.70382309]
[73.98657227 60.22175217]
[83.72257996 71.63271332]
[89.10391998 85.63684845]
[84.23342896 71.44959259]
[79.36293793 57.26233292]
[74.49244690 43.07507324]
[69.62195587 28.88781548]
[63.82201004 21.70489693]
[64.80828094 14.30757999]
[60.27423477 0.00924399]
[55.74018478 -14.28909206]
[51.20613861 -28.58742905]
[46.67209244 -42.88576508]
[42.13804245 -57.18410110]
[37.60399628 -71.48243713]
[32.39977646 -85.55070496]
[26.53699875 -99.35750580]
[20.67421913 -113.16430664]
[14.81144047 -126.97111511]
[8.94866180 -140.77792358]
[-3.56698775 -150.45619202]
[-1.41964066 -165.19519043]
[-7.28241968 -179.00199890]
[-13.14519787 -192.80880737]
[-28.40464973 -193.99528503]
[-41.35866547 -202.14709473]
[-49.03050613 -215.39102173]
[-49.65723801 -230.68370056]
[-43.09484482 -244.51097107]
[-30.85131836 -253.69544983]
[-15.74012661 -256.12658691]
[-1.23371398 -251.24575806]
[9.33445358 -240.17451477]
[13.53588772 -225.45695496]
[10.40512943 -210.47506714]
[0.66160530 -198.67158508]
[6.52438402 -184.86477661]
[12.38716316 -171.05798340]
[24.48346710 -162.36724854]
[22.75546455 -146.64070129]
[28.61824417 -132.83389282]
[34.48102188 -119.02708435]
[40.34380341 -105.22028351]
[46.20658112 -91.41348267]
[48.85832977 -90.25334930]
[51.18636703 -87.92239380]
[52.72286224 -84.54752350]
[53.05825806 -80.42957306]
[51.90233231 -76.01648712]
[56.43637848 -61.71814728]
[60.97042847 -47.41981125]
[65.50447083 -33.12147522]
[70.03852081 -18.82313919]
[74.57257080 -4.52480316]
[79.10661316 9.77353287]
[83.80921173 24.01732445]
[88.67970276 38.20458221]
[93.55020142 52.39184189]
[98.42069244 66.57910156]
[103.29118347 80.76635742]
[124.61964417 98.76755524]
[136.77569580 107.55564880]
[148.93173218 116.34373474]
[161.08778381 125.13182831]
[161.37132263 110.13450623]
[173.76159668 101.67985535]
[187.82987976 106.88404083]
[191.73507690 121.36676788]
[182.19018555 132.93815613]
[197.13894653 134.17684937]
[209.03544617 123.77257538]
[224.79867554 124.91108704]
[235.07658386 136.91693115]
[233.77148438 152.66723633]
[221.65765381 162.81764221]
[205.92201233 161.34608459]
[195.90025330 149.12561035]
[180.95149231 147.88691711]
[192.68043518 157.23742676]
[202.21292114 168.81895447]
[209.13366699 182.12696838]
[213.14120483 196.58171082]
[214.06091309 211.55348206]
[211.85275269 226.39006042]
[206.61291504 240.44509888]
[198.56965637 253.10630798]
[188.07337952 263.82208252]
[175.58134460 272.12567139]
[161.63777161 277.65527344]
[146.85006714 280.17001343]
[131.86245728 279.56033325]
[117.32787323 275.85281372]
[103.87947845 269.20898438]
[92.10315704 259.91821289]
[82.51191711 248.38529968]
[75.52359772 235.11264038]
[71.44264221 220.67845154]
[70.44683075 205.71154785]
[72.57953644 190.86393738]
[77.74786377 176.78244019]
[85.72664642 164.08052063]
[96.16831207 153.31149292]
[108.61796570 144.94453430]
[122.53325653 139.34411621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 14]
[6 13]
[31 88]
[32 87]
[33 86]
[34 85]
[35 84]
[37 83]
[38 82]
[39 81]
[40 80]
[41 79]
[42 78]
[43 77]
[44 72]
[45 71]
[46 70]
[47 69]
[48 68]
[50 66]
[51 65]
[52 64]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
