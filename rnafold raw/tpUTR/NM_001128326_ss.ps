%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 10:51:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUUUGCUUGCAUCUGCUGGCUAUCAGAUACAGACAAAACAUGAUCGAUGCAUCCAGCAGUAAUAAUCUUCUUCCUGAAAGCCAUGGAUUCUUCAGCAGGUCAGAAUGGUCUGAUAUACAGUAACCCCCAAUUUUCUUAAUAAAAUAAAACUCUUUUUCUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[256.66705322 209.03517151]
[247.48907471 197.17074585]
[238.31108093 185.30633545]
[226.89125061 175.58071899]
[213.71685791 168.40887451]
[200.54246521 161.23703003]
[187.36807251 154.06518555]
[174.12680054 147.01757812]
[160.81983948 140.09481812]
[147.51286316 133.17207336]
[134.20588684 126.24931335]
[120.89891815 119.32656097]
[100.49214172 130.86422729]
[76.30561829 123.35652924]
[64.34278107 98.91908264]
[49.49182892 101.02841187]
[34.64088058 103.13774109]
[19.78992844 105.24706268]
[4.93897820 107.35639191]
[-9.91197205 109.46572113]
[-24.76292229 111.57505035]
[-40.00305176 124.72678375]
[-57.63228607 116.84424591]
[-72.39338684 119.51069641]
[-87.15447998 122.17715454]
[-101.91558075 124.84360504]
[-109.84443665 129.46688843]
[-116.97924805 127.41864777]
[-131.78788757 129.80696106]
[-146.59654236 132.19526672]
[-154.61096191 136.66859436]
[-161.70597839 134.48649597]
[-176.55693054 136.59582520]
[-182.89607239 150.66062927]
[-195.84533691 159.04634094]
[-211.27267456 159.07707214]
[-224.25526428 150.74305725]
[-230.65040588 136.70362854]
[-228.41744995 121.43872070]
[-218.26890564 109.81930542]
[-203.44316101 105.55310822]
[-188.67102051 110.00144958]
[-178.66625977 121.74488068]
[-163.81530762 119.63555145]
[-148.98484802 117.38662720]
[-134.17620850 114.99831390]
[-119.36756134 112.61000061]
[-104.58203888 110.08250427]
[-89.82093811 107.41605377]
[-75.05983734 104.74960327]
[-60.29874039 102.08314514]
[-55.21934509 93.15650177]
[-45.85844421 88.42063141]
[-35.22047043 89.66770172]
[-26.87225151 96.72409821]
[-12.02130032 94.61476898]
[2.82965040 92.50543976]
[17.68060112 90.39611816]
[32.53155136 88.28678894]
[47.38250351 86.17745972]
[62.23345184 84.06813049]
[48.18925095 78.79931641]
[33.31762695 80.75756836]
[19.20082092 75.68649292]
[8.97472095 64.71257019]
[4.91093731 50.27354050]
[7.91219234 35.57685852]
[17.31179237 23.88722420]
[31.02172279 17.80135727]
[45.99648285 18.67115974]
[58.90960312 26.30341911]
[66.89257812 39.00271225]
[68.17213440 53.94775391]
[76.33277130 66.53361511]
[75.20512390 51.57606506]
[74.07746887 36.61851120]
[72.80918121 21.67222404]
[71.40036774 6.73853016]
[60.00738525 -4.55658340]
[61.87803650 -20.49020386]
[75.57730865 -28.83941841]
[90.59629822 -23.19942856]
[95.41371918 -7.89674759]
[86.33406067 5.32971430]
[87.74287415 20.26340866]
[91.51797485 26.65476799]
[89.03502655 35.49085999]
[90.16267395 50.44841385]
[91.29032898 65.40596771]
[100.24940491 65.22831726]
[108.74002838 67.27548218]
[116.23345184 71.30276489]
[122.29284668 76.94609070]
[126.59850311 83.75209045]
[128.96394348 91.21305847]
[129.34208679 98.80406952]
[127.82167053 106.01959229]
[141.12864685 112.94234467]
[154.43560791 119.86509705]
[167.74258423 126.78784943]
[181.04956055 133.71060181]
[190.14981079 134.90515137]
[194.53991699 140.89079285]
[207.71430969 148.06263733]
[220.88870239 155.23448181]
[234.06309509 162.40631104]
[237.67216492 147.25811768]
[250.83421326 140.82206726]
[263.32733154 146.51908875]
[277.77273560 142.47804260]
[292.21813965 138.43699646]
[306.58499146 134.12493896]
[320.86819458 129.54339600]
[335.15136719 124.96184540]
[343.73764038 111.40989685]
[359.70141602 109.81672668]
[370.79660034 121.40448761]
[368.51196289 137.28402710]
[354.60006714 145.27394104]
[339.73291016 139.24502563]
[325.44973755 143.82658386]
[311.16653442 148.40812683]
[308.20895386 152.20761108]
[302.81588745 154.16432190]
[296.25918579 152.88241577]
[281.81378174 156.92346191]
[267.36837769 160.96450806]
[262.14944458 171.44819641]
[250.17550659 176.12834167]
[259.35348511 187.99276733]
[268.53149414 199.85717773]
[281.77423096 192.73822021]
[296.00814819 187.89619446]
[310.84494019 185.46316528]
[325.87982178 185.50553894]
[340.70266724 188.02215576]
[354.90908813 192.94433594]
[368.11148071 200.13781738]
[379.94973755 209.40635681]
[390.10086060 220.49710083]
[398.28793335 233.10748291]
[404.28759766 246.89349365]
[407.93618774 261.47903442]
[409.13415527 276.46618652]
[407.84884644 291.44607544]
[404.11529541 306.01010132]
[398.03536987 319.76089478]
[389.77493286 332.32333374]
[379.55932617 343.35473633]
[367.66726685 352.55410767]
[354.42315674 359.67050171]
[340.18829346 364.50979614]
[325.35104370 366.93997192]
[310.31616211 366.89468384]
[295.49380493 364.37524414]
[281.28833008 359.45031738]
[268.08731079 352.25427246]
[256.25085449 342.98345947]
[246.10186768 331.89074707]
[237.91723633 319.27880859]
[231.92022705 305.49163818]
[228.27444458 290.90539551]
[227.07934570 275.91802979]
[228.36755371 260.93835449]
[232.10391235 246.37506104]
[238.18647766 232.62544250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 131]
[2 130]
[3 129]
[4 106]
[5 105]
[6 104]
[7 103]
[8 101]
[9 100]
[10 99]
[11 98]
[12 97]
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[23 51]
[24 50]
[25 49]
[26 48]
[28 47]
[29 46]
[30 45]
[32 44]
[33 43]
[74 89]
[75 88]
[76 87]
[77 85]
[78 84]
[109 127]
[110 126]
[111 125]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
