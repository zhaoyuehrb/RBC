%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:40:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUGGCGCCGCCCUUCCCGCCCGUUGCUGCUGUGAUCCGUAGUAAUAAAUUCUCAGAGGACUCAGCCUUU\
) } def
/len { sequence length } bind def

/coor [
[86.29894257 235.93675232]
[74.17613983 226.25082397]
[70.09430695 211.28024292]
[75.62298584 196.78150940]
[88.63629913 188.32968140]
[89.29058838 173.34396362]
[89.94487762 158.35823059]
[78.19272614 149.24642944]
[74.00998688 134.79067993]
[79.20205688 120.47650146]
[91.97483063 111.86473846]
[85.68968964 99.37519836]
[93.03944397 87.48097229]
[93.69374084 72.49524689]
[94.34803009 57.50952530]
[95.00231934 42.52379990]
[79.78826141 36.51776886]
[67.49240875 25.76918411]
[59.53092194 11.53837013]
[56.81322479 -4.51460838]
[59.63817596 -20.52359200]
[67.66127777 -34.63326263]
[79.93661499 -45.21416473]
[95.02833557 -51.05087662]
[94.37404633 -66.03659821]
[93.71974945 -81.02232361]
[93.06546021 -96.00804138]
[92.41117096 -110.99376678]
[91.75688171 -125.97949219]
[91.10259247 -140.96520996]
[90.44829559 -155.95094299]
[77.43498993 -164.40277100]
[71.90630341 -178.90150452]
[75.98814392 -193.87208557]
[88.11094666 -203.55801392]
[103.61325073 -204.23486328]
[116.53411102 -195.64234924]
[121.90518188 -181.08450317]
[117.66118622 -166.15908813]
[105.43402100 -156.60522461]
[106.08831024 -141.61950684]
[106.74259949 -126.63378143]
[107.39689636 -111.64805603]
[108.05118561 -96.66233826]
[108.70547485 -81.67661285]
[109.35976410 -66.69088745]
[110.01405334 -51.70516586]
[123.34918213 -48.20749664]
[135.13224792 -41.01789856]
[144.36502075 -30.73396492]
[150.26199341 -18.21590424]
[152.31727600 -4.51460838]
[150.34791565 9.21657562]
[144.51019287 21.81892967]
[135.28720093 32.22614288]
[123.44894409 39.55453873]
[109.98804474 43.17809296]
[109.33375549 58.16381454]
[108.67945862 73.14953613]
[108.02516937 88.13526154]
[114.31031036 100.62480164]
[106.96055603 112.51902771]
[118.93415833 122.21124268]
[122.85890198 136.92347717]
[117.43218231 150.95965576]
[104.93060303 159.01252747]
[104.27631378 173.99824524]
[103.62202454 188.98396301]
[115.84918213 198.53782654]
[120.09317780 213.46324158]
[114.72210693 228.02110291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 68]
[6 67]
[7 66]
[11 62]
[13 60]
[14 59]
[15 58]
[16 57]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
