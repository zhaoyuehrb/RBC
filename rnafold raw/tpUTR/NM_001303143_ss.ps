%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 15:11:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUACUGAAAACUGAAUCUUUAUUACGUGUCCUCUUUUAUUUAUUAGAAGACUGUGUAUAAUAAACACUACUAAAUUUUUAAAAUUUGA\
) } def
/len { sequence length } bind def

/coor [
[123.79669952 175.68937683]
[116.54407501 177.59806824]
[109.14363098 178.81344604]
[101.66150665 179.32467651]
[94.16452789 179.12719727]
[86.71968842 178.22274780]
[79.39350128 176.61943054]
[72.25141907 174.33157349]
[65.35726166 171.37959290]
[58.77260971 167.78988647]
[52.55630493 163.59451294]
[46.76387787 158.83094788]
[41.44708633 153.54177856]
[36.65343094 147.77423096]
[32.42573929 141.57986450]
[28.80178642 135.01399231]
[25.81394768 128.13529968]
[23.48891830 121.00523376]
[21.84746933 113.68749237]
[20.90426826 106.24746704]
[20.66774178 98.75162506]
[21.14000320 91.26692963]
[22.31683350 83.86026001]
[24.18771553 76.59779358]
[26.73593903 69.54441071]
[29.93873215 62.76313400]
[33.76748276 56.31454468]
[38.18798065 50.25625610]
[43.16073608 44.64240265]
[48.64131546 39.52313614]
[54.58075333 34.94419479]
[60.92598724 30.94649124]
[67.62032318 27.56573868]
[74.60395813 24.83214378]
[81.81448364 22.77013206]
[79.77198792 7.90984201]
[77.72948456 -6.95044708]
[75.68698883 -21.81073570]
[73.64448547 -36.67102432]
[71.60198975 -51.53131485]
[69.55948639 -66.39160156]
[57.69655991 -77.19209290]
[58.88804626 -93.19084167]
[72.21993256 -102.11497498]
[87.46514893 -97.11866760]
[92.92885590 -82.03466034]
[84.41977692 -68.43410492]
[86.46228027 -53.57381439]
[88.50477600 -38.71352386]
[90.54727936 -23.85323524]
[92.58977509 -8.99294662]
[94.63227844 5.86734247]
[96.67477417 20.72763062]
[125.52276611 24.87507820]
[150.92697144 39.15914917]
[169.45957947 61.65248489]
[183.21775818 55.67646790]
[196.97592163 49.70045471]
[210.73408508 43.72443771]
[215.00733948 28.68204880]
[227.97883606 19.94853592]
[243.52383423 21.64759064]
[254.30247498 32.97697449]
[255.22540283 48.58729935]
[245.85684204 61.10784531]
[230.62034607 64.62679291]
[216.71011353 57.48260498]
[202.95193481 63.45862198]
[189.19377136 69.43463898]
[175.43559265 75.41065216]
[179.28469849 96.98294830]
[177.08615112 118.78538513]
[169.00767517 139.15490723]
[155.66545105 156.53779602]
[165.13177490 168.17346191]
[174.59809875 179.80914307]
[184.06440735 191.44480896]
[193.53073120 203.08047485]
[202.99705505 214.71614075]
[212.46336365 226.35180664]
[227.14947510 234.82263184]
[223.07521057 251.27975464]
[206.13337708 251.92050171]
[200.82769775 235.81813049]
[191.36138916 224.18246460]
[181.89506531 212.54679871]
[172.42874146 200.91111755]
[162.96241760 189.27545166]
[153.49610901 177.63978577]
[144.02978516 166.00411987]
[137.60122681 169.86639404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[56 70]
[57 69]
[58 68]
[59 67]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
