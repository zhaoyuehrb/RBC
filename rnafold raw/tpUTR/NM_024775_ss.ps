%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 02:11:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCCAGGAAGUGUGAACAUACUGAUAGAAAAAGACUAUAUUUUAUCCCUCAUAAAAUGUUUUAAAUGUAA\
) } def
/len { sequence length } bind def

/coor [
[138.10317993 141.10546875]
[126.72859192 131.32698059]
[115.35400391 121.54849243]
[103.97941589 111.77001190]
[113.77446747 123.13034058]
[113.25369263 138.12129211]
[102.69391632 148.77452087]
[87.70812988 149.42733765]
[76.26194763 139.73275757]
[74.43953705 124.84386444]
[83.20883179 112.67527771]
[68.24008179 113.64290619]
[53.27132034 114.61053467]
[38.30256271 115.57816315]
[23.33380508 116.54578400]
[9.99788570 126.08964539]
[-4.82144403 119.06686401]
[-5.87932777 102.70187378]
[7.91249514 93.82957458]
[22.36617851 101.57702637]
[37.33493805 100.60940552]
[52.30369568 99.64177704]
[67.27245331 98.67414856]
[82.24121094 97.70652008]
[92.50000000 86.76316071]
[92.50000000 71.76316071]
[92.50000000 56.76315689]
[92.50000000 41.76315689]
[92.50000000 26.76315880]
[92.50000000 11.76315880]
[92.50000000 -3.23684144]
[79.15887451 -10.84669495]
[71.42390442 -24.11567497]
[71.37576294 -39.47449112]
[79.02739716 -52.79170227]
[92.32055664 -60.48503876]
[107.67944336 -60.48503876]
[120.97260284 -52.79170227]
[128.62423706 -39.47449112]
[128.57609558 -24.11567497]
[120.84112549 -10.84669495]
[107.50000000 -3.23684144]
[107.50000000 11.76315880]
[107.50000000 26.76315880]
[107.50000000 41.76315689]
[107.50000000 56.76315689]
[107.50000000 71.76316071]
[107.50000000 86.76316071]
[113.75790405 100.39542389]
[125.13249207 110.17390442]
[136.50708008 119.95239258]
[147.88166809 129.73088074]
[160.43992615 121.35276031]
[174.79322815 116.67460632]
[189.87648010 116.04355621]
[204.57038879 119.50643921]
[217.78457642 126.80628204]
[228.53846741 137.40139771]
[236.03402710 150.50555420]
[239.71507263 165.14634705]
[239.30842590 180.23730469]
[234.84425354 194.65859985]
[226.65383911 207.34007263]
[215.34497070 217.34066772]
[201.75683594 223.91828918]
[186.89775085 226.58482361]
[171.87037659 225.14237976]
[157.78984070 219.69802856]
[145.70100403 210.65576172]
[136.50094604 198.68656921]
[130.87237549 184.67864990]
[129.23295593 169.67149353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[3 50]
[4 49]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
