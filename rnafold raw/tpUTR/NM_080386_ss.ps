%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 07:37:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGGGUGUGGUGGGUUCUCCCCUGCCACCCCCGGGAUGGCUGCUUCCAAGUUGUUUGCAAUUAAAGGUUCUGUAUAAAACCAA\
) } def
/len { sequence length } bind def

/coor [
[69.84386444 116.15652466]
[55.39061356 120.16944885]
[40.93736267 124.18238068]
[26.48411179 128.19529724]
[18.67139053 141.67117310]
[3.95657492 145.53495789]
[-8.84246349 138.00367737]
[-23.29571342 142.01660156]
[-37.74896240 146.02952576]
[-42.92648697 150.72749329]
[-48.81563568 151.76083374]
[-53.39104080 149.76992798]
[-68.09617615 152.72947693]
[-76.10788727 157.59342957]
[-83.38516998 155.52030945]
[-98.18756866 157.94705200]
[-112.98996735 160.37377930]
[-125.32871246 171.17596436]
[-140.76374817 165.63597107]
[-143.41683960 149.45285034]
[-130.55870056 139.27442932]
[-115.41669464 145.57138062]
[-100.61430359 143.14465332]
[-85.81190491 140.71792603]
[-71.05573273 138.02433777]
[-56.35059357 135.06478882]
[-41.76188660 131.57627869]
[-27.30863762 127.56335449]
[-12.85538864 123.55043030]
[-5.77122211 110.49860382]
[8.82926273 106.22303009]
[22.47118759 113.74205017]
[36.92443848 109.72912598]
[51.37768555 105.71620178]
[65.83094025 101.70327759]
[72.76447296 79.29608917]
[92.50000000 66.62072754]
[92.50000000 51.62072372]
[92.50000000 36.62072372]
[84.76270294 22.82055283]
[92.50000000 10.09327984]
[83.83629608 -3.83052325]
[91.80042267 -18.16595840]
[108.19957733 -18.16595840]
[116.16370392 -3.83052325]
[107.50000000 10.09327984]
[115.23729706 22.82055283]
[107.50000000 36.62072372]
[107.50000000 51.62072372]
[107.50000000 66.62072754]
[117.63786316 70.68563843]
[125.97792816 77.73852539]
[139.23060608 70.71240234]
[152.48329163 63.68627167]
[165.73597717 56.66014481]
[178.98864746 49.63401794]
[187.23234558 35.45750427]
[203.62834167 35.77907181]
[211.30984497 50.26791382]
[202.37477112 64.01915741]
[186.01478577 62.88669968]
[172.76210022 69.91282654]
[159.50941467 76.93894958]
[146.25672913 83.96508026]
[133.00405884 90.99120331]
[134.16526794 98.22226715]
[133.76080322 105.53480530]
[131.80918884 112.59369659]
[128.39987183 119.07545471]
[138.71536255 129.96539307]
[149.03085327 140.85531616]
[159.34635925 151.74525452]
[174.71446228 149.60031128]
[188.39242554 156.92784119]
[195.12078857 170.91029358]
[192.31236267 186.17109680]
[181.04702759 196.84219360]
[165.65655518 198.82029724]
[152.05888367 191.34480286]
[145.48260498 177.29019165]
[148.45642090 162.06074524]
[138.14093018 151.17080688]
[127.82543182 140.28088379]
[117.50994110 129.39094543]
[104.54467773 133.90829468]
[90.84745789 132.96447754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[7 29]
[8 28]
[9 27]
[12 26]
[13 25]
[15 24]
[16 23]
[17 22]
[37 50]
[38 49]
[39 48]
[41 46]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[69 84]
[70 83]
[71 82]
[72 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
