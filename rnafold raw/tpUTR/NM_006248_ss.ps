%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 06:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCUCCCCAGUCAUCUAGGAUUCAAUGACAGGAAGUGAAUAAGAAGAUGAGAGUGAUUCAAAUGAUUCAAAUGCCAUGACAUUGGAAAAAGGUCAUCAUAGCUCUAACUUCUGUAUACCAAUAAAAUAAUUAGCUUGCAA\
) } def
/len { sequence length } bind def

/coor [
[78.23336029 143.81933594]
[75.03140259 129.16506958]
[83.69062805 116.91739655]
[71.93386078 126.23288727]
[65.92261505 140.86763000]
[51.14205933 142.70730591]
[39.38529587 152.02279663]
[27.62852859 161.33830261]
[26.98974609 172.29403687]
[20.52386284 180.88684082]
[10.58953094 184.38801575]
[0.59251320 181.85597229]
[-11.56208229 190.64607239]
[-23.71667671 199.43615723]
[-35.87127304 208.22625732]
[-48.02586746 217.01635742]
[-46.37419510 232.28617859]
[-52.59339142 246.32958984]
[-65.01052094 255.36895752]
[-80.28545380 256.97277832]
[-94.30928802 250.70957947]
[-103.30970001 238.26417542]
[-104.86561584 222.98429871]
[-98.55850220 208.98014832]
[-86.08494568 200.01879883]
[-70.80026245 198.51078796]
[-56.81596375 204.86175537]
[-44.66136932 196.07167053]
[-32.50677490 187.28157043]
[-20.35217857 178.49147034]
[-8.19758415 169.70137024]
[-1.69894314 151.53804016]
[18.31303215 149.58152771]
[30.06979942 140.26603699]
[41.82656479 130.95054626]
[46.99688339 116.98210907]
[62.61836243 114.47612000]
[74.37512970 105.16062927]
[76.74187469 97.39550781]
[81.14353180 91.53919983]
[86.66185760 88.01488495]
[92.33727264 86.87754059]
[97.30180359 87.83557129]
[100.89311981 90.31687927]
[105.74720001 76.12399292]
[110.60128784 61.93111420]
[115.45536804 47.73823547]
[120.30945587 33.54535294]
[113.00973511 22.17094994]
[113.61022186 8.86427498]
[121.66544342 -1.49830544]
[134.03942871 -5.24949789]
[139.20413208 -19.33232117]
[144.36882019 -33.41514587]
[149.53352356 -47.49797058]
[154.69821167 -61.58079529]
[145.78900146 -69.83724976]
[140.23178101 -80.59904480]
[138.66696167 -92.57437897]
[141.25738525 -104.33481598]
[147.67161560 -114.48563385]
[157.12619019 -121.83123779]
[168.48126221 -125.51598358]
[180.37796021 -125.12377167]
[186.45893860 -138.83587646]
[192.53991699 -152.54797363]
[198.62088013 -166.26008606]
[204.70185852 -179.97218323]
[210.78283691 -193.68428040]
[201.20098877 -204.12884521]
[196.35206604 -217.40136719]
[196.94081116 -231.47616577]
[202.84471130 -244.21859741]
[213.13769531 -253.70872498]
[226.23512268 -258.53070068]
[240.13783264 -257.98385620]
[246.51855469 -271.55905151]
[252.89927673 -285.13427734]
[247.30412292 -299.91500854]
[253.87538147 -314.28839111]
[268.71444702 -319.72695923]
[283.01754761 -313.00408936]
[288.29891968 -298.10836792]
[281.42523193 -283.87713623]
[266.47448730 -278.75354004]
[260.09375000 -265.17834473]
[253.71304321 -251.60313416]
[264.01403809 -239.43339539]
[268.00909424 -223.93803406]
[264.85348511 -208.19099426]
[255.12634277 -195.33888245]
[240.72492981 -187.97221375]
[224.49493408 -187.60331726]
[218.41395569 -173.89120483]
[212.33299255 -160.17910767]
[206.25201416 -146.46701050]
[200.17103577 -132.75489807]
[194.09007263 -119.04280090]
[205.40806580 -105.00041199]
[208.11523438 -87.08382416]
[201.38905334 -70.16777802]
[186.98539734 -58.89815521]
[168.78103638 -56.41609955]
[163.61634827 -42.33327484]
[158.45164490 -28.25045204]
[153.28695679 -14.16762829]
[148.12225342 -0.08480377]
[155.84251404 14.81694221]
[150.32334900 31.02248383]
[134.50233459 38.39943695]
[129.64825439 52.59231949]
[124.79416656 66.78520203]
[119.94008636 80.97808075]
[115.08599854 95.17095947]
[117.70874786 109.93988800]
[127.15282440 121.59362030]
[136.59689331 133.24734497]
[152.07051086 135.03758240]
[161.48213196 146.99066162]
[159.68006897 161.73135376]
[174.37994385 167.58148193]
[176.38186646 182.34094238]
[185.82594299 193.99467468]
[195.27001953 205.64840698]
[211.01246643 207.04516602]
[221.09217834 219.21788025]
[219.52905273 234.94467163]
[207.25045776 244.89512634]
[191.54106140 243.16581726]
[181.72097778 230.78271484]
[183.61628723 215.09248352]
[174.17221069 203.43875122]
[164.72813416 191.78501892]
[150.70375061 186.76843262]
[148.02633667 171.17543030]
[133.23213196 169.88418579]
[123.48848724 158.20018005]
[124.94316101 142.69142151]
[115.49909210 131.03768921]
[106.05501556 119.38395691]
[111.83698273 133.22480774]
[105.51806641 146.82888794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 38]
[4 37]
[6 35]
[7 34]
[8 33]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[44 114]
[45 113]
[46 112]
[47 111]
[48 110]
[52 107]
[53 106]
[54 105]
[55 104]
[56 103]
[64 98]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
[76 87]
[77 86]
[78 85]
[115 140]
[116 139]
[117 138]
[120 135]
[122 133]
[123 132]
[124 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
