%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 17:03:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUACAGAUGCAUUAUCCAGAACUGAAGUUGCCCUACUUUUAACUUUGAACUUGGCUAGUUCAAAGAUAGACUCUUCUUUUGUAAAGUAAAUAAAUUCUUCAAAAUG\
) } def
/len { sequence length } bind def

/coor [
[35.53223419 371.31887817]
[27.35744095 383.95840454]
[16.80541992 394.69338989]
[4.30827141 403.08422852]
[-9.62225437 408.78732300]
[-24.41571045 411.56912231]
[-39.46631622 411.31576538]
[-54.15775299 408.03759766]
[-67.88842773 401.86883545]
[-80.09606171 393.06210327]
[-90.28076935 381.97802734]
[-98.02549744 369.07049561]
[-103.01309204 354.86807251]
[-105.03932953 339.95236206]
[-104.02122498 324.93408203]
[-100.00047302 310.42828369]
[-93.14171600 297.02893066]
[-83.72582245 285.28475952]
[-72.13836670 275.67663574]
[-58.85384750 268.59805298]
[-44.41625595 264.33883667]
[-29.41680145 263.07345581]
[-14.46970272 264.85366821]
[-0.18703581 269.60656738]
[7.31296396 256.61621094]
[14.81296444 243.62582397]
[22.31296349 230.63543701]
[29.81296349 217.64505005]
[19.42170143 204.80656433]
[14.68547344 188.94543457]
[16.34299850 172.43894958]
[24.17252922 157.77207947]
[37.02106476 147.16343689]
[52.97406387 142.22964478]
[69.64070892 143.73905945]
[76.37269592 130.33457947]
[83.10468292 116.93008423]
[89.83666992 103.52559662]
[93.71895599 89.03670502]
[94.59112549 74.06208038]
[95.46330261 59.08746338]
[96.33547211 44.11283875]
[89.41367340 29.88613129]
[97.87790680 17.63027573]
[98.75007629 2.65565300]
[99.62225342 -12.31896973]
[100.49442291 -27.29359245]
[101.36659241 -42.26821518]
[102.23876953 -57.24283600]
[103.11093903 -72.21746063]
[103.98311615 -87.19207764]
[104.85528564 -102.16670227]
[95.30697632 -115.05892181]
[99.57232666 -130.52458191]
[114.37931824 -136.69973755]
[128.36929321 -128.84735107]
[130.81034851 -112.99108887]
[119.82991028 -101.29453278]
[118.95773315 -86.31990814]
[118.08556366 -71.34528351]
[117.21339417 -56.37066269]
[116.34121704 -41.39604187]
[115.46904755 -26.42141914]
[114.59687042 -11.44679737]
[113.72470093 3.52782536]
[112.85253143 18.50244713]
[119.83671570 31.65807152]
[111.31009674 44.98501205]
[110.43791962 59.95963287]
[109.56575012 74.93425751]
[108.69358063 89.90888214]
[118.62580872 78.66829681]
[132.03790283 71.95146179]
[146.98814392 70.73078918]
[161.31217957 75.18299866]
[172.93626404 84.66353607]
[180.17758179 97.79987335]
[181.98776245 112.69024658]
[178.10475159 127.17894745]
[169.09071350 139.16839600]
[156.25061035 146.92288208]
[141.44335938 149.31974792]
[126.81260681 146.01200867]
[114.47649384 137.47853088]
[106.22093964 124.95471191]
[103.24115753 110.25758362]
[96.50917053 123.66207123]
[89.77718353 137.06655884]
[83.04519653 150.47105408]
[92.48919678 160.26182556]
[98.40726471 172.48477173]
[100.22451782 185.91973877]
[97.77463531 199.23051453]
[91.31499481 211.09770203]
[81.49969482 220.34956360]
[69.31333923 226.07763672]
[55.97231674 227.72596741]
[42.80334473 225.14505005]
[35.30334473 238.13543701]
[27.80334473 251.12582397]
[20.30334473 264.11621094]
[12.80334568 277.10656738]
[24.06083298 287.09927368]
[33.07608795 299.15374756]
[39.47994614 312.77633667]
[43.01016235 327.40927124]
[43.52219009 342.45327759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[35 89]
[36 88]
[37 87]
[38 86]
[39 71]
[40 70]
[41 69]
[42 68]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
