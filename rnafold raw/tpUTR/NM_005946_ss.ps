%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Sep 10 17:14:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCCGGACAGCCCUGCUCGAAGAUAUAGAAAGAGUGACCUGCACAAACUUGGAAUUUUUUUUCCAUACAACCCUGACCCAUUUACUGUAUUUUUUUUAAUGAAAUAUGUGAAUGAUAAUAAAAGUUGCUGACUUAA\
) } def
/len { sequence length } bind def

/coor [
[75.95726013 110.92726898]
[75.95888519 101.59207916]
[61.42674637 97.87496948]
[46.89460754 94.15785217]
[31.60750961 98.23402405]
[21.19457436 87.58414459]
[6.66243696 83.86702728]
[-18.07780457 102.03149414]
[-49.87058640 85.91169739]
[-63.62875366 91.88771057]
[-77.38692474 97.86372375]
[-83.25794983 112.29178619]
[-97.29582214 118.15632629]
[-111.01458740 112.47028351]
[-117.70923615 118.81364441]
[-125.15461731 118.42177582]
[-139.04525757 124.08306885]
[-152.93589783 129.74435425]
[-166.82652283 135.40563965]
[-167.26962280 150.62811279]
[-173.87181091 164.35148621]
[-185.48919678 174.19812012]
[-200.10902405 178.46200562]
[-215.19830322 176.40441895]
[-228.14271545 168.38183594]
[-236.69958496 155.78422546]
[-239.38638306 140.79418945]
[-235.73757935 126.00885773]
[-226.38537598 113.98986816]
[-212.95008850 106.81958008]
[-197.75947571 105.74029541]
[-183.44537354 110.93901062]
[-172.48782349 121.51500702]
[-158.59718323 115.85371399]
[-144.70654297 110.19242859]
[-130.81590271 104.53114319]
[-116.99060059 98.71211243]
[-111.78237915 84.80491638]
[-97.91477203 78.54840088]
[-83.36293793 84.10556030]
[-69.60477448 78.12953949]
[-55.84660339 72.15352631]
[-53.33500290 65.08657074]
[-68.27398682 63.73499680]
[-83.27379608 63.65916443]
[-91.89281464 51.38265991]
[-86.86920166 37.24889755]
[-72.43553925 33.16608810]
[-60.75310898 42.57326889]
[-48.31180954 50.95265198]
[-45.80021286 43.88569641]
[-52.70119095 30.56741905]
[-59.60216522 17.24913979]
[-66.50314331 3.93086219]
[-73.40411377 -9.38741589]
[-88.54181671 -13.92895317]
[-95.96076965 -27.88368988]
[-91.25944519 -42.97253036]
[-77.22705078 -50.24353027]
[-62.18875885 -45.38293457]
[-55.06652069 -31.27445221]
[-60.08583832 -16.28839111]
[-53.18486023 -2.97011352]
[-46.28388596 10.34816456]
[-39.38291168 23.66644287]
[-32.48193359 36.98472214]
[-22.34673119 35.25140762]
[-12.52222729 36.43080902]
[-3.79751945 40.20997620]
[3.18753052 46.07582092]
[7.98884344 53.37297821]
[10.38450050 61.37108231]
[10.37955379 69.33488464]
[24.91169167 73.05200195]
[39.15935516 68.70995331]
[50.61172485 79.62570953]
[65.14385986 83.34282684]
[79.67600250 87.05994415]
[102.70999146 70.24018860]
[133.05633545 86.59186554]
[147.50009155 82.54491425]
[161.94386292 78.49796295]
[176.38761902 74.45101166]
[190.83137512 70.40406036]
[205.27513123 66.35710907]
[219.71890259 62.31015778]
[227.21493530 56.93746567]
[234.53761292 58.33949280]
[249.06976318 54.62237930]
[263.60189819 50.90526199]
[278.13403320 47.18814468]
[292.66616821 43.47102737]
[307.19830322 39.75391006]
[321.73043823 36.03679276]
[328.33651733 21.86308861]
[342.52951050 15.29858017]
[357.60794067 19.44283104]
[366.45223999 32.33905029]
[364.88638306 47.89803696]
[353.64974976 58.77331543]
[338.04788208 59.82991409]
[325.44757080 50.56893158]
[310.91543579 54.28604889]
[296.38330078 58.00316620]
[281.85113525 61.72028351]
[267.31900024 65.43740082]
[252.78686523 69.15451813]
[238.25473022 72.87163544]
[223.76585388 76.75392151]
[209.32208252 80.80087280]
[194.87832642 84.84782410]
[180.43457031 88.89477539]
[165.99081421 92.94172668]
[151.54705811 96.98867798]
[137.10328674 101.03562927]
[133.88217163 107.80868530]
[148.48959351 104.39942932]
[160.26274109 113.69421387]
[160.33636475 128.69403076]
[148.65504456 138.10395813]
[134.01484680 134.83825684]
[127.43991089 121.35481262]
[124.21878815 128.12786865]
[130.19480896 141.88603210]
[136.17082214 155.64421082]
[142.14683533 169.40237427]
[148.12284851 183.16055298]
[159.97895813 195.27951050]
[151.61569214 210.02713013]
[135.12924194 206.07325745]
[134.36468506 189.13656616]
[128.38867188 175.37838745]
[122.41265106 161.62022400]
[116.43663788 147.86206055]
[110.46061707 134.10388184]
[97.90527344 133.29060364]
[87.24942017 128.30110168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[6 74]
[7 73]
[9 42]
[10 41]
[11 40]
[14 37]
[16 36]
[17 35]
[18 34]
[19 33]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[80 115]
[81 114]
[82 113]
[83 112]
[84 111]
[85 110]
[86 109]
[88 108]
[89 107]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
[123 135]
[124 134]
[125 133]
[126 132]
[127 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
