%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 04:16:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCACAAUUUUGGCAAUUUUAAAGGAAGAUACAGAGAUGAUUGUACUUCAGAAUGACUGAAACCCAUAUACCACCCAAAAUCAAUUUUCUUGUACAACUGGUACACACUAAUAAACAAUUAAACAUAUGAGAUCAGAA\
) } def
/len { sequence length } bind def

/coor [
[111.76071167 147.32250977]
[93.55271912 149.61793518]
[75.31082916 144.97737122]
[69.41545868 158.77029419]
[68.90692139 167.97521973]
[63.22994614 172.80419922]
[57.02656937 186.46136475]
[59.15636826 202.72161865]
[45.97666550 212.48007202]
[31.04561234 205.69807434]
[29.72299194 189.35234070]
[43.36940384 180.25798035]
[49.57278442 166.60081482]
[55.62253952 152.87492371]
[61.51791763 139.08200073]
[57.81660461 132.55894470]
[46.03025055 141.83697510]
[34.24389267 151.11500549]
[23.94875336 162.02416992]
[9.05692959 160.22596741]
[1.65444243 147.17976379]
[7.74905920 133.47372437]
[22.39412880 130.23139954]
[36.40405655 124.87211609]
[50.41398239 119.51282501]
[46.71266937 112.98976898]
[31.84842300 110.97627258]
[16.98417664 108.96276855]
[2.11993027 106.94927216]
[-6.88856745 108.90791321]
[-13.05380726 104.72020721]
[-27.86913300 102.37368774]
[-42.68445969 100.02716827]
[-57.49978256 97.68065643]
[-68.37637329 108.74769592]
[-83.68628693 111.27480316]
[-97.54254150 104.29026031]
[-104.61712646 90.47975922]
[-102.18972015 75.15372467]
[-91.19371033 64.20532990]
[-75.85728455 61.84445190]
[-62.07761765 68.97889709]
[-55.15326691 82.86532593]
[-40.33794022 85.21184540]
[-25.52261543 87.55836487]
[-10.70729065 89.90487671]
[4.13342905 92.08502197]
[18.99767494 94.09852600]
[33.86192322 96.11202240]
[48.72616959 98.12551880]
[52.89267731 82.21360016]
[61.76062393 68.72756195]
[74.23412323 58.97662354]
[88.88120270 53.83100510]
[104.09684753 53.64648056]
[118.27848053 58.24617004]
[129.99473572 66.95947266]
[138.12974548 78.71192932]
[152.28799438 73.75774384]
[166.44624329 68.80355835]
[180.60449219 63.84936905]
[186.92970276 52.54683304]
[198.88815308 48.73888016]
[209.85786438 53.95847321]
[220.59164429 42.33537674]
[235.08695984 45.76104355]
[249.35281372 41.12578583]
[263.61865234 36.49053192]
[277.88449097 31.85527802]
[292.15036011 27.22002220]
[290.61096191 13.08200645]
[291.88848877 -1.07686591]
[295.93072510 -14.70104885]
[302.57711792 -27.25638390]
[311.56494141 -38.25103760]
[322.53985596 -47.25476837]
[335.06982422 -53.91577148]
[348.66207886 -57.97440338]
[362.78253174 -59.27333450]
[376.87677002 -57.76361465]
[390.39187622 -53.50653076]
[402.79794312 -46.67113113]
[413.60903931 -37.52748108]
[422.40219116 -26.43603516]
[428.83383179 -13.83339310]
[443.29327393 -17.82394600]
[457.75271606 -21.81449890]
[461.70010376 -36.59169006]
[472.44314575 -47.33803940]
[487.02581787 -51.23828888]
[501.50588989 -47.34170532]
[512.02056885 -36.79146957]
[526.47998047 -40.78202438]
[540.93945312 -44.77257538]
[555.39886475 -48.76313019]
[569.85833740 -52.75368118]
[578.99444580 -65.94123077]
[595.01019287 -66.87683868]
[605.61968994 -54.84280014]
[602.68420410 -39.07058716]
[588.45562744 -31.65929794]
[573.84887695 -38.29423904]
[559.38946533 -34.30368423]
[544.92999268 -30.31313324]
[530.47058105 -26.32258034]
[516.01110840 -22.33202744]
[512.39599609 -7.88222837]
[501.96417236 2.88961005]
[487.44525146 7.02089119]
[472.71112061 3.30579019]
[461.74328613 -7.35505533]
[447.28384399 -3.36450291]
[432.82440186 0.62604982]
[433.69311523 16.42948341]
[431.05880737 32.04279327]
[425.04788208 46.69871521]
[415.95281982 59.67636871]
[404.21789551 70.33672333]
[390.41741943 78.15406036]
[375.22766113 82.74189758]
[359.39376831 83.87210083]
[343.69317627 81.48622894]
[328.89733887 75.69852448]
[315.73394775 66.79049683]
[304.85119629 55.19716263]
[296.78561401 41.48587036]
[282.51974487 46.12112427]
[268.25390625 50.75637817]
[253.98806763 55.39163589]
[239.72221375 60.02688980]
[230.00881958 71.31844330]
[214.49311829 68.22431946]
[203.52270508 81.87648773]
[185.55868530 78.00762177]
[171.40042114 82.96180725]
[157.24217224 87.91599274]
[143.08392334 92.87017822]
[143.96676636 109.31612396]
[138.61724854 125.38942719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[6 13]
[7 12]
[26 50]
[27 49]
[28 48]
[29 47]
[31 46]
[32 45]
[33 44]
[34 43]
[58 137]
[59 136]
[60 135]
[61 134]
[64 132]
[66 130]
[67 129]
[68 128]
[69 127]
[70 126]
[85 113]
[86 112]
[87 111]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
