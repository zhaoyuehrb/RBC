%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Sep 11 14:22:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCCAAGACAGAAUAAUGAAUGGACUCAAACUGCCUUGGCUUCAGGGGAGUCCCGUCAGGACGUUGAGGACUUUUCGACCAAUUCAACCCUUUGCCCCACCUUUAUUAAAAUCUUAAACAACGGGUC\
) } def
/len { sequence length } bind def

/coor [
[85.79991913 115.73396301]
[72.45978546 122.59259796]
[62.91187668 138.28187561]
[45.46455765 136.86482239]
[32.29539490 144.04626465]
[19.12623405 151.22770691]
[5.95707321 158.40916443]
[-7.21208858 165.59060669]
[-15.62353420 178.99053955]
[-30.50170135 178.29096985]
[-43.67086411 185.47241211]
[-56.84002686 192.65385437]
[-57.21884918 203.49626160]
[-62.07825089 213.10507202]
[-70.45917511 219.73516846]
[-80.77024841 222.21470642]
[-91.08975983 220.15177917]
[-99.52375031 213.99462891]
[-113.18199158 220.19563293]
[-126.84023285 226.39663696]
[-132.16070557 241.27844238]
[-146.48139954 247.96371460]
[-161.30613708 242.48620605]
[-167.83963013 228.09562683]
[-162.20568848 213.32963562]
[-147.74682617 206.94865417]
[-133.04122925 212.73838806]
[-119.38298798 206.53738403]
[-105.72474670 200.33639526]
[-100.36862946 181.69869995]
[-82.83843231 172.72625732]
[-64.02146912 179.48469543]
[-50.85231018 172.30325317]
[-37.68314743 165.12181091]
[-30.21364975 152.23553467]
[-14.39353561 152.42144775]
[-1.22437370 145.23999023]
[11.94478798 138.05854797]
[25.11394882 130.87710571]
[38.28311157 123.69565582]
[42.03443527 112.12743378]
[53.03496552 106.05875397]
[65.60115051 109.25246429]
[78.94128418 102.39382935]
[84.18795013 81.37730408]
[107.54107666 73.38190460]
[105.35706329 58.54175568]
[103.17304230 43.70160675]
[100.98902130 28.86145592]
[98.80500793 14.02130508]
[96.62098694 -0.81884497]
[94.43697357 -15.65899563]
[92.25295258 -30.49914551]
[90.06893921 -45.33929825]
[86.17396545 -50.88818741]
[85.80294037 -56.69028473]
[88.15820312 -60.95335007]
[86.69931030 -75.88224030]
[85.24040985 -90.81111908]
[83.78151703 -105.74000549]
[73.80466461 -118.75517273]
[80.33677673 -133.79722595]
[96.65817261 -135.39221191]
[105.97880554 -121.89932251]
[98.71040344 -107.19890594]
[100.16929626 -92.27001953]
[101.62819672 -77.34113312]
[103.08708954 -62.41224670]
[104.90908813 -47.52331543]
[107.09310150 -32.68316269]
[109.27712250 -17.84301376]
[111.46114349 -3.00286245]
[113.64515686 11.83728790]
[115.82917786 26.67743874]
[118.01319122 41.51758957]
[120.19721222 56.35773849]
[122.38122559 71.19789124]
[122.91917419 56.20753860]
[130.60144043 43.32410812]
[143.53373718 35.72438812]
[158.52722168 35.28231812]
[171.88481140 42.10689926]
[180.31278992 54.51533127]
[181.73298645 69.44794464]
[175.79522705 83.22267151]
[163.96362305 92.44293213]
[149.15562439 94.83520508]
[135.02357483 89.81027985]
[148.01394653 97.31027985]
[161.00433350 104.81027985]
[173.99472046 112.31027985]
[189.81466675 112.50966644]
[196.96815491 125.57400513]
[209.95854187 133.07400513]
[222.94891357 140.57400513]
[233.38583374 129.69584656]
[246.12315369 121.63210297]
[260.42034912 116.85158539]
[275.44622803 115.63221741]
[290.32714844 118.04491425]
[304.19802856 123.94937897]
[316.25234985 133.00234985]
[325.78936768 144.67750549]
[332.25454712 158.29605103]
[335.27206421 173.06622314]
[334.66644287 188.12930298]
[330.47293091 202.60955811]
[322.93530273 215.66511536]
[312.49179077 226.53694153]
[299.74957275 234.59297180]
[285.44946289 239.36482239]
[270.42288208 240.57507324]
[255.54339600 238.15336609]
[241.67611694 232.24047852]
[229.62727356 223.18020630]
[220.09735107 211.49928284]
[213.64041138 197.87681580]
[210.63186646 183.10481262]
[211.24661255 168.04209900]
[215.44891357 153.56439209]
[202.45854187 146.06439209]
[189.46815491 138.56439209]
[174.57736206 138.90144348]
[166.49472046 125.30066681]
[153.50433350 117.80066681]
[140.51394653 110.30066681]
[127.52357483 102.80066681]
[117.10307312 118.92544556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[4 40]
[5 39]
[6 38]
[7 37]
[8 36]
[10 34]
[11 33]
[12 32]
[18 29]
[19 28]
[20 27]
[46 77]
[47 76]
[48 75]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[57 68]
[58 67]
[59 66]
[60 65]
[88 127]
[89 126]
[90 125]
[91 124]
[93 122]
[94 121]
[95 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
