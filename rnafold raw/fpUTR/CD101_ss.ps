%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUUUGUCACUCAACCUCUGAAUGUUAGUGACACUAUUGGGACGAAAAAGGACUGUGCUGGCCCAA\
) } def
/len { sequence length } bind def

/coor [
[131.44541931 184.05853271]
[126.74526215 169.81393433]
[122.04510498 155.56933594]
[117.34494781 141.32475281]
[112.64478302 127.08015442]
[85.39636993 122.45529938]
[76.31865692 99.54322815]
[62.18474197 94.52003479]
[48.05082703 89.49684143]
[33.91691208 84.47364807]
[19.78300095 79.45044708]
[5.64908600 74.42725372]
[-8.48482800 69.40406036]
[-17.96361542 69.44551086]
[-23.13882828 63.81716156]
[-37.02946854 58.15587234]
[-50.92010498 52.49458313]
[-64.03271484 60.79151154]
[-79.51566315 59.76287079]
[-91.41542816 49.80419540]
[-95.15631104 34.74480057]
[-89.29986572 20.37532806]
[-76.09802246 12.22113514]
[-60.62714767 13.41767597]
[-48.83611679 23.50485420]
[-45.25881577 38.60394669]
[-31.36817932 44.26523590]
[-17.47754097 49.92652130]
[-3.46163344 55.27014923]
[10.67228031 60.29334259]
[24.80619431 65.31653595]
[38.94010925 70.33972931]
[53.07402039 75.36292267]
[67.20793915 80.38611603]
[81.34185028 85.40930939]
[87.63659668 78.59465790]
[96.39560699 74.50069427]
[106.44338989 74.00020599]
[116.30623627 77.46004486]
[124.42833710 84.64512634]
[129.41566467 94.71382141]
[143.76356506 90.33912659]
[151.23533630 76.67127228]
[165.84846497 72.43910980]
[178.83262634 79.64653015]
[186.04074097 65.58172607]
[201.10838318 60.81290054]
[215.09619141 68.16931152]
[219.70544434 83.28652954]
[212.20156860 97.19577789]
[197.03645325 101.64495087]
[183.20732117 93.99443054]
[176.45321655 107.22006989]
[161.96473694 111.86102295]
[148.13824463 104.68702698]
[133.79035950 109.06171417]
[126.88938141 122.37998962]
[131.58953857 136.62458801]
[136.28970337 150.86918640]
[140.98985291 165.11378479]
[145.69001770 179.35836792]
[160.50978088 183.95773315]
[169.76879883 196.40965271]
[169.90678406 211.92611694]
[160.87068176 224.54072571]
[146.13504028 229.40290833]
[131.36604309 224.64305115]
[122.24265289 212.09141541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[4 58]
[5 57]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[15 28]
[16 27]
[17 26]
[41 56]
[42 55]
[45 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
