%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGACCCAAAGGGUGCAGGACGCCUGGUCUGCCUUGUGGGUCCUGGACGGAGCCCCUACCUCUGCAAAG\
) } def
/len { sequence length } bind def

/coor [
[197.72885132 174.92817688]
[198.70066833 163.64814758]
[185.60108948 156.34056091]
[172.50151062 149.03297424]
[159.40191650 141.72537231]
[146.30233765 134.41778564]
[133.20275879 127.11019135]
[120.10317230 119.80259705]
[107.00358582 112.49500275]
[93.02176666 112.50917816]
[85.68881989 100.60457611]
[72.58923340 93.29698944]
[59.48965073 85.98939514]
[46.39006805 78.68180084]
[33.29048538 71.37420654]
[27.40615082 71.50259399]
[22.67874527 69.36723328]
[19.82373238 65.88632202]
[19.03491402 62.13146973]
[7.01776123 53.15438461]
[-4.99939108 44.17729950]
[-17.01654434 35.20021820]
[-33.03615952 36.06706619]
[-43.59389496 23.98758888]
[-40.59075928 8.22812557]
[-26.33049965 0.87798607]
[-11.75236702 7.57557011]
[-8.03945923 23.18306351]
[3.97769356 32.16014862]
[15.99484634 41.13723373]
[28.01199913 50.11431885]
[40.59807968 58.27462387]
[53.69766235 65.58221436]
[66.79724884 72.88980865]
[79.89682770 80.19740295]
[92.99641418 87.50499725]
[106.97823334 87.49082184]
[114.31118011 99.39542389]
[127.41076660 106.70301056]
[140.51034546 114.01060486]
[153.60992432 121.31819916]
[166.70951843 128.62579346]
[179.80909729 135.93338013]
[192.90867615 143.24098206]
[206.00827026 150.54856873]
[223.14170837 141.08543396]
[242.44606018 143.35490417]
[256.71688843 156.35075378]
[260.72103882 175.09352112]
[274.90261841 179.98052979]
[289.08419800 184.86753845]
[303.26577759 189.75454712]
[317.44735718 194.64155579]
[330.75930786 186.43632507]
[346.22348022 188.75865173]
[356.53817749 200.51200867]
[356.83309937 216.14680481]
[346.96899414 228.28079224]
[331.60339355 231.18464661]
[317.99145508 223.48727417]
[312.56033325 208.82313538]
[298.37875366 203.93612671]
[284.19717407 199.04911804]
[270.01562500 194.16210938]
[255.83403015 189.27510071]
[248.36813354 197.41786194]
[238.50218201 202.47503662]
[227.45455933 203.79145813]
[216.60028076 201.17581177]
[207.29985046 194.92794800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[19 31]
[20 30]
[21 29]
[22 28]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
