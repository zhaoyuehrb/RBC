%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCAUGCGGGGGCGGGGCAGCGGCGACGCUGGGUGUGUGGGCGCAGAUGGCGGCGGCGCACGGCGCCUGAGCGGGCCGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[107.04677582 333.42349243]
[111.42073822 318.62918091]
[123.11368561 308.56542969]
[120.92967224 293.72528076]
[118.74565125 278.88513184]
[109.23770142 267.42007446]
[114.88322449 252.64039612]
[112.69920349 237.80024719]
[110.51519012 222.96009827]
[98.44586945 214.30751038]
[96.01956177 199.28860474]
[105.17702484 186.68785095]
[102.99300385 171.84770203]
[100.80899048 157.00755310]
[98.62496948 142.16740417]
[96.44095612 127.32725525]
[86.49273682 124.02081299]
[78.49916077 117.23831940]
[73.61697388 107.96126556]
[72.55268097 97.53212738]
[58.54244232 92.17366791]
[44.53219986 86.81520081]
[30.52195740 81.45674133]
[16.51171684 76.09827423]
[0.41171759 79.21630096]
[-10.13277626 66.65661621]
[-4.27449417 51.33955002]
[11.96006489 49.02198410]
[21.87018013 62.08803558]
[35.88042068 67.44650269]
[49.89066315 72.80496216]
[63.90090561 78.16342926]
[77.91114807 83.52188873]
[89.68695068 74.44444275]
[104.46481323 72.80604553]
[110.83166504 59.22432327]
[117.19850922 45.64260101]
[123.56536102 32.06087494]
[129.93222046 18.47915268]
[136.29905701 4.89742947]
[135.15090942 -10.88206100]
[147.55882263 -19.12179756]
[146.41065979 -34.90128708]
[158.81857300 -43.14102554]
[165.18540955 -56.72274780]
[171.55226135 -70.30447388]
[167.46994019 -85.81943512]
[177.16989136 -98.59795380]
[193.21116638 -98.83743286]
[203.28825378 -86.35417175]
[199.67088318 -70.72425842]
[185.13398743 -63.93762207]
[178.76713562 -50.35589981]
[172.40028381 -36.77417374]
[174.00384521 -21.96614075]
[161.14053345 -12.75494766]
[162.74409485 2.05308723]
[149.88078308 11.26428032]
[143.51393127 24.84600258]
[137.14707947 38.42772675]
[130.78024292 52.00944901]
[124.41338348 65.59117126]
[118.04653168 79.17289734]
[127.07150269 94.84446716]
[124.43837738 112.73621368]
[111.28110504 125.14323425]
[113.46511841 139.98338318]
[115.64913940 154.82353210]
[117.83315277 169.66368103]
[120.01717377 184.50384521]
[132.41662598 193.93206787]
[134.42012024 209.01319885]
[125.35533905 220.77607727]
[127.53936005 235.61622620]
[129.72337341 250.45637512]
[139.38754272 262.98291016]
[133.58580017 276.70114136]
[135.76982117 291.54129028]
[137.95384216 306.38143921]
[152.05035400 312.64971924]
[160.50109863 325.55664062]
[160.60946655 340.98364258]
[152.34086609 354.00799561]
[138.33378601 360.47369385]
[123.05783081 358.31756592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 79]
[4 78]
[5 77]
[7 75]
[8 74]
[9 73]
[12 70]
[13 69]
[14 68]
[15 67]
[16 66]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[42 56]
[44 54]
[45 53]
[46 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
