%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCAGAUCCCAGAGGCUGAACACCUCGACCUUCUCUGCACAGCAGAUGAUCCCUGAGCAGCUGAAGACCAGAAAAGCCACUAAGACUUUCUGCUUAAUUCAGGAGCUUAGAGGAUUCUUCAAAGAGUGUGUCCAGCAUCCUUUGAAGC\
) } def
/len { sequence length } bind def

/coor [
[106.75238800 158.48297119]
[92.20463562 162.13850403]
[78.46322632 156.12405396]
[71.27872467 142.95655823]
[73.65771484 128.14640808]
[84.60578918 117.89089966]
[73.10398102 127.51943207]
[61.60218048 137.14794922]
[65.26255798 151.92506409]
[62.15670013 166.76557922]
[52.95306015 178.73692322]
[39.51958847 185.49731445]
[24.54482079 185.75370789]
[10.99983692 179.50878906]
[-0.50196671 189.13731384]
[-12.00376987 198.76583862]
[-23.50557327 208.39436340]
[-23.34271622 224.03111267]
[-33.30894852 236.08134460]
[-48.69852448 238.85533142]
[-62.24495316 231.04325867]
[-67.55203247 216.33378601]
[-62.11391068 201.67224121]
[-48.49831009 193.98136902]
[-33.13409805 196.89256287]
[-21.63229561 187.26403809]
[-10.13049316 177.63551331]
[1.37131047 168.00698853]
[-2.39331007 153.57463074]
[0.49350661 138.87850952]
[9.51173306 126.84387207]
[22.91551590 119.88982391]
[38.07096100 119.44320679]
[51.97365570 125.64614868]
[63.47546005 116.01762390]
[74.97726440 106.38909912]
[71.12010193 91.89350128]
[56.35404587 89.25463867]
[41.58798981 86.61577606]
[26.82193565 83.97691345]
[10.16613770 87.14246368]
[2.51351357 72.01389313]
[14.93239784 60.47232819]
[29.46080017 69.21085358]
[44.22685623 71.84971619]
[58.99291229 74.48858643]
[73.75896454 77.12744904]
[86.97657776 76.83853912]
[96.88779449 81.93253326]
[101.71855927 90.05209351]
[106.91397095 75.98057556]
[112.10939026 61.90905380]
[117.30480194 47.83753204]
[122.50022125 33.76601410]
[127.54897308 19.64121056]
[132.45053101 5.46465349]
[137.35208130 -8.71190453]
[142.25363159 -22.88846207]
[147.15518188 -37.06502151]
[152.05673218 -51.24158096]
[145.39820862 -65.32355499]
[150.57102966 -79.63077545]
[164.03707886 -85.89186859]
[168.93862915 -100.06842041]
[173.84017944 -114.24497986]
[178.74172974 -128.42153931]
[183.64328003 -142.59809875]
[172.83117676 -157.08642578]
[172.83015442 -175.00798035]
[183.45356750 -189.24678040]
[200.33332825 -194.26095581]
[204.64089966 -208.62913513]
[208.94848633 -222.99731445]
[213.25607300 -237.36550903]
[217.56365967 -251.73368835]
[221.87124634 -266.10186768]
[214.63270569 -279.89468384]
[219.20588684 -294.40469360]
[232.39982605 -301.22052002]
[224.68475342 -315.01376343]
[229.06300354 -330.19949341]
[242.93702698 -337.76831055]
[258.07562256 -333.22976685]
[265.49731445 -319.27648926]
[260.79898071 -304.18670654]
[246.76800537 -296.91293335]
[254.03604126 -283.96261597]
[249.87222290 -269.32986450]
[236.23942566 -261.79428101]
[231.93183899 -247.42610168]
[227.62426758 -233.05792236]
[223.31668091 -218.68974304]
[219.00909424 -204.32154846]
[214.70150757 -189.95336914]
[223.45552063 -181.43821716]
[227.76002502 -169.93231201]
[226.73252869 -157.61793518]
[220.50823975 -146.85908508]
[210.22587585 -139.74760437]
[197.81983948 -137.69654846]
[192.91828918 -123.51998901]
[188.01673889 -109.34342957]
[183.11518860 -95.16687012]
[178.21363831 -80.99031067]
[184.93666077 -67.74884796]
[180.16773987 -53.30197525]
[166.23329163 -46.34002686]
[161.33174133 -32.16347122]
[156.43019104 -17.98691177]
[151.52864075 -3.81035399]
[146.62709045 10.36620426]
[141.72554016 24.54276276]
[142.51739502 31.93996429]
[136.57173157 38.96142960]
[131.37632751 53.03294754]
[126.18090820 67.10446930]
[120.98548889 81.17598724]
[115.79007721 95.24750519]
[118.42893982 110.01356506]
[128.17658997 121.41458130]
[137.92424011 132.81559753]
[147.67189026 144.21662903]
[157.41954041 155.61764526]
[167.16720581 167.01866150]
[176.91485596 178.41969299]
[186.66250610 189.82070923]
[201.51133728 195.28173828]
[203.90118408 209.98336792]
[213.64884949 221.38439941]
[223.39649963 232.78541565]
[233.14414978 244.18643188]
[248.96195984 246.86531067]
[256.60339355 260.97161865]
[250.20660400 275.68420410]
[234.67864990 279.71685791]
[221.93124390 269.97604370]
[221.74311829 253.93408203]
[211.99546814 242.53306580]
[202.24781799 231.13204956]
[192.50016785 219.73101807]
[178.34855652 215.08546448]
[175.26148987 199.56835938]
[165.51382446 188.16734314]
[155.76617432 176.76632690]
[146.01852417 165.36529541]
[136.27087402 153.96427917]
[126.52322388 142.56326294]
[116.77557373 131.16223145]
[107.02791595 119.76121521]
[116.12522125 131.68762207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 36]
[7 35]
[8 34]
[14 28]
[15 27]
[16 26]
[17 25]
[37 47]
[38 46]
[39 45]
[40 44]
[50 118]
[51 117]
[52 116]
[53 115]
[54 114]
[55 112]
[56 111]
[57 110]
[58 109]
[59 108]
[60 107]
[63 104]
[64 103]
[65 102]
[66 101]
[67 100]
[71 94]
[72 93]
[73 92]
[74 91]
[75 90]
[76 89]
[79 86]
[119 149]
[120 148]
[121 147]
[122 146]
[123 145]
[124 144]
[125 143]
[126 142]
[128 140]
[129 139]
[130 138]
[131 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
