%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAACGUCAUUUCCGCGUACGGGGGAGGGCGGGCCUGGAGUCUGAGCCGGCGCCGCUCAGUGUGAGGUGGUUUCUGCGGGUGAGGCUGGCGCCCGUACC\
) } def
/len { sequence length } bind def

/coor [
[-3.39494252 293.10455322]
[-11.68041706 305.60858154]
[-19.96589088 318.11260986]
[-21.13879204 333.89028931]
[-34.61872101 340.22595215]
[-42.90419769 352.72998047]
[-39.51604843 368.16683960]
[-48.10600662 381.43289185]
[-63.57780457 384.65762329]
[-76.75229645 375.92788696]
[-79.81329346 360.42288208]
[-70.94475555 347.34140015]
[-55.40823364 344.44451904]
[-47.12275696 331.94049072]
[-46.54249191 317.05718994]
[-32.46992874 309.82714844]
[-24.18445206 297.32308960]
[-15.89897823 284.81906128]
[-8.00249577 272.06579590]
[-0.50249588 259.07543945]
[6.99750423 246.08505249]
[14.49750423 233.09466553]
[21.99750328 220.10427856]
[29.49750328 207.11390686]
[36.99750519 194.12351990]
[36.66044235 179.23272705]
[50.26122665 171.15008545]
[46.17015839 156.87426758]
[53.59117508 143.59333801]
[68.59269714 139.39904785]
[76.09269714 126.40866852]
[83.59269714 113.41828156]
[78.93327332 97.66699219]
[86.92623138 83.31687927]
[102.77112579 78.98641205]
[109.86752319 65.77123260]
[116.96392822 52.55604553]
[124.06033325 39.34086227]
[131.15673828 26.12568092]
[130.86885071 10.30709362]
[143.70669556 2.75467920]
[150.80310059 -10.46050358]
[150.60981750 -16.03118896]
[152.49139404 -20.59069061]
[155.66772461 -23.49368286]
[159.21340942 -24.52292061]
[167.49887085 -37.02695465]
[175.78434753 -49.53099060]
[184.06982422 -62.03502655]
[192.35530090 -74.53906250]
[200.64077759 -87.04309845]
[201.81367493 -102.82077026]
[215.29360962 -109.15644073]
[213.50582886 -122.04458618]
[220.80621338 -132.32444763]
[232.77331543 -134.72352600]
[241.43992615 -146.96647644]
[250.10653687 -159.20944214]
[248.83000183 -175.20161438]
[260.63534546 -186.06503296]
[276.46649170 -183.46618652]
[284.17916870 -169.39869690]
[277.85684204 -154.65394592]
[262.34948730 -150.54283142]
[253.68287659 -138.29988098]
[245.01626587 -126.05692291]
[244.42536926 -108.59259033]
[227.79763794 -100.87096405]
[227.21737671 -85.98767090]
[213.14480591 -78.75762177]
[204.85934448 -66.25358582]
[196.57386780 -53.74955368]
[188.28839111 -41.24551773]
[180.00291443 -28.74148178]
[171.71743774 -16.23744583]
[164.01828003 -3.36410046]
[156.92187500 9.85108280]
[157.71734619 24.72443199]
[144.37191772 33.22208405]
[137.27551270 46.43726730]
[130.17910767 59.65245056]
[123.08271027 72.86763000]
[115.98630524 86.08281708]
[121.08087158 97.79841614]
[118.51687622 110.31383514]
[109.22582245 119.08229828]
[96.58307648 120.91828156]
[89.08307648 133.90866089]
[81.58307648 146.89904785]
[85.45147705 161.98788452]
[77.66035461 175.05514526]
[63.25160599 178.65008545]
[63.05221939 194.47003174]
[49.98788452 201.62351990]
[42.48788452 214.61390686]
[34.98788452 227.60427856]
[27.48788452 240.59466553]
[19.98788452 253.58505249]
[12.48788548 266.57543945]
[4.98788500 279.56579590]
[4.59080553 286.44952393]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[5 14]
[6 13]
[19 100]
[20 99]
[21 98]
[22 97]
[23 96]
[24 95]
[25 94]
[27 92]
[30 89]
[31 88]
[32 87]
[35 83]
[36 82]
[37 81]
[38 80]
[39 79]
[41 77]
[42 76]
[46 75]
[47 74]
[48 73]
[49 72]
[50 71]
[51 70]
[53 68]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
