%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUGAUGAAAACCGAGGUUGGAAAAGGUUGUGAAACCUUUUAACUCUCCACAGUGGAGUCCAUUAUUUCCUCUGGCUUCCUCAAAUUCAUAUUCACAGGGUCGUUGGCUGUGGGUUGCAAUUACC\
) } def
/len { sequence length } bind def

/coor [
[83.35548401 93.53512573]
[72.94747925 82.73358154]
[62.53947449 71.93202972]
[52.13146973 61.13048553]
[41.72346115 50.32893753]
[33.42135239 46.26200104]
[31.19571495 39.12913513]
[21.05806351 28.07345963]
[10.92041111 17.01778030]
[0.78275931 5.96210337]
[-12.81910801 8.54251385]
[-25.80774689 4.07380390]
[-34.79938126 -6.16596889]
[-37.50817490 -19.41046906]
[-33.32662201 -32.15191650]
[-43.18771362 -43.45496368]
[-53.04880905 -54.75800705]
[-62.90990448 -66.06105042]
[-78.43833160 -67.28811646]
[-88.27787018 -78.89148712]
[-87.01235199 -93.68790436]
[-109.52990723 -90.81118774]
[-127.95944214 -111.27172852]
[-142.94911194 -111.82817841]
[-157.93879700 -112.38463593]
[-172.92846680 -112.94108582]
[-187.91813660 -113.49754333]
[-202.90782166 -114.05399323]
[-217.89749146 -114.61045074]
[-232.88717651 -115.16690063]
[-247.12278748 -107.02568817]
[-261.15289307 -115.51613617]
[-260.54455566 -131.90399170]
[-245.92353821 -139.33084106]
[-232.33071899 -130.15657043]
[-217.34103394 -129.60012817]
[-202.35136414 -129.04367065]
[-187.36169434 -128.48721313]
[-172.37200928 -127.93076324]
[-157.38233948 -127.37430573]
[-142.39266968 -126.81785583]
[-127.40299225 -126.26139832]
[-122.00222015 -131.46540833]
[-134.89012146 -139.14016724]
[-149.18711853 -143.67842102]
[-155.52830505 -157.27214050]
[-149.81875610 -171.14302063]
[-135.74551392 -176.33374023]
[-122.39653015 -169.49232483]
[-118.39205170 -155.03715515]
[-111.20066833 -141.87341309]
[-105.79989624 -147.07740784]
[-105.79989624 -162.07740784]
[-105.79989624 -177.07740784]
[-113.53720093 -190.87757874]
[-105.79989624 -203.60485840]
[-105.79989624 -218.60485840]
[-105.79989624 -233.60485840]
[-105.79989624 -248.60485840]
[-118.43215942 -257.61627197]
[-123.32315063 -272.34237671]
[-118.59219360 -287.12066650]
[-106.05843353 -296.26858521]
[-90.54135895 -296.26858521]
[-78.00759888 -287.12066650]
[-73.27664185 -272.34237671]
[-78.16764069 -257.61627197]
[-90.79989624 -248.60485840]
[-90.79989624 -233.60485840]
[-90.79989624 -218.60485840]
[-90.79989624 -203.60485840]
[-83.06259918 -190.87757874]
[-90.79989624 -177.07740784]
[-90.79989624 -162.07740784]
[-90.79989624 -147.07740784]
[-70.39097595 -126.70015717]
[-75.70930481 -103.54900360]
[-60.87797546 -102.79592896]
[-50.71640396 -91.47351074]
[-51.60686111 -75.92214203]
[-41.74576569 -64.61910248]
[-31.88467026 -53.31605530]
[-22.02357674 -42.01301193]
[-5.77987862 -44.01287079]
[8.61828423 -35.88914108]
[15.44067669 -20.64916992]
[11.83843708 -4.17554855]
[21.97608948 6.88012886]
[32.11374283 17.93580627]
[42.25139236 28.99148369]
[52.52500916 39.92093277]
[62.93301392 50.72247696]
[73.34101868 61.52402496]
[83.74903107 72.32556915]
[94.15703583 83.12712097]
[113.05506897 81.19319153]
[127.92395020 99.33454132]
[141.21241760 106.29275513]
[157.02714539 105.83992767]
[164.71301270 118.59832001]
[178.00148010 125.55652618]
[191.28994751 132.51472473]
[204.57841492 139.47294617]
[221.41505432 141.46395874]
[224.16267395 158.19378662]
[208.84729004 165.46531677]
[197.62020874 152.76141357]
[184.33174133 145.80319214]
[171.04327393 138.84498596]
[157.75480652 131.88677979]
[142.89056396 132.83731079]
[134.25421143 119.58121490]
[120.96574402 112.62300873]
[109.66269684 122.48410797]
[114.75423431 136.59353638]
[119.84577942 150.70297241]
[134.58691406 155.92150879]
[142.48028564 169.42071533]
[139.79888916 184.82669067]
[127.80879974 194.86520386]
[112.17137146 194.79637146]
[100.27011108 184.65270996]
[97.72444153 169.22372437]
[105.73634338 155.79452515]
[100.64479828 141.68508911]
[95.55326080 127.57564545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[5 91]
[7 90]
[8 89]
[9 88]
[10 87]
[15 83]
[16 82]
[17 81]
[18 80]
[21 77]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[52 75]
[53 74]
[54 73]
[56 71]
[57 70]
[58 69]
[59 68]
[97 113]
[98 112]
[100 110]
[101 109]
[102 108]
[103 107]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
