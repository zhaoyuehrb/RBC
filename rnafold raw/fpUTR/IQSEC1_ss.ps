%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCCCUCCACUUCUUGCCUGAGCCGCCUGCUCCUCUUGGAAACACGUUGAGCCUCCCCGCUGGAGAGGGAGCCAGAACAGGGAAGAACGGAUUCACACAGG\
) } def
/len { sequence length } bind def

/coor [
[107.44226074 505.48260498]
[97.48374176 494.09475708]
[91.53352356 480.18612671]
[90.17455292 465.11932373]
[93.53997803 450.37045288]
[101.30007172 437.38446045]
[112.69458771 427.43356323]
[126.60720062 421.49267578]
[125.24971771 406.55422974]
[123.89223480 391.61578369]
[114.74456024 383.54183960]
[113.58098602 370.99139404]
[121.58358002 360.73715210]
[120.67790985 345.76452637]
[119.77223206 330.79190063]
[118.86655426 315.81927490]
[117.96087646 300.84661865]
[109.46923828 288.60974121]
[116.35918427 274.36758423]
[115.45350647 259.39495850]
[114.54782867 244.42231750]
[113.64215088 229.44967651]
[99.71894073 212.96560669]
[109.09140778 192.71253967]
[106.38758087 177.95823669]
[94.02185059 169.73484802]
[91.06960297 154.81040955]
[99.77890015 141.89584351]
[97.07507324 127.14154053]
[94.37125397 112.38724518]
[71.39788055 95.53983307]
[63.25364685 82.94335175]
[55.10941315 70.34686279]
[46.96517944 57.75038147]
[31.77158737 54.31635284]
[23.69161606 41.42570496]
[27.05907249 26.96210289]
[13.06876278 19.57415009]
[12.65602303 4.68526506]
[4.51178837 -7.91122055]
[-10.32360649 -14.90000343]
[-11.41901398 -31.26252556]
[2.35242724 -40.16642761]
[16.82383919 -32.45213699]
[17.10827446 -16.05545425]
[25.25250816 -3.45896983]
[38.66028595 3.02799702]
[39.65555573 18.81786728]
[54.22696304 21.68313408]
[62.66581726 34.34174347]
[59.56166458 49.60614777]
[67.70589447 62.20263290]
[75.85013580 74.79911804]
[83.99436951 87.39559937]
[98.99265289 87.16905212]
[106.75272369 74.33233643]
[114.51278687 61.49561310]
[122.27285767 48.65889740]
[119.84504700 32.80060959]
[130.83525085 21.11322212]
[146.81272888 22.56229973]
[155.52091980 36.03623199]
[150.27964783 51.19897079]
[135.10957336 56.41896439]
[127.34951019 69.25568390]
[119.58943939 82.09239960]
[111.82937622 94.92912292]
[109.12554932 109.68341827]
[111.82937622 124.43772125]
[114.53320312 139.19201660]
[127.25610352 148.17898560]
[129.78797913 163.18045044]
[121.14188385 175.25440979]
[123.84570312 190.00871277]
[131.82086182 193.53933716]
[137.60882568 199.93583679]
[140.26783752 208.04208374]
[139.41236877 216.43453979]
[135.26707458 223.67221069]
[128.61479187 228.54400635]
[129.52046204 243.51664734]
[130.42614746 258.48928833]
[131.33181763 273.46191406]
[139.88824463 286.76974487]
[132.93350220 299.94094849]
[133.83918762 314.91357422]
[134.74485779 329.88623047]
[135.65054321 344.85885620]
[136.55621338 359.83148193]
[147.07714844 374.84902954]
[138.83068848 390.25830078]
[140.18817139 405.19674683]
[141.54565430 420.13519287]
[156.30125427 423.47094727]
[169.30282593 431.20492554]
[179.27659607 442.57943726]
[185.24545288 456.48007202]
[186.62460327 471.54504395]
[183.27896118 486.29840088]
[175.53627014 499.29479980]
[164.15510559 509.26092529]
[150.25045776 515.22045898]
[135.18457031 516.58953857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 93]
[9 92]
[10 91]
[13 89]
[14 88]
[15 87]
[16 86]
[17 85]
[19 83]
[20 82]
[21 81]
[22 80]
[24 74]
[25 73]
[28 70]
[29 69]
[30 68]
[31 54]
[32 53]
[33 52]
[34 51]
[37 48]
[39 46]
[40 45]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
