%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGGAAGCGCUCUUAAAGCGGCAGUGAGGGUGGCUGCGUGUUUCCGGAAGACGUGGCGGCUCUCGCCUGGGCUGUUUCCCGGCUUCAUUUCUCCCGACUCAGCUUCCCACCCUGGGCUUUCCGAGGUGCUGUCGCCGCUGUCCCCACCACUGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[97.22306061 280.44082642]
[96.78160095 265.44784546]
[89.28485107 265.66870117]
[83.54460144 279.52688599]
[77.80435181 293.38507080]
[72.06410217 307.24328613]
[66.32384491 321.10147095]
[71.11013031 336.41390991]
[62.00358200 349.62188721]
[45.98997116 350.59335327]
[35.35356522 338.58306885]
[38.25370407 322.80432129]
[52.46565247 315.36120605]
[58.20590591 301.50302124]
[63.94615555 287.64483643]
[69.68640900 273.78662109]
[75.42665863 259.92843628]
[72.69831085 239.97213745]
[81.12525177 224.57632446]
[94.79389191 218.43533325]
[93.91082764 203.46134949]
[93.02776337 188.48736572]
[92.14470673 173.51338196]
[91.26164246 158.53939819]
[90.37857819 143.56541443]
[89.49551392 128.59143066]
[88.61245728 113.61743927]
[79.21084595 101.92942047]
[64.77401733 97.85781860]
[50.33719254 93.78620911]
[35.90036392 89.71459961]
[21.46353340 85.64299774]
[7.02670527 81.57138824]
[-8.35555935 85.27227020]
[-18.50477219 74.37076569]
[-32.94160080 70.29916382]
[-47.37842941 66.22755432]
[-61.81525803 62.15594864]
[-76.25208282 58.08433914]
[-90.68891144 54.01273346]
[-105.12574005 49.94112778]
[-120.50801086 53.64200592]
[-130.65722656 42.74050522]
[-145.09405518 38.66889954]
[-159.53088379 34.59729385]
[-176.41654968 36.11724091]
[-182.55152893 20.31222916]
[-169.06250000 10.04175186]
[-155.45927429 20.16046333]
[-141.02244568 24.23207092]
[-126.58561707 28.30367661]
[-112.23596954 24.31156921]
[-101.05413818 35.50429916]
[-86.61730957 39.57590485]
[-72.18048096 43.64751053]
[-57.74365234 47.71912003]
[-43.30682373 51.79072571]
[-28.86999321 55.86233139]
[-14.43316555 59.93394089]
[-0.08351967 55.94182968]
[11.09831238 67.13455963]
[25.53514099 71.20616913]
[39.97196960 75.27777100]
[54.40879822 79.34938049]
[68.84562683 83.42098999]
[83.28245544 87.49259186]
[94.49507904 77.52880859]
[92.14855957 62.71348190]
[89.80204773 47.89815903]
[85.34771729 39.86262894]
[87.55787659 32.76917648]
[85.50268555 17.91063881]
[83.44750214 3.05209804]
[70.69673157 -6.28564024]
[68.36595154 -21.91711617]
[77.83797455 -34.56845093]
[93.49322510 -36.73383331]
[106.04370880 -27.12858009]
[108.04344940 -11.45131779]
[98.30604553 0.99691284]
[100.36122894 15.85545254]
[102.41641235 30.71399307]
[104.61737061 45.55163956]
[106.96389008 60.36696625]
[109.31040192 75.18228912]
[114.35398865 61.05564117]
[119.39756775 46.92898941]
[124.44115448 32.80233765]
[129.48474121 18.67568588]
[127.52547455 3.80419397]
[129.37448120 -11.08140850]
[134.91258240 -25.02161789]
[143.78280640 -37.11786652]
[155.41337585 -46.59045410]
[169.05459595 -52.82878494]
[183.82720947 -55.43075180]
[198.77896118 -54.22863388]
[212.94609070 -49.29991531]
[225.41542053 -40.96229553]
[235.38317871 -29.75320816]
[242.20687866 -16.39517021]
[245.44665527 -1.74922037]
[244.89369202 13.24058342]
[240.58361816 27.60802269]
[232.79426575 40.42699432]
[222.02772522 50.87120438]
[208.97798157 58.26743317]
[194.48620605 62.13893890]
[179.48483276 62.23595810]
[166.18243408 69.16750336]
[152.88005066 76.09904480]
[139.57765198 83.03058624]
[126.27526093 89.96213531]
[141.27236938 90.25663757]
[156.26947021 90.55114746]
[170.21890259 83.08628082]
[182.79180908 91.07197571]
[197.78890991 91.36647797]
[211.88012695 82.97782135]
[226.05644226 91.22187805]
[225.73446655 107.61785889]
[211.24542236 115.29899597]
[197.49441528 106.36358643]
[182.49729919 106.06908417]
[169.62057495 113.55500793]
[155.97497559 105.54825592]
[140.97785950 105.25374603]
[125.98075104 104.95924377]
[114.61835480 113.41348267]
[103.58644104 112.73438263]
[104.46950531 127.70836639]
[105.35256195 142.68234253]
[106.23562622 157.65632629]
[107.11869049 172.63031006]
[108.00174713 187.60429382]
[108.88481140 202.57827759]
[109.76787567 217.55226135]
[130.41290283 228.89012146]
[132.76806641 258.23910522]
[139.31420898 271.73532104]
[145.86033630 285.23156738]
[152.40647888 298.72778320]
[158.95262146 312.22399902]
[174.27728271 313.24877930]
[187.02752686 321.81188965]
[193.77355957 335.60995483]
[192.70077515 350.93133545]
[184.09771729 363.65466309]
[170.27857971 370.35742188]
[154.96064758 369.23660278]
[142.26434326 360.59371948]
[135.60493469 346.75363159]
[136.77374268 331.43930054]
[145.45639038 318.77014160]
[138.91026306 305.27392578]
[132.36412048 291.77770996]
[125.81797791 278.28146362]
[119.27184296 264.78524780]
[111.77509308 265.00610352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[26 131]
[27 130]
[28 66]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[43 51]
[44 50]
[45 49]
[67 85]
[68 84]
[69 83]
[71 82]
[72 81]
[73 80]
[113 128]
[114 127]
[115 126]
[117 124]
[118 123]
[139 158]
[140 157]
[141 156]
[142 155]
[143 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
