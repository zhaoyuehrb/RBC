%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUCAUUUUGCAGCUCUCAAGCUUUUAUAGCAUGCUGUAAACAAUUGUCAAAGUUGUUUAUCAAGAAACAGAUAGAGUUGCAACUUGUUUCUAGUAAUAGAAACUUUUACACUGCAUUCA\
) } def
/len { sequence length } bind def

/coor [
[122.67498779 310.39196777]
[124.07233429 295.45721436]
[128.70140076 281.18936157]
[136.33816528 268.27890015]
[146.61303711 257.35061646]
[159.02879333 248.93344116]
[172.98455811 243.43464661]
[187.80494690 241.12039185]
[202.77275085 242.10264587]
[217.16242981 246.33338928]
[207.32637024 235.00856018]
[197.49029541 223.68373108]
[187.65423584 212.35890198]
[177.81816101 201.03405762]
[167.98210144 189.70922852]
[158.14604187 178.38439941]
[148.30996704 167.05957031]
[138.47390747 155.73474121]
[128.63784790 144.40991211]
[105.67409515 152.53732300]
[81.50458527 149.50035095]
[61.26541901 135.94436646]
[49.25750351 114.75006866]
[34.40526581 116.85031128]
[19.55302620 118.95055389]
[8.79872799 130.85536194]
[-7.20452929 129.72607422]
[-16.18041801 116.42897034]
[-11.24340343 101.16445923]
[3.81925893 95.64215851]
[17.45278358 104.09831238]
[32.30502319 101.99806976]
[47.15726089 99.89782715]
[47.75274658 92.08860779]
[49.49592209 84.45317078]
[52.34849930 77.15924835]
[56.24781036 70.36705780]
[61.10820389 64.22579193]
[66.82291412 58.87036514]
[59.15763855 45.97682190]
[51.49235916 33.08327866]
[43.82707596 20.18973351]
[36.16179657 7.29618931]
[28.49651718 -5.59735489]
[20.83123589 -18.49089813]
[13.16595650 -31.38444328]
[5.50067616 -44.27798843]
[-2.16460395 -57.17153168]
[-17.29581070 -62.50314713]
[-22.42522049 -77.70409393]
[-13.61798763 -91.11350250]
[2.36973071 -92.44482422]
[13.27352619 -80.67678070]
[10.72894001 -64.83681488]
[18.39422035 -51.94326782]
[26.05949974 -39.04972458]
[33.72478104 -26.15617943]
[41.39006042 -13.26263523]
[49.05533981 -0.36909097]
[56.72062302 12.52445316]
[64.38590240 25.41799736]
[72.05118561 38.31154251]
[79.71646118 51.20508575]
[90.12605286 48.08785629]
[100.95316315 47.16576004]
[111.73997498 48.47778320]
[122.03034973 51.96845627]
[131.38916016 57.49016571]
[139.42066956 64.80942535]
[145.78524780 73.61673737]
[150.21377563 83.53968048]
[152.51899719 94.15866089]
[152.60340881 105.02464294]
[150.46347046 115.67815399]
[146.18965149 125.66870117]
[139.96267700 134.57383728]
[149.79873657 145.89866638]
[159.63479614 157.22351074]
[169.47087097 168.54833984]
[179.30693054 179.87316895]
[189.14300537 191.19799805]
[198.97906494 202.52282715]
[208.81512451 213.84765625]
[218.65119934 225.17250061]
[228.48725891 236.49732971]
[232.40350342 237.13462830]
[235.78669739 238.73594666]
[238.42178345 241.06829834]
[240.17752075 243.85768127]
[254.64132690 247.83241272]
[269.10513306 251.80712891]
[283.56893921 255.78184509]
[298.03271484 259.75656128]
[312.49652100 263.73129272]
[326.96032715 267.70602417]
[342.68212891 263.04156494]
[354.39477539 274.51962280]
[350.04931641 290.33255005]
[334.11596680 294.21337891]
[322.98562622 282.16983032]
[308.52182007 278.19509888]
[294.05801392 274.22036743]
[279.59420776 270.24566650]
[265.13040161 266.27093506]
[250.66659546 262.29620361]
[236.20280457 258.32147217]
[246.23843384 269.46984863]
[253.59362793 282.54275513]
[257.91241455 296.90759277]
[258.98577881 311.86914062]
[256.76181030 326.70333862]
[251.34808350 340.69232178]
[243.00663757 353.15908813]
[232.14114380 363.50033569]
[219.27742004 371.21554565]
[205.03800964 375.93139648]
[190.11203003 377.41964722]
[175.22180176 375.60830688]
[161.08793640 370.58496094]
[148.39442444 362.59280396]
[137.75558472 352.01852417]
[129.68626404 339.37393188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 85]
[11 84]
[12 83]
[13 82]
[14 81]
[15 80]
[16 79]
[17 78]
[18 77]
[19 76]
[23 33]
[24 32]
[25 31]
[39 63]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
