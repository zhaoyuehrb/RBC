%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGGUCCUUAGUACUGCGGCCGUGUGGGUGAGUUGGCUGCCGGUGAGUUGGGUGCCGGUGGAGUCGUGUUGGUCCUCAGAAUCCCCGCGUAGCCGCUGCCUCCUCCUACCCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[15.74530220 319.46350098]
[6.54830217 331.31320190]
[-8.30155468 333.43020630]
[-20.44348526 324.62265015]
[-23.04151344 309.85018921]
[-33.14694977 320.93530273]
[-43.25238419 332.02044678]
[-53.35781860 343.10559082]
[-63.31605148 354.32315063]
[-59.65235519 369.40148926]
[-65.58232880 383.74078369]
[-78.82576752 391.82723999]
[-94.29030609 390.55148315]
[-106.02951813 380.40402222]
[-109.52942657 365.28680420]
[-103.44425201 351.01269531]
[-90.11386871 343.07037354]
[-74.66407776 344.51382446]
[-72.64509583 337.30541992]
[-64.44295502 333.00015259]
[-54.33751678 321.91500854]
[-44.23208237 310.82989502]
[-34.12664795 299.74475098]
[-24.92991257 287.89483643]
[-16.69953537 275.35449219]
[-8.46915913 262.81411743]
[-7.95438385 247.92840576]
[6.08623171 240.63650513]
[14.31660843 228.09614563]
[22.54698563 215.55577087]
[30.77736282 203.01539612]
[38.67384338 190.26214600]
[46.23093033 177.30488586]
[53.78801346 164.34762573]
[49.75979996 150.05395508]
[57.23917770 136.80580139]
[72.25901031 132.67756653]
[79.81609344 119.72030640]
[87.37317657 106.76304626]
[87.62673187 92.78351593]
[99.66956329 85.67987061]
[107.22664642 72.72261047]
[108.88292694 63.60849380]
[115.15810394 59.52683640]
[123.05458832 46.77357864]
[130.95106506 34.02032471]
[126.61561584 17.13500595]
[135.60307312 2.59091067]
[151.98716736 -0.94285458]
[159.54425049 -13.90011024]
[159.81324768 -29.71903038]
[172.90893555 -36.81496811]
[180.46601868 -49.77222443]
[188.02310181 -62.72948074]
[179.57043457 -75.39098358]
[177.46192932 -90.40568542]
[182.06275940 -104.78805542]
[192.40936279 -115.70175171]
[206.41069031 -121.01895905]
[221.27059937 -119.73510742]
[221.53959656 -135.55403137]
[234.63528442 -142.64996338]
[242.19236755 -155.60722351]
[249.74945068 -168.56446838]
[250.01844788 -184.38339233]
[263.11413574 -191.47933960]
[258.84899902 -206.69723511]
[266.66653442 -220.43266296]
[281.92864990 -224.53663635]
[295.58065796 -216.57435608]
[299.52307129 -201.26968384]
[291.41687012 -187.70260620]
[276.07138062 -183.92224121]
[276.34292603 -169.03012085]
[262.70669556 -161.00738525]
[255.14961243 -148.05014038]
[247.59252930 -135.09288025]
[247.86407471 -120.20075226]
[234.22785950 -112.17802429]
[242.66174316 -99.87618256]
[244.92736816 -85.07157898]
[240.52243042 -70.69251251]
[230.26939392 -59.60668945]
[216.16258240 -54.04927826]
[200.98036194 -55.17239380]
[193.42327881 -42.21513748]
[185.86619568 -29.25788307]
[186.13772583 -14.36575317]
[172.50151062 -6.34302521]
[164.94442749 6.61423016]
[169.94786072 18.56737328]
[167.07199097 31.40257835]
[157.15635681 40.33963394]
[143.70433044 41.91680527]
[135.80784607 54.67006302]
[127.91136169 67.42331696]
[120.18390656 80.27969360]
[112.62682343 93.23695374]
[112.37326813 107.21648407]
[100.33043671 114.32012939]
[92.77335358 127.27738953]
[85.21626282 140.23464966]
[89.01823425 155.34036255]
[81.16969299 168.37321472]
[66.74526978 171.90470886]
[59.18818665 184.86196899]
[51.63109970 197.81922913]
[51.20828629 204.62217712]
[47.84770584 209.40142822]
[43.31773376 211.24577332]
[35.08735657 223.78614807]
[26.85697937 236.32652283]
[18.62660217 248.86688232]
[17.52313614 264.64956665]
[4.07121134 271.04449463]
[-4.15916538 283.58486938]
[-12.38954258 296.12521362]
[2.56637192 294.97604370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 23]
[6 22]
[7 21]
[8 20]
[9 18]
[24 117]
[25 116]
[26 115]
[28 113]
[29 112]
[30 111]
[31 110]
[32 107]
[33 106]
[34 105]
[37 102]
[38 101]
[39 100]
[41 98]
[42 97]
[44 96]
[45 95]
[46 94]
[49 90]
[50 89]
[52 87]
[53 86]
[54 85]
[60 79]
[62 77]
[63 76]
[64 75]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
