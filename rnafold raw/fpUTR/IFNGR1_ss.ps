%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGACCCCGGUGACGGAAGUGACGUAAGGCCGGGGCUGGAGGGCAGUGCUGGGCUGGUCCCGCAGGCGCUCGGGGUUGGAGCCAGCGACCGUCGGUAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[58.20985794 145.23225403]
[65.67845917 132.22319031]
[51.49896622 137.11622620]
[37.31946564 142.00926208]
[30.08348656 147.86122131]
[22.63718987 146.82890320]
[8.31637764 151.29145813]
[-6.00443506 155.75399780]
[-20.32524872 160.21655273]
[-34.64606094 164.67909241]
[-48.96687317 169.14164734]
[-63.28768539 173.60418701]
[-76.07330322 189.04385376]
[-94.74218750 184.40516663]
[-108.76743317 189.72424316]
[-122.79267883 195.04331970]
[-127.77210999 209.86692810]
[-141.14189148 217.97760010]
[-156.58921814 215.54571533]
[-166.82034302 203.71955872]
[-167.00442505 188.08305359]
[-157.05456543 176.01930237]
[-141.66877747 173.22442627]
[-128.11175537 181.01808167]
[-114.08650970 175.69900513]
[-100.06126404 170.37992859]
[-96.62860107 160.53900146]
[-88.11376953 154.15191650]
[-77.26264191 153.58717346]
[-67.75023651 159.28337097]
[-53.42942047 154.82083130]
[-39.10860825 150.35827637]
[-24.78779411 145.89573669]
[-10.46698093 141.43318176]
[3.85383201 136.97064209]
[18.17464447 132.50810242]
[32.42642593 127.82977295]
[46.60592270 122.93672943]
[60.78541946 118.04368591]
[73.96046448 110.87303162]
[85.76821899 101.62225342]
[91.16615295 88.72442627]
[104.98100281 86.56999207]
[116.78875732 77.31921387]
[117.50453949 66.25483704]
[124.13345337 57.64535141]
[134.22689819 54.26605606]
[144.27580261 57.03131866]
[156.62055969 48.51034927]
[168.96531677 39.98937607]
[181.31007385 31.46840477]
[193.65483093 22.94743347]
[205.99958801 14.42646313]
[213.40843201 -2.34628773]
[230.86161804 -3.26092601]
[242.94338989 -12.15085888]
[255.02514648 -21.04079247]
[267.10693359 -29.93072510]
[279.18869019 -38.82065582]
[291.27044678 -47.71059036]
[303.35223389 -56.60052490]
[315.43399048 -65.49045563]
[327.51574707 -74.38038635]
[332.68313599 -82.12009430]
[340.09936523 -83.34982300]
[352.44412231 -91.87079620]
[362.04476929 -105.84449005]
[378.13009644 -100.48735046]
[377.43515015 -83.54765320]
[360.96508789 -79.52603912]
[348.62033081 -71.00506592]
[336.40570068 -62.29862213]
[324.32391357 -53.40868759]
[312.24215698 -44.51875687]
[300.16040039 -35.62882233]
[288.07861328 -26.73888969]
[275.99685669 -17.84895706]
[263.91506958 -8.95902443]
[251.83331299 -0.06909177]
[239.75155640 8.82084084]
[237.57444763 20.82621574]
[227.43598938 28.31479073]
[214.52055359 26.77122116]
[202.17579651 35.29219055]
[189.83103943 43.81316376]
[177.48628235 52.33413315]
[165.14152527 60.85510635]
[152.79676819 69.37607574]
[146.00920105 87.37534332]
[126.03953552 89.12696838]
[114.23178101 98.37774658]
[108.83384705 111.27557373]
[95.01899719 113.43000793]
[83.21124268 122.68078613]
[98.19036102 123.47202301]
[111.17958832 130.97401428]
[119.35050964 143.55320740]
[120.92389679 158.47045898]
[115.55714417 172.47752380]
[104.41886902 182.52435303]
[89.93443298 186.42323303]
[75.25785065 183.32518005]
[63.58496094 173.90480042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 39]
[3 38]
[4 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[14 26]
[15 25]
[16 24]
[40 94]
[41 93]
[43 91]
[44 90]
[48 88]
[49 87]
[50 86]
[51 85]
[52 84]
[53 83]
[55 80]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
