%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUUCCAGCCGGAGUCUCACUCCCUCUACAGCAAUCUCGGGAAAUUGGAGACUGACGCGGCUGCUCCUGC\
) } def
/len { sequence length } bind def

/coor [
[85.82448578 278.99322510]
[72.92317963 270.99816895]
[63.78433990 258.88015747]
[59.64391708 244.27806091]
[61.06187057 229.16668701]
[67.84642792 215.58970642]
[79.08003998 205.38331604]
[93.24345398 199.92784119]
[93.24345398 184.92784119]
[93.24345398 169.92784119]
[93.24345398 154.92784119]
[93.24345398 139.92784119]
[93.24345398 124.92784119]
[92.92071533 109.93132019]
[91.63124084 94.98684692]
[89.70001984 80.11168671]
[87.76879883 65.23652649]
[85.83757019 50.36136627]
[83.90634918 35.48620605]
[81.97512817 20.61104584]
[65.49665833 9.65874958]
[61.94870377 -9.50948524]
[73.07659912 -25.15770149]
[69.24629974 -39.66041946]
[65.41600037 -54.16313553]
[61.58570099 -68.66585541]
[46.51737213 -70.66932678]
[33.36525345 -78.29102325]
[24.13494492 -90.36868286]
[20.23400688 -105.06055450]
[22.25729942 -120.12623596]
[29.89628792 -133.26831055]
[41.98608017 -142.48272705]
[56.68307114 -146.36433411]
[71.74607849 -144.32122803]
[84.87809753 -136.66496277]
[94.07659912 -124.56304932]
[97.93887329 -109.86096954]
[95.87594604 -94.80066681]
[88.20240784 -81.67872620]
[76.08841705 -72.49615479]
[79.91871643 -57.99343491]
[83.74901581 -43.49071884]
[87.57931519 -28.98800087]
[98.01200867 -26.22898483]
[106.31362152 -19.20593834]
[110.83132935 -9.22442627]
[110.62607574 1.81242216]
[105.66683197 11.76669407]
[96.85028839 18.67982292]
[98.78150940 33.55498123]
[100.71273041 48.43014145]
[102.64395905 63.30530167]
[104.57518005 78.18045807]
[106.50640106 93.05561829]
[110.06812286 97.35594177]
[110.78353119 103.38676453]
[107.90682220 109.28598022]
[111.49283600 118.02990723]
[108.24345398 124.92784119]
[108.24345398 139.92784119]
[108.24345398 154.92784119]
[108.24345398 169.92784119]
[108.24345398 184.92784119]
[108.24345398 199.92784119]
[122.40686798 205.38331604]
[133.64047241 215.58970642]
[140.42503357 229.16668701]
[141.84298706 244.27806091]
[137.70257568 258.88015747]
[128.56373596 270.99816895]
[115.66242218 278.99322510]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 65]
[9 64]
[10 63]
[11 62]
[12 61]
[13 60]
[14 58]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[23 44]
[24 43]
[25 42]
[26 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
