%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAGGAGAAAGCGGCGCGCGGAGGGUGUGAGAUGGCAGACAGGUUUGCAGGAAACCCUCAGAAAGGGGGCUGGAGGAUUUAGCCACUCUGUCCUCCCCUUCCGGCAGUCCAGGGCCUCCUCCCGAGCACAGCGGCGCU\
) } def
/len { sequence length } bind def

/coor [
[211.48626709 460.95700073]
[207.84663391 446.40524292]
[204.20700073 431.85351562]
[200.08314514 417.43151855]
[195.47969055 403.15539551]
[190.87622070 388.87924194]
[186.27276611 374.60311890]
[181.66931152 360.32696533]
[177.06585693 346.05081177]
[161.23240662 344.18939209]
[147.73637390 335.59445190]
[139.29255676 321.93508911]
[137.62548828 305.90499878]
[143.11734009 290.69131470]
[154.72189331 279.34097290]
[149.80152893 265.17092896]
[144.88114929 251.00088501]
[139.80323792 236.88655090]
[134.56838989 222.82965088]
[129.24333191 217.61703491]
[129.37731934 208.40083313]
[124.45694733 194.23078918]
[119.53657532 180.06076050]
[114.61620331 165.89071655]
[109.69583130 151.72068787]
[104.77545929 137.55064392]
[99.85508728 123.38061523]
[94.64749146 118.05065918]
[94.98677063 108.83972931]
[89.67157745 102.68654633]
[90.44361877 94.19399261]
[86.15936279 79.81883240]
[81.87510681 65.44367981]
[77.25194550 60.53578949]
[76.04595947 54.87776184]
[77.73559570 50.33201981]
[74.09595490 35.78028107]
[70.45632172 21.22854424]
[66.81668091 6.67680836]
[63.17704773 -7.87492847]
[59.53741074 -22.42666435]
[46.26706314 -30.58360481]
[42.78324890 -45.39298248]
[50.64142609 -57.99396133]
[47.00178909 -72.54570007]
[43.36215210 -87.09743500]
[39.72251511 -101.64916992]
[35.11905670 -115.92530823]
[22.82713890 -125.88619995]
[25.30970383 -140.57246399]
[19.76298523 -154.50924683]
[14.21626568 -168.44602966]
[10.55619526 -171.11131287]
[8.21927166 -174.48320007]
[7.26405525 -178.04150391]
[7.56819391 -181.30288696]
[8.85751915 -183.87852478]
[4.57326078 -198.25367737]
[0.28900313 -212.62882996]
[-3.99525476 -227.00399780]
[-8.27951241 -241.37915039]
[-21.65042305 -250.24472046]
[-22.91207695 -266.23809814]
[-11.09664154 -277.09051514]
[4.73209143 -274.47692871]
[12.43167400 -260.40228271]
[6.09564400 -245.66340637]
[10.37990189 -231.28825378]
[14.66415977 -216.91310120]
[18.94841766 -202.53793335]
[23.23267555 -188.16278076]
[28.15304947 -173.99273682]
[33.69976807 -160.05596924]
[39.24648666 -146.11918640]
[51.14166641 -137.15513611]
[49.05583954 -121.47203064]
[56.43921280 -134.52905273]
[70.83633423 -138.73890686]
[84.09107971 -131.71667480]
[88.69448853 -117.44052124]
[82.03868103 -103.99803925]
[67.89424896 -99.00454712]
[54.27425003 -105.28881073]
[57.91388702 -90.73707581]
[61.55352402 -76.18533325]
[65.19316101 -61.63359833]
[78.05834961 -54.21588516]
[81.95675659 -39.51020432]
[74.08914948 -26.06630135]
[77.72878265 -11.51456547]
[81.36842346 3.03717136]
[85.00805664 17.58890724]
[88.64769745 32.14064407]
[92.28733063 46.69238281]
[96.25025940 61.15942001]
[100.53452301 75.53457642]
[104.81877899 89.90973663]
[109.26290894 104.23626709]
[114.02512360 118.46024323]
[118.94549561 132.63027954]
[123.86586761 146.80030823]
[128.78623962 160.97035217]
[133.70661926 175.14038086]
[138.62698364 189.31042480]
[143.54736328 203.48045349]
[148.62528992 217.59480286]
[153.86012268 231.65170288]
[159.83486938 238.67016602]
[159.05119324 246.08052063]
[163.97155762 260.25054932]
[168.89193726 274.42059326]
[183.02583313 275.50881958]
[195.63238525 281.89608765]
[204.81292725 292.58322144]
[209.19902039 305.92630005]
[208.15640259 319.88946533]
[201.87640381 332.35565186]
[191.34199524 341.44735718]
[195.94544983 355.72351074]
[200.54890442 369.99963379]
[205.15237427 384.27578735]
[209.75582886 398.55194092]
[214.35928345 412.82806396]
[218.35823059 416.43072510]
[220.32257080 420.78378296]
[220.31369019 424.96426392]
[218.75872803 428.21386719]
[222.39836121 442.76562500]
[226.03800964 457.31735229]
[240.99586487 460.35467529]
[253.14938354 469.58801270]
[260.08547974 483.18408203]
[260.42700195 498.44338989]
[254.10612488 512.33618164]
[242.37785339 522.10400391]
[227.57086182 525.80749512]
[212.62509155 522.71130371]
[200.50801086 513.43011475]
[193.62550354 499.80685425]
[193.34408569 484.54632568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 129]
[2 128]
[3 127]
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[9 118]
[15 111]
[16 110]
[17 109]
[18 107]
[19 106]
[21 105]
[22 104]
[23 103]
[24 102]
[25 101]
[26 100]
[27 99]
[29 98]
[31 97]
[32 96]
[33 95]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
[41 89]
[44 86]
[45 85]
[46 84]
[47 83]
[48 76]
[50 74]
[51 73]
[52 72]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
