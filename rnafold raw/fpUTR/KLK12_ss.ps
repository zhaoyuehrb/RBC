%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGUAGGUGGACGGAGAGAUAGCAGCGACGAGGACAGGCCAAACAGUGACAGCCACGUAGAGGAUCUGGCAGACAAAGAGACAAGGUGAGAAGGAGACUUUGGAAGUGACCCACC\
) } def
/len { sequence length } bind def

/coor [
[125.54140472 213.17892456]
[118.15412140 226.82472229]
[104.14238739 233.49186707]
[88.89400482 230.61672974]
[78.27228546 219.30485535]
[76.36149597 203.90586853]
[83.89637756 190.34101868]
[97.97961426 183.82626343]
[100.75894165 169.08599854]
[103.53827667 154.34573364]
[106.31760406 139.60546875]
[109.09693146 124.86521149]
[93.59399414 123.54383850]
[82.76618958 114.18770599]
[68.65568542 119.27629089]
[61.87860489 133.30158997]
[47.49605942 138.26112366]
[34.16684723 131.71379089]
[30.82384491 146.77459717]
[19.85297012 157.62094116]
[4.75498581 160.79182434]
[-9.65239429 155.27539062]
[-18.77182770 142.83193970]
[-19.69333839 127.43212891]
[-12.12287331 113.98996735]
[1.52385890 106.79481506]
[16.89223480 108.14260864]
[29.07826233 117.60327911]
[35.16073990 104.05561829]
[49.39831161 98.69406128]
[63.56710052 105.16578674]
[77.67760468 100.07720184]
[77.70910645 98.81194305]
[77.81227112 97.55050659]
[64.32258606 90.99089813]
[48.75106430 94.85188293]
[36.11197281 84.97093964]
[36.10094833 68.92789459]
[48.72644424 59.02958679]
[64.30326080 62.86915970]
[70.88220215 77.50122070]
[84.37187958 84.06082916]
[91.66871643 78.54592133]
[100.82322693 76.30693817]
[110.38995361 77.92290497]
[118.76837158 83.34567261]
[124.47038269 91.87310791]
[126.38258362 102.23432922]
[139.87226868 95.67472076]
[148.89935303 82.68155670]
[163.72871399 84.07407379]
[177.21839905 77.51446533]
[182.46629333 62.84826279]
[196.24018860 56.38805389]
[210.18981934 61.48149109]
[223.67950439 54.92188263]
[237.16918945 48.36227417]
[239.60809326 44.41551971]
[242.88465881 41.79236221]
[246.45075989 40.59381485]
[249.78527832 40.72213745]
[252.45989990 41.90908813]
[266.57040405 36.82050705]
[280.68090820 31.73192215]
[287.45797729 17.70662498]
[301.84051514 12.74708748]
[315.16973877 19.29442787]
[329.28024292 14.20584583]
[343.39074707 9.11726284]
[350.16781616 -4.90803528]
[364.55038452 -9.86757278]
[377.87957764 -3.32023168]
[384.65667725 -17.34552956]
[399.03921509 -22.30506706]
[412.36840820 -15.75772572]
[426.47891235 -20.84630775]
[428.50927734 -36.01655197]
[437.36648560 -48.49887466]
[451.01522827 -55.42493439]
[466.31912231 -55.20317459]
[479.76147461 -47.88454819]
[488.25326538 -35.15082550]
[489.84323120 -19.92812157]
[484.16592407 -5.71450377]
[472.52600098 4.22384310]
[457.59820557 7.60315990]
[442.81286621 3.64690447]
[431.56750488 -6.73580456]
[417.45700073 -1.64722168]
[411.37454224 11.90043640]
[397.13696289 17.26199341]
[382.96817017 10.79027271]
[376.88568115 24.33793068]
[362.64813232 29.69948769]
[348.47933960 23.22776604]
[334.36883545 28.31634903]
[320.25833130 33.40493393]
[314.17584229 46.95259094]
[299.93826294 52.31414795]
[285.76950073 45.84242630]
[271.65899658 50.93101120]
[257.54849243 56.01959229]
[243.72880554 61.85195541]
[230.23912048 68.41156769]
[216.74943542 74.97117615]
[212.14144897 89.08860779]
[198.55442810 95.93315125]
[183.77801514 91.00414276]
[170.28833008 97.56375885]
[162.22612000 110.08773041]
[146.43186951 109.16439819]
[132.94219971 115.72401428]
[123.83719635 127.64453888]
[121.05786896 142.38479614]
[118.27853394 157.12506104]
[115.49920654 171.86532593]
[112.71987152 186.60559082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 117]
[9 116]
[10 115]
[11 114]
[12 113]
[14 32]
[15 31]
[18 28]
[34 42]
[35 41]
[48 112]
[49 111]
[51 109]
[52 108]
[55 105]
[56 104]
[57 103]
[62 102]
[63 101]
[64 100]
[67 97]
[68 96]
[69 95]
[72 92]
[75 89]
[76 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
