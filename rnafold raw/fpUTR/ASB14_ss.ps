%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCUUAACAGUGAAAACUUCACUGCUGUCCUAGAGGAUAAAACAAAAGUUGAUCUCUUCACAACUGGAAAAAUACUUUUAAUUCACUCUGACUUUAAAGUAAACCUGUCCACGUUUCAC\
) } def
/len { sequence length } bind def

/coor [
[125.98328400 140.42822266]
[119.69115448 143.83869934]
[112.96231079 146.27690125]
[105.94599152 147.68876648]
[98.79779816 148.04296875]
[91.67626190 147.33168030]
[84.73933411 145.57066345]
[78.14086151 142.79895020]
[72.02719116 139.07804871]
[66.53389740 134.49047852]
[54.53630829 143.49368286]
[42.53871918 152.49690247]
[30.54113197 161.50010681]
[18.54354286 170.50332642]
[6.54595423 179.50654602]
[-5.45163441 188.50975037]
[-14.49129486 202.85272217]
[-30.77616501 198.13687134]
[-30.75270844 181.18293762]
[-14.45484829 176.51216125]
[-2.45725989 167.50895691]
[9.54032898 158.50573730]
[21.53791809 149.50251770]
[33.53550720 140.49931335]
[45.53309631 131.49609375]
[57.53068542 122.49288177]
[54.85920715 116.48883057]
[53.03179550 110.17646027]
[52.08261490 103.67380524]
[52.02941513 97.10245514]
[52.87319565 90.58528137]
[54.59817123 84.24415588]
[57.17209244 78.19763947]
[60.54682922 72.55879211]
[64.65927887 67.43305206]
[55.35013962 55.67125320]
[46.04099655 43.90945816]
[36.73185349 32.14765930]
[27.42271233 20.38586235]
[10.59182930 21.33350754]
[-3.37324309 12.19003773]
[-9.12008762 -3.30526519]
[-4.58600903 -19.02569389]
[-14.19490719 -30.54389954]
[-23.80380440 -42.06210709]
[-39.37598419 -47.20401382]
[-42.44366837 -63.31368256]
[-29.85108376 -73.81886292]
[-14.55240345 -67.91272736]
[-12.28559780 -51.67100525]
[-2.67670012 -40.15279770]
[6.93219757 -28.63459206]
[20.17942429 -30.75693893]
[32.83629227 -25.98998642]
[41.53066254 -15.48863316]
[43.88922119 -1.95047534]
[39.18450928 11.07672024]
[48.49365234 22.83851624]
[57.80279541 34.60031509]
[67.11193848 46.36211014]
[76.42108154 58.12390900]
[105.38648987 52.24480820]
[132.31454468 64.42834473]
[147.02014160 90.06629181]
[162.00025940 89.29410553]
[176.98036194 88.52192688]
[191.94929504 87.55693817]
[206.90455627 86.39930725]
[221.85981750 85.24167633]
[236.81507874 84.08404541]
[243.94648743 68.13394928]
[258.05987549 57.98505783]
[275.27474976 56.31858063]
[290.91241455 63.49829865]
[300.76766968 77.49584198]
[315.64349365 75.56987000]
[330.51934814 73.64389038]
[345.39517212 71.71791840]
[360.27102661 69.79194641]
[375.14685059 67.86596680]
[387.83935547 58.42079163]
[401.45474243 64.45988464]
[416.33056641 62.53391266]
[429.02307129 53.08873749]
[442.63842773 59.12783051]
[457.51428223 57.20185852]
[472.39010620 55.27588272]
[487.32180786 47.24587250]
[499.17150879 59.37109375]
[490.80047607 74.11429596]
[474.31610107 70.15171814]
[459.44024658 72.07769775]
[444.56442261 74.00366974]
[432.93594360 83.31108856]
[418.25656128 77.40975189]
[403.38070679 79.33573151]
[391.75222778 88.64314270]
[377.07284546 82.74180603]
[362.19699097 84.66778564]
[347.32116699 86.59375763]
[332.44531250 88.51973724]
[317.56948853 90.44570923]
[302.69363403 92.37168121]
[299.06500244 104.60786438]
[291.01644897 114.57350159]
[279.73550415 120.74117279]
[266.90853882 122.14804840]
[254.46859741 118.54604340]
[244.30424500 110.44467163]
[237.97271729 99.03930664]
[223.01745605 100.19693756]
[208.06219482 101.35456848]
[193.10693359 102.51220703]
[186.60391235 106.20921326]
[177.75254822 103.50203705]
[162.77243042 104.27422333]
[147.79232788 105.04640198]
[146.51290894 112.08808136]
[144.20191956 118.86167145]
[140.91061401 125.21694183]
[136.71199036 131.01293945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[16 20]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[43 52]
[44 51]
[45 50]
[64 117]
[65 116]
[66 115]
[67 113]
[68 112]
[69 111]
[70 110]
[75 103]
[76 102]
[77 101]
[78 100]
[79 99]
[80 98]
[82 96]
[83 95]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
