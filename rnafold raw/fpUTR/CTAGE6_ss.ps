%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAUUCGGGUUCCAGACCCAAGGCUGCGUGUUCUCCACCGCUUGUUGUGGCCAGUGUUACUGCGGUGACCGCCAGAGCAGCCUCGACGCU\
) } def
/len { sequence length } bind def

/coor [
[102.85113525 175.78761292]
[102.34452820 160.79617310]
[101.83791351 145.80473328]
[101.07817841 130.82398987]
[94.40139008 127.40777588]
[87.56874847 140.76124573]
[74.21539307 133.92837524]
[81.04781342 120.57535553]
[74.37102509 117.15914154]
[61.64136124 125.09360504]
[48.91169739 133.02806091]
[36.18203354 140.96252441]
[23.45236778 148.89698792]
[13.20887566 162.40650940]
[-2.60837078 156.30314636]
[-1.12217700 139.41445923]
[15.51790810 136.16731262]
[28.24757195 128.23286438]
[40.97723389 120.29840088]
[53.70689774 112.36393738]
[66.43656158 104.42948151]
[80.99704742 81.46864319]
[102.03637695 80.87685394]
[109.31591034 67.76165771]
[116.59543610 54.64645767]
[123.87496185 41.53125763]
[131.15449524 28.41605759]
[138.43402100 15.30085945]
[145.71354675 2.18565989]
[144.89146423 -16.11368370]
[160.08847046 -24.71067047]
[166.92088318 -38.06424713]
[157.78410339 -50.24129868]
[154.85234070 -65.11717987]
[158.65455627 -79.73098755]
[168.38475037 -91.19764709]
[182.07215881 -97.27746582]
[196.98022461 -96.81349182]
[203.81263733 -110.16706848]
[210.64506531 -123.52064514]
[217.47749329 -136.87422180]
[224.30990601 -150.22779846]
[231.14233398 -163.58137512]
[226.91854858 -171.31231689]
[226.23377991 -179.99934387]
[229.12997437 -188.11656189]
[235.02685547 -194.27009583]
[242.83630371 -197.43742371]
[251.16262817 -197.13673401]
[259.73165894 -209.44818115]
[268.30065918 -221.75964355]
[276.86968994 -234.07109070]
[285.43872070 -246.38253784]
[286.28210449 -262.75997925]
[301.00814819 -269.97634888]
[314.46795654 -260.60803223]
[312.81524658 -244.29237366]
[297.75018311 -237.81352234]
[289.18115234 -225.50205994]
[280.61212158 -213.19061279]
[272.04309082 -200.87916565]
[263.47409058 -188.56771851]
[264.27825928 -167.02427673]
[244.49591064 -156.74896240]
[237.66348267 -143.39538574]
[230.83106995 -130.04180908]
[223.99864197 -116.68822479]
[217.16621399 -103.33464813]
[210.33380127 -89.98107147]
[219.43202209 -78.16211700]
[222.50910950 -63.50465775]
[218.90231323 -48.90493011]
[209.27502441 -37.27155304]
[195.49549866 -30.94608688]
[180.27445984 -31.23182487]
[173.44204712 -17.87824821]
[176.86227417 -6.14091253]
[171.10932922 5.10177469]
[158.82875061 9.46518898]
[151.54922485 22.58038902]
[144.26969910 35.69558716]
[136.99015808 48.81078720]
[129.71063232 61.92598724]
[122.43110657 75.04118347]
[115.15157318 88.15638733]
[125.97730255 105.45007324]
[116.04395294 129.81134033]
[119.81122589 138.36482239]
[116.82935333 145.29812622]
[117.33596802 160.28956604]
[117.84258270 175.28100586]
[120.68257904 194.45349121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 91]
[2 90]
[3 89]
[4 87]
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[23 85]
[24 84]
[25 83]
[26 82]
[27 81]
[28 80]
[29 79]
[31 76]
[32 75]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
