%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCGCAUUCCUAGCCUGGCGGCGCGCGCGGCUCCUUAAUGAGACUCGGGCCAAGGGCCGACCUCGCGAUUCCGCUCGCCCCUAUUUU\
) } def
/len { sequence length } bind def

/coor [
[48.42458725 435.35821533]
[35.49906158 443.24551392]
[20.71233940 446.50613403]
[5.66836882 444.78634644]
[-8.00099087 438.27270508]
[-18.81299019 427.67178345]
[-25.59482193 414.13348389]
[-27.61084747 399.12634277]
[-24.64238167 384.27822876]
[-17.01141930 371.19973755]
[-5.54571438 361.30950928]
[8.51102257 355.68038940]
[23.63401985 354.92300415]
[27.76857948 340.50405884]
[31.90314102 326.08514404]
[26.04730225 317.38781738]
[26.06557465 306.68054199]
[32.20040512 297.63507080]
[42.55430603 293.49224854]
[47.68460846 279.39688110]
[52.81491089 265.30148315]
[57.94521332 251.20608521]
[62.82873535 237.02331543]
[67.46398926 222.75746155]
[72.09924316 208.49160767]
[75.72807312 193.93717957]
[78.33279419 179.16505432]
[80.93752289 164.39294434]
[83.54224396 149.62083435]
[78.13255310 135.74334717]
[88.14868164 123.49639893]
[90.75341034 108.72428131]
[88.66580963 93.87025452]
[82.09024048 80.38834381]
[75.51467896 66.90643311]
[60.49170685 61.99868774]
[53.41376877 47.86793137]
[58.48007584 32.89768982]
[72.68487549 25.96954536]
[87.60071564 31.19384193]
[94.37828827 45.47109985]
[88.99658966 60.33087158]
[95.57215118 73.81278229]
[102.14772034 87.29469299]
[109.60663605 88.07865143]
[124.52446747 89.64658356]
[131.98338318 90.43054199]
[141.21830750 78.61038208]
[150.45321655 66.79022217]
[159.68814087 54.97006226]
[162.08731079 39.33181763]
[176.02006531 34.06615067]
[177.76533508 17.76013565]
[192.86692810 11.36686611]
[205.78962708 21.46319008]
[203.23966980 37.66287231]
[187.84022522 43.30107117]
[186.10162354 58.09385681]
[171.50830078 64.20498657]
[162.27337646 76.02514648]
[153.03846741 87.84530640]
[143.80354309 99.66546631]
[105.52552032 111.32900238]
[102.92079926 126.10112000]
[108.14418030 141.03520203]
[98.31436157 152.22555542]
[95.70963287 166.99766541]
[93.10491180 181.76979065]
[90.50019073 196.54190063]
[92.36630249 201.02801514]
[92.53606415 205.40736389]
[91.28324890 209.11567688]
[89.04880524 211.75305176]
[86.36509705 213.12686157]
[81.72983551 227.39271545]
[77.09458160 241.65856934]
[77.40348816 251.01249695]
[72.04060364 256.33639526]
[66.91030121 270.43179321]
[61.77999878 284.52716064]
[56.64969635 298.62255859]
[61.22257233 318.10375977]
[46.32206726 330.21969604]
[42.18750763 344.63864136]
[38.05294418 359.05755615]
[50.47661209 367.71383667]
[59.41442871 379.93652344]
[63.89688110 394.39981079]
[63.43775558 409.53479004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 85]
[14 84]
[15 83]
[19 81]
[20 80]
[21 79]
[22 78]
[23 76]
[24 75]
[25 74]
[26 69]
[27 68]
[28 67]
[29 66]
[31 64]
[32 63]
[33 44]
[34 43]
[35 42]
[47 62]
[48 61]
[49 60]
[50 59]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
