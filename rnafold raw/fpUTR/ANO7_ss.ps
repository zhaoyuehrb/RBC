%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGAUAGAUCCUGCUCCAGGAGCCGGGAAGCCUUGCCCUGGCCAGCUGUGCUGGGCACCUCCCCUGCCUGCUUCCUGGCCCACUUGCAGGCAAGGUGAGGGC\
) } def
/len { sequence length } bind def

/coor [
[138.77301025 129.03552246]
[145.71499634 142.33247375]
[148.34899902 157.09939575]
[146.43246460 171.97645569]
[140.14189148 185.59365845]
[130.05653381 196.69706726]
[117.10513306 204.26419067]
[102.48034668 207.59819031]
[87.52891541 206.39205933]
[73.62767792 200.75685120]
[62.05674362 191.21151733]
[53.88164902 178.63504028]
[49.85521317 164.18554688]
[50.34821320 149.19364929]
[55.31525421 135.03990173]
[64.29893494 123.02768707]
[76.47322083 114.26251984]
[61.80731964 111.11430359]
[47.14141846 107.96608734]
[32.47551346 104.81787109]
[17.80961037 101.66965485]
[8.58975697 102.93419647]
[2.75140834 98.19851685]
[-11.81271935 94.60877991]
[-27.06353951 98.81864929]
[-37.56932449 88.26034546]
[-52.13344955 84.67061615]
[-66.69757843 81.08087921]
[-83.52343750 83.16097260]
[-90.18009949 67.56849670]
[-77.03973389 56.85555649]
[-63.10784149 66.51675415]
[-48.54371643 70.10648346]
[-33.97958755 73.69622040]
[-19.77049065 69.22959137]
[-8.22298431 80.04465485]
[6.34114313 83.63439178]
[20.95782661 87.00374603]
[35.62372971 90.15196228]
[50.28963470 93.30017853]
[64.95553589 96.44840240]
[79.62144470 99.59661865]
[90.38702393 89.15142059]
[87.68320465 74.39711761]
[84.97937775 59.64281845]
[82.27555084 44.88852310]
[79.57172394 30.13422203]
[70.76934052 15.64442062]
[82.25613403 3.17486072]
[97.41824341 10.76082802]
[94.32602692 27.43039703]
[97.02984619 42.18469620]
[99.73367310 56.93899536]
[102.43750000 71.69329071]
[105.14132690 86.44759369]
[116.21747589 96.56287384]
[131.15592957 97.92035675]
[140.15612793 95.55369568]
[146.52273560 99.55111694]
[161.41336060 101.35916901]
[176.30400085 103.16721344]
[191.19464111 104.97526550]
[206.11087036 106.55821228]
[221.04931641 107.91569519]
[235.49308777 101.45904541]
[247.46791077 110.31639862]
[262.40637207 111.67388153]
[277.34481812 113.03136444]
[292.28326416 114.38884735]
[307.22171021 115.74633789]
[322.16015625 117.10382080]
[337.09860229 118.46130371]
[344.13183594 104.98531342]
[355.78991699 95.23045349]
[370.29510498 90.68427277]
[385.43548584 92.04002380]
[398.90219116 99.09097290]
[408.64172363 110.76188660]
[413.16879272 125.27304840]
[411.79315186 140.41160583]
[404.72448730 153.86904907]
[393.04077148 163.59320068]
[378.52365112 168.10119629]
[363.38693237 166.70562744]
[349.93881226 159.61927795]
[340.23001099 147.92277527]
[335.74111938 133.39974976]
[320.80267334 132.04226685]
[305.86422729 130.68478394]
[290.92578125 129.32730103]
[275.98733521 127.96981812]
[261.04888916 126.61233521]
[246.11042786 125.25485229]
[232.73516846 131.80859375]
[219.69183350 122.85414886]
[204.75338745 121.49666595]
[197.68960571 124.06881714]
[189.38658142 119.86589813]
[174.49595642 118.05785370]
[159.60531616 116.24980164]
[144.71469116 114.44174957]
[129.79844666 112.85880280]
[114.85999298 111.50131989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[23 37]
[24 36]
[26 34]
[27 33]
[28 32]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[56 103]
[57 102]
[59 101]
[60 100]
[61 99]
[62 98]
[63 96]
[64 95]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[72 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
