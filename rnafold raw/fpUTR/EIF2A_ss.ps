%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGGCCCCGAGGCUGAUGGCUCCGGAAACACCAAUUCGCUGUCUCCACGCAUGAGGAGACGUGUAGGGGCCGGGUUCGGCCCUGGUGAACUCUCACCCGAGCGGUUUCUCUUUCCGGGACAAC\
) } def
/len { sequence length } bind def

/coor [
[-22.69397354 386.44989014]
[-33.20690536 385.22619629]
[-40.70690536 398.21658325]
[-48.20690536 411.20697021]
[-55.70690536 424.19732666]
[-63.20690536 437.18771362]
[-70.70690155 450.17810059]
[-78.20690155 463.16848755]
[-77.66581726 479.55871582]
[-91.73067474 487.99148560]
[-105.93275452 479.79190063]
[-105.66217041 463.39498901]
[-91.19728851 455.66848755]
[-83.69728851 442.67810059]
[-76.19728851 429.68771362]
[-68.69728851 416.69732666]
[-61.19728470 403.70697021]
[-53.69728470 390.71658325]
[-46.19728470 377.72619629]
[-55.38901138 360.60247803]
[-52.52682114 341.23672485]
[-38.57459641 327.30426025]
[-18.92509842 324.42855835]
[-12.75579262 310.75598145]
[-6.58648586 297.08340454]
[-0.41717944 283.41079712]
[5.75212717 269.73822021]
[11.92143345 256.06561279]
[18.09074020 242.39303589]
[24.26004601 228.72044373]
[14.23463154 218.82096863]
[8.19381809 206.05921936]
[6.88704395 191.97045898]
[10.49285603 178.25740051]
[18.59483528 166.58442688]
[30.22958374 158.37556458]
[44.00123978 154.64076233]
[58.24893188 155.85173035]
[64.75718689 142.33720398]
[71.26544189 128.82267761]
[77.77369690 115.30813599]
[84.28195190 101.79360199]
[83.72108459 86.80409241]
[76.22108459 73.81371307]
[68.72108459 60.82333374]
[61.22108841 47.83295059]
[53.72108841 34.84257126]
[46.22108841 21.85219002]
[30.77552032 20.36420250]
[19.17674828 10.05653000]
[15.88473606 -5.10731792]
[22.16532707 -19.29653168]
[35.60350800 -27.05506897]
[51.03202438 -25.39961433]
[62.51829529 -14.96672440]
[65.64561462 0.23194340]
[59.21146774 14.35219002]
[66.71147156 27.34257126]
[74.21147156 40.33295059]
[81.71147156 53.32333374]
[89.21147156 66.31371307]
[96.71147156 79.30409241]
[104.19049835 79.86457062]
[100.63431549 65.29221344]
[113.39453888 57.40699768]
[124.83693695 67.10604858]
[119.14855194 80.98551941]
[126.62757874 81.54599762]
[135.97993469 69.81852722]
[145.33227539 58.09105301]
[154.68461609 46.36358261]
[164.03697205 34.63610840]
[173.38931274 22.90863609]
[182.74166870 11.18116474]
[184.64945984 -5.10663319]
[199.81405640 -11.34897423]
[212.63543701 -1.12427318]
[209.92404175 15.04917431]
[194.46913147 20.53351212]
[185.11679077 32.26098251]
[175.76443481 43.98845673]
[166.41209412 55.71592712]
[157.05975342 67.44339752]
[147.70739746 79.17087555]
[138.35505676 90.89834595]
[145.52886963 104.07167053]
[160.45433044 102.57814789]
[175.37979126 101.08463287]
[190.30525208 99.59111786]
[205.23071289 98.09759521]
[218.22270203 88.09058380]
[233.27986145 94.58779144]
[234.91268921 110.90544891]
[221.44146729 120.25734711]
[206.72422791 113.02305603]
[191.79876709 114.51657867]
[176.87330627 116.01009369]
[161.94784546 117.50360870]
[147.02238464 118.99713135]
[123.75833893 127.93653870]
[104.99738312 122.07250977]
[97.79648590 108.30186462]
[91.28823090 121.81639099]
[84.77997589 135.33093262]
[78.27172089 148.84545898]
[71.76346588 162.36000061]
[82.52845764 174.23312378]
[87.92137146 189.28450012]
[87.14991760 205.21580505]
[80.36071777 219.60624695]
[68.61254883 230.28044128]
[53.71134567 235.63722229]
[37.93263626 234.88975525]
[31.76332855 248.56234741]
[25.59402084 262.23492432]
[19.42471504 275.90753174]
[13.25540829 289.58010864]
[7.08610201 303.25268555]
[0.91679525 316.92529297]
[-5.25251150 330.59786987]
[1.95031190 338.71728516]
[5.97227287 348.75689697]
[6.36461210 359.52645874]
[3.10722733 369.75863647]
[-3.39201999 378.25811768]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[23 120]
[24 119]
[25 118]
[26 117]
[27 116]
[28 115]
[29 114]
[30 113]
[38 106]
[39 105]
[40 104]
[41 103]
[42 102]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[68 85]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
[86 99]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
