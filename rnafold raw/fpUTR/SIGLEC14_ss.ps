%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCACCCUCCGGCUUCCUGUCGGGGCUUUCUCAGCCCCACCCCACGUUUGGACAUUUGGAGCAUUUCCUUCCCUGACAGCCGGACCUGGGACUGGGCUGGGGCCCUGGCGGAUGGAGAC\
) } def
/len { sequence length } bind def

/coor [
[69.12153625 378.27548218]
[54.94429779 384.18325806]
[39.71464539 382.19497681]
[27.52927017 372.84555054]
[21.66598129 358.64984131]
[23.70197296 343.42651367]
[33.08957291 331.27050781]
[47.30356216 325.45172119]
[49.24536514 310.57794189]
[51.18717194 295.70416260]
[53.12897491 280.83038330]
[55.07077789 265.95660400]
[53.11643600 262.88455200]
[52.62451935 258.68005371]
[54.12555695 254.07548523]
[57.78641891 250.01823425]
[60.87969208 235.34065247]
[63.97296906 220.66305542]
[62.25271988 213.38128662]
[67.34176636 205.64686584]
[70.81504059 191.05451965]
[74.28831482 176.46217346]
[77.76158142 161.86984253]
[81.23485565 147.27749634]
[84.70812988 132.68516541]
[88.18139648 118.09281921]
[91.65467072 103.50048065]
[90.03543854 99.85076141]
[90.09593201 95.49232483]
[92.11902618 91.22090149]
[96.00797272 87.92951202]
[100.60617828 73.65167999]
[105.20437622 59.37384415]
[109.80257416 45.09600830]
[114.40077209 30.81817436]
[118.99897766 16.54033852]
[123.59717560 2.26250482]
[128.19537354 -12.01532936]
[119.21485138 -24.53157234]
[119.32498169 -39.75790787]
[128.27397156 -51.85665512]
[142.46138000 -56.31258392]
[147.05958557 -70.59041595]
[151.65777588 -84.86825562]
[156.25598145 -99.14608765]
[153.12158203 -114.65370178]
[164.38787842 -124.39638519]
[168.98608398 -138.67422485]
[173.58427429 -152.95205688]
[178.18247986 -167.22988892]
[182.78068542 -181.50772095]
[187.37887573 -195.78555298]
[175.09405518 -206.06999207]
[167.69203186 -220.23574829]
[166.27136230 -236.11701965]
[171.01867676 -251.29838562]
[181.18472290 -263.48211670]
[195.20245361 -270.83593750]
[210.92852783 -272.26858521]
[215.15451050 -286.66098022]
[219.38049316 -301.05337524]
[223.60649109 -315.44577026]
[214.79446411 -328.36404419]
[216.39920044 -343.91909790]
[227.66299438 -354.76623535]
[243.26744080 -355.78384399]
[255.84457397 -346.49139404]
[259.45587158 -331.27648926]
[252.39619446 -317.32318115]
[237.99888611 -311.21978760]
[233.77288818 -296.82739258]
[229.54690552 -282.43499756]
[225.32092285 -268.04260254]
[236.61912537 -259.61526489]
[244.36206055 -247.80162048]
[247.59503174 -234.02079773]
[245.90660095 -219.93670654]
[239.48080444 -207.25708008]
[229.07733154 -197.52645874]
[215.94184875 -191.93803406]
[201.65670776 -191.18736267]
[197.05851746 -176.90951538]
[192.46031189 -162.63168335]
[187.86210632 -148.35385132]
[183.26391602 -134.07601929]
[178.66571045 -119.79818726]
[182.12899780 -105.31181335]
[170.53381348 -94.54788971]
[165.93560791 -80.27005005]
[161.33741760 -65.99221802]
[156.73921204 -51.71438599]
[165.65983582 -39.81647110]
[165.86639404 -24.76916695]
[157.07009888 -12.34022522]
[142.47320557 -7.41712952]
[137.87501526 6.86070490]
[133.27680969 21.13853836]
[128.67860413 35.41637421]
[124.08040619 49.69420624]
[119.48220825 63.97204208]
[114.88401031 78.24987793]
[110.28581238 92.52770996]
[106.24700928 106.97375488]
[102.77373505 121.56609344]
[99.30046844 136.15843201]
[95.82719421 150.75077820]
[92.35391998 165.34310913]
[88.88065338 179.93545532]
[85.40737915 194.52778625]
[81.93410492 209.12013245]
[78.65055847 223.75633240]
[75.55728149 238.43391418]
[72.46401215 253.11151123]
[69.94455719 267.89840698]
[68.00275421 282.77218628]
[66.06095123 297.64596558]
[64.11914825 312.51974487]
[62.17734528 327.39352417]
[74.42108917 336.66641235]
[80.37326050 350.82507324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 118]
[9 117]
[10 116]
[11 115]
[12 114]
[16 113]
[17 112]
[18 111]
[20 110]
[21 109]
[22 108]
[23 107]
[24 106]
[25 105]
[26 104]
[27 103]
[31 102]
[32 101]
[33 100]
[34 99]
[35 98]
[36 97]
[37 96]
[38 95]
[42 91]
[43 90]
[44 89]
[45 88]
[47 86]
[48 85]
[49 84]
[50 83]
[51 82]
[52 81]
[59 73]
[60 72]
[61 71]
[62 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
