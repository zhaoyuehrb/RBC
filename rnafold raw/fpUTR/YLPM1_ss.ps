%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUACACGCUCCGGGGCCUGUAGGCGCCGCGAGUUCCGGCUGUCGCCGUCGCCGCCGCGGCUCCUGGAGGUCGGUUGCGACGAGUAACGGCGCCAGGACGAGCCCUGCGCCUUCUUUUUCGAU\
) } def
/len { sequence length } bind def

/coor [
[133.47988892 191.91821289]
[118.48494720 191.52838135]
[105.52625275 183.97377014]
[97.79914093 171.11718750]
[97.20896149 156.12881470]
[103.90124512 142.70445251]
[116.22580719 134.15429688]
[131.14245605 132.58645630]
[119.11894989 123.61788177]
[107.09544373 114.64930725]
[90.43249512 113.16854095]
[83.87506866 97.77871704]
[71.62997437 89.11512756]
[59.38488770 80.45153809]
[52.66762161 79.43742371]
[48.20880508 75.68944550]
[46.75708008 71.03219604]
[34.96275330 61.76430511]
[23.16842842 52.49641037]
[11.37410164 43.22851562]
[-4.25737953 40.78569794]
[-9.48412132 26.83827972]
[-21.27844810 17.57038498]
[-33.07277298 8.30249023]
[-44.86709976 -0.96540356]
[-60.49858093 -3.40822291]
[-65.72532654 -17.35564041]
[-77.51964569 -26.62353516]
[-89.31397247 -35.89142990]
[-101.10829926 -45.15932083]
[-112.90262604 -54.42721558]
[-124.69695282 -63.69511032]
[-144.69673157 -65.53414917]
[-151.34179688 -83.62242889]
[-163.58688354 -92.28601837]
[-178.96768188 -89.82255554]
[-191.26252747 -98.78310394]
[-193.51628113 -113.46153259]
[-205.76136780 -122.12512207]
[-218.00645447 -130.78871155]
[-230.25154114 -139.45230103]
[-246.62200928 -140.42178345]
[-253.72473145 -155.20297241]
[-244.25302124 -168.59024048]
[-227.95059204 -166.81192017]
[-221.58795166 -151.69738770]
[-209.34286499 -143.03379822]
[-197.09777832 -134.37020874]
[-184.85269165 -125.70661926]
[-170.26098633 -128.46662903]
[-157.71929932 -119.85494232]
[-154.92329407 -104.53110504]
[-142.67820740 -95.86751556]
[-132.66569519 -98.50811005]
[-122.66343689 -95.07257080]
[-116.11847687 -86.48566437]
[-115.42906189 -75.48944092]
[-103.63473511 -66.22154236]
[-91.84040833 -56.95364761]
[-80.04608154 -47.68575668]
[-68.25175476 -38.41786194]
[-56.45742798 -29.14996719]
[-41.66955566 -27.37004852]
[-35.59920502 -12.75973034]
[-23.80488014 -3.49183583]
[-12.01055336 5.77605820]
[-0.21622680 15.04395294]
[14.57164478 16.82386971]
[20.64199638 31.43418884]
[32.43632126 40.70208359]
[44.23064804 49.96997833]
[56.02497482 59.23787308]
[68.04847717 68.20644379]
[80.29357147 76.87003326]
[92.53865814 85.53363037]
[104.18692780 84.27050018]
[113.66581726 91.15731812]
[116.06401825 102.62580109]
[128.08752441 111.59437561]
[140.11102295 120.56295013]
[151.05090332 122.12111664]
[156.62432861 130.18936157]
[170.35295105 136.23295593]
[184.08155823 142.27655029]
[197.81018066 148.32014465]
[213.55807495 146.79882812]
[222.08918762 159.00822449]
[235.81781006 165.05181885]
[255.64660645 161.85934448]
[266.58126831 177.72679138]
[280.59619141 183.07296753]
[294.61114502 188.41914368]
[308.62606812 193.76531982]
[322.64102173 199.11149597]
[331.88897705 199.25978088]
[336.93817139 204.77214050]
[350.81433105 210.46882629]
[364.69049072 216.16551208]
[379.17419434 209.84115601]
[393.85702515 215.68838501]
[400.02789307 230.23814392]
[394.02575684 244.85833740]
[379.41156006 250.87504578]
[364.85565186 244.71867371]
[358.99380493 230.04167175]
[345.11764526 224.34498596]
[331.24148560 218.64830017]
[317.29483032 213.12643433]
[303.27990723 207.78025818]
[289.26495361 202.43408203]
[275.25003052 197.08790588]
[261.23510742 191.74171448]
[252.19384766 196.78936768]
[241.65142822 195.94921875]
[233.17662048 189.25975037]
[229.77421570 178.78044128]
[216.04559326 172.73684692]
[201.27966309 174.69044495]
[191.76658630 162.04876709]
[178.03796387 156.00517273]
[164.30934143 149.96157837]
[150.58073425 143.91798401]
[156.56645203 157.67192078]
[155.19830322 172.60940552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 80]
[9 79]
[10 78]
[12 75]
[13 74]
[14 73]
[17 72]
[18 71]
[19 70]
[20 69]
[22 67]
[23 66]
[24 65]
[25 64]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[34 53]
[35 52]
[38 49]
[39 48]
[40 47]
[41 46]
[82 122]
[83 121]
[84 120]
[85 119]
[87 117]
[88 116]
[90 112]
[91 111]
[92 110]
[93 109]
[94 108]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
