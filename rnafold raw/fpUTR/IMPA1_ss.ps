%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUAAGGGCGGAACUUCCUGUUGCGAGUAGCCCCUCUACCUCCGGAAGAGACGAGUGCGGUAACACCGUUCACAGAGCUAGCCGGACGUCCUCCGACUCAAGCUCCUAGAAACUUGGUGCAUCCCCAGGCCCAGGUAGUCACUCUAAGUG\
) } def
/len { sequence length } bind def

/coor [
[18.92964554 197.10179138]
[11.35455227 199.71311951]
[3.34745002 200.79228210]
[-4.78229856 200.27105713]
[-12.71536160 198.14356995]
[-20.13498116 194.46754456]
[-26.73961449 189.36305237]
[-37.98307419 199.29202271]
[-49.22653580 209.22100830]
[-60.46999741 219.14997864]
[-60.52227402 230.10632324]
[-66.50319672 239.02217102]
[-76.21403503 243.05700684]
[-86.31948853 241.08872986]
[-97.96366119 250.54458618]
[-109.60783386 260.00045776]
[-121.25200653 269.45629883]
[-127.08724976 284.16210938]
[-141.84468079 286.17895508]
[-147.19190979 301.68182373]
[-163.34069824 304.53637695]
[-173.67857361 291.80609131]
[-167.57080078 276.58676147]
[-151.30053711 274.53479004]
[-146.29815674 260.50534058]
[-130.70785522 257.81213379]
[-119.06369019 248.35627747]
[-107.41951752 238.90040588]
[-95.77534485 229.44454956]
[-90.28542328 210.94253540]
[-70.39897156 207.90652466]
[-59.15551376 197.97753906]
[-47.91205215 188.04856873]
[-36.66859055 178.11959839]
[-40.50094223 163.61741638]
[-55.18169403 160.53918457]
[-69.86244965 157.46095276]
[-84.54319763 154.38272095]
[-99.63747406 159.12335205]
[-110.50605774 148.93888855]
[-125.18681335 145.86065674]
[-141.92964172 148.52787781]
[-149.12750244 133.17773438]
[-136.36981201 122.01181793]
[-122.10858154 131.17990112]
[-107.42782593 134.25813293]
[-93.38362122 129.29734802]
[-81.46497345 139.70198059]
[-66.78421783 142.78019714]
[-52.10346603 145.85842896]
[-37.42271423 148.93666077]
[-20.08040810 126.44221497]
[6.60490894 120.56085968]
[29.88293076 132.68936157]
[42.26819229 124.22736359]
[54.65345001 115.76536560]
[67.03871155 107.30337524]
[79.42396545 98.84137726]
[82.95578766 84.26309967]
[75.81657410 71.07099152]
[68.67736816 57.87888336]
[61.53815460 44.68677902]
[48.68196487 33.63441849]
[55.74344635 18.22105408]
[72.50926208 20.73972702]
[74.73026276 37.54756927]
[81.86946869 50.73967361]
[89.00868225 63.93178177]
[96.14789581 77.12388611]
[111.11906433 78.05336761]
[119.83522034 65.84563446]
[128.55137634 53.63790512]
[123.79494476 38.98585510]
[128.52288818 24.51173782]
[140.72282410 15.70120716]
[155.59339905 15.76318741]
[164.30955505 3.55545664]
[173.02571106 -8.65227413]
[181.74185181 -20.86000443]
[190.45800781 -33.06773758]
[198.91999817 -45.45299530]
[207.12422180 -58.01049042]
[208.19479370 -73.79543304]
[221.63336182 -80.21837616]
[229.83758545 -92.77587891]
[238.04180908 -105.33337402]
[246.24603271 -117.89086914]
[244.37426758 -133.82435608]
[255.76646423 -145.12026978]
[271.68350220 -143.11334229]
[279.91516113 -129.34312439]
[274.14688110 -114.37294769]
[258.80352783 -109.68664551]
[250.59930420 -97.12915039]
[242.39508057 -84.57165527]
[234.19085693 -72.01416016]
[233.70710754 -57.12741089]
[219.68173218 -49.80627060]
[211.47750854 -37.24877167]
[211.58052063 -32.41641617]
[208.60563660 -27.48087692]
[202.66574097 -24.35158348]
[193.94958496 -12.14385319]
[185.23344421 0.06387801]
[176.51728821 12.27160835]
[167.80113220 24.47933960]
[172.68821716 38.52406693]
[168.31639099 52.92375565]
[156.16168213 62.09525299]
[140.75910950 62.35405731]
[132.04295349 74.56179047]
[123.32679749 86.76952362]
[127.00907898 101.31052399]
[140.48493958 107.89847565]
[153.96081543 114.48641968]
[167.43667603 121.07437134]
[180.91253662 127.66232300]
[194.38839722 134.25027466]
[203.53611755 135.22128296]
[208.07257080 141.11614990]
[221.40940857 147.98120117]
[235.20306396 140.87382507]
[250.53482056 143.26483154]
[261.50930786 154.23480225]
[263.90658569 169.56556702]
[256.80490112 183.36215210]
[242.93495178 190.31945801]
[227.63003540 187.76229858]
[216.77520752 176.67390442]
[214.54435730 161.31803894]
[201.20751953 154.45298767]
[187.80046082 147.72613525]
[174.32458496 141.13818359]
[160.84872437 134.55023193]
[147.37286377 127.96228790]
[133.89700317 121.37433624]
[120.42113495 114.78639221]
[111.09004974 120.19340515]
[101.25836182 120.82630157]
[93.04092407 117.34640503]
[87.88596344 111.22663879]
[75.50070190 119.68862915]
[63.11544418 128.15061951]
[50.73018646 136.61262512]
[38.34492493 145.07461548]
[40.87642288 152.11009216]
[41.98397064 159.57232666]
[41.59825897 167.17347717]
[39.70811844 174.61503601]
[36.36194992 181.59967041]
[31.66684151 187.84298706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 34]
[8 33]
[9 32]
[10 31]
[14 29]
[15 28]
[16 27]
[17 26]
[19 24]
[35 51]
[36 50]
[37 49]
[38 48]
[40 46]
[41 45]
[54 145]
[55 144]
[56 143]
[57 142]
[58 141]
[59 69]
[60 68]
[61 67]
[62 66]
[70 112]
[71 111]
[72 110]
[76 106]
[77 105]
[78 104]
[79 103]
[80 102]
[81 99]
[82 98]
[84 96]
[85 95]
[86 94]
[87 93]
[113 137]
[114 136]
[115 135]
[116 134]
[117 133]
[118 132]
[120 131]
[121 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
