%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCCGGCGAAACCACCCUCCCGUGCAGCCGAGCCCAGCCGCUCUCCGGCCGCCGUCCCCGGCGGCCCC\
) } def
/len { sequence length } bind def

/coor [
[74.45246887 112.80638123]
[59.74883652 115.77340698]
[45.11444092 119.06498718]
[30.55644226 122.67950439]
[19.02735901 133.51420593]
[4.81067944 129.07176208]
[-9.74731731 132.68627930]
[-24.30531502 136.30079651]
[-32.17296219 141.56147766]
[-39.58719635 139.73800659]
[-54.29082489 142.70503235]
[-60.62551117 156.87017822]
[-74.09320068 164.57737732]
[-89.51528168 162.86306763]
[-100.96166229 152.38642883]
[-104.03097534 137.17594910]
[-97.54299927 123.08035278]
[-83.99249268 115.51969147]
[-68.58991241 117.40120697]
[-57.25785446 128.00140381]
[-42.55422592 125.03437042]
[-27.91983032 121.74279022]
[-13.36183262 118.12828064]
[1.19616401 114.51376343]
[11.68396378 103.93759155]
[26.94192696 108.12150574]
[41.49992371 104.50698853]
[47.41934586 99.68450165]
[56.78180695 101.06977844]
[71.48543549 98.10275269]
[80.47418213 79.13322449]
[99.99810028 71.42238617]
[103.93378448 56.94791412]
[107.86946869 42.47344208]
[111.80515289 27.99896812]
[103.73699951 14.40924740]
[107.72224426 -0.88432640]
[121.39650726 -8.80834770]
[136.64709473 -4.66163445]
[144.42608643 9.09564114]
[140.11837769 24.30153084]
[126.27962494 31.93465233]
[122.34394073 46.40912628]
[118.40825653 60.88359833]
[114.47257233 75.35807037]
[121.29425049 80.94128418]
[126.08977509 88.33794403]
[128.40283203 96.84426117]
[128.01335144 105.65084076]
[141.42335510 112.37184143]
[154.83335876 119.09284210]
[168.24336243 125.81384277]
[181.65335083 132.53485107]
[195.06335449 139.25584412]
[208.47335815 145.97685242]
[221.88336182 152.69786072]
[238.21316528 151.19129944]
[247.46057129 164.73446655]
[240.11267090 179.39529419]
[223.72831726 180.09199524]
[215.16235352 166.10784912]
[201.75236511 159.38685608]
[188.34236145 152.66584778]
[174.93235779 145.94485474]
[161.52235413 139.22384644]
[148.11235046 132.50285339]
[134.70234680 125.78184509]
[121.29235077 119.06084442]
[109.90513611 126.80612183]
[96.21764374 128.32620239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 27]
[4 26]
[6 24]
[7 23]
[8 22]
[10 21]
[11 20]
[32 45]
[33 44]
[34 43]
[35 42]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
