%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGCAUGCUUUGGCAGACGUGGCACCGGGAACUCGGAGGCGGGGAGCGGCUGGGAAGUGGCCGUGGUGGUUGGCCGCGGUGGAGCUAGCAGGCGGGCGGGCGGGAGCGGGCGCCGGAGUGGAGAAAGGAGCCAGCGGUGGGCAGCGCUGCUGGG\
) } def
/len { sequence length } bind def

/coor [
[246.86721802 309.24691772]
[243.52493286 286.06741333]
[251.96951294 264.15768433]
[241.41610718 253.49816895]
[230.86270142 242.83863831]
[220.30928040 232.17910767]
[205.85647583 228.57832336]
[201.64561462 213.32777405]
[191.09220886 202.66824341]
[180.53880310 192.00871277]
[169.98539734 181.34918213]
[159.43197632 170.68966675]
[148.87857056 160.03013611]
[134.42576599 156.42933655]
[130.21490479 141.17878723]
[119.66149902 130.51927185]
[105.46424103 135.89070129]
[90.31171417 134.98767090]
[76.85291290 127.96806335]
[67.44071198 116.05903625]
[55.98517227 126.97147369]
[41.73876953 122.62528992]
[30.28323555 133.53773499]
[16.03683281 129.19154358]
[1.50361776 132.90444946]
[-11.33085442 146.07276917]
[-28.02662277 140.74533081]
[-42.48263931 144.74827576]
[-56.93865204 148.75123596]
[-71.39466858 152.75418091]
[-82.50148773 164.81944275]
[-98.44237518 160.96974182]
[-102.81871033 145.16532898]
[-91.12849426 133.66441345]
[-75.39762115 138.29817200]
[-60.94160461 134.29521179]
[-46.48558807 130.29226685]
[-32.02957535 126.28931427]
[-25.77150917 115.89643097]
[-13.71710300 112.46553802]
[-2.20928454 118.37123108]
[12.32393074 114.65833282]
[22.73995399 104.01146698]
[38.02586746 108.09207916]
[48.44189072 97.44521332]
[63.72780609 101.52582550]
[68.49921417 81.95281982]
[82.97106934 67.93731689]
[78.82368469 53.52207565]
[65.27612305 41.08857346]
[70.10011292 24.24044609]
[65.66512299 9.91107273]
[61.23014450 -4.41829967]
[56.79515839 -18.74767303]
[52.36017609 -33.07704544]
[40.90391922 -36.49463272]
[32.62343979 -44.95034409]
[29.51041603 -56.24385071]
[32.23262024 -67.51422882]
[39.99466324 -75.96460724]
[28.96816254 -87.31039429]
[33.17159271 -101.59957123]
[29.31347466 -116.09490967]
[25.45535469 -130.59025574]
[21.59723473 -145.08558655]
[17.73911476 -159.58093262]
[13.88099480 -174.07627869]
[10.02287483 -188.57160950]
[6.16475487 -203.06695557]
[-6.93866920 -212.32328796]
[-7.72774172 -228.34692383]
[4.40284634 -238.84590149]
[20.14754677 -235.76629639]
[27.42837143 -221.47052002]
[20.66009521 -206.92507935]
[24.51821518 -192.42973328]
[28.37633514 -177.93438721]
[32.23445511 -163.43905640]
[36.09257507 -148.94371033]
[39.95069504 -134.44836426]
[43.80881500 -119.95302582]
[47.66693497 -105.45768738]
[58.41747665 -95.14870453]
[54.49000549 -79.82273102]
[70.83278656 -71.66531372]
[76.16877747 -53.86446762]
[66.68955231 -37.51202774]
[71.12453461 -23.18265533]
[75.55951691 -8.85328293]
[79.99449921 5.47608948]
[84.42948151 19.80546188]
[95.00549316 25.74880981]
[98.79660797 37.69482422]
[93.23892975 49.37469482]
[97.38630676 63.78993607]
[108.83487701 64.78714752]
[119.39818573 69.31269836]
[128.01779175 76.91312408]
[133.83000183 86.82686615]
[136.25242615 98.06056213]
[135.04235840 109.48858643]
[130.32102966 119.96585846]
[140.87443542 130.62538147]
[156.08209229 134.98861694]
[159.53810120 149.47671509]
[170.09150696 160.13624573]
[180.64491272 170.79577637]
[191.19833374 181.45530701]
[201.75173950 192.11483765]
[212.30514526 202.77436829]
[227.51280212 207.13758850]
[230.96881104 221.62570190]
[241.52221680 232.28523254]
[252.07563782 242.94476318]
[262.62902832 253.60429382]
[269.47982788 249.60182190]
[276.90603638 246.82456970]
[284.69067383 245.35159302]
[292.60662842 245.22387695]
[300.42330933 246.44314575]
[307.91339111 248.97198486]
[314.85928345 252.73484802]
[321.05966187 257.62045288]
[326.33514404 263.48489380]
[330.53353882 270.15612793]
[333.53417969 277.43875122]
[335.25155640 285.11993408]
[335.63751221 292.97549438]
[334.68276978 300.77658081]
[332.41711426 308.29617310]
[328.90838623 315.31582642]
[324.26055908 321.63201904]
[318.61056519 327.06188965]
[326.06719971 340.07720947]
[333.52383423 353.09252930]
[340.98046875 366.10784912]
[348.43710327 379.12316895]
[355.89373779 392.13848877]
[363.35037231 405.15380859]
[370.80700684 418.16912842]
[378.26367188 431.18444824]
[393.30703735 436.75906372]
[398.19097900 452.04064941]
[389.16891479 465.30645752]
[373.16183472 466.38012695]
[362.44897461 454.43801880]
[365.24832153 438.64108276]
[357.79168701 425.62576294]
[350.33505249 412.61044312]
[342.87841797 399.59512329]
[335.42178345 386.57980347]
[327.96514893 373.56448364]
[320.50851440 360.54916382]
[313.05187988 347.53384399]
[305.59524536 334.51852417]
[282.49023438 336.96896362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 115]
[4 114]
[5 113]
[6 112]
[8 110]
[9 109]
[10 108]
[11 107]
[12 106]
[13 105]
[15 103]
[16 102]
[20 46]
[22 44]
[24 42]
[25 41]
[27 38]
[28 37]
[29 36]
[30 35]
[48 95]
[49 94]
[51 91]
[52 90]
[53 89]
[54 88]
[55 87]
[60 84]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
[133 155]
[134 154]
[135 153]
[136 152]
[137 151]
[138 150]
[139 149]
[140 148]
[141 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
