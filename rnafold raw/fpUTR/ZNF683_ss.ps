%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUGUCCCACAUGCCCUGGGGAGGUAGCACAAAGGGAGGACCAUGGUCUUCUAACUGAGGAACCUGAGCAGAUGCCUUGACCCAGACCAGAGACCCAAGCCAAGGAAAGCCCAUGAUCACCAGAGUAAUGGGGAU\
) } def
/len { sequence length } bind def

/coor [
[89.43147278 350.16421509]
[77.11133575 360.06317139]
[61.40931702 358.26812744]
[51.64115143 345.84402466]
[53.60211563 330.16186523]
[66.12880707 320.52560425]
[67.83250427 305.62265015]
[69.53620911 290.71972656]
[71.23991394 275.81680298]
[72.94361877 260.91384888]
[70.55754089 253.85029602]
[74.85948181 245.69248962]
[76.90198517 230.83219910]
[78.94448090 215.97190857]
[80.81770325 201.08934021]
[82.52140808 186.18640137]
[76.27973938 172.66268921]
[85.53440094 159.83062744]
[87.23809814 144.92768860]
[88.94180298 130.02476501]
[90.64550781 115.12182617]
[87.10630798 109.72029114]
[86.03291321 103.94309235]
[87.18005371 98.76969910]
[74.02231598 91.56734467]
[60.86457443 84.36499023]
[47.70683289 77.16263580]
[32.70995712 81.37350464]
[19.46873665 73.88185883]
[15.54674149 59.55867386]
[-0.27364776 59.71945190]
[-7.72267103 46.82133865]
[-20.88040924 39.61898422]
[-34.86275482 46.08429337]
[-49.79645157 43.11140442]
[-59.99544907 32.04594040]
[-61.70254898 17.27354240]
[-74.86028290 10.07118797]
[-88.01802826 2.86883378]
[-101.17576599 -4.33352041]
[-114.33350372 -11.53587437]
[-127.49124146 -18.73822784]
[-140.64898682 -25.94058228]
[-157.02264404 -25.02654457]
[-165.77339172 -38.89579773]
[-157.89923096 -53.28084564]
[-141.50041199 -53.38358307]
[-133.44662476 -39.09832001]
[-120.28888702 -31.89596748]
[-107.13114929 -24.69361305]
[-93.97341156 -17.49125862]
[-80.81567383 -10.28890514]
[-67.65793610 -3.08655119]
[-54.50019455 4.11580276]
[-41.13640594 -2.40701437]
[-26.31895828 0.22116010]
[-15.76693439 11.19878197]
[-13.67805576 26.46124458]
[-0.52031684 33.66359711]
[14.35894299 32.98765945]
[22.74909592 46.40093613]
[36.92808151 41.98596573]
[50.37450027 49.10274124]
[54.90918732 64.00489807]
[68.06692505 71.20725250]
[81.22466278 78.40960693]
[94.38240814 85.61196136]
[109.37365723 85.09984589]
[116.82890320 71.14527893]
[131.71960449 70.80423737]
[144.35516357 62.72076035]
[143.44641113 50.15476990]
[147.97299194 38.47494125]
[157.00735474 29.90304375]
[168.77091980 26.04109764]
[180.98410034 27.57223320]
[191.30793762 34.14072037]
[204.29830933 26.64072227]
[217.28869629 19.14072227]
[230.27906799 11.64072132]
[243.26945496 4.14072180]
[239.51670837 -10.48184586]
[239.84941101 -25.57462311]
[244.24284363 -40.01762390]
[252.37101746 -52.73907852]
[263.63073730 -62.79497910]
[277.18649292 -69.43910217]
[292.03231812 -72.17841339]
[307.06658936 -70.80963898]
[321.17364502 -65.43434906]
[333.30664062 -56.45143127]
[342.56524658 -44.52746582]
[348.26239014 -30.54730225]
[349.97531128 -15.54835510]
[347.57693481 -0.64364725]
[341.24520874 13.06079292]
[331.44998169 24.54800415]
[318.91812134 32.96556091]
[304.57958984 37.68882370]
[289.49841309 38.36729431]
[274.79367065 34.95062637]
[261.55661011 27.69235802]
[250.76945496 17.13110352]
[237.77906799 24.63110352]
[224.78869629 32.13110352]
[211.79830933 39.63110352]
[198.80793762 47.13110352]
[197.82621765 64.69532013]
[186.44767761 78.31558990]
[169.03466797 82.47926331]
[152.43864441 75.35632324]
[139.80308533 83.43980408]
[133.25161743 96.81618500]
[117.45713806 97.73540497]
[132.22250366 95.09263611]
[145.51603699 102.04115295]
[151.77462769 115.67310333]
[148.37915039 130.28373718]
[136.75056458 139.75874329]
[121.75522614 140.13299561]
[109.66845703 131.24986267]
[105.54843903 116.82553101]
[103.84473419 131.72845459]
[102.14103699 146.63139343]
[100.43733215 161.53433228]
[106.55713654 176.12399292]
[97.42433929 187.89010620]
[95.72063446 202.79304504]
[97.86682892 211.76245117]
[93.80477142 218.01440430]
[91.76226807 232.87469482]
[89.71977234 247.73498535]
[87.84654999 262.61755371]
[86.14284515 277.52050781]
[84.43914032 292.42343140]
[82.73544312 307.32635498]
[81.03173828 322.22930908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 137]
[7 136]
[8 135]
[9 134]
[10 133]
[12 132]
[13 131]
[14 130]
[15 128]
[16 127]
[18 125]
[19 124]
[20 123]
[21 122]
[24 67]
[25 66]
[26 65]
[27 64]
[30 61]
[32 59]
[33 58]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[68 114]
[70 112]
[71 111]
[77 107]
[78 106]
[79 105]
[80 104]
[81 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
