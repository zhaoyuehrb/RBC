%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUGACUCCCCAGCACCGGGCGGUGAUGAAUUGGGACGCAGGCGCGGAGCCCAGGGACCACUCCCCCUGCACAGACAUGAGACCAUAGGGGACCUGUCUGGGUGGCCUCAGGGAUAGGCGCUCCCCAAGGUGUGAAUGAGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[121.34544373 126.23071289]
[98.84703827 139.05339050]
[89.62053680 150.88012695]
[80.39404297 162.70686340]
[78.00601959 178.34681702]
[64.07701111 183.62240601]
[54.85050964 195.44914246]
[45.62401199 207.27587891]
[43.23599243 222.91583252]
[29.30698204 228.19142151]
[20.08048248 240.01815796]
[10.85398293 251.84489441]
[13.03971481 267.49731445]
[3.45078444 280.06027222]
[-12.22386551 282.08038330]
[-24.68474388 272.35916138]
[-26.53903198 256.66403198]
[-16.68661308 244.30664062]
[-0.97275436 242.61839294]
[8.25374508 230.79165649]
[17.48024368 218.96492004]
[19.20832062 204.17089844]
[33.79727554 198.04937744]
[43.02377319 186.22264099]
[52.25027466 174.39590454]
[53.97834778 159.60188293]
[68.56729889 153.48036194]
[77.79380035 141.65362549]
[87.02030182 129.82688904]
[84.73318481 122.68412781]
[70.07436371 119.50306702]
[80.15894318 108.39859772]
[77.87182617 101.25582886]
[63.49180984 96.98791504]
[49.11179352 92.72000122]
[34.73177338 88.45208740]
[15.42432499 94.08279419]
[2.63927913 79.63181305]
[-11.90997124 75.98224640]
[-26.45922279 72.33268738]
[-42.07252884 77.34832764]
[-54.03948212 66.13565063]
[-50.04950333 50.22929764]
[-34.20714188 45.99235916]
[-22.80966187 57.78343582]
[-8.26041031 61.43299866]
[6.28884077 65.08255768]
[14.62429810 59.02388763]
[25.14022064 58.58236694]
[34.33152008 64.14915466]
[38.99968719 74.07207489]
[53.37970734 78.33998871]
[67.75972748 82.60790253]
[82.13973999 86.87581635]
[91.23934174 74.95116425]
[83.32682800 62.20783997]
[75.41432190 49.46452332]
[67.50181580 36.72120285]
[52.79671097 29.46227837]
[52.00072479 13.08245945]
[65.93269348 4.43190002]
[80.26060486 12.40955257]
[80.24513245 28.80869293]
[88.15764618 41.55201340]
[96.07015228 54.29533386]
[103.98265839 67.03865051]
[117.63318634 73.25662231]
[132.44091797 70.86262512]
[147.24864197 68.46862030]
[162.05636597 66.07462311]
[176.86408997 63.68062592]
[190.81889343 51.71660614]
[206.97000122 58.50250244]
[221.72319031 55.79261398]
[230.70492554 43.06602097]
[245.70536804 40.52797318]
[257.78286743 49.16911316]
[272.53607178 46.45922470]
[287.28924561 43.74933624]
[291.36624146 40.26621628]
[295.92019653 38.88368607]
[300.05264282 39.42355728]
[303.07250977 41.37038803]
[317.96902466 39.61130905]
[332.86550903 37.85222626]
[339.96334839 26.35534477]
[352.21710205 21.14277267]
[365.04101562 23.92060280]
[373.77569580 33.44922638]
[388.70639038 32.00888062]
[403.63708496 30.56853676]
[418.56774902 29.12819099]
[433.49844360 27.68784714]
[448.37530518 25.76968956]
[463.18301392 23.37569046]
[477.99075317 20.98169136]
[492.79846191 18.58769417]
[507.60620117 16.19369507]
[522.41394043 13.79969692]
[537.22167969 11.40569878]
[551.94506836 8.53831863]
[566.56896973 5.20050478]
[581.19287109 1.86269093]
[595.28942871 -7.55659294]
[608.24291992 3.38156533]
[601.31811523 18.85681725]
[584.53070068 16.48661041]
[569.90679932 19.82442284]
[555.28283691 23.16223717]
[553.09063721 26.00897217]
[549.37847900 27.90327072]
[544.62457275 28.12780762]
[539.61566162 26.21342468]
[524.80792236 28.60742378]
[510.00021362 31.00142288]
[495.19247437 33.39542007]
[480.38473511 35.78941727]
[465.57702637 38.18341827]
[450.76928711 40.57741547]
[448.39916992 43.27784348]
[444.57327271 44.93041229]
[439.81472778 44.84990311]
[434.93878174 42.61853409]
[420.00808716 44.05887985]
[405.07742310 45.49922562]
[390.14672852 46.93956757]
[375.21603394 48.37991333]
[365.12136841 61.79114532]
[348.12005615 63.82600784]
[334.62460327 52.74872208]
[319.72808838 54.50780487]
[304.83160400 56.26688766]
[289.99914551 58.50252151]
[275.24594116 61.21240997]
[260.49276733 63.92229843]
[252.27444458 76.29141235]
[237.35122681 79.24978638]
[224.43309021 70.54579926]
[209.67990112 73.25569153]
[202.52033997 83.06089020]
[190.19891357 85.40621185]
[179.25808716 78.48834991]
[164.45036316 80.88235474]
[149.64263916 83.27635193]
[134.83491516 85.67034912]
[120.02718353 88.06434631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[4 27]
[6 25]
[7 24]
[8 23]
[10 21]
[11 20]
[12 19]
[33 54]
[34 53]
[35 52]
[36 51]
[38 47]
[39 46]
[40 45]
[55 66]
[56 65]
[57 64]
[58 63]
[67 146]
[68 145]
[69 144]
[70 143]
[71 142]
[73 139]
[74 138]
[77 135]
[78 134]
[79 133]
[83 132]
[84 131]
[85 130]
[89 127]
[90 126]
[91 125]
[92 124]
[93 123]
[94 119]
[95 118]
[96 117]
[97 116]
[98 115]
[99 114]
[100 113]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
