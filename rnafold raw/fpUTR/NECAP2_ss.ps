%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAACCUGGUCAGAGAGUCGCACCGCUUCCGUCCGUCGGACAGAGGAACGGUGGAAGUCGCCGGAAGUUCGGUGGGCUCCAGGCGUCGCG\
) } def
/len { sequence length } bind def

/coor [
[98.73857117 280.05294800]
[97.18781281 265.13333130]
[85.49748993 255.97515869]
[83.71226501 240.86662292]
[93.39745331 228.66683960]
[91.84669495 213.74722290]
[90.29593658 198.82759094]
[88.74517822 183.90797424]
[87.19441986 168.98834229]
[75.93638611 178.90080261]
[60.94981384 178.26628113]
[50.56994247 167.43769836]
[50.56985855 152.43769836]
[60.94960785 141.60899353]
[75.93617249 140.97430420]
[87.19441986 150.88682556]
[88.74517822 135.96720886]
[90.29593658 121.04758453]
[91.84669495 106.12796021]
[89.44444275 98.23709106]
[93.71716309 90.72328186]
[95.78196716 75.86607361]
[97.84677124 61.00886917]
[99.91156769 46.15166473]
[101.97637177 31.29445648]
[103.52713013 16.37483406]
[104.56199646 1.41057479]
[105.59687042 -13.55368423]
[106.63173676 -28.51794243]
[107.66660309 -43.48220062]
[108.70146942 -58.44646072]
[108.18372345 -73.43752289]
[106.11892700 -88.29473114]
[104.05412292 -103.15193939]
[101.98931885 -118.00914001]
[99.92451477 -132.86634827]
[97.85971069 -147.72355652]
[95.79490662 -162.58076477]
[83.47155762 -172.10823059]
[81.58919525 -187.20497131]
[90.74813080 -198.89468384]
[80.25023651 -211.49334717]
[86.16522980 -226.78860474]
[102.40826416 -229.04600525]
[112.26990509 -215.94332886]
[105.60533142 -200.95948792]
[117.60479736 -192.21028137]
[119.91044617 -177.17237854]
[110.65211487 -164.64556885]
[112.71691895 -149.78836060]
[114.78172302 -134.93115234]
[116.84652710 -120.07394409]
[118.91133118 -105.21674347]
[120.97612762 -90.35953522]
[123.04093170 -75.50232697]
[133.95011902 -85.79745483]
[148.94966125 -85.68059540]
[159.69711304 -75.21672821]
[160.21493530 -60.22567368]
[150.21513367 -49.04515457]
[135.25939941 -47.89356232]
[123.66572571 -57.41159439]
[122.63085938 -42.44733429]
[121.59599304 -27.48307610]
[120.56112671 -12.51881695]
[119.52626038 2.44544196]
[118.49139404 17.40970039]
[121.04441833 21.67798424]
[120.78851318 27.62913513]
[116.83358002 33.35926056]
[114.76877594 48.21646500]
[112.70397186 63.07367325]
[110.63917542 77.93087769]
[108.57437134 92.78808594]
[106.76631927 107.67871857]
[105.21556091 122.59834290]
[103.66480255 137.51795959]
[102.11404419 152.43759155]
[102.11404419 167.43759155]
[103.66480255 182.35720825]
[105.21556091 197.27684021]
[106.76631927 212.19645691]
[108.31707764 227.11607361]
[120.30423737 237.06323242]
[121.66439056 252.21594238]
[112.10743713 263.58255005]
[113.65819550 278.50219727]
[123.71497345 291.45568848]
[117.27557373 306.53765869]
[100.96430206 308.23309326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[5 83]
[6 82]
[7 81]
[8 80]
[9 79]
[16 78]
[17 77]
[18 76]
[19 75]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[31 62]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
