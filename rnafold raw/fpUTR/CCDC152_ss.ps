%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAGGGGUGUACCAGGCCCCAGAGGCAGCGGAAAGGGAGACUGUGGGGAACUAGGAGCAACAGCAGGC\
) } def
/len { sequence length } bind def

/coor [
[86.69628906 314.88061523]
[73.07839203 308.31982422]
[62.00045776 298.03530884]
[54.44754028 284.94161987]
[51.09123230 270.20300293]
[52.22997665 255.13003540]
[57.76251984 241.06297302]
[67.19690704 229.25263977]
[79.69423676 220.74923706]
[94.14326477 216.30885315]
[94.14326477 201.30885315]
[94.14326477 186.30885315]
[86.40596771 173.58157349]
[94.14326477 159.78140259]
[94.14326477 144.78140259]
[93.81143951 129.78507996]
[93.14793396 114.79975128]
[83.72690582 101.08165741]
[91.24941254 86.23734283]
[89.92371368 71.29604340]
[88.59800720 56.35474014]
[87.27230835 41.41343689]
[85.94660950 26.47213364]
[77.01992035 13.40978718]
[83.60210419 0.04849610]
[82.27640533 -14.89280605]
[73.34972382 -27.95515251]
[79.93190765 -41.31644440]
[68.09603882 -51.44314194]
[66.96443176 -66.61463165]
[76.69163513 -77.83591461]
[64.41302490 -87.78636169]
[62.84988022 -103.51315308]
[72.92958069 -115.68587494]
[88.67202759 -117.08265686]
[100.73749542 -106.87482452]
[101.96776581 -91.11849213]
[91.63293457 -79.16161346]
[103.18389130 -69.82828522]
[104.74118805 -54.69456482]
[94.87320709 -42.64214706]
[103.70507050 -30.64850044]
[97.21770477 -16.21850777]
[98.54341125 -1.27720547]
[107.37526703 10.71643925]
[100.88790894 25.14643288]
[102.21360779 40.08773422]
[103.53931427 55.02903748]
[104.86501312 69.97033691]
[106.19071198 84.91164398]
[114.76902771 93.08195496]
[115.55472565 104.90245056]
[108.13325500 114.13625336]
[108.79675293 129.12156677]
[112.39726257 137.87434387]
[109.14326477 144.78140259]
[109.14326477 159.78140259]
[116.88056946 173.58157349]
[109.14326477 186.30885315]
[109.14326477 201.30885315]
[109.14326477 216.30885315]
[123.59229279 220.74923706]
[136.08963013 229.25263977]
[145.52401733 241.06297302]
[151.05656433 255.13003540]
[152.19529724 270.20300293]
[148.83898926 284.94161987]
[141.28607178 298.03530884]
[130.20814514 308.31982422]
[116.59024048 314.88061523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 61]
[11 60]
[12 59]
[14 57]
[15 56]
[16 54]
[17 53]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[25 44]
[26 43]
[28 41]
[31 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
