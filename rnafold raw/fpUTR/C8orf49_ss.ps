%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUUUAGCUGGGAUUAUGCUGUGAUUAUGUUUGGCUUAACAGUAAUGAAAAUAAGUUUAGGCUGGGUGCGGUGGCUCAUGCCUGUAAUCCCAGCACUUUAGGAGGCUGAGGCAAGCGGAUCACCUGAGGUCAGGGGUUCGAGACAAGCCUGACCAAG\
) } def
/len { sequence length } bind def

/coor [
[270.13977051 246.38444519]
[256.97021484 242.01127625]
[245.23283386 234.59027100]
[235.62088013 224.55413818]
[228.70349121 212.49015808]
[224.89189148 199.10591125]
[224.41497803 185.18774414]
[227.30563354 171.55455017]
[213.89375305 164.83728027]
[200.48188782 158.12001038]
[187.07000732 151.40274048]
[173.65814209 144.68547058]
[160.24627686 137.96820068]
[146.83439636 131.25093079]
[133.42253113 124.53365326]
[120.01065826 117.81638336]
[106.59878540 111.09911346]
[83.82032776 124.83642578]
[69.61043549 129.64047241]
[55.40053940 134.44451904]
[41.19064331 139.24856567]
[26.98074913 144.05261230]
[12.77085304 148.85665894]
[12.44628620 164.01155090]
[6.95512438 178.14035034]
[-3.03954744 189.53694153]
[-16.33082390 196.82513428]
[-31.31371880 199.12484741]
[-46.17897415 196.15837097]
[-59.13153839 188.28392029]
[-68.60733032 176.45239258]
[-73.46209717 162.09246826]
[-73.10959625 146.93821716]
[-67.59240723 132.81956482]
[-57.57675171 121.44140625]
[-44.27206421 114.17771912]
[-29.28495789 111.90562439]
[-14.42519474 114.89949036]
[-1.48716319 122.79779053]
[7.96680546 134.64677429]
[22.17670059 129.84271240]
[36.38659668 125.03867340]
[50.59649277 120.23462677]
[64.80638885 115.43057251]
[79.01628113 110.62652588]
[64.24274445 108.02989197]
[49.46920395 105.43325043]
[34.63455582 107.65435028]
[20.48746490 102.66839600]
[10.32353497 91.63687134]
[6.51048565 77.12960815]
[9.93657875 62.52611923]
[19.80369377 51.22833252]
[33.81325912 45.86809921]
[48.70170212 47.69410324]
[61.00071335 56.28097153]
[67.84562683 69.63020325]
[78.56803131 80.11972046]
[89.29044342 90.60924530]
[84.90959167 76.26322937]
[80.52873993 61.91721344]
[76.14788818 47.57120132]
[71.76703644 33.22518539]
[67.24466705 18.92314911]
[62.58123779 4.66648769]
[57.91780472 -9.59017372]
[53.25437164 -23.84683609]
[48.59093857 -38.10349655]
[34.38349533 -45.02621841]
[29.31147385 -59.99452209]
[36.38401794 -74.12798309]
[51.40510941 -79.04146576]
[65.46300507 -71.81988525]
[70.21739960 -56.74768829]
[62.84759903 -42.76692963]
[67.51103210 -28.51026726]
[72.17446899 -14.25360680]
[76.83789825 0.00305451]
[81.50133514 14.25971603]
[86.59697723 19.66816711]
[86.11304474 28.84433365]
[90.49389648 43.19034958]
[94.87474823 57.53636169]
[99.25559998 71.88237762]
[103.63645172 86.22839355]
[113.31605530 97.68724823]
[126.72792816 104.40451813]
[140.13980103 111.12178802]
[153.55166626 117.83905792]
[166.96354675 124.55632782]
[180.37541199 131.27359009]
[193.78727722 137.99085999]
[207.19915771 144.70812988]
[220.61102295 151.42539978]
[234.02290344 158.14266968]
[244.98522949 146.14064026]
[258.85882568 137.69712830]
[274.52874756 133.48156738]
[290.73831177 133.82397461]
[306.18972778 138.68914795]
[319.64813232 147.68008423]
[330.04022217 160.07040405]
[336.53985596 174.86299133]
[338.63375854 190.87025452]
[336.16198730 206.80944824]
[349.82876587 212.99162292]
[358.99133301 213.68693542]
[363.70260620 219.43330383]
[379.48892212 218.38307190]
[387.65151978 230.84184265]
[401.19348145 237.29281616]
[414.73547363 243.74378967]
[428.27743530 250.19477844]
[444.61956787 240.34088135]
[463.45721436 242.24841309]
[477.27291870 254.97628784]
[480.66119385 273.30148315]
[494.56155396 278.93890381]
[508.46188354 284.57632446]
[522.36224365 290.21371460]
[536.26257324 295.85113525]
[550.16290283 301.48855591]
[559.34582520 301.82135010]
[564.28039551 307.37710571]
[578.06665039 313.28805542]
[591.85290527 319.19900513]
[605.63916016 325.10992432]
[621.85034180 322.63412476]
[631.88745117 335.60290527]
[625.42517090 350.67507935]
[609.11132812 352.34570312]
[599.72821045 338.89617920]
[585.94195557 332.98526001]
[572.15570068 327.07431030]
[558.36950684 321.16336060]
[544.52551270 315.38888550]
[530.62518311 309.75149536]
[516.72479248 304.11407471]
[502.82446289 298.47665405]
[488.92413330 292.83923340]
[475.02377319 287.20181274]
[466.76959229 294.83840942]
[456.20477295 298.83782959]
[444.85974121 298.57940674]
[434.39346313 294.06228638]
[426.35083008 285.91119385]
[421.93478394 275.29019165]
[421.82644653 263.73675537]
[408.28448486 257.28576660]
[394.74252319 250.83479309]
[381.20056152 244.38380432]
[366.38284302 245.89546204]
[357.25161743 232.97528076]
[343.64660645 226.65840149]
[329.97982788 220.47622681]
[321.33425903 231.26696777]
[310.33685303 239.66439819]
[297.63180542 245.17054749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 95]
[9 94]
[10 93]
[11 92]
[12 91]
[13 90]
[14 89]
[15 88]
[16 87]
[17 86]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[105 155]
[106 154]
[108 153]
[110 151]
[111 150]
[112 149]
[113 148]
[117 141]
[118 140]
[119 139]
[120 138]
[121 137]
[122 136]
[124 135]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
