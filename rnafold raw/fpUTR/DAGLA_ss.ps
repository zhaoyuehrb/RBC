%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGGGGCCUUGGGGAGCCCAGGAUGGAGGUGGCGGUCGCGGCGGCGGGCCGAGCCCUGCGGCGGGCGGGAGGAGGUGAGCACCAGGCCCACUGAGCCUCUGCAGAGCCACCAGCC\
) } def
/len { sequence length } bind def

/coor [
[35.45117569 290.22134399]
[22.93138123 299.86657715]
[7.26931286 297.75112915]
[-2.24300361 285.13006592]
[0.03792065 269.49121094]
[12.75885391 260.11288452]
[14.76665115 245.24786377]
[16.77444839 230.38284302]
[3.58738995 223.23431396]
[-7.77279806 233.02952576]
[-19.13298607 242.82472229]
[-30.49317360 252.61993408]
[-41.85335922 262.41516113]
[-53.21355057 272.21035767]
[-61.26090622 287.13269043]
[-77.82781219 283.53076172]
[-78.95280457 266.61416626]
[-63.00875854 260.85015869]
[-51.64857101 251.05496216]
[-40.28838348 241.25975037]
[-28.92819595 231.46453857]
[-17.56800842 221.66932678]
[-6.20781994 211.87411499]
[-7.01593781 199.83581543]
[-3.41735935 188.77822876]
[3.76303864 180.19374084]
[13.24245930 175.11343384]
[23.49931145 173.98716736]
[33.01392746 176.65771484]
[42.02505875 164.66607666]
[51.03619385 152.67443848]
[60.04732895 140.68280029]
[69.05846405 128.69114685]
[78.06959534 116.69950867]
[72.52462006 97.78195953]
[81.03237915 79.99885559]
[74.06153107 66.71701813]
[67.09068298 53.43517685]
[60.11983490 40.15333557]
[53.14899063 26.87149620]
[46.17814255 13.58965588]
[39.20729446 0.30781564]
[32.35844040 -5.93698263]
[32.23302078 -13.42551613]
[25.62127686 -26.88972282]
[19.00953293 -40.35392761]
[3.78406525 -43.92032242]
[-5.54544878 -56.46998978]
[-4.57389784 -72.07736206]
[6.23998070 -83.37311554]
[21.79020500 -85.02374268]
[34.73443222 -76.24986267]
[38.96079636 -61.19423676]
[32.47373962 -46.96567154]
[39.08548355 -33.50146484]
[45.69722748 -20.03726006]
[52.48913574 -6.66303205]
[59.45998001 6.61880827]
[66.43083191 19.90064812]
[73.40167999 33.18248749]
[80.37252808 46.46432877]
[87.34336853 59.74617004]
[94.31421661 73.02800751]
[106.41986847 73.19325256]
[117.28708649 78.52971649]
[124.81948853 88.00795746]
[139.59161377 85.40322876]
[154.36372375 82.79850769]
[169.13583374 80.19378662]
[177.16667175 75.56669617]
[184.33914185 77.72300720]
[199.17585754 75.51583099]
[214.01258850 73.30864716]
[229.06344604 60.02958679]
[246.78230286 67.57598877]
[261.47915649 64.57560730]
[276.17602539 61.57521820]
[290.87286377 58.57483292]
[302.84649658 48.23350906]
[316.86422729 53.26866150]
[331.56106567 50.26827621]
[341.57080078 37.73093414]
[357.61312866 37.88403320]
[367.38174438 50.61013031]
[363.38302612 66.14685059]
[348.68441772 72.57575989]
[334.56146240 64.96513367]
[319.86459351 67.96552277]
[308.94219971 78.09223938]
[293.87326050 73.27169037]
[279.17639160 76.27207947]
[264.47955322 79.27246094]
[249.78268433 82.27285004]
[244.84275818 91.39944458]
[235.46607971 96.34069061]
[224.70510864 95.21021271]
[216.21975708 88.14537048]
[201.38304138 90.35255432]
[186.54631042 92.55973053]
[171.74057007 94.96590424]
[156.96844482 97.57062531]
[142.19633484 100.17534637]
[127.42421722 102.78006744]
[123.34432220 114.65806580]
[114.41832733 123.49315643]
[102.49918365 127.45123291]
[90.06124115 125.71064758]
[81.05010223 137.70228577]
[72.03897095 149.69392395]
[63.02783585 161.68557739]
[54.01670074 173.67721558]
[45.00556946 185.66885376]
[51.54161835 210.85798645]
[31.63946533 232.39064026]
[29.63166809 247.25566101]
[27.62387085 262.12066650]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 116]
[7 115]
[8 114]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[29 112]
[30 111]
[31 110]
[32 109]
[33 108]
[34 107]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[44 56]
[45 55]
[46 54]
[66 103]
[67 102]
[68 101]
[69 100]
[71 99]
[72 98]
[73 97]
[75 93]
[76 92]
[77 91]
[78 90]
[80 88]
[81 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
