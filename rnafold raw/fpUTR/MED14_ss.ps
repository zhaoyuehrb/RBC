%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACGGCUUCCUGUUCUGAGGCGGCCCGGCGGUAGGCGGUGGCGACUCUGCCCGCUCCCGUUUCGGCGCGGUGACCGAGCGCCCGGGAGGCUCGAGGACCGCAUCGUGUGCCGUUGCGCCAAGCCCGGUCCUGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[75.73484802 411.86267090]
[64.87180328 400.38357544]
[65.39093781 384.58782959]
[76.98425293 373.84674072]
[77.31844330 358.85046387]
[77.65262604 343.85418701]
[77.98680878 328.85791016]
[70.22338867 322.06332397]
[67.46591187 311.89306641]
[70.87334442 301.68890381]
[79.53633881 294.94482422]
[72.66640472 281.72918701]
[81.30818176 268.47662354]
[71.34030151 257.46856689]
[72.14315796 242.27613831]
[83.75699615 231.89555359]
[84.75888062 216.92904663]
[85.76077271 201.96253967]
[83.04715729 195.02253723]
[86.95536804 186.67494202]
[88.29044342 171.73446655]
[89.62552643 156.79400635]
[90.62741089 141.82749939]
[91.29561615 126.84239197]
[91.96382141 111.85728455]
[85.69027710 99.36191559]
[93.05107117 87.47451019]
[93.71927643 72.48940277]
[94.38748169 57.50429535]
[95.05567932 42.51918411]
[95.72388458 27.53407669]
[96.39208984 12.54896641]
[97.06028748 -2.43614292]
[97.72849274 -17.42125320]
[90.61362457 -31.55239677]
[98.91020966 -43.92236328]
[99.57840729 -58.90747070]
[100.24661255 -73.89257812]
[100.91481781 -88.87769318]
[101.58301544 -103.86280060]
[102.25122070 -118.84790802]
[99.49050903 -127.64193726]
[103.10492706 -134.15832520]
[104.10681152 -149.12483215]
[94.36345673 -166.71125793]
[105.62657166 -182.37022400]
[105.96075439 -197.36650085]
[106.29494476 -212.36277771]
[97.06194305 -228.25164795]
[106.65560913 -242.90495300]
[106.65560913 -257.90493774]
[106.65560913 -272.90493774]
[103.95528412 -277.56103516]
[103.42167664 -282.30685425]
[104.71311188 -286.28286743]
[107.19033051 -288.89846802]
[108.19222260 -303.86495972]
[109.19411469 -318.83148193]
[110.19599915 -333.79797363]
[111.19789124 -348.76446533]
[109.04401398 -352.74700928]
[108.38863373 -356.79687500]
[109.06037903 -360.41940308]
[110.74051666 -363.23120117]
[113.01406860 -364.99960327]
[115.34407806 -379.81753540]
[117.67408752 -394.63546753]
[120.00410461 -409.45339966]
[122.33411407 -424.27133179]
[110.74080658 -434.44967651]
[106.51270294 -449.28634644]
[110.99897003 -464.04699707]
[122.76805878 -474.02157593]
[138.06449890 -476.02722168]
[152.00724792 -469.42391968]
[160.14721680 -456.31881714]
[159.88699341 -440.89364624]
[151.30958557 -428.07052612]
[137.15203857 -421.94131470]
[134.82203674 -407.12338257]
[132.49201965 -392.30545044]
[130.16200256 -377.48751831]
[127.83200073 -362.66958618]
[126.16439056 -347.76257324]
[125.16250610 -332.79608154]
[124.16061401 -317.82958984]
[123.15872192 -302.86306763]
[122.15683746 -287.89657593]
[121.65560913 -272.90493774]
[121.65560913 -257.90493774]
[121.65560913 -242.90495300]
[130.00903320 -234.08609009]
[130.08386230 -221.53730774]
[121.29122162 -212.02859497]
[120.95703125 -197.03231812]
[120.62284851 -182.03604126]
[128.38626099 -175.24143982]
[131.14375305 -165.07119751]
[127.73631287 -154.86705017]
[119.07331848 -148.12294006]
[118.07142639 -133.15644836]
[117.23632812 -118.17971039]
[116.56813049 -103.19459534]
[115.89992523 -88.20948792]
[115.23171997 -73.22438049]
[114.56351471 -58.23926926]
[113.89531708 -43.25416183]
[121.05797577 -30.19485092]
[112.71360016 -16.75304985]
[112.04540253 -1.76794016]
[111.37719727 13.21716881]
[110.70899200 28.20227814]
[110.04078674 43.18738937]
[109.37258911 58.17249680]
[108.70438385 73.15760803]
[108.03617859 88.14271545]
[114.30972290 100.63808441]
[106.94892883 112.52548981]
[106.28072357 127.51059723]
[105.61251831 142.49571228]
[108.36997223 148.64854431]
[107.65325165 154.38909912]
[104.56598663 158.12908936]
[103.23091125 173.06954956]
[101.89583588 188.01002502]
[100.72727203 202.96443176]
[99.72538757 217.93093872]
[98.72349548 232.89744568]
[108.85011292 244.73338318]
[107.62084961 259.89727783]
[96.27468109 269.47851562]
[103.07295227 283.76464844]
[94.50284576 295.94671631]
[104.24620056 313.53314209]
[92.98308563 329.19210815]
[92.64890289 344.18838501]
[92.31472015 359.18466187]
[91.98052979 374.18093872]
[103.08386230 385.42779541]
[102.89882660 401.23098755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 138]
[5 137]
[6 136]
[7 135]
[11 133]
[13 131]
[16 128]
[17 127]
[18 126]
[20 125]
[21 124]
[22 123]
[23 120]
[24 119]
[25 118]
[27 116]
[28 115]
[29 114]
[30 113]
[31 112]
[32 111]
[33 110]
[34 109]
[36 107]
[37 106]
[38 105]
[39 104]
[40 103]
[41 102]
[43 101]
[44 100]
[46 96]
[47 95]
[48 94]
[50 91]
[51 90]
[52 89]
[56 88]
[57 87]
[58 86]
[59 85]
[60 84]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
