%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCUGAGAAGGUGGGAAGGGGCGGAGCUCGCCCUGUGGCUGCUCGGUGGUGGGUGAGGUAUCAGCUUUCUCCGCUAGUUCCCACCCUGGUAGUCCUUAGCCCCUGGAAUGCGUGAGGGAG\
) } def
/len { sequence length } bind def

/coor [
[191.72918701 338.22253418]
[195.56835938 323.72216797]
[208.41627502 315.98065186]
[223.03099060 319.36273193]
[216.72067261 305.75463867]
[210.41035461 292.14657593]
[204.10002136 278.53848267]
[197.78970337 264.93041992]
[191.47937012 251.32232666]
[169.56628418 246.27047729]
[158.02531433 226.67098999]
[164.37908936 204.56387329]
[155.74929810 192.29492188]
[147.11952209 180.02598572]
[138.48974609 167.75704956]
[129.85997009 155.48809814]
[121.23018646 143.21916199]
[112.60040283 130.95022583]
[103.97062683 118.68128204]
[89.71428680 116.09224701]
[81.37819672 104.24084473]
[83.76043701 89.94849396]
[75.13065338 77.67955780]
[66.50087738 65.41061401]
[57.87109375 53.14167404]
[49.24131393 40.87273407]
[40.61153412 28.60379410]
[31.98175430 16.33485222]
[21.71913528 5.39507961]
[10.02586460 -3.99999595]
[-1.66740477 -13.39507103]
[-13.36067486 -22.79014778]
[-25.05394363 -32.18522263]
[-36.74721527 -41.58029938]
[-48.44048309 -50.97537231]
[-61.40042496 -50.36852646]
[-70.96176147 -58.53121948]
[-72.30525208 -70.62619781]
[-87.83756256 -73.63581085]
[-92.55368042 -87.76406097]
[-104.00319672 -97.45470428]
[-115.45272064 -107.14533997]
[-131.67790222 -109.52770233]
[-137.47499084 -124.86803436]
[-126.88043213 -137.38552856]
[-110.79300690 -134.20324707]
[-105.76207733 -118.59486389]
[-94.31256104 -108.90422058]
[-82.86303711 -99.21357727]
[-68.14967346 -96.89710999]
[-62.61460876 -82.07571411]
[-45.24497223 -79.95039368]
[-39.04540634 -62.66864395]
[-27.35213852 -53.27356720]
[-15.65886879 -43.87849045]
[-3.96559882 -34.48341751]
[7.72767067 -25.08834076]
[19.42094040 -15.69326591]
[31.11421013 -6.29819012]
[27.95003319 -20.96065903]
[31.81071854 -35.45531845]
[41.84902573 -46.60127640]
[55.86202240 -51.95252228]
[70.77452850 -50.33471680]
[83.31394196 -42.10289001]
[90.72846985 -29.06353378]
[91.39096832 -14.07817078]
[85.15605164 -0.43537733]
[73.39199066 8.87090111]
[58.68043137 11.79837704]
[44.25069427 7.70507288]
[52.88047409 19.97401428]
[61.51025391 32.24295425]
[70.14003754 44.51189423]
[78.76981354 56.78083420]
[87.39959717 69.04977417]
[96.02937317 81.31871796]
[110.28571320 83.90775299]
[118.62180328 95.75915527]
[116.23956299 110.05150604]
[124.86934662 122.32044220]
[133.49913025 134.58938599]
[142.12890625 146.85832214]
[150.75868225 159.12727356]
[159.38847351 171.39620972]
[168.01824951 183.66514587]
[176.64802551 195.93408203]
[184.62225342 194.29718018]
[192.71156311 194.92051697]
[200.28991699 197.74078369]
[206.77488708 202.52528381]
[211.67256165 208.89093018]
[214.61503601 216.33502197]
[215.38812256 224.27482605]
[213.94679260 232.09324646]
[210.41754150 239.18675232]
[205.08744812 245.01200867]
[211.39778137 258.62008667]
[217.70809937 272.22814941]
[224.01843262 285.83624268]
[230.32875061 299.44430542]
[236.63906860 313.05239868]
[243.97257996 326.13748169]
[252.28620911 338.62283325]
[260.59985352 351.10815430]
[268.91348267 363.59347534]
[283.00228882 370.79180908]
[283.61608887 385.67376709]
[299.15911865 388.53561401]
[308.05709839 401.59707642]
[305.03106689 417.10894775]
[291.87628174 425.86834717]
[276.39724731 422.67846680]
[267.77740479 409.43182373]
[271.13076782 393.98739624]
[257.63659668 387.68209839]
[256.42813110 371.90713501]
[248.11450195 359.42178345]
[239.80087280 346.93646240]
[231.48724365 334.45114136]
[226.74450684 348.68161011]
[213.43553162 355.60052490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 102]
[5 101]
[6 100]
[7 99]
[8 98]
[9 97]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[17 82]
[18 81]
[19 80]
[22 77]
[23 76]
[24 75]
[25 74]
[26 73]
[27 72]
[28 71]
[29 59]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[38 51]
[40 49]
[41 48]
[42 47]
[103 120]
[104 119]
[105 118]
[106 117]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
