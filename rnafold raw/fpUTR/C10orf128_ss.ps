%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAGCCUUGGGUCACAUGGCUCAUUGUGCCUGCGCUGCCAGCAGCCAGGAGCCAGGAGCCAAGAGCAGAGCGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[129.79228210 278.44021606]
[123.21127319 267.70779419]
[121.91996002 255.11114502]
[126.23616791 243.12893677]
[135.36804199 234.14660645]
[131.24623108 219.72402954]
[126.83847809 205.38626099]
[122.14653015 191.13896179]
[117.45457458 176.89166260]
[112.76262665 162.64436340]
[108.07067871 148.39704895]
[96.74058533 138.72863770]
[99.77298737 123.20075226]
[95.08103180 108.95345306]
[89.63001251 102.69561768]
[90.49800873 94.04554749]
[84.99050903 86.41094208]
[86.51129150 78.96722412]
[82.96612549 64.39218903]
[79.42095947 49.81714630]
[75.87579346 35.24210739]
[72.33062744 20.66706467]
[68.78546143 6.09202528]
[63.58583832 -1.75550842]
[65.40135956 -9.13287449]
[62.43844604 -23.83733559]
[59.47553635 -38.54179764]
[54.59201813 -46.58984375]
[56.69939804 -53.88919830]
[54.32342911 -68.69982910]
[49.76373291 -76.93566895]
[52.15964508 -84.14546967]
[50.37437057 -99.03884888]
[48.58909988 -113.93222809]
[35.40073013 -122.33467102]
[30.74816895 -137.26409912]
[36.82820892 -151.67127991]
[50.77004242 -158.75360107]
[65.99076080 -155.16700745]
[75.30361176 -142.60496521]
[74.31134033 -126.99889374]
[63.48247910 -115.71750641]
[65.26775360 -100.82411957]
[67.05302429 -85.93074036]
[69.13405609 -71.07579803]
[71.51002502 -56.26517105]
[74.18000031 -41.50470734]
[77.14290619 -26.80024719]
[80.10581970 -12.09578609]
[83.36050415 2.54685903]
[86.90567017 17.12189865]
[90.45083618 31.69693947]
[93.99600220 46.27198029]
[97.54116821 60.84701920]
[101.08633423 75.42205811]
[104.92058563 89.92373657]
[109.32833862 104.26150513]
[114.02028656 118.50880432]
[125.68597412 129.19628906]
[122.31797791 143.70510864]
[127.00993347 157.95240784]
[131.70187378 172.19970703]
[136.39382935 186.44700623]
[141.08578491 200.69432068]
[146.89245605 208.10392761]
[145.66880798 215.60221863]
[149.79061890 230.02479553]
[166.82141113 235.53775024]
[177.21443176 249.92338562]
[177.10084534 267.51644897]
[166.70613098 281.51980591]
[171.96080017 295.56933594]
[184.95317078 305.57583618]
[182.51554871 321.79281616]
[167.15556335 327.53759766]
[154.67424011 316.90048218]
[157.91128540 300.82397461]
[152.65663147 286.77447510]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 67]
[6 66]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[13 58]
[14 57]
[16 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[25 49]
[26 48]
[27 47]
[29 46]
[30 45]
[32 44]
[33 43]
[34 42]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
