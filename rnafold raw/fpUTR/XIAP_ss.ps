%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGGGCCAAGCCGCAGAGCGGAGUUGGCAUUUCCAGAUUGGGGCUCGGGCCGCGCCUCCUCCGGGACCCUCCCCUUGGACCGAGCCGAUCGCCGCGGGGCAGUUCGGGCCGGCUGUCCUGGCGCGAAAAGGUGGACAAGUCCUAUUUUCAAGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[100.33518982 147.70954895]
[108.89424896 135.39195251]
[98.28765106 145.99855042]
[87.68104553 156.60514832]
[77.07444763 167.21176147]
[66.46784210 177.81835938]
[56.17818451 188.73269653]
[46.21439743 199.94532776]
[36.25061417 211.15795898]
[26.28682518 222.37057495]
[16.32304001 233.58320618]
[13.05817699 251.68124390]
[-3.76153159 256.60964966]
[-13.50325203 268.01571655]
[-23.24497223 279.42181396]
[-32.98669434 290.82791138]
[-38.67571640 306.79885864]
[-55.59739685 305.75335693]
[-59.27714920 289.20358276]
[-44.39278412 281.08618164]
[-34.65106201 269.68008423]
[-24.90934181 258.27401733]
[-15.16762066 246.86791992]
[-15.79638004 234.75520325]
[-7.72865248 225.16740417]
[5.11041451 223.61941528]
[15.07420063 212.40679932]
[25.03798676 201.19416809]
[35.00177383 189.98153687]
[44.96556091 178.76892090]
[45.10374832 175.19660950]
[47.01168060 171.51914978]
[50.71689606 168.58264160]
[55.86124039 167.21176147]
[66.46784210 156.60514832]
[77.07444763 145.99855042]
[87.68104553 135.39195251]
[98.28765106 124.78534698]
[87.93148041 120.34742737]
[81.07122040 112.10818481]
[78.82917786 102.18212891]
[81.21840668 92.85196686]
[70.20356750 82.66996002]
[59.18873215 72.48794556]
[48.17389297 62.30593491]
[37.28266144 63.36143112]
[27.81671524 58.32578659]
[22.81547928 49.09132004]
[23.73149109 38.85063171]
[13.12489033 28.24403191]
[2.51828814 17.63743019]
[-8.19193077 7.13546801]
[-19.00473404 -3.26084256]
[-27.40615463 -6.97930050]
[-29.92524529 -13.96900749]
[-40.53184509 -24.57560921]
[-56.09311295 -23.03255272]
[-68.97636414 -31.89572906]
[-73.09851837 -46.98022079]
[-66.51322174 -61.16358948]
[-52.32985687 -67.74887848]
[-37.24536514 -63.62672424]
[-28.38218880 -50.74347687]
[-29.92524529 -35.18220901]
[-19.31864357 -24.57560921]
[-8.60842419 -14.07364655]
[2.20437956 -3.67733622]
[9.24219799 -1.29596567]
[13.12489033 7.03082848]
[23.73149109 17.63743019]
[34.33809280 28.24403191]
[53.31204987 31.80906677]
[58.35590363 51.29109955]
[69.37074280 61.47311020]
[80.38558197 71.65512085]
[91.40042114 81.83713531]
[107.56256104 79.68316650]
[121.27845001 90.60170746]
[123.04785919 109.27587128]
[137.21995544 104.36141968]
[151.39204407 99.44696045]
[165.56413269 94.53250885]
[170.28367615 76.04073334]
[185.03942871 64.17405701]
[203.81506348 63.54121017]
[219.09187317 74.21656799]
[232.95007324 68.47631836]
[246.80825806 62.73606491]
[253.18301392 46.47216797]
[269.02633667 39.95473099]
[284.38348389 46.75257874]
[298.12631226 40.74134445]
[311.86911011 34.73011398]
[325.61193848 28.71887970]
[331.44598389 14.27583504]
[345.46881104 8.37536240]
[359.20208740 14.02624989]
[372.94491577 8.01501751]
[386.68771362 2.00378513]
[400.43054199 -4.00744724]
[414.17337036 -10.01867962]
[427.91616821 -16.02991295]
[441.65899658 -22.04114532]
[455.40182495 -28.05237770]
[469.14462280 -34.06361008]
[482.88745117 -40.07484055]
[488.41354370 -54.88153076]
[502.82546997 -61.36781311]
[517.57287598 -55.68549728]
[523.90643311 -41.20579910]
[518.06854248 -26.51926613]
[503.52267456 -20.33915710]
[488.89868164 -26.33202362]
[475.15588379 -20.32079124]
[461.41305542 -14.30955791]
[447.67022705 -8.29832554]
[433.92739868 -2.28709292]
[420.18460083 3.72413969]
[406.44177246 9.73537254]
[392.69894409 15.74660492]
[378.95614624 21.75783730]
[365.21331787 27.76906967]
[360.04074097 41.68955612]
[346.18917847 47.98157120]
[331.62316895 42.46170044]
[317.88034058 48.47293091]
[304.13754272 54.48416519]
[290.39471436 60.49539566]
[287.40951538 73.06098938]
[277.57467651 81.73011017]
[264.34622192 83.15666199]
[252.54850769 76.59425354]
[238.69032288 82.33451080]
[224.83212280 88.07476044]
[224.31245422 99.30545807]
[219.59555054 109.56752014]
[211.33547974 117.34545135]
[200.71263123 121.47471619]
[189.26504517 121.31599426]
[178.66583252 116.85384369]
[170.47859192 108.70460510]
[156.30648804 113.61905670]
[142.13439941 118.53350830]
[127.96231079 123.44795990]
[142.78096008 121.12247467]
[157.57371521 123.60724640]
[170.81932068 130.64671326]
[181.15554810 141.51696777]
[187.51943970 155.10006714]
[189.25653076 169.99914551]
[186.18817139 184.68196106]
[178.62989807 197.63853455]
[167.35902405 207.53639221]
[153.53465271 213.35762024]
[138.57849121 214.50358582]
[124.02864075 210.85643005]
[111.38141632 202.79121399]
[101.93746185 191.13739014]
[96.66799927 177.09342957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[13 23]
[14 22]
[15 21]
[16 20]
[42 76]
[43 75]
[44 74]
[45 73]
[49 71]
[50 70]
[51 69]
[52 67]
[53 66]
[55 65]
[56 64]
[79 144]
[80 143]
[81 142]
[82 141]
[86 134]
[87 133]
[88 132]
[91 128]
[92 127]
[93 126]
[94 125]
[97 122]
[98 121]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
