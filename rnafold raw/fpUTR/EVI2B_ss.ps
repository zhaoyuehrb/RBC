%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAACUAUUUCAGUUUGCUAGAGGAACAUUUUAAAUCUGAAUUGAACCACCCAUUUUCCUUUCUUAGCCAAAUCACCAAAAUGUCCAGUUAGAACAAGAAUUUAGCAUUCUGCAAAAGAAGUUAACAGCUGAGAUAACGAGGAAAUAUUCUGAA\
) } def
/len { sequence length } bind def

/coor [
[-88.07809448 331.63766479]
[-98.18113708 334.72463989]
[-108.63935089 336.19351196]
[-119.19532776 336.00912476]
[-129.58941650 334.17706299]
[-139.56610107 330.74337769]
[-148.88029480 325.79351807]
[-157.30337524 319.45016479]
[-164.62872314 311.87014771]
[-170.67687988 303.24066162]
[-184.35537720 309.39685059]
[-198.03387451 315.55303955]
[-211.71237183 321.70922852]
[-225.39086914 327.86541748]
[-239.06936646 334.02160645]
[-252.74786377 340.17779541]
[-266.42636108 346.33398438]
[-269.53836060 350.66729736]
[-273.60726929 353.09255981]
[-277.73007202 353.56762695]
[-281.12167358 352.42098999]
[-295.14691162 357.74008179]
[-309.17214966 363.05914307]
[-309.98828125 378.26617432]
[-316.92489624 391.82357788]
[-328.78018188 401.38247681]
[-343.50012207 405.28668213]
[-358.53442383 402.85983276]
[-371.27828979 394.52233887]
[-379.52377319 381.71875000]
[-381.84231567 366.66735840]
[-377.83215332 351.97589111]
[-368.18814087 340.18978882]
[-354.58111572 333.35101318]
[-339.36859131 332.64440918]
[-325.18624878 338.19247437]
[-314.49124146 349.03390503]
[-300.46600342 343.71481323]
[-286.44076538 338.39575195]
[-272.58255005 332.65548706]
[-258.90405273 326.49929810]
[-245.22555542 320.34310913]
[-231.54705811 314.18692017]
[-217.86856079 308.03073120]
[-204.19006348 301.87454224]
[-190.51156616 295.71835327]
[-176.83306885 289.56216431]
[-180.09837341 269.76687622]
[-177.37261963 249.87611389]
[-168.89067078 231.66390991]
[-155.40110779 216.75700378]
[-138.10023499 206.48954773]
[-118.52592468 201.78372192]
[-98.42096710 203.06690979]
[-79.57786560 210.23291016]
[-63.67904663 222.65063477]
[-51.68740463 213.63949585]
[-39.69576263 204.62835693]
[-27.70412064 195.61723328]
[-15.71247959 186.60609436]
[-3.72083831 177.59495544]
[8.27080345 168.58383179]
[19.88987732 159.09713745]
[31.11753845 149.15029907]
[42.34519958 139.20346069]
[53.57286072 129.25662231]
[64.80052185 119.30978394]
[76.02818298 109.36294556]
[87.25584412 99.41610718]
[73.42397308 105.21949005]
[58.42442322 105.10317230]
[44.68421173 99.08596802]
[34.42659378 88.14151001]
[29.31130219 74.04066467]
[30.16602707 59.06503677]
[36.85246658 45.63777161]
[48.28871918 35.93147659]
[62.62432480 31.51668739]
[77.53970337 33.10774612]
[90.62145996 40.44720840]
[99.75288391 52.34750366]
[103.45645905 66.88310242]
[101.13201904 81.70447540]
[108.10286713 68.42263794]
[115.07371521 55.14079666]
[114.63593292 39.32564926]
[127.40163422 31.65191078]
[124.02075195 15.96914387]
[134.28523254 3.63950849]
[150.32104492 4.12124586]
[159.82690430 17.04480743]
[155.51069641 32.49634552]
[140.68347168 38.62275696]
[141.61985779 53.48789978]
[128.35556030 62.11164474]
[121.38470459 75.39348602]
[114.41385651 88.67532349]
[118.61197662 94.89028931]
[127.83898163 83.06394958]
[141.93778992 88.18482971]
[141.42430115 103.17604065]
[127.00821686 107.32022095]
[131.20634460 113.53518677]
[146.13035583 112.02735138]
[161.05438232 110.51952362]
[175.97840881 109.01169586]
[190.90243530 107.50386810]
[199.18154907 103.50755310]
[206.14170837 106.11904144]
[221.09306335 104.91204834]
[236.04443359 103.70504761]
[250.99578857 102.49804688]
[262.44372559 91.25865936]
[278.35064697 93.34432983]
[286.51406860 107.15511322]
[280.67175293 122.09656525]
[265.30541992 126.70687103]
[252.20278931 117.44940948]
[237.25141907 118.65641022]
[222.30006409 119.86340332]
[207.34870911 121.07040405]
[192.41026306 122.42788696]
[177.48623657 123.93571472]
[162.56221008 125.44355011]
[147.63819885 126.95137787]
[132.71417236 128.45921326]
[115.16470337 128.83042908]
[102.47035980 121.64986420]
[97.20268250 110.64376831]
[85.97502136 120.59060669]
[74.74736023 130.53744507]
[63.51970291 140.48428345]
[52.29203796 150.43112183]
[41.06437683 160.37796021]
[29.83671761 170.32479858]
[28.58246994 174.61865234]
[26.23814201 177.92907715]
[23.25839996 180.03074646]
[20.12421799 180.87351990]
[17.28193665 180.57546997]
[5.29029560 189.58659363]
[-6.70134592 198.59773254]
[-18.69298744 207.60887146]
[-30.68462944 216.61999512]
[-42.67626953 225.63113403]
[-54.66791153 234.64227295]
[-50.03068161 244.17427063]
[-46.94186020 254.31097412]
[-45.47644806 264.80270386]
[-45.66947556 275.39126587]
[-47.51518250 285.81619263]
[-50.96714783 295.82119751]
[-55.93949127 305.16049194]
[-62.30899048 313.60485840]
[-69.91814423 320.94714355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 47]
[11 46]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[21 39]
[22 38]
[23 37]
[56 146]
[57 145]
[58 144]
[59 143]
[60 142]
[61 141]
[62 140]
[63 135]
[64 134]
[65 133]
[66 132]
[67 131]
[68 130]
[69 129]
[83 97]
[84 96]
[85 95]
[87 93]
[103 126]
[104 125]
[105 124]
[106 123]
[107 122]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
