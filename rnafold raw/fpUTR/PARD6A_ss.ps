%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGGCGGCGCGGGCGGGCCGGCCGGGCUGUGCACCUGCGCCUCGGCGGGCCGCCUGGGGCACCGUCCCCGGCCCGCCCGGCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[39.69887161 473.15933228]
[42.54591370 453.98788452]
[43.05802917 438.99661255]
[43.57014465 424.00537109]
[44.08226013 409.01412964]
[44.59437943 394.02285767]
[45.10649490 379.03161621]
[45.61861038 364.04034424]
[46.13072968 349.04910278]
[44.08670807 346.84405518]
[42.89175415 343.61233521]
[42.97592545 339.71316528]
[44.61484528 335.66711426]
[47.87405396 332.09118652]
[50.42271042 317.30929565]
[52.97136307 302.52740479]
[55.52001953 287.74551392]
[58.06867599 272.96362305]
[60.61733246 258.18173218]
[63.16598892 243.39984131]
[65.71464539 228.61795044]
[68.26329803 213.83605957]
[70.81195831 199.05416870]
[73.36061096 184.27226257]
[75.90926361 169.49037170]
[73.80535126 164.98797607]
[74.66168976 159.09855652]
[79.16949463 153.80130005]
[82.72096252 139.22779846]
[86.27242279 124.65428925]
[89.82389069 110.08078766]
[86.08332825 96.60859680]
[95.60260010 86.36775208]
[99.15406799 71.79424286]
[102.70553589 57.22073746]
[106.25700378 42.64722824]
[105.24695587 33.35144806]
[110.18650818 27.64099693]
[114.23345947 13.19723701]
[118.28041077 -1.24652231]
[121.83187866 -15.82002831]
[124.88372040 -30.50629044]
[127.93556213 -45.19255066]
[130.73622131 -59.92877579]
[133.28486633 -74.71067047]
[135.83352661 -89.49256134]
[129.66159058 -104.68595886]
[139.94566345 -117.45976257]
[156.10635376 -114.67337799]
[161.51895142 -99.19319916]
[150.61541748 -86.94390869]
[148.06675720 -72.16201019]
[145.51811218 -57.38011932]
[147.52635193 -50.10169601]
[142.62182617 -42.14071274]
[139.56997681 -27.45445061]
[136.51814270 -12.76818848]
[138.46710205 -8.19658566]
[137.41020203 -2.33984017]
[132.72416687 2.80042934]
[128.67721558 17.24418831]
[124.63027191 31.68794823]
[120.83050537 46.19869614]
[117.27903748 60.77220154]
[113.72757721 75.34571075]
[110.17610931 89.91921234]
[113.91667175 103.39140320]
[104.39739990 113.63224792]
[100.84593201 128.20576477]
[97.29446411 142.77926636]
[93.74299622 157.35276794]
[90.69116211 172.03903198]
[88.14250183 186.82092285]
[85.59384918 201.60281372]
[83.04518890 216.38470459]
[80.49653625 231.16659546]
[77.94788361 245.94850159]
[75.39922333 260.73037720]
[72.85057068 275.51226807]
[70.30191040 290.29415894]
[67.75325775 305.07608032]
[65.20460510 319.85797119]
[62.65594482 334.63986206]
[61.12198257 349.56121826]
[60.60986710 364.55245972]
[60.09775162 379.54373169]
[59.58563232 394.53497314]
[59.07351685 409.52624512]
[58.56140137 424.51748657]
[58.04928207 439.50875854]
[57.53716660 454.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 91]
[3 90]
[4 89]
[5 88]
[6 87]
[7 86]
[8 85]
[9 84]
[14 83]
[15 82]
[16 81]
[17 80]
[18 79]
[19 78]
[20 77]
[21 76]
[22 75]
[23 74]
[24 73]
[25 72]
[28 71]
[29 70]
[30 69]
[31 68]
[33 66]
[34 65]
[35 64]
[36 63]
[38 62]
[39 61]
[40 60]
[41 57]
[42 56]
[43 55]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
