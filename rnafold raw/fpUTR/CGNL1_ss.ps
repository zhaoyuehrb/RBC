%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUCCGGCCGGGCUCUGCUGGCUGCGGCGGGAGCUGGACGCGGGAGGAGGCGGCGGCGGCGGAAAGGCCGUGUGAGAACAUAGCAAGAAGACAGCUACCUGCAAGCCAGGAAGAGAGCCCUCACCAGGAACUGAAUUGACUGGCACCUUGGUCUUGGACUUCUUACCUCAAGAACUCUGGAACAGUGAACC\
) } def
/len { sequence length } bind def

/coor [
[525.67871094 430.83572388]
[515.74523926 420.74414062]
[509.84277344 407.83981323]
[508.69952393 393.66577148]
[512.47326660 379.92462158]
[500.36663818 371.06860352]
[488.26000977 362.21255493]
[476.08206177 353.45483398]
[463.83358765 344.79602051]
[447.40222168 348.35031128]
[433.20077515 338.73742676]
[430.28225708 321.49612427]
[417.89517212 313.03677368]
[405.50811768 304.57739258]
[393.12106323 296.11804199]
[380.73400879 287.65869141]
[368.34692383 279.19934082]
[355.75805664 271.04333496]
[340.86358643 270.97842407]
[333.15093994 257.16448975]
[320.36767578 249.31665039]
[307.58441162 241.46881104]
[294.80117798 233.62098694]
[282.01791382 225.77314758]
[269.23468018 217.92532349]
[259.53366089 221.19020081]
[249.42684937 218.51284790]
[242.32168579 210.54566956]
[240.75038147 199.76464844]
[228.22796631 191.50698853]
[215.70553589 183.24932861]
[203.18312073 174.99166870]
[190.66070557 166.73400879]
[178.07182312 158.57800293]
[165.41732788 150.52420044]
[152.76283264 142.47039795]
[140.10833740 134.41659546]
[127.45384979 126.36279297]
[104.02947998 142.53791809]
[72.58636475 138.66206360]
[49.46577072 112.51628113]
[34.46773529 112.27338409]
[19.46970177 112.03048706]
[5.54604912 119.54330444]
[-7.05426359 111.60092926]
[-17.16118240 123.53340912]
[-32.58224487 126.12665558]
[-46.03609085 118.15621185]
[-51.17023087 103.38547516]
[-45.56047821 88.78874207]
[-31.85558891 81.25813293]
[-16.52659035 84.34938049]
[-6.81136751 96.60289001]
[6.03952599 89.07270050]
[19.71259880 97.03245544]
[34.71063232 97.27535248]
[49.70866394 97.51824188]
[53.90286255 83.11655426]
[41.11960983 75.26872253]
[28.33635712 67.42089081]
[15.55310440 59.57305908]
[2.76985168 51.72522736]
[-12.54050064 55.64551544]
[-26.09584999 47.51974869]
[-29.85404778 32.16880417]
[-21.58542061 18.70012283]
[-6.19560003 15.10443592]
[7.18490696 23.51499939]
[10.61768341 38.94197464]
[23.40093613 46.78980637]
[36.18418884 54.63763809]
[48.96744156 62.48546982]
[61.75069427 70.33329773]
[71.91931915 59.30610657]
[63.06328201 47.19947052]
[47.85008240 41.07651138]
[45.81433105 24.80421257]
[59.05022812 15.12211704]
[73.94182587 21.99033546]
[75.16992188 38.34343338]
[84.02595520 50.45006943]
[92.95104218 49.50532913]
[101.71945190 50.12218475]
[110.06556702 52.21810150]
[117.74750519 55.66667938]
[124.55412292 60.30335617]
[130.31072998 65.93215179]
[134.88351440 72.33325958]
[138.18234253 79.27113342]
[140.16207886 86.50288391]
[140.82237244 93.78658295]
[140.20582581 100.88927460]
[138.39492798 107.59437561]
[135.50764465 113.70829773]
[148.16213989 121.76210022]
[160.81663513 129.81590271]
[173.47113037 137.86970520]
[186.12562561 145.92350769]
[195.05955505 147.89570618]
[198.91836548 154.21157837]
[211.44078064 162.46923828]
[223.96321106 170.72691345]
[236.48562622 178.98457336]
[249.00804138 187.24223328]
[269.15533447 187.51457214]
[277.08248901 205.14207458]
[289.86575317 212.98989868]
[302.64901733 220.83773804]
[315.43225098 228.68556213]
[328.21551514 236.53340149]
[340.99874878 244.38122559]
[356.80755615 245.00746155]
[363.60589600 258.26010132]
[368.85238647 258.39846802]
[373.09130859 260.34835815]
[375.79968262 263.41903687]
[376.80630493 266.81228638]
[389.19335938 275.27163696]
[401.58041382 283.73098755]
[413.96746826 292.19033813]
[426.35455322 300.64968872]
[438.74160767 309.10906982]
[451.61129761 305.10717773]
[464.25018311 309.19293213]
[472.10809326 319.65975952]
[472.49243164 332.54754639]
[484.74087524 341.20639038]
[493.56848145 343.61010742]
[497.11602783 350.10592651]
[509.22265625 358.96194458]
[521.32928467 367.81799316]
[535.00482178 359.37554932]
[550.83453369 356.83065796]
[566.39215088 360.54342651]
[579.30444336 369.91711426]
[587.61334229 383.49383545]
[590.07299805 399.18112183]
[586.33624268 414.57449341]
[598.58471680 423.23330688]
[614.31982422 424.88153076]
[620.24609375 438.54641724]
[632.49450684 447.20526123]
[644.74298096 455.86407471]
[656.99145508 464.52291870]
[669.92425537 460.72994995]
[682.49530029 465.01986694]
[690.18267822 475.61254883]
[690.35827637 488.50488281]
[702.46490479 497.36090088]
[717.88275146 495.14083862]
[730.03442383 504.29458618]
[732.05590820 519.00677490]
[744.16253662 527.86285400]
[756.26916504 536.71887207]
[768.44714355 545.47656250]
[780.69561768 554.13543701]
[792.94403076 562.79425049]
[805.19250488 571.45306396]
[817.44097900 580.11187744]
[831.35614014 573.61083984]
[846.65612793 574.95434570]
[859.22540283 583.78100586]
[865.68280029 597.71649170]
[864.29132080 613.01220703]
[855.42535400 625.55371094]
[841.46966553 631.96740723]
[826.17840576 630.52801514]
[813.66473389 621.62274170]
[807.29479980 607.64709473]
[808.78210449 592.36035156]
[796.53369141 583.70153809]
[784.28521729 575.04272461]
[772.03674316 566.38385010]
[759.78833008 557.72503662]
[752.50122070 556.42919922]
[747.41314697 548.82550049]
[735.30651855 539.96948242]
[723.19989014 531.11340332]
[708.56634521 533.64245605]
[696.16235352 524.83367920]
[693.60888672 509.46752930]
[681.50225830 500.61151123]
[665.01550293 503.89926147]
[650.97155762 494.05767822]
[648.33258057 476.77136230]
[636.08416748 468.11254883]
[623.83569336 459.45370483]
[611.58721924 450.79489136]
[596.72821045 449.76599121]
[589.92590332 435.48178101]
[577.67742920 426.82293701]
[566.09497070 434.75952148]
[552.46948242 438.27102661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 131]
[6 130]
[7 129]
[8 127]
[9 126]
[12 122]
[13 121]
[14 120]
[15 119]
[16 118]
[17 117]
[18 113]
[20 111]
[21 110]
[22 109]
[23 108]
[24 107]
[25 106]
[29 104]
[30 103]
[31 102]
[32 101]
[33 100]
[34 98]
[35 97]
[36 96]
[37 95]
[38 94]
[41 57]
[42 56]
[43 55]
[45 53]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[74 81]
[75 80]
[138 191]
[139 190]
[141 188]
[142 187]
[143 186]
[144 185]
[148 182]
[149 181]
[152 178]
[153 177]
[154 176]
[155 174]
[156 173]
[157 172]
[158 171]
[159 170]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
