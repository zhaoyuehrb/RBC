%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAACCCACAGCUCCUCUGCCCCUGGCCCAUGAGAAUUUCAGCUGGAGAGAUAGCAUGCCCUGGUAAGUGAAGUCCUGCCACUUCGAGAC\
) } def
/len { sequence length } bind def

/coor [
[104.52870178 147.48439026]
[93.98268127 147.31880188]
[83.73087311 144.83963013]
[74.27451324 140.16809082]
[66.07595825 133.53260803]
[59.53606415 125.25759888]
[54.97459030 115.74766541]
[52.61455917 105.46777344]
[52.57136154 94.92053986]
[54.84711075 84.62165833]
[59.33053970 75.07468414]
[47.93286133 65.32312012]
[36.53518295 55.57155609]
[18.44341087 52.72741318]
[13.04616547 36.12611008]
[1.31869328 26.77376175]
[-10.40877914 17.42141342]
[-22.13625145 8.06906700]
[-37.74978638 5.51406574]
[-42.87624359 -8.47052383]
[-58.37311172 -6.89420891]
[-70.13320923 -16.54588127]
[-71.54048157 -31.32949257]
[-83.26795197 -40.68183899]
[-94.99542999 -50.03418732]
[-106.72290039 -59.38653183]
[-120.45206451 -52.71773529]
[-135.71511841 -52.67480469]
[-149.48158264 -59.26625824]
[-159.01809692 -71.18336487]
[-162.43121338 -86.05997467]
[-159.04321289 -100.94232178]
[-149.52682495 -112.87551117]
[-135.77149963 -119.49018860]
[-120.50839233 -119.47301483]
[-106.76799774 -112.82740021]
[-97.27847290 -100.87283325]
[-93.92398071 -85.98289490]
[-97.37055206 -71.11400604]
[-85.64308167 -61.76165771]
[-73.91561127 -52.40931320]
[-62.18813705 -43.05696487]
[-47.46203232 -44.97463608]
[-35.43547821 -35.65708923]
[-33.52389526 -20.19799614]
[-18.74918556 -18.31193733]
[-12.78390408 -3.65840483]
[-1.05643201 5.69394207]
[10.67104053 15.04628944]
[22.39851189 24.39863586]
[34.58680725 23.38274956]
[44.46130753 31.26430321]
[46.28674698 44.17388153]
[57.68442154 53.92544174]
[69.08209991 63.67700195]
[86.80651093 54.16106033]
[106.87767029 52.79857635]
[125.72548676 59.83190536]
[139.99746704 74.01000977]
[147.15501404 92.81100464]
[145.92500305 112.89072418]
[159.54986572 119.16474152]
[175.32115173 117.90893555]
[183.64537048 130.26031494]
[192.96684265 131.04815674]
[197.62643433 136.99324036]
[211.02662659 143.73379517]
[224.42680359 150.47434998]
[237.82698059 157.21492004]
[251.22717285 163.95547485]
[264.45773315 156.02102661]
[279.87698364 156.52197266]
[292.56463623 165.29847717]
[298.47213745 179.54995728]
[295.71441650 194.72885132]
[285.17147827 205.99159241]
[270.20748901 209.74432373]
[255.59744263 204.78952026]
[246.00334167 192.70828247]
[244.48661804 177.35565186]
[231.08642578 170.61509705]
[217.68624878 163.87454224]
[204.28607178 157.13398743]
[190.88587952 150.39343262]
[177.37135315 143.88517761]
[162.57460022 145.58973694]
[153.27584839 132.78959656]
[139.65098572 126.51557922]
[132.85450745 134.58117676]
[124.45166779 140.95597839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 55]
[12 54]
[13 53]
[15 50]
[16 49]
[17 48]
[18 47]
[20 45]
[23 42]
[24 41]
[25 40]
[26 39]
[61 88]
[62 87]
[64 85]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
