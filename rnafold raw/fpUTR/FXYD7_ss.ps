%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACAUCGGUCCGUCCUGCUUCCAGCUGCUGCAGCGCGCCUUCGCCGCCAAAGCAUCCAGCAGCCCCCUGCUCCGGCCCAGC\
) } def
/len { sequence length } bind def

/coor [
[72.25829315 323.08862305]
[58.27458191 329.11987305]
[43.04678345 328.93551636]
[29.21319962 322.56747437]
[19.17058182 311.11907959]
[14.65887737 296.57382202]
[16.45976448 281.45175171]
[24.26122856 268.37289429]
[36.71162033 259.60317993]
[51.65383148 256.66207886]
[54.95302963 242.02938843]
[50.20451736 227.91198730]
[60.78764343 216.15155029]
[64.08683777 201.51885986]
[67.38603210 186.88618469]
[59.17581177 178.56590271]
[56.07772827 167.16896057]
[59.00537872 155.60177612]
[67.31970978 146.87507629]
[78.96400452 143.32041931]
[83.33485413 128.97134399]
[72.42715454 118.88925934]
[66.96523285 105.07645416]
[68.02785492 90.26101685]
[75.40513611 77.36907959]
[87.64002991 68.94686890]
[102.31607819 66.65780640]
[106.68692780 52.30874252]
[111.05776978 37.95967484]
[115.42861938 23.61060905]
[119.79946899 9.26154232]
[124.17031097 -5.08752441]
[128.54115295 -19.43659019]
[115.34578705 -38.14224625]
[119.28932190 -60.44297791]
[137.69728088 -73.20993042]
[138.25155640 -88.19968414]
[138.80583191 -103.18944550]
[135.94412231 -112.12451935]
[139.66772461 -118.71990967]
[140.77551270 -133.67895508]
[133.16377258 -148.20455933]
[142.16485596 -161.91267395]
[158.51922607 -160.70156860]
[165.40289307 -145.81710815]
[155.73454285 -132.57116699]
[154.62675476 -117.61212158]
[153.79559326 -102.63516998]
[153.24131775 -87.64541626]
[152.68704224 -72.65565491]
[160.26579285 -69.16394043]
[166.55821228 -63.64181519]
[171.03370667 -56.53415298]
[173.30899048 -48.42034149]
[173.18089294 -39.96706009]
[170.64436340 -31.87351990]
[165.89422607 -24.81361961]
[159.31031799 -19.37983513]
[151.42707825 -16.03351974]
[142.89022827 -15.06574440]
[138.51937866 -0.71667802]
[134.14852905 13.63238811]
[129.77767944 27.98145485]
[125.40683746 42.33052063]
[121.03599548 56.67958832]
[116.66514587 71.02865601]
[127.57284546 81.11074066]
[133.03475952 94.92354584]
[131.97215271 109.73898315]
[124.59486389 122.63092041]
[112.35997009 131.05313110]
[97.68392181 133.34219360]
[93.31307220 147.69125366]
[102.89302063 163.81158447]
[97.97389221 181.58268738]
[82.01871490 190.18537903]
[78.71952057 204.81805420]
[75.42031860 219.45074463]
[79.93285370 234.61476135]
[69.58570862 245.32858276]
[66.28651428 259.96127319]
[78.52092743 269.02981567]
[86.00344849 282.29376221]
[87.43768311 297.45498657]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 81]
[11 80]
[13 78]
[14 77]
[15 76]
[20 73]
[21 72]
[27 66]
[28 65]
[29 64]
[30 63]
[31 62]
[32 61]
[33 60]
[36 50]
[37 49]
[38 48]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
