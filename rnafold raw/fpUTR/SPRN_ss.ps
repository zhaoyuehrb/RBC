%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGAGGCCUCGCGCAAAACCCAGGCGCCGCGGCUCCGCGCUCCGGCUGAGGGUCCGCGCCGCCGCCCGCCCGCUCCUUCCCGCUCGGCCGCGGCCUCAGGGACGGAUACUCCAGCGCGCGGUUCCAACCGAGGCCCGUGGUUUAGCCCCACGAAG\
) } def
/len { sequence length } bind def

/coor [
[82.99926758 109.59157562]
[68.10588837 111.37684631]
[53.21250534 113.16211700]
[38.31912231 114.94738770]
[23.42574120 116.73266602]
[8.98222923 128.11408997]
[-6.87575436 120.65249634]
[-21.73069572 122.73352814]
[-36.58563995 124.81456757]
[-42.66536331 133.91647339]
[-52.55973053 138.05603027]
[-62.87694550 136.07786560]
[-70.22363281 128.88029480]
[-85.14956665 130.36909485]
[-100.07549286 131.85791016]
[-115.00142670 133.34671021]
[-122.29962921 144.70591736]
[-134.63427734 149.69848633]
[-147.39924622 146.70265198]
[-155.96627808 137.03558350]
[-170.91885376 138.22734070]
[-185.87144470 139.41908264]
[-200.82402039 140.61083984]
[-211.05638123 152.35548401]
[-226.23739624 153.35108948]
[-237.37106323 143.52371216]
[-245.73016357 147.34306335]
[-252.63227844 144.58749390]
[-267.60559082 145.48171997]
[-282.57891846 146.37594604]
[-297.55224609 147.27017212]
[-310.86660767 155.81642151]
[-324.03250122 148.85160828]
[-339.00582886 149.74584961]
[-353.97915649 150.64007568]
[-365.65951538 161.63772583]
[-381.51934814 159.22003174]
[-389.39233398 145.24162292]
[-383.23901367 130.42555237]
[-367.77966309 126.13743591]
[-354.87338257 135.66674805]
[-339.90005493 134.77252197]
[-324.92672729 133.87829590]
[-312.68334961 125.39601898]
[-298.44647217 132.29685974]
[-283.47314453 131.40263367]
[-268.49981689 130.50840759]
[-253.52650452 129.61418152]
[-238.56282043 128.57113647]
[-229.12634277 117.10428619]
[-213.97927856 115.68267059]
[-202.01577759 125.65825653]
[-187.06318665 124.46650696]
[-172.11061096 123.27475739]
[-157.15802002 122.08300018]
[-146.83328247 108.83872986]
[-129.79161072 107.09912872]
[-116.49023438 118.42077637]
[-101.56430054 116.93196869]
[-86.63837433 115.44316864]
[-71.71244049 113.95436096]
[-56.93818665 101.52936554]
[-38.66667175 109.95962524]
[-23.81172943 107.87858582]
[-8.95678711 105.79755402]
[-1.39594698 96.31134796]
[11.00225449 94.48318481]
[21.64046860 101.83928680]
[36.53384781 100.05400848]
[51.42723083 98.26873779]
[66.32061005 96.48346710]
[81.21398926 94.69818878]
[84.82763672 87.71900940]
[90.90086365 82.73069000]
[98.44915009 80.54188538]
[106.24883270 81.50742340]
[113.03553009 85.47077942]
[117.70904541 91.78945923]
[132.69718933 91.19310760]
[147.68533325 90.59676361]
[162.67346191 90.00041199]
[175.42430115 74.53929138]
[195.12733459 73.36934662]
[209.17997742 86.79440308]
[224.10591125 85.30559540]
[239.03184509 83.81678772]
[251.99592590 74.74797058]
[265.42831421 81.18383789]
[280.35424805 79.69503021]
[295.28018188 78.20622253]
[310.20608521 76.71741486]
[325.13201904 75.22860718]
[340.05795288 73.73979950]
[354.98388672 72.25099182]
[369.90982056 70.76218414]
[384.82022095 69.12506866]
[399.71359253 67.33979034]
[414.60699463 65.55451965]
[429.50036621 63.76924896]
[437.70101929 59.62059402]
[444.70721436 62.09957504]
[459.63314819 60.61076736]
[466.93136597 49.25156784]
[479.26599121 44.25899124]
[492.03097534 47.25482941]
[500.59799194 56.92189789]
[515.55059814 55.73014450]
[530.50317383 54.53839111]
[540.73553467 42.79375076]
[555.91656494 41.79814911]
[567.05023193 51.62551498]
[580.19201660 42.81624603]
[593.49377441 49.51790619]
[603.55389404 37.32896042]
[619.29406738 35.90681076]
[631.37597656 46.09519577]
[632.63159180 61.84952545]
[622.31604004 73.82303619]
[606.54931641 74.91205597]
[594.68554688 64.47048950]
[582.61322021 73.19451141]
[568.24194336 66.57809448]
[558.80548096 78.04494476]
[543.65844727 79.46656036]
[531.69494629 69.49097443]
[516.74230957 70.68272400]
[501.78976440 71.87448120]
[491.46499634 85.11875153]
[474.42333984 86.85835266]
[461.12197876 75.53669739]
[446.19604492 77.02550507]
[431.28564453 78.66262817]
[416.39224243 80.44789886]
[401.49887085 82.23317719]
[386.60549927 84.01844788]
[380.30407715 87.95856476]
[371.39862061 85.68811798]
[356.47271729 87.17692566]
[341.54678345 88.66573334]
[326.62084961 90.15454102]
[311.69491577 91.64334869]
[296.76898193 93.13215637]
[281.84304810 94.62096405]
[266.91711426 96.10977173]
[255.02064514 105.07209015]
[240.52066040 98.74272156]
[225.59472656 100.23152161]
[210.66879272 101.72032928]
[206.50225830 111.20407867]
[198.69525146 118.13502502]
[188.62959290 121.19592285]
[178.12510681 119.76261902]
[169.11061096 114.02999878]
[163.26982117 104.98855591]
[148.28167725 105.58490753]
[133.29353333 106.18125153]
[118.30538940 106.77760315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[5 68]
[7 65]
[8 64]
[9 63]
[13 61]
[14 60]
[15 59]
[16 58]
[20 55]
[21 54]
[22 53]
[23 52]
[26 49]
[28 48]
[29 47]
[30 46]
[31 45]
[33 43]
[34 42]
[35 41]
[78 157]
[79 156]
[80 155]
[81 154]
[84 148]
[85 147]
[86 146]
[88 144]
[89 143]
[90 142]
[91 141]
[92 140]
[93 139]
[94 138]
[95 137]
[96 135]
[97 134]
[98 133]
[99 132]
[101 131]
[102 130]
[106 127]
[107 126]
[108 125]
[111 122]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
