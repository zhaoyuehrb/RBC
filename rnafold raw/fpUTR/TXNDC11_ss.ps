%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGACCCCGCGGCGGCGGCGCGGCUGACGUGGAGCGUCCGGGUUAGCGGGUGCGGCGAGCUGCGGGAUUGGGGAGCAACGGGCCGGGCCGGGCCUUCGGGCCCGAGGCGGCGGCGGCGGUAUAAAGCCGGCGACUGGGAGCAUGUA\
) } def
/len { sequence length } bind def

/coor [
[-45.25455856 132.00848389]
[-51.29867172 124.20359802]
[-54.67417526 114.95868683]
[-68.71211243 122.25573730]
[-81.18835449 114.11985016]
[-96.18085480 113.64553070]
[-110.21878815 120.94258118]
[-122.69503021 112.80669403]
[-137.68753052 112.33236694]
[-152.68002319 111.85804749]
[-167.67253113 111.38372803]
[-182.66502380 110.90940094]
[-197.65753174 110.43508148]
[-212.65002441 109.96075439]
[-227.64251709 109.48643494]
[-243.62503052 118.56868744]
[-258.18444824 108.82306671]
[-273.18362427 108.66493225]
[-287.06460571 116.25631714]
[-299.70959473 108.38527679]
[-314.70877075 108.22714996]
[-329.70791626 108.06901550]
[-344.70709229 107.91088867]
[-360.49456787 117.32807159]
[-375.25622559 107.89157867]
[-390.25540161 108.04970551]
[-405.25454712 108.20783997]
[-420.25372314 108.36596680]
[-435.25289917 108.52410126]
[-450.25204468 108.68222809]
[-463.96990967 116.56458282]
[-476.77801514 108.96188354]
[-491.77719116 109.12001801]
[-506.77636719 109.27814484]
[-521.77551270 109.43627930]
[-537.55004883 115.64925385]
[-547.88702393 102.21114349]
[-537.83563232 88.55808258]
[-521.93365479 94.43711090]
[-506.93447876 94.27897644]
[-491.93533325 94.12084961]
[-476.93615723 93.96271515]
[-464.29116821 86.09167480]
[-450.41018677 93.68305969]
[-435.41101074 93.52493286]
[-420.41186523 93.36679840]
[-405.41268921 93.20867157]
[-390.41351318 93.05053711]
[-375.41436768 92.89241028]
[-366.69152832 84.45050049]
[-354.15270996 84.23569489]
[-344.54895020 92.91172028]
[-329.54980469 93.06984711]
[-314.55062866 93.22798157]
[-299.55145264 93.38610840]
[-286.74334717 85.78341675]
[-273.02548218 93.66576385]
[-258.02633667 93.82389832]
[-249.12745667 85.56777191]
[-236.58689880 85.61736298]
[-227.16819763 94.49393463]
[-212.17570496 94.96826172]
[-197.18319702 95.44258118]
[-182.19070435 95.91690063]
[-167.19821167 96.39122772]
[-152.20570374 96.86554718]
[-137.21321106 97.33987427]
[-122.22071075 97.81419373]
[-109.25513458 90.48321533]
[-95.70652771 98.65303040]
[-80.71403503 99.12734985]
[-67.74845886 91.79637909]
[-54.19985199 99.96619415]
[-43.12019730 83.03659058]
[-23.97880363 76.06938934]
[-4.34658003 81.99499512]
[7.90642834 98.60946655]
[22.86560249 97.50353241]
[33.25942993 84.32096863]
[50.30371094 82.66934204]
[63.54639816 94.04991150]
[78.47893524 92.62884521]
[93.41146851 91.20777130]
[107.61753845 86.39241791]
[120.33639526 78.44065094]
[133.05525208 70.48888397]
[145.77410889 62.53711319]
[146.97619629 47.17934036]
[156.87521362 35.60943604]
[171.51573181 32.12812424]
[185.23461914 37.86660004]
[197.95347595 29.91482925]
[210.67233276 21.96306038]
[223.39118958 14.01129246]
[236.11004639 6.05952358]
[248.82890320 -1.89224529]
[256.04244995 -16.61966324]
[272.41973877 -17.46615982]
[281.11322021 -3.56092954]
[273.17977905 10.79151726]
[256.78067017 10.82661343]
[244.06181335 18.77838326]
[231.34295654 26.73015213]
[218.62409973 34.68191910]
[205.90524292 42.63368988]
[193.18638611 50.58545685]
[192.33708191 65.43189240]
[182.79557800 77.06906128]
[168.05895996 80.90123749]
[153.72587585 75.25597382]
[141.00701904 83.20774078]
[128.28816223 91.15950775]
[115.56930542 99.11128235]
[116.04362488 114.10377502]
[131.86293030 113.85840607]
[139.38081360 126.71649933]
[152.57688904 133.84838867]
[165.77294922 140.98028564]
[178.96900940 148.11216736]
[192.90283203 141.28366089]
[208.18339539 143.98252869]
[218.93502808 155.17100525]
[221.02351379 170.54689026]
[213.64576721 184.19784546]
[199.63870239 190.87480164]
[184.38832092 188.01033020]
[173.75868225 176.70587158]
[171.83712769 161.30824280]
[158.64106750 154.17634583]
[145.44499207 147.04444885]
[132.24893188 139.91256714]
[117.37349701 140.66806030]
[108.91173553 127.29984283]
[99.50173950 121.81449127]
[94.72624969 113.95980835]
[94.83253479 106.14030457]
[79.90000153 107.56137848]
[64.96746826 108.98244476]
[57.61226273 120.31416321]
[45.24576569 125.24830627]
[32.48931885 122.18328857]
[23.97153664 112.46270752]
[9.01236057 113.56863403]
[5.83528280 123.13417053]
[-0.08159468 131.25737000]
[-8.16374207 137.18011475]
[-17.63563728 140.35646057]
[-27.59517097 140.50291443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 73]
[5 71]
[6 70]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[17 58]
[18 57]
[20 55]
[21 54]
[22 53]
[23 52]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[32 42]
[33 41]
[34 40]
[35 39]
[77 143]
[78 142]
[81 138]
[82 137]
[83 136]
[84 113]
[85 112]
[86 111]
[87 110]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
[114 133]
[116 131]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
