%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUCAGGGUGGGACGUGGGCGCGGGGAGACAGGUGGUGGCUACGACGGCGAAGGGAGCUGAGACUGUCCAGGCAGCCAGGUUAGGCCAGGAGGACCAUGUGAAUGGGGCCAGAGGGCUCCCGGGCUGGGCAGGGACC\
) } def
/len { sequence length } bind def

/coor [
[180.19358826 107.49032593]
[175.44255066 104.94567108]
[160.45117188 105.45410919]
[145.45979309 105.96253967]
[130.46841431 106.47097015]
[127.95549011 113.73637390]
[123.73963165 120.16500854]
[118.07763672 125.36526489]
[111.31441498 129.02037048]
[103.86196899 130.90765381]
[96.17426300 130.91215515]
[88.71960449 129.03359985]
[81.95211029 125.38643646]
[76.28402710 120.19282532]
[72.06063080 113.76913452]
[57.40506744 116.96514130]
[42.74950409 120.16115570]
[28.09393883 123.35716248]
[13.43837643 126.55316925]
[1.60365438 137.05316162]
[-12.47993279 132.20529175]
[-27.13549614 135.40130615]
[-41.79105759 138.59730530]
[-53.62578201 149.09730530]
[-67.70936584 144.24943542]
[-72.99677277 158.74243164]
[-85.29413605 168.05792236]
[-100.67741394 169.22337341]
[-114.23786163 161.86689758]
[-121.64838409 148.33590698]
[-120.54431915 132.94810486]
[-111.27796173 120.61367035]
[-96.80617523 115.26848602]
[-81.74685669 118.61817932]
[-70.90538025 129.59387207]
[-60.11891937 119.32247925]
[-44.98706818 123.94174957]
[-30.33150482 120.74574280]
[-15.67594051 117.54973602]
[-4.88948298 107.27833557]
[10.24236870 111.89760590]
[24.89793205 108.70159912]
[39.55349350 105.50559235]
[54.20905685 102.30957794]
[68.86462402 99.11357117]
[70.50974274 89.97391510]
[74.77622223 81.72547150]
[65.10557556 70.25905609]
[55.43494034 58.79263687]
[45.76430130 47.32621765]
[30.12826729 47.54641724]
[18.04156494 37.62443924]
[15.21116447 22.24514008]
[22.97349548 8.67015362]
[37.66342163 3.30917382]
[52.34480667 8.69349194]
[60.08555603 22.28079605]
[57.23071671 37.65557861]
[66.90135956 49.12199402]
[76.57199860 60.58841324]
[86.24263763 72.05483246]
[112.64759064 71.53535461]
[129.95997620 91.47959137]
[144.95135498 90.97116089]
[159.94273376 90.46272278]
[174.93411255 89.95429230]
[189.89965820 88.93801117]
[204.82214355 87.41504669]
[219.74462891 85.89208221]
[234.66711426 84.36911774]
[244.63656616 72.40050507]
[259.79177856 71.06857300]
[271.14059448 80.64669037]
[286.06307983 79.12372589]
[300.94732666 77.26390839]
[315.78576660 75.06819153]
[330.62417603 72.87247467]
[345.46261597 70.67675781]
[357.98153687 61.00271606]
[371.70428467 66.79364014]
[386.54272461 64.59792328]
[392.57507324 55.41979980]
[402.47891235 51.20758057]
[412.84060669 53.14773560]
[420.23321533 60.35013199]
[435.15570068 58.82716751]
[450.07821655 57.30420303]
[465.00070190 55.78123856]
[471.35748291 41.86942673]
[483.74240112 33.06543350]
[498.77133179 31.65206337]
[512.39868164 37.90919876]
[521.00634766 50.06538773]
[535.92883301 48.54242325]
[550.55169678 37.41513443]
[566.27935791 45.11875916]
[581.16363525 43.25894547]
[596.04785156 41.39912796]
[610.93212891 39.53931046]
[623.67431641 29.21607971]
[638.88659668 35.34133911]
[640.91986084 51.61394501]
[627.68249512 61.29404068]
[612.79193115 54.42356873]
[597.90771484 56.28338623]
[583.02343750 58.14319992]
[568.13916016 60.00301743]
[560.42224121 69.38671875]
[547.97705078 71.01506805]
[537.45184326 63.46490860]
[522.52935791 64.98787689]
[516.55480957 78.63230896]
[504.47244263 87.51332855]
[489.46783447 89.16513062]
[475.55975342 83.04456329]
[466.52365112 70.70372772]
[451.60116577 72.22669220]
[436.67868042 73.74965668]
[421.75619507 75.27262115]
[407.04421997 87.74413300]
[388.73843384 79.43634796]
[373.90002441 81.63206482]
[362.44244385 91.14905548]
[347.65832520 85.51518250]
[332.81988525 87.71089935]
[317.98147583 89.90661621]
[303.14303589 92.10233307]
[299.58587646 95.40328979]
[293.89166260 96.44979858]
[287.58602905 94.04621124]
[272.66354370 95.56917572]
[263.48364258 107.24241638]
[248.37179565 108.99949646]
[236.19007874 99.29160309]
[221.26759338 100.81456757]
[206.34510803 102.33753204]
[191.42262268 103.86049652]
[188.89373779 106.43086243]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 66]
[3 65]
[4 64]
[5 63]
[15 45]
[16 44]
[17 43]
[18 42]
[19 41]
[21 39]
[22 38]
[23 37]
[25 35]
[47 61]
[48 60]
[49 59]
[50 58]
[67 137]
[68 136]
[69 135]
[70 134]
[73 131]
[74 130]
[75 127]
[76 126]
[77 125]
[78 124]
[80 122]
[81 121]
[85 119]
[86 118]
[87 117]
[88 116]
[93 111]
[94 110]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
