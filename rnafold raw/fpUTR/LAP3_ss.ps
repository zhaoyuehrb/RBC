%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCCAUCCGUCCCGCCCCCUAGACGCACGUCCGCUCGCCCGGCGCCCGAGCCAGUCCGCGCGCACGCCGUCUGCGCCCCGAAAGCCCCGCCCCAAGGCGCGCCCGCCCACCGCUCUCCACGUGCUCGCUGGAGGGCGGUGCGAGGGGCCGAGCCGACAAG\
) } def
/len { sequence length } bind def

/coor [
[58.47290039 252.82557678]
[56.12301636 260.21194458]
[52.29689026 266.93994141]
[47.16522598 272.71890259]
[40.95501709 277.30026245]
[33.93949127 280.48828125]
[26.42611313 282.14843750]
[18.74308968 282.21298218]
[11.22504997 280.68377686]
[4.19845724 277.63208008]
[-5.61451864 288.97692871]
[-15.42749500 300.32177734]
[-25.24047089 311.66662598]
[-20.12862206 326.14987183]
[-22.95903206 341.24569702]
[-32.97033310 352.89343262]
[-47.46953964 357.95983887]
[-62.55643082 355.08215332]
[-74.17271423 345.03436279]
[-79.19366455 330.51937866]
[-76.26867676 315.44155884]
[-66.18455505 303.85684204]
[-51.65386963 298.88140869]
[-36.58531570 301.85363770]
[-26.77233887 290.50878906]
[-16.95936394 279.16394043]
[-7.14638758 267.81909180]
[-14.85077095 246.17373657]
[-8.17160892 224.06654358]
[10.41897392 210.16627502]
[33.74961090 210.01063538]
[41.20784378 196.99623108]
[48.66607666 183.98182678]
[48.28118134 169.09219360]
[61.85593033 160.96589661]
[69.31416321 147.95149231]
[76.77239990 134.93708801]
[84.23062897 121.92267609]
[91.68886566 108.90827179]
[82.16181183 111.07132721]
[71.44602203 108.54801941]
[61.39595413 101.01466370]
[49.07651520 92.45713043]
[36.75707626 83.89958954]
[24.43763924 75.34204865]
[12.11820221 66.78451538]
[-3.24075747 69.38069153]
[-15.61251354 60.52663422]
[-17.99291801 45.86821365]
[-30.31235504 37.31067657]
[-46.06052780 35.79225540]
[-52.09923553 22.17670250]
[-64.41867065 13.61916447]
[-79.92606354 16.66816711]
[-93.00066376 7.78951740]
[-95.88554382 -7.74924135]
[-86.86915588 -20.72923851]
[-71.30076599 -23.44967079]
[-58.41681671 -14.29655552]
[-55.86113358 1.29972672]
[-43.54169846 9.85726452]
[-28.67469215 10.76359272]
[-21.75481796 24.99123955]
[-9.43537998 33.54877472]
[5.13195372 30.66288376]
[17.74752045 39.16595078]
[20.67573929 54.46507645]
[32.99517822 63.02261353]
[45.31461334 71.58015442]
[57.63405228 80.13768768]
[69.95349121 88.69522858]
[77.00666046 86.14517212]
[79.64270782 71.37861633]
[91.11300659 81.04506683]
[98.16617584 78.49501801]
[102.16469574 64.03777313]
[106.16320801 49.58053207]
[110.16172028 35.12328720]
[114.16023254 20.66604424]
[103.15727234 11.75559425]
[96.40985107 -0.64227861]
[94.91088104 -14.63389874]
[98.85447693 -28.09649467]
[107.61154938 -39.00025940]
[119.82987976 -45.71438599]
[133.64286804 -47.25093460]
[137.91925049 -61.62843323]
[136.63946533 -78.53401184]
[152.53009033 -84.44371033]
[162.60780334 -70.81007385]
[152.29675293 -57.35203552]
[148.02035522 -42.97454071]
[160.03485107 -32.47222900]
[166.29989624 -17.73271942]
[165.51858521 -1.67789304]
[157.79631042 12.48562431]
[144.62985229 21.90690994]
[128.61747742 24.66456032]
[124.61896515 39.12180328]
[120.62045288 53.57904434]
[116.62193298 68.03629303]
[112.62342072 82.49353027]
[120.69983673 95.13360596]
[135.49899292 97.58000946]
[150.29815674 100.02641296]
[165.09732056 102.47281647]
[177.85821533 93.53987122]
[192.83180237 96.23169708]
[201.26936340 108.45230103]
[216.09141541 110.75598145]
[230.93496704 112.91671753]
[245.77853394 115.07744598]
[260.62207031 117.23818207]
[275.46563721 119.39891815]
[290.30920410 121.55964661]
[305.15277100 123.72038269]
[319.99630737 125.88111877]
[334.83987427 128.04185486]
[349.68344116 130.20259094]
[364.52700806 132.36332703]
[379.37054443 134.52404785]
[394.23425293 136.54164124]
[409.11669922 138.41590881]
[424.01391602 131.55989075]
[437.24188232 141.25282288]
[435.19277954 157.52345276]
[419.97457886 163.63394165]
[407.24243164 153.29835510]
[392.35998535 151.42408752]
[385.29675293 153.71937561]
[377.20980835 149.36761475]
[362.36627197 147.20687866]
[347.52270508 145.04614258]
[332.67913818 142.88540649]
[317.83557129 140.72467041]
[302.99203491 138.56394958]
[288.14846802 136.40321350]
[273.30490112 134.24247742]
[258.46136475 132.08174133]
[243.61779785 129.92100525]
[228.77423096 127.76026917]
[213.93067932 125.59954071]
[206.82452393 127.75827026]
[198.82295227 123.25146484]
[186.90144348 132.10658264]
[171.85813904 129.83639526]
[162.65090942 117.27197266]
[147.85176086 114.82556915]
[133.05259705 112.37916565]
[118.25343323 109.93276215]
[104.70326996 116.36650085]
[97.24503326 129.38090515]
[89.78680420 142.39530945]
[82.32856750 155.40971375]
[74.87033844 168.42411804]
[74.72177124 184.24462891]
[61.68048096 191.44004822]
[54.22224808 204.45445251]
[46.76401520 217.46887207]
[52.01310349 223.24877930]
[55.94261169 229.98248291]
[58.38546371 237.37437439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 27]
[11 26]
[12 25]
[13 24]
[31 159]
[32 158]
[33 157]
[35 155]
[36 154]
[37 153]
[38 152]
[39 151]
[42 71]
[43 70]
[44 69]
[45 68]
[46 67]
[49 64]
[50 63]
[52 61]
[53 60]
[75 102]
[76 101]
[77 100]
[78 99]
[79 98]
[86 92]
[87 91]
[103 150]
[104 149]
[105 148]
[106 147]
[109 144]
[110 142]
[111 141]
[112 140]
[113 139]
[114 138]
[115 137]
[116 136]
[117 135]
[118 134]
[119 133]
[120 132]
[121 131]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
