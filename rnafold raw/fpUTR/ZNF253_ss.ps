%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUGCUUAUAGAGGCCCGUCCUCUGUGGCCGUGUGACCUGCAAGUAUUGGGAGAGCCACAGCUAAACCCCGGGACCCCUGGAAGCCUAGAA\
) } def
/len { sequence length } bind def

/coor [
[106.55266571 307.93609619]
[105.54001617 292.97030640]
[104.52736664 278.00454712]
[95.94850922 265.82864380]
[102.73651123 251.53761292]
[101.72386169 236.57182312]
[100.71121979 221.60604858]
[99.69857025 206.64027405]
[91.11970520 194.46438599]
[97.90770721 180.17333984]
[96.89506531 165.20756531]
[95.88241577 150.24179077]
[87.30355072 138.06590271]
[94.09155273 123.77486420]
[93.07891083 108.80908203]
[91.81364441 93.86254120]
[90.29611969 78.93950653]
[88.77859497 64.01646423]
[87.26107025 49.09342194]
[69.60072327 42.24381256]
[57.71026993 27.59992981]
[54.65834045 9.06495476]
[61.17103195 -8.47044468]
[75.46109772 -20.41856384]
[71.94710541 -35.00114822]
[68.43310547 -49.58373642]
[64.91911316 -64.16632080]
[61.40511322 -78.74890900]
[57.89111710 -93.33149719]
[54.37712097 -107.91408539]
[50.61733246 -122.43524170]
[40.70056152 -124.67623901]
[32.39925766 -130.44337463]
[26.90313530 -138.85636902]
[24.97957993 -148.65975952]
[26.86676407 -158.41030884]
[32.24512482 -166.68936157]
[40.29046631 -172.30931091]
[38.26979446 -187.17259216]
[24.02513695 -192.91587830]
[14.57318878 -205.02191162]
[12.45647621 -220.23425293]
[18.24438477 -234.46083069]
[30.37999344 -243.87478638]
[45.59888840 -245.94380188]
[59.80725861 -240.11132812]
[69.18312836 -227.94627380]
[71.20443726 -212.72096252]
[65.32745361 -198.53094482]
[53.13306808 -189.19325256]
[55.15373993 -174.32998657]
[72.41728973 -163.74307251]
[76.74937439 -143.67187500]
[65.07291412 -126.43974304]
[69.99360657 -120.71707916]
[68.95970917 -111.42807770]
[72.47370148 -96.84548950]
[75.98770142 -82.26290894]
[79.50169373 -67.68032074]
[83.01569366 -53.09773254]
[86.52969360 -38.51514816]
[90.04368591 -23.93255997]
[101.45170593 -22.51274872]
[111.86703491 -17.58302116]
[120.23639679 -9.62318611]
[125.70758057 0.57959718]
[127.71618652 12.00864124]
[126.04382324 23.51903343]
[120.84170532 33.95233154]
[112.61713409 42.25314331]
[102.18411255 47.57589722]
[103.70163727 62.49893951]
[105.21916199 77.42198181]
[106.73668671 92.34501648]
[110.69151306 99.57537079]
[108.04468536 107.79644012]
[109.05733490 122.76221466]
[117.70862579 136.00856018]
[110.84819794 149.22914124]
[111.86083984 164.19491577]
[112.87348938 179.16070557]
[121.52478027 192.40704346]
[114.66435242 205.62762451]
[115.67699432 220.59339905]
[116.68964386 235.55918884]
[117.70228577 250.52496338]
[126.35358429 263.77130127]
[119.49314880 276.99188232]
[120.50579834 291.95767212]
[121.51844025 306.92346191]
[128.62028503 322.31826782]
[115.79309082 333.40426636]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[5 86]
[6 85]
[7 84]
[8 83]
[10 81]
[11 80]
[12 79]
[14 77]
[15 76]
[16 74]
[17 73]
[18 72]
[19 71]
[24 62]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[31 54]
[38 51]
[39 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
