%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUUCCGGUCCCCGUGGUCACGUGACCGUCACUUCACGUGACCGCGCGGCGGCCGCUGCGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[103.90573120 161.71026611]
[101.14949036 146.96566772]
[91.20530701 135.87683105]
[96.27508545 120.88990784]
[84.88530731 114.89326477]
[79.05739594 103.41623688]
[80.93589020 90.68210602]
[89.82955170 81.37675476]
[87.75720215 66.52059937]
[85.68486023 51.66444397]
[83.61251068 36.80828476]
[81.54016876 21.95212936]
[79.12522888 7.14780331]
[76.36898804 -7.59679317]
[73.27291107 -22.27379227]
[69.83865356 -36.87536240]
[66.40439606 -51.47693253]
[62.97013474 -66.07850647]
[59.53587723 -80.68007660]
[56.10161972 -95.28164673]
[52.66736221 -109.88321686]
[49.23310471 -124.48478699]
[45.79884338 -139.08636475]
[42.36458588 -153.68792725]
[38.93032837 -168.28950500]
[35.49607086 -182.89106750]
[32.06181335 -197.49264526]
[17.70192146 -203.37254333]
[9.56929398 -216.58767700]
[10.79109192 -232.05657959]
[20.89750671 -243.83113098]
[36.00241852 -247.38377380]
[50.29767990 -241.34844971]
[58.28646851 -228.04585266]
[56.89693451 -212.59112549]
[46.66338348 -200.92689514]
[50.09764099 -186.32533264]
[53.53189850 -171.72375488]
[56.96615601 -157.12219238]
[60.40041733 -142.52061462]
[63.83467484 -127.91904449]
[67.26893616 -113.31747437]
[70.70319366 -98.71590424]
[74.13745117 -84.11433411]
[77.57170868 -69.51276398]
[81.00596619 -54.91119385]
[84.44022369 -40.30961990]
[87.87448120 -25.70805168]
[92.63401031 -19.71684647]
[91.11358643 -10.35303593]
[93.86982727 4.39156055]
[98.34758759 10.59618378]
[96.39632416 19.87978363]
[98.46867371 34.73593903]
[100.54101562 49.59209824]
[102.61335754 64.44824982]
[104.68570709 79.30441284]
[118.00997162 88.77929688]
[120.64218903 104.91561890]
[111.01968384 118.13366699]
[121.16101837 130.27714539]
[115.89408875 144.20942688]
[118.65032959 158.95402527]
[131.01994324 169.17028809]
[130.60083008 185.20787048]
[117.71447754 194.76409912]
[102.24620819 190.50827026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[4 60]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 51]
[14 50]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
