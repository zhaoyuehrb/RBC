%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAAACUUCCUCUCUCAGCCACACAGGAAGCUGAGCCGGCUUGGGGCCCAGCAUACACAGGCCCCCAGGACCCCUGGGGAGAGGGCCCCGCUGGGCUGGCCCUGCAGGGACC\
) } def
/len { sequence length } bind def

/coor [
[98.72712708 187.99470520]
[89.40848541 199.74897766]
[76.68559265 207.69429016]
[62.03414536 210.90910339]
[47.15351105 209.02052307]
[33.76964951 202.24761963]
[23.43491936 191.37594604]
[17.34800911 177.66647339]
[16.21492195 162.70933533]
[20.16708183 148.23934937]
[28.74608994 135.93484497]
[40.95689011 127.22299957]
[55.38378525 123.11419678]
[67.18432617 113.85421753]
[78.98486328 104.59423828]
[64.18944550 107.06315613]
[49.39402771 109.53207397]
[34.59860611 112.00099182]
[19.80318832 114.46990967]
[5.00776815 116.93882751]
[-0.30241957 131.35054016]
[-12.11729336 141.16401672]
[-27.25871277 143.73948669]
[-41.65370941 138.38415527]
[-51.43010330 126.53857422]
[-53.95809555 111.38915253]
[-48.55766296 97.01101685]
[-36.68150330 87.27179718]
[-21.52423477 84.79130554]
[-7.16309357 90.23677826]
[2.53884912 102.14340973]
[17.33426857 99.67449188]
[32.12968826 97.20557404]
[46.92510605 94.73665619]
[61.72052765 92.26773834]
[76.51594543 89.79881287]
[101.59661102 84.14843750]
[110.48014069 72.06196594]
[119.36367035 59.97548676]
[128.24719238 47.88901138]
[137.13072205 35.80253220]
[146.01425171 23.71605682]
[154.39071655 11.27279282]
[162.24581909 -1.50599790]
[170.10090637 -14.28478909]
[177.95600891 -27.06357956]
[185.81109619 -39.84237289]
[193.66619873 -52.62116241]
[201.52128601 -65.39995575]
[209.37637329 -78.17874146]
[201.23255920 -100.53050232]
[217.30381775 -122.42343140]
[217.71713257 -137.41773987]
[205.33796692 -146.77380371]
[200.85459900 -161.62907410]
[205.99096680 -176.27139282]
[218.77203369 -185.07048035]
[234.28321838 -184.64291382]
[246.56015015 -175.15310669]
[250.88211060 -160.25007629]
[245.58720398 -145.66435242]
[232.71144104 -137.00442505]
[232.29812622 -122.01011658]
[245.95039368 -115.79598999]
[256.98626709 -125.95521545]
[268.02212524 -136.11444092]
[279.05798340 -146.27366638]
[290.09384155 -156.43287659]
[301.12969971 -166.59210205]
[312.16555786 -176.75132751]
[319.72369385 -191.92732239]
[336.39892578 -188.86567688]
[338.07308960 -171.99458313]
[322.32476807 -165.71546936]
[311.28890991 -155.55624390]
[300.25305176 -145.39701843]
[289.21719360 -135.23780823]
[278.18133545 -125.07857513]
[267.14547729 -114.91935730]
[256.10961914 -104.76013184]
[256.11071777 -88.54561615]
[248.12403870 -75.57022858]
[235.38697815 -69.16014862]
[222.15516663 -70.32365417]
[214.30007935 -57.54486084]
[206.44497681 -44.76606750]
[198.58988953 -31.98727798]
[190.73480225 -19.20848656]
[182.87969971 -6.42969513]
[175.02461243 6.34909582]
[167.16950989 19.12788773]
[167.70686340 22.74597931]
[166.42773438 26.80534363]
[163.14494324 30.40585136]
[158.10073853 32.59958649]
[149.21720886 44.68606186]
[140.33367920 56.77253723]
[131.45014954 68.85901642]
[122.56661987 80.94548798]
[113.68309021 93.03196716]
[112.44439697 107.98073578]
[119.21739960 121.36454773]
[125.99040222 134.74836731]
[140.00769043 143.25997925]
[139.37458801 159.64691162]
[124.74237823 167.05166626]
[111.16342163 157.85688782]
[112.60659027 141.52136230]
[105.83358765 128.13754272]
[99.06058502 114.75373840]
[98.58791351 129.74629211]
[98.11523438 144.73883057]
[103.34851074 158.79632568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[37 100]
[38 99]
[39 98]
[40 97]
[41 96]
[42 95]
[43 91]
[44 90]
[45 89]
[46 88]
[47 87]
[48 86]
[49 85]
[50 84]
[52 63]
[53 62]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
[70 74]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
