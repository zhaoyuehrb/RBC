%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCACCCCGGGGCUGCGCACUGCAGCUCCCCAGGCCACCCACCACCCUUCUGGUCUCUGAGCCCAGGAUGCGAGG\
) } def
/len { sequence length } bind def

/coor [
[97.13282776 244.43725586]
[97.13282776 229.43725586]
[87.50920868 214.90594482]
[96.48247528 198.97514343]
[95.87848663 183.98731995]
[95.27449799 168.99948120]
[87.03099823 156.59407043]
[94.20634460 142.49354553]
[93.60235596 127.50571442]
[79.24348450 119.14839935]
[72.06868744 104.16361237]
[57.17805099 102.35556030]
[42.28741837 100.54750824]
[27.39678383 98.73945618]
[12.50615120 96.93141174]
[-2.38448167 95.12335968]
[-17.27511406 93.31530762]
[-32.16574860 91.50725555]
[-45.63051224 100.22962189]
[-60.79875946 95.00431061]
[-66.03470612 79.83973694]
[-57.32178497 66.36885834]
[-41.34379959 64.92538452]
[-30.35769844 76.61662292]
[-15.46706486 78.42467499]
[-0.57643157 80.23272705]
[14.31420135 82.04077911]
[29.20483398 83.84882355]
[44.09546661 85.65687561]
[58.98609924 87.46492767]
[73.87673187 89.27297974]
[81.13507843 78.98550415]
[92.14315796 72.87503052]
[104.71291351 72.15610504]
[116.34590149 76.97163391]
[127.96497345 67.48495483]
[139.58404541 57.99827194]
[151.00973511 48.27954102]
[162.23739624 38.33270264]
[160.88151550 22.98774147]
[168.72949219 9.93926811]
[182.59208679 4.08326292]
[197.07142639 7.47243929]
[208.29908752 -2.47440052]
[219.52674866 -12.42124081]
[230.75440979 -22.36808014]
[231.45835876 -38.15668488]
[243.17657471 -48.76135254]
[258.95684814 -47.89052200]
[269.43704224 -36.06084061]
[268.39941406 -20.29064941]
[256.45959473 -9.93612385]
[240.70124817 -11.14041901]
[229.47358704 -1.19357932]
[218.24592590 8.75326061]
[207.01826477 18.70009995]
[208.63743591 33.48239517]
[201.15318298 46.53804398]
[187.25387573 52.75597763]
[172.18423462 49.56036377]
[160.95657349 59.50720215]
[157.95669556 66.49200439]
[149.07072449 69.61734772]
[137.45166016 79.10402679]
[125.83258057 88.59070587]
[127.95046234 104.03308105]
[121.55339050 118.24679565]
[108.59018707 126.90172577]
[109.19417572 141.88955688]
[117.48088074 155.36698914]
[110.26232910 168.39549255]
[110.86631775 183.38331604]
[111.47030640 198.37115479]
[120.50156403 207.83116150]
[120.54502106 220.50531006]
[112.13282776 229.43725586]
[112.13282776 244.43725586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[4 73]
[5 72]
[6 71]
[8 69]
[9 68]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[35 65]
[36 64]
[37 63]
[38 61]
[39 60]
[43 56]
[44 55]
[45 54]
[46 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
