%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGUGCUAAAGGAGCCCGGCGGAGGCAGCGGUGGGUUUGGGACUGAGGCGCUGGAUCUGUGGUCGCGGCUGGGGACGUGCGCCCGCGCCACCAUCUUCGGCUGAAGAGGCAAUUGCUUUUGGAUCGUUCCAUUUACA\
) } def
/len { sequence length } bind def

/coor [
[271.69073486 443.92868042]
[265.18246460 430.41412354]
[258.67422485 416.89959717]
[252.16595459 403.38507080]
[245.65769958 389.87054443]
[239.14944458 376.35598755]
[232.48997498 362.91534424]
[225.68011475 349.55023193]
[218.87025452 336.18515015]
[203.96144104 336.62393188]
[190.28431702 330.52099609]
[180.57350159 319.03793335]
[176.79597473 304.41772461]
[179.75285339 289.54681396]
[188.91020203 277.38522339]
[182.10034180 264.02011108]
[175.29048157 250.65501404]
[168.48062134 237.28991699]
[151.53729248 228.07337952]
[152.67738342 208.00178528]
[145.27474976 194.95565796]
[132.26429749 187.70465088]
[132.18324280 171.88365173]
[124.78061676 158.83753967]
[111.77015686 151.58651733]
[111.68910980 135.76551819]
[104.28648376 122.71940613]
[96.88385773 109.67329407]
[90.43028259 104.72466278]
[89.46526337 96.25034332]
[82.35723114 83.04141235]
[75.24919891 69.83248138]
[68.14117432 56.62354660]
[61.26153564 50.48678207]
[61.02562714 43.03752518]
[47.86649323 34.25413895]
[48.98241806 19.40139771]
[42.17256165 6.03629971]
[28.92232513 3.35726762]
[19.78707695 -6.34100389]
[17.95882225 -19.34123802]
[23.88614273 -30.83606339]
[9.24000740 -36.13969421]
[2.83222985 -49.93806458]
[7.97868919 -63.86822891]
[1.47043312 -77.38276672]
[-11.48830414 -86.45919800]
[-10.03939342 -101.28316498]
[-16.54764938 -114.79769897]
[-29.50638580 -123.87413788]
[-28.05747604 -138.69810486]
[-34.56573105 -152.21263123]
[-41.07398987 -165.72715759]
[-46.41876602 -169.84208679]
[-48.50589752 -175.23995972]
[-47.55574799 -179.99720764]
[-53.45112610 -193.79013062]
[-59.34650040 -207.58303833]
[-65.24187469 -221.37596130]
[-77.02683258 -233.56411743]
[-68.57738495 -248.26252747]
[-52.11435699 -244.21221924]
[-51.44895935 -227.27133179]
[-45.55358505 -213.47842407]
[-39.65820694 -199.68550110]
[-33.76283264 -185.89257812]
[-27.55945587 -172.23542786]
[-21.05119896 -158.72088623]
[-14.54294300 -145.20635986]
[-2.04972029 -137.09657288]
[-3.03311658 -121.30595398]
[3.47513938 -107.79141998]
[15.96836281 -99.68163300]
[14.98496628 -83.89102173]
[21.49322128 -70.37648773]
[35.59302902 -65.71483612]
[42.38584518 -52.10188675]
[37.40067673 -37.34431839]
[53.46897507 -32.50739670]
[61.25610733 -17.26406860]
[55.53765869 -0.77355778]
[62.34751511 12.59154034]
[75.01956177 20.41896248]
[74.39072418 36.22766495]
[81.35010529 49.51551819]
[88.45813751 62.72444916]
[95.56616211 75.93338013]
[102.67419434 89.14231873]
[109.92997742 102.27066803]
[117.33260345 115.31678772]
[124.73522186 128.36289978]
[138.27517700 136.54705811]
[137.82673645 151.43490601]
[145.22935486 164.48103333]
[158.76930237 172.66519165]
[158.32087708 187.55303955]
[165.72349548 200.59915161]
[176.45794678 202.91215515]
[183.95971680 210.62612915]
[185.89129639 220.98719788]
[181.84571838 230.48005676]
[188.65557861 243.84515381]
[195.46543884 257.21026611]
[202.27529907 270.57534790]
[217.49678040 270.31530762]
[231.26560974 276.66406250]
[240.87322998 288.31369019]
[244.45536804 302.91946411]
[241.35353088 317.57171631]
[232.23535156 329.37527466]
[239.04521179 342.74038696]
[245.85507202 356.10546875]
[252.59527588 362.39508057]
[252.66398621 369.84774780]
[259.17224121 383.36227417]
[265.68048096 396.87680054]
[272.18875122 410.39135742]
[278.69699097 423.90588379]
[285.20526123 437.42041016]
[306.24618530 442.87750244]
[316.45205688 461.75378418]
[309.67440796 481.82031250]
[317.65487671 494.52114868]
[325.63537598 507.22201538]
[333.61584473 519.92291260]
[348.35952759 527.10314941]
[349.24301147 543.47845459]
[335.35745239 552.20336914]
[320.98712158 544.30236816]
[320.91497803 527.90338135]
[312.93450928 515.20251465]
[304.95401001 502.50164795]
[296.97354126 489.80078125]
[288.20001221 490.84997559]
[279.52859497 488.93774414]
[271.93563843 484.24990845]
[266.28579712 477.28634644]
[263.23361206 468.80801392]
[263.14767456 459.75372314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 119]
[2 118]
[3 117]
[4 116]
[5 115]
[6 114]
[7 112]
[8 111]
[9 110]
[15 104]
[16 103]
[17 102]
[18 101]
[20 97]
[21 96]
[23 94]
[24 93]
[26 91]
[27 90]
[28 89]
[30 88]
[31 87]
[32 86]
[33 85]
[35 84]
[37 82]
[38 81]
[42 78]
[45 75]
[46 74]
[48 72]
[49 71]
[51 69]
[52 68]
[53 67]
[56 66]
[57 65]
[58 64]
[59 63]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
