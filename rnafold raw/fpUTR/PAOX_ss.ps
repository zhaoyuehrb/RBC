%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGCUCCGCCUCCGGCCUCCUCCGAGAGCUCCAGACCUCCCGGCUACUCAGAAGCCCUCGGACUGCCCGGACCGCGCG\
) } def
/len { sequence length } bind def

/coor [
[55.36786652 423.00299072]
[41.88794708 430.25216675]
[26.58310318 430.39495850]
[12.97027874 423.39855957]
[4.17760038 410.87069702]
[2.22556067 395.69015503]
[7.56272411 381.34536743]
[18.96265030 371.13262939]
[33.80571747 367.39874268]
[37.26495743 352.80307007]
[40.72419357 338.20736694]
[34.71580505 321.83905029]
[47.14131927 308.41519165]
[50.03200150 293.69638062]
[52.92268753 278.97753906]
[55.81336975 264.25869751]
[58.70405579 249.53988647]
[53.56448746 235.56010437]
[63.81621933 223.50968933]
[55.13212585 213.78724670]
[53.69337463 200.63342285]
[60.26224518 188.92131042]
[72.59165192 183.12330627]
[76.05088806 168.52761841]
[79.51013184 153.93194580]
[82.96936798 139.33627319]
[86.42860413 124.74060822]
[89.88784027 110.14493561]
[86.06215668 96.69667053]
[95.51648712 86.39582825]
[98.97572327 71.80015564]
[102.43495941 57.20448303]
[98.08876038 41.99195099]
[108.55261230 31.39208794]
[104.20640564 16.17955780]
[114.67025757 5.57969522]
[118.12950134 -9.01597786]
[120.44728088 -23.83582497]
[121.60966492 -38.79071808]
[114.05100250 -53.34402466]
[123.10207367 -67.01919556]
[139.45190430 -65.74838257]
[146.28120422 -50.83889389]
[136.56455994 -37.62833405]
[135.40217590 -22.67343903]
[137.40751648 -20.36591148]
[138.49047852 -17.02306175]
[138.20922852 -13.04584503]
[136.29797363 -9.00320244]
[132.72517395 -5.55673981]
[129.26593018 9.03893375]
[133.85955811 23.20748520]
[123.14828491 34.85132599]
[127.74191284 49.01987839]
[117.03063202 60.66371918]
[113.57139587 75.25939178]
[110.11215973 89.85506439]
[113.93784332 103.30332947]
[104.48351288 113.60417175]
[101.02427673 128.19984436]
[97.56504059 142.79551697]
[94.10580444 157.39118958]
[90.64656067 171.98686218]
[87.18732452 186.58253479]
[96.63486481 201.15530396]
[92.82233429 217.75614929]
[78.53504944 226.40037537]
[83.46784973 241.43293762]
[73.42288208 252.43057251]
[70.53220367 267.14938354]
[67.64151764 281.86822510]
[64.75083160 296.58706665]
[61.86014938 311.30587769]
[68.44611359 322.59320068]
[65.55829620 334.92343140]
[55.31986618 341.66662598]
[51.86063004 356.26229858]
[48.40139008 370.85797119]
[59.98987579 380.85623169]
[65.59375000 395.09896851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 78]
[10 77]
[11 76]
[13 73]
[14 72]
[15 71]
[16 70]
[17 69]
[19 67]
[23 64]
[24 63]
[25 62]
[26 61]
[27 60]
[28 59]
[30 57]
[31 56]
[32 55]
[34 53]
[36 51]
[37 50]
[38 45]
[39 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
