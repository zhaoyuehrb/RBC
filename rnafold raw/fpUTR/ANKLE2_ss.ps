%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAGGGCGCGGGCAGCCCGGCGCGGGGUCCUGGGACGGGCGCGGCGCGGGGCGCGGGCUUCUCGGCGGCUGCGGCCCGGGCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[89.45109558 311.82522583]
[81.98651886 297.22344971]
[91.12565613 283.60696411]
[91.64339447 268.61590576]
[78.43976593 259.02941895]
[73.42807770 243.32827759]
[78.74113464 227.55252075]
[92.50000000 217.89276123]
[92.50000000 202.89276123]
[84.76270294 190.16548157]
[92.50000000 176.36531067]
[92.50000000 161.36531067]
[92.50000000 146.36531067]
[92.50000000 131.36531067]
[92.50000000 116.36531067]
[79.09375000 99.72068024]
[90.66046906 78.09364319]
[81.10709381 66.52934265]
[71.55371857 54.96504593]
[62.00033951 43.40074539]
[47.24602890 37.68928528]
[45.10522842 22.94932938]
[35.55184937 11.38503170]
[25.99847221 -0.17926592]
[16.44509506 -11.74356365]
[1.69078231 -17.45502663]
[-0.45001692 -32.19498062]
[-15.20433044 -37.90644455]
[-17.34512901 -52.64639664]
[-26.89850616 -64.21069336]
[-36.45188522 -75.77499390]
[-46.00526047 -87.33929443]
[-61.76015854 -88.58777618]
[-71.95404053 -100.66503906]
[-70.53905487 -116.40586090]
[-58.35468674 -126.47148132]
[-42.62971115 -124.89015198]
[-32.69347000 -112.60005188]
[-34.44096375 -96.89266968]
[-24.88758659 -85.32836914]
[-15.33420944 -73.76407623]
[-5.78083181 -62.19977570]
[8.29016018 -57.31546783]
[11.11428070 -41.74835968]
[25.18527222 -36.86405182]
[28.00939369 -21.29694176]
[37.56277084 -9.73264313]
[47.11614990 1.83165431]
[56.66952515 13.39595222]
[70.74051666 18.28026009]
[73.56463623 33.84737015]
[83.11801910 45.41166687]
[92.67139435 56.97596359]
[102.22476959 68.54026031]
[116.50653839 73.12623596]
[131.00653076 69.28565216]
[145.50653076 65.44506836]
[160.00653076 61.60448074]
[171.36563110 50.59170914]
[185.64971924 54.81241608]
[191.12640381 40.29396057]
[204.10932922 31.79554558]
[219.60630798 32.58498383]
[231.65843201 42.35872269]
[235.63140869 57.35855865]
[229.99755859 71.81674957]
[216.92318726 80.17382812]
[201.43568420 79.21631622]
[189.49029541 69.31241608]
[179.16831970 80.05048370]
[163.84710693 76.10447693]
[149.34710693 79.94506073]
[134.84712219 83.78565216]
[120.34712219 87.62623596]
[119.99060059 106.12576294]
[107.50000000 116.36531067]
[107.50000000 131.36531067]
[107.50000000 146.36531067]
[107.50000000 161.36531067]
[107.50000000 176.36531067]
[115.23729706 190.16548157]
[107.50000000 202.89276123]
[107.50000000 217.89276123]
[119.31451416 225.22453308]
[125.86206055 237.36738586]
[125.50151062 251.04931641]
[118.43687439 262.64437866]
[106.63446045 269.13363647]
[106.11671448 284.12469482]
[114.29466248 298.33926392]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 89]
[4 88]
[8 83]
[9 82]
[11 80]
[12 79]
[13 78]
[14 77]
[15 76]
[17 54]
[18 53]
[19 52]
[20 51]
[22 49]
[23 48]
[24 47]
[25 46]
[27 44]
[29 42]
[30 41]
[31 40]
[32 39]
[55 74]
[56 73]
[57 72]
[58 71]
[60 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
