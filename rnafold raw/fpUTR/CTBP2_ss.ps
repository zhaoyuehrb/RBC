%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGUUGGUUGUCCCUGCCGUCUCGGAAGGGUUAGCACACAGCCAGGUCUGUUUUUGAUGUAUGUAAUUGAAGAUUUAUAAAGAAAAGCUUCUCCUCUGCCUCAUCCGCAGUCAUUUUUUUUCCA\
) } def
/len { sequence length } bind def

/coor [
[5.58899593 233.59489441]
[1.11110866 219.27886963]
[1.41517174 204.28195190]
[6.46965599 190.15921021]
[15.75243092 178.37321472]
[1.41883886 182.79454041]
[-12.91475296 187.21586609]
[-27.24834442 191.63719177]
[-41.58193588 196.05851746]
[-55.91553116 200.47985840]
[-70.24912262 204.90118408]
[-84.58271027 209.32250977]
[-98.47641754 214.97627258]
[-111.82449341 221.81942749]
[-125.17256927 228.66258240]
[-138.52064514 235.50575256]
[-147.27119446 248.68673706]
[-162.12667847 247.60784912]
[-175.47474670 254.45100403]
[-188.82283020 261.29415894]
[-200.15922546 273.90060425]
[-215.41122437 266.49707031]
[-212.51919556 249.79161072]
[-195.66598511 247.94609070]
[-182.31791687 241.10293579]
[-168.96983337 234.25976562]
[-161.17402649 221.56825256]
[-145.36381531 222.15766907]
[-132.01573181 215.31451416]
[-118.66765594 208.47134399]
[-105.31958008 201.62818909]
[-119.35532379 196.33688354]
[-126.88802338 183.36543274]
[-124.52717590 168.55238342]
[-113.33540344 158.56518555]
[-98.35019684 157.89913940]
[-86.31649780 166.85403442]
[-82.65075684 181.39921570]
[-89.00404358 194.98892212]
[-74.67044830 190.56758118]
[-60.33685684 186.14625549]
[-46.00326538 181.72492981]
[-31.66967392 177.30360413]
[-17.33608055 172.88227844]
[-3.00248885 168.46095276]
[11.33110332 164.03962708]
[24.41397285 156.70214844]
[28.83697891 142.47941589]
[44.30375290 139.14930725]
[55.55046844 129.22402954]
[66.79718781 119.29873657]
[78.04390717 109.37345123]
[76.71325684 94.74080658]
[84.20341492 82.10029602]
[97.67717743 76.24002838]
[112.03080750 79.37982941]
[123.27752686 69.45454407]
[134.52424622 59.52925491]
[139.75169373 44.59659576]
[154.41401672 41.97642136]
[165.66073608 32.05113602]
[176.90745544 22.12584686]
[181.33511353 14.00786495]
[188.56050110 12.09758759]
[185.41603088 -1.59343517]
[188.48605347 -15.23330784]
[197.11090088 -26.15261650]
[209.54962158 -32.23986053]
[223.33114624 -32.34965515]
[235.74510193 -26.51781464]
[247.47256470 -35.87016296]
[259.20004272 -45.22250748]
[270.92752075 -54.57485580]
[275.75430298 -62.46204758]
[283.06594849 -64.00979614]
[295.02294922 -73.06685638]
[306.97991943 -82.12392426]
[306.53579712 -97.63464355]
[315.32125854 -110.42509460]
[329.95806885 -115.57708740]
[344.81811523 -111.10957336]
[354.18737793 -98.74040985]
[354.46322632 -83.22579193]
[345.53955078 -70.53139496]
[330.84768677 -65.53849030]
[316.03698730 -70.16693878]
[304.07998657 -61.10987091]
[292.12301636 -52.05280685]
[280.27987671 -42.84738159]
[268.55239868 -33.49503708]
[256.82492065 -24.14268875]
[245.09744263 -14.79034233]
[247.90495300 1.07147098]
[242.32774353 16.28315353]
[229.78877258 26.69054794]
[213.62562561 29.40131760]
[198.20231628 23.58825493]
[186.83274841 33.37256622]
[175.58602905 43.29785156]
[164.33930969 53.22314072]
[159.91630554 67.44587708]
[144.44952393 70.77597809]
[133.20281982 80.70126343]
[121.95609283 90.62654877]
[123.28674316 105.25919342]
[115.79658508 117.89970398]
[102.32282257 123.75997162]
[87.96919250 120.62017059]
[76.72247314 130.54545593]
[65.47575378 140.47074890]
[54.22903824 150.39602661]
[49.00159073 165.32868958]
[34.33926010 167.94886780]
[49.23382187 166.17347717]
[63.92040253 169.22378540]
[76.87612152 176.78350830]
[86.75757599 188.06875610]
[92.54013824 201.90934753]
[93.62420654 216.87011719]
[89.89736938 231.39976501]
[81.74607849 243.99168396]
[70.01554108 253.34019470]
[55.92212677 258.47592163]
[40.92721176 258.86633301]
[26.58563614 254.47097778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 46]
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[13 31]
[14 30]
[15 29]
[16 28]
[18 26]
[19 25]
[20 24]
[47 113]
[49 111]
[50 110]
[51 109]
[52 108]
[56 104]
[57 103]
[58 102]
[60 100]
[61 99]
[62 98]
[64 97]
[70 92]
[71 91]
[72 90]
[73 89]
[75 88]
[76 87]
[77 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
