%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCCACUGGGAAGCUUCAACAUAGCUGUGGAAGUCUGCAGUCUACAGGAGCCUACUAUAGACAUUCUACAACCAACCAGAAUC\
) } def
/len { sequence length } bind def

/coor [
[116.84449768 141.92967224]
[109.98770905 128.59306335]
[102.56787109 141.62939453]
[95.14803314 154.66572571]
[87.72819519 167.70205688]
[85.14807892 184.45852661]
[68.33221436 186.61790466]
[61.60213470 171.05697632]
[74.69185638 160.28222656]
[82.11169434 147.24588013]
[89.53153229 134.20954895]
[96.95137024 121.17321777]
[88.82057190 108.56805420]
[73.88455963 109.95207977]
[58.94854736 111.33610535]
[44.01253510 112.72013092]
[35.25839615 125.67771912]
[20.20923042 129.92703247]
[5.97079277 123.46166229]
[-0.73396063 109.33437347]
[3.26074910 94.21563721]
[16.06874275 85.24404907]
[31.64247513 86.65573120]
[42.62850952 97.78411865]
[57.56452179 96.40009308]
[72.50053406 95.01606750]
[87.43654633 93.63204193]
[99.88930511 85.26970673]
[106.82236481 71.96810150]
[113.75542450 58.66649246]
[120.68848419 45.36488724]
[127.62154388 32.06328201]
[134.55459595 18.76167679]
[141.24067688 5.33422709]
[147.67749023 -8.21448040]
[154.11428833 -21.76318932]
[160.55110168 -35.31189728]
[166.98791504 -48.86060333]
[165.92115784 -64.64580536]
[178.37138367 -72.82144165]
[184.80819702 -86.37015533]
[191.24499512 -99.91886139]
[190.62623596 -104.79410553]
[191.64706421 -109.10446930]
[193.88061523 -112.36560059]
[196.77876282 -114.30439758]
[199.76078796 -114.88072968]
[208.12312317 -127.33348846]
[208.69303894 -143.72273254]
[223.29658508 -151.18385315]
[236.91088867 -142.04150391]
[235.53073120 -125.70053864]
[220.57588196 -118.97114563]
[212.21354675 -106.51838684]
[204.79371643 -93.48204803]
[198.35690308 -79.93334198]
[191.92008972 -66.38463593]
[193.44725037 -51.56852722]
[180.53662109 -42.42379379]
[174.09980774 -28.87508774]
[167.66299438 -15.32637978]
[161.22619629 -1.77767158]
[154.78938293 11.77103615]
[154.76307678 19.34492111]
[147.85620117 25.69473457]
[140.92314148 38.99634171]
[133.99008179 52.29794693]
[127.05702972 65.59954834]
[120.12397003 78.90115356]
[113.19091034 92.20275879]
[122.27500916 80.26629639]
[134.67274475 71.82260132]
[149.10691833 67.74156952]
[164.09048462 68.44362640]
[178.07981873 73.85644531]
[189.63371277 83.42238617]
[197.56188965 96.15596771]
[201.04757690 110.74534607]
[199.73165894 125.68751526]
[193.74972534 139.44309998]
[183.71801758 150.59501648]
[170.67004395 157.99433899]
[155.94999695 160.87881470]
[141.07435608 158.95124817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[5 9]
[13 27]
[14 26]
[15 25]
[16 24]
[28 70]
[29 69]
[30 68]
[31 67]
[32 66]
[33 65]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[40 57]
[41 56]
[42 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
