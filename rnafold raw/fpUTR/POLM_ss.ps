%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCCGCCCACCCGCUUCCGUCAGCCUCACUGGGGCUUCCUUCCGUCUCGCUCGGAGUUUCCCUCUGCGUUCGCUCCGCGCUGCUGGAGGCUGUCGUCCCA\
) } def
/len { sequence length } bind def

/coor [
[47.83279419 301.75994873]
[41.66060257 307.74853516]
[34.29006958 312.15350342]
[26.11797905 314.74490356]
[17.58263016 315.39019775]
[9.14032459 314.06103516]
[1.24097252 310.83453369]
[-8.43972778 322.29248047]
[-6.86607265 338.01821899]
[-16.93763924 350.19766235]
[-32.67914581 351.60498047]
[-44.75143814 341.40521240]
[-45.99223328 325.64968872]
[-35.66539764 313.68591309]
[-19.89765358 312.61178589]
[-10.21695232 301.15383911]
[-18.21284866 280.22033691]
[-12.62674618 258.40118408]
[4.61892319 243.73735046]
[27.27998161 241.71141052]
[33.49228287 228.05830383]
[31.72078133 213.26942444]
[44.47871780 203.91282654]
[50.69102097 190.25973511]
[56.90332031 176.60662842]
[63.11562347 162.95352173]
[69.32792664 149.30041504]
[75.54022980 135.64730835]
[81.75253296 121.99420166]
[72.10699463 110.83567047]
[69.02444458 95.72402191]
[73.93520355 80.39506531]
[86.20793152 68.96638489]
[77.61469269 56.67181778]
[69.02146149 44.37725067]
[60.42823029 32.08268356]
[51.83499527 19.78811836]
[36.31863785 19.63881683]
[23.87347984 10.37072086]
[19.28493500 -4.45239878]
[24.31739426 -19.13074875]
[37.03577423 -28.02020645]
[52.54959869 -27.70259094]
[64.89348602 -18.30003357]
[69.32095337 -3.42800856]
[64.12956238 11.19488621]
[72.72279358 23.48945236]
[81.31602478 35.78401566]
[89.90926361 48.07858276]
[98.50249481 60.37314987]
[113.32839966 62.65185928]
[125.21708679 53.50532150]
[131.43684387 38.95798111]
[146.24218750 37.32970428]
[158.13087463 28.18316460]
[170.01954651 19.03662682]
[181.90823364 9.89008999]
[193.79692078 0.74355215]
[205.68560791 -8.40298557]
[201.69888306 -23.07181168]
[203.63409424 -38.14905930]
[211.19616699 -51.33555603]
[223.23190308 -60.62045670]
[237.90596008 -64.58788300]
[252.98065186 -62.63283539]
[266.15719604 -55.05343628]
[275.42623901 -43.00549316]
[279.37435913 -28.32622910]
[277.39947510 -13.25412655]
[269.80276489 -0.08757040]
[257.74264526 9.16563511]
[243.05819702 13.09444332]
[227.98869324 11.09973907]
[214.83215332 3.48569989]
[202.94346619 12.63223743]
[191.05477905 21.77877617]
[179.16609192 30.92531395]
[167.27740479 40.07184982]
[155.38871765 49.21838760]
[150.01931763 63.11150742]
[134.36361694 65.39400482]
[122.47493744 74.54054260]
[130.22195435 86.59036255]
[132.16386414 100.39778900]
[128.25970459 113.38500977]
[119.53107452 123.25966644]
[107.81959534 128.41908264]
[95.40563965 128.20649719]
[89.19333649 141.85960388]
[82.98103333 155.51271057]
[76.76873016 169.16581726]
[70.55642700 182.81892395]
[64.34412384 196.47203064]
[58.13182449 210.12513733]
[59.45897675 225.89057922]
[47.14538956 234.27059937]
[40.93308640 247.92370605]
[47.29431534 253.84971619]
[52.11791992 261.06652832]
[55.15141296 269.18536377]
[56.23855209 277.77038574]
[55.32739258 286.36239624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 16]
[8 15]
[20 97]
[21 96]
[23 94]
[24 93]
[25 92]
[26 91]
[27 90]
[28 89]
[29 88]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[51 82]
[52 81]
[54 79]
[55 78]
[56 77]
[57 76]
[58 75]
[59 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
