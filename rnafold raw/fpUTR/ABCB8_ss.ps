%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGUCGGGAUGGGGGCGGGAGCCAACAUAGAGCCCUCAGUGGGAUGAGGGUGAAACUGCUAUUGCCGGCGGCUCCUGUUUUACCGCGUCAGC\
) } def
/len { sequence length } bind def

/coor [
[73.81275177 447.48648071]
[76.63912201 428.31195068]
[77.13507080 413.32015991]
[77.63101959 398.32836914]
[78.12696838 383.33657837]
[70.81470490 370.36044312]
[79.00405884 356.82363892]
[79.50000763 341.83181763]
[79.74801636 326.83386230]
[79.74801636 311.83386230]
[71.73815918 305.10598755]
[68.79697418 294.83624268]
[72.16793823 284.46566772]
[80.93516541 277.61434937]
[81.92652130 262.64715576]
[82.91788483 247.67994690]
[83.90924072 232.71273804]
[84.90059662 217.74554443]
[85.89196014 202.77833557]
[86.88331604 187.81112671]
[87.87467194 172.84393311]
[88.86603546 157.87672424]
[89.85739136 142.90951538]
[90.84875488 127.94231415]
[91.84011078 112.97510529]
[85.09165192 126.37131500]
[72.56758881 134.62648010]
[57.59586334 135.54701233]
[44.15482330 128.88830566]
[35.81608200 116.41972351]
[34.79544067 101.45449066]
[41.36411285 87.96921539]
[53.77664185 79.54727173]
[68.73612213 78.42683411]
[64.81391907 63.94870377]
[60.89172363 49.47056961]
[56.96952438 34.99243546]
[53.04732513 20.51430130]
[49.12512589 6.03616810]
[45.20292664 -8.44196510]
[31.37129211 -16.08797455]
[27.07773972 -31.29787064]
[34.86955643 -45.04789352]
[50.12399673 -49.18039703]
[63.79087067 -41.24364090]
[67.76186371 -25.94636345]
[59.68106079 -12.36416435]
[63.60326004 2.11396909]
[67.52545929 16.59210205]
[71.44765472 31.07023621]
[75.36985779 45.54837036]
[79.29205322 60.02650452]
[83.21425629 74.50463867]
[89.92472839 77.85420227]
[89.01577759 62.88176727]
[101.52777100 54.60830688]
[114.94882965 61.30718994]
[115.85805511 76.27960968]
[103.34566498 84.55333710]
[110.05613708 87.90290070]
[123.98444366 82.33494568]
[137.91275024 76.76698303]
[143.91026306 62.14489746]
[158.52255249 56.12356186]
[173.08041382 62.27532959]
[178.94692993 76.95046997]
[172.64158630 91.44247437]
[157.90524292 97.15349579]
[143.48071289 90.69529724]
[129.55239868 96.26325226]
[115.62409210 101.83121490]
[106.80731201 113.96646881]
[105.81595612 128.93367004]
[104.82460022 143.90087891]
[103.83323669 158.86808777]
[102.84188080 173.83528137]
[101.85051727 188.80249023]
[100.85916138 203.76969910]
[99.86780548 218.73689270]
[98.87644196 233.70410156]
[97.88508606 248.67131042]
[96.89373016 263.63851929]
[95.90236664 278.60571289]
[105.72146606 296.05776978]
[94.74801636 311.83386230]
[94.74801636 326.83386230]
[97.92729950 335.61437988]
[94.49180603 342.32778931]
[93.99585724 357.31958008]
[101.27264404 371.36801147]
[93.11876678 383.83251953]
[92.62281799 398.82431030]
[92.12686920 413.81610107]
[91.63092041 428.80792236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[5 91]
[7 89]
[8 88]
[9 86]
[10 85]
[14 83]
[15 82]
[16 81]
[17 80]
[18 79]
[19 78]
[20 77]
[21 76]
[22 75]
[23 74]
[24 73]
[25 72]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
