%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUGCUGAUUUAGCUUAUGGAAGAGGAACCAGAAAUUUGUCCUUGAAUAAUGUUUCCCGACAACGAAGAGGCAGAAGGAUCUGGGCCUGUGCGCGACGCCCCGGGGGACGAGGCUC\
) } def
/len { sequence length } bind def

/coor [
[112.94972992 182.21186829]
[97.98235321 183.20060730]
[88.96378326 171.21455383]
[94.05934906 157.10762024]
[95.27001190 142.15655518]
[87.78633881 142.65119934]
[79.55596161 155.19157410]
[71.32558441 167.73193359]
[63.09520721 180.27230835]
[59.45929337 196.83178711]
[42.54043961 197.92208862]
[36.80914688 181.96626282]
[50.55483627 172.04193115]
[58.78521347 159.50155640]
[67.01558685 146.96119690]
[75.24596405 134.42082214]
[67.75195312 125.62101746]
[63.10838699 115.39904785]
[61.51037598 104.62062073]
[62.90336990 94.14752197]
[67.00054169 84.76884460]
[73.31822968 77.14158630]
[81.22566223 71.74488831]
[90.00426483 68.85123444]
[81.19939423 55.70647049]
[87.90549469 42.40694427]
[86.71874237 27.45396423]
[85.53198242 12.50098324]
[76.19578552 3.48309207]
[75.57987976 -9.07954693]
[83.46841431 -18.35354424]
[82.67678070 -33.33264160]
[81.88515472 -48.31173706]
[81.09352112 -63.29083252]
[80.30189514 -78.26992798]
[65.76815796 -90.26723480]
[64.50874329 -108.75427246]
[76.85308075 -122.14704132]
[75.27202606 -137.06349182]
[73.69097137 -151.97993469]
[72.10991669 -166.89637756]
[68.04871368 -175.22206116]
[70.68935394 -182.22668457]
[69.50259399 -197.17965698]
[68.31584167 -212.13264465]
[67.12908936 -227.08561707]
[53.70558548 -231.71510315]
[43.10825729 -241.10054016]
[36.92854691 -253.78799438]
[36.07744598 -267.83117676]
[40.65132141 -281.08990479]
[49.92231369 -291.55627441]
[62.45394516 -297.65878296]
[61.66231537 -312.63787842]
[60.87068558 -327.61697388]
[60.07905197 -342.59606934]
[50.69259262 -356.04324341]
[57.88906479 -370.77899170]
[74.26535797 -371.64447021]
[82.97494507 -357.74932861]
[75.05815125 -343.38769531]
[75.84977722 -328.40859985]
[76.64141083 -313.42950439]
[77.43303680 -298.45040894]
[92.24373627 -292.60726929]
[103.08504486 -280.86791992]
[107.76734161 -265.52917480]
[105.31275940 -249.62200928]
[96.15895844 -236.31266785]
[82.08206940 -228.27238464]
[83.26882172 -213.31939697]
[84.45557404 -198.36642456]
[85.64233398 -183.41343689]
[87.02635956 -168.47743225]
[88.60741425 -153.56098938]
[90.18846893 -138.64454651]
[91.76952362 -123.72809601]
[102.10797119 -118.56629181]
[108.69094849 -108.92287445]
[109.75405884 -97.17410278]
[104.91098022 -86.28511047]
[95.28099060 -79.06156158]
[96.07261658 -64.08246613]
[96.86425018 -49.10336685]
[97.65587616 -34.12427139]
[98.44750977 -19.14517403]
[108.80672455 -5.04672050]
[100.48496246 11.31422806]
[101.67172241 26.26720810]
[102.85847473 41.22018814]
[111.57846832 53.29541016]
[104.95724487 67.66447449]
[128.08198547 77.56819916]
[139.07174683 102.76543427]
[129.06904602 130.86334229]
[138.87834167 142.21136475]
[154.40100098 143.50942993]
[164.18736267 155.15768433]
[162.85420227 169.94815063]
[172.66349792 181.29617310]
[182.62173462 192.51373291]
[192.72717285 203.59886169]
[202.83259583 214.68400574]
[217.97164917 222.31587219]
[214.82894897 238.97599792]
[197.94992065 240.56808472]
[191.74746704 224.78942871]
[181.64202881 213.70429993]
[171.53660583 202.61917114]
[164.61827087 199.76007080]
[161.31547546 191.10548401]
[151.50617981 179.75746155]
[136.67843628 178.93656921]
[126.56875610 167.56779480]
[127.53031921 152.02066040]
[117.72102356 140.67263794]
[110.23735046 141.16728210]
[113.40528870 155.82893372]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 16]
[7 15]
[8 14]
[9 13]
[24 92]
[26 90]
[27 89]
[28 88]
[31 86]
[32 85]
[33 84]
[34 83]
[35 82]
[38 77]
[39 76]
[40 75]
[41 74]
[43 73]
[44 72]
[45 71]
[46 70]
[53 64]
[54 63]
[55 62]
[56 61]
[95 116]
[96 115]
[99 112]
[100 111]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
