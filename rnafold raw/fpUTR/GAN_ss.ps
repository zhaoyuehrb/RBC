%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACAGGCACGUCCCGGGGGCUCCAGCUUCUGCUCAGAGCGCGGAGAGCCGGGCCGGGCGGGCGCGCGCGCAGGACUCGGGCCGCUCGAGGGGUCCGGCCGGACGGUGUCGGGAGCCGGACCCGUCGGCAGAGGAGCGGGCGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[109.55494690 127.37316132]
[104.58373260 113.22130585]
[101.13589478 127.81967926]
[106.36715698 143.36207581]
[95.32118225 155.48306274]
[79.36112976 151.71362305]
[74.90532684 135.93142700]
[86.53752899 124.37184143]
[89.98536682 109.77346802]
[85.17793274 104.01686096]
[70.75563049 86.74702454]
[55.77646255 87.53733063]
[47.30500793 91.13509369]
[40.47381592 88.18300629]
[25.48131752 88.65733337]
[10.48881817 89.13165283]
[-4.50368023 89.60597229]
[-19.49617958 90.08029938]
[-36.05416107 101.49957275]
[-52.73505020 91.79864502]
[-67.69422913 92.90457916]
[-82.65340424 94.01051331]
[-97.61257935 95.11644745]
[-112.57175446 96.22238159]
[-127.51843262 97.48595428]
[-140.52352905 106.49584961]
[-153.92655945 99.99910736]
[-168.85910034 101.42018127]
[-183.77581787 102.99858856]
[-198.67507935 104.73416901]
[-213.57432556 106.46974182]
[-228.47358704 108.20532227]
[-241.30143738 118.42189026]
[-256.46206665 112.16992950]
[-258.35955811 95.88092804]
[-245.04188538 86.31160736]
[-230.20916748 93.30606842]
[-215.30990601 91.57048798]
[-200.41065979 89.83491516]
[-185.51139832 88.09933472]
[-179.18859863 84.17477417]
[-170.28016663 86.48764801]
[-155.34764099 85.06657410]
[-143.41062927 76.15831757]
[-128.93949890 82.55341339]
[-122.53536987 78.76303101]
[-113.67768097 81.26320648]
[-98.71850586 80.15727234]
[-83.75933075 79.05133820]
[-68.80015564 77.94540405]
[-53.84098434 76.83947754]
[-47.83356476 68.47171021]
[-37.99317169 64.74815369]
[-27.52127075 67.14076233]
[-19.97050095 75.08779907]
[-4.97800303 74.61347961]
[10.01449585 74.13915253]
[25.00699425 73.66483307]
[39.99949265 73.19050598]
[54.98616028 72.55815887]
[69.96532440 71.76786041]
[114.43113708 82.31477356]
[128.53251648 77.20098877]
[142.63391113 72.08720398]
[156.73530579 66.97341156]
[170.83668518 61.85962677]
[181.17233276 49.88110352]
[195.77494812 52.81591034]
[209.87632751 47.70212173]
[223.97772217 42.58833313]
[225.39295959 32.83617401]
[230.26806641 24.33928108]
[237.88195801 18.26840019]
[247.13975525 15.44175911]
[256.73013306 16.21496391]
[265.31106567 20.43685532]
[271.69754028 27.47669792]
[286.17959595 23.56896019]
[300.66165161 19.66122437]
[307.78781128 8.85738277]
[319.98120117 5.92659378]
[330.53952026 11.91620064]
[345.10073853 8.31465626]
[359.66192627 4.71311188]
[362.78054810 1.47283447]
[366.41329956 -0.37733918]
[370.04583740 -0.84933221]
[373.22314453 -0.12546803]
[375.60144043 1.47698760]
[390.41427612 -0.88514674]
[402.82382202 -10.69909859]
[416.61074829 -5.06257248]
[431.42358398 -7.42470694]
[446.23641968 -9.78684139]
[461.04928589 -12.14897537]
[475.86212158 -14.51111031]
[490.67495728 -16.87324524]
[505.48779297 -19.23537827]
[520.30065918 -21.59751320]
[535.11346436 -23.95964813]
[549.87322998 -26.63355446]
[561.85803223 -36.96192551]
[575.87030029 -31.91161919]
[590.57037354 -34.89611053]
[605.27050781 -37.88060379]
[619.58990479 -46.95750809]
[632.27612305 -35.71041870]
[624.98046875 -20.40650940]
[608.25500488 -23.18050957]
[593.55487061 -20.19601631]
[578.85479736 -17.21152306]
[567.92144775 -7.09662390]
[552.85772705 -11.93346024]
[549.48931885 -8.46124077]
[543.88104248 -7.11093760]
[537.47564697 -9.14680481]
[522.66278076 -6.78466988]
[507.84994507 -4.42253542]
[493.03710938 -2.06040120]
[478.22424316 0.30173311]
[463.41140747 2.66386747]
[448.59857178 5.02600193]
[433.78573608 7.38813639]
[418.97286987 9.75027084]
[407.62283325 19.39526749]
[392.77642822 13.92769623]
[377.96359253 16.28983116]
[363.26348877 19.27432251]
[348.70227051 22.87586784]
[334.14105225 26.47741318]
[322.21154785 39.30866241]
[304.56936646 34.14326859]
[290.08734131 38.05100632]
[275.60528564 41.95874023]
[267.06362915 60.46460342]
[247.41142273 66.87745667]
[229.09150696 56.68972397]
[214.99012756 61.80351257]
[200.88873291 66.91729736]
[191.56170654 78.53005219]
[175.95048523 75.96101379]
[161.84909058 81.07479858]
[147.74769592 86.18859100]
[133.64631653 91.30237579]
[119.54492188 96.41616821]
[134.17727661 99.71681213]
[141.60952759 112.74607849]
[137.00288391 127.02118683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 9]
[3 8]
[11 61]
[12 60]
[14 59]
[15 58]
[16 57]
[17 56]
[18 55]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 45]
[27 43]
[28 42]
[29 40]
[30 39]
[31 38]
[32 37]
[62 145]
[63 144]
[64 143]
[65 142]
[66 141]
[68 139]
[69 138]
[70 137]
[77 134]
[78 133]
[79 132]
[82 130]
[83 129]
[84 128]
[89 127]
[90 126]
[92 124]
[93 123]
[94 122]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[100 116]
[101 113]
[103 111]
[104 110]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
