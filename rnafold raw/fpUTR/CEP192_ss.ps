%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCCCUGGGACACCUCUUCAGUCCGUGGACUUUCCCGCUGCACACUGCCCUCCGAAGUCGGGGACGCGGGCUCGUGAG\
) } def
/len { sequence length } bind def

/coor [
[72.71963501 159.78479004]
[67.92771149 161.27156067]
[58.73870087 173.12744141]
[49.54969406 184.98333740]
[40.59231567 197.01518250]
[31.86993217 209.21846008]
[27.57861519 225.62033081]
[10.62979412 226.03720093]
[5.53731012 209.86614990]
[19.66665268 200.49609375]
[28.38903236 188.29280090]
[29.75115585 180.82681274]
[37.69380188 175.79432678]
[46.88281250 163.93844604]
[56.07181931 152.08255005]
[64.79419708 139.87927246]
[73.03683472 127.34695435]
[81.27947235 114.81463623]
[76.14968872 101.04618073]
[80.05419922 86.88143921]
[91.51399231 77.68589020]
[106.18820953 76.94273376]
[114.43084717 64.41041565]
[122.67348480 51.87809753]
[130.91612244 39.34577942]
[139.15875244 26.81346130]
[147.40138245 14.28114510]
[155.64402771 1.74882746]
[163.88665771 -10.78348923]
[163.94171143 -15.74735737]
[165.57063293 -19.91178894]
[168.27056885 -22.84568787]
[171.44523621 -24.35197830]
[174.49981689 -24.47686386]
[184.57994080 -35.58502197]
[194.66004944 -46.69318390]
[204.74017334 -57.80134201]
[214.82029724 -68.90950012]
[224.90040588 -80.01766205]
[234.76322937 -91.31919861]
[244.40504456 -102.80986786]
[236.80436707 -115.92495728]
[234.15075684 -130.84924316]
[236.76463318 -145.78053284]
[244.33036804 -158.91580200]
[255.93435669 -168.66891479]
[270.17538452 -173.86213684]
[285.33374023 -173.86833191]
[299.57897949 -168.68679810]
[311.19094849 -158.94319153]
[318.76745605 -145.81411743]
[321.39355469 -130.88496399]
[318.75216675 -115.95851898]
[311.16223145 -102.83721161]
[299.54028320 -93.10549927]
[285.28973389 -87.93853760]
[270.13140869 -87.96026611]
[255.89570618 -93.16805267]
[246.25389099 -81.67739105]
[244.31730652 -74.33940125]
[236.00857544 -69.93754578]
[225.92845154 -58.82938766]
[215.84832764 -47.72122574]
[205.76821899 -36.61306381]
[195.68809509 -25.50490570]
[185.60798645 -14.39674473]
[176.41897583 -2.54085493]
[168.17634583 9.99146175]
[159.93370056 22.52377892]
[151.69107056 35.05609512]
[143.44844055 47.58841324]
[135.20579529 60.12073135]
[126.96316528 72.65304565]
[118.72052765 85.18536377]
[123.85031128 98.95381927]
[119.94580078 113.11856079]
[108.48600769 122.31410980]
[93.81179047 123.05726624]
[85.56915283 135.58958435]
[77.32651520 148.12190247]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 11]
[6 10]
[16 80]
[17 79]
[18 78]
[22 74]
[23 73]
[24 72]
[25 71]
[26 70]
[27 69]
[28 68]
[29 67]
[34 66]
[35 65]
[36 64]
[37 63]
[38 62]
[39 61]
[40 59]
[41 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
