%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGUCUCAGCUCUGGGAGGGAACGGGAGAUGUUGCAGGCGCCGAGAGGGCGGGCCAGGGCCGCACUCCGGAGACUCGCGGUUGCUACGCGCACC\
) } def
/len { sequence length } bind def

/coor [
[104.52991486 385.06991577]
[91.67935181 374.01101685]
[98.74867249 358.60125732]
[99.72972107 343.63336182]
[100.71076202 328.66549683]
[101.44677734 313.68356323]
[94.13005066 300.70993042]
[102.31473541 287.17031860]
[102.31473541 272.17031860]
[101.82394409 257.17834473]
[101.33316040 242.18637085]
[91.24983978 227.92596436]
[99.80664825 211.72341919]
[98.82559967 196.75553894]
[97.84455109 181.78765869]
[89.29141235 169.59367371]
[96.10957336 155.31700134]
[95.12853241 140.34912109]
[94.14748383 125.38124084]
[82.34725952 119.15306091]
[75.17931366 107.89890289]
[74.52460480 94.57198334]
[80.55493164 82.66943359]
[91.68786621 75.31462860]
[83.50318146 61.77500153]
[90.81991577 48.80138397]
[90.32912445 33.80941772]
[89.83834076 18.81744766]
[89.34755707 3.82547927]
[85.88374329 -4.84253931]
[89.09410095 -11.66329861]
[89.09410095 -26.66329956]
[89.09410095 -41.66329956]
[81.35679626 -55.46347046]
[89.09410095 -68.19074249]
[89.09410095 -83.19074249]
[78.14475250 -99.95992279]
[88.06069946 -116.42400360]
[87.07965088 -131.39189148]
[86.09860992 -146.35977173]
[82.35304260 -154.90982056]
[85.33850861 -161.83197021]
[84.84771729 -176.82392883]
[84.35693359 -191.81590271]
[72.65206909 -202.43530273]
[71.96799469 -218.22477722]
[82.71055603 -229.81671143]
[98.50638580 -230.33381653]
[109.98409271 -219.46929932]
[110.33415985 -203.66888428]
[99.34889984 -192.30668640]
[99.83969116 -177.31471252]
[100.33047485 -162.32275391]
[101.06649017 -147.34082031]
[102.04753876 -132.37294006]
[103.02858734 -117.40505219]
[111.45800781 -111.21866608]
[115.06562042 -101.16858673]
[112.38610077 -90.60306549]
[104.09410095 -83.19074249]
[104.09410095 -68.19074249]
[111.83139801 -55.46347046]
[104.09410095 -41.66329956]
[104.09410095 -26.66329956]
[104.09410095 -11.66329861]
[104.33952332 3.33469319]
[104.83030701 18.32666206]
[105.32109833 33.31863022]
[105.81188202 48.31060028]
[113.96146393 60.77790070]
[106.67983246 74.82383728]
[120.24924469 83.61624908]
[126.01587677 98.72192383]
[121.75762939 114.32008362]
[109.11536407 124.40019226]
[110.09641266 139.36807251]
[111.07746124 154.33595276]
[119.70076752 167.60054016]
[112.81243896 180.80661011]
[113.79348755 195.77449036]
[114.77452850 210.74237061]
[124.01109314 219.92619324]
[124.41761780 232.54141235]
[116.32512665 241.69558716]
[116.81591797 256.68756104]
[117.30670166 271.67953491]
[120.62134552 277.76531982]
[120.26499176 283.68585205]
[117.30670166 287.66110229]
[124.58833313 301.70703125]
[116.43875122 314.17434692]
[119.32822418 323.05035400]
[115.67864990 329.64651489]
[114.69760132 344.61441040]
[113.71655273 359.58230591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 95]
[4 94]
[5 93]
[6 91]
[8 89]
[9 86]
[10 85]
[11 84]
[13 81]
[14 80]
[15 79]
[17 77]
[18 76]
[19 75]
[24 71]
[26 69]
[27 68]
[28 67]
[29 66]
[31 65]
[32 64]
[33 63]
[35 61]
[36 60]
[38 56]
[39 55]
[40 54]
[42 53]
[43 52]
[44 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
