%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGAGAGGAUAAAUAGCAGCGUGGCUUCCCUGGCUCCUCUCUGCAUCCUUCCCGACCUUCCCAGCAAU\
) } def
/len { sequence length } bind def

/coor [
[164.36340332 208.90498352]
[155.12266541 197.08937073]
[145.88192749 185.27374268]
[136.64120483 173.45812988]
[132.86981201 172.75256348]
[129.32659912 169.97525024]
[127.08718109 165.29624939]
[127.08536530 159.41050720]
[119.48976898 146.47579956]
[111.89417267 133.54107666]
[104.29857635 120.60635376]
[96.70298767 107.67163849]
[93.89063263 107.01521301]
[91.22386932 105.30516052]
[89.09573364 102.58922577]
[87.87654877 99.05910492]
[87.86252594 95.03859711]
[89.23023224 90.95396423]
[84.65814209 76.66774750]
[80.08605957 62.38152695]
[75.51396942 48.09530640]
[63.93848038 37.31019592]
[67.42825317 22.83018494]
[51.87969208 10.34935474]
[55.98588562 -8.34466934]
[50.16907120 -22.17090034]
[44.35226059 -35.99713135]
[38.53544617 -49.82336426]
[24.28254890 -57.18776703]
[21.29517937 -72.95022583]
[31.86499596 -85.01913452]
[47.88373566 -84.13626099]
[57.06319809 -70.97886658]
[52.36167908 -55.64017868]
[58.17849350 -41.81394577]
[63.99530411 -27.98771286]
[69.81211853 -14.16148186]
[79.93962860 -11.00143909]
[86.65596008 -2.50214553]
[87.42028809 8.52770901]
[81.71446991 18.25809860]
[92.96293640 28.02136421]
[89.80018616 43.52322006]
[94.37227631 57.80944061]
[98.94435883 72.09565735]
[103.51644897 86.38187408]
[109.63770294 100.07604218]
[117.23329926 113.01076508]
[124.82889557 125.94548035]
[132.42448425 138.88020325]
[140.02008057 151.81491089]
[148.45681763 164.21739197]
[157.69755554 176.03302002]
[166.93827820 187.84863281]
[176.17901611 199.66426086]
[190.58546448 194.94937134]
[205.73558044 195.44923401]
[219.79991150 201.10346985]
[231.08012390 211.22929382]
[238.21408081 224.60400391]
[240.34031677 239.61248779]
[237.20207214 254.44244385]
[229.17832947 267.30303955]
[217.23796082 276.64132690]
[202.82286072 281.32965088]
[187.67369080 280.80187988]
[173.61979675 275.12173462]
[162.35826111 264.97512817]
[155.24897766 251.58731079]
[153.15039062 236.57492065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 52]
[8 51]
[9 50]
[10 49]
[11 48]
[12 47]
[18 46]
[19 45]
[20 44]
[21 43]
[23 41]
[25 37]
[26 36]
[27 35]
[28 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
