%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGGCAGCGGCUGCGGCAGCAGCAGGUUCCAGUAGCUGGCUCGGUGCUCUUCUCGGCCACCUGCC\
) } def
/len { sequence length } bind def

/coor [
[73.08934784 325.73916626]
[59.72460556 334.17477417]
[44.32808304 330.60787964]
[36.03425980 317.15469360]
[39.76371765 301.79675293]
[53.30383301 293.64562988]
[56.68918991 279.03265381]
[60.07454681 264.41964722]
[63.45989990 249.80667114]
[66.84526062 235.19367981]
[60.73331451 218.89843750]
[72.99901581 205.37582397]
[75.71575165 190.62390137]
[78.43249512 175.87197876]
[81.14923859 161.12005615]
[83.86598206 146.36813354]
[78.56175995 132.44999695]
[88.67053223 120.27940369]
[91.38727570 105.52748108]
[89.59945679 97.36611938]
[94.57805634 90.17260742]
[97.96340942 75.55961609]
[96.84562683 66.14688110]
[101.84975433 60.36588287]
[105.89670563 45.92212296]
[109.94365692 31.47836494]
[113.99060822 17.03460693]
[108.92080688 -0.50407654]
[121.57569885 -12.45165539]
[113.47487640 -25.75633240]
[117.11627197 -40.52775192]
[129.85017395 -48.16865921]
[133.23553467 -62.78164291]
[136.62088013 -77.39463043]
[140.00624084 -92.00761414]
[137.69064331 -108.80268860]
[153.18832397 -115.67712402]
[164.08430481 -102.68812561]
[154.61923218 -88.62226105]
[151.23387146 -74.00927734]
[147.84851074 -59.39628983]
[144.46316528 -44.78330231]
[152.53985596 -32.32125473]
[149.31478882 -17.45338440]
[136.18869019 -9.06630039]
[142.37702942 1.56971192]
[139.43203735 13.93447304]
[128.43437195 21.08155823]
[124.38742065 35.52531815]
[120.34046936 49.96907806]
[116.29351807 64.41283417]
[112.57640076 78.94497681]
[109.19104004 93.55796051]
[106.13920593 108.24422455]
[103.42246246 122.99614716]
[108.53236389 137.96943665]
[98.61791229 149.08486938]
[95.90116882 163.83679199]
[93.18442535 178.58872986]
[90.46768188 193.34065247]
[87.75093842 208.09257507]
[94.48542023 219.34762573]
[91.69319153 231.74777222]
[81.45824432 238.57904053]
[78.07289124 253.19203186]
[74.68753052 267.80502319]
[71.30217743 282.41799927]
[67.91682434 297.03097534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[18 55]
[19 54]
[21 53]
[22 52]
[24 51]
[25 50]
[26 49]
[27 48]
[29 45]
[32 42]
[33 41]
[34 40]
[35 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
