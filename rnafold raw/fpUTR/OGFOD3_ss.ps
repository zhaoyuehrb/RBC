%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUGCUCGGGCCUGGCCGCCAGCCCAGGGGCCGAUGGCCGAGCGCGUCGCACUCGCGUCCCUGCGCCGUGCCUGCCUCGCGCUCCCUGUUACGGCGUUCGUCCCCGGGCCUGGCGCCCGCGUCCGGCCCGGCUCCGCGGCGGCCUGGUCCG\
) } def
/len { sequence length } bind def

/coor [
[18.69668961 623.46160889]
[11.89769745 637.40985107]
[-1.81715178 644.66815186]
[-17.17421722 642.44549561]
[-28.26839447 631.59661865]
[-30.83374596 616.29302979]
[-23.88384247 602.41937256]
[-10.09106159 595.31030273]
[-7.94248247 580.46502686]
[-5.79390335 565.61968994]
[-3.64532423 550.77435303]
[-1.49674523 535.92901611]
[0.65183389 521.08367920]
[-5.18264389 507.37939453]
[4.45158815 494.82980347]
[6.60016727 479.98449707]
[8.74874592 465.13916016]
[10.89732552 450.29385376]
[13.04590416 435.44851685]
[15.19448376 420.60317993]
[17.34306335 405.75787354]
[15.17518139 398.64361572]
[19.69118118 390.63104248]
[22.14410973 375.83294678]
[20.34832382 372.73095703]
[20.00213623 368.58975220]
[21.58414268 364.11727905]
[25.23065376 360.21112061]
[28.58991241 345.59210205]
[31.94917107 330.97308350]
[35.30842972 316.35409546]
[38.66768646 301.73507690]
[42.02694702 287.11605835]
[45.38620758 272.49707031]
[43.62045670 267.99914551]
[44.70555878 262.34136963]
[49.19515228 257.35275269]
[53.15176010 242.88398743]
[57.10837173 228.41522217]
[61.06498337 213.94645691]
[65.02159119 199.47769165]
[60.91543579 185.16026306]
[72.01884460 173.88972473]
[75.97545624 159.42095947]
[79.93206787 144.95219421]
[83.88867188 130.48342896]
[87.84528351 116.01465607]
[74.21768188 105.84429932]
[70.87100220 84.99201965]
[58.71766663 76.20017242]
[46.56433487 67.40833282]
[30.20496559 66.26679993]
[23.25803566 51.41175842]
[32.86994934 38.12480545]
[49.15279770 40.07441711]
[55.35617828 55.25500107]
[67.50950623 64.04684448]
[79.66284180 72.83868408]
[87.03514099 71.46056366]
[79.85749054 58.28933334]
[90.16607666 47.39286423]
[103.71475220 53.82973862]
[101.77973938 68.70432281]
[109.15203857 67.32620239]
[117.30870056 54.73775864]
[125.46537018 42.14932251]
[133.62203979 29.56088066]
[141.77870178 16.97244263]
[149.93536377 4.38400269]
[150.94622803 -11.40487766]
[164.36039734 -17.87860489]
[172.51705933 -30.46704483]
[180.67372131 -43.05548477]
[188.83039856 -55.64392471]
[196.98706055 -68.23236084]
[190.69433594 -83.90086365]
[194.91658020 -100.07804108]
[207.80581665 -110.46454620]
[224.17948914 -111.13748169]
[232.07597351 -123.89073944]
[232.76243591 -139.69703674]
[246.04086304 -146.44482422]
[253.93734741 -159.19807434]
[254.62382507 -175.00439453]
[267.90225220 -181.75216675]
[275.79873657 -194.50543213]
[270.73391724 -209.30006409]
[276.41201782 -223.87034607]
[290.15206909 -231.33660889]
[305.46640015 -228.17352295]
[315.12408447 -215.87460327]
[314.56500244 -200.24700928]
[304.05319214 -188.66963196]
[288.55200195 -186.60894775]
[280.65551758 -173.85568237]
[280.53384399 -158.96157837]
[266.69061279 -151.30160522]
[258.79412842 -138.54833984]
[258.67245483 -123.65423584]
[244.82922363 -115.99425507]
[236.93273926 -103.24099731]
[243.11920166 -91.37171936]
[242.61326599 -77.88798523]
[235.44035339 -66.33139038]
[223.39112854 -59.79049683]
[209.57550049 -60.07569504]
[201.41883850 -47.48725891]
[193.26216125 -34.89881897]
[185.10549927 -22.31037903]
[176.94883728 -9.72193909]
[176.52139282 5.16653109]
[162.52380371 12.54066849]
[154.36714172 25.12910843]
[146.21047974 37.71754837]
[138.05380249 50.30598831]
[129.89714050 62.89442444]
[121.74047852 75.48286438]
[125.21593475 107.93980408]
[102.31404877 119.97126770]
[98.35744476 134.44003296]
[94.40083313 148.90879822]
[90.44422150 163.37756348]
[86.48760986 177.84632874]
[90.31076050 193.19866943]
[79.49036407 203.43429565]
[75.53375244 217.90306091]
[71.57714081 232.37182617]
[67.62052917 246.84060669]
[63.66391754 261.30935669]
[60.00521469 275.85632324]
[56.64595413 290.47534180]
[53.28669739 305.09432983]
[49.92743683 319.71334839]
[46.56818008 334.33236694]
[43.20891953 348.95135498]
[39.84965897 363.57037354]
[36.94218826 378.28588867]
[34.48926163 393.08395386]
[32.18838501 407.90646362]
[30.03980637 422.75177002]
[27.89122772 437.59710693]
[25.74264908 452.44241333]
[23.59406853 467.28775024]
[21.44548988 482.13305664]
[19.29691124 496.97839355]
[24.97770882 511.74453735]
[15.49715710 523.23229980]
[13.34857750 538.07763672]
[11.19999886 552.92291260]
[9.05141926 567.76824951]
[6.90284014 582.61358643]
[4.75426102 597.45892334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 152]
[9 151]
[10 150]
[11 149]
[12 148]
[13 147]
[15 145]
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[23 138]
[24 137]
[28 136]
[29 135]
[30 134]
[31 133]
[32 132]
[33 131]
[34 130]
[37 129]
[38 128]
[39 127]
[40 126]
[41 125]
[43 123]
[44 122]
[45 121]
[46 120]
[47 119]
[49 58]
[50 57]
[51 56]
[64 117]
[65 116]
[66 115]
[67 114]
[68 113]
[69 112]
[71 110]
[72 109]
[73 108]
[74 107]
[75 106]
[79 101]
[80 100]
[82 98]
[83 97]
[85 95]
[86 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
