%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCCGCCGCCACCACCACCGCCACCGCCACCGCCGCCGCGGGACGGGCCCAAGGCCGAGCCGGAGCCGGGGCCCGGGCCCGCGUCCGCUCCCGCGCCCGGCCUGGGUUCUGAGGAAAACGCA\
) } def
/len { sequence length } bind def

/coor [
[97.25885010 483.69549561]
[96.88189697 468.70022583]
[83.24282837 462.66357422]
[73.53737640 451.25683594]
[69.73136139 436.70776367]
[72.63150787 421.88854980]
[81.71515656 409.74874878]
[95.22349548 402.72836304]
[94.84654236 387.73309326]
[86.26429749 379.10925293]
[85.89222717 366.54586792]
[94.48113251 356.82559204]
[94.48113251 341.82559204]
[83.80026245 331.50793457]
[83.58658600 316.29577637]
[94.48113251 305.16265869]
[94.48113251 290.16265869]
[94.48113251 275.16265869]
[82.34272003 266.57214355]
[77.53340912 252.31260681]
[82.09616089 237.78558350]
[94.48113251 228.62487793]
[94.48113251 213.62487793]
[94.48113251 198.62487793]
[82.10671997 187.31065369]
[81.68147278 170.21252441]
[93.95108795 157.81898499]
[93.57413483 142.82373047]
[93.19718170 127.82846069]
[80.21993256 120.72318268]
[72.51833344 108.09070587]
[72.14653015 93.30030823]
[79.20368958 80.29682922]
[91.80755615 72.54849243]
[91.43060303 57.55322647]
[83.34894562 43.95185089]
[90.76396179 31.03416061]
[82.68231201 17.43278503]
[90.09732819 4.51509380]
[89.72037506 -10.48016930]
[89.34342194 -25.47543144]
[88.96647644 -40.47069550]
[88.58952332 -55.46595764]
[88.21257019 -70.46121979]
[78.23361206 -85.87519073]
[87.08477783 -100.97305298]
[86.33111572 -115.95410919]
[85.57744598 -130.93516541]
[84.82378387 -145.91621399]
[84.07012177 -160.89727783]
[83.31645203 -175.87832642]
[82.56278992 -190.85937500]
[73.49634552 -200.13583374]
[73.23670197 -212.70204163]
[81.37480927 -221.74620056]
[80.99785614 -236.74145508]
[80.62091064 -251.73672485]
[80.05555725 -266.72607422]
[68.16622925 -277.13851929]
[67.20532227 -292.91357422]
[77.74291229 -304.69216919]
[93.52723694 -305.48623657]
[105.19374084 -294.82470703]
[105.82089233 -279.03286743]
[95.03660583 -267.47973633]
[98.55425262 -260.88378906]
[95.61617279 -252.11367798]
[95.99311829 -237.11840820]
[96.37007141 -222.12315369]
[106.33336639 -207.73490906]
[97.54384613 -191.61305237]
[98.29750824 -176.63198853]
[99.05117798 -161.65093994]
[99.80484009 -146.66987610]
[100.55850220 -131.68882751]
[101.31217194 -116.70777130]
[102.06583405 -101.72672272]
[110.86209106 -93.32127380]
[111.54975891 -80.77120972]
[103.20783234 -70.83817291]
[103.58478546 -55.84291077]
[103.96173859 -40.84764481]
[104.33868408 -25.85238266]
[104.71563721 -10.85712051]
[105.09259033 4.13814259]
[113.14728546 16.66695595]
[105.75923157 30.65720940]
[113.81391907 43.18602371]
[106.42586517 57.17627716]
[106.80281830 72.17153931]
[119.78006744 79.27681732]
[127.48166656 91.90929413]
[127.85346985 106.69969177]
[120.79631042 119.70317078]
[108.19244385 127.45150757]
[108.56939697 142.44677734]
[108.94635010 157.44203186]
[119.75591278 165.58908081]
[123.80582428 178.30012512]
[119.82001495 190.82666016]
[109.48113251 198.62487793]
[109.48113251 213.62487793]
[109.48113251 228.62487793]
[121.86611176 237.78558350]
[126.42886353 252.31260681]
[121.61955261 266.57214355]
[109.48113251 275.16265869]
[109.48113251 290.16265869]
[109.48113251 305.16265869]
[120.37568665 316.29577637]
[120.16201019 331.50793457]
[109.48113251 341.82559204]
[109.48113251 356.82559204]
[119.06958771 372.48547363]
[109.84180450 387.35614014]
[110.21875763 402.35140991]
[124.06277466 408.68423462]
[133.74490356 420.35226440]
[137.38597107 435.00708008]
[134.31576538 449.72897339]
[125.19570160 461.60894775]
[111.87715912 468.32327271]
[112.25411224 483.31854248]
[114.92820740 502.51486206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 123]
[2 122]
[8 116]
[9 115]
[12 113]
[13 112]
[16 109]
[17 108]
[18 107]
[22 103]
[23 102]
[24 101]
[27 97]
[28 96]
[29 95]
[34 90]
[35 89]
[37 87]
[39 85]
[40 84]
[41 83]
[42 82]
[43 81]
[44 80]
[46 77]
[47 76]
[48 75]
[49 74]
[50 73]
[51 72]
[52 71]
[55 69]
[56 68]
[57 67]
[58 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
