%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAAGUUGGAGCCGACUCAGCGGCGGCCGCCAUUUUGUGCAGUCGCUGGGAAGGAAGGAGACGCCUAAACCGCGGCACUGCCCGGUUUGAGCGUAGCCAAAC\
) } def
/len { sequence length } bind def

/coor [
[118.48232269 184.36277771]
[105.68210602 192.18292236]
[91.06471252 195.54917908]
[76.13339233 194.11538696]
[62.42370224 188.02897644]
[51.34555054 177.91589355]
[44.03821945 164.81616211]
[41.25320435 150.07696533]
[43.27691269 135.21411133]
[49.90122604 121.75608826]
[60.44490051 111.08692932]
[73.82361603 104.30385590]
[88.66084290 102.10444641]
[75.37899780 95.13359833]
[60.45815659 99.60642242]
[47.08778381 92.34778595]
[42.91558075 78.09547424]
[29.63374138 71.12463379]
[16.35190010 64.15378571]
[3.07005978 57.18293381]
[-10.21178055 50.21208954]
[-23.49362183 43.24124146]
[-36.77546310 36.27039337]
[-50.05730057 29.29954529]
[-63.33914185 22.32869720]
[-79.15428925 22.76647758]
[-86.82802582 10.00077915]
[-100.10987091 3.02993178]
[-113.49547577 -3.73952198]
[-126.98179626 -10.30603790]
[-141.83795166 -4.91435957]
[-156.11975098 -11.68234921]
[-161.35406494 -26.59467888]
[-154.43545532 -40.80412674]
[-139.46861267 -45.88048172]
[-125.33311462 -38.81203079]
[-120.41528320 -23.79235840]
[-106.92896271 -17.22584343]
[-99.41210938 -17.12599754]
[-93.13902283 -10.25190830]
[-79.85717773 -3.28106117]
[-64.99203491 -4.21744204]
[-56.36829376 9.04685688]
[-43.08645248 16.01770401]
[-29.80461311 22.98855209]
[-16.52277374 29.95940018]
[-3.24093318 36.93024826]
[10.04090691 43.90109634]
[23.32274818 50.87194061]
[36.60458755 57.84278870]
[49.88642883 64.81363678]
[63.98593140 60.15106201]
[77.55490875 67.03128815]
[82.34984589 81.85175323]
[95.63169098 88.82260132]
[100.99678040 87.69665527]
[106.45993042 89.08121490]
[110.87625885 92.82522583]
[125.86941528 93.27826691]
[137.32650757 82.72493744]
[152.52525330 83.39797211]
[162.51562500 94.38559723]
[177.50878906 94.83864594]
[192.50193787 95.29168701]
[207.49510193 95.74473572]
[221.52267456 88.42777252]
[234.01043701 96.54594421]
[249.00360107 96.99899292]
[263.99676514 97.45203400]
[278.98992920 97.90508270]
[293.98306274 98.35812378]
[308.97622681 98.81117249]
[323.96939087 99.26422119]
[332.81027222 96.35845947]
[339.40661621 99.96417999]
[354.37924194 100.86985779]
[369.35189819 101.77553558]
[385.52719116 96.69657135]
[394.88543701 110.83374023]
[383.89138794 123.73982239]
[368.44619751 116.74816895]
[353.47357178 115.84249115]
[338.50094604 114.93681335]
[323.51632690 114.25737762]
[308.52319336 113.80432892]
[293.53002930 113.35128021]
[278.53686523 112.89823914]
[263.54370117 112.44519043]
[248.55055237 111.99214935]
[233.55740356 111.53910065]
[220.60224915 118.88847351]
[207.04205322 110.73789215]
[192.04890442 110.28485107]
[177.05574036 109.83180237]
[162.06259155 109.37875366]
[151.42701721 119.74313354]
[136.21536255 119.49726105]
[125.41637421 108.27142334]
[110.42321777 107.81838226]
[122.26664734 117.02343750]
[130.58734131 129.50407410]
[134.52957153 143.97676086]
[133.68792725 158.95312500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 55]
[14 54]
[17 51]
[18 50]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[27 41]
[28 40]
[29 38]
[30 37]
[58 99]
[59 98]
[62 95]
[63 94]
[64 93]
[65 92]
[67 90]
[68 89]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
[75 83]
[76 82]
[77 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
