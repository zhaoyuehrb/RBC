%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGCUUAGCACUGCAGGGCUCUGCGCGGGAACGCUAACCUGGUCCGGAGCGAGUCUGGGUCUCAGCCCCGCGAACAGCCUUUCACGAGUCUUCAAGCUUUCAGGCUAUCUUCUAGUCAAG\
) } def
/len { sequence length } bind def

/coor [
[232.37382507 426.60534668]
[228.61402893 412.08419800]
[224.85424805 397.56304932]
[221.09445190 383.04187012]
[217.33467102 368.52072144]
[213.57487488 353.99957275]
[209.81509399 339.47842407]
[206.05529785 324.95724487]
[202.29551697 310.43609619]
[197.98672485 296.06826782]
[193.13516235 281.87454224]
[188.28358459 267.68078613]
[182.36824036 253.89642334]
[175.42329407 240.60102844]
[168.47834778 227.30561829]
[149.58023071 222.99940491]
[139.63424683 206.01422119]
[145.29620361 186.84968567]
[137.36174011 174.12002563]
[129.42727661 161.39036560]
[121.49282074 148.66069031]
[113.55835724 135.93103027]
[105.62389374 123.20137024]
[90.97217560 122.10045624]
[79.74011230 112.62808228]
[76.18231201 98.37231445]
[81.64643860 84.73309326]
[73.71197510 72.00342560]
[65.77751923 59.27376556]
[57.84305954 46.54410172]
[49.90859985 33.81443787]
[41.97413635 21.08477402]
[37.15766144 18.53313446]
[34.17414093 14.73283768]
[33.19085693 10.62471294]
[33.96332169 7.07332897]
[27.01837158 -6.22207165]
[20.07342148 -19.51747131]
[2.59553885 -29.40871811]
[3.96361613 -48.62900543]
[-3.64582062 -61.55558777]
[-11.25525761 -74.48217010]
[-18.86469460 -87.40874481]
[-26.47413063 -100.33532715]
[-34.08356857 -113.26190948]
[-47.75212479 -121.22940826]
[-47.54082870 -136.12251282]
[-55.31340027 -148.95166016]
[-63.24785995 -161.68133545]
[-76.75738525 -171.92481995]
[-70.65402222 -187.74206543]
[-53.76533508 -186.25587463]
[-50.51819611 -169.61578369]
[-42.58373642 -156.88612366]
[-36.30398941 -152.82777405]
[-34.61425018 -143.73194885]
[-21.48996925 -136.68904114]
[-21.15698814 -120.87134552]
[-13.54755116 -107.94476318]
[-5.93811464 -95.01818085]
[1.67132246 -82.09160614]
[9.28075886 -69.16502380]
[16.89019585 -56.23844528]
[27.10677147 -54.53536987]
[34.81805420 -47.29367447]
[37.25904465 -36.77357483]
[33.36882019 -26.46242142]
[40.31377029 -13.16702175]
[47.25872040 0.12837914]
[54.70380020 13.15031338]
[62.63826370 25.87997818]
[70.57272339 38.60964203]
[78.50717926 51.33930588]
[86.44164276 64.06896973]
[94.37610626 76.79862976]
[109.02782440 77.89954376]
[120.25988770 87.37191772]
[123.81768799 101.62768555]
[118.35356140 115.26690674]
[126.28802490 127.99657440]
[134.22248840 140.72624207]
[142.15693665 153.45590210]
[150.09140015 166.18556213]
[158.02586365 178.91522217]
[168.89065552 178.66394043]
[178.77993774 182.97048950]
[185.88874817 190.97422791]
[188.95109558 201.14680481]
[187.46507263 211.58366394]
[181.77374268 220.36067200]
[188.71870422 233.65606689]
[195.66365051 246.95147705]
[201.87297058 233.29701233]
[215.83502197 227.81420898]
[229.67639160 233.59489441]
[235.59173584 247.37927246]
[230.24528503 261.39410400]
[216.65199280 267.73623657]
[202.47732544 262.82922363]
[207.32890320 277.02294922]
[212.18046570 291.21670532]
[216.29548645 294.79104614]
[218.34272766 299.16738892]
[218.37191772 303.39144897]
[216.81666565 306.67630005]
[220.57646179 321.19747925]
[224.33624268 335.71862793]
[228.09603882 350.23977661]
[231.85581970 364.76092529]
[235.61561584 379.28210449]
[239.37539673 393.80325317]
[243.13519287 408.32440186]
[246.89497375 422.84555054]
[261.81195068 426.27224731]
[273.42025757 436.24752808]
[279.05239868 450.47909546]
[277.41412354 465.69665527]
[268.88192749 478.40335083]
[255.41642761 485.67926025]
[240.11190796 485.85244751]
[226.48521423 478.88308716]
[217.66769409 466.37268066]
[215.68551636 451.19607544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[4 110]
[5 109]
[6 108]
[7 107]
[8 106]
[9 105]
[10 101]
[11 100]
[12 99]
[13 92]
[14 91]
[15 90]
[18 84]
[19 83]
[20 82]
[21 81]
[22 80]
[23 79]
[27 75]
[28 74]
[29 73]
[30 72]
[31 71]
[32 70]
[36 69]
[37 68]
[38 67]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[47 56]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
