%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAAGCCGCGGUGUACUCCAGCGGCCCCCUGUGGCCUCUCCAUCCGCGGCGGAUCUCAGAGGUGUGGACAAGCAGCCUACUAGGGCUAGAG\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 169.59339905]
[92.50000000 154.59339905]
[92.50000000 139.59339905]
[83.46794128 136.75021362]
[75.34869385 131.87789917]
[68.59054565 125.24546814]
[55.35427094 132.30244446]
[42.11799240 139.35943604]
[28.88171768 146.41641235]
[15.64544106 153.47338867]
[2.53024220 160.75292969]
[-10.46013927 168.25292969]
[-14.30798244 183.58164978]
[-27.91058731 191.62805176]
[-43.19776917 187.61836243]
[-51.09991455 173.93144226]
[-46.92881775 158.68751526]
[-33.15912247 150.93051147]
[-17.96013832 155.26254272]
[-4.96975803 147.76254272]
[-0.66315734 141.56452942]
[8.58845901 140.23712158]
[21.82473564 133.18013000]
[35.06101227 126.12315369]
[48.29728699 119.06616974]
[61.53356171 112.00919342]
[61.55627823 87.91829681]
[75.31864929 68.14535522]
[97.90204620 59.75716019]
[99.92272186 44.89389038]
[90.85454559 36.83195496]
[86.93764496 25.47598267]
[89.06410980 13.77635670]
[96.57192993 4.71168900]
[107.44460297 0.53052658]
[110.46408081 -14.16242218]
[113.48355865 -28.85537148]
[116.50303650 -43.54832077]
[119.52251434 -58.24126816]
[122.54199219 -72.93421936]
[112.65850830 -87.24734497]
[116.01704407 -103.97240448]
[130.09608459 -112.99855804]
[132.61759949 -127.78511047]
[135.13909912 -142.57165527]
[137.66061401 -157.35820007]
[140.18212891 -172.14474487]
[136.88439941 -188.77488708]
[151.95172119 -196.54740906]
[163.59155273 -184.22058105]
[154.96867371 -169.62322998]
[152.44715881 -154.83668518]
[149.92565918 -140.05014038]
[147.40414429 -125.26359558]
[144.88262939 -110.47705078]
[153.79129028 -101.00309753]
[155.57933044 -87.92428589]
[149.35868835 -76.05984497]
[137.23493958 -69.91474152]
[134.21546936 -55.22179031]
[131.19598389 -40.52884293]
[128.17651367 -25.83589363]
[125.15702820 -11.14294434]
[122.13755035 3.55000448]
[133.13194275 17.99513435]
[130.23320007 36.23308945]
[114.78599548 46.91456223]
[112.76531982 61.77783203]
[122.33094788 66.45575714]
[130.33737183 73.47583008]
[136.22555542 82.34789276]
[139.58436584 92.45246887]
[140.17930603 103.08403778]
[137.96881104 113.50026703]
[133.10722351 122.97386932]
[143.62388611 133.66966248]
[154.14053345 144.36546326]
[164.65718079 155.06126404]
[175.17382812 165.75706482]
[191.11363220 169.61126709]
[195.48550415 185.41691589]
[183.79203796 196.91452026]
[168.06246948 192.27633667]
[164.47802734 176.27371216]
[153.96138000 165.57791138]
[143.44473267 154.88211060]
[132.92808533 144.18632507]
[122.41143036 133.49052429]
[115.26383972 137.29481506]
[107.50000000 139.59339905]
[107.50000000 154.59339905]
[107.50000000 169.59339905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[11 20]
[12 19]
[29 68]
[30 67]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
