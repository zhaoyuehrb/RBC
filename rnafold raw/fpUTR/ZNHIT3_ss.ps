%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGCGUGCACGCGGGCGCGGCUGCGUGAGAGGCGCGCGGCGGCGCAGUAAACAGUCUCCUUCCACAAAACC\
) } def
/len { sequence length } bind def

/coor [
[153.77778625 223.32101440]
[147.02473450 209.92712402]
[140.27168274 196.53323364]
[133.51863098 183.13934326]
[126.76557159 169.74546814]
[112.58328247 165.34111023]
[105.54392242 151.85400391]
[110.25977325 137.00817871]
[103.50672150 123.61428833]
[89.01417542 121.19535828]
[78.68296814 110.74782562]
[76.42645264 96.22910309]
[83.09939575 83.13877106]
[76.34633636 69.74488068]
[64.19649506 64.86223602]
[58.91703033 53.32334137]
[62.90415192 41.70394897]
[56.72563171 28.03552055]
[50.54711533 14.36709309]
[44.36859512 0.69866562]
[31.63383865 -8.68944073]
[33.44190598 -23.47389793]
[27.26338959 -37.14232635]
[21.08486938 -50.81075287]
[14.90635109 -64.47917938]
[8.72783279 -78.14760590]
[2.54931402 -91.81603241]
[-3.62920475 -105.48445892]
[-9.80772305 -119.15288544]
[-24.24942207 -126.13980103]
[-27.65040970 -141.81822205]
[-17.40174294 -154.16101074]
[-1.36531949 -153.69982910]
[8.15708828 -140.78846741]
[3.86070395 -125.33140564]
[10.03922272 -111.66297913]
[16.21774101 -97.99455261]
[22.39625931 -84.32612610]
[28.57477951 -70.65769958]
[34.75329590 -56.98926926]
[40.93181610 -43.32084274]
[47.11033630 -29.65241623]
[59.40316391 -21.24196625]
[58.03702164 -5.47985315]
[64.21553802 8.18857384]
[70.39405823 21.85700226]
[76.57257843 35.52542877]
[91.32439423 44.78781891]
[89.74022675 62.99182510]
[96.49327850 76.38571167]
[110.98582458 78.80464172]
[121.31703186 89.25217438]
[123.57354736 103.77089691]
[116.90060425 116.86122894]
[123.65366364 130.25511169]
[138.39385986 135.29141235]
[145.05162048 148.97091675]
[140.15945435 162.99240112]
[146.91250610 176.38629150]
[153.66557312 189.78018188]
[160.41862488 203.17407227]
[167.17167664 216.56796265]
[182.43124390 216.23875427]
[196.31892395 222.57084656]
[206.07728577 234.30699158]
[209.76881409 249.11697388]
[206.66055298 264.06024170]
[197.36964417 276.16983032]
[183.74081421 283.04132080]
[168.48007202 283.31045532]
[154.61744690 276.92370605]
[144.90536499 265.14923096]
[141.27218628 250.32482910]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[4 59]
[5 58]
[8 55]
[9 54]
[13 50]
[14 49]
[17 47]
[18 46]
[19 45]
[20 44]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
