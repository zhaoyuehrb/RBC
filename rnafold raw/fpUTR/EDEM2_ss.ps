%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUGGCGCGGAUUCCCGGAAGAACCCGCAGCAGCUCCCAGGAUGAACUGGUUGCAGUGGCUGCUGCUGCUGCGGGGGCGCUGAGAGGACACGAGCUCU\
) } def
/len { sequence length } bind def

/coor [
[136.81779480 193.39965820]
[136.81372070 186.49899292]
[130.06628418 173.10227966]
[123.31886292 159.70555115]
[116.57144165 146.30882263]
[109.82401276 132.91209412]
[97.18862915 125.02563477]
[97.89122009 109.22003937]
[95.45716095 114.08120728]
[92.17256927 118.54977417]
[80.40365601 127.84992218]
[68.63473511 137.15007019]
[63.08177948 152.58044434]
[46.89644623 155.21994019]
[36.72881699 142.35327148]
[43.03848267 127.21654510]
[59.33459473 125.38114929]
[71.10350800 116.08100891]
[82.87242126 106.78086090]
[68.04547119 109.05277252]
[55.52264786 100.79573059]
[51.76950836 86.27285004]
[58.72380829 72.98233795]
[72.79502869 67.78610992]
[86.71816254 73.36699677]
[93.30485535 86.84560394]
[94.23739624 71.87462616]
[95.16994476 56.90363693]
[96.10248566 41.93265533]
[97.03503418 26.96166992]
[97.96757507 11.99068642]
[98.90012360 -2.98029709]
[99.83266449 -17.95128059]
[100.76521301 -32.92226410]
[101.69775391 -47.89324951]
[102.63029480 -62.86423111]
[88.20587158 -70.18557739]
[80.58713531 -87.45085144]
[86.14823151 -108.30915833]
[81.55737305 -122.58935547]
[76.96651459 -136.86955261]
[72.37565613 -151.14974976]
[58.20360184 -158.14465332]
[53.20778275 -173.13854980]
[60.35212326 -187.23585510]
[75.39801025 -192.07287598]
[89.41899109 -184.77989197]
[94.09666443 -169.68370056]
[86.65584564 -155.74061584]
[91.24671173 -141.46041870]
[95.83757019 -127.18021393]
[100.42842865 -112.90001678]
[107.85507202 -111.85365295]
[122.70837402 -109.76092529]
[130.13502502 -108.71456146]
[138.49281311 -121.17037964]
[146.85058594 -133.62620544]
[155.20837402 -146.08201599]
[159.01290894 -162.60357666]
[175.94198608 -163.52134705]
[181.51034546 -147.50791931]
[167.66419983 -137.72422791]
[159.30641174 -125.26841736]
[150.94862366 -112.81259918]
[142.59083557 -100.35677338]
[138.09658813 -72.26308441]
[117.60128021 -61.93169022]
[116.66873932 -46.96070480]
[115.73619080 -31.98972130]
[114.80364990 -17.01873589]
[113.87110138 -2.04775262]
[112.93856049 12.92323112]
[112.00601196 27.89421463]
[111.07347107 42.86520004]
[110.14092255 57.83618164]
[109.20838165 72.80716705]
[108.27583313 87.77815247]
[111.28794098 102.47261047]
[124.40595245 111.31729889]
[123.22074127 126.16467285]
[129.96817017 139.56140137]
[136.71559143 152.95812988]
[143.46301270 166.35484314]
[150.21044922 179.75157166]
[157.37124634 192.93197632]
[164.93847656 205.88330078]
[172.50572205 218.83462524]
[180.07296753 231.78594971]
[195.52604675 233.19384766]
[207.17810059 243.44125366]
[210.54867554 258.58782959]
[204.34172058 272.80941772]
[190.94393921 280.63751221]
[175.50704956 279.06207275]
[163.96685791 268.68884277]
[160.76078796 253.50660706]
[167.12164307 239.35319519]
[159.55439758 226.40187073]
[151.98715210 213.45054626]
[144.41992188 200.49922180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 84]
[3 83]
[4 82]
[5 81]
[6 80]
[8 78]
[10 19]
[11 18]
[12 17]
[26 77]
[27 76]
[28 75]
[29 74]
[30 73]
[31 72]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[39 52]
[40 51]
[41 50]
[42 49]
[55 65]
[56 64]
[57 63]
[58 62]
[85 100]
[86 99]
[87 98]
[88 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
