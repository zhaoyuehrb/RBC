%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGAACUCACACUUCUUCCUGGCAAAGAAGUGCCCAGGACGGGAGCUGGGGAGCCAGGGCUGAUCUAGGAGGCUGGGAGCCAGGUGACAGG\
) } def
/len { sequence length } bind def

/coor [
[93.96288300 234.80204773]
[78.77807617 233.25790405]
[65.77150726 225.27091980]
[57.52564621 212.42692566]
[55.67770386 197.27607727]
[60.59459686 182.82662964]
[71.30007172 171.94749451]
[85.66855621 166.79875183]
[87.18608093 151.87570190]
[88.70360565 136.95266724]
[90.22113037 122.02962494]
[71.70688629 99.68718719]
[87.47901917 70.02263641]
[73.79652405 63.87533569]
[60.11402893 57.72803116]
[46.43153763 51.58072662]
[32.74904251 45.43342209]
[18.96467590 39.51808167]
[5.08236742 33.83639908]
[-8.79994106 28.15471649]
[-22.68224907 22.47303391]
[-36.56455612 16.79134941]
[-50.44686508 11.10966682]
[-64.42315674 5.66325855]
[-78.48943329 0.45367977]
[-92.74391174 7.27902603]
[-107.62162781 1.94711161]
[-114.29588318 -12.37873363]
[-108.80696869 -27.19923973]
[-94.41136169 -33.72166061]
[-79.64971924 -28.07636452]
[-73.27985382 -13.61260223]
[-59.21357346 -8.40302372]
[-51.69365692 -9.04565239]
[-44.76518250 -2.77264142]
[-30.88287354 2.90904188]
[-17.00056458 8.59072495]
[-3.11825728 14.27240849]
[10.76405048 19.95409203]
[24.64635849 25.63577461]
[32.18368912 25.24749184]
[38.89634705 31.75092697]
[52.57884216 37.89823151]
[66.26133728 44.04553604]
[79.94383240 50.19284058]
[93.62631989 56.34014511]
[107.60261536 50.89373779]
[113.51795197 37.10937119]
[119.43328857 23.32500458]
[125.34862518 9.54063702]
[122.87798309 -6.67133284]
[135.84994507 -16.70429230]
[150.92007446 -10.23719215]
[152.58551025 6.07716894]
[139.13299561 15.45597458]
[133.21765137 29.24034119]
[127.30231476 43.02470779]
[121.38697815 56.80907440]
[129.32144165 69.53874207]
[144.30218506 70.29847717]
[159.28292847 71.05821228]
[174.26368713 71.81795502]
[180.62187195 69.01397705]
[186.50575256 69.87226868]
[190.21983337 73.16868591]
[205.11511230 74.93803406]
[220.01040649 76.70738983]
[234.90568542 78.47673798]
[249.80096436 80.24608612]
[264.64950562 73.28527832]
[277.94543457 82.88476562]
[276.01104736 99.16942596]
[260.83627319 105.38699341]
[248.03161621 95.14137268]
[233.13632202 93.37201691]
[218.24104309 91.60266876]
[203.34576416 89.83332062]
[188.45048523 88.06396484]
[173.50395203 86.79869843]
[158.52319336 86.03896332]
[143.54244995 85.27922821]
[128.56170654 84.51948547]
[129.47596741 103.57760620]
[119.89463043 118.10176086]
[105.14416504 123.54714966]
[103.62664032 138.47018433]
[102.10911560 153.39323425]
[100.59159088 168.31626892]
[113.62951660 176.25196838]
[121.92589569 189.06340027]
[123.83348846 204.20684814]
[118.97353363 218.67555237]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 88]
[9 87]
[10 86]
[11 85]
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[24 33]
[25 32]
[47 58]
[48 57]
[49 56]
[50 55]
[59 82]
[60 81]
[61 80]
[62 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
