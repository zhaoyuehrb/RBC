%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCCGCCGCCGCCGCUGCUGCAGCAGCAGCUGCUCUGCAGAGUGGUGGCCGGGGCCAGGGCCGGGGUGCCCUCCCUCCCACCUUCUCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[144.26808167 150.43685913]
[138.23223877 143.26875305]
[134.94863892 134.44490051]
[134.82902527 124.98648071]
[121.29916382 118.51016235]
[107.76929474 112.03385162]
[93.81557465 112.92007446]
[85.75439453 101.49601746]
[69.96614838 102.51671600]
[61.82686996 90.04267883]
[48.29700089 83.56636810]
[34.76713562 77.09004974]
[21.23726463 70.61373138]
[7.70739698 64.13742065]
[-5.82247162 57.66110611]
[-19.35234070 51.18478775]
[-32.88220978 44.70847321]
[-46.41207504 38.23215866]
[-55.70467377 37.30883026]
[-60.27681732 31.31150055]
[-73.58515930 24.39138222]
[-86.89350128 17.47126579]
[-100.20184326 10.55114746]
[-113.51018524 3.63103032]
[-126.81852722 -3.28908706]
[-136.07551575 -4.51915407]
[-140.44686890 -10.66437626]
[-153.51913452 -18.02072906]
[-166.59140015 -25.37708092]
[-182.97465515 -24.65536118]
[-191.56196594 -38.62640762]
[-183.51943970 -52.91800690]
[-167.12054443 -52.82818604]
[-159.23504639 -38.44934464]
[-146.16278076 -31.09299278]
[-133.09051514 -23.73664093]
[-119.89841461 -16.59742928]
[-106.59007263 -9.67731190]
[-93.28173065 -2.75719452]
[-79.97338867 4.16292286]
[-66.66504669 11.08304024]
[-53.35670090 18.00315857]
[-39.93576050 24.70228958]
[-26.40589333 31.17860603]
[-12.87602425 37.65492249]
[0.65384388 44.13123703]
[14.18371201 50.60755157]
[27.71358109 57.08386612]
[41.24345016 63.56018066]
[54.77331924 70.03649902]
[68.30318451 76.51280975]
[83.12368774 75.02889252]
[92.23070526 87.96614838]
[106.18442535 87.07992554]
[114.24560547 98.50398254]
[127.77547455 104.98029327]
[141.30534363 111.45661163]
[160.92750549 102.38841248]
[180.80455017 110.17042542]
[188.84779358 129.65127563]
[203.25909424 133.81231689]
[217.67039490 137.97335815]
[231.38876343 130.59474182]
[245.94461060 135.01992798]
[252.89445496 148.14376831]
[267.30575562 152.30480957]
[281.71707153 156.46585083]
[296.12835693 160.62689209]
[310.53967285 164.78794861]
[324.95098877 168.94898987]
[335.96304321 158.24244690]
[350.85696411 154.49189758]
[365.62637329 158.70622253]
[376.29833984 169.75178528]
[380.00216675 184.65739441]
[375.74157715 199.41351318]
[364.66259766 210.05081177]
[349.74545288 213.70791626]
[335.00277710 209.40107727]
[324.40026855 198.28881836]
[320.78994751 183.36029053]
[306.37863159 179.19924927]
[291.96731567 175.03820801]
[277.55603027 170.87716675]
[263.14471436 166.71611023]
[248.73341370 162.55506897]
[235.85775757 169.95460510]
[221.18336487 165.94001770]
[213.50935364 152.38467407]
[199.09805298 148.22361755]
[184.68673706 144.06257629]
[178.62794495 150.91932678]
[170.57467651 155.35542297]
[161.45410156 156.82620239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 57]
[5 56]
[6 55]
[8 53]
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[27 36]
[28 35]
[29 34]
[60 91]
[61 90]
[62 89]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
