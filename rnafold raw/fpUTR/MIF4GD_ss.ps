%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGGGCCCCGCAGCGCCGGACGCUGGUUGCGCGCUCCCAGGCGCCGAGCGGCCCCGGGCACGCGCGCGCGCCACCGGCCCGGCAGGUGCUGUCCUUAUUCCCAGCCCAGUCAAGAGCUACCGGGGCUGGCUAGUC\
) } def
/len { sequence length } bind def

/coor [
[98.44219971 333.23730469]
[109.01643372 321.49160767]
[107.99279785 306.52658081]
[106.96916199 291.56155396]
[98.38136292 279.39196777]
[105.15886688 265.09594727]
[104.13523102 250.13092041]
[103.11159515 235.16589355]
[102.08795929 220.20086670]
[101.06432343 205.23582458]
[100.04068756 190.27079773]
[99.01704407 175.30577087]
[88.44515991 161.34463501]
[96.56529236 144.86199951]
[95.20126343 129.92414856]
[93.83724213 114.98629761]
[87.24122620 101.51438141]
[76.27868652 91.27608490]
[65.31614685 81.03778839]
[54.35360336 70.79949188]
[43.39106369 60.56119537]
[36.91297531 58.66072083]
[33.01064682 54.38084030]
[32.17607880 49.59865570]
[21.69089127 38.87201309]
[11.20570374 28.14537048]
[0.72051704 17.41872787]
[-9.76466942 6.69208479]
[-20.24985695 -4.03455782]
[-31.21239662 -14.27285480]
[-42.62956619 -24.00158691]
[-54.04673767 -33.73031616]
[-65.46390533 -43.45904922]
[-76.88108063 -53.18778229]
[-88.29824829 -62.91651154]
[-99.71542358 -72.64524078]
[-119.64030457 -75.30458832]
[-125.50612640 -93.67662048]
[-137.35426331 -102.87562561]
[-149.20240784 -112.07462311]
[-164.84785461 -114.42630768]
[-170.15579224 -128.34301758]
[-182.00392151 -137.54202271]
[-190.78269958 -140.36863708]
[-194.01391602 -147.08775330]
[-205.64958191 -156.55407715]
[-217.28524780 -166.02040100]
[-233.55366516 -168.08700562]
[-239.64775085 -183.31179810]
[-229.29844666 -196.03280640]
[-213.15222168 -193.16374207]
[-207.81892395 -177.65606689]
[-196.18325806 -168.18974304]
[-184.54759216 -158.72343445]
[-172.80493164 -149.39016724]
[-160.95678711 -140.19116211]
[-146.15879822 -138.49745178]
[-140.00340271 -123.92276001]
[-128.15525818 -114.72376251]
[-116.30712128 -105.52475739]
[-106.21897888 -107.71562195]
[-96.40198517 -103.86831665]
[-90.23562622 -95.04488373]
[-89.98668671 -84.06241608]
[-78.56951904 -74.33367920]
[-67.15234375 -64.60494995]
[-55.73517609 -54.87622070]
[-44.31800461 -45.14748764]
[-32.90083694 -35.41875839]
[-21.48366356 -25.69002533]
[-18.60173607 -25.83179092]
[-15.48900223 -24.79031754]
[-12.61506748 -22.47125053]
[-10.47482777 -18.95893669]
[-9.52321434 -14.51974487]
[0.96197283 -3.79310203]
[11.44715977 6.93354034]
[21.93234634 17.66018295]
[32.41753387 28.38682556]
[42.90272141 39.11346817]
[53.62936401 49.59865570]
[64.59190369 59.83695221]
[75.55444336 70.07524872]
[86.51698303 80.31354523]
[97.47952271 90.55184174]
[104.39736938 82.44934845]
[118.03328705 80.70831299]
[132.56542969 76.99119568]
[140.18182373 71.79052734]
[147.47068787 73.35888672]
[162.08367920 69.97352600]
[176.69667053 66.58817291]
[191.30964661 63.20281601]
[195.71220398 48.48843002]
[206.89311218 37.95835114]
[221.84480286 34.44511032]
[236.54531860 38.89376068]
[247.04029846 50.10763168]
[250.50665283 65.07025146]
[246.01194763 79.75674438]
[234.76522827 90.21652985]
[219.79182434 93.63596344]
[205.11947632 89.09524536]
[194.69500732 77.81580353]
[180.08201599 81.20115662]
[165.46903992 84.58651733]
[150.85604858 87.97187042]
[136.28254700 91.52333832]
[121.75040436 95.24045563]
[136.44776917 92.24257660]
[150.29011536 98.02095795]
[158.49388123 110.57875061]
[158.22409058 125.57632446]
[149.57397461 137.83093262]
[135.53276062 143.10771179]
[120.95272827 139.58317566]
[110.87231445 128.47528076]
[108.77509308 113.62227631]
[110.13912201 128.56013489]
[111.50314331 143.49798584]
[120.93051147 152.38281250]
[121.71559906 164.91061401]
[113.98207855 174.28213501]
[115.00571442 189.24716187]
[116.02935028 204.21218872]
[117.05298615 219.17723083]
[118.07662201 234.14225769]
[119.10025787 249.10728455]
[120.12389374 264.07232666]
[128.78491211 277.31231689]
[121.93419647 290.53793335]
[122.95783234 305.50296021]
[123.98146820 320.46798706]
[136.05657959 330.66439819]
[137.30174255 346.41958618]
[126.97822571 358.38619995]
[111.21078491 359.46472168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 133]
[3 132]
[4 131]
[6 129]
[7 128]
[8 127]
[9 126]
[10 125]
[11 124]
[12 123]
[14 120]
[15 119]
[16 118]
[17 85]
[18 84]
[19 83]
[20 82]
[21 81]
[24 80]
[25 79]
[26 78]
[27 77]
[28 76]
[29 75]
[30 70]
[31 69]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[38 60]
[39 59]
[40 58]
[42 56]
[43 55]
[45 54]
[46 53]
[47 52]
[87 109]
[88 108]
[90 107]
[91 106]
[92 105]
[93 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
