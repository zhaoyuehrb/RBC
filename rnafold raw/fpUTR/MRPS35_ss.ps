%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUAGCGGCCCCAGGCCCGCCCCUGACACUGAACGCCGCUUGUCCCCUCCGGCUUGCCGUCCUCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[94.97890472 143.01921082]
[77.53128052 137.02729797]
[64.15997314 124.31782532]
[57.29082870 107.19657898]
[58.17005157 88.76970673]
[44.57543182 82.43043518]
[30.98081779 76.09116364]
[17.38619995 69.75188446]
[3.79158330 63.41261292]
[-9.80303383 57.07333755]
[-25.95568848 63.38304520]
[-41.43645477 56.33959961]
[-47.06621552 40.64449692]
[-60.92441177 34.90424347]
[-74.78260040 29.16399384]
[-85.50651550 39.93739319]
[-99.53884125 45.78223801]
[-114.73976135 45.80723572]
[-128.79122925 40.00856781]
[-139.55052185 29.27049255]
[-145.37689209 15.23048878]
[-145.38189697 0.02955431]
[-139.56474304 -14.01427841]
[-128.81253052 -24.75942802]
[-114.76487732 -30.56733513]
[-99.56394958 -30.55233955]
[-85.52777863 -24.71672249]
[-74.79678345 -13.95037937]
[-69.00735474 0.10490512]
[-69.04235077 15.30580044]
[-55.18415833 21.04605103]
[-41.32596588 26.78630257]
[-30.05012131 20.18411827]
[-16.84279251 21.39823914]
[-6.66223860 30.20252228]
[-3.46375966 43.47872162]
[10.13085747 49.81799698]
[23.72547340 56.15726852]
[37.32009125 62.49654388]
[50.91470718 68.83581543]
[64.50932312 75.17509460]
[72.54340363 66.50373840]
[82.62281799 60.32762146]
[93.99670410 57.10682297]
[105.81779480 57.08127213]
[117.20550537 60.25286484]
[127.31152344 66.38534546]
[135.38301086 75.02188873]
[140.81872559 85.51911926]
[143.21371460 97.09508514]
[142.38958740 108.88744354]
[138.40773010 120.01774597]
[150.30802917 129.14916992]
[162.20832825 138.28059387]
[174.10862732 147.41201782]
[183.11984253 150.28279114]
[186.31729126 157.21049500]
[197.80795288 166.85231018]
[213.17552185 163.95887756]
[226.78222656 171.66546631]
[232.20339966 186.33329773]
[226.87931824 201.03663635]
[213.32386780 208.83303833]
[197.93751526 206.04125977]
[187.98521423 193.97950745]
[188.16615295 178.34297180]
[176.67547607 168.70115662]
[164.97721863 159.31231689]
[153.07690430 150.18089294]
[141.17660522 141.04946899]
[129.27630615 131.91804504]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[13 32]
[14 31]
[15 30]
[52 71]
[53 70]
[54 69]
[55 68]
[57 67]
[58 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
