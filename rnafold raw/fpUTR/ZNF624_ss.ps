%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCCGGCACCGCCGAGCCGCCGCCAUUGCUGGAAGCGUUCCCGCCCUGCUCUGCGAGUUCCCUCAGUUGUCCUCAGUUCGGCCGCCAGGU\
) } def
/len { sequence length } bind def

/coor [
[73.44770050 414.12188721]
[57.13269043 412.46279907]
[50.65971375 397.39520264]
[60.68761444 384.41934204]
[62.20513916 369.49630737]
[63.72266388 354.57324219]
[64.98793030 339.62670898]
[66.00057220 324.66094971]
[67.01322174 309.69515991]
[59.46996689 302.43432617]
[57.23237991 291.97891235]
[61.30888748 281.85446167]
[70.53511810 275.61755371]
[72.55578613 260.75430298]
[74.57646179 245.89102173]
[76.59713745 231.02774048]
[78.61780548 216.16447449]
[80.63848114 201.30119324]
[82.65914917 186.43792725]
[69.69975281 176.94651794]
[63.20360565 162.15344238]
[65.00514984 146.00386047]
[74.71215057 132.85603333]
[89.78634644 126.30516815]
[91.30387115 111.38212585]
[85.74954987 98.55087280]
[93.77308655 87.10034943]
[95.29061127 72.17730713]
[96.80813599 57.25427246]
[98.32566071 42.33123016]
[88.61332703 30.15304375]
[90.36489868 15.04057598]
[102.03479004 5.85639715]
[103.55231476 -9.06664276]
[105.06983948 -23.98968315]
[106.58736420 -38.91272354]
[98.61544037 -55.40485001]
[109.19057465 -69.29814911]
[110.20322418 -84.26392365]
[111.21586609 -99.22970581]
[99.92649078 -107.33901215]
[94.21284485 -119.89085388]
[95.49082184 -133.51321411]
[103.31378174 -144.60530090]
[115.51950836 -150.28933716]
[117.03703308 -165.21237183]
[112.62413788 -181.58193970]
[127.13236237 -190.35392761]
[139.57780457 -178.84101868]
[131.96006775 -163.69485474]
[130.44255066 -148.77182007]
[142.97842407 -138.32136536]
[146.92694092 -122.31580353]
[140.56376648 -106.92937469]
[126.18164825 -98.21705627]
[125.16899872 -83.25128174]
[124.15635681 -68.28549957]
[131.92808533 -58.84817123]
[131.07499695 -46.24790955]
[121.51040649 -37.39519882]
[119.99288177 -22.47215843]
[118.47535706 -7.54911804]
[116.95783234 7.37392187]
[126.54007721 18.71923256]
[125.21367645 33.87493515]
[113.24870300 43.84875488]
[111.73117828 58.77179718]
[110.21365356 73.69483185]
[108.69612885 88.61787415]
[114.25045013 101.44912720]
[106.22691345 112.89965057]
[104.70938873 127.82269287]
[116.54689026 135.48263550]
[123.85565186 147.46221924]
[125.23829651 161.36013794]
[120.47861481 174.41978455]
[110.57299042 184.07592773]
[97.52242279 188.45860291]
[95.50174713 203.32186890]
[93.48107910 218.18513489]
[91.46040344 233.04841614]
[89.43973541 247.91168213]
[87.41905975 262.77496338]
[85.39839172 277.63824463]
[93.99583435 295.71740723]
[81.97900391 310.70779419]
[80.96635437 325.67358398]
[79.95370483 340.63937378]
[82.53438568 349.62237549]
[78.64570618 356.09078979]
[77.12818146 371.01382446]
[75.61065674 385.93685913]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 92]
[5 91]
[6 90]
[7 88]
[8 87]
[9 86]
[13 84]
[14 83]
[15 82]
[16 81]
[17 80]
[18 79]
[19 78]
[24 72]
[25 71]
[27 69]
[28 68]
[29 67]
[30 66]
[33 63]
[34 62]
[35 61]
[36 60]
[38 57]
[39 56]
[40 55]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
