%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUCAGCAGAGGAGAGCGCCAGGACGCUACAGCGGCUGAAGAGGCAGUGGCGCCCGCGGCCGCAGCGUCGGGGCUGGAGCG\
) } def
/len { sequence length } bind def

/coor [
[75.15131378 162.19604492]
[64.94872284 173.19181824]
[65.36254883 188.76315308]
[54.85903168 199.76910400]
[40.01159286 200.06765747]
[29.80900002 211.06343079]
[31.93283272 226.55612183]
[23.55757332 239.76176453]
[8.63776302 244.44506836]
[-5.78191805 238.39471436]
[-12.89293957 224.46749878]
[-9.33769321 209.23941040]
[3.20514154 199.90071106]
[18.81322289 200.86083984]
[29.01581383 189.86506653]
[28.20398521 175.03683472]
[38.39422607 163.74020386]
[53.95294571 162.98922729]
[64.15553284 151.99345398]
[72.60533905 139.59986877]
[79.11359406 126.08533478]
[85.62184906 112.57080078]
[80.93545532 98.86007690]
[87.22222137 85.80547333]
[100.86361694 80.92094421]
[107.37187195 67.40641022]
[113.88012695 53.89187622]
[120.38838959 40.37734222]
[126.89664459 26.86281013]
[133.40489197 13.34827805]
[132.94606018 7.64110136]
[134.70652771 2.90107250]
[137.87704468 -0.14956670]
[141.47434998 -1.25229871]
[149.45483398 -13.95316219]
[157.43531799 -26.65402412]
[165.41580200 -39.35488892]
[173.39627075 -52.05575180]
[181.37675476 -64.75661469]
[189.35723877 -77.45747375]
[187.26037598 -90.34643555]
[194.36860657 -100.81559753]
[206.33274841 -103.44707489]
[208.66914368 -112.53879547]
[215.33743286 -116.13799286]
[224.24473572 -128.20695496]
[233.15203857 -140.27592468]
[230.54899597 -155.86437988]
[239.79893494 -168.67898560]
[255.41403198 -171.11706543]
[268.13012695 -161.73216248]
[270.40298462 -146.09216309]
[260.88415527 -133.47599792]
[245.22100830 -131.36862183]
[236.31370544 -119.29965210]
[227.40640259 -107.23069000]
[218.72633362 -94.99727631]
[218.47709656 -77.55617523]
[202.05810547 -69.47699738]
[194.07762146 -56.77613068]
[186.09713745 -44.07526779]
[178.11665344 -31.37440681]
[170.13616943 -18.67354393]
[162.15570068 -5.97268057]
[154.17521667 6.72818232]
[146.91943359 19.85653305]
[140.41117859 33.37106705]
[133.90292358 46.88560104]
[127.39466095 60.40013123]
[120.88640594 73.91466522]
[114.37815094 87.42919922]
[119.06454468 101.13992310]
[112.77777863 114.19452667]
[99.13638306 119.07905579]
[92.62812805 132.59359741]
[86.11987305 146.10812378]
[100.58499908 142.13824463]
[114.71927643 147.16041565]
[123.43647003 159.36740112]
[123.59968567 174.36651611]
[115.15018463 186.76029968]
[101.12854004 192.08885193]
[86.58044434 188.43467712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[5 15]
[6 14]
[20 76]
[21 75]
[22 74]
[25 71]
[26 70]
[27 69]
[28 68]
[29 67]
[30 66]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[43 57]
[45 56]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
