%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCCCGGCUCCAGCUCCGCCGCCAGCUCCAGCCUUUGCUCCCCCUCCCAAAGUCCCCUCCCCGGAGCGGAGCGCACCUAGGGUCCCUCUUCCGUCCCCCCAGCCCAGCUACCCGUUCAGACCAGCAGCCUCGGGGGGCACCCCCCCGCCAGCCUGCCUCCCUCCCGCUCAGCCCUGCCAGGGUUCCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[130.02473450 132.14968872]
[124.42240143 136.58734131]
[118.17540741 140.05921936]
[111.44864655 142.47370911]
[104.41969299 143.76702881]
[97.27407074 143.90507507]
[90.20040131 142.88420105]
[83.38540649 140.73133850]
[77.00897980 137.50332642]
[67.10373688 148.76770020]
[57.19849396 160.03208923]
[47.29325104 171.29646301]
[48.12285233 186.85118103]
[37.91706467 198.13375854]
[23.08289719 198.82879639]
[13.17765522 210.09318542]
[3.27241349 221.35755920]
[-6.63282824 232.62193298]
[-3.09721184 247.73083496]
[-9.14864540 262.01928711]
[-22.46022987 269.99307251]
[-37.91338730 268.58612061]
[-49.56606674 258.33944702]
[-52.93757248 243.19306946]
[-46.73149109 228.97109985]
[-33.33419037 221.14218140]
[-17.89720535 222.71669006]
[-7.99196291 211.45231628]
[1.91327894 200.18794250]
[11.81852055 188.92355347]
[10.61090565 174.12229919]
[20.49576378 162.55752563]
[36.02887344 161.39122009]
[45.93411636 150.12684631]
[55.83935928 138.86245728]
[65.74459839 127.59808350]
[58.71192551 118.18023682]
[54.29143906 106.97271729]
[52.93564987 94.70569611]
[54.89175415 82.22231293]
[40.44517899 78.18542480]
[25.99860191 74.14854431]
[11.55202579 70.11165619]
[-2.89455056 66.07476807]
[-14.50339985 71.71458435]
[-26.45850372 68.04599762]
[-32.50429535 57.55963516]
[-46.88431549 53.29172134]
[-61.26433182 49.02380753]
[-75.64434814 44.75589371]
[-84.90422058 56.78166962]
[-97.88503265 64.64697266]
[-112.83123016 67.28809357]
[-127.72147369 64.34783173]
[-140.54197693 56.22383881]
[-149.55886841 44.01482010]
[-153.55268860 29.37194443]
[-151.98330688 14.27553940]
[-145.06295776 0.76726830]
[-133.72758484 -9.32598400]
[-119.51020050 -14.63918877]
[-104.33357239 -14.45377922]
[-90.25022125 -8.79482937]
[-79.16481018 1.57233429]
[-72.57654572 15.24563694]
[-71.37643433 30.37587738]
[-56.99641800 34.64379120]
[-42.61640167 38.91170502]
[-28.23638153 43.17961884]
[-11.42189503 38.17420197]
[1.14233422 51.62819672]
[15.58891010 55.66508102]
[30.03548622 59.70196533]
[44.48206329 63.73884964]
[58.92863846 67.77573395]
[69.78716278 57.42718506]
[66.44934845 42.80326843]
[52.88059616 39.37672806]
[42.16481018 30.47864532]
[36.35853577 17.89088821]
[36.54405212 4.09598541]
[42.62807465 -8.21240616]
[53.37111664 -16.65548515]
[50.26812363 -31.33102226]
[47.16512680 -46.00656128]
[36.74039841 -57.90763855]
[41.67749023 -71.96019745]
[27.45431900 -78.16349792]
[19.62278748 -91.55927277]
[21.19428062 -106.99656677]
[31.56452751 -118.53942871]
[46.74595642 -121.74938965]
[60.90099716 -115.39215088]
[68.58674622 -101.91220856]
[66.84788513 -86.49287415]
[56.35303116 -75.06319427]
[66.55580902 -64.21180725]
[61.84066391 -49.10955811]
[64.94366455 -34.43401718]
[68.04665375 -19.75848007]
[83.52239990 -15.12934494]
[94.61846161 -3.26148462]
[98.23966980 12.67319202]
[93.30621338 28.35006332]
[81.07326508 39.46545410]
[84.41107941 54.08937073]
[106.81693268 53.13197327]
[126.72261810 62.26681900]
[139.95657349 79.05487061]
[143.98693848 99.51408386]
[158.79466248 101.90808105]
[173.60238647 104.30207825]
[188.49414062 106.10095215]
[203.44598389 107.30180359]
[218.39784241 108.50265503]
[233.34970093 109.70350647]
[243.47250366 98.09165955]
[258.31817627 94.70654297]
[272.14694214 100.64199829]
[279.73812866 113.42918396]
[294.68997192 114.63003540]
[309.64181519 115.83088684]
[314.68017578 104.34021759]
[325.14688110 95.68910980]
[339.38967896 92.41674042]
[354.60098267 96.09807587]
[367.37109375 106.84186554]
[382.24795532 104.92370605]
[397.12478638 103.00555420]
[412.00164795 101.08739471]
[424.69909668 91.64888763]
[438.31130981 97.69513702]
[453.18814087 95.77698517]
[468.03234863 93.62062836]
[482.84005737 91.22663116]
[497.64779663 88.83263397]
[512.45550537 86.43862915]
[527.26324463 84.04463196]
[542.07098389 81.65063477]
[556.87872314 79.25663757]
[571.54980469 70.75988007]
[583.77587891 82.50549316]
[575.87377930 97.50527954]
[559.27270508 94.06436157]
[544.46496582 96.45835876]
[529.65722656 98.85236359]
[514.84954834 101.24636078]
[500.04177856 103.64035797]
[485.23406982 106.03435516]
[470.42633057 108.42835236]
[466.94866943 111.71818542]
[461.36355591 112.85035706]
[455.10629272 110.65383148]
[440.22946167 112.57199097]
[428.59609985 121.87329102]
[413.91979980 115.96424103]
[399.04293823 117.88240051]
[384.16610718 119.80056000]
[369.28924561 121.71871948]
[366.81216431 128.79783630]
[380.97039795 133.75202942]
[395.12866211 138.70620728]
[410.12487793 139.04280090]
[414.43881226 153.40908813]
[402.10873413 161.95129395]
[390.17446899 152.86445618]
[376.01620483 147.91027832]
[361.85797119 142.95608521]
[359.38088989 150.03521729]
[369.81610107 160.81045532]
[385.17849731 167.98214722]
[382.53982544 184.72950745]
[365.71649170 186.83006287]
[359.04086304 171.24569702]
[348.60562134 160.47045898]
[319.15802002 153.75083923]
[308.44097900 130.78274536]
[293.48910522 129.58189392]
[278.53726196 128.38104248]
[269.00256348 139.79277039]
[254.40377808 143.44506836]
[240.28865051 137.73396301]
[232.14884949 124.65536499]
[217.19699097 123.45451355]
[202.24513245 122.25365448]
[187.29328918 121.05280304]
[194.81858826 134.02853394]
[189.51928711 148.06126404]
[175.29537964 152.82365417]
[162.61488342 144.81085205]
[160.80996704 129.91984558]
[171.20838928 119.10980225]
[156.40066528 116.71580505]
[141.59294128 114.32180786]
[138.72483826 120.86801910]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 36]
[10 35]
[11 34]
[12 33]
[15 30]
[16 29]
[17 28]
[18 27]
[40 75]
[41 74]
[42 73]
[43 72]
[44 71]
[47 69]
[48 68]
[49 67]
[50 66]
[76 106]
[77 105]
[83 100]
[84 99]
[85 98]
[87 96]
[110 194]
[111 193]
[112 192]
[113 186]
[114 185]
[115 184]
[116 183]
[120 179]
[121 178]
[122 177]
[127 159]
[128 158]
[129 157]
[130 156]
[132 154]
[133 153]
[134 150]
[135 149]
[136 148]
[137 147]
[138 146]
[139 145]
[140 144]
[169 175]
[170 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
