%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACCGCUUCAGCAUCUUUUGGGAGUGGUGACAGAGCCACAGAGGGCUGUGAGCUUGCCCGGCCCCAGGUAACGCUGGCGGUGGGUGGGCCUCCAGCUUGGAGCAGAGACCCCCCGAGGCAUCUGCAGACAGAACUGGAUGGACCC\
) } def
/len { sequence length } bind def

/coor [
[92.46003723 119.91909790]
[82.54991150 131.17918396]
[79.24066925 146.65042114]
[65.02390289 151.09259033]
[55.11378098 162.35267639]
[45.20365906 173.61276245]
[35.29354095 184.87284851]
[25.38341904 196.13293457]
[15.47329807 207.39302063]
[5.56317759 218.65310669]
[-4.34694338 229.91319275]
[1.18668544 244.18334961]
[-0.55672628 259.38925171]
[-9.17655563 272.03665161]
[-22.69202805 279.21932983]
[-37.99738693 279.28668213]
[-51.57557678 272.22329712]
[-60.30642319 259.65228271]
[-62.18364334 244.46232605]
[-56.77586746 230.14399719]
[-45.32576370 219.98753357]
[-30.46447754 216.32682800]
[-15.60702801 220.00306702]
[-5.69690704 208.74298096]
[4.21321344 197.48289490]
[14.12333488 186.22280884]
[24.03345490 174.96273804]
[33.94357681 163.70265198]
[43.85369873 152.44256592]
[53.76381683 141.18247986]
[56.36422729 126.51662445]
[71.28983307 121.26905823]
[81.19995117 110.00897217]
[75.59440613 94.85614014]
[82.33602142 77.52566528]
[68.41768646 71.93281555]
[54.49935150 66.33996582]
[40.58101654 60.74711990]
[26.60410690 55.30230713]
[12.57019711 50.00614548]
[-1.46371305 44.70998001]
[-15.49762344 39.41381454]
[-29.53153419 34.11764908]
[-45.61751938 37.30717087]
[-56.21771240 24.79445839]
[-50.42753601 9.45151520]
[-34.20343399 7.06184578]
[-24.23536873 20.08373833]
[-10.20145798 25.37990379]
[3.83245206 30.67606926]
[17.86636162 35.97223282]
[31.90027237 41.26839828]
[39.32019806 40.68337250]
[46.17386627 46.82878494]
[60.09220123 52.42163467]
[74.01053619 58.01448059]
[87.92887115 63.60732651]
[100.08281708 54.81632996]
[99.12824249 39.84673309]
[98.17367554 24.87713623]
[97.21910858 9.90754128]
[96.26454163 -5.06205511]
[92.57357025 -13.49506092]
[95.45201111 -20.35888863]
[94.81539154 -35.34537506]
[94.01976013 -50.32425690]
[93.06518555 -65.29385376]
[92.11061859 -80.26345062]
[91.15605164 -95.23304749]
[79.12811279 -105.48508453]
[77.95566559 -121.24581909]
[88.33429718 -133.16470337]
[104.10655212 -134.17044067]
[115.91503143 -123.66638184]
[116.75397491 -107.88437653]
[106.12564850 -96.18761444]
[107.08021545 -81.21801758]
[108.03478241 -66.24842072]
[108.98934937 -51.27882767]
[112.57872009 -44.75854874]
[109.80187988 -35.98199081]
[110.43849945 -20.99550819]
[111.23413849 -6.01662350]
[112.18870544 8.95297241]
[113.14327240 23.92256737]
[114.09783936 38.89216232]
[115.05240631 53.86175919]
[124.47570801 65.53229523]
[138.90820312 69.61922455]
[153.34071350 73.70614624]
[167.81576538 77.63967133]
[182.33175659 81.41934204]
[196.88705444 85.04473877]
[211.48001099 88.51544952]
[226.07295227 91.98616028]
[240.66590881 95.45687103]
[255.25885010 98.92758179]
[272.73690796 93.23387909]
[285.04745483 105.69907379]
[299.71078491 108.85926056]
[314.37411499 112.01944733]
[328.85769653 102.26824951]
[345.59078979 105.90340424]
[354.37042236 120.21096039]
[369.09750366 123.05919647]
[383.82461548 125.90744019]
[398.55172729 128.75569153]
[413.27880859 131.60392761]
[426.27807617 123.02156830]
[441.17288208 126.11988831]
[449.27474976 138.56558228]
[464.00183105 141.41383362]
[476.95385742 132.35728455]
[492.50146484 135.19403076]
[501.42056274 148.24107361]
[498.41961670 163.75782776]
[485.27899170 172.53848267]
[469.79483032 169.37364197]
[461.15359497 156.14093018]
[446.42648315 153.29269409]
[434.26840210 161.82009888]
[419.29244995 159.14135742]
[410.43057251 146.33102417]
[395.70346069 143.48278809]
[380.97637939 140.63453674]
[366.24926758 137.78630066]
[351.52215576 134.93806458]
[341.92495728 143.59594727]
[328.89654541 145.14709473]
[317.19192505 138.79870605]
[311.21392822 126.68277740]
[296.55059814 123.52259064]
[281.88726807 120.36240387]
[271.51367188 126.66838074]
[259.23657227 124.10602570]
[251.78813171 113.52053070]
[237.19519043 110.04981995]
[222.60223389 106.57910919]
[208.00929260 103.10839844]
[193.41633606 99.63768768]
[186.13082886 101.16043854]
[178.55209351 95.93533325]
[164.03610229 92.15566254]
[156.71989441 93.52342987]
[149.25378418 88.13864899]
[134.82127380 84.05171967]
[120.38877869 79.96479797]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[35 57]
[36 56]
[37 55]
[38 54]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[58 87]
[59 86]
[60 85]
[61 84]
[62 83]
[64 82]
[65 81]
[66 79]
[67 78]
[68 77]
[69 76]
[88 147]
[89 146]
[90 145]
[91 143]
[92 142]
[93 140]
[94 139]
[95 138]
[96 137]
[97 136]
[99 133]
[100 132]
[101 131]
[104 127]
[105 126]
[106 125]
[107 124]
[108 123]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
