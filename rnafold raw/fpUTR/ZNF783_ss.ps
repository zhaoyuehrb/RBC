%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGGCCAGCGGGGCACGUGGCUCGGGACGCAGUUCGCUGCCGCCCGGCAGUAGCUCUCAGGUUAGGCGGGUCCCGCUCCGCUUCCGCCGUCGCUGCCGCGCCGCCCCGGGCCCGACAGGCCGGGUCCAGGGACUGCAACCCAGCGAGGGACGCGGGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[355.47271729 370.87530518]
[352.31518555 360.01495361]
[352.63720703 348.68276978]
[356.42413330 337.96893311]
[345.03671265 328.20538330]
[333.64932251 318.44183350]
[322.26190186 308.67825317]
[310.87451172 298.91470337]
[306.08508301 298.38760376]
[301.58941650 294.81579590]
[299.24719238 288.55249023]
[288.24212646 278.35995483]
[277.23703003 268.16738892]
[266.23196411 257.97482300]
[255.22688293 247.78227234]
[244.22180176 237.58972168]
[226.94041443 234.65307617]
[221.59341431 217.05485535]
[210.39512634 207.07496643]
[199.19682312 197.09507751]
[187.99851990 187.11520386]
[176.80021667 177.13531494]
[165.60192871 167.15542603]
[153.48194885 167.52964783]
[144.06672668 159.26626587]
[142.78446960 146.40136719]
[128.18930054 143.42977905]
[123.32202911 128.37586975]
[112.31694794 118.18331146]
[101.31186676 107.99076080]
[96.09925079 118.73699188]
[83.63214874 125.35564423]
[66.68270111 124.27147675]
[51.85849762 121.98173523]
[37.03429031 119.69200134]
[22.21008492 117.40225983]
[13.20352936 119.18949890]
[7.12495375 114.92406464]
[-7.65267277 112.35078430]
[-22.43029976 109.77751160]
[-37.20792770 107.20423889]
[-51.98555374 104.63095856]
[-66.76318359 102.05768585]
[-81.96683502 108.20429993]
[-94.72348785 97.89897156]
[-91.91018677 81.74293518]
[-76.42102051 76.35614014]
[-64.18990326 87.28005981]
[-49.41227722 89.85333252]
[-34.63465118 92.42661285]
[-19.85702515 94.99988556]
[-5.07939768 97.57315826]
[9.69822884 100.14643860]
[24.49982452 102.57805634]
[39.32403183 104.86779022]
[54.14823914 107.15753174]
[68.97244263 109.44727325]
[74.06872559 103.94473267]
[63.06380081 93.75200653]
[73.25669861 82.74723816]
[84.26127625 92.93965149]
[89.35755920 87.43711090]
[85.93975067 72.83168030]
[82.52194977 58.22624969]
[69.61607361 45.12182617]
[75.29184723 28.53702545]
[71.59490967 13.99974060]
[67.89796448 -0.53754318]
[64.20102692 -15.07482719]
[60.50408554 -29.61211205]
[56.80714417 -44.14939499]
[53.11020279 -58.68667984]
[39.39894867 -66.54651642]
[35.34206009 -81.82123566]
[43.34642029 -95.44863129]
[58.66318130 -99.34379578]
[72.20518494 -91.19580841]
[75.93819427 -75.83872223]
[67.64749146 -62.38362122]
[71.34442902 -47.84633636]
[75.04136658 -33.30905151]
[78.73831177 -18.77176857]
[82.43524933 -4.23448420]
[86.13219452 10.30280018]
[89.82913208 24.84008408]
[100.08355713 31.31160736]
[103.26315308 43.42855453]
[97.12738037 54.80844498]
[100.54518890 69.41387939]
[103.96298981 84.01931000]
[111.50442505 96.98567963]
[122.50950623 107.17823792]
[133.51458740 117.37078857]
[148.89691162 121.07141876]
[152.97702026 135.39628601]
[171.00593567 139.03579712]
[175.58181763 155.95712280]
[186.78010559 165.93701172]
[197.97840881 175.91690063]
[209.17671204 185.89678955]
[220.37500000 195.87667847]
[231.57330322 205.85655212]
[244.50186157 205.90260315]
[253.62779236 214.48442078]
[254.41435242 226.58464050]
[265.41943359 236.77719116]
[276.42453003 246.96975708]
[287.42959595 257.16232300]
[298.43469238 267.35485840]
[309.43975830 277.54742432]
[320.63806152 287.52731323]
[332.02545166 297.29086304]
[343.41287231 307.05441284]
[354.80029297 316.81796265]
[366.18768311 326.58151245]
[383.96496582 319.40921021]
[402.84954834 322.19189453]
[417.67593384 334.08547974]
[424.43060303 351.76531982]
[421.33828735 370.35498047]
[437.04351807 372.26708984]
[442.73953247 386.02954102]
[454.84091187 394.89273071]
[466.94232178 403.75595093]
[482.64755249 405.66806030]
[488.34356689 419.43048096]
[500.44494629 428.29370117]
[512.54632568 437.15692139]
[524.64770508 446.02011108]
[539.35626221 441.44131470]
[553.77209473 446.34399414]
[562.43438721 458.64962769]
[562.19250488 473.51837158]
[571.00939941 476.08245850]
[574.43865967 482.66906738]
[586.36804199 491.76245117]
[598.29742432 500.85583496]
[614.32470703 500.14462280]
[624.76458740 512.32611084]
[621.60852051 528.05566406]
[607.27758789 535.26690674]
[592.76519775 528.42803955]
[589.20404053 512.78521729]
[577.27465820 503.69186401]
[565.34527588 494.59848022]
[553.32928467 485.61978149]
[539.22650146 490.33657837]
[524.88073730 485.79086304]
[515.85693359 473.52606201]
[515.78454590 458.12149048]
[503.68313599 449.25830078]
[491.58175659 440.39508057]
[479.48034668 431.53189087]
[464.64068604 430.25372314]
[458.07910156 415.85733032]
[445.97772217 406.99414062]
[433.87634277 398.13092041]
[419.03665161 396.85275269]
[412.47506714 382.45635986]
[403.15002441 388.56893921]
[392.37500000 391.53808594]
[381.18182373 391.06250000]
[370.64743042 387.17156982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 115]
[5 114]
[6 113]
[7 112]
[8 111]
[11 110]
[12 109]
[13 108]
[14 107]
[15 106]
[16 105]
[18 102]
[19 101]
[20 100]
[21 99]
[22 98]
[23 97]
[26 95]
[28 93]
[29 92]
[30 91]
[33 57]
[34 56]
[35 55]
[36 54]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[62 90]
[63 89]
[64 88]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
[120 159]
[122 157]
[123 156]
[124 155]
[126 153]
[127 152]
[128 151]
[129 150]
[133 146]
[135 145]
[136 144]
[137 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
