%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAAAGACCUGCGCCGGCGCGCGGGACUCUGCGUGAGGCGAGCGCCGGGGCUCCCGGAGCGGAUCCCUACCUGUUUCAAGGACCUGCCAGUCUGAGAAGCUUCUUGUCAUAAGGCCAUCCAGGGGCCACGCACCCCUACCUUGCCAGCCUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[196.72653198 181.30499268]
[184.60894775 172.46394348]
[172.49134827 163.62290955]
[160.37376404 154.78186035]
[148.25617981 145.94081116]
[140.95819092 144.53106689]
[135.98696899 136.79965210]
[124.04869843 127.71791840]
[114.18083954 133.84562683]
[102.89215088 136.58221436]
[91.31368256 135.65348816]
[80.60552979 131.15249634]
[71.84059143 123.53020477]
[58.60735321 130.59288025]
[45.37411499 137.65556335]
[32.14087677 144.71824646]
[27.62940216 156.84068298]
[16.41629219 162.43942261]
[4.78581524 158.98870850]
[-8.58608913 165.78520203]
[-21.95799446 172.58168030]
[-35.32989883 179.37815857]
[-48.70180130 186.17463684]
[-62.07370758 192.97113037]
[-75.44561005 199.76760864]
[-83.93261719 213.79980469]
[-100.32062531 213.19548035]
[-107.75106049 198.57629395]
[-98.58012390 184.98121643]
[-82.24209595 186.39570618]
[-68.87018585 179.59921265]
[-55.49828339 172.80273438]
[-42.12638092 166.00625610]
[-28.75447655 159.20977783]
[-15.38257122 152.41328430]
[-2.01066709 145.61680603]
[6.72070551 130.42163086]
[25.07819748 131.48500061]
[38.31143570 124.42232513]
[51.54467392 117.35964966]
[64.77791595 110.29696655]
[60.30323029 100.21123505]
[58.89191818 88.45572662]
[45.80264664 81.12967682]
[29.98144531 81.14134216]
[22.65431595 68.17359161]
[9.56504345 60.84754944]
[-3.52422929 53.52150726]
[-16.61350250 46.19546127]
[-29.70277596 38.86941528]
[-46.47734070 36.40968323]
[-48.75739670 19.60975075]
[-33.24519348 12.76811695]
[-22.37672997 25.78014374]
[-9.28745747 33.10618591]
[3.80181551 40.43223190]
[16.89108849 47.75827789]
[29.98036194 55.08432388]
[44.86532974 54.54865265]
[53.12869263 68.04040527]
[66.21796417 75.36644745]
[77.08651733 65.02843475]
[70.42416382 51.58920670]
[55.18538666 48.08012390]
[45.80871964 35.56564713]
[46.72153854 19.95472717]
[57.49283981 8.61836624]
[73.03674316 6.90924454]
[86.01389313 15.63435745]
[90.29687500 30.67397499]
[83.86339569 44.92684555]
[90.52575684 58.36608124]
[98.62281799 60.32656479]
[105.64170837 63.73991013]
[110.92838287 49.70242310]
[116.21505737 35.66493607]
[121.50173950 21.62744713]
[126.78841400 7.58996010]
[120.51675415 -6.66851187]
[126.07816315 -20.82921028]
[139.71008301 -26.72040939]
[144.99676514 -40.75789642]
[150.28344727 -54.79538345]
[155.57011414 -68.83287048]
[148.82308960 -83.12458801]
[154.23654175 -97.97281647]
[168.59880066 -104.56837463]
[183.38896179 -98.99822998]
[189.83230591 -84.56704712]
[184.10609436 -69.83660126]
[169.60760498 -63.54619598]
[164.32092285 -49.50870895]
[159.03425598 -35.47122192]
[153.74757385 -21.43373299]
[160.10665894 -8.01368999]
[154.94519043 6.29762888]
[140.82589722 12.87663651]
[135.53923035 26.91412354]
[130.25254822 40.95161057]
[124.96587372 54.98909760]
[119.67919159 69.02658844]
[135.26579285 89.85374451]
[133.13043213 115.77965546]
[145.06869507 124.86138916]
[157.09722900 133.82322693]
[169.21481323 142.66427612]
[181.33239746 151.50531006]
[193.44998169 160.34635925]
[205.56758118 169.18740845]
[224.12034607 159.40824890]
[245.00315857 160.24433899]
[262.59182739 171.39747620]
[272.18600464 189.80072021]
[271.26516724 210.46142578]
[284.49841309 217.52410889]
[297.73165894 224.58677673]
[310.06512451 215.66227722]
[324.98953247 212.98860168]
[339.53530884 217.04335022]
[350.83172607 226.97068787]
[356.67355347 240.76133728]
[355.95144653 255.65913391]
[369.18469238 262.72180176]
[382.41793823 269.78448486]
[395.65118408 276.84716797]
[408.88439941 283.90985107]
[423.32394409 277.90698242]
[438.22824097 282.63940430]
[446.55996704 295.87255859]
[444.38513184 311.35815430]
[432.73062134 321.78439331]
[417.09933472 322.22830200]
[404.87191772 312.48028564]
[401.82174683 297.14306641]
[388.58850098 290.08041382]
[375.35525513 283.01773071]
[362.12200928 275.95504761]
[348.88879395 268.89236450]
[336.91403198 277.78451538]
[322.20547485 280.60729980]
[307.67041016 276.74816895]
[296.20550537 266.92083740]
[290.11965942 253.03381348]
[290.66897583 237.82002258]
[277.43572998 230.75733948]
[264.20248413 223.69465637]
[257.33969116 230.42698669]
[249.05068970 235.32453918]
[239.81564331 238.09573364]
[230.17143250 238.57238770]
[220.68043518 236.71995544]
[211.89770508 232.63987732]
[204.33850098 226.56405640]
[198.44812012 218.84173584]
[194.57562256 209.91934204]
[192.95315552 200.31478882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[3 107]
[4 106]
[5 105]
[7 104]
[8 103]
[13 41]
[14 40]
[15 39]
[16 38]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[43 61]
[44 60]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[62 72]
[63 71]
[74 101]
[75 100]
[76 99]
[77 98]
[78 97]
[81 94]
[82 93]
[83 92]
[84 91]
[114 146]
[115 145]
[116 144]
[122 138]
[123 137]
[124 136]
[125 135]
[126 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
