%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGCAGCGGCGACGGCGUCGGCGGCGGCGGCGGCAGCGGCUCCGGCCGAGGUGCGCGCUGGGGGGGAGGGGGGGCCGGAGAGGAGCAUGAAUGGAGCAAA\
) } def
/len { sequence length } bind def

/coor [
[78.33937836 149.68171692]
[79.33082581 134.71450806]
[84.78144836 120.73986816]
[94.18507385 109.05451202]
[79.57583618 112.45601654]
[64.96660614 115.85751343]
[53.28049850 126.52267456]
[39.13022232 121.87306213]
[24.52098656 125.27455902]
[12.83488464 135.93972778]
[-1.31539345 131.29010010]
[-15.92462921 134.69160461]
[-21.21752930 139.10229492]
[-27.06079865 139.91816711]
[-31.52776718 137.82620239]
[-46.31719971 140.33073425]
[-58.63175583 150.26362610]
[-72.47225189 144.76000977]
[-87.26168823 147.26454163]
[-102.05111694 149.76908875]
[-116.84054565 152.27362061]
[-131.44778442 160.87973022]
[-143.76124573 149.22576904]
[-135.97142029 134.16737366]
[-119.34508514 137.48419189]
[-104.55565643 134.97964478]
[-89.76622772 132.47511292]
[-74.97679138 129.97058105]
[-63.72007751 120.21682739]
[-48.82173920 125.54130554]
[-34.03230667 123.03676605]
[-19.32613182 120.08237457]
[-4.71689606 116.68087006]
[5.92425585 106.25901031]
[21.11948395 110.66532898]
[35.72872162 107.26382446]
[46.36987305 96.84196472]
[61.56510162 101.24827576]
[76.17433929 97.84677887]
[90.78356934 94.44527435]
[103.92375946 87.21095276]
[114.61093140 76.68553925]
[125.29810333 66.16011810]
[135.98527527 55.63470459]
[146.67243958 45.10928726]
[146.43876648 27.69952202]
[158.57011414 15.68224525]
[175.30612183 16.06536865]
[185.66734314 5.21892977]
[187.68066406 -1.37011218]
[192.12310791 -5.25266457]
[197.00634766 -5.94845629]
[208.00952148 -16.14305878]
[219.01271057 -26.33766365]
[223.87718201 -41.39247894]
[238.47180176 -44.36677933]
[243.33627319 -59.42159653]
[257.93090820 -62.39589691]
[262.79537964 -77.45071411]
[277.38998413 -80.42501831]
[288.39315796 -90.61962128]
[287.44436646 -106.22839355]
[296.79217529 -118.76444244]
[312.02282715 -122.30863190]
[325.94488525 -115.18749237]
[331.98477173 -100.76342010]
[327.29064941 -85.84701538]
[314.07891846 -77.48135376]
[298.58776855 -79.61643219]
[287.58459473 -69.42182922]
[283.50714111 -55.09620285]
[268.12548828 -51.39271545]
[264.04803467 -37.06708527]
[248.66641235 -33.36359787]
[244.58895874 -19.03796768]
[229.20732117 -15.33447838]
[218.20413208 -5.13987541]
[207.20094299 5.05472803]
[196.51377869 15.58014393]
[186.15255737 26.42658234]
[188.23936462 39.24174500]
[182.42964172 51.07173538]
[170.66864014 57.44161606]
[157.19786072 55.79645538]
[146.51069641 66.32187653]
[135.82351685 76.84729004]
[125.13634491 87.37270355]
[114.44918060 97.89812469]
[129.35292053 96.20155334]
[144.07615662 99.06971741]
[157.25326538 106.23657990]
[167.66203308 117.03739929]
[174.33700562 130.47036743]
[176.65908813 145.28953552]
[174.41288757 160.12040710]
[167.80674744 173.58735657]
[157.45339966 184.44131470]
[144.31315613 191.67552185]
[129.60479736 194.61900330]
[114.69255829 192.99874878]
[100.95960236 186.96502686]
[89.67967987 177.07748413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 40]
[5 39]
[6 38]
[8 36]
[9 35]
[11 33]
[12 32]
[15 31]
[16 30]
[18 28]
[19 27]
[20 26]
[21 25]
[41 88]
[42 87]
[43 86]
[44 85]
[45 84]
[48 80]
[49 79]
[52 78]
[53 77]
[54 76]
[56 74]
[58 72]
[60 70]
[61 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
