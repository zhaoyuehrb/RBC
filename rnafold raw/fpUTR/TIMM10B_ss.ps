%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGGUUACUUCCGGGGCGGCACCGAGAAGCUGAAACGGAAGUGGCGUACGGCAUGCGCCGGUGGCGUG\
) } def
/len { sequence length } bind def

/coor [
[65.38506317 132.12141418]
[74.95284271 120.56903076]
[88.48412323 114.09565735]
[103.47978973 113.89483643]
[89.98410034 110.23997498]
[86.03158569 96.82844543]
[75.30830383 86.33982086]
[64.58502197 75.85119629]
[53.86174393 65.36256409]
[43.13846588 54.87394333]
[32.41518402 44.38531494]
[21.69190407 33.89669037]
[10.96862411 23.40806580]
[0.24534418 12.91944027]
[-10.47793579 2.43081474]
[-25.68688202 4.87910604]
[-39.26251221 -2.01695800]
[-46.09357834 -15.42592907]
[-43.74711609 -30.11034775]
[-54.47039795 -40.59897232]
[-65.19367981 -51.08759689]
[-75.91696167 -61.57622528]
[-91.19209290 -58.84676743]
[-105.13954926 -65.64736176]
[-112.39624023 -79.36304474]
[-110.17182922 -94.71985626]
[-99.32164764 -105.81278992]
[-84.01779938 -108.37638092]
[-70.14494324 -101.42488098]
[-63.03746033 -87.63127899]
[-65.42832947 -72.29950714]
[-54.70505142 -61.81087875]
[-43.98177338 -51.32225418]
[-33.25849152 -40.83362579]
[-18.62957764 -43.50436401]
[-5.07276917 -36.97160339]
[2.12192798 -23.55185127]
[0.01068966 -8.29246521]
[10.73396969 2.19616032]
[21.45725060 12.68478584]
[32.18053055 23.17341042]
[42.90380859 33.66203690]
[53.62709045 44.15066147]
[64.35037231 54.63928604]
[75.07364655 65.12791443]
[85.79692841 75.61653900]
[96.52021027 86.10516357]
[110.01589966 89.76002502]
[113.96841431 103.17155457]
[122.23056793 105.08444977]
[127.13679504 110.90435791]
[141.52066040 115.15928650]
[155.90452576 119.41421509]
[170.28839111 123.66914368]
[186.09782410 119.31095886]
[197.58531189 131.01437378]
[192.93350220 146.73991394]
[176.92778015 150.31050110]
[166.03346252 138.05300903]
[151.64959717 133.79808044]
[137.26573181 129.54315186]
[122.88186646 125.28823090]
[130.01281738 138.48480225]
[130.95034790 153.45547485]
[125.52152252 167.43859863]
[114.72779846 177.85472107]
[100.56028748 182.78237915]
[85.63247681 181.31254578]
[72.69808960 173.71638489]
[64.14313507 161.39515686]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 49]
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[11 42]
[12 41]
[13 40]
[14 39]
[15 38]
[19 34]
[20 33]
[21 32]
[22 31]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
