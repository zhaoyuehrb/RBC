%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCGACGUCAUCGGGGCGCGCCCUCGCGCUGUCGCCGCCACAGUCUGCGACGGGACCCGGCGUGCCC\
) } def
/len { sequence length } bind def

/coor [
[21.79663467 223.21482849]
[18.40841866 224.47615051]
[15.28203011 224.29248047]
[4.31949043 234.53077698]
[-6.64304876 244.76907349]
[-17.60558891 255.00737000]
[-19.58814430 270.92745972]
[-33.34574509 279.18020630]
[-48.32473755 273.43481445]
[-53.03451920 258.09866333]
[-43.86214828 244.93634033]
[-27.84388542 244.04483032]
[-16.88134575 233.80653381]
[-5.91880655 223.56823730]
[5.04373312 213.32994080]
[15.02983475 202.13717651]
[23.95675087 190.08271790]
[32.88366699 178.02824402]
[41.81058502 165.97378540]
[50.73749924 153.91931152]
[59.66441727 141.86483765]
[68.59133148 129.81037903]
[77.51824951 117.75591278]
[71.65740204 104.17119598]
[73.35597992 89.47395325]
[82.16093445 77.58417511]
[95.72385406 71.67304993]
[110.42728424 73.31716919]
[113.15208435 64.23837280]
[120.04508209 60.92963028]
[129.51139832 49.29396057]
[138.97772217 37.65829086]
[148.44404602 26.02262306]
[157.91035461 14.38695335]
[167.37667847 2.75128412]
[176.84300232 -8.88438511]
[179.18034363 -26.99087715]
[195.54748535 -32.90761185]
[204.47439575 -44.96207809]
[205.79841614 -61.30768967]
[220.73005676 -68.08841705]
[233.90892029 -58.32882690]
[231.77772522 -42.06875229]
[216.52886963 -36.03516006]
[207.60195923 -23.98069382]
[209.04057312 -11.75978088]
[201.41325378 -1.59197211]
[188.47866821 0.58193403]
[179.01234436 12.21760368]
[169.54603577 23.85327339]
[160.07971191 35.48894119]
[150.61338806 47.12461090]
[141.14707947 58.76028061]
[131.68075562 70.39595032]
[122.48175049 82.24408722]
[128.34259033 95.82880402]
[126.64402008 110.52604675]
[117.83906555 122.41582489]
[104.27614594 128.32695007]
[89.57271576 126.68283081]
[80.64579773 138.73728943]
[71.71887970 150.79176331]
[62.79196548 162.84622192]
[53.86505127 174.90069580]
[44.93813324 186.95515442]
[36.01121902 199.00962830]
[27.08430099 211.06410217]
[26.75854874 216.20550537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[6 12]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[21 62]
[22 61]
[23 60]
[28 55]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[38 45]
[39 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
