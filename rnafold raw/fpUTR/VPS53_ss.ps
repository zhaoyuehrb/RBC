%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGUGCCGGAGCGGCUGACAGAGCGGCUGACGGAGCCGGGCUCACCAGGUCGCUGCCGCGAGGGAGUUGCUGUGCUGGGGCCUGGGUGGCGGCUGGAGGCCUGAGUUGGGCUCGCGGCGGGGGUCGGCAGGGGGCCGGGUGGCGGA\
) } def
/len { sequence length } bind def

/coor [
[3.78220391 356.79733276]
[-10.85505676 360.07614136]
[-25.60007286 357.32214355]
[-38.06701660 348.98095703]
[-46.23865891 336.40225220]
[-48.79278183 321.62130737]
[-45.31501770 307.02740479]
[-56.78291321 316.69631958]
[-68.25080872 326.36520386]
[-74.06611633 343.80319214]
[-91.40836334 346.28860474]
[-102.66844940 356.19873047]
[-113.92852783 366.10885620]
[-119.17610168 381.03445435]
[-133.84194946 383.63485718]
[-145.10203552 393.54498291]
[-156.36212158 403.45510864]
[-158.81391907 419.30969238]
[-172.80920410 427.15261841]
[-187.61201477 420.96740723]
[-191.86688232 405.49887085]
[-182.30984497 392.61312866]
[-166.27223206 392.19500732]
[-155.01216125 382.28488159]
[-143.75207520 372.37478638]
[-139.30989075 358.15802002]
[-123.83865356 354.84875488]
[-112.57856750 344.93862915]
[-101.31848145 335.02853394]
[-100.21997833 322.93841553]
[-90.85948181 314.59133911]
[-77.91969299 314.89730835]
[-66.45179749 305.22842407]
[-54.98390579 295.55950928]
[-52.02352905 286.48406982]
[-42.34124756 281.79510498]
[-33.67973328 269.54855347]
[-25.01822472 257.30197144]
[-23.98608398 242.44317627]
[-9.70037365 235.64398193]
[-1.03886282 223.39743042]
[7.62264824 211.15086365]
[16.28415871 198.90431213]
[24.94567108 186.65774536]
[26.24918175 179.32983398]
[33.92327118 174.24581909]
[42.84276962 162.18586731]
[41.36948395 150.13568115]
[48.76132965 140.00389099]
[61.47514725 137.57684326]
[70.64861298 125.70892334]
[79.82208252 113.84100342]
[88.99554443 101.97308350]
[98.04253387 90.00846863]
[106.96203613 77.94851685]
[108.94730377 62.25235748]
[122.73612976 56.62052536]
[131.65562439 44.56056595]
[140.57511902 32.50061035]
[149.49462891 20.44065285]
[148.36581421 7.54656649]
[156.10029602 -2.32615042]
[168.09599304 -4.19181585]
[170.41397095 -19.84229660]
[184.31922913 -25.18018913]
[193.49269104 -37.04811096]
[202.66615295 -48.91603088]
[211.83963013 -60.78395081]
[221.01309204 -72.65187073]
[217.02252197 -82.67629242]
[217.58662415 -93.36980438]
[222.53419495 -102.77510834]
[230.89793396 -109.19911194]
[241.10281372 -111.51766205]
[251.26246643 -109.37176514]
[261.17257690 -120.63184357]
[271.08270264 -131.89193726]
[274.39196777 -147.36317444]
[288.60873413 -151.80534363]
[298.51882935 -163.06542969]
[308.42895508 -174.32551575]
[318.33908081 -185.58560181]
[328.24920654 -196.84568787]
[338.15933228 -208.10577393]
[341.32897949 -226.21252441]
[358.11218262 -231.23794556]
[367.78106689 -242.70584106]
[377.44998169 -254.17373657]
[379.80151367 -270.40341187]
[395.13082886 -276.22961426]
[407.66839600 -265.65884399]
[404.51666260 -249.56539917]
[388.91787720 -244.50485229]
[379.24896240 -233.03695679]
[369.58007812 -221.56906128]
[370.28353882 -209.44955444]
[362.26190186 -199.80868530]
[349.41940308 -198.19564819]
[339.50927734 -186.93556213]
[329.59918213 -175.67547607]
[319.68905640 -164.41539001]
[309.77893066 -153.15531921]
[299.86880493 -141.89523315]
[297.26840210 -127.22937775]
[282.34280396 -121.98181152]
[272.43267822 -110.72172546]
[262.52255249 -99.46163940]
[265.25396729 -80.23263550]
[252.85792542 -64.89021301]
[232.88101196 -63.47840500]
[223.70755005 -51.61048508]
[214.53407288 -39.74256516]
[205.36061096 -27.87464333]
[196.18714905 -16.00672340]
[194.52531433 -1.20511639]
[179.96391296 4.98164940]
[178.58714294 22.44690895]
[161.55458069 29.36015129]
[152.63508606 41.42010880]
[143.71559143 53.48006439]
[134.79608154 65.54002380]
[133.44879150 80.37356567]
[119.02198792 86.86801147]
[110.10249329 98.92797089]
[108.20243835 106.82348633]
[100.86346436 111.14654541]
[91.69000244 123.01446533]
[82.51653290 134.88238525]
[73.34307098 146.75030518]
[71.33209991 165.02206421]
[54.90272522 171.10536194]
[45.98323059 183.16531372]
[37.19223022 195.31925964]
[28.53071976 207.56582642]
[19.86920738 219.81237793]
[11.20769691 232.05894470]
[2.54618597 244.30549622]
[0.89451700 260.04025269]
[-12.77166367 265.96350098]
[-21.43317604 278.21005249]
[-30.09468651 290.45660400]
[-15.85089016 285.75402832]
[-0.90649527 287.04440308]
[12.32040787 294.11892700]
[21.68962860 305.83294678]
[25.68517113 320.29098511]
[23.66053391 335.15371704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 34]
[8 33]
[9 32]
[11 29]
[12 28]
[13 27]
[15 25]
[16 24]
[17 23]
[36 141]
[37 140]
[38 139]
[40 137]
[41 136]
[42 135]
[43 134]
[44 133]
[46 132]
[47 131]
[50 129]
[51 128]
[52 127]
[53 126]
[54 124]
[55 123]
[57 121]
[58 120]
[59 119]
[60 118]
[63 116]
[65 114]
[66 113]
[67 112]
[68 111]
[69 110]
[75 107]
[76 106]
[77 105]
[79 103]
[80 102]
[81 101]
[82 100]
[83 99]
[84 98]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
