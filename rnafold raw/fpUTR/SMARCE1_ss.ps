%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCGGACGCGAGGGGCGGGGCGAGCGCGGGACAAAGGGAAGCGAAGCCGGAGCUGCGGGCGCUUUUUCUGCCCGCGGUGUCUCAGAUUCAUUCUUAAGGAACUGAGAACUUAAUCUUCCAAA\
) } def
/len { sequence length } bind def

/coor [
[103.87760925 134.66247559]
[95.36856842 147.01545715]
[86.85953522 159.36845398]
[78.35050201 171.72143555]
[69.84146881 184.07443237]
[61.33243561 196.42741394]
[63.98897934 211.77604675]
[55.18363571 224.18252563]
[40.53468704 226.62054443]
[42.01601410 242.59506226]
[30.35083771 253.60884094]
[14.48768139 251.21304321]
[6.59540272 237.24552917]
[12.72828197 222.42097473]
[28.18169975 218.11151123]
[25.23855209 203.55563354]
[33.69195175 190.90673828]
[48.97944641 187.91838074]
[57.48847961 175.56539917]
[65.99751282 163.21240234]
[74.50654602 150.85942078]
[83.01557922 138.50642395]
[91.52462006 126.15343475]
[77.19345856 106.71326447]
[84.46681213 87.31335449]
[71.03827667 78.94764709]
[71.68711853 64.06717682]
[64.46080780 50.92257690]
[57.23450470 37.77797699]
[50.00820160 24.63337708]
[42.78189468 11.48877716]
[35.55559158 -1.65582263]
[28.60048485 -7.75283957]
[28.31758499 -15.22279835]
[21.42388725 -28.54484558]
[9.32852840 -33.23048019]
[3.88509512 -44.55947495]
[7.54395819 -56.16284943]
[0.98722166 -69.65393066]
[-5.56951475 -83.14500427]
[-12.12625122 -96.63608551]
[-18.68298721 -110.12716675]
[-25.23972511 -123.61824036]
[-31.79646111 -137.10932922]
[-38.35319901 -150.60040283]
[-48.95330048 -153.60542297]
[-55.95742798 -161.82208252]
[-57.19432449 -172.32534790]
[-52.49103165 -181.55041504]
[-58.36163712 -195.35389709]
[-64.23223877 -209.15737915]
[-78.98173523 -214.83433533]
[-85.32053375 -229.31173706]
[-79.48794556 -244.00039673]
[-64.94433594 -250.18577576]
[-50.31817245 -244.19821167]
[-44.28689957 -229.59001160]
[-50.42876434 -215.02798462]
[-44.55815887 -201.22450256]
[-38.68755341 -187.42102051]
[-22.41926003 -177.09217834]
[-24.86211777 -157.15713501]
[-18.30538177 -143.66606140]
[-11.74864578 -130.17497253]
[-5.19190931 -116.68389893]
[1.36482739 -103.19282532]
[7.92156410 -89.70174408]
[14.47830009 -76.21066284]
[21.03503609 -62.71958542]
[36.06482315 -53.75330734]
[34.74593353 -35.43854141]
[41.63963318 -22.11649704]
[48.70019150 -8.88212776]
[55.92649460 4.26247263]
[63.15280151 17.40707207]
[70.37910461 30.55167198]
[77.60541534 43.69627380]
[84.83171844 56.84087372]
[97.74337769 64.26639557]
[97.61141205 80.08705139]
[118.83649445 85.49507904]
[125.55398560 110.14043427]
[140.49598694 111.45819855]
[155.43798828 112.77597046]
[170.37998962 114.09373474]
[185.32200623 115.41150665]
[200.26400757 116.72927094]
[214.69055176 110.23425293]
[226.68888855 119.05973816]
[241.63088989 120.37751007]
[256.57287598 121.69527435]
[266.65924072 109.90352631]
[281.75805664 106.32514191]
[296.06359863 112.33609772]
[304.07504272 125.62505341]
[302.71185303 141.08213806]
[292.49816895 152.76377869]
[277.36141968 156.17814636]
[263.12194824 150.01235962]
[255.25512695 136.63728333]
[240.31312561 135.31951904]
[225.37110901 134.00173950]
[212.01332092 140.59101868]
[198.94622803 131.67127991]
[184.00422668 130.35351562]
[169.06222534 129.03573608]
[154.12022400 127.71797180]
[139.17822266 126.40020752]
[124.23621368 125.08243561]
[136.71728516 133.40246582]
[151.40405273 136.45184326]
[164.10136414 144.43797302]
[173.21051025 156.35534668]
[177.58454895 170.70343018]
[176.67277527 185.67570496]
[170.58998108 199.38699341]
[160.10203552 210.11093140]
[146.52947998 216.49729919]
[131.58120728 217.74197388]
[117.13934326 213.68823242]
[105.02226257 204.84651184]
[96.75559235 192.33003235]
[93.38020325 177.71473694]
[95.32107544 162.84083557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[9 15]
[25 80]
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
[34 72]
[35 71]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[49 60]
[50 59]
[51 58]
[82 109]
[83 108]
[84 107]
[85 106]
[86 105]
[87 104]
[89 102]
[90 101]
[91 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
