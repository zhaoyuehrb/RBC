%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGAGGUAUUCCUUCCCCUCUCAGGACUAGCCACAUGCUGUCUCUCUGCCCUGGCCUCUUCCACCCCAUGCCCAGUCAGAGACCGUUUUGAGGGUAGAGAAGCCAGUCUACGGCCCACCACGGGAGCCACCGCCUGGGCCAGAC\
) } def
/len { sequence length } bind def

/coor [
[85.49107361 131.20745850]
[69.65285492 121.66416931]
[61.42021179 134.20304871]
[53.18756866 146.74192810]
[44.95492554 159.28082275]
[36.72227859 171.81970215]
[28.48963547 184.35858154]
[36.39439392 197.41528320]
[37.84269333 212.60954285]
[32.54697418 226.92449951]
[21.55870438 237.51792908]
[7.05961657 242.28648376]
[-8.07148743 240.28338623]
[-20.83031654 231.90632629]
[-28.68359566 218.81858826]
[-30.07204819 203.61875916]
[-24.71999931 189.32476807]
[-13.69009972 178.77468872]
[0.82765472 174.06326294]
[15.95075417 176.12593079]
[24.18339729 163.58705139]
[32.41604233 151.04817200]
[40.64868546 138.50929260]
[48.88133240 125.97040558]
[57.11397552 113.43152618]
[49.42840576 100.55006409]
[34.48393250 101.83953857]
[19.53945923 103.12901306]
[11.18810463 107.00891876]
[4.26013327 104.28191376]
[-10.70862389 105.24953461]
[-25.67738152 106.21716309]
[-37.30369568 117.27195740]
[-53.17518997 114.93204498]
[-61.11661530 100.99240875]
[-55.03598785 86.14635468]
[-39.59784317 81.78248596]
[-26.64500809 91.24840546]
[-11.67625046 90.28077698]
[3.29250646 89.31315613]
[18.24998665 88.18453979]
[33.19445801 86.89506531]
[48.13893127 85.60559082]
[58.15988922 74.44403839]
[57.83715057 59.44750595]
[57.51440811 44.45098114]
[57.19166565 29.45445251]
[56.86892319 14.45792484]
[56.54618454 -0.53860241]
[56.22344208 -15.53512955]
[55.90069962 -30.53165817]
[55.57795715 -45.52818680]
[55.25521851 -60.52471161]
[53.96574402 -75.46918488]
[51.71491623 -90.29934692]
[41.99442673 -102.78224945]
[47.73432922 -116.52643585]
[45.48349762 -131.35659790]
[43.23266602 -146.18676758]
[40.98183441 -161.01693726]
[26.05275345 -163.46186829]
[12.61080837 -170.40226746]
[1.97290611 -181.15821838]
[-4.81876135 -194.67591858]
[-7.09881496 -209.63107300]
[-4.64387846 -224.55851746]
[2.30553842 -237.99580383]
[13.06860256 -248.62649536]
[26.59085846 -255.40910339]
[41.54753494 -257.67913818]
[56.47332764 -255.21420288]
[69.90596008 -248.25578308]
[80.52943420 -237.48559570]
[87.30297852 -223.95880127]
[89.56298828 -209.00061035]
[87.08805084 -194.07646179]
[80.12063599 -180.64849854]
[69.34333038 -170.03224182]
[55.81200027 -163.26776123]
[58.06283188 -148.43759155]
[60.31365967 -133.60743713]
[62.56449127 -118.77726746]
[72.12398529 -107.35512543]
[66.54507446 -92.55017853]
[68.79590607 -77.72001648]
[78.90027618 -88.80612183]
[93.87368011 -89.69897461]
[105.22387695 -79.89218903]
[106.51353455 -64.94773102]
[97.01122284 -53.34143448]
[82.10622406 -51.65587234]
[70.25174713 -60.84745407]
[70.57448578 -45.85092545]
[70.89722443 -30.85439873]
[71.21997070 -15.85787106]
[71.54270935 -0.86134386]
[71.86545563 14.13518333]
[72.18819427 29.13171196]
[72.51093292 44.12823868]
[72.83367920 59.12476730]
[73.15641785 74.12129211]
[88.25704193 66.12682343]
[104.67559814 65.90377045]
[118.79198456 72.89791870]
[127.76471710 85.02831268]
[130.09942627 99.26085663]
[125.87507629 112.35377502]
[137.24966431 122.13225555]
[148.62425232 131.91073608]
[159.99884033 141.68922424]
[166.52807617 143.31620789]
[170.59748840 147.41316223]
[171.64070129 152.14140320]
[182.58406067 162.40019226]
[193.52743530 172.65899658]
[204.47079468 182.91778564]
[215.41415405 193.17657471]
[226.35751343 203.43536377]
[239.72407532 201.45587158]
[251.60627747 207.46949768]
[257.74398804 219.06787109]
[256.08306885 231.88796997]
[266.80316162 242.37983704]
[277.52325439 252.87171936]
[293.32196045 252.45108032]
[304.73309326 263.38549805]
[304.98666382 279.18774414]
[293.93222046 290.48263550]
[278.12817383 290.56912231]
[266.95077515 279.39590454]
[267.03137207 263.59182739]
[256.31127930 253.09994507]
[245.59118652 242.60806274]
[228.83126831 243.52717590]
[216.32221985 231.83601379]
[216.09872437 214.37872314]
[205.15536499 204.11993408]
[194.21200562 193.86114502]
[183.26864624 183.60235596]
[172.32527161 173.34356689]
[161.38191223 163.08477783]
[150.22035217 153.06381226]
[138.84576416 143.28532410]
[127.47117615 133.50685120]
[116.09659576 123.72835541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[4 23]
[5 22]
[6 21]
[7 20]
[26 43]
[27 42]
[28 41]
[30 40]
[31 39]
[32 38]
[44 101]
[45 100]
[46 99]
[47 98]
[48 97]
[49 96]
[50 95]
[51 94]
[52 93]
[53 92]
[54 85]
[55 84]
[57 82]
[58 81]
[59 80]
[60 79]
[107 145]
[108 144]
[109 143]
[110 142]
[113 141]
[114 140]
[115 139]
[116 138]
[117 137]
[118 136]
[122 133]
[123 132]
[124 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
