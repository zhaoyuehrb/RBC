%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCCCAGAAAACCCGAGCGAGUAGGGGGCGGCGCGCAGGAGGGAGGAGAACUGGGGGCGCGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[178.03039551 322.85598755]
[173.33023071 308.61138916]
[161.99456787 298.94952393]
[165.01802063 283.41989136]
[160.31785583 269.17529297]
[155.61770630 254.93069458]
[150.91754150 240.68609619]
[146.21737671 226.44151306]
[141.51722717 212.19691467]
[123.97579956 209.58819580]
[109.93021393 198.62799072]
[103.07341766 182.09619141]
[105.25831604 164.25054932]
[115.99781036 149.73016357]
[109.40179443 136.25823975]
[102.80577087 122.78633118]
[85.69874573 117.96004486]
[77.16405487 102.36830902]
[82.31748962 85.35697937]
[74.52373505 72.54068756]
[66.72997284 59.72439575]
[52.94872665 51.95343781]
[52.94673920 37.05883408]
[45.15298080 24.24254227]
[31.37173271 16.47158432]
[31.36974525 1.57697999]
[16.73272514 -5.81826687]
[16.08897018 -22.20477295]
[30.10071945 -30.72550774]
[44.35388565 -22.61506844]
[44.18603516 -6.21677923]
[57.40982056 0.63747174]
[57.96926880 16.44878387]
[65.76303101 29.26507568]
[78.98681641 36.11932755]
[79.54626465 51.93063736]
[87.34002686 64.74692535]
[95.13378143 77.56321716]
[106.78113556 78.06588745]
[116.67992401 84.22440338]
[122.27768707 94.45076752]
[122.13099670 106.10803986]
[116.27768707 116.19030762]
[122.87371063 129.66223145]
[129.46972656 143.13414001]
[142.01782227 142.42002869]
[153.99411011 146.11381531]
[163.90383911 153.72865295]
[170.51925659 164.28994751]
[173.03157043 176.46003723]
[171.14991760 188.70759583]
[165.13467407 199.50036621]
[155.76181030 207.49674988]
[160.46197510 221.74134827]
[165.16213989 235.98594666]
[169.86228943 250.23054504]
[174.56245422 264.47512817]
[179.26261902 278.71972656]
[190.93446350 289.40048218]
[187.57482910 303.91125488]
[192.27499390 318.15585327]
[207.09475708 322.75518799]
[216.35377502 335.20712280]
[216.49174500 350.72357178]
[207.45564270 363.33819580]
[192.72001648 368.20037842]
[177.95100403 363.44052124]
[168.82762146 350.88888550]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[4 58]
[5 57]
[6 56]
[7 55]
[8 54]
[9 53]
[14 45]
[15 44]
[16 43]
[19 38]
[20 37]
[21 36]
[23 34]
[24 33]
[26 31]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
