%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCGCGAGCGGCGGCCGCGGGGCCGAGGAGCCUGGGCCGGGCCGGGCGGGGACUACUCCGGAGUCAGGAGGCAGCAGCGGCGGAGGACGAGGAUCUCUGGCAGUCAGCGCCGCUCGGACGCCGCCGGCACC\
) } def
/len { sequence length } bind def

/coor [
[114.52539062 112.58286285]
[113.01774597 121.40644836]
[107.21681976 130.03535461]
[99.16148376 142.68887329]
[91.10614014 155.34237671]
[83.05079651 167.99589539]
[74.99545288 180.64941406]
[72.99582672 189.66246033]
[66.59744263 193.50352478]
[58.24548340 205.96325684]
[57.68923950 222.35296631]
[43.09191895 229.82626343]
[29.46999359 220.69526672]
[30.83653069 204.35314941]
[45.78575516 197.61129761]
[54.13771439 185.15156555]
[62.34193420 172.59407043]
[70.39727783 159.94055176]
[78.45262146 147.28703308]
[86.50796509 134.63352966]
[94.56330872 121.98001099]
[86.50796509 109.32649231]
[71.63436890 111.26974487]
[56.76078033 113.21300507]
[41.88718796 115.15625763]
[29.20568085 124.61617279]
[15.58329391 118.59289551]
[0.70970094 120.53615570]
[-11.97437859 130.93067932]
[-27.22076225 124.89082336]
[-29.34527779 108.62987518]
[-16.16240501 98.87570190]
[-1.23355424 105.66255951]
[13.64003849 103.71930695]
[25.25768661 94.39838409]
[39.94393158 100.28266907]
[54.81752396 98.33940887]
[69.69111633 96.39615631]
[84.56471252 94.45290375]
[98.43978882 88.75359344]
[110.38488007 79.68083954]
[122.22199249 70.46765137]
[133.94946289 61.11530685]
[145.67694092 51.76295853]
[157.40440369 42.41061020]
[169.13188171 33.05826569]
[173.94969177 25.18283844]
[181.24858093 23.62745476]
[193.19367981 14.55470467]
[205.13876343 5.48195553]
[211.44848633 -9.02659607]
[226.26362610 -10.56316757]
[232.57333374 -25.07171822]
[247.38847351 -26.60829163]
[259.33355713 -35.68104172]
[256.16238403 -55.30059052]
[271.50335693 -73.93080902]
[269.73590088 -88.82630920]
[267.96844482 -103.72181702]
[266.20098877 -118.61732483]
[253.02267456 -127.03553009]
[248.38796997 -141.97050476]
[254.48522949 -156.37042236]
[268.43551636 -163.43606567]
[283.65194702 -159.83125305]
[292.94976807 -147.25808716]
[291.93884277 -131.65321350]
[281.09649658 -120.38478088]
[282.86395264 -105.48928070]
[284.63140869 -90.59377289]
[286.39886475 -75.69826508]
[292.42456055 -71.23274231]
[297.19458008 -85.45410156]
[312.19390869 -85.31200409]
[316.69363403 -71.00283051]
[304.47598267 -62.30170441]
[310.50167847 -57.83618164]
[325.26690674 -60.47966385]
[340.03213501 -63.12314987]
[354.79736328 -65.76663208]
[369.56259155 -68.41011810]
[384.32781982 -71.05360413]
[399.09304810 -73.69708252]
[405.50277710 -85.60800171]
[417.44195557 -91.53826904]
[430.41998291 -89.50910950]
[439.69918823 -80.48947906]
[454.52273560 -82.78349304]
[469.34628296 -85.07749939]
[479.85107422 -100.75321960]
[498.14926147 -103.81919861]
[512.68487549 -92.80619812]
[527.38354492 -95.79767609]
[539.29986572 -107.06419373]
[554.93560791 -102.11900330]
[558.20611572 -86.04928589]
[545.74694824 -75.38619232]
[530.37506104 -81.09900665]
[515.67639160 -78.10752106]
[511.53771973 -67.35646820]
[502.60296631 -59.89493179]
[491.04965210 -57.69388962]
[479.76852417 -61.42323685]
[471.64028931 -70.25395203]
[456.81674194 -67.95994568]
[441.99319458 -65.66593170]
[432.69631958 -51.70322800]
[415.85440063 -48.67968369]
[401.73654175 -58.93185425]
[386.97131348 -56.28837204]
[372.20608521 -53.64488983]
[357.44085693 -51.00140381]
[342.67562866 -48.35792160]
[327.91040039 -45.71443558]
[313.14517212 -43.07095337]
[293.65945435 -18.24379158]
[268.40631104 -23.73594856]
[256.46121216 -14.66319942]
[251.00588989 -0.80359191]
[235.33636475 1.38192403]
[229.88104248 15.24153137]
[214.21151733 17.42704773]
[202.26643372 26.49979591]
[190.32133484 35.57254410]
[178.48422241 44.78573608]
[166.75675964 54.13808441]
[155.02928162 63.49042892]
[143.30180359 72.84278107]
[131.57434082 82.19512177]
[128.27478027 88.88884735]
[119.45763397 91.62593842]
[107.51254272 100.69868469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[9 16]
[10 15]
[22 39]
[23 38]
[24 37]
[25 36]
[27 34]
[28 33]
[40 132]
[41 131]
[42 129]
[43 128]
[44 127]
[45 126]
[46 125]
[48 124]
[49 123]
[50 122]
[52 120]
[54 118]
[55 117]
[57 71]
[58 70]
[59 69]
[60 68]
[77 115]
[78 114]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[87 106]
[88 105]
[89 104]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
