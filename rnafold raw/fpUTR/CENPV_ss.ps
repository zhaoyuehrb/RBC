%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCGCAGGCCGGCGGGGGCGCGCCGCGCUGCGAGGCCUGCGCGCCAGGCUGCGGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[98.79203033 110.17627716]
[91.32619476 106.33288574]
[88.97336578 97.86405945]
[79.91629791 85.90707397]
[70.85923004 73.95008087]
[61.80216217 61.99309540]
[52.74509811 50.03610611]
[43.68803024 38.07912064]
[34.63096619 26.12213135]
[25.57390022 14.16514492]
[16.51683235 2.20815706]
[7.45976686 -9.74883080]
[-1.59729910 -21.70581818]
[-13.91971779 -21.02983093]
[-24.84601021 -26.49889565]
[-31.55405617 -36.56478882]
[-32.37882996 -48.51029968]
[-27.22420502 -59.18225861]
[-41.02227020 -66.92331696]
[-41.05654907 -81.81788635]
[-48.87807846 -94.61724854]
[-56.69960403 -107.41661072]
[-64.52113342 -120.21597290]
[-72.34265900 -133.01533508]
[-85.76103210 -143.37794495]
[-79.51796722 -159.14057922]
[-62.64309311 -157.50502014]
[-59.54329681 -140.83686829]
[-51.72177124 -128.03750610]
[-43.90024185 -115.23813629]
[-36.07871246 -102.43877411]
[-28.25718498 -89.63941193]
[-15.01856995 -82.81385040]
[-14.42484188 -67.00378418]
[3.35392165 -64.08818817]
[13.85028553 -49.06700134]
[10.35968876 -30.76288414]
[19.41675377 -18.80589676]
[28.47382164 -6.84890890]
[37.53088760 5.10807848]
[46.58795166 17.06506538]
[55.64501953 29.02205467]
[64.70208740 40.97904205]
[73.75915527 52.93602753]
[82.81621552 64.89301300]
[91.87328339 76.85000610]
[100.93035126 88.80699158]
[110.28269958 100.53446198]
[125.08039093 106.13256836]
[127.33421326 120.85566711]
[136.97602844 132.34632874]
[146.61784363 143.83700562]
[156.25965881 155.32766724]
[172.05201721 158.15267944]
[179.56269836 172.32904053]
[173.03012085 186.98187256]
[157.46554565 190.87075806]
[144.80876160 181.01248169]
[144.76898193 164.96948242]
[135.12716675 153.47880554]
[125.48535919 141.98814392]
[115.84354401 130.49748230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[3 47]
[4 46]
[5 45]
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[13 37]
[18 34]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[50 62]
[51 61]
[52 60]
[53 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
