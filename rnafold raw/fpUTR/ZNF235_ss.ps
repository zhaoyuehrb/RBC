%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGCACUUCCGCUCCAGGAAGGCGAGGUCGGAUCUGAGAUAUCUCCCAGGGAGGUUCACUUCCCCGGAACUCUGCCUUUUCCCAGAAGGAGGAGGGGAAAA\
) } def
/len { sequence length } bind def

/coor [
[137.08708191 148.90065002]
[125.85941315 138.95381165]
[114.63175201 129.00697327]
[103.40409088 119.06013489]
[88.41093445 118.60709381]
[76.60317993 127.85787201]
[71.67193604 135.75012207]
[64.29621124 137.20327759]
[52.21444321 146.09321594]
[40.13267517 154.98315430]
[28.05090904 163.87307739]
[15.96914291 172.76301575]
[13.83923626 188.42312622]
[1.20939505 197.92378235]
[-14.42732143 195.62843323]
[-23.79392624 182.89884949]
[-21.33337784 167.28727722]
[-8.50547791 158.05578613]
[7.07920980 160.68124390]
[19.16097641 151.79132080]
[31.24274445 142.90138245]
[43.32450867 134.01144409]
[55.40627670 125.12151337]
[67.35240173 116.05012512]
[79.16014862 106.79933929]
[78.93360138 91.80104828]
[66.85183716 82.91111755]
[54.77006912 74.02118683]
[42.42531204 65.50021362]
[29.82882690 57.35597992]
[17.23234177 49.21174240]
[2.80618906 54.92714310]
[-12.21583843 51.03891373]
[-22.05746651 39.04216385]
[-22.93438530 23.54988861]
[-14.50940609 10.51918030]
[-0.02210186 4.96061563]
[14.95686245 9.01157379]
[24.66776848 21.11437988]
[25.37657547 36.61525726]
[37.97306061 44.75949478]
[50.56954575 52.90372849]
[55.49666595 52.74786758]
[60.53925705 55.80287552]
[63.66000366 61.93941879]
[75.74176788 70.82935333]
[87.82353973 79.71928406]
[102.27259827 75.69130707]
[108.01284790 61.83311081]
[106.14561462 46.12247849]
[118.16446686 37.32495117]
[123.90471649 23.46675682]
[129.64497375 9.60856342]
[135.38522339 -4.24962950]
[141.12547302 -18.10782242]
[146.86572266 -31.96601486]
[144.18991089 -48.14538956]
[157.03373718 -58.34186172]
[172.18457031 -52.06618118]
[174.05653381 -35.77422333]
[160.72390747 -26.22576332]
[154.98365784 -12.36757088]
[149.24340820 1.49062192]
[143.50315857 15.34881496]
[137.76290894 29.20700836]
[132.02265930 43.06520081]
[134.30047607 57.78460312]
[121.87104034 67.57336426]
[116.13079071 81.43155670]
[119.90970612 91.73433685]
[118.47462463 101.26795197]
[113.35092926 107.83247375]
[124.57859039 117.77931213]
[135.80625916 127.72615814]
[147.03392029 137.67298889]
[170.80709839 139.60261536]
[178.93028259 161.29611206]
[191.76699829 169.05618286]
[204.60371399 176.81625366]
[217.44042969 184.57632446]
[230.27714539 192.33638000]
[243.11387634 200.09645081]
[255.95059204 207.85652161]
[268.78732300 215.61659241]
[284.64559937 213.18876648]
[296.33297729 224.17897034]
[294.88391113 240.15644836]
[281.40997314 248.86465454]
[266.24722290 243.62338257]
[261.02725220 228.45330811]
[248.19052124 220.69323730]
[235.35380554 212.93316650]
[222.51708984 205.17311096]
[209.68035889 197.41304016]
[196.84364319 189.65296936]
[184.00692749 181.89289856]
[171.17021179 174.13282776]
[165.13214111 177.63604736]
[158.23583984 179.01631165]
[151.21081543 178.09320068]
[144.81135559 174.93183899]
[139.73548889 169.83943176]
[136.54887390 163.33575439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 25]
[6 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[26 47]
[27 46]
[28 45]
[29 42]
[30 41]
[31 40]
[48 69]
[49 68]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
