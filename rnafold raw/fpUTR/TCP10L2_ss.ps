%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGACAGAAAGUCCGUUGGAACCGUCGGCUGCUCUCUGGUCUCUGGAGAUGAGGCGGGAGGACUUGGGGACAGCUGUGGGGACACGGCCCAGAUGUUCUGGUCCCAGCAGAAGUGACUGGCGGGGACCAGG\
) } def
/len { sequence length } bind def

/coor [
[237.48400879 260.97509766]
[235.37205505 257.41955566]
[234.47259521 252.94245911]
[224.12141418 242.08644104]
[213.77021790 231.23043823]
[203.41903687 220.37442017]
[189.52238464 225.83448792]
[174.55346680 225.55734253]
[160.79388428 219.55412292]
[150.35284424 208.71104431]
[144.84381104 194.65884399]
[145.13529968 179.52748108]
[151.21398926 165.62333679]
[140.86280823 154.76733398]
[130.51162720 143.91131592]
[120.16043854 133.05531311]
[113.20014954 130.35908508]
[109.69590759 121.81561279]
[95.08444977 123.36170197]
[82.33496094 116.05858612]
[76.27683258 102.67262268]
[79.20482635 88.27429199]
[69.11491394 77.17501831]
[59.02501297 66.07575226]
[50.85331726 61.77526474]
[48.83092499 54.59020233]
[39.00801468 43.25395966]
[29.18510246 31.91771698]
[19.36219215 20.58147240]
[9.53928089 9.24522972]
[-0.28363010 -2.09101415]
[-15.16828251 -7.45363426]
[-17.65541267 -22.13911819]
[-27.47832298 -33.47536087]
[-37.30123520 -44.81160736]
[-47.12414551 -56.14785004]
[-62.00879669 -61.51047134]
[-64.49592590 -76.19595337]
[-74.31884003 -87.53219604]
[-84.14174652 -98.86843872]
[-93.96466064 -110.20468140]
[-103.92177582 -121.42323303]
[-114.01168060 -132.52250671]
[-124.10158539 -143.62178040]
[-139.10963440 -148.62866211]
[-141.94554138 -163.25079346]
[-157.35443115 -161.42158508]
[-170.87918091 -169.02819824]
[-177.31927490 -183.14573669]
[-174.19834900 -198.34571838]
[-162.71646118 -208.78344727]
[-147.28865051 -210.44538879]
[-133.84719849 -202.69250488]
[-127.56063843 -188.50593567]
[-130.84626770 -173.34069824]
[-116.55991364 -169.12771606]
[-113.00231171 -153.71168518]
[-102.91240692 -142.61241150]
[-92.82250214 -131.51313782]
[-85.92835236 -128.65205383]
[-82.62841797 -120.02759552]
[-72.80550385 -108.69135284]
[-62.98259354 -97.35511017]
[-53.15968323 -86.01886749]
[-38.97763062 -81.46708679]
[-35.78790283 -65.97076416]
[-25.96499062 -54.63451767]
[-16.14207840 -43.29827499]
[-6.31916809 -31.96203041]
[7.86288404 -27.41025352]
[11.05261326 -11.91392517]
[20.87552452 -0.57768148]
[30.69843483 10.75856209]
[40.52134705 22.09480667]
[50.34425735 33.43104935]
[60.16716766 44.76729202]
[70.12428284 55.98584366]
[80.21418762 67.08511353]
[90.30409241 78.18438721]
[104.91555023 76.63829803]
[117.66503906 83.94141388]
[123.72316742 97.32737732]
[120.79517365 111.72570801]
[131.01644897 122.70412445]
[141.36763000 133.56013489]
[151.71881104 144.41615295]
[162.07000732 155.27215576]
[176.24763489 149.86193848]
[191.37571716 150.29075623]
[205.14987183 156.46217346]
[215.48385620 167.40733337]
[220.82559204 181.43696594]
[220.39015198 196.40211487]
[214.27505493 210.02323914]
[224.62623596 220.87924194]
[234.97741699 231.73526001]
[245.32859802 242.59126282]
[256.18460083 252.94245911]
[267.52084351 262.76535034]
[278.85711670 272.58828735]
[290.19335938 282.41119385]
[301.52960205 292.23410034]
[312.86584473 302.05700684]
[324.20208740 311.87991333]
[335.53833008 321.70281982]
[351.03463745 324.89254761]
[355.58642578 339.07461548]
[366.92266846 348.89752197]
[378.37500000 358.58483887]
[389.94180298 368.13519287]
[405.64871216 366.38357544]
[417.94143677 376.31661987]
[419.52685547 392.04116821]
[409.46441650 404.22817993]
[393.72396851 405.64727783]
[381.64404297 395.45657349]
[380.39144897 379.70199585]
[368.82464600 370.15164185]
[361.59350586 368.30081177]
[357.09976196 360.23376465]
[345.76351929 350.41085815]
[331.07803345 347.92373657]
[325.71542358 333.03906250]
[314.37915039 323.21615601]
[303.04290771 313.39324951]
[291.70666504 303.57034302]
[280.37042236 293.74743652]
[269.03417969 283.92453003]
[257.69793701 274.10159302]
[246.36170959 264.27868652]
[243.46810913 264.40390015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[6 94]
[13 87]
[14 86]
[15 85]
[16 84]
[18 83]
[22 79]
[23 78]
[24 77]
[26 76]
[27 75]
[28 74]
[29 73]
[30 72]
[31 71]
[33 69]
[34 68]
[35 67]
[36 66]
[38 64]
[39 63]
[40 62]
[41 61]
[42 59]
[43 58]
[44 57]
[46 55]
[98 130]
[99 129]
[100 128]
[101 127]
[102 126]
[103 125]
[104 124]
[105 123]
[107 121]
[108 120]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
