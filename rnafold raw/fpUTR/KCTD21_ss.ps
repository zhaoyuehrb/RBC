%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCAAAGCUGCGCUGGCCGCUCGCGGAGGGAGAGGCUGCAGAGCGAGGGCAGGAGGACUACUUCCAGCAACCCAGUCUCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[173.46354675 125.27835083]
[158.87483215 121.78984070]
[144.28613281 118.30133057]
[129.69743347 114.81282043]
[115.10872650 111.32431030]
[108.05962372 117.07501221]
[99.13957977 118.86194611]
[90.41926575 116.27030945]
[83.92301178 109.90171051]
[81.15883636 101.23454285]
[67.03282928 96.18917084]
[52.90681839 91.14379120]
[38.78080750 86.09841156]
[33.18294525 87.14988708]
[28.30519676 85.91347504]
[24.94140625 83.10699463]
[23.45095444 79.66735840]
[9.95325184 73.12426758]
[-3.54444909 66.58116913]
[-17.04215050 60.03807831]
[-32.83524704 60.98074341]
[-40.91278458 48.46664429]
[-54.41048813 41.92355347]
[-67.90818787 35.38045883]
[-83.70128632 36.32312393]
[-91.77882385 23.80902481]
[-108.66906738 22.34067726]
[-111.93378448 5.70403242]
[-96.85107422 -2.03858280]
[-85.23573303 10.31132317]
[-70.40808105 8.90065384]
[-61.36509323 21.88275909]
[-47.86739349 28.42584991]
[-34.36969376 34.96894455]
[-19.54203987 33.55827332]
[-10.49905777 46.54037857]
[2.99864340 53.08346939]
[16.49634552 59.62656403]
[29.99404526 66.16965485]
[43.82618713 71.97240448]
[57.95219803 77.01777649]
[72.07820892 82.06315613]
[86.20421600 87.10853577]
[105.37899780 81.90083313]
[118.59723663 96.73560333]
[133.18594360 100.22411346]
[147.77464294 103.71262360]
[162.36334229 107.20114136]
[176.95205688 110.68965149]
[191.60136414 113.91420746]
[206.30650330 116.87375641]
[221.01162720 119.83330536]
[235.71676636 122.79285431]
[250.42190552 125.75241089]
[265.12704468 128.71195984]
[279.83218384 131.67150879]
[294.53732300 134.63105774]
[303.80688477 133.24513245]
[309.71557617 137.97204590]
[324.30429077 141.46055603]
[338.89300537 144.94906616]
[347.78842163 132.62268066]
[360.72647095 124.64297485]
[375.73413086 122.22679138]
[390.52291870 125.74258423]
[402.83758545 134.65422058]
[410.80026245 147.60273743]
[413.19671631 162.61358643]
[409.66146851 177.39772034]
[400.73364258 189.70065308]
[387.77465820 197.64630127]
[372.76068115 200.02299500]
[357.98120117 196.46830750]
[345.69000244 187.52429199]
[337.76141357 174.55487061]
[335.40447998 159.53778076]
[320.81579590 156.04927063]
[306.22708130 152.56074524]
[291.57775879 149.33619690]
[276.87261963 146.37664795]
[262.16751099 143.41709900]
[247.46235657 140.45755005]
[232.75721741 137.49800110]
[218.05207825 134.53843689]
[203.34695435 131.57888794]
[188.64181519 128.61933899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[5 45]
[10 43]
[11 42]
[12 41]
[13 40]
[17 39]
[18 38]
[19 37]
[20 36]
[22 34]
[23 33]
[24 32]
[26 30]
[50 86]
[51 85]
[52 84]
[53 83]
[54 82]
[55 81]
[56 80]
[57 79]
[59 78]
[60 77]
[61 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
