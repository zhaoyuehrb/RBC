%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGAGCGCGGAGGCCGCUGGGACGCGGUUCAGCUCAUUCCCUGAGGCCGGCCCGCGUCCCGUCAGGCGCCGCGCGGGGUUAGCGCGGGGUCAGCGGAGGUCAGCGGGGGUCAGCAGCAGCGGCUCCGAGGGCGCGGCGGACGCAGGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[36.30334473 102.54846954]
[21.41556549 100.71705627]
[6.52778816 98.88563538]
[-4.07651711 110.05948639]
[-19.05195236 112.81443787]
[-32.61762238 106.30009460]
[-39.66182709 93.20363617]
[-54.54960632 91.37222290]
[-69.43738556 89.54080963]
[-84.32515717 87.70939636]
[-99.21293640 85.87798309]
[-114.10071564 84.04656219]
[-124.76513672 91.37111664]
[-137.16072083 89.50095367]
[-144.69018555 79.98532104]
[-159.53750610 77.85059357]
[-174.38482666 75.71587372]
[-188.16159058 86.44959259]
[-205.10980225 83.97723389]
[-214.85466003 70.30378723]
[-229.74244690 68.47237396]
[-244.63021851 66.64096069]
[-259.51800537 64.80954742]
[-274.40576172 62.97813034]
[-289.29354858 61.14671707]
[-304.18133545 59.31530380]
[-319.06912231 57.48388672]
[-333.95687866 55.65247345]
[-348.84466553 53.82105637]
[-363.48626709 59.81554794]
[-375.17364502 50.58220673]
[-390.06143188 48.75079346]
[-404.70303345 54.74528503]
[-416.39041138 45.51194382]
[-431.27816772 43.68052673]
[-446.18386841 42.00106049]
[-461.10589600 40.47371674]
[-476.02792358 38.94637299]
[-489.32608032 47.92072678]
[-504.59002686 42.98195648]
[-510.11059570 27.91865730]
[-501.65286255 14.28610802]
[-485.70489502 12.54203033]
[-474.50057983 24.02433395]
[-459.57855225 25.55167770]
[-444.65652466 27.07902336]
[-437.63995361 24.61660957]
[-429.44677734 28.79275131]
[-414.55899048 30.62416458]
[-400.98223877 24.49868011]
[-388.23001099 33.86301422]
[-373.34222412 35.69443130]
[-359.76550293 29.56894493]
[-347.01324463 38.93328094]
[-332.12545776 40.76469421]
[-317.23770142 42.59611130]
[-302.34991455 44.42752457]
[-287.46212769 46.25893784]
[-272.57437134 48.09035492]
[-257.68658447 49.92176819]
[-242.79881287 51.75318527]
[-227.91102600 53.58459854]
[-213.02325439 55.41601181]
[-204.04701233 46.12313843]
[-191.16165161 43.67897415]
[-179.05107117 49.20094299]
[-172.25010681 60.86855316]
[-157.40278625 63.00327682]
[-142.55546570 65.13800049]
[-126.67391968 57.73239899]
[-112.26930237 69.15879059]
[-97.38152313 70.99020386]
[-82.49374390 72.82161713]
[-67.60596466 74.65303040]
[-52.71818924 76.48444366]
[-37.83041382 78.31586456]
[-27.82214355 67.31710815]
[-13.08209515 64.28479004]
[0.77916819 70.58707428]
[8.35920238 83.99786377]
[23.24698067 85.82927704]
[38.13475800 87.66069031]
[56.28255081 77.89943695]
[73.30614471 90.85022736]
[88.27806091 91.76765442]
[100.87607574 85.70287323]
[112.63936615 93.26042938]
[126.88692474 86.38165283]
[139.11714172 94.88288879]
[153.36471558 88.00411987]
[165.59492493 96.50535583]
[180.56684875 97.42277527]
[195.53875732 98.34020233]
[209.78633118 91.46142578]
[222.01654053 99.96266174]
[236.98846436 100.88008881]
[251.23602295 94.00131226]
[263.46624756 102.50255585]
[273.66271973 94.53945923]
[286.14947510 95.64798737]
[294.24685669 104.68529510]
[309.19692993 105.90792847]
[324.14703369 107.13056946]
[336.13110352 97.17971802]
[351.27520752 98.63262177]
[360.68795776 110.11894226]
[375.63806152 111.34158325]
[390.58813477 112.56421661]
[405.53823853 113.78685760]
[420.48831177 115.00949860]
[429.35763550 112.57978821]
[435.72985840 116.41261292]
[450.65191650 117.93995667]
[459.56893921 115.69167328]
[465.86166382 119.65368652]
[480.74945068 121.48509979]
[495.62686157 114.58622742]
[508.88265991 124.24105072]
[506.88043213 140.51750183]
[491.67987061 146.67178345]
[478.91802979 136.37287903]
[464.03024292 134.54145813]
[449.12457275 132.86199951]
[434.20251465 131.33465576]
[419.26568604 129.95957947]
[404.31558228 128.73695374]
[389.36550903 127.51430511]
[374.41540527 126.29167175]
[359.46533203 125.06903076]
[348.31140137 134.87336731]
[333.13244629 133.84642029]
[322.92437744 122.08065796]
[307.97430420 120.85801697]
[293.02420044 119.63538361]
[277.62533569 127.99845886]
[262.54882812 117.47447205]
[249.37214661 124.41886139]
[236.07104492 115.85200500]
[221.09912109 114.93458557]
[207.92245483 121.87897491]
[194.62133789 113.31211853]
[179.64941406 112.39469910]
[164.67750549 111.47727203]
[151.50083923 118.42166138]
[138.19972229 109.85480499]
[125.02304840 116.79920197]
[111.72193909 108.23234558]
[99.12392426 114.29712677]
[87.36063385 106.73957062]
[72.38871765 105.82215118]
[66.14897919 113.03359985]
[57.40575409 116.48019409]
[48.19839859 115.49560547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[7 76]
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[15 69]
[16 68]
[17 67]
[20 63]
[21 62]
[22 61]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[31 52]
[32 51]
[34 49]
[35 48]
[36 46]
[37 45]
[38 44]
[84 150]
[85 149]
[87 147]
[89 145]
[91 143]
[92 142]
[93 141]
[95 139]
[96 138]
[98 136]
[101 134]
[102 133]
[103 132]
[106 129]
[107 128]
[108 127]
[109 126]
[110 125]
[112 124]
[113 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
