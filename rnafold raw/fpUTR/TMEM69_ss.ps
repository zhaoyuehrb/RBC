%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUCCACUUGCCGGAAGUGCCUUUCCAGUGGACCUGGGCUGUUGUUGCGGUUGUUUUCCUUCUCUCCGUGCAACGCUGGCAAGUCUCAAAGUCGCCACAGAAACAUGCCCCUGAUUCAGUGCCUCUGCUUAGCUGUAACAUGUUAAUCAGAACUACCUGGCAUCUUCCUGAACAAGACUUUCAAUAGGGGCCAGU\
) } def
/len { sequence length } bind def

/coor [
[307.08969116 159.39710999]
[288.00656128 157.50541687]
[269.86383057 151.27342224]
[253.63520813 141.03237915]
[240.19233704 127.32878113]
[230.25808716 110.89522552]
[224.36766052 92.61120605]
[209.44816589 94.16326904]
[194.52868652 95.71533966]
[179.60919189 97.26740265]
[164.68971252 98.81946564]
[149.77021790 100.37153625]
[134.85073853 101.92359924]
[119.93125153 103.47566986]
[105.01176453 105.02773285]
[106.60346985 109.74914551]
[106.51077271 115.10787201]
[104.57856750 120.62502289]
[100.77386475 125.79154205]
[95.19054413 130.09733582]
[82.93000031 138.73904419]
[70.66945648 147.38075256]
[58.40891266 156.02246094]
[50.79428864 174.67924500]
[31.48745346 175.61460876]
[19.50872040 184.64289856]
[7.52998781 193.67118835]
[-1.47965539 208.03303528]
[-17.77435303 203.35124207]
[-17.78635406 186.39730835]
[-1.49829876 181.69245911]
[10.48043442 172.66416931]
[22.45916748 163.63587952]
[22.96709061 153.41610718]
[29.15120316 144.98977661]
[39.16037750 141.28788757]
[49.76720428 143.76191711]
[62.02774811 135.12020874]
[74.28829193 126.47850037]
[86.54883575 117.83679199]
[84.16688538 103.02712250]
[69.81494904 98.66570282]
[55.46301651 94.30427551]
[41.11108398 89.94285583]
[26.75915146 85.58143616]
[12.40721798 81.22000885]
[3.27454710 81.71842957]
[-2.13779163 76.67291260]
[-16.41835022 72.08318329]
[-30.69890976 67.49345398]
[-44.97946930 62.90372086]
[-54.50703430 74.71853638]
[-67.66117859 82.29038239]
[-82.66291809 84.59523010]
[-97.48338318 81.32135773]
[-110.11823273 72.91154480]
[-118.85870361 60.50313187]
[-122.52272034 45.77426910]
[-120.61475372 30.71690941]
[-113.39284515 17.36743736]
[-101.83369446 7.53125715]
[-87.50057983 2.53863406]
[-72.33193970 3.06477833]
[-58.37921143 9.03853416]
[-47.52938080 19.65199852]
[-41.24980164 33.46978760]
[-40.38973618 48.62316132]
[-26.10917854 53.21289444]
[-11.82861900 57.80262375]
[2.45193982 62.39235687]
[16.76864052 66.86807251]
[31.12057495 71.22949982]
[45.47250748 75.59091949]
[59.82444000 79.95234680]
[74.17637634 84.31376648]
[88.52830505 88.67519379]
[103.45969391 90.10824585]
[118.37918091 88.55618286]
[133.29867554 87.00411224]
[148.21815491 85.45204926]
[163.13764954 83.89997864]
[178.05712891 82.34791565]
[192.97662354 80.79585266]
[207.89610291 79.24378204]
[222.81559753 77.69171906]
[223.45184326 66.40714264]
[225.61549377 55.31572723]
[229.26585388 44.62318802]
[234.33464050 34.52777863]
[240.72732544 25.21659660]
[248.32482910 16.86212540]
[256.98574829 9.61903572]
[266.54898071 3.62132168]
[276.83682251 -1.02017844]
[287.65808105 -4.21982813]
[298.81179810 -5.91877413]
[310.09091187 -6.08602858]
[321.28613281 -4.71903515]
[332.18972778 -1.84370434]
[342.59951782 2.48607635]
[352.32250977 8.18945217]
[361.17855835 15.16011143]
[369.00366211 23.26826668]
[375.65301514 32.36307144]
[381.00363159 42.27542496]
[384.95669556 52.82111740]
[387.43939209 63.80426407]
[388.40618896 75.02091217]
[403.36755371 76.09642029]
[418.32894897 77.17193604]
[433.29034424 78.24744415]
[448.25173950 79.32295227]
[463.21313477 80.39846802]
[478.17453003 81.47397614]
[488.74740601 76.76089478]
[498.04409790 81.15708923]
[512.96356201 79.60501862]
[527.88305664 78.05295563]
[542.80255127 76.50088501]
[557.72204590 74.94882202]
[572.56781006 72.80333710]
[587.31628418 70.06784058]
[602.06475830 67.33235168]
[616.81317139 64.59685516]
[631.38610840 61.04286575]
[645.73803711 56.68144226]
[660.08996582 52.32001877]
[674.44189453 47.95859528]
[685.39611816 36.54302216]
[699.82324219 40.24543762]
[714.17517090 35.88401413]
[728.52709961 31.52259064]
[742.87902832 27.16116714]
[757.23095703 22.79974365]
[762.18005371 8.09308052]
[774.84783936 -0.86838233]
[790.36322021 -0.63878012]
[802.76019287 8.69360065]
[807.27197266 23.54026985]
[802.16363525 38.19237900]
[789.39941406 47.01589203]
[773.88745117 46.61799240]
[761.59240723 37.15167618]
[747.24047852 41.51309967]
[732.88848877 45.87452316]
[718.53656006 50.23594666]
[704.18463135 54.59737015]
[694.25695801 65.70098114]
[678.80328369 62.31052780]
[664.45135498 66.67195129]
[650.09942627 71.03337860]
[635.74749756 75.39479828]
[648.98034668 82.45820618]
[654.70159912 96.32425690]
[650.29980469 110.66385651]
[637.78417969 118.93177032]
[622.86737061 117.35414886]
[612.35809326 106.65108490]
[611.05328369 91.70793915]
[619.54870605 79.34531403]
[604.80023193 82.08081055]
[590.05175781 84.81630707]
[575.30328369 87.55179596]
[585.95269775 98.11540985]
[584.49664307 113.04457092]
[572.00671387 121.35132599]
[557.67565918 116.92185974]
[552.05114746 103.01628113]
[559.27410889 89.86830902]
[544.35461426 91.42037201]
[529.43511963 92.97244263]
[514.51562500 94.52450562]
[499.59616089 96.07657623]
[512.54992676 103.63964844]
[521.13635254 115.93898010]
[523.77148438 130.70570374]
[519.96923828 145.21580505]
[510.43099976 156.79260254]
[496.91632080 163.30052185]
[481.91821289 163.53906250]
[468.20339966 157.46421814]
[458.30184937 146.19659424]
[454.04006958 131.81475830]
[456.20428467 116.97170258]
[464.39520264 104.40554047]
[477.09902954 96.43537140]
[462.13763428 95.35985565]
[447.17623901 94.28434753]
[432.21484375 93.20883942]
[417.25344849 92.13332367]
[402.29205322 91.05781555]
[387.33065796 89.98230743]
[382.09329224 108.38904572]
[372.75979614 125.10356140]
[359.82791138 139.22825623]
[343.98876953 150.00381470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 85]
[8 84]
[9 83]
[10 82]
[11 81]
[12 80]
[13 79]
[14 78]
[15 77]
[20 40]
[21 39]
[22 38]
[23 37]
[25 33]
[26 32]
[27 31]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[46 71]
[48 70]
[49 69]
[50 68]
[51 67]
[108 192]
[109 191]
[110 190]
[111 189]
[112 188]
[113 187]
[114 186]
[116 173]
[117 172]
[118 171]
[119 170]
[120 169]
[121 163]
[122 162]
[123 161]
[124 160]
[125 152]
[126 151]
[127 150]
[128 149]
[130 147]
[131 146]
[132 145]
[133 144]
[134 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
