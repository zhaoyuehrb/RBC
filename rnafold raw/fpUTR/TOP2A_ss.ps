%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUGGCUGGUCUGCUUCGGGCGGGCUAAAGGAAGGUUCAAGUGGAGCUCUCCUAACCGACGCGCGUCUGUGGAGAAGCGGCUUGGUCGGGGGUGGUCUCGUGGGGUCCUGCCUGUUUAGUCGCUUUCAGGGUUCUUGAGCCCCUUCACGACCGUCACC\
) } def
/len { sequence length } bind def

/coor [
[103.41747284 139.93911743]
[89.17308044 139.40252686]
[75.74837494 133.84997559]
[66.93160248 145.98522949]
[58.11482239 158.12048340]
[49.29804230 170.25573730]
[40.48126221 182.39099121]
[31.66448402 194.52624512]
[29.81255341 210.23869324]
[16.07204437 215.98739624]
[7.25526524 228.12265015]
[-1.56151342 240.25790405]
[-10.37829208 252.39315796]
[-19.19507027 264.52841187]
[-23.61348724 280.89648438]
[-40.56503296 281.18188477]
[-45.53192520 264.97180176]
[-31.33032608 255.71163940]
[-22.51354790 243.57638550]
[-13.69676876 231.44113159]
[-4.87998962 219.30587769]
[3.93678927 207.17062378]
[5.15808439 192.32617188]
[19.52923012 185.70945740]
[28.34600830 173.57420349]
[37.16278839 161.43894958]
[45.97956467 149.30369568]
[54.79634476 137.16844177]
[63.61312485 125.03318787]
[57.33322906 111.41104126]
[42.37946701 110.23415375]
[27.42570686 109.05726624]
[12.47194767 107.88037872]
[-1.89274502 114.51108551]
[-13.97372150 105.79906464]
[-28.92748070 104.62217712]
[-43.88124084 103.44528961]
[-58.83500290 102.26840210]
[-73.78876495 101.09151459]
[-86.87271881 110.37535095]
[-102.24832153 105.79599762]
[-108.12071991 90.86634064]
[-99.98510742 77.03914642]
[-84.08243561 74.92144012]
[-72.61187744 86.13775635]
[-57.65811539 87.31464386]
[-42.70435333 88.49153137]
[-27.75059509 89.66841888]
[-12.79683495 90.84530640]
[0.49826458 84.13042450]
[13.64883423 92.92662048]
[28.60259438 94.10350800]
[43.55635452 95.28039551]
[58.51011276 96.45728302]
[65.56804657 78.57829285]
[79.61310577 66.21120453]
[97.25767517 61.72443008]
[114.51378632 65.65625000]
[127.69336700 76.69342804]
[140.92218018 69.62247467]
[154.15100098 62.55152512]
[167.37982178 55.48057556]
[170.18499756 50.95568848]
[174.07063293 48.26244354]
[178.14358521 47.50417709]
[181.60218811 48.40892410]
[195.22433472 42.12902832]
[208.84648132 35.84913254]
[215.37123108 29.38087273]
[222.79829407 29.58260155]
[236.54110718 23.57136917]
[250.28392029 17.56013680]
[264.02673340 11.54890347]
[277.76956177 5.53767157]
[291.51239014 -0.47356111]
[309.81893921 -37.90619278]
[320.83377075 -48.08820343]
[331.84860229 -58.27021408]
[342.86346436 -68.45222473]
[353.87829590 -78.63423920]
[364.89312744 -88.81624603]
[375.90795898 -98.99826050]
[386.92279053 -109.18026733]
[384.28820801 -122.73971558]
[388.67565918 -135.72303772]
[398.83325195 -144.76074219]
[412.02658081 -147.56356812]
[424.77444458 -143.50163269]
[435.98706055 -153.46540833]
[447.19970703 -163.42919922]
[458.41232300 -173.39299011]
[463.58853149 -188.34347534]
[478.24182129 -191.01390076]
[482.60797119 -199.09768677]
[489.77377319 -201.06060791]
[501.17987061 -210.80232239]
[506.64862061 -225.64830017]
[521.35150146 -228.03051758]
[532.75756836 -237.77223206]
[544.16369629 -247.51396179]
[552.28106689 -262.39831543]
[568.83087158 -258.71856689]
[569.87634277 -241.79689026]
[553.90539551 -236.10786438]
[542.49932861 -226.36614990]
[531.09320068 -216.62443542]
[526.44030762 -202.47523499]
[510.92160034 -199.39622498]
[499.51550293 -189.65451050]
[488.20559692 -179.80128479]
[483.83135986 -165.56346130]
[468.37609863 -162.18035889]
[457.16348267 -152.21658325]
[445.95086670 -142.25279236]
[434.73822021 -132.28900146]
[436.87768555 -116.03720856]
[428.84460449 -101.55850220]
[413.62130737 -94.63498688]
[397.10482788 -98.16543579]
[386.08996582 -87.98342133]
[375.07513428 -77.80140686]
[364.06030273 -67.61940002]
[353.04547119 -57.43738937]
[342.03063965 -47.25537491]
[331.01577759 -37.07336426]
[320.00094604 -26.89135361]
[320.36895752 -19.40038872]
[333.71170044 -12.54685688]
[321.10498047 -4.41845655]
[321.47299194 3.07250953]
[333.43280029 12.12584877]
[345.39260864 21.17918777]
[357.35241699 30.23252678]
[369.31222534 39.28586578]
[385.64297485 40.78190994]
[392.26611328 55.78411102]
[382.36831665 68.85948944]
[366.13159180 66.55722046]
[360.25888062 51.24567413]
[348.29907227 42.19233704]
[336.33926392 33.13899612]
[324.37945557 24.08565903]
[312.41964722 15.03231907]
[297.52362061 13.26925850]
[283.78079224 19.28049088]
[270.03796387 25.29172325]
[256.29516602 31.30295563]
[242.55233765 37.31418991]
[228.80952454 43.32542038]
[215.12637329 49.47128296]
[201.50422668 55.75117874]
[187.88208008 62.03107452]
[174.45077515 68.70939636]
[161.22195435 75.78034210]
[147.99313354 82.85129547]
[134.76431274 89.92224884]
[136.87934875 102.63634491]
[134.39477539 115.56163025]
[127.43427277 127.05300140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 29]
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[30 54]
[31 53]
[32 52]
[33 51]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[59 156]
[60 155]
[61 154]
[62 153]
[66 152]
[67 151]
[68 150]
[70 149]
[71 148]
[72 147]
[73 146]
[74 145]
[75 144]
[76 126]
[77 125]
[78 124]
[79 123]
[80 122]
[81 121]
[82 120]
[83 119]
[88 115]
[89 114]
[90 113]
[91 112]
[93 110]
[95 109]
[96 108]
[98 106]
[99 105]
[100 104]
[130 143]
[131 142]
[132 141]
[133 140]
[134 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
