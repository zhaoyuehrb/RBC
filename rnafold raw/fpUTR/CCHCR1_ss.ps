%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCCACUAUGUGUUAGGACUCGAGAAAGAGGAGGCGGGCAGCAGGCAUGGAAGCUAAGGGGAUAGUAGAGAGAAGCUGAGAGAACAGCCGCAGGAAAGAUUUGAAUAAGAUGUCAGGACGCUGGCUUUUCUGCCUGGGGAUCUAGGCGGCCUGGAUUCCCAAGGUCUUGGGGAGGGUCUAGCCCUGC\
) } def
/len { sequence length } bind def

/coor [
[-127.65131378 360.13269043]
[-132.29971313 361.29794312]
[-142.27508545 372.50024414]
[-152.25044250 383.70257568]
[-162.22581482 394.90490723]
[-172.20118713 406.10723877]
[-175.60025024 421.55899048]
[-189.84259033 425.91848755]
[-199.81794739 437.12081909]
[-196.70799255 443.32983398]
[-195.11019897 450.06903076]
[-195.10166931 456.97680664]
[-196.67449951 463.68435669]
[-199.73655701 469.83557129]
[-204.11686707 475.10583496]
[-209.57518005 479.21917725]
[-215.81506348 481.96270752]
[-222.50006104 483.19769287]
[-229.27180481 482.86639404]
[-235.76921082 480.99493408]
[-241.64778137 477.69125366]
[-253.17379761 487.29077148]
[-264.69982910 496.89028931]
[-265.88531494 512.65008545]
[-277.92172241 522.89215088]
[-293.66809082 521.54010010]
[-303.78231812 509.39605713]
[-302.26388550 493.66488647]
[-290.01358032 483.67959595]
[-274.29934692 485.36428833]
[-262.77331543 475.76473999]
[-251.24731445 466.16522217]
[-252.02630615 442.62683105]
[-235.04983521 425.93838501]
[-211.02027893 427.14544678]
[-201.04490662 415.94311523]
[-198.35934448 401.29263306]
[-183.40350342 396.13186646]
[-173.42813110 384.92953491]
[-163.45277405 373.72720337]
[-153.47740173 362.52490234]
[-143.50202942 351.32257080]
[-133.71324158 339.95684814]
[-124.11371613 328.43081665]
[-114.51419067 316.90481567]
[-104.91465759 305.37878418]
[-95.31513214 293.85278320]
[-96.91933441 279.08923340]
[-87.34824371 267.26345825]
[-71.85200500 265.68093872]
[-62.25247574 254.15492249]
[-52.65295029 242.62890625]
[-43.05342102 231.10289001]
[-44.65762329 216.33934021]
[-35.08652878 204.51358032]
[-19.59029198 202.93104553]
[-9.99076462 191.40502930]
[-14.52968502 175.63778687]
[-8.72407246 160.11425781]
[5.32611942 151.01425171]
[22.19792366 152.08583069]
[31.60556984 140.40266418]
[41.01321411 128.71951294]
[50.42086029 117.03635406]
[59.82850647 105.35319519]
[49.78124237 116.49108124]
[35.80734634 121.94362640]
[20.87186623 120.55387878]
[8.14388371 112.61672211]
[0.32408440 99.81629944]
[-0.92828804 84.86867523]
[4.65250111 70.94549561]
[15.88229275 61.00106430]
[30.37829399 57.14542770]
[45.06467438 60.19669724]
[56.82520294 69.50743866]
[63.16443634 83.10186768]
[57.59647751 69.17355347]
[52.02851868 55.24524307]
[46.46055984 41.31693268]
[31.83847427 35.31942368]
[25.81713867 20.70713234]
[31.96890831 6.14927101]
[46.64404297 0.28276265]
[61.13605118 6.58810139]
[66.84707642 21.32444191]
[60.38887024 35.74897385]
[65.95683289 49.67728424]
[71.52478790 63.60559464]
[77.09275055 77.53390503]
[93.15284729 71.78376007]
[108.14909363 75.32588959]
[116.76402283 63.04652023]
[125.37895203 50.76714706]
[133.99388123 38.48777390]
[142.60881042 26.20840263]
[151.22373962 13.92902946]
[159.83866882 1.64965761]
[168.45359802 -10.62971497]
[157.17730713 -19.95777512]
[154.69090271 -38.93306732]
[160.48838806 -52.76741409]
[166.28587341 -66.60176086]
[172.08335876 -80.43611145]
[167.36041260 -95.76821136]
[176.52148438 -108.93841553]
[192.53897095 -109.84368134]
[203.12564087 -97.78955078]
[200.16029358 -82.02293396]
[185.91770935 -74.63861847]
[180.12022400 -60.80427551]
[174.32272339 -46.96992874]
[168.52523804 -33.13558197]
[180.73297119 -24.41942978]
[191.93528748 -34.39479828]
[203.13761902 -44.37016678]
[214.33993530 -54.34553528]
[225.54226685 -64.32089996]
[230.17927551 -80.05081177]
[246.18164062 -83.63644409]
[257.08746338 -71.38921356]
[251.67779541 -55.90801239]
[235.51762390 -53.11857986]
[224.31530762 -43.14321136]
[213.11299133 -33.16784286]
[201.91065979 -23.19247627]
[190.70834351 -13.21710682]
[180.73297119 -2.01478481]
[172.11804199 10.26458740]
[163.50311279 22.54396057]
[154.88818359 34.82333374]
[146.27325439 47.10270309]
[137.65832520 59.38207626]
[129.04339600 71.66144562]
[120.42846680 83.94081879]
[124.36024475 90.95578766]
[125.95893860 98.83695221]
[140.49993896 102.51923370]
[155.04095459 106.20152283]
[169.58195496 109.88380432]
[184.12295532 113.56608582]
[198.66395569 117.24836731]
[213.20497131 120.93064880]
[227.74597168 124.61293030]
[242.28697205 128.29521179]
[256.82797241 131.97749329]
[271.36898804 135.65977478]
[285.90997314 139.34205627]
[302.74874878 137.36901855]
[309.30609131 153.00350952]
[296.09786987 163.63265991]
[282.22769165 153.88305664]
[267.68670654 150.20077515]
[253.14569092 146.51849365]
[238.60469055 142.83621216]
[224.06369019 139.15393066]
[209.52268982 135.47164917]
[194.98167419 131.78936768]
[180.44067383 128.10708618]
[165.89967346 124.42480469]
[151.35867310 120.74252319]
[136.81765747 117.06024170]
[122.27665710 113.37796021]
[108.87763214 126.57479858]
[88.70902252 127.85011292]
[71.51166534 114.76083374]
[62.10401917 126.44399261]
[52.69637299 138.12715149]
[43.28872681 149.81031799]
[33.88108444 161.49346924]
[38.46685410 174.50277710]
[36.04030991 187.97152710]
[27.34145737 198.39611816]
[14.72758102 203.11875916]
[1.53525221 201.00454712]
[-8.06427574 212.53056335]
[-6.81773901 228.05744934]
[-16.71721840 239.60971069]
[-31.52740288 240.70240784]
[-41.12693024 252.22842407]
[-50.72645950 263.75445557]
[-60.32598877 275.28045654]
[-59.07945251 290.80734253]
[-68.97892761 302.35961914]
[-83.78911591 303.45230103]
[-93.38864136 314.97833252]
[-102.98817444 326.50433350]
[-112.58769989 338.03036499]
[-122.18722534 349.55636597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[4 40]
[5 39]
[6 38]
[8 36]
[9 35]
[21 32]
[22 31]
[23 30]
[43 189]
[44 188]
[45 187]
[46 186]
[47 185]
[50 182]
[51 181]
[52 180]
[53 179]
[56 176]
[57 175]
[61 170]
[62 169]
[63 168]
[64 167]
[65 166]
[77 90]
[78 89]
[79 88]
[80 87]
[92 135]
[93 134]
[94 133]
[95 132]
[96 131]
[97 130]
[98 129]
[99 128]
[101 113]
[102 112]
[103 111]
[104 110]
[114 127]
[115 126]
[116 125]
[117 124]
[118 123]
[137 163]
[138 162]
[139 161]
[140 160]
[141 159]
[142 158]
[143 157]
[144 156]
[145 155]
[146 154]
[147 153]
[148 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
