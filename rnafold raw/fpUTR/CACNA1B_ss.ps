%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGCGGCUGCGGCGGUGGGGCCGGGCGAGGUCCGCUGCGGUCCCGGCGGCUCCGUGGCUGCUCCGCUCUGAGCGCCUGGCGCGCCCCGCGCCCUCCCUGCCGGGGCCGCUGGGCCGGGGAUGCACGCGGGGCCCGGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[26.02322578 107.37600708]
[11.03711414 108.02134705]
[-3.94899750 108.66667938]
[-18.93511009 109.31201172]
[-27.44565392 112.82903290]
[-34.24988937 109.80649567]
[-49.24641418 110.12923431]
[-64.24294281 110.45197296]
[-79.23947144 110.77471924]
[-94.23600006 111.09745789]
[-109.23252869 111.42019653]
[-124.22905731 111.74294281]
[-139.22558594 112.06568146]
[-154.22210693 112.38842773]
[-169.21864319 112.71116638]
[-184.21516418 113.03390503]
[-199.19346619 113.84043121]
[-214.13793945 115.12990570]
[-227.22189331 124.02489471]
[-240.56718445 117.41033173]
[-255.51165771 118.69980621]
[-270.45611572 119.98927307]
[-285.40060425 121.27874756]
[-300.34506226 122.56822205]
[-315.28955078 123.85768890]
[-330.23400879 125.14716339]
[-345.17849731 126.43663788]
[-360.10821533 127.88681793]
[-375.02148438 129.49754333]
[-389.93475342 131.10826111]
[-404.84802246 132.71897888]
[-415.98797607 144.26371765]
[-431.94543457 142.60881042]
[-440.47921753 129.02374268]
[-435.04293823 113.92981720]
[-419.80685425 108.90581512]
[-406.45874023 117.80570984]
[-391.54547119 116.19498444]
[-376.63220215 114.58426666]
[-361.71893311 112.97354889]
[-355.36047363 109.10012817]
[-346.46795654 111.49216461]
[-331.52349854 110.20269012]
[-316.57901001 108.91322327]
[-301.63455200 107.62374878]
[-286.69006348 106.33427429]
[-271.74560547 105.04480743]
[-256.80111694 103.75533295]
[-241.85665894 102.46585846]
[-229.84162903 93.66310120]
[-215.42741394 100.18543243]
[-200.48294067 98.89595795]
[-197.91853333 96.37712860]
[-193.97859192 95.01225281]
[-189.23660278 95.44683838]
[-184.53790283 98.03737640]
[-169.54138184 97.71463776]
[-154.54484558 97.39189911]
[-139.54832458 97.06915283]
[-124.55179596 96.74641418]
[-109.55526733 96.42367554]
[-94.55873871 96.10092926]
[-79.56221008 95.77819061]
[-64.56568146 95.45544434]
[-49.56915665 95.13270569]
[-34.57263184 94.80996704]
[-19.58044243 94.32589722]
[-4.59433079 93.68056488]
[10.39178085 93.03523254]
[25.37789345 92.38990021]
[30.08827400 83.12982941]
[38.30492783 76.64012909]
[48.56209946 74.16501617]
[58.99343491 76.22470093]
[67.67155457 82.50783539]
[72.96417236 91.91641998]
[87.96069336 92.23916626]
[100.30819702 85.67937469]
[112.36204529 92.76430511]
[127.35857391 93.08705139]
[142.35510254 93.40979004]
[157.35162354 93.73252869]
[172.34815979 94.05527496]
[177.04685974 91.46472931]
[181.78884888 91.03015137]
[185.72877502 92.39501953]
[188.29318237 94.91385651]
[203.23765564 96.20333099]
[218.18212891 97.49279785]
[233.12660217 98.78227234]
[248.07107544 100.07174683]
[263.01556396 101.36121368]
[277.96002197 102.65068817]
[292.90451050 103.94016266]
[304.93295288 94.04299164]
[320.07040405 95.56359100]
[329.43170166 107.09188080]
[344.38919067 108.22049713]
[359.35794067 109.18812561]
[374.32672119 110.15574646]
[389.29547119 111.12337494]
[404.26422119 112.09100342]
[419.23297119 113.05863190]
[434.21127319 113.86515808]
[449.19738770 114.51049042]
[463.31765747 107.37406921]
[475.70028687 115.65176392]
[490.68640137 116.29709625]
[504.97003174 108.24044800]
[518.94958496 116.81394196]
[518.24401855 133.19790649]
[503.57922363 140.53791809]
[490.04104614 131.28320312]
[475.05493164 130.63787842]
[462.00659180 137.82044983]
[448.55206299 129.49659729]
[433.56594849 128.85127258]
[426.69827271 131.72671509]
[418.26535034 128.02738953]
[403.29660034 127.05976105]
[388.32785034 126.09213257]
[373.35906982 125.12450409]
[358.39031982 124.15688324]
[343.42156982 123.18925476]
[336.49359131 125.91626740]
[328.14224243 122.03635406]
[316.94458008 131.79072571]
[301.77038574 130.69590759]
[291.61502075 118.88462830]
[276.67056274 117.59516144]
[261.72607422 116.30568695]
[246.78160095 115.01621246]
[231.83712769 113.72674561]
[216.89265442 112.43727112]
[201.94818115 111.14779663]
[187.00370789 109.85832977]
[172.02542114 109.05180359]
[157.02888489 108.72905731]
[142.03236389 108.40631866]
[127.03582764 108.08358002]
[112.03930664 107.76083374]
[99.69180298 114.32062531]
[87.63795471 107.23569489]
[72.64142609 106.91294861]
[58.99343491 121.56495667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[6 66]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 52]
[18 51]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 40]
[29 39]
[30 38]
[31 37]
[76 144]
[77 143]
[79 141]
[80 140]
[81 139]
[82 138]
[83 137]
[87 136]
[88 135]
[89 134]
[90 133]
[91 132]
[92 131]
[93 130]
[94 129]
[97 126]
[98 124]
[99 123]
[100 122]
[101 121]
[102 120]
[103 119]
[104 117]
[105 116]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
