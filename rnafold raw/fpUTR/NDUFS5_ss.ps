%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCAAACGUCUCGCUGAGGUCAUCCUUUACGGCAGGCGUCCGCGUCGCUAGCUAGUCGUUCUGAAGCGGCGGCCAGAGAAGAGUCAAGGGCACGAGCAUCGGGUAGCC\
) } def
/len { sequence length } bind def

/coor [
[95.14021301 193.36622620]
[94.71572876 178.37222290]
[94.29124451 163.37823486]
[93.86676025 148.38424683]
[93.44227600 133.39025879]
[83.16643524 129.57267761]
[74.63755035 122.68609619]
[68.74076080 113.44516754]
[53.99387360 116.18913269]
[39.24699020 118.93310547]
[24.50010300 121.67707062]
[9.75321770 124.42103577]
[-4.99366808 127.16500854]
[-12.99539661 131.87448120]
[-20.19632530 129.77175903]
[-35.01495743 132.09732056]
[-49.83358765 134.42286682]
[-64.65222168 136.74841309]
[-79.35879517 139.70079041]
[-93.92682648 143.27465820]
[-108.49485016 146.84854126]
[-119.95346832 158.58021545]
[-135.77359009 154.26097107]
[-139.68083191 138.33409119]
[-127.65575409 127.18377686]
[-112.06873322 132.28051758]
[-97.50070190 128.70663452]
[-82.93267822 125.13275909]
[-80.77130890 122.17213440]
[-76.99908447 120.17800140]
[-72.11930847 119.92819977]
[-66.97776794 121.92977905]
[-52.15913773 119.60423279]
[-37.34050751 117.27868652]
[-22.52187538 114.95313263]
[-7.73763609 112.41812134]
[7.00924969 109.67415619]
[21.75613594 106.93018341]
[36.50302124 104.18621826]
[51.24990845 101.44225311]
[65.99679565 98.69828033]
[69.33659363 82.57464600]
[80.12885284 69.37194061]
[96.34327698 62.42739487]
[114.51628113 63.81215286]
[117.46865845 49.10557556]
[120.42102814 34.39899445]
[123.37340546 19.69241524]
[126.32577515 4.98583508]
[129.27815247 -9.72074509]
[132.23052979 -24.42732430]
[125.59185791 -33.27501297]
[125.01490021 -44.09956741]
[130.44908142 -53.22218323]
[139.84234619 -57.67927170]
[143.62202454 -72.19526672]
[147.40168762 -86.71125793]
[140.55485535 -101.21988678]
[147.75825500 -115.55482483]
[163.48606873 -118.71953583]
[175.67326355 -108.28632355]
[174.97085571 -92.25865936]
[161.91769409 -82.93158722]
[158.13801575 -68.41559601]
[154.35835266 -53.89960098]
[160.96182251 -35.81842422]
[146.93710327 -21.47495079]
[143.98472595 -6.76837063]
[141.03236389 7.93820906]
[138.07998657 22.64478874]
[135.12760925 37.35136795]
[132.17523193 52.05794907]
[129.22285461 66.76452637]
[138.64616394 78.43506622]
[153.64465332 78.64732361]
[168.64315796 78.85958862]
[177.97821045 66.60548401]
[192.56834412 62.24876022]
[206.75840759 67.25937653]
[215.17628479 79.51813507]
[230.17478943 79.73040009]
[244.21978760 71.26460266]
[258.44110107 79.43078613]
[258.20901489 95.82829285]
[243.76232910 103.58876801]
[229.96252441 94.72889709]
[214.96401978 94.51663971]
[206.20260620 106.53227234]
[191.87643433 111.13932037]
[177.41542053 106.37145996]
[168.43089294 93.85808563]
[153.43240356 93.64582825]
[138.43389893 93.43356323]
[135.37408447 109.03410339]
[126.68670654 121.11237335]
[136.11000061 132.78291321]
[145.53330994 144.45344543]
[160.18803406 152.97842407]
[156.05305481 169.42039490]
[139.10896301 169.99858093]
[133.86277771 153.87673950]
[124.43946838 142.20620728]
[115.01617432 130.53567505]
[111.78900146 131.92071533]
[108.43627167 132.96577454]
[108.86075592 147.95976257]
[109.28524017 162.95375061]
[109.70972443 177.94773865]
[110.13420105 192.94174194]
[112.86913300 212.12950134]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[3 107]
[4 106]
[5 105]
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[13 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 28]
[20 27]
[21 26]
[45 73]
[46 72]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[55 65]
[56 64]
[57 63]
[74 93]
[75 92]
[76 91]
[80 87]
[81 86]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
