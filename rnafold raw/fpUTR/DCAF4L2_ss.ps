%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCUUCCGUGCCAAGUCGUGCUUGUAAAGAAGCGGUACUUCCUCUUACUCCCGGGACAGAACUUCCCCUCAGGAGGGAGAACAUCCGCCGAACGAA\
) } def
/len { sequence length } bind def

/coor [
[108.24073029 164.26551819]
[106.80038452 149.33482361]
[105.36003876 134.40414429]
[103.91970062 119.47345734]
[91.09255219 111.69756317]
[77.18880463 117.32656860]
[63.28505325 122.95557404]
[57.05393982 137.23181152]
[42.87337112 142.74235535]
[29.30155945 136.71397400]
[15.39780807 142.34297180]
[1.49405706 147.97198486]
[-5.44238758 154.20719910]
[-12.94665813 153.55068970]
[-27.02368546 158.73117065]
[-41.10071182 163.91163635]
[-55.17773819 169.09211731]
[-67.95407104 180.23669434]
[-82.19995880 171.04479980]
[-77.31093597 154.81106567]
[-60.35821152 155.01509094]
[-46.28118515 149.83460999]
[-32.20415878 144.65414429]
[-18.12713432 139.47366333]
[-4.13494778 134.06822205]
[9.76880360 128.43922424]
[23.67255402 122.81021881]
[29.22800827 109.03804779]
[43.24820328 103.13137817]
[57.65604782 109.05182648]
[71.55979919 103.42282104]
[85.46354675 97.79381561]
[97.90209961 89.41035461]
[108.33734131 78.63510895]
[118.77257538 67.85987091]
[129.20780945 57.08462906]
[127.63141632 37.23658371]
[140.73641968 22.64424515]
[160.04467773 22.10288620]
[169.39703369 10.37541389]
[178.74937439 -1.35205853]
[188.10173035 -13.07953072]
[197.45407104 -24.80700302]
[206.80642700 -36.53447342]
[216.15876770 -48.26194763]
[225.51110840 -59.98941803]
[234.86346436 -71.71688843]
[229.81979370 -82.36396027]
[229.20916748 -94.07736969]
[233.08395386 -105.09309387]
[240.82398987 -113.76725006]
[251.23547363 -118.82137299]
[262.73501587 -119.53078461]
[273.59039307 -115.82823944]
[284.02563477 -126.60347748]
[294.46087646 -137.37872314]
[304.89611816 -148.15396118]
[303.10385132 -163.68849182]
[311.75939941 -176.71214294]
[326.77587891 -181.07554626]
[341.06295776 -174.71842957]
[347.87475586 -160.64242554]
[343.99490356 -145.49380493]
[331.25537109 -136.42527771]
[315.67135620 -137.71871948]
[305.23611450 -126.94348145]
[294.80087280 -116.16824341]
[284.36563110 -105.39299774]
[288.74472046 -87.42388153]
[281.55526733 -70.22461700]
[265.43966675 -60.56691360]
[246.59092712 -62.36454391]
[237.23858643 -50.63707352]
[227.88624573 -38.90959930]
[218.53388977 -27.18212891]
[209.18154907 -15.45465565]
[199.82919312 -3.72718382]
[190.47685242 8.00028896]
[181.12451172 19.72776031]
[171.77215576 31.45523262]
[175.72317505 41.27676010]
[175.13575745 51.92882919]
[170.05139160 61.40051270]
[161.36700439 67.87435150]
[150.67752075 70.07498169]
[139.98306274 67.51986694]
[129.54782104 78.29511261]
[119.11257935 89.07035065]
[108.67733765 99.84558868]
[116.18930817 106.33004761]
[118.85037994 118.03311157]
[120.29072571 132.96379089]
[121.73107147 147.89448547]
[123.17141724 162.82516479]
[133.13209534 175.85272217]
[126.58129883 190.88664246]
[110.25792694 192.46134949]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[3 92]
[4 91]
[5 32]
[6 31]
[7 30]
[10 27]
[11 26]
[12 25]
[14 24]
[15 23]
[16 22]
[17 21]
[33 89]
[34 88]
[35 87]
[36 86]
[39 80]
[40 79]
[41 78]
[42 77]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[54 68]
[55 67]
[56 66]
[57 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
