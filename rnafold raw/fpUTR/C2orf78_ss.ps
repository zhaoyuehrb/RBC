%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCAAACCGACCACCACCUGGUAGCAUCUUGGGGUUUCCUGGGCGUGGCCUGUAAAUUUGUAUCAUCACAAGGGGCCAGUGACCAGUAACCAGUGACCAGUGGCCUUCAUACUGGACAC\
) } def
/len { sequence length } bind def

/coor [
[107.17642212 143.02378845]
[92.30058289 141.09785461]
[85.25518799 127.85540009]
[91.97032928 114.44238281]
[79.52517700 122.81604004]
[67.08001709 131.18969727]
[54.63486481 139.56335449]
[56.28469467 156.95704651]
[49.00082779 172.74099731]
[34.83980560 182.67045593]
[17.69421768 184.12435913]
[2.22288346 176.79667664]
[-9.77470493 185.79989624]
[-21.77229309 194.80311584]
[-33.76988220 203.80632019]
[-37.44881821 219.42185974]
[-52.01234055 226.15115356]
[-66.28855896 218.83206177]
[-69.32598877 203.07917786]
[-58.79456329 190.97674561]
[-42.77309799 191.80873108]
[-30.77550888 182.80552673]
[-18.77791977 173.80230713]
[-6.78033066 164.79908752]
[-9.64929771 152.36285400]
[-7.55331993 139.72560120]
[-0.77355516 128.80157471]
[9.69663143 121.25928497]
[22.29708099 118.26679230]
[35.13328171 120.31085205]
[46.26120758 127.11819458]
[58.70636368 118.74453735]
[71.15151978 110.37088776]
[83.59667206 101.99723053]
[91.64711761 89.34059143]
[93.95547485 74.51927948]
[96.26383209 59.69795609]
[98.57218933 44.87664032]
[91.57985687 33.94620895]
[93.88532257 21.58618164]
[103.69960022 14.38840103]
[106.38881683 -0.36856815]
[109.07802582 -15.12553787]
[111.76723480 -29.88250732]
[99.94448853 -41.89913177]
[97.59336853 -58.42482376]
[105.43859100 -72.97071838]
[120.23989105 -79.94290161]
[122.54824829 -94.76422119]
[124.85660553 -109.58554077]
[127.16496277 -124.40686035]
[129.47332764 -139.22817993]
[131.78167725 -154.04949951]
[118.02722168 -148.06495667]
[104.65115356 -154.85324097]
[101.36085510 -169.48791504]
[110.54417419 -181.34822083]
[125.53653717 -181.82679749]
[135.45782471 -170.57553101]
[139.65010071 -184.97778320]
[143.84239197 -199.38003540]
[148.03468323 -213.78227234]
[152.22695923 -228.18452454]
[144.40158081 -241.91548157]
[148.65797424 -257.13580322]
[162.47088623 -264.81558228]
[177.64537048 -260.39849854]
[185.17868042 -246.50517273]
[180.60142517 -231.37823486]
[166.62921143 -223.99224854]
[162.43692017 -209.58999634]
[158.24464417 -195.18774414]
[154.05235291 -180.78549194]
[149.86007690 -166.38325500]
[146.60299683 -151.74113464]
[144.29464722 -136.91981506]
[141.98628235 -122.09849548]
[139.67793274 -107.27717590]
[137.36956787 -92.45586395]
[135.06120300 -77.63454437]
[145.40055847 -69.08519745]
[150.17539978 -56.43130875]
[148.02711487 -42.96820068]
[139.41517639 -32.25936508]
[126.52420807 -27.19329453]
[123.83499908 -12.43632603]
[121.14578247 2.32064319]
[118.45657349 17.07761192]
[125.27780151 33.19150925]
[113.39350891 47.18499756]
[111.08515167 62.00631714]
[108.77679443 76.82763672]
[106.46843719 91.64895630]
[117.67510223 94.25225830]
[125.55107117 107.42906189]
[135.45335388 118.69604492]
[145.35563660 129.96302795]
[160.27757263 135.22097778]
[162.86778259 149.88862610]
[172.77006531 161.15560913]
[182.67234802 172.42259216]
[192.57463074 183.68957520]
[202.47691345 194.95654297]
[212.37919617 206.22352600]
[228.00749207 205.68476868]
[240.29385376 215.35838318]
[243.43705750 230.67681885]
[235.95295715 244.40716553]
[221.37532043 250.06636047]
[206.58726501 244.98233032]
[198.57125854 231.55557251]
[201.11221313 216.12580872]
[191.20993042 204.85882568]
[181.30764771 193.59185791]
[171.40536499 182.32487488]
[161.50308228 171.05789185]
[151.60079956 159.79090881]
[137.38713074 155.33885193]
[134.08865356 139.86531067]
[124.18637085 128.59832764]
[114.28408813 117.33134460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 34]
[5 33]
[6 32]
[7 31]
[12 24]
[13 23]
[14 22]
[15 21]
[35 93]
[36 92]
[37 91]
[38 90]
[41 88]
[42 87]
[43 86]
[44 85]
[48 80]
[49 79]
[50 78]
[51 77]
[52 76]
[53 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[95 121]
[96 120]
[97 119]
[99 117]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
