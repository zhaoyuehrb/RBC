%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGUGCUCCUGCCCUGGAGAGAGGCUCAGCACAGAAGGAGGAAGGACAGCACAGCCUACAGCCGUGCUCAGGAAGUUUCUGGAUCCUAGGCUCAGCUCCACAGAGGAGAACACGCAGGCGCAGAGACC\
) } def
/len { sequence length } bind def

/coor [
[63.52200317 314.46646118]
[51.20727921 305.50723267]
[43.60688019 292.31051636]
[42.03762436 277.16265869]
[46.77139664 262.68814087]
[56.98803711 251.39477539]
[70.91745758 245.23919678]
[70.91745758 230.23919678]
[70.91745758 215.23919678]
[63.18015671 202.51193237]
[70.91745758 188.71174622]
[70.91745758 173.71174622]
[70.91745758 158.71174622]
[70.91745758 143.71174622]
[70.91745758 128.71174622]
[83.50101471 90.45091248]
[75.69399261 77.64269257]
[67.88697815 64.83447266]
[59.92810059 52.12006378]
[51.81848526 39.50126266]
[43.70887375 26.88245773]
[25.41077423 18.57900047]
[25.09038925 -0.69732028]
[16.38953590 -12.91595936]
[7.68868160 -25.13459969]
[-1.01217222 -37.35323715]
[-9.71302605 -49.57187653]
[-18.41387939 -61.79051590]
[-27.11473274 -74.00915527]
[-35.96036911 -86.12339020]
[-45.37240219 -97.80301666]
[-55.19531631 -109.13925934]
[-65.01822662 -120.47550201]
[-74.84114075 -131.81175232]
[-84.66404724 -143.14799500]
[-89.03536987 -144.46896362]
[-92.37405396 -146.90933228]
[-94.44924164 -149.98632812]
[-95.21852112 -153.19224548]
[-94.81882477 -156.06083679]
[-103.51968384 -168.27947998]
[-118.85196686 -171.02879333]
[-127.50181580 -183.54418945]
[-124.78627014 -198.14422607]
[-139.09378052 -204.89744568]
[-140.17370605 -219.75285339]
[-148.87455750 -231.97149658]
[-157.57540894 -244.19012451]
[-165.17875671 -249.43034363]
[-166.33384705 -256.80468750]
[-181.89801025 -259.54919434]
[-190.89431763 -272.54309082]
[-187.98541260 -288.07739258]
[-174.89710999 -296.93582153]
[-159.39445496 -293.86282349]
[-150.67489624 -280.68157959]
[-153.91160583 -265.21228027]
[-145.35676575 -252.89097595]
[-136.65591431 -240.67234802]
[-127.95506287 -228.45370483]
[-114.26989746 -222.57444763]
[-112.56763458 -206.84509277]
[-97.88240814 -204.63606262]
[-88.88444519 -192.36857605]
[-91.30104065 -176.98033142]
[-82.60018921 -164.76170349]
[-73.32780457 -152.97090149]
[-63.50489426 -141.63465881]
[-53.68198395 -130.29841614]
[-43.85906982 -118.96217346]
[-34.03615952 -107.62592316]
[-30.46597862 -107.03751373]
[-27.02160454 -104.63032532]
[-24.58293724 -100.49199677]
[-23.95224953 -95.11255646]
[-17.36128044 -91.60908508]
[-14.89609432 -82.71000671]
[-6.19524002 -70.49137115]
[2.50561333 -58.27273178]
[11.20646667 -46.05409241]
[19.90732002 -33.83545303]
[28.60817528 -21.61681366]
[37.30902863 -9.39817429]
[47.61457443 -8.59120750]
[55.91562653 -2.06727982]
[59.27332306 8.17509365]
[56.32767868 18.77284622]
[64.43728638 31.39164925]
[72.54690552 44.01045227]
[78.87114716 47.97518921]
[80.69519806 57.02745819]
[88.50221252 69.83567810]
[96.30923462 82.64389801]
[98.53510284 67.80996704]
[110.98828125 59.44824600]
[125.56106567 63.00267410]
[132.76577759 76.15911865]
[127.91175842 90.35202789]
[114.15968323 96.34102631]
[128.55207825 100.56701660]
[142.94447327 104.79300690]
[157.33686829 109.01899719]
[172.04994202 102.62330627]
[186.15568542 110.26580811]
[188.83335876 126.08382416]
[178.02888489 137.94313049]
[162.03053284 136.74627686]
[153.11087036 123.41139221]
[138.71847534 119.18540192]
[124.32608795 114.95941162]
[109.93369293 110.73342133]
[103.92963409 115.22800446]
[116.18944550 123.87075043]
[111.75801086 138.20123291]
[96.75952911 138.41485596]
[91.92151642 124.21717072]
[85.91745758 128.71174622]
[85.91745758 143.71174622]
[85.91745758 158.71174622]
[85.91745758 173.71174622]
[85.91745758 188.71174622]
[93.65475464 202.51193237]
[85.91745758 215.23919678]
[85.91745758 230.23919678]
[85.91745758 245.23919678]
[99.84687042 251.39477539]
[110.06351471 262.68814087]
[114.79728699 277.16265869]
[113.22803497 292.31051636]
[105.62763214 305.50723267]
[93.31291199 314.46646118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 125]
[8 124]
[9 123]
[11 121]
[12 120]
[13 119]
[14 118]
[15 117]
[16 93]
[17 92]
[18 91]
[19 89]
[20 88]
[21 87]
[23 83]
[24 82]
[25 81]
[26 80]
[27 79]
[28 78]
[29 77]
[30 75]
[31 71]
[32 70]
[33 69]
[34 68]
[35 67]
[40 66]
[41 65]
[44 62]
[46 60]
[47 59]
[48 58]
[50 57]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
