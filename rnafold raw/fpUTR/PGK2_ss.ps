%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGUGGCCGUUGUGCUGGAGACAGUGAGGAGAAGAAAGGGGCGGGACAAGGGCAAAGGCGUUAGAAGUCACCACCGACCCAGCCCCUCAACAGCAAGUUGGUUCUUCAGCAUUAAGAUCCAGGUGUCAGCCUAUGUCUUUAUAUUGUCAAG\
) } def
/len { sequence length } bind def

/coor [
[204.04953003 558.61199951]
[216.41799927 549.87701416]
[212.19201660 535.48461914]
[207.96603394 521.09222412]
[194.81097412 514.20166016]
[190.32020569 499.66592407]
[197.63688660 485.91442871]
[193.41088867 471.52203369]
[189.18490601 457.12963867]
[178.17533875 447.09774780]
[181.71125793 431.67672729]
[168.22511292 429.32754517]
[157.02052307 421.34814453]
[150.32635498 409.25555420]
[149.50453186 395.39181519]
[154.77317810 382.47030640]
[165.15286255 373.04476929]
[161.22132874 358.56915283]
[157.28981018 344.09353638]
[153.35827637 329.61795044]
[149.42675781 315.14233398]
[133.92442322 309.82733154]
[124.53283691 296.19528198]
[125.10083771 279.48513794]
[135.60261536 266.26257324]
[131.37663269 251.87017822]
[127.15064240 237.47778320]
[122.92465210 223.08538818]
[111.89937592 219.88923645]
[103.72113037 211.66345215]
[100.52327728 200.38845825]
[103.21981049 188.85964966]
[111.24807739 179.99432373]
[107.61265564 165.44154358]
[103.97722626 150.88874817]
[100.34180450 136.33596802]
[96.70637512 121.78317261]
[93.07095337 107.23038483]
[87.40145111 93.34309387]
[79.81328583 80.40401459]
[72.22512817 67.46493530]
[64.63697052 54.52585220]
[57.04880905 41.58676910]
[49.46064758 28.64768791]
[41.74090576 15.78667736]
[33.89038467 3.00507569]
[26.03986740 -9.77652550]
[14.08888435 -10.24653339]
[3.96686912 -16.38897514]
[-1.84861743 -26.56403160]
[-2.00054908 -38.16249466]
[3.43262649 -48.27450180]
[-3.89001656 -61.36568069]
[-17.90057755 -60.83388519]
[-30.70710564 -66.37618256]
[-39.82272720 -76.85398102]
[-43.50429153 -90.17644501]
[-41.08549881 -103.71762085]
[-33.09667587 -114.83398438]
[-40.15075684 -128.07180786]
[-47.20483398 -141.30963135]
[-62.54007339 -144.36978149]
[-72.28014374 -156.60354614]
[-71.82607269 -172.23452759]
[-61.39226532 -183.88226318]
[-45.90524673 -186.04704285]
[-32.67750931 -177.70671082]
[-27.95479012 -162.79933167]
[-33.96701050 -148.36370850]
[-26.91293335 -135.12588501]
[-19.85885429 -121.88806915]
[-3.72823739 -121.74404144]
[10.21782303 -113.45210266]
[18.13984108 -99.18537903]
[17.80174637 -82.77655029]
[9.20115948 -68.68832397]
[16.52380371 -55.59714508]
[34.37374878 -51.73768997]
[43.95036316 -35.81565857]
[38.82146835 -17.62704468]
[46.67198944 -4.84544373]
[54.52250671 7.93615770]
[60.74056625 12.01433563]
[62.39973068 21.05952835]
[69.98789215 33.99860764]
[77.57604980 46.93769073]
[85.16420746 59.87677002]
[92.75237274 72.81584930]
[100.34053040 85.75493622]
[115.22830963 87.58634949]
[125.72617340 76.87211609]
[136.22404480 66.15787506]
[146.72190857 55.44364166]
[147.99671936 39.45132065]
[161.37492371 30.59675980]
[176.59390259 35.67242432]
[181.97895813 50.78469467]
[173.39912415 64.34073639]
[157.43614197 65.94150543]
[146.93827820 76.65574646]
[136.44041443 87.36997986]
[125.94254303 98.08421326]
[116.93201447 103.14162445]
[107.62374115 103.59495544]
[111.25916290 118.14774323]
[114.89459229 132.70053101]
[118.53001404 147.25332642]
[122.16544342 161.80610657]
[125.80087280 176.35890198]
[142.38217163 185.42486572]
[147.05273438 203.40843201]
[137.31704712 218.85939026]
[141.54304504 233.25178528]
[145.76902771 247.64418030]
[149.99501038 262.03659058]
[163.31700134 265.70465088]
[172.99899292 275.41052246]
[176.57716370 288.53225708]
[173.21641541 301.59942627]
[163.90235901 311.21081543]
[167.83389282 325.68643188]
[171.76541138 340.16201782]
[175.69694519 354.63763428]
[179.62846375 369.11322021]
[195.63146973 373.15701294]
[207.35681152 384.64093018]
[211.68292236 400.37570190]
[207.52467346 416.05874634]
[196.10365295 427.45074463]
[207.41549683 438.51205444]
[203.57730103 452.90362549]
[207.80328369 467.29602051]
[212.02928162 481.68841553]
[225.61909485 489.30123901]
[229.69981384 503.95736694]
[222.35842896 516.86627197]
[226.58441162 531.25866699]
[230.81039429 545.65106201]
[245.93789673 546.31243896]
[260.03009033 551.85223389]
[271.55831909 561.66949463]
[279.27212524 574.69927979]
[282.33477783 589.52825928]
[280.41403198 604.54791260]
[273.71826172 618.12896729]
[262.97375488 628.79827881]
[249.34600830 635.39855957]
[234.31326294 637.21380615]
[219.50614929 634.04711914]
[206.53082275 626.24200439]
[196.79476929 614.64508057]
[191.35406494 600.51434326]
[190.79888916 585.38256836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 138]
[3 137]
[4 136]
[7 133]
[8 132]
[9 131]
[11 129]
[17 124]
[18 123]
[19 122]
[20 121]
[21 120]
[25 115]
[26 114]
[27 113]
[28 112]
[33 109]
[34 108]
[35 107]
[36 106]
[37 105]
[38 104]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 82]
[46 81]
[47 80]
[52 77]
[53 76]
[59 71]
[60 70]
[61 69]
[90 102]
[91 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
