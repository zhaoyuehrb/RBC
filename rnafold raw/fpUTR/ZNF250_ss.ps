%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCUUUGUCUGAAGGUGCUGCGGGAUGCCGUUCCUUCGCGCGUGAGGCUGCGGCUCUGACGCCCCAUAGGCUCCUUCAAUUUCCGUGAUCCUCGGAGUCCCCAGGAGACCAGGUG\
) } def
/len { sequence length } bind def

/coor [
[69.87801361 123.35428619]
[61.58601761 135.85400391]
[53.29401398 148.35371399]
[45.16913986 160.96269226]
[37.21282578 173.67871094]
[29.25651169 186.39471436]
[21.30019760 199.11073303]
[13.34388351 211.82675171]
[13.30292606 228.22584534]
[-1.05235434 236.15414429]
[-14.95447636 227.45570374]
[-14.10212803 211.07872009]
[0.62786710 203.87043762]
[8.58418083 191.15441895]
[16.54049492 178.43840027]
[24.49680710 165.72239685]
[32.45312119 153.00637817]
[33.34488297 145.57197571]
[40.79430771 140.06170654]
[49.08630753 127.56199646]
[57.37830734 115.06228638]
[50.99884796 101.48648071]
[36.08382416 99.89208221]
[21.16880226 98.29767609]
[6.21662283 97.10089111]
[-8.76211739 96.30255890]
[-23.74085808 95.50421906]
[-35.32609558 106.25400543]
[-51.11599731 105.57977295]
[-61.74269104 93.88153076]
[-60.90155411 78.09963989]
[-49.09161377 67.59721375]
[-33.31949615 68.60516357]
[-22.94252586 80.52548218]
[-7.96378517 81.32381439]
[7.01495552 82.12214661]
[11.18602371 79.56352234]
[17.03030586 79.68841553]
[22.76320457 83.38265991]
[37.67822647 84.97705841]
[52.59325027 86.57146454]
[62.01234818 74.89753723]
[57.30119705 60.65657043]
[52.59004974 46.41560745]
[47.87889862 32.17464447]
[36.19881058 21.50289917]
[39.54724503 6.98955202]
[34.83609390 -7.25141239]
[29.93579292 -21.42840195]
[24.84720993 -35.53890610]
[11.97376823 -45.69796753]
[14.60248947 -61.88505554]
[30.02917099 -67.44828796]
[42.38416672 -56.66468048]
[38.95771408 -40.62749100]
[44.04629898 -26.51698494]
[49.34315109 -21.22464371]
[49.07705688 -11.96256256]
[53.78820801 2.27840114]
[65.13132477 11.93153667]
[62.11986160 27.46349335]
[66.83100891 41.70445633]
[71.54216003 55.94542313]
[76.25331116 70.18638611]
[111.56119537 69.49624634]
[126.71939850 95.31354523]
[141.63441467 96.90795135]
[149.81916809 89.50160980]
[160.52116394 87.92781067]
[170.09187317 92.47474670]
[175.40554810 101.38539124]
[190.21456909 103.77134705]
[205.05404663 105.95995331]
[219.92134094 107.95083618]
[234.78862000 109.94171906]
[249.65591431 111.93260193]
[264.52322388 113.92348480]
[272.95858765 101.25045776]
[286.00668335 93.52809906]
[301.05212402 92.24200439]
[315.10626221 97.59387970]
[325.40054321 108.47217560]
[329.93206787 122.68240356]
[344.79937744 124.67328644]
[359.66665649 126.66416931]
[374.53393555 128.65505981]
[389.40124512 130.64593506]
[400.83117676 119.97398376]
[416.44946289 119.19744110]
[428.88162231 128.68296814]
[432.25759888 143.95178223]
[424.98330688 157.79443359]
[410.49349976 163.67483521]
[395.62976074 158.81643677]
[387.41036987 145.51322937]
[372.54306030 143.52235413]
[357.67578125 141.53146362]
[342.80847168 139.54057312]
[327.94119263 137.54969788]
[319.83056641 150.06701660]
[307.03686523 157.85359192]
[292.06982422 159.31922913]
[277.89279175 154.11994934]
[267.33621216 143.23667908]
[262.53231812 128.79078674]
[247.66503906 126.79989624]
[232.79774475 124.80901337]
[217.93045044 122.81813049]
[203.06315613 120.82724762]
[195.92465210 123.08716583]
[187.82861328 118.58036804]
[173.01959229 116.19441986]
[155.62776184 124.47018433]
[140.04002380 111.82297516]
[125.12500000 110.22856903]
[118.32376099 123.59467316]
[104.43726349 132.31796265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[22 41]
[23 40]
[24 39]
[25 36]
[26 35]
[27 34]
[42 64]
[43 63]
[44 62]
[45 61]
[47 59]
[48 58]
[49 56]
[50 55]
[66 115]
[67 114]
[71 112]
[72 111]
[73 109]
[74 108]
[75 107]
[76 106]
[77 105]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
