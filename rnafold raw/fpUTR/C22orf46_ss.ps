%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUAUCCUACUGCAGCUGGCUGCAUCAGAUGUGCCAGGCCUGCCCUCUAGCUCCCAACACCAUCUGCCUGAUCUAAGCUUUGCC\
) } def
/len { sequence length } bind def

/coor [
[89.71918488 109.97397614]
[75.07804871 113.23542786]
[60.43690872 116.49687958]
[45.85778046 120.02519989]
[31.34552383 123.81919861]
[16.83326912 127.61319733]
[2.32101369 131.40719604]
[-1.78984296 144.70307922]
[-11.89612770 154.11158752]
[-25.23927307 157.21293640]
[-38.25025940 153.28904724]
[-47.50420380 143.48619080]
[-62.14533997 146.74765015]
[-76.78647614 150.00909424]
[-91.42761993 153.27055359]
[-106.06875610 156.53201294]
[-117.77569580 168.01588440]
[-133.49980164 163.35925293]
[-137.06547546 147.35244751]
[-124.80464935 136.46189880]
[-109.33020782 141.89086914]
[-94.68907166 138.62940979]
[-80.04793549 135.36796570]
[-65.40679169 132.10650635]
[-50.76565552 128.84506226]
[-44.80810928 113.66577148]
[-30.88302231 104.86843872]
[-14.28773975 106.03024292]
[-1.47298706 116.89494324]
[13.03926849 113.10094452]
[27.55152321 109.30694580]
[42.06377792 105.51293945]
[47.87459183 100.66069031]
[57.17545700 101.85574341]
[71.81659698 98.59429169]
[86.45773315 95.33283997]
[96.88554382 86.01874542]
[110.28081512 90.02602386]
[124.92195129 86.76457214]
[139.56309509 83.50312042]
[148.55972290 68.63366699]
[165.17465210 64.83021545]
[179.18296814 73.94041443]
[193.69522095 70.14640808]
[202.58024597 52.38400650]
[221.27192688 46.60258102]
[238.11752319 55.96000290]
[252.12776184 50.60153961]
[258.63439941 36.44875336]
[272.91912842 31.21409225]
[286.37155151 37.50440598]
[300.38177490 32.14594269]
[300.76321411 16.94979286]
[306.93551636 3.05837965]
[317.95739746 -7.40995741]
[332.14816284 -12.85887337]
[347.34381104 -12.45744801]
[361.22708130 -6.26689529]
[371.68090820 4.76876926]
[377.11114502 18.96668816]
[376.68975830 34.16178131]
[370.48092651 48.03690720]
[359.43151855 58.47621155]
[345.22647095 63.88777161]
[330.03195190 63.44636917]
[316.16500854 57.21931458]
[305.74023438 46.15618134]
[291.73001099 51.51464462]
[285.90866089 65.17654419]
[271.77661133 70.81037140]
[257.48623657 64.61177826]
[243.47598267 69.97024536]
[241.87638855 80.51966858]
[235.88975525 89.45092773]
[226.59860229 95.02348328]
[215.73715210 96.11569977]
[205.36773682 92.44992828]
[197.48922729 84.65866852]
[182.97695923 88.45266724]
[178.00392151 100.48757935]
[166.80101013 107.50248718]
[153.41120911 106.69734955]
[142.82453918 98.14425659]
[128.18341064 101.40570831]
[113.54226685 104.66716003]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 32]
[5 31]
[6 30]
[7 29]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[38 85]
[39 84]
[40 83]
[43 79]
[44 78]
[47 72]
[48 71]
[51 68]
[52 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
