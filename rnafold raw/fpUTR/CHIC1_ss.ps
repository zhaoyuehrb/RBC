%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACGCAGGCGCGUCUCCUCAAAUCCUGUCCCUACACCCCUCCUCUUUCUCUUCAUUUCGUUCCCCCUCCUCUUGCAGCACCUCGGCAGGUUCAAACUCUUCUCCGGGAGCGUGGCGGCGAUCGCGAGGUCACGUG\
) } def
/len { sequence length } bind def

/coor [
[76.07720947 341.38711548]
[74.48572540 356.60968018]
[65.99262238 369.34252930]
[52.54954910 376.65979004]
[37.24562454 376.88000488]
[23.59758186 369.95254517]
[14.74163818 357.46932983]
[12.71282578 342.29888916]
[17.97735214 327.92727661]
[29.32546616 317.65698242]
[44.14945602 313.84805298]
[47.53481293 299.23507690]
[50.92016602 284.62207031]
[54.30552292 270.00909424]
[57.69087982 255.39610291]
[49.61418533 242.93405151]
[52.83924866 228.06619263]
[65.96534729 219.67910767]
[69.35070801 205.06611633]
[72.73606110 190.45312500]
[76.12141418 175.84014893]
[66.61946106 162.01101685]
[70.08671570 145.25035095]
[84.86556244 135.96792603]
[87.91739655 121.28165436]
[90.96923828 106.59539795]
[93.85372162 91.87535095]
[96.57046509 77.12342072]
[99.28720856 62.37149811]
[102.00395203 47.61957169]
[104.72068787 32.86764526]
[94.52603912 43.87078094]
[82.29640961 52.55618668]
[68.54888153 58.55664444]
[53.86469650 61.61845779]
[38.86470032 61.61216736]
[24.18308449 58.53804398]
[10.44059467 52.52606201]
[-1.78174388 43.83040619]
[-11.96716976 32.81872559]
[-19.68504524 19.95659447]
[-24.60905838 5.78782368]
[-26.53102493 -9.08853531]
[-25.36968040 -24.04351044]
[-21.17413139 -38.44480896]
[-14.12176037 -51.68354034]
[-4.51074362 -63.19997787]
[7.25256681 -72.50720978]
[20.67082024 -79.21172333]
[35.17669296 -83.03005219]
[50.15687943 -83.80075836]
[64.97801971 -81.49125671]
[79.01348114 -76.19919586]
[91.66983795 -68.14831543]
[102.41198730 -57.67901611]
[110.78574371 -45.23392868]
[116.43708038 -31.33923912]
[119.12704468 -16.58240891]
[118.74192047 -1.58735299]
[115.29887390 13.00934792]
[126.02551270 2.52416110]
[136.75215149 -7.96102571]
[147.47880554 -18.44621277]
[158.20544434 -28.93139839]
[168.93208313 -39.41658401]
[179.65872192 -49.90177155]
[171.45890808 -62.51743317]
[165.87977600 -76.48599243]
[163.13401794 -91.26989746]
[163.32530212 -106.30060577]
[166.44444275 -121.00045013]
[172.36968994 -134.80485535]
[180.87161255 -147.18400574]
[191.62188721 -157.66319275]
[204.20606995 -165.84098816]
[218.13945007 -171.40466309]
[232.88583374 -174.14213562]
[247.87812805 -173.95002747]
[262.54013062 -170.83758545]
[276.30874634 -164.92628479]
[288.65551758 -156.44503784]
[299.38214111 -166.93022156]
[310.10879517 -177.41540527]
[320.83541870 -187.90060425]
[324.73645020 -203.82901001]
[340.55487061 -208.15443420]
[352.01806641 -196.42724609]
[347.33370972 -180.71136475]
[331.32061768 -177.17395020]
[320.59396362 -166.68876648]
[309.86734009 -156.20358276]
[299.14068604 -145.71839905]
[307.33868408 -133.18177795]
[312.93505859 -119.28218079]
[315.71292114 -104.55311584]
[315.56369019 -89.56034088]
[312.49127197 -74.88008118]
[306.61184692 -61.07695770]
[298.14971924 -48.68219757]
[287.42855835 -38.17323685]
[274.85906982 -29.95530891]
[260.92337036 -24.34582901]
[246.15634155 -21.56212425]
[231.12516785 -21.71302795]
[216.40759277 -24.79460907]
[202.56965637 -30.69026566]
[190.14392090 -39.17512894]
[179.41726685 -28.68994331]
[168.69062805 -18.20475578]
[157.96398926 -7.71956968]
[147.23735046 2.76561689]
[136.51069641 13.25080395]
[125.78405762 23.73599052]
[124.48498535 30.25653458]
[119.47261810 35.58438873]
[116.75587463 50.33631516]
[114.03913116 65.08824158]
[111.32238770 79.84016418]
[108.60564423 94.59209442]
[110.36796570 102.53453827]
[105.65550232 109.64723969]
[102.60366058 124.33349609]
[99.55181885 139.01976013]
[108.21161652 149.40298462]
[109.26682281 162.68649292]
[102.55429840 173.97122192]
[90.73440552 179.22549438]
[87.34904480 193.83848572]
[83.96369171 208.45147705]
[80.57833862 223.06445312]
[88.67916107 236.36912537]
[85.03776550 251.14054871]
[72.30386353 258.78146362]
[68.91851044 273.39443970]
[65.53314972 288.00744629]
[62.14779663 302.62042236]
[58.76243973 317.23339844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[18 130]
[19 129]
[20 128]
[21 127]
[24 123]
[25 122]
[26 121]
[27 119]
[28 118]
[29 117]
[30 116]
[31 115]
[60 113]
[61 112]
[62 111]
[63 110]
[64 109]
[65 108]
[66 107]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
