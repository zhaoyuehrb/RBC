%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUGUGAGGCUUGCCCCGCGGACAGUAAACUUGCAGGGGCGAGAGGGAGGGACAUCGAUUAAACCUAAAUCGUGGGCGUUCAGUCCUCAGGGCACCGGAGCGCGUGAAAACUCCAGCGGACUCUGCUGGAAAGGAGAUC\
) } def
/len { sequence length } bind def

/coor [
[223.81297302 216.38267517]
[211.41050720 207.94592285]
[199.00802612 199.50918579]
[186.60554504 191.07244873]
[174.20307922 182.63571167]
[159.32792664 181.87471008]
[152.26933289 167.71536255]
[139.86686707 159.27862549]
[127.46438599 150.84188843]
[115.06191254 142.40515137]
[102.65943146 133.96841431]
[87.81426239 131.81875610]
[73.52804565 136.39085388]
[59.24182892 140.96293640]
[44.95561218 145.53501892]
[30.66939354 150.10710144]
[16.38317490 154.67919922]
[2.09695697 159.25128174]
[-12.18926048 163.82336426]
[-26.42403030 168.55320740]
[-40.60560608 173.44021606]
[-54.78718567 178.32722473]
[-68.96876526 183.21423340]
[-72.52602386 198.22587585]
[-83.65032959 208.91481018]
[-98.79196167 211.87022400]
[-113.11927795 206.14907837]
[-122.06048584 193.57695007]
[-122.76247406 178.16555786]
[-115.00123596 164.83264160]
[-101.25337219 157.83267212]
[-85.90576172 159.39930725]
[-73.85577393 169.03265381]
[-59.67419434 164.14564514]
[-45.49261475 159.25863647]
[-31.31103897 154.37162781]
[-25.96974945 149.17752075]
[-16.76134682 149.53715515]
[-2.47512960 144.96505737]
[11.81108856 140.39297485]
[26.09730721 135.82089233]
[40.38352585 131.24879456]
[54.66974258 126.67671204]
[68.95596313 122.10462952]
[83.24217987 117.53253937]
[77.82546234 105.09853363]
[80.07938385 92.59292603]
[88.31757355 84.07180786]
[84.70306396 69.51380920]
[81.08854675 54.95581436]
[70.25384521 43.42673111]
[74.69628906 29.21005058]
[61.44004059 21.03022003]
[57.98179245 6.21485043]
[65.86170197 -6.37254667]
[62.24718857 -20.93054390]
[57.10377502 -28.57706451]
[58.71753311 -35.85057068]
[55.42595291 -50.48496628]
[52.13437653 -65.11936188]
[48.84280014 -79.75375366]
[45.55121994 -94.38815308]
[31.57627296 -101.40489960]
[25.42862129 -115.78337097]
[30.01100159 -130.73448181]
[43.15975189 -139.19879150]
[58.66643524 -137.17968750]
[69.20927429 -125.63054657]
[69.81025696 -110.00451660]
[60.18561554 -97.67972565]
[63.47719193 -83.04533386]
[66.76876831 -68.41094208]
[70.06034851 -53.77654266]
[73.35192871 -39.14214706]
[76.80518341 -24.54505920]
[80.41970062 -9.98706245]
[93.27207184 -2.54715562]
[97.14508820 12.16523361]
[89.25428772 25.59553528]
[99.83045197 36.08333588]
[95.64654541 51.34129715]
[99.26105499 65.89929962]
[102.87557220 80.45729065]
[114.62619781 85.10131836]
[121.70591736 96.39566040]
[120.66699982 110.38199615]
[111.09616852 121.56593323]
[123.49864960 130.00267029]
[135.90112305 138.43940735]
[148.30360413 146.87615967]
[160.70608521 155.31289673]
[176.46833801 156.67733765]
[182.63981628 170.23323059]
[195.04228210 178.66996765]
[207.44476318 187.10671997]
[219.84724426 195.54345703]
[232.24972534 203.98019409]
[241.24723816 195.17977905]
[251.67105103 188.13423157]
[263.18365479 183.06985474]
[275.41268921 180.14877319]
[287.96276855 179.46386719]
[300.42858887 181.03573608]
[312.40774536 184.81207275]
[323.51376343 190.66950989]
[333.38873291 198.41749573]
[341.71469116 207.80462646]
[348.22387695 218.52673340]
[352.70736694 230.23675537]
[355.02178955 242.55595398]
[355.09390259 255.08622742]
[352.92291260 267.42288208]
[348.58041382 279.16775513]
[342.20809937 289.94207764]
[353.38482666 299.94613647]
[364.56158447 309.95016479]
[375.73831177 319.95419312]
[386.91503906 329.95822144]
[398.09176636 339.96224976]
[409.26849365 349.96627808]
[420.44522095 359.97030640]
[436.27972412 366.02877808]
[434.84146118 382.92160034]
[418.21066284 386.21594238]
[410.44119263 371.14706421]
[399.26446533 361.14300537]
[388.08773804 351.13897705]
[376.91101074 341.13494873]
[365.73425293 331.13092041]
[354.55752563 321.12689209]
[343.38079834 311.12286377]
[332.20407104 301.11883545]
[317.72027588 311.19619751]
[301.16046143 317.31448364]
[283.58541870 319.07675171]
[266.12216187 316.36538696]
[249.89184570 309.34963989]
[235.93754578 298.47540283]
[225.15736389 284.43661499]
[218.24662781 268.13110352]
[215.65295410 250.60311890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 94]
[5 93]
[7 91]
[8 90]
[9 89]
[10 88]
[11 87]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[18 39]
[19 38]
[20 36]
[21 35]
[22 34]
[23 33]
[48 83]
[49 82]
[50 81]
[52 79]
[55 76]
[56 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[114 132]
[115 131]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
