%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGACUAAGUCAAUAAUCAGAAUCAGCAGGUUUGCAGUCAGAUUGGCAGGGAUAAGCAGCCUAGCUCAGGAGAAGUGAGUAUAAAAGCCCCAGGCUGGGAGCAGCCAUCACAGAAGUCCACUCAUUCUUGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[73.43648529 132.52622986]
[68.05561066 146.52787781]
[62.67473984 160.52952576]
[57.29386902 174.53118896]
[51.91299820 188.53283691]
[46.53212738 202.53448486]
[46.49415588 219.48838806]
[30.19230270 224.14520264]
[21.20467186 209.76957703]
[32.53047562 197.15361023]
[37.91134644 183.15196228]
[43.29221725 169.15031433]
[48.67308807 155.14866638]
[54.05395889 141.14700317]
[59.43482971 127.14536285]
[49.91062546 115.55702209]
[35.13191986 118.12409973]
[20.35321426 120.69117737]
[5.57450962 123.25825500]
[-6.69791937 133.24314880]
[-20.56157494 127.79811859]
[-35.34027863 130.36518860]
[-40.21307755 141.32377625]
[-49.69931793 148.46322632]
[-61.33993149 150.07920837]
[-72.18756104 145.88063049]
[-79.55278778 137.03385925]
[-94.43363953 138.92068481]
[-109.31449890 140.80751038]
[-122.03791809 151.15383911]
[-137.26127625 145.05619812]
[-139.32409668 128.78730774]
[-126.10432434 119.08321381]
[-111.20132446 125.92665100]
[-96.32046509 124.03982544]
[-81.43960571 122.15299988]
[-71.20281219 107.05393982]
[-52.88135529 104.09370422]
[-37.90735626 115.58648682]
[-23.12865067 113.01940918]
[-11.91329384 103.21813202]
[3.00743389 108.47954559]
[17.78613853 105.91246796]
[32.56484222 103.34539795]
[47.34354782 100.77832031]
[52.72441864 86.77667236]
[43.46842957 74.97299957]
[34.21244049 63.16932678]
[21.47051811 60.82630920]
[14.00935173 50.73065186]
[15.41722393 38.66093826]
[-0.25885668 36.65194702]
[-9.85670662 24.09580040]
[-7.68209171 8.44183540]
[4.97482777 -1.02272701]
[20.60492516 1.31726956]
[29.93514252 14.07354641]
[27.43002510 29.67803192]
[43.88670349 35.66373062]
[46.01611328 53.91333771]
[55.27210236 65.71701050]
[64.52809143 77.52068329]
[89.19475555 63.07801437]
[114.77575684 68.33115387]
[128.77995300 87.38858795]
[143.55865479 84.82151031]
[151.56083679 80.23282623]
[158.70536804 82.36907196]
[173.53904724 80.14154053]
[188.37272644 77.91400146]
[203.20640564 75.68647003]
[218.04008484 73.45893097]
[222.25434875 70.08746338]
[226.88073730 68.85565948]
[231.01237488 69.55122375]
[233.96653748 71.62481689]
[248.91824341 70.42221069]
[263.86996460 69.21961212]
[278.82168579 68.01700592]
[293.77340698 66.81439972]
[308.72509766 65.61180115]
[310.90841675 50.26906967]
[316.43170166 35.79688644]
[325.01803589 22.91236115]
[336.23867798 12.25320911]
[349.53472900 4.34618092]
[364.24472046 -0.41896626]
[379.63772583 -1.80867922]
[394.94958496 0.24294615]
[409.42074585 5.63104534]
[422.33419800 14.08534145]
[433.05075073 25.18370056]
[441.04077148 38.37321091]
[445.91040039 52.99771881]
[460.83059692 51.45259857]
[475.75082397 49.90747833]
[490.67102051 48.36236191]
[505.59121704 46.81724167]
[518.54852295 36.76536179]
[533.62805176 43.21046448]
[535.31732178 59.52237701]
[521.87854004 68.92080688]
[507.13635254 61.73744965]
[492.21612549 63.28256989]
[477.29592896 64.82769012]
[462.37573242 66.37281036]
[447.45550537 67.91793060]
[445.87725830 82.37426758]
[441.31042480 96.18721008]
[433.95428467 108.74579620]
[424.13162231 119.49396515]
[412.27444458 127.95522308]
[398.90509033 133.75372314]
[384.61306763 136.63099670]
[370.02926636 136.45744324]
[355.79794312 133.23818970]
[342.54824829 127.11294556]
[330.86657715 118.35000610]
[321.27050781 107.33441162]
[314.18582153 94.55109406]
[309.92770386 80.56351471]
[294.97598267 81.76611328]
[280.02429199 82.96871948]
[265.07257080 84.17132568]
[250.12084961 85.37392426]
[235.16914368 86.57653046]
[220.26762390 88.29261017]
[205.43394470 90.52014923]
[190.60026550 92.74768066]
[175.76658630 94.97521973]
[160.93290710 97.20275116]
[146.12573242 99.60021973]
[131.34703064 102.16728973]
[129.32836914 116.26475525]
[120.92086029 128.86726379]
[107.12532806 137.08744812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[6 10]
[16 45]
[17 44]
[18 43]
[19 42]
[21 40]
[22 39]
[27 36]
[28 35]
[29 34]
[46 62]
[47 61]
[48 60]
[51 58]
[65 133]
[66 132]
[68 131]
[69 130]
[70 129]
[71 128]
[72 127]
[76 126]
[77 125]
[78 124]
[79 123]
[80 122]
[81 121]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
