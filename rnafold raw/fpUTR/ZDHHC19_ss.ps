%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCACCCUGGGCUGCGGCUCUGAGGCUGCCGUGGCCAUGGAGCUCUGGAAGCUGGGCUGGGGGAGGAAGCCUGGUGGCUCUGACCUCCCCUGGAGGCGAAGGAGGCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[95.06340790 110.72785187]
[90.47796631 108.44763184]
[75.54647827 109.87965393]
[60.61499023 111.31167603]
[45.68350220 112.74369812]
[30.75201416 114.17572021]
[15.89172554 116.21821594]
[1.16514981 119.06918335]
[-13.52111149 122.12101746]
[-22.20481491 135.05281067]
[-37.14224625 137.93859863]
[-49.41721344 129.58032227]
[-64.10346985 132.63215637]
[-78.78973389 135.68399048]
[-93.47599792 138.73583984]
[-108.16225433 141.78767395]
[-122.84851837 144.83952332]
[-137.53477478 147.89135742]
[-152.22103882 150.94319153]
[-166.90730286 153.99504089]
[-172.33686829 168.43537903]
[-184.72517395 177.62957764]
[-200.11915588 178.64381409]
[-213.60665894 171.15443420]
[-220.88386536 157.55126953]
[-219.62864685 142.17506409]
[-210.24153137 129.93228149]
[-195.71792603 124.72956848]
[-180.69224548 128.22708130]
[-169.95913696 139.30877686]
[-155.27288818 136.25694275]
[-140.58662415 133.20509338]
[-125.90036011 130.15325928]
[-111.21409607 127.10141754]
[-96.52783966 124.04957581]
[-81.84157562 120.99773407]
[-67.15531158 117.94589233]
[-52.46905136 114.89405060]
[-44.54026031 102.33738708]
[-29.68977928 99.03317261]
[-16.57295227 107.43476105]
[-1.88669038 104.38291931]
[4.10302162 99.88010406]
[13.24217606 101.45407867]
[15.58283997 98.64655304]
[19.45977211 96.89881134]
[24.32751083 96.94809723]
[29.31999397 99.24423218]
[44.25148010 97.81221008]
[59.18296814 96.38018799]
[74.11445618 94.94816589]
[89.04594421 93.51615143]
[103.90623474 91.47364807]
[118.67037201 88.82409668]
[133.43450928 86.17455292]
[148.19865417 83.52500153]
[162.96279907 80.87545013]
[177.72694397 78.22589874]
[192.49108887 75.57635498]
[207.25521851 72.92680359]
[221.38914490 67.90361023]
[234.51394653 60.64142227]
[247.63876343 53.37923431]
[260.76358032 46.11705017]
[273.88836670 38.85486221]
[287.01318359 31.59267616]
[300.13800049 24.33048820]
[313.26281738 17.06830215]
[322.93377686 -1.95214605]
[343.48434448 -1.23485625]
[355.97061157 -9.54710293]
[368.45684814 -17.85935020]
[380.94311523 -26.17159653]
[387.73254395 -41.09928131]
[404.07891846 -42.41378403]
[413.16650391 -28.76285553]
[405.64675903 -14.18940163]
[389.25537109 -13.68534184]
[376.76910400 -5.37309504]
[364.28283691 2.93915176]
[351.79660034 11.25139809]
[351.46658325 20.36055756]
[346.84317017 28.37692070]
[338.88854980 33.37218475]
[329.38253784 34.07523727]
[320.52499390 30.19311142]
[307.40017700 37.45529938]
[294.27539062 44.71748734]
[281.15057373 51.97967148]
[268.02575684 59.24185944]
[254.90093994 66.50404358]
[241.77613831 73.76623535]
[228.65132141 81.02841949]
[243.43458557 83.56912231]
[255.74198914 92.14395142]
[263.24658203 105.13168335]
[264.52947998 120.07672119]
[259.34808350 134.15341187]
[248.68209839 144.70028687]
[234.54809570 149.72325134]
[219.61840820 148.27261353]
[206.71577454 140.62263489]
[198.27970886 128.21971130]
[195.90518188 113.40884399]
[200.04118347 98.99033356]
[209.90476990 87.69094849]
[195.14064026 90.34049225]
[180.37649536 92.99004364]
[165.61235046 95.63959503]
[150.84820557 98.28913879]
[136.08406067 100.93869019]
[121.31992340 103.58824158]
[106.55577850 106.23779297]
[103.84917450 109.19612885]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 52]
[3 51]
[4 50]
[5 49]
[6 48]
[7 44]
[8 42]
[9 41]
[12 38]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[53 113]
[54 112]
[55 111]
[56 110]
[57 109]
[58 108]
[59 107]
[60 106]
[61 93]
[62 92]
[63 91]
[64 90]
[65 89]
[66 88]
[67 87]
[68 86]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
