%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGCGCUUGUGUCGACAUCGGCGCGCGCCGAGCCCGGAAGAGGCGCGGGCUAGGAAAGGAGUUGGUUCGCGCAGGUGCGGCGCCUGGGUCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.30935669 364.72171021]
[81.09236908 350.10794067]
[85.49379730 335.22817993]
[97.82119751 325.80401611]
[97.32524872 310.81222534]
[89.17137146 298.34774780]
[96.44816589 284.29928589]
[85.43199158 274.34039307]
[84.71546173 259.14364624]
[95.23596191 247.65638733]
[94.74001312 232.66459656]
[94.24406433 217.67279053]
[93.74810791 202.68099976]
[93.25215912 187.68919373]
[92.75621033 172.69740295]
[89.32071686 165.98399353]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[92.50000000 27.79650116]
[84.76270294 13.99632835]
[92.50000000 1.26905644]
[92.50000000 -13.73094368]
[92.50000000 -28.73094368]
[92.50000000 -43.73094177]
[92.50000000 -58.73094177]
[81.60544586 -69.86406708]
[81.81912994 -85.07620239]
[92.50000000 -95.39388275]
[92.50000000 -110.39388275]
[78.50568390 -116.26200104]
[67.85289764 -127.01194000]
[62.14283752 -140.98365784]
[62.21679688 -156.03630066]
[68.03237152 -169.87623596]
[78.67464447 -180.40655518]
[92.50000000 -186.04470825]
[92.50000000 -201.04470825]
[92.50000000 -216.04470825]
[83.83629608 -229.96850586]
[91.80042267 -244.30393982]
[108.19957733 -244.30393982]
[116.16370392 -229.96850586]
[107.50000000 -216.04470825]
[107.50000000 -201.04470825]
[107.50000000 -186.04470825]
[121.32535553 -180.40655518]
[131.96763611 -169.87623596]
[137.78320312 -156.03630066]
[137.85716248 -140.98365784]
[132.14710999 -127.01194000]
[121.49431610 -116.26200104]
[107.50000000 -110.39388275]
[107.50000000 -95.39388275]
[118.18087006 -85.07620239]
[118.39455414 -69.86406708]
[107.50000000 -58.73094177]
[107.50000000 -43.73094177]
[107.50000000 -28.73094368]
[107.50000000 -13.73094368]
[107.50000000 1.26905644]
[115.23729706 13.99632835]
[107.50000000 27.79650116]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.74800873 172.20144653]
[108.24395752 187.19325256]
[108.73991394 202.18504333]
[109.23586273 217.17684937]
[109.73181152 232.16864014]
[110.22776031 247.16044617]
[121.48445892 257.92727661]
[121.77385712 273.13815308]
[111.43996429 283.80334473]
[119.62931061 297.34014893]
[112.31704712 310.31628418]
[112.81299591 325.30807495]
[125.73629761 333.89691162]
[131.11151123 348.45321655]
[126.87176514 363.37985229]
[114.64731598 372.93719482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 90]
[5 89]
[7 87]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[15 79]
[17 78]
[18 77]
[19 76]
[20 75]
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[28 67]
[29 66]
[30 65]
[31 64]
[32 63]
[35 60]
[36 59]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
