%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGGCCCCAGCAGCCGAAGGGAAACCGGCGCGUCCCCCGCCCGCCCAGGCGUCAGCUGAUGGGCUGCCUGCCGAGGAGGCCGCAGCAGUCGCCGCGCGAAC\
) } def
/len { sequence length } bind def

/coor [
[-23.16597557 199.67616272]
[-37.14418411 194.23468018]
[-45.44839096 181.74307251]
[-45.05591965 166.74821472]
[-36.11082840 154.70898438]
[-51.00146103 156.51702881]
[-65.89208984 158.32507324]
[-72.38238525 175.39971924]
[-86.47744751 186.88711548]
[-104.34598541 189.77224731]
[-121.18443298 183.36390686]
[-132.50828552 169.45796204]
[-147.17419434 172.60617065]
[-155.06278992 177.54325867]
[-162.33036804 175.62092590]
[-177.08465576 178.32475281]
[-191.83895874 181.02857971]
[-206.59326172 183.73240662]
[-212.36265564 198.04035950]
[-224.96482849 206.93914795]
[-240.37849426 207.58920288]
[-253.68519592 199.78309631]
[-260.63879395 186.01171875]
[-259.02047729 170.66947937]
[-249.34657288 158.65200806]
[-234.70404053 153.79406738]
[-219.76522827 157.64578247]
[-209.29708862 168.97810364]
[-194.54278564 166.27427673]
[-179.78848267 163.57044983]
[-165.03417969 160.86662292]
[-150.32240295 157.94027710]
[-135.65650940 154.79205322]
[-133.56935120 142.92428589]
[-127.52191162 132.46131897]
[-118.22660828 124.68378448]
[-106.79508209 120.55308533]
[-94.60518646 120.59263611]
[-83.13499451 124.82164764]
[-73.78353119 132.74990845]
[-67.70014191 143.43444824]
[-52.80950928 141.62638855]
[-37.91887665 139.81834412]
[-23.35474968 136.22860718]
[-9.32950687 130.90953064]
[4.69573736 125.59046173]
[8.33735657 113.12957764]
[18.67760468 104.96063232]
[32.03369904 104.28176117]
[43.47902298 111.57019043]
[57.65851974 106.67714691]
[71.83801270 101.78411102]
[86.01751709 96.89106750]
[95.32749176 86.45957947]
[109.08944702 88.92943573]
[119.61081696 77.11371613]
[134.16583252 80.27610779]
[148.34533691 75.38306427]
[162.52482605 70.49002838]
[176.70433044 65.59698486]
[183.94030762 59.74503326]
[191.38659668 60.77733994]
[205.70741272 56.31479645]
[220.02822876 51.85224915]
[230.90167236 40.35969543]
[245.35453796 43.96025467]
[259.67535400 39.49770737]
[267.08477783 33.86697388]
[274.49649048 35.12371063]
[288.94555664 31.09573364]
[303.39462280 27.06775665]
[314.48052979 14.98328018]
[330.42807007 18.80537224]
[334.83175659 34.60219193]
[323.16146851 46.12332535]
[307.42260742 41.51681900]
[292.97354126 45.54479599]
[278.52447510 49.57277298]
[264.13787842 53.81851959]
[249.81707764 58.28106689]
[239.96795654 69.45442963]
[224.49076843 66.17306519]
[210.16996765 70.63560486]
[195.84915161 75.09815216]
[181.59736633 79.77648163]
[167.41786194 84.66952515]
[153.23837280 89.56256866]
[139.05886841 94.45560455]
[129.55171204 105.92134857]
[113.98248291 103.10893250]
[104.67250824 113.54042053]
[90.91055298 111.07056427]
[76.73105621 115.96360779]
[62.55155945 120.85665131]
[48.37206268 125.74968719]
[41.07962418 141.56199646]
[24.95181084 147.17716980]
[10.01481056 139.61570740]
[-4.01043320 144.93478394]
[-18.03567696 150.25384521]
[-4.51920557 156.75808716]
[2.79599285 169.85342407]
[1.24723470 184.77325439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 43]
[6 42]
[7 41]
[12 33]
[13 32]
[15 31]
[16 30]
[17 29]
[18 28]
[44 100]
[45 99]
[46 98]
[50 95]
[51 94]
[52 93]
[53 92]
[55 90]
[57 88]
[58 87]
[59 86]
[60 85]
[62 84]
[63 83]
[64 82]
[66 80]
[67 79]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
