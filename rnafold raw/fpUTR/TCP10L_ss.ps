%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAGUCCGUUGGAACUGUCCGCUGCUCUCUGGUCUCUGGAUAUGAGGCAGGAGGGCUUGGGGACAACUGUGGGGACAUGGCCCAGAUGAUCUGAUCCUGGCAGUAGUGACUGUUGGGGACCAGG\
) } def
/len { sequence length } bind def

/coor [
[128.89527893 172.15554810]
[122.61767578 185.77874756]
[107.84203339 188.36338806]
[97.31259155 177.68019104]
[100.11148071 162.94317627]
[100.77445984 147.95783997]
[93.38661957 149.25004578]
[85.62044525 162.08306885]
[77.85427094 174.91609192]
[74.82649994 191.59748840]
[57.95884705 193.30590820]
[51.64775848 177.57038879]
[65.02124786 167.14991760]
[72.78741455 154.31689453]
[80.55358887 141.48387146]
[65.59449005 125.87275696]
[60.21556854 106.30245972]
[64.51790619 87.82440948]
[51.58980560 80.21755219]
[38.66170883 72.61069489]
[25.73361206 65.00382996]
[12.80551434 57.39697647]
[-3.01225400 57.06715012]
[-10.05777836 43.94427490]
[-28.41918945 44.26499939]
[-36.55271912 28.76662636]
[-49.66501236 21.48186493]
[-62.77730942 14.19710445]
[-75.88960266 6.91234255]
[-89.00189209 -0.37241909]
[-102.11418915 -7.65718079]
[-115.22648621 -14.94194221]
[-131.04757690 -14.88042259]
[-138.41552734 -27.82501602]
[-151.52781677 -35.10977936]
[-164.64010620 -42.39453888]
[-177.75241089 -49.67930222]
[-190.86470032 -56.96406174]
[-205.40336609 -51.20549774]
[-220.22578430 -56.18848801]
[-228.33323669 -69.56021881]
[-225.89765930 -85.00695801]
[-214.06903076 -95.23524475]
[-198.43249512 -95.41558075]
[-186.37112427 -85.46282196]
[-183.57994080 -70.07635498]
[-170.46765137 -62.79159546]
[-157.35534668 -55.50683212]
[-144.24305725 -48.22207260]
[-131.13076782 -40.93730927]
[-116.24755859 -41.51988220]
[-107.94171906 -28.05423546]
[-94.82942963 -20.76947403]
[-81.71713257 -13.48471260]
[-68.60484314 -6.19995117]
[-55.49254608 1.08481026]
[-42.38025284 8.36957169]
[-29.26795959 15.65433311]
[-17.48465157 12.63547421]
[-6.47148561 18.68674850]
[-2.45092082 31.01617813]
[12.44214344 30.80190849]
[20.41237259 44.46887589]
[33.34046936 52.07573700]
[46.26856613 59.68259430]
[59.19666672 67.28945160]
[72.12476349 74.89630890]
[86.43739319 65.02458191]
[103.66356659 62.66633606]
[120.10272980 68.32817841]
[124.10655975 53.02197266]
[138.50924683 49.22568130]
[148.91725159 38.42413330]
[159.32525635 27.62258911]
[169.73326111 16.82104301]
[167.90179443 1.29108119]
[176.52442932 -11.75437737]
[191.52986145 -16.15566635]
[205.83294678 -9.83463097]
[212.68023682 4.22412825]
[208.83863831 19.38249588]
[196.12202454 28.48315239]
[180.53482056 27.22904968]
[170.12680054 38.03059387]
[159.71879578 48.83214188]
[149.31079102 59.63368607]
[146.05140686 74.16729736]
[130.90428162 78.73618317]
[137.12399292 87.49504852]
[140.78868103 98.07547760]
[141.36962891 109.71305084]
[138.57127380 121.49259949]
[132.37298584 132.42012024]
[144.03405762 141.85511780]
[155.69514465 151.29011536]
[173.90211487 153.68815613]
[179.65435791 170.21890259]
[191.54524231 179.36257935]
[203.43612671 188.50627136]
[215.32701111 197.64994812]
[227.21788025 206.79364014]
[239.10876465 215.93731689]
[250.99964905 225.08099365]
[262.89053345 234.22468567]
[274.78140259 243.36836243]
[286.67230225 252.51203918]
[302.99127197 254.13175964]
[309.50054932 269.18371582]
[299.50399780 282.18371582]
[283.28515625 279.75851440]
[277.52862549 264.40292358]
[265.63772583 255.25924683]
[253.74685669 246.11555481]
[241.85597229 236.97187805]
[229.96508789 227.82820129]
[218.07420349 218.68450928]
[206.18331909 209.54083252]
[194.29243469 200.39715576]
[182.40156555 191.25346375]
[170.51068115 182.10978699]
[158.41049194 183.35296631]
[148.41325378 175.73962402]
[146.26014709 162.95120239]
[134.59906006 153.51620483]
[122.93798065 144.08120728]
[115.55014038 145.37341309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 15]
[8 14]
[9 13]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[24 61]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[70 88]
[72 86]
[73 85]
[74 84]
[75 83]
[93 125]
[94 124]
[95 123]
[97 120]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
