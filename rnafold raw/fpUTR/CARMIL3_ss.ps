%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGAGCGCUCAAGCAGCCGCCCCUGACCGGAGCGGGCUCGGCCGCUGCUGCAGCGCUCAGCGCCCGGGCCCUGCUGAAGCCGGGUCUAGCAUGUGCCGCGGCUCCCCGGCGGCGGCGGCGGCUCCUCUGCAGCAGCCUCAGCAGCAGCGGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[128.68199158 125.93106079]
[129.46910095 135.95863342]
[125.34728241 150.38121033]
[121.22546387 164.80378723]
[127.72736359 179.47024536]
[120.18704987 193.63085938]
[104.38880920 196.42283630]
[92.45169830 185.70439148]
[93.53284454 169.69781494]
[106.80289459 160.68196106]
[110.92471313 146.25939941]
[115.04652405 131.83682251]
[109.19609833 127.14401245]
[91.64480591 113.06558228]
[78.46018219 120.21858978]
[65.27555084 127.37160492]
[61.44925690 132.87135315]
[56.19834518 135.21917725]
[51.42148209 134.53501892]
[37.96289825 141.15820312]
[24.50431633 147.78138733]
[11.04573345 154.40457153]
[2.08005261 167.44017029]
[-12.75572014 166.11764526]
[-26.21430397 172.74082947]
[-32.72413254 187.40376282]
[-48.28266144 191.31677246]
[-60.95471573 181.47814941]
[-61.01938248 165.43522644]
[-48.42705536 155.49476624]
[-32.83748627 159.28224182]
[-19.37890244 152.65905762]
[-11.37586975 140.09718323]
[4.42255068 140.94598389]
[17.88113403 134.32279968]
[31.33971596 127.69961548]
[44.79829788 121.07643890]
[58.12253952 114.18697357]
[71.30716705 107.03396606]
[84.49179077 99.88095093]
[96.37694550 90.72982788]
[106.66253662 79.81164551]
[116.94812012 68.89346313]
[127.23371124 57.97527695]
[137.51930237 47.05709457]
[147.80488586 36.13891220]
[158.09046936 25.22073174]
[168.37605286 14.30254936]
[178.66163635 3.38436699]
[188.94723511 -7.53381538]
[199.23281860 -18.45199776]
[209.51840210 -29.37018013]
[219.80398560 -40.28836060]
[229.87046814 -51.40888596]
[239.71385193 -62.72735596]
[243.00939941 -71.30647278]
[249.86721802 -74.17049408]
[259.93368530 -85.29102325]
[270.00018311 -96.41154480]
[279.95559692 -107.63159180]
[283.17333984 -123.12213135]
[297.36358643 -127.64826965]
[307.20697021 -138.96673584]
[317.05035400 -150.28520203]
[313.71658325 -165.32489014]
[319.80670166 -179.28067017]
[332.79312134 -186.88441467]
[347.58966064 -185.40097046]
[357.43304443 -196.71943665]
[367.27642822 -208.03791809]
[377.11981201 -219.35638428]
[386.96319580 -230.67485046]
[396.69357300 -242.09062195]
[406.30999756 -253.60255432]
[415.92639160 -265.11450195]
[425.54278564 -276.62643433]
[435.15921021 -288.13836670]
[444.77560425 -299.65032959]
[443.55181885 -315.17901611]
[453.46820068 -326.71676636]
[468.27996826 -327.78775024]
[477.89639282 -339.29968262]
[487.51278687 -350.81164551]
[497.12918091 -362.32357788]
[506.74560547 -373.83551025]
[516.36199951 -385.34744263]
[514.76104736 -396.17541504]
[519.31835938 -405.88442993]
[528.29473877 -411.34176636]
[538.57165527 -410.93606567]
[548.63812256 -422.05657959]
[558.70458984 -433.17712402]
[562.17004395 -441.68902588]
[569.08349609 -444.41610718]
[579.36907959 -455.33428955]
[589.65466309 -466.25247192]
[596.11462402 -481.92745972]
[612.96533203 -480.05920410]
[615.83483887 -463.34985352]
[600.57281494 -455.96688843]
[590.28723145 -445.04870605]
[580.00164795 -434.13052368]
[569.82513428 -423.11062622]
[559.75866699 -411.99011230]
[549.69213867 -400.86959839]
[547.07739258 -381.74310303]
[527.87396240 -375.73104858]
[518.25750732 -364.21911621]
[508.64114380 -352.70718384]
[499.02471924 -341.19522095]
[489.40832520 -329.68328857]
[479.79193115 -318.17135620]
[481.37448120 -303.40548706]
[471.78607178 -291.59375000]
[456.28753662 -290.03390503]
[446.67114258 -278.52197266]
[437.05471802 -267.01004028]
[427.43832397 -255.49809265]
[417.82192993 -243.98616028]
[408.20550537 -232.47421265]
[406.32061768 -225.28536987]
[398.28167725 -220.83146667]
[388.43829346 -209.51300049]
[378.59490967 -198.19451904]
[368.75152588 -186.87605286]
[358.90814209 -175.55758667]
[362.43002319 -161.10995483]
[356.70150757 -147.19421387]
[343.72558594 -139.22682190]
[328.36883545 -140.44181824]
[318.52545166 -129.12335205]
[308.68206787 -117.80487823]
[306.16839600 -103.12391663]
[291.27407837 -97.78820801]
[289.24661255 -90.63825989]
[281.12069702 -86.34506989]
[271.05422974 -75.22454071]
[260.98773193 -64.10401917]
[251.03231812 -52.88396835]
[241.18893433 -41.56549835]
[240.62931824 -36.77245331]
[237.01727295 -32.29612732]
[230.72216797 -30.00277519]
[220.43658447 -19.08459282]
[210.15100098 -8.16641045]
[199.86541748 2.75177169]
[189.57981873 13.66995430]
[179.29423523 24.58813667]
[169.00865173 35.50631714]
[158.72306824 46.42449951]
[148.43748474 57.34268188]
[138.15188599 68.26086426]
[127.86630249 79.17904663]
[117.58071899 90.09722900]
[107.29512787 101.01541138]
[114.56719208 104.30730438]
[120.85599518 109.73428345]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[14 40]
[15 39]
[16 38]
[19 37]
[20 36]
[21 35]
[22 34]
[24 32]
[25 31]
[41 155]
[42 154]
[43 153]
[44 152]
[45 151]
[46 150]
[47 149]
[48 148]
[49 147]
[50 146]
[51 145]
[52 144]
[53 143]
[54 140]
[55 139]
[57 138]
[58 137]
[59 136]
[60 134]
[62 132]
[63 131]
[64 130]
[68 126]
[69 125]
[70 124]
[71 123]
[72 122]
[73 120]
[74 119]
[75 118]
[76 117]
[77 116]
[78 115]
[81 112]
[82 111]
[83 110]
[84 109]
[85 108]
[86 107]
[90 105]
[91 104]
[92 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
