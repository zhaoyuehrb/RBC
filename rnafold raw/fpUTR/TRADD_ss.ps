%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACACCCGGAAGCGGCGGAGUAGAGCGGAGCCUGGCGGGCGUGGGAACCCAGGCCCCGCCGAGGCGGCCAGGUUAGUGCAGCAGGAGGUGAG\
) } def
/len { sequence length } bind def

/coor [
[82.01678467 319.06781006]
[90.21038818 304.86227417]
[89.70915985 289.87066650]
[89.20793915 274.87902832]
[78.18826294 264.92401123]
[77.46639252 249.72752380]
[87.98284912 238.23657227]
[87.48162079 223.24494934]
[79.32336426 210.78332520]
[86.59520721 196.73231506]
[75.57553864 186.77729797]
[74.85366058 171.58081055]
[85.37011719 160.08985901]
[84.86889648 145.09823608]
[84.36766815 130.10661316]
[72.91288757 120.42218781]
[58.04672241 122.42149353]
[50.79942322 136.14215088]
[36.85663223 142.95230103]
[21.57963181 140.23330688]
[10.84274483 129.03067017]
[8.77452087 113.65205383]
[16.17023659 100.01082611]
[30.18608475 93.35233307]
[45.43268967 96.23689270]
[56.04741669 107.55533600]
[70.91358185 105.55603027]
[74.85342407 89.07940674]
[86.54766846 78.66886902]
[100.82399750 76.99287415]
[106.21511841 62.99516678]
[111.60623169 48.99745560]
[116.99734497 34.99974823]
[122.38846588 21.00203896]
[127.77957916 7.00432968]
[133.17070007 -6.99337912]
[138.56181335 -20.99108887]
[126.70204163 -48.10625458]
[127.20326996 -63.09787750]
[127.70449066 -78.08950043]
[128.20571899 -93.08112335]
[120.93386841 -107.13213348]
[129.09213257 -119.59375000]
[129.59335327 -134.58537292]
[130.09458923 -149.57699585]
[121.90097809 -163.78253174]
[130.33967590 -177.84382629]
[146.72967529 -177.29585266]
[154.21032715 -162.70230103]
[145.08621216 -149.07577515]
[144.58497620 -134.08415222]
[144.08375549 -119.09252930]
[151.39144897 -106.11382294]
[143.19734192 -92.57989502]
[142.69612122 -77.58827209]
[142.19488525 -62.59665298]
[141.69366455 -47.60502625]
[154.59968567 -39.96077728]
[167.50572205 -47.60502625]
[180.41174316 -55.24927902]
[187.97663879 -69.79933929]
[204.36952209 -70.25257111]
[212.72679138 -56.14271927]
[204.45121765 -41.98479080]
[188.05598450 -42.34325409]
[175.14996338 -34.69900513]
[162.24394226 -27.05475426]
[152.55952454 -15.59997177]
[147.16841125 -1.60226262]
[141.77729797 12.39544678]
[136.38616943 26.39315605]
[130.99505615 40.39086533]
[125.60394287 54.38857269]
[120.21282196 68.38628387]
[114.82170868 82.38399506]
[125.18708038 98.73770905]
[119.65934753 119.10810852]
[99.35929108 129.60537720]
[99.86051941 144.59700012]
[100.36174011 159.58862305]
[111.62222290 170.35150146]
[111.91697693 185.56227112]
[101.58683014 196.23109436]
[109.78094482 209.76501465]
[102.47324371 222.74372864]
[102.97447205 237.73535156]
[114.23495483 248.49821472]
[114.52970123 263.70898438]
[104.19956207 274.37780762]
[104.70079041 289.36944580]
[105.20201111 304.36105347]
[114.32614136 317.98757935]
[106.84547424 332.58114624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 91]
[3 90]
[4 89]
[7 86]
[8 85]
[10 83]
[13 80]
[14 79]
[15 78]
[16 27]
[17 26]
[30 75]
[31 74]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[37 68]
[38 57]
[39 56]
[40 55]
[41 54]
[43 52]
[44 51]
[45 50]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
