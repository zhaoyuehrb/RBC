%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGCGCGCGCGGGGCGGGGGCGCGCGGAGGGGGGGGCUGCCCCGGGGCGGCCCCCCCAGGUCGGGGCGCGGCGGGCGGCGGCGGCGGGCGCGCGUCCCGUCCAGGUCCGGAGUAACCGCCGCCGCCGCCGCCAAAGCUCGCCAAC\
) } def
/len { sequence length } bind def

/coor [
[91.01803589 124.75723267]
[89.03276825 140.45338440]
[75.24394226 146.08522034]
[66.32444000 158.14517212]
[57.40494537 170.20513916]
[48.48544693 182.26509094]
[39.56594849 194.32504272]
[30.64645195 206.38500977]
[28.66117859 222.08116150]
[14.87235260 227.71299744]
[12.88707924 243.40914917]
[-0.90174580 249.04098511]
[-9.82124329 261.10095215]
[-14.37847710 277.43090820]
[-31.33183479 277.57235718]
[-36.16091537 261.32070923]
[-21.88120079 252.18144226]
[-12.96170235 240.12149048]
[-11.61441231 225.28794861]
[2.81239557 218.79350281]
[4.15968657 203.95994568]
[18.58649445 197.46551514]
[27.50599098 185.40554810]
[36.42548752 173.34559631]
[45.34498596 161.28564453]
[54.26448441 149.22567749]
[63.18398285 137.16572571]
[64.53127289 122.33217621]
[78.95808411 115.83773804]
[75.80588531 110.40390015]
[74.03024292 104.37812805]
[73.73217773 98.10325623]
[59.69826508 92.80709076]
[45.66435623 87.51092529]
[31.63044548 82.21475983]
[17.59653473 76.91859436]
[3.56262517 71.62242889]
[-10.47128487 66.32626343]
[-24.50519562 61.03009796]
[-38.53910446 55.73393631]
[-52.57301712 50.43777084]
[-66.60692596 45.14160538]
[-80.64083862 39.84543991]
[-96.72682190 43.03496170]
[-107.32701111 30.52224922]
[-101.53684235 15.17930603]
[-85.31273651 12.78963661]
[-75.34467316 25.81152916]
[-61.31076050 31.10769463]
[-47.27685165 36.40385818]
[-33.24293900 41.70002365]
[-19.20903015 46.99618912]
[-5.17511988 52.29235458]
[8.85879040 57.58852005]
[22.89270020 62.88468552]
[36.92660904 68.18084717]
[50.96052170 73.47701263]
[64.99443054 78.77317810]
[79.02834320 84.06934357]
[100.00000000 73.66378784]
[120.97165680 84.06934357]
[135.00556946 78.77317810]
[149.03947449 73.47701263]
[153.59333801 68.53023529]
[159.13505554 66.92144012]
[163.78303528 68.26779175]
[178.02906799 63.57201004]
[192.27511597 58.87623215]
[206.52114868 54.18045807]
[214.07751465 38.44001770]
[230.34902954 33.10635376]
[245.16242981 41.00262451]
[259.30560303 36.00552750]
[273.44876099 31.00843048]
[287.59191895 26.01133347]
[301.73507690 21.01423645]
[308.84338379 15.16523933]
[316.23181152 16.06464767]
[330.47784424 11.36887074]
[344.72387695 6.67309332]
[358.96990967 1.97731626]
[373.21597290 -2.71846080]
[387.46200562 -7.41423798]
[401.70803833 -12.11001492]
[415.95407104 -16.80579185]
[430.20013428 -21.50156975]
[444.44616699 -26.19734573]
[458.69219971 -30.89312363]
[472.93826294 -35.58890152]
[480.10122681 -49.42109680]
[494.61563110 -53.98033905]
[507.75836182 -47.06629944]
[522.00439453 -51.76207733]
[533.90222168 -65.77431488]
[550.92059326 -61.61434555]
[565.06378174 -66.61144257]
[571.93151855 -80.59255981]
[586.34588623 -85.45884705]
[599.63244629 -78.82532501]
[613.77557373 -83.82242584]
[621.96209717 -97.61956787]
[637.87243652 -99.67868042]
[649.30163574 -88.42018890]
[647.48211670 -72.48065186]
[633.80969238 -64.08750916]
[618.77270508 -69.67926025]
[604.62951660 -64.68216705]
[598.45947266 -51.17418289]
[584.18743896 -45.90494156]
[570.06085205 -52.46828079]
[555.91772461 -47.47118378]
[550.39056396 -36.66249466]
[538.59277344 -32.40744781]
[526.70019531 -37.51603699]
[512.45416260 -32.82025909]
[505.99871826 -19.44628143]
[491.61810303 -14.48115540]
[477.63403320 -21.34285927]
[463.38796997 -16.64708328]
[449.14193726 -11.95130539]
[434.89590454 -7.25552845]
[420.64987183 -2.55975151]
[406.40380859 2.13602567]
[392.15777588 6.83180285]
[377.91174316 11.52758026]
[363.66571045 16.22335625]
[349.41964722 20.91913414]
[335.17361450 25.61491203]
[320.92758179 30.31068802]
[306.73217773 35.15739822]
[292.58901978 40.15449524]
[278.44586182 45.15159225]
[264.30270386 50.14868927]
[250.15953064 55.14578629]
[246.26414490 67.47022247]
[235.81265259 75.40190125]
[222.50479126 75.85051727]
[211.21693420 68.42649841]
[196.97088623 73.12227631]
[182.72485352 77.81805420]
[168.47880554 82.51383209]
[154.33564758 87.51092529]
[140.30172729 92.80709076]
[126.26782227 98.10325623]
[124.94827271 108.43682861]
[119.72517395 117.45032501]
[111.41576385 123.73344421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[10 20]
[12 18]
[13 17]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[61 144]
[62 143]
[63 142]
[66 141]
[67 140]
[68 139]
[69 138]
[72 134]
[73 133]
[74 132]
[75 131]
[76 130]
[78 129]
[79 128]
[80 127]
[81 126]
[82 125]
[83 124]
[84 123]
[85 122]
[86 121]
[87 120]
[88 119]
[89 118]
[92 115]
[93 114]
[95 111]
[96 110]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
