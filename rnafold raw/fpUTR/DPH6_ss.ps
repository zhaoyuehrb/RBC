%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCGGCGCGACCUCCUGGCUCCCGCCCGCGCUCGCCGCACGCACGCGCACUGCGCCCAGC\
) } def
/len { sequence length } bind def

/coor [
[86.83241272 266.25018311]
[86.83241272 251.25016785]
[86.83241272 236.25016785]
[86.83241272 221.25016785]
[83.55702209 214.30072021]
[87.22502136 205.50714111]
[87.97270966 190.52578735]
[88.72039795 175.54443359]
[89.46808624 160.56307983]
[90.21577454 145.58172607]
[90.96346283 130.60037231]
[84.29704285 127.77515411]
[78.43922424 123.51967621]
[73.69166565 118.05307770]
[70.29882050 111.65685272]
[68.43541718 104.66036987]
[68.19739532 97.42390442]
[69.59701538 90.32009125]
[72.56221008 83.71474457]
[61.82420349 73.24118805]
[51.08620071 62.76763535]
[35.06929779 59.24758148]
[30.36788177 43.53679657]
[41.81837082 31.79719162]
[57.64147949 36.10546494]
[61.55975342 52.02963257]
[72.29776001 62.50318527]
[83.03575897 72.97673798]
[100.79545593 68.10314178]
[118.29015350 73.85592651]
[129.53686523 63.93064117]
[140.78358459 54.00535202]
[152.03030396 44.08006668]
[153.16894531 28.54490280]
[164.71609497 18.63946342]
[179.51948547 19.82071686]
[190.76620483 9.89542961]
[193.19662476 -5.96245766]
[207.18133545 -13.82422352]
[221.99247742 -7.65899324]
[226.26818848 7.80379534]
[216.72851562 20.70241547]
[200.69149780 21.14214706]
[189.44477844 31.06743622]
[188.77615356 45.90281677]
[177.51176453 56.12868500]
[161.95559692 55.32678223]
[150.70887756 65.25206757]
[139.46215820 75.17736053]
[128.21543884 85.10264587]
[131.60662842 104.36613464]
[123.11998749 121.98881531]
[105.94481659 131.34806824]
[105.19712830 146.32942200]
[104.44944000 161.31077576]
[103.70175171 176.29212952]
[102.95406342 191.27348328]
[102.20637512 206.25483704]
[101.83241272 221.25016785]
[101.83241272 236.25016785]
[101.83241272 251.25016785]
[101.83241272 266.25018311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[4 59]
[6 58]
[7 57]
[8 56]
[9 55]
[10 54]
[11 53]
[19 28]
[20 27]
[21 26]
[30 50]
[31 49]
[32 48]
[33 47]
[36 44]
[37 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
