%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGAUUUGAGGGACAAGAAUUCAGUGCCCGGGGGCCGAAAGGCAGCAGAAGGCGGGCACCAAAGGAUAGGCACCCGGAAGGUGGACUCCGAGGAGGAGAGAGGACAGGGGUCUCUCACCCCAGCUCCUGGUCACC\
) } def
/len { sequence length } bind def

/coor [
[98.18053436 249.44601440]
[96.56375885 264.66589355]
[88.04950714 277.38461304]
[74.59429169 284.67953491]
[59.29001999 284.87432861]
[45.65350723 277.92419434]
[36.81832123 265.42630005]
[34.81472015 250.25248718]
[40.10311890 235.88963318]
[51.46828461 225.63821411]
[66.29858398 221.85392761]
[69.70821381 207.24658203]
[72.95014191 192.60112000]
[76.02394867 177.91943359]
[79.09774780 163.23774719]
[69.78086853 159.35252380]
[61.15816498 154.10388184]
[53.42771530 147.61239624]
[46.76709366 140.02717590]
[41.32931137 131.52249146]
[37.23927307 122.29368591]
[34.59093857 112.55276489]
[33.44514084 102.52348328]
[33.82820129 92.43624115]
[35.73132324 82.52274323]
[21.79228592 76.98169708]
[7.85324907 71.44064331]
[-6.08578777 65.89958954]
[-20.02482414 60.35853958]
[-33.96385956 54.81748581]
[-47.90289688 49.27643585]
[-64.94035339 61.99907303]
[-86.07241821 62.06324005]
[-102.97523499 49.60029602]
[-109.08417511 29.64515305]
[-123.65145874 26.06826591]
[-138.21875000 22.49137688]
[-153.80682373 27.58489418]
[-165.82960510 16.43209457]
[-161.91906738 0.50602072]
[-146.09805298 -3.80994654]
[-134.64186096 7.92408943]
[-120.07457733 11.50097752]
[-105.50728607 15.07786655]
[-100.21179199 7.36332321]
[-92.95526123 1.41842663]
[-84.30611420 -2.27411342]
[-74.94661713 -3.40868139]
[-65.61909485 -1.88201249]
[-57.06705093 2.19756079]
[-49.97589493 8.51768494]
[-44.91801071 16.58586693]
[-42.30657959 25.76783562]
[-42.36184692 35.33739853]
[-28.42280960 40.87844849]
[-14.48377228 46.41950226]
[-0.54473579 51.96055222]
[13.39430046 57.50160599]
[27.33333778 63.04265594]
[41.27237320 68.58370972]
[45.33622360 61.95018005]
[50.14584351 55.83575821]
[55.63561630 50.32386017]
[61.73064423 45.48968887]
[68.34777832 41.39919662]
[75.39673615 38.10818481]
[82.78135681 35.66155243]
[90.40088654 34.09268188]
[98.15137482 33.42297745]
[105.92708588 33.66157150]
[113.62193298 34.80521393]
[121.13094330 36.83829880]
[127.46155548 23.23964500]
[133.79216003 9.64099312]
[140.12277222 -3.95765901]
[135.99909973 -19.46168327]
[145.66494751 -32.26601410]
[161.70552063 -32.54826736]
[171.81585693 -20.09192085]
[168.24017334 -4.45241690]
[153.72143555 2.37295413]
[147.39082336 15.97160625]
[141.06021118 29.57025909]
[134.72959900 43.16891098]
[143.04017639 49.17224121]
[150.33094788 56.37989807]
[156.42916870 64.62110138]
[169.95434570 58.13498688]
[183.47952271 51.64887619]
[197.00468445 45.16276550]
[203.66314697 30.56672096]
[219.26063538 26.81196404]
[231.83207703 36.77882004]
[231.73374939 52.82157516]
[219.04109192 62.63359451]
[203.49079895 58.68793869]
[189.96562195 65.17404938]
[176.44044495 71.66016388]
[162.91528320 78.14627075]
[166.45953369 95.63564301]
[165.23287964 113.43832397]
[159.32337952 130.27630615]
[171.83113098 138.55615234]
[184.33889771 146.83601379]
[196.84664917 155.11585999]
[209.44851685 163.25175476]
[225.24929810 164.05548096]
[231.89839172 177.38360596]
[244.59271240 185.37448120]
[257.28704834 193.36535645]
[269.98135376 201.35624695]
[282.67568970 209.34712219]
[298.57525635 207.20642090]
[310.06204224 218.40612793]
[308.32434082 234.35478210]
[294.69515991 242.81796265]
[279.62966919 237.30342102]
[274.68478394 222.04144287]
[261.99047852 214.05056763]
[249.29615784 206.05967712]
[236.60183716 198.06880188]
[223.90750122 190.07792664]
[209.01470947 189.84576416]
[201.45764160 175.94607544]
[194.05621338 175.03694153]
[188.56680298 167.62361145]
[176.05903625 159.34376526]
[163.55128479 151.06391907]
[151.04351807 142.78405762]
[125.31125641 161.60566711]
[93.77942657 166.31155396]
[90.70562744 180.99322510]
[87.63182831 195.67491150]
[88.93991089 204.80616760]
[84.31555939 210.65621948]
[80.90592194 225.26356506]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 133]
[14 132]
[15 131]
[25 60]
[26 59]
[27 58]
[28 57]
[29 56]
[30 55]
[31 54]
[35 44]
[36 43]
[37 42]
[72 84]
[73 83]
[74 82]
[75 81]
[87 99]
[88 98]
[89 97]
[90 96]
[102 129]
[103 128]
[104 127]
[105 126]
[106 124]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
