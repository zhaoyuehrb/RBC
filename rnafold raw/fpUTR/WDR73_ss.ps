%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUCGCGAGAGCCGCGCGGCCCCCGAAGGCUCGCAGGCGGAAGUGAGACGCCGGAAGCGGUCGUUGCC\
) } def
/len { sequence length } bind def

/coor [
[137.09272766 178.37535095]
[146.44731140 166.64965820]
[161.07121277 163.31552124]
[149.77513123 153.44644165]
[138.47906494 143.57736206]
[127.18299103 133.70828247]
[115.88691711 123.83919525]
[101.87417603 128.58651733]
[87.36155701 125.70936584]
[76.21981049 115.97511292]
[71.42061615 101.98004913]
[74.24399567 87.45687103]
[62.94792557 77.58779144]
[51.65185547 67.71871185]
[40.13718414 58.10557938]
[28.40971184 48.75323105]
[16.68223953 39.40088272]
[7.71341801 36.35620117]
[4.65083456 29.35634995]
[-6.64523745 19.48726845]
[-17.94130898 9.61818790]
[-29.23738098 -0.25089324]
[-44.98703003 1.06217706]
[-56.99805832 -9.20966244]
[-58.14454269 -24.97231293]
[-47.74628830 -36.87407303]
[-31.97239685 -37.85383606]
[-20.18124008 -27.33033180]
[-19.36829948 -11.54696560]
[-8.07222843 -1.67788434]
[3.22384357 8.19119644]
[14.51991558 18.06027794]
[26.03458595 27.67341232]
[37.76205826 37.02575684]
[49.48953247 46.37810516]
[56.92373657 48.14160156]
[61.52093506 56.42264175]
[72.81700897 66.29171753]
[84.11308289 76.16080475]
[98.12582397 71.41348267]
[112.63844299 74.29063416]
[123.78018951 84.02488708]
[128.57937622 98.01995087]
[125.75600433 112.54312897]
[137.05207825 122.41220856]
[148.34814453 132.28128052]
[159.64421082 142.15037537]
[170.94029236 152.01945496]
[183.64115906 159.99992371]
[197.43406677 165.89530945]
[211.22698975 171.79067993]
[225.14871216 177.37509155]
[239.19223022 182.64570618]
[253.23574829 187.91633606]
[269.31591797 184.69754028]
[279.93884277 197.19094849]
[274.17660522 212.54440308]
[257.95687866 214.96359253]
[247.96513367 201.95985413]
[233.92161560 196.68923950]
[219.87808228 191.41860962]
[212.26278687 192.03872681]
[205.33160400 185.58360291]
[191.53869629 179.68821716]
[177.74577332 173.79284668]
[181.08679199 188.41603088]
[174.58058167 201.93154907]
[161.06658936 208.44093323]
[146.44262695 205.10333252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 48]
[4 47]
[5 46]
[6 45]
[7 44]
[12 39]
[13 38]
[14 37]
[15 35]
[16 34]
[17 33]
[19 32]
[20 31]
[21 30]
[22 29]
[49 65]
[50 64]
[51 63]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
