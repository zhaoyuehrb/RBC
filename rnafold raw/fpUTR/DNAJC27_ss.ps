%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCCCUCCCCCGGCUCCCCACGCUCCCAACCGCCCGCGCCUGCUGCCAGGCAGCGGCGGGGAUGGCGAGCAGCGGAGGCGAGGCGGUGACGAGAGCAGCGGCUCCGCCAUUGGACGAGGAGGCCUGAGGGACGGGCCAGCGGUGCACAAGAAGAGACCGAGGCGGGUGGCCCCGAGAGAGCCAGGGCC\
) } def
/len { sequence length } bind def

/coor [
[154.97421265 347.74468994]
[150.76091003 340.82275391]
[149.62326050 332.70458984]
[151.82141113 324.70974731]
[157.06715393 318.16754150]
[152.69076538 303.82015991]
[148.31436157 289.47277832]
[137.78053284 283.50424194]
[134.02349854 271.57357788]
[139.58108521 259.92181396]
[135.44126892 245.50440979]
[124.49188995 235.40686035]
[128.11997986 220.00726318]
[123.98015594 205.58984375]
[119.84032440 191.17243958]
[115.58206940 176.78955078]
[111.20566559 162.44218445]
[106.82926941 148.09480286]
[94.19482422 148.22914124]
[81.95311737 145.10055542]
[70.93236542 138.92071533]
[61.87816620 130.10772705]
[55.40307236 119.25782013]
[51.94515610 107.10504150]
[36.94566345 106.98168182]
[21.94617271 106.85832214]
[6.94667912 106.73496246]
[-8.05332088 106.73496246]
[-23.05281258 106.85832214]
[-38.05230713 106.98168182]
[-51.78837967 114.83220673]
[-64.57884979 107.19983673]
[-79.57834625 107.32319641]
[-93.31442261 115.17372894]
[-106.10489655 107.54135895]
[-121.10286713 107.78807068]
[-136.09829712 108.15811920]
[-151.09373474 108.52816010]
[-166.08917236 108.89820862]
[-181.08105469 109.39156342]
[-196.06837463 110.00819397]
[-211.05569458 110.62482452]
[-226.04301453 111.24145508]
[-241.03033447 111.85808563]
[-254.58621216 121.08685303]
[-269.23693848 113.71877289]
[-269.91107178 97.33348846]
[-255.91514587 88.78677368]
[-241.64697266 96.87076569]
[-226.65963745 96.25413513]
[-211.67231750 95.63750458]
[-196.68499756 95.02087402]
[-181.69767761 94.40424347]
[-175.13253784 90.98215485]
[-166.45921326 93.90277100]
[-151.46377563 93.53273010]
[-136.46833801 93.16268158]
[-121.47290802 92.79263306]
[-114.85237122 89.47898865]
[-106.22825623 92.54187012]
[-93.56504059 84.70015717]
[-79.70170593 92.32370758]
[-64.70220947 92.20034790]
[-52.03900146 84.35864258]
[-38.17566681 91.98218536]
[-23.17617226 91.85882568]
[-8.17668056 91.73546600]
[-1.50253737 88.53115845]
[7.07003880 91.73546600]
[22.06953239 91.85882568]
[37.06902313 91.98218536]
[52.06851578 92.10554504]
[63.59867859 67.83335114]
[86.26764679 53.40416336]
[84.29956818 38.53383636]
[82.33148193 23.66350746]
[80.36339569 8.79318047]
[78.39530945 -6.07714748]
[76.42722321 -20.94747543]
[66.94615173 -33.61317062]
[72.94667816 -47.24559402]
[70.97859192 -62.11592102]
[58.71749115 -71.72337341]
[56.93340683 -86.83203888]
[66.16820526 -98.46191406]
[64.20012665 -113.33224487]
[49.97587204 -119.12587738]
[40.56680298 -131.26527405]
[38.50391388 -146.48500061]
[44.34210968 -160.69102478]
[56.51094055 -170.06199646]
[71.73706055 -172.07716370]
[85.92471313 -166.19447327]
[95.25749207 -153.99632263]
[97.22492981 -138.76397705]
[91.29779053 -124.59482574]
[79.07044983 -115.30033112]
[81.03853607 -100.43000031]
[92.98081207 -91.60290527]
[95.18856049 -76.55031586]
[85.84892273 -64.08400726]
[87.81700134 -49.21368027]
[97.15731049 -37.61161041]
[91.29755402 -22.91555977]
[93.26564026 -8.04523182]
[95.23372650 6.82509565]
[97.20180511 21.69542313]
[99.16989136 36.56575012]
[101.13797760 51.43607712]
[112.80064392 53.13964462]
[123.70973206 57.60190964]
[133.22300720 64.56017303]
[140.78042603 73.60480499]
[154.48027039 67.49624634]
[163.93334961 54.80965042]
[178.70837402 56.69327927]
[192.40820312 50.58471680]
[197.75086975 38.83286285]
[209.30090332 34.03147507]
[220.64793396 38.25398254]
[226.61685181 23.86614609]
[240.69424438 18.09711075]
[254.37405396 23.87622261]
[268.17251587 17.99381447]
[281.97097778 12.11140537]
[295.76940918 6.22899628]
[309.56787109 0.34658727]
[323.36633301 -5.53582191]
[330.66296387 -19.82353401]
[346.41104126 -22.88572693]
[358.53002930 -12.37334633]
[357.72323608 3.64940763]
[344.60955811 12.89124966]
[329.24871826 8.26262951]
[315.45028687 14.14503860]
[301.65182495 20.02744865]
[287.85336304 25.90985680]
[274.05493164 31.79226494]
[260.25646973 37.67467499]
[254.95388794 51.54616165]
[241.04408264 57.70832825]
[226.53034973 52.05243683]
[216.77301025 66.63005829]
[198.51676941 64.28455353]
[184.81692505 70.39311218]
[176.34375000 82.64278412]
[160.58882141 81.19608307]
[146.88899231 87.30464172]
[148.46929932 96.76322174]
[148.16070557 106.34793854]
[145.97523499 115.68526459]
[141.99806213 124.41132355]
[136.38417053 132.18605042]
[129.35235596 138.70645142]
[121.17664337 143.71841431]
[125.55303955 158.06578064]
[129.92944336 172.41316223]
[135.43553162 179.72338867]
[134.25773621 187.03260803]
[138.39756775 201.45001221]
[142.53739929 215.86743164]
[153.78288269 226.99621582]
[149.85867310 241.36457825]
[153.99850464 255.78198242]
[167.54154968 268.24703979]
[162.66174316 285.09637451]
[167.03813171 299.44375610]
[171.41453552 313.79113770]
[188.88752747 327.80761719]
[183.28114319 348.70642090]
[188.59133911 362.73501587]
[193.90155029 376.76361084]
[199.21174622 390.79223633]
[204.52194214 404.82083130]
[216.64363098 414.98822021]
[213.91300964 429.63037109]
[228.73345947 434.61917114]
[236.83567810 447.99407959]
[234.39402771 463.43988037]
[222.56140137 473.66351318]
[206.92478943 473.83770752]
[194.86732483 463.88021851]
[192.08216858 448.49267578]
[199.88439941 434.94058228]
[188.14254761 425.77661133]
[190.49333191 410.13104248]
[185.18313599 396.10241699]
[179.87294006 382.07382202]
[174.56274414 368.04522705]
[169.25253296 354.01660156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 168]
[6 167]
[7 166]
[10 164]
[11 163]
[13 161]
[14 160]
[15 159]
[16 157]
[17 156]
[18 155]
[24 72]
[25 71]
[26 70]
[27 69]
[28 67]
[29 66]
[30 65]
[32 63]
[33 62]
[35 60]
[36 58]
[37 57]
[38 56]
[39 55]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[74 109]
[75 108]
[76 107]
[77 106]
[78 105]
[79 104]
[81 102]
[82 101]
[85 98]
[86 97]
[113 148]
[114 147]
[116 145]
[117 144]
[120 142]
[123 139]
[124 138]
[125 137]
[126 136]
[127 135]
[128 134]
[170 190]
[171 189]
[172 188]
[173 187]
[174 186]
[176 184]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
