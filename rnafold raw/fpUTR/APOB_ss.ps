%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCCACCGGGACCUGCGGGGCUGAGUGCCCUUCUCGGUUGCUGCCGCUGAGGAGCCCGCCCAGCCAGCCAGGGCCGCGAGGCCGAGGCCAGGCCGCAGCCCAGGAGCCGCCCCACCGCAGCUGGCG\
) } def
/len { sequence length } bind def

/coor [
[3.55443501 619.89495850]
[-10.57477856 625.91662598]
[-25.81994629 624.05108643]
[-38.08019638 614.79998779]
[-44.05757904 600.65197754]
[-42.14421082 585.41271973]
[-32.85477829 573.18157959]
[-18.68809319 567.24853516]
[-16.86609650 552.35961914]
[-15.04409885 537.47070312]
[-13.22210121 522.58172607]
[-15.18524075 519.53533936]
[-15.70979691 515.35809326]
[-14.26783180 510.76559448]
[-10.68482971 506.68731689]
[-7.78087091 491.97109985]
[-4.87691212 477.25488281]
[-1.97295308 462.53866577]
[0.93100572 447.82244873]
[3.83496451 433.10623169]
[6.55951738 418.35577393]
[9.10426044 403.57318115]
[7.06646490 399.14956665]
[7.86002159 393.39004517]
[12.14964771 388.14025879]
[10.51635456 380.85220337]
[15.67289639 373.18435669]
[19.28990936 358.62698364]
[22.90692139 344.06961060]
[16.92303276 333.48239136]
[19.89296722 321.27502441]
[30.74442101 314.17889404]
[34.71484756 299.71392822]
[38.68527603 285.24893188]
[42.65570068 270.78396606]
[46.62612915 256.31896973]
[42.53364944 241.99763489]
[53.64781189 230.73770142]
[57.61824036 216.27272034]
[61.58866501 201.80773926]
[65.55908966 187.34275818]
[69.52951813 172.87777710]
[73.49994659 158.41279602]
[69.40746307 144.09144592]
[80.52162933 132.83152771]
[84.49205780 118.36654663]
[88.46248627 103.90156555]
[87.73217010 88.91934967]
[82.37371063 74.90911102]
[77.01524353 60.89886856]
[71.65678406 46.88862610]
[65.60704041 39.90392685]
[66.34297943 32.47142410]
[61.32727051 18.33485222]
[46.95244217 11.76675510]
[41.51061249 -3.07110381]
[48.23032379 -17.37568474]
[63.12488937 -22.66033363]
[77.35762787 -15.78976345]
[82.48450470 -0.84015942]
[75.46383667 13.31914234]
[80.47955322 27.45571327]
[85.66702271 41.53016281]
[91.02548218 55.54040527]
[96.38394928 69.55064392]
[101.74241638 83.56089020]
[109.11765289 84.92316437]
[123.86814117 87.64772034]
[131.24337769 89.00999451]
[141.25315857 77.83840942]
[151.26295471 66.66682434]
[150.57832336 51.10504532]
[160.88880920 39.91806412]
[175.72882080 39.36128998]
[185.73860168 28.18970871]
[195.74838257 17.01812553]
[205.75816345 5.84654236]
[208.59729004 -10.30497074]
[224.09506226 -15.66699028]
[236.30868530 -4.72353077]
[232.67384338 11.26771545]
[216.92974854 15.85632420]
[206.91996765 27.02790833]
[196.91018677 38.19948959]
[186.90040588 49.37107468]
[187.97003174 64.18294525]
[177.97782898 75.65510559]
[162.43452454 76.67661285]
[152.42474365 87.84819031]
[142.41496277 99.01977539]
[128.75537109 111.80376434]
[113.72354126 114.19087219]
[102.92746735 107.87198639]
[98.95703888 122.33696747]
[94.98661041 136.80195618]
[98.79510498 152.15792847]
[87.96492767 162.38322449]
[83.99449921 176.84820557]
[80.02407837 191.31318665]
[76.05364990 205.77816772]
[72.08322144 220.24314880]
[68.11279297 234.70812988]
[71.92128754 250.06410217]
[61.09111023 260.28939819]
[57.12068558 274.75439453]
[53.15025711 289.21936035]
[49.17982864 303.68435669]
[45.20940399 318.14932251]
[50.30837631 335.79348755]
[37.46429825 347.68661499]
[33.84728622 362.24401855]
[30.23027229 376.80139160]
[26.79078484 391.40173340]
[23.88682747 406.11795044]
[21.34208488 420.90051270]
[22.97834969 429.99490356]
[18.55118179 436.01019287]
[15.64722252 450.72640991]
[12.74326324 465.44262695]
[9.83930397 480.15884399]
[6.93534565 494.87506104]
[4.03138685 509.59127808]
[1.66683137 524.40374756]
[-0.15516563 539.29266357]
[-1.97716260 554.18157959]
[-3.79915977 569.07055664]
[8.51884270 578.24456787]
[14.58480263 592.35479736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 126]
[9 125]
[10 124]
[11 123]
[15 122]
[16 121]
[17 120]
[18 119]
[19 118]
[20 117]
[21 115]
[22 114]
[25 113]
[27 112]
[28 111]
[29 110]
[32 108]
[33 107]
[34 106]
[35 105]
[36 104]
[38 102]
[39 101]
[40 100]
[41 99]
[42 98]
[43 97]
[45 95]
[46 94]
[47 93]
[48 66]
[49 65]
[50 64]
[51 63]
[53 62]
[54 61]
[69 90]
[70 89]
[71 88]
[74 85]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
