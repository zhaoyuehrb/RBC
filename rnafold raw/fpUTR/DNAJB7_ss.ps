%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACAUUGUCUUUAACAUAAAAGUGUACCUAUUUGCAGUCACUACCUCUAUCACCACCACCAGCAGAGCCUGAGCUGAGGAAACCACGGUUCUCAAUACCCAGCACACCCACUUCCAACUAUCUGUUAAAAC\
) } def
/len { sequence length } bind def

/coor [
[114.79203796 273.58953857]
[104.84799194 285.12365723]
[91.06954193 291.61010742]
[75.84388733 291.92507935]
[61.80895615 286.01400757]
[51.39639664 274.90103149]
[46.41024399 260.51150513]
[47.71437454 245.33854675]
[55.08284760 232.01092529]
[67.23902130 222.83773804]
[82.07677460 219.40830994]
[84.89445496 204.67533875]
[87.71213531 189.94235229]
[90.52981567 175.20938110]
[93.34749603 160.47639465]
[96.16517639 145.74342346]
[98.98285675 131.01043701]
[94.10190582 125.31603241]
[82.71293640 135.07777405]
[72.95137787 123.68865204]
[84.33998871 113.92721558]
[79.45903778 108.23281097]
[64.46845245 108.76417542]
[49.47786331 109.29553223]
[34.48727798 109.82689667]
[25.92746353 113.28569031]
[19.13725471 110.18954468]
[4.13830042 110.36669922]
[-3.96116638 123.49690247]
[-17.88345337 130.14321899]
[-33.18601227 128.18481445]
[-44.98584747 118.24664307]
[-49.51767731 103.49990845]
[-45.33541107 88.65025330]
[-33.77359390 78.43614960]
[-18.52156067 76.11687469]
[-4.44617987 82.43251038]
[3.96114707 95.36774445]
[18.96010017 95.19058990]
[33.95591736 94.83631134]
[48.94650269 94.30494690]
[63.93708801 93.77359009]
[78.92767334 93.24222565]
[82.80479431 86.82210541]
[90.55902863 73.98186493]
[94.43614197 67.56174469]
[87.92788696 54.04720688]
[81.41963196 40.53267670]
[74.91137695 27.01814270]
[59.78353882 28.24820137]
[45.23402023 23.92664528]
[33.23051453 14.63792706]
[25.39640045 1.63826871]
[22.79117775 -13.31423092]
[25.76718330 -28.19737053]
[33.92193222 -40.99832535]
[46.15256882 -49.98587418]
[60.80499268 -53.94452667]
[75.89758301 -52.33890152]
[89.38919830 -45.38615036]
[99.45520782 -34.02657318]
[104.73426056 -19.79646301]
[104.51240540 -4.62032223]
[98.81965637 9.44939804]
[88.42591095 20.50988579]
[94.93416595 34.02441788]
[101.44242096 47.53895187]
[107.95067596 61.05348587]
[115.37548065 62.11287308]
[124.63495636 50.31193924]
[130.22508240 64.23165131]
[137.64988708 65.29104614]
[147.67807007 54.13597488]
[157.70623779 42.98089981]
[167.73442078 31.82583046]
[177.76260376 20.67075729]
[187.79078674 9.51568604]
[191.26281738 -5.91984320]
[205.52557373 -10.21201611]
[215.55375671 -21.36708832]
[221.64643860 -37.18844986]
[238.53613281 -35.71365738]
[241.79449463 -19.07576752]
[226.70883179 -11.33890915]
[216.68064880 -0.18383726]
[213.92590332 14.45380688]
[198.94584656 19.54386520]
[188.91767883 30.69893646]
[178.88949585 41.85400772]
[168.86131287 53.00907898]
[158.83314514 64.16415405]
[148.80496216 75.31922150]
[161.63101196 67.54154968]
[175.59550476 62.06495285]
[190.28935242 59.04986191]
[205.28213501 58.58459473]
[220.13465881 60.68278503]
[234.41186523 65.28297424]
[247.69549561 72.25039673]
[259.59646606 81.38095856]
[269.76611328 92.40720367]
[277.90658569 105.00612640]
[283.77938843 118.80867004]
[287.21249390 133.41050720]
[288.10534668 148.38391113]
[286.43176270 163.29025269]
[282.24081421 177.69290161]
[275.65524292 191.16992188]
[266.86795044 203.32653809]
[256.13635254 213.80667114]
[243.77482605 222.30328369]
[230.14546204 228.56750488]
[215.64752197 232.41584778]
[200.70568848 233.73554993]
[185.75765991 232.48797607]
[171.24131775 228.70965576]
[157.58187866 222.51129150]
[145.17948914 214.07443237]
[134.39743042 203.64622498]
[125.55157471 191.53215027]
[118.90102386 178.08708191]
[114.64060211 163.70483398]
[112.89511108 148.80674744]
[113.71583557 133.82812500]
[110.89815521 148.56109619]
[108.08047485 163.29408264]
[105.26279449 178.02705383]
[102.44511414 192.76004028]
[99.62743378 207.49301147]
[96.80975342 222.22599792]
[109.33491516 230.88858032]
[117.24828339 243.90005493]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 130]
[12 129]
[13 128]
[14 127]
[15 126]
[16 125]
[17 124]
[22 43]
[23 42]
[24 41]
[25 40]
[27 39]
[28 38]
[46 68]
[47 67]
[48 66]
[49 65]
[72 92]
[73 91]
[74 90]
[75 89]
[76 88]
[77 87]
[79 85]
[80 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
