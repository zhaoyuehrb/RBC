%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUGUCUCACCCGGGAAGGGAAAGCAGCCAGCAGCCCUCCAGCCCUCUUGUGCUUUCCCUGGGAGUGCGCCCCGUGCUCAGCC\
) } def
/len { sequence length } bind def

/coor [
[99.41476440 178.58294678]
[86.20732880 171.47213745]
[78.65534973 158.51190186]
[78.98078156 143.51542664]
[87.08673096 130.89601135]
[92.23130035 116.80583191]
[80.96131897 126.70469666]
[69.69134521 136.60356140]
[58.42136765 146.50242615]
[53.67735672 162.20040894]
[37.65096664 165.67700195]
[26.82876587 153.35580444]
[32.34371185 137.91180420]
[48.52249908 135.23245239]
[59.79247665 125.33358765]
[71.06245422 115.43471527]
[82.33243561 105.53585052]
[86.96768951 91.27000427]
[83.66849518 76.63732147]
[80.36930084 62.00464249]
[77.07009888 47.37196350]
[73.77090454 32.73928452]
[70.47171021 18.10660553]
[67.17251587 3.47392559]
[63.87332153 -11.15875340]
[60.57412338 -25.79143333]
[57.27492905 -40.42411423]
[42.26426697 -42.40031052]
[28.86058235 -49.37979507]
[18.67269707 -60.50307083]
[12.91599274 -74.41458893]
[12.26743126 -89.42794800]
[16.78600693 -103.73028564]
[25.90795135 -115.60122681]
[38.51700211 -123.61978149]
[35.21780396 -138.25245667]
[21.72595215 -146.48321533]
[18.08704948 -161.86288452]
[26.45999527 -175.26696777]
[41.87726593 -178.74305725]
[55.19207382 -170.22886658]
[58.50497437 -154.77569580]
[49.85048294 -141.55165100]
[53.14968109 -126.91897583]
[67.97969055 -125.08704376]
[81.31313324 -118.27906799]
[91.53195190 -107.29953003]
[97.38867950 -93.46044922]
[98.15866852 -78.42458344]
[93.72972107 -64.00568390]
[84.61791992 -51.94968796]
[71.90760803 -43.72330856]
[75.20680237 -29.09062958]
[78.50599670 -14.45794964]
[81.80519867 0.17473029]
[85.10439301 14.80741024]
[88.40358734 29.44009018]
[91.70278168 44.07276917]
[95.00197601 58.70544815]
[98.30117035 73.33812714]
[101.60036469 87.97080994]
[109.74310303 87.39880371]
[118.26556396 92.56211090]
[123.28775787 103.26296234]
[135.58386230 111.85398865]
[147.87997437 120.44501495]
[160.17608643 129.03604126]
[172.47218323 137.62707520]
[184.76829529 146.21809387]
[197.06440735 154.80912781]
[213.51133728 158.92433167]
[214.10992432 175.86770630]
[197.99440002 181.13328552]
[188.47337341 167.10523987]
[176.17726135 158.51420593]
[163.88116455 149.92317200]
[151.58505249 141.33215332]
[139.28894043 132.74111938]
[126.99283600 124.15010071]
[114.69673157 115.55907440]
[121.36882019 128.99346924]
[130.82197571 140.63984680]
[132.80398560 155.50831604]
[126.73171234 169.22427368]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 17]
[7 16]
[8 15]
[9 14]
[18 61]
[19 60]
[20 59]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[35 44]
[36 43]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
