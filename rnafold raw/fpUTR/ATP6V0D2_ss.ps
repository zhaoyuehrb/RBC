%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAAUCUUCAGGGGCCGUCCAGGACUACAGAGCUGUUUCACCCUACCUUGGCUUCAAUCUCUUCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.26998901 339.06372070]
[78.98851013 331.94338989]
[67.70750427 321.95159912]
[59.03533554 309.62722778]
[53.43967819 295.63488770]
[51.22230530 280.72918701]
[52.50279617 265.71395874]
[57.21209717 251.39897156]
[65.09623718 238.55618286]
[75.73003387 227.87821960]
[88.54002380 219.94090271]
[102.83538055 215.17230225]
[101.49079132 200.23269653]
[100.14620209 185.29307556]
[98.80161285 170.35346985]
[97.45702362 155.41384888]
[96.11243439 140.47422791]
[94.76784515 125.53462219]
[80.75952148 117.58397675]
[74.09873962 102.91837311]
[77.32911682 87.13830566]
[89.21703339 76.26985168]
[87.20353699 61.40560150]
[85.19004059 46.54135513]
[69.15721893 38.69053650]
[60.89382172 23.03920937]
[63.41004944 5.67474890]
[75.56248474 -6.76828671]
[72.22467041 -21.39220619]
[68.88685608 -36.01612473]
[57.34203339 -47.66297150]
[61.91654968 -63.41117477]
[77.90453339 -67.06032562]
[88.85892487 -54.85649872]
[83.51077271 -39.35393906]
[86.84858704 -24.73001862]
[90.18640137 -10.10610104]
[102.27372742 -6.90207577]
[111.82225800 1.28552258]
[116.89176178 12.87708092]
[116.41568756 25.59325027]
[110.42492676 36.90310287]
[100.05428314 44.52785873]
[102.06778717 59.39210510]
[104.08128357 74.25634766]
[116.34445190 79.69602966]
[124.27787018 90.51435089]
[125.77992249 103.84548950]
[120.45272064 116.15792847]
[109.70745850 124.19003296]
[111.05204773 139.12963867]
[112.39663696 154.06925964]
[113.74122620 169.00888062]
[115.08581543 183.94848633]
[116.43040466 198.88810730]
[117.77499390 213.82771301]
[132.69207764 215.96714783]
[146.71347046 221.48959351]
[159.08300781 230.09721375]
[169.13362122 241.32585144]
[176.32327271 254.56991577]
[180.26425171 269.11520386]
[180.74403381 284.17730713]
[177.73674011 298.94390869]
[171.40452576 312.61871338]
[162.08891296 324.46420288]
[150.29226685 333.84161377]
[136.65075684 340.24520874]
[121.90006256 343.32965088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 56]
[13 55]
[14 54]
[15 53]
[16 52]
[17 51]
[18 50]
[22 45]
[23 44]
[24 43]
[28 37]
[29 36]
[30 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
