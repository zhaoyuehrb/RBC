%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCAGAACACUGGCGGCCGAUCCCAACGAGGCUCCCUGGAGCCCGACGCAGAGCAGCGCCCUGGCCGGGCCAAGCAGGAGCCGGCAUC\
) } def
/len { sequence length } bind def

/coor [
[-23.60556030 262.39682007]
[-31.96264458 262.21817017]
[-40.35053635 274.65371704]
[-48.73843002 287.08929443]
[-57.12632370 299.52484131]
[-65.51422119 311.96041870]
[-66.11777496 328.34844971]
[-80.73661041 335.77957153]
[-94.33212280 326.60928345]
[-92.91841125 310.27120972]
[-77.94978333 303.57250977]
[-69.56188965 291.13696289]
[-61.17399597 278.70138550]
[-52.78610229 266.26583862]
[-44.39820862 253.83026123]
[-45.54712296 232.30868530]
[-25.95832062 221.68598938]
[-19.38275337 208.20408630]
[-12.80718613 194.72216797]
[-26.82665634 200.05644226]
[-41.74320221 198.47634888]
[-54.33396912 190.32327271]
[-61.87861252 177.35877991]
[-62.74704361 162.38392639]
[-56.75163651 148.63420105]
[-45.18774414 139.08033752]
[-30.55385017 135.78652954]
[-16.01173973 139.46443176]
[-4.70336008 149.31941223]
[0.92801052 163.22219849]
[-0.33500931 178.17103577]
[10.81216335 168.13407898]
[21.95933533 158.09712219]
[33.10650635 148.06015015]
[44.25368118 138.02319336]
[55.40085220 127.98623657]
[58.32810593 121.01949310]
[67.11663818 117.80185699]
[78.60730743 108.16004181]
[79.25586700 90.30905151]
[92.53049469 78.35652161]
[110.35148621 79.57745361]
[121.14158630 69.15757751]
[131.93168640 58.73770523]
[142.72178650 48.31782913]
[153.51187134 37.89795303]
[158.06411743 22.74580002]
[172.59411621 19.47044373]
[176.71278381 11.06638527]
[183.94734192 8.88339233]
[195.09451294 -1.15356696]
[206.24168396 -11.19052601]
[211.31994629 -26.17457771]
[225.95542908 -28.94085121]
[237.10260010 -38.97780991]
[244.82757568 -54.06956482]
[261.46801758 -50.82429504]
[262.95611572 -33.93577957]
[247.13955688 -27.83063698]
[235.99238586 -17.79367828]
[231.71144104 -3.52753663]
[216.27865601 -0.04335368]
[205.13146973 9.99360561]
[193.98429871 20.03056526]
[183.01399231 30.26054001]
[179.23355103 44.66739273]
[163.93174744 48.68804932]
[153.14166260 59.10792542]
[142.35156250 69.52780151]
[131.56146240 79.94767761]
[120.77136230 90.36755371]
[122.83251190 101.70583344]
[119.10947418 112.61196899]
[110.54539490 120.32309723]
[99.30983734 122.88574219]
[88.24912262 119.65071106]
[76.75845337 129.29252625]
[65.43781281 139.13340759]
[54.29063797 149.17036438]
[43.14346695 159.20733643]
[31.99629402 169.24429321]
[20.84912300 179.28125000]
[9.70195007 189.31820679]
[0.67472446 201.29774475]
[-5.90084267 214.77964783]
[-12.47640991 228.26156616]
[-8.09125042 235.93406677]
[-7.24495888 244.63459778]
[-10.00822544 252.82708740]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[17 86]
[18 85]
[19 84]
[31 83]
[32 82]
[33 81]
[34 80]
[35 79]
[36 78]
[38 77]
[39 76]
[42 71]
[43 70]
[44 69]
[45 68]
[46 67]
[48 65]
[50 64]
[51 63]
[52 62]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
