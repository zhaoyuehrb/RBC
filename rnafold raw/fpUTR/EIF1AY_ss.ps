%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUGGUGACGCCAGAGAGUGCGCGUCAGCAGUUUAUUAGAGAGCUCUGUAGCCAGCCUCUUCUGCGCACCCACCUGCUGCAUCUUAGUUCAGUCGGCUCUUAGAGUAGUAACCGCCAGAAAGGAGUCGGAAGAGGUCUCACGAGGCUGUCAUCACCGCC\
) } def
/len { sequence length } bind def

/coor [
[-150.19398499 509.44277954]
[-161.75886536 508.86752319]
[-172.93313599 505.86215210]
[-183.21243286 500.56576538]
[-193.07524109 511.86730957]
[-202.93806458 523.16882324]
[-206.18241882 538.65380859]
[-220.38043213 543.15557861]
[-230.24325562 554.45709229]
[-240.10606384 565.75866699]
[-249.96888733 577.06018066]
[-259.83172607 588.36169434]
[-269.69451904 599.66326904]
[-279.44729614 611.05987549]
[-289.08911133 622.55053711]
[-289.12890625 638.59356689]
[-301.78567505 648.45184326]
[-317.35025024 644.56292725]
[-323.88284302 629.91015625]
[-316.37216187 615.73376465]
[-300.57977295 612.90875244]
[-290.93798828 601.41809082]
[-289.03811646 594.23736572]
[-280.99606323 589.80041504]
[-271.13323975 578.49890137]
[-261.27041626 567.19738770]
[-251.40760803 555.89581299]
[-241.54478455 544.59429932]
[-231.68196106 533.29272461]
[-229.14306641 518.61614990]
[-214.23960876 513.30603027]
[-204.37678528 502.00448608]
[-194.51396179 490.70294189]
[-204.18197632 474.80667114]
[-207.93196106 456.56060791]
[-205.31068420 438.09628296]
[-196.61012268 421.57589722]
[-182.83497620 408.93899536]
[-165.58673096 401.67483521]
[-146.87744141 400.64697266]
[-128.89501953 405.99038696]
[-120.41091919 393.62026978]
[-119.59304810 378.74813843]
[-105.40681458 371.74374390]
[-96.92271423 359.37362671]
[-88.43861389 347.00347900]
[-79.95450592 334.63336182]
[-79.13663483 319.76123047]
[-64.95040131 312.75683594]
[-56.46630096 300.38671875]
[-47.98219681 288.01660156]
[-39.61843491 275.56478882]
[-31.37580109 263.03247070]
[-31.75280952 259.47994995]
[-30.39653015 255.56893921]
[-27.15800476 252.13058472]
[-22.27168465 250.03045654]
[-13.31430531 237.99859619]
[-4.35692644 225.96675110]
[4.60045242 213.93490601]
[13.55783081 201.90306091]
[22.51520920 189.87121582]
[31.47258949 177.83935547]
[40.42996597 165.80751038]
[49.38734818 153.77566528]
[58.34472656 141.74382019]
[59.82384491 134.46478271]
[67.59430695 129.56776428]
[76.78330994 117.71186829]
[72.47904968 109.76331329]
[70.81178284 100.87926483]
[71.94126892 91.91095734]
[75.75927734 83.71773529]
[81.89997101 77.08463287]
[89.77497864 72.64723206]
[98.62971497 70.83071136]
[107.61575317 71.80912781]
[115.11575317 58.81874847]
[122.61575317 45.82836533]
[130.11575317 32.83798599]
[137.61575317 19.84760475]
[145.11575317 6.85722351]
[146.71026611 -2.18813133]
[152.88923645 -6.31031656]
[160.63972473 -19.15282059]
[168.39021301 -31.99532318]
[168.89633179 -47.80843353]
[182.09692383 -54.70724487]
[189.84742737 -67.54974365]
[186.27233887 -82.71076965]
[194.31538391 -95.62448120]
[208.79113770 -98.93933868]
[206.35150146 -114.79581451]
[217.33297729 -126.49139404]
[233.31152344 -125.05423737]
[242.02976990 -111.58679962]
[236.79981995 -96.42015839]
[221.63363647 -91.18885040]
[225.44711304 -76.83639526]
[217.76995850 -63.70185852]
[202.68992615 -59.79925537]
[194.93943787 -46.95675278]
[194.98768616 -32.06222534]
[181.23271179 -24.24483299]
[173.48222351 -11.40232944]
[165.73173523 1.44017410]
[158.10614014 14.35722351]
[150.60614014 27.34760475]
[143.10614014 40.33798599]
[135.60614014 53.32836533]
[128.10614014 66.31874847]
[120.60613251 79.30912781]
[124.70403290 84.42965698]
[127.55583191 90.33557129]
[142.51072693 89.17318726]
[150.51614380 75.88059235]
[164.81893921 69.86314392]
[179.91938782 73.43466949]
[190.01107788 85.22184753]
[191.21353149 100.69226074]
[183.06439209 113.89722443]
[168.69715881 119.75916290]
[153.63633728 116.02403259]
[143.67311096 104.12807465]
[128.71821594 105.29046631]
[113.85902405 125.70316315]
[88.63919830 126.90087891]
[79.45019531 138.75675964]
[70.37657166 150.70120239]
[61.41919327 162.73304749]
[52.46181488 174.76489258]
[43.50443649 186.79673767]
[34.54705811 198.82858276]
[25.58967972 210.86044312]
[16.63229942 222.89228821]
[7.67492151 234.92413330]
[-1.28245759 246.95597839]
[-10.23983669 258.98782349]
[-18.84348297 271.27511597]
[-27.08611679 283.80743408]
[-29.20387268 292.74475098]
[-35.61207199 296.50070190]
[-44.09617615 308.87081909]
[-52.58027649 321.24093628]
[-54.00499344 336.99786377]
[-67.58438110 343.11746216]
[-76.06848907 355.48760986]
[-84.55258942 367.85772705]
[-93.03668976 380.22784424]
[-94.46140289 395.98477173]
[-108.04079437 402.10437012]
[-116.52490234 414.47448730]
[-108.80777740 423.22222900]
[-103.11843872 433.39700317]
[-99.71122742 444.53717041]
[-98.73702240 456.13809204]
[-100.23657990 467.67495728]
[-104.13882446 478.62661743]
[-110.26420593 488.49902344]
[-118.33296967 496.84756470]
[-127.97793579 503.29705811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 33]
[5 32]
[6 31]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 22]
[15 21]
[41 152]
[42 151]
[44 149]
[45 148]
[46 147]
[47 146]
[49 144]
[50 143]
[51 142]
[52 140]
[53 139]
[57 138]
[58 137]
[59 136]
[60 135]
[61 134]
[62 133]
[63 132]
[64 131]
[65 130]
[66 129]
[68 128]
[69 127]
[77 112]
[78 111]
[79 110]
[80 109]
[81 108]
[82 107]
[84 106]
[85 105]
[86 104]
[88 102]
[89 101]
[92 98]
[114 125]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
