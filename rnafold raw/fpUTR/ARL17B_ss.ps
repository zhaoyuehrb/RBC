%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGUUGCUGUUCCUGCCCCCACGCCUGUCGUGGUUUAGCUGAACUGAGCUGAAAUCCUAAAGGCCGCGGAGUCGGCGGUGUUGUAGGUAGCGGUACCUUGAGUGGCAACAGAAUUCGAUUAAAUUACA\
) } def
/len { sequence length } bind def

/coor [
[215.97480774 252.21920776]
[230.75103760 249.63790894]
[245.33128357 253.16258240]
[235.65866089 241.69784546]
[225.98602295 230.23310852]
[219.19956970 227.11788940]
[216.22224426 218.37248230]
[206.82946777 206.67736816]
[197.43667603 194.98225403]
[188.04389954 183.28713989]
[178.65112305 171.59202576]
[169.25834656 159.89691162]
[159.72494507 148.31613159]
[150.05232239 136.85140991]
[140.37968445 125.38666534]
[130.70704651 113.92192841]
[121.03441620 102.45719910]
[116.66036224 118.01143646]
[101.07069397 127.87252808]
[80.60195160 124.50173187]
[66.12882233 128.44233704]
[51.65568924 132.38294983]
[37.18255615 136.32356262]
[22.70942116 140.26417542]
[13.52785873 153.42010498]
[-2.49102402 154.30041504]
[-13.05891037 142.22982788]
[-10.06902122 126.46783447]
[4.18505430 119.10571289]
[18.76881027 125.79103851]
[33.24194336 121.85043335]
[47.71507645 117.90982056]
[62.18820953 113.96920776]
[76.66134644 110.02859497]
[79.00785828 95.21327209]
[66.46080780 86.99308777]
[53.91375732 78.77289581]
[41.36670685 70.55271149]
[28.81965256 62.33252335]
[16.27260017 54.11233521]
[3.72554874 45.89214706]
[-11.69342041 49.36071014]
[-25.00406647 40.84001541]
[-28.30941772 25.38523674]
[-19.64846992 12.16542053]
[-4.15960884 9.02365112]
[8.96789932 17.82388306]
[11.94573689 33.34509659]
[24.49278831 41.56528091]
[37.03984070 49.78546906]
[49.58689117 58.00565720]
[62.13394547 66.22584534]
[74.68099976 74.44602966]
[87.22805023 82.66622162]
[94.33245087 80.26257324]
[83.06475830 70.36110687]
[86.00573730 55.65224838]
[100.21445465 50.84469604]
[111.48233032 60.74595642]
[108.54125214 75.45529175]
[115.64564514 73.05164337]
[120.62426758 58.90196991]
[117.90596771 43.31603241]
[129.42893982 33.87831879]
[134.40754700 19.72863960]
[139.38616943 5.57896280]
[144.36479187 -8.57071400]
[149.34339905 -22.72039223]
[141.22444153 -36.08513641]
[143.64672852 -51.53396988]
[155.46653748 -61.77243423]
[171.10292053 -61.96623230]
[183.17285156 -52.02386093]
[185.97727966 -36.63980484]
[178.19203186 -23.07794380]
[163.49308777 -17.74177361]
[158.51446533 -3.59209657]
[153.53584290 10.55758095]
[148.55723572 24.70725822]
[143.57861328 38.85693359]
[146.65301514 53.43078995]
[134.77394104 63.88058472]
[129.79531860 78.03026581]
[132.49914551 92.78456116]
[142.17178345 104.24929810]
[151.84442139 115.71403503]
[161.51704407 127.17877197]
[171.18968201 138.64350891]
[179.20013428 143.24559021]
[180.95346069 150.50413513]
[190.34623718 162.19924927]
[199.73901367 173.89436340]
[209.13180542 185.58947754]
[218.52458191 197.28459167]
[227.91735840 208.97970581]
[237.45075989 220.56048584]
[247.12338257 232.02520752]
[256.79602051 243.48994446]
[268.14303589 253.30039978]
[280.88507080 261.21499634]
[293.62707520 269.12960815]
[306.36911011 277.04421997]
[319.11111450 284.95883179]
[331.85314941 292.87341309]
[345.74169922 286.15689087]
[361.05395508 288.03799438]
[372.90380859 297.91647339]
[377.51004028 312.64013672]
[373.40280151 327.51071167]
[361.89270020 337.78308105]
[346.65258789 340.17932129]
[332.54550171 333.93484497]
[324.07296753 321.04220581]
[323.93853760 305.61544800]
[311.19653320 297.70083618]
[298.45449829 289.78622437]
[285.71249390 281.87164307]
[272.97045898 273.95703125]
[260.22845459 266.04241943]
[265.82278442 279.96017456]
[265.40365601 294.95431519]
[259.04064941 308.53781128]
[247.78910828 318.45764160]
[233.51533508 323.06842041]
[218.58685303 321.60537720]
[205.47981262 314.31115723]
[196.36825562 302.39566040]
[192.76344299 287.83523560]
[195.26333618 273.04501343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 98]
[4 97]
[5 96]
[7 95]
[8 94]
[9 93]
[10 92]
[11 91]
[12 90]
[13 88]
[14 87]
[15 86]
[16 85]
[17 84]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[61 83]
[62 82]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[99 119]
[100 118]
[101 117]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
