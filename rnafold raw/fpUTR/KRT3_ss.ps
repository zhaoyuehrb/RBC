%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCUUCCUCUGACUCUCAGUGUCCCUGCUUAACUUACACUCUUCUCUUCGCCAAGCUCCUUACC\
) } def
/len { sequence length } bind def

/coor [
[108.89002228 154.75825500]
[98.34827423 155.45060730]
[87.86642456 154.13200378]
[77.82460785 150.85026550]
[68.58700562 145.72441101]
[60.48861313 138.94032288]
[53.82313156 130.74401855]
[48.83229065 121.43277740]
[45.69709015 111.34424591]
[32.47478485 120.03224182]
[19.23523140 113.20849609]
[4.27231789 114.26264191]
[-10.69059563 115.31678009]
[-25.65350914 116.37092590]
[-41.02856827 123.51542664]
[-52.15010071 110.71903229]
[-42.93253708 96.48973846]
[-26.70765114 101.40801239]
[-11.74473858 100.35386658]
[3.21817517 99.29972839]
[18.18108940 98.24558258]
[30.33314514 89.63298798]
[44.64294434 96.38133240]
[50.04492950 75.87554932]
[62.74610519 58.89470291]
[80.89063263 47.91996384]
[101.82732391 44.55490112]
[122.49701691 49.29120255]
[139.87956238 61.43682098]
[151.97334290 52.56324005]
[164.06712341 43.68965530]
[176.16090393 34.81607056]
[170.67773438 20.75914383]
[169.02055359 5.76193714]
[171.30238342 -9.15301228]
[177.36759949 -22.96877861]
[186.80270386 -34.74338150]
[198.96438599 -43.67400742]
[213.02342224 -49.15175247]
[228.02127075 -50.80313110]
[242.93533325 -48.51555634]
[256.74874878 -42.44499207]
[268.51971436 -33.00534439]
[277.44564819 -20.84022331]
[282.91796875 -6.77906418]
[284.56356812 8.21941757]
[282.27023315 23.13260078]
[276.19433594 36.94367981]
[266.75012207 48.71099091]
[254.58155823 57.63222504]
[240.51829529 63.09910965]
[225.51918030 64.73890686]
[210.60688782 62.43981552]
[196.79815674 56.35858536]
[185.03448486 46.90985107]
[172.94070435 55.78343582]
[160.84692383 64.65702057]
[148.75314331 73.53060150]
[152.88693237 83.25272369]
[155.10272217 93.58219910]
[155.32017517 104.14442444]
[153.53140259 114.55635071]
[149.80126953 124.44037628]
[144.26506042 133.43804932]
[137.12353516 141.22306824]
[128.63569641 147.51310730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 23]
[11 21]
[12 20]
[13 19]
[14 18]
[29 58]
[30 57]
[31 56]
[32 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
