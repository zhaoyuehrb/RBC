%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAAGACUGCACUGCCGCGAAGGCGGAGGAGGCCGGCAGCCGGCACCCCCACACUCGGACCGCAGCCGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[124.31760406 162.53549194]
[110.27285767 167.80285645]
[95.35957336 166.19230652]
[82.76323700 158.04783630]
[75.17445374 145.10913086]
[74.21417999 130.13989258]
[80.08754730 116.33759308]
[91.53717804 106.65183258]
[76.61935425 105.08390808]
[62.08600998 111.33631134]
[50.23722839 102.31103516]
[35.70388794 108.56343842]
[23.85510445 99.53816223]
[8.93727589 97.97023773]
[-5.98055315 96.40230560]
[-20.89838219 94.83438110]
[-35.81621170 93.26645660]
[-49.13871002 102.20460510]
[-64.38916779 97.22433472]
[-69.86873627 82.14608002]
[-61.37396240 68.53658295]
[-45.42130661 66.83589172]
[-34.24828339 78.34862518]
[-19.33045387 79.91654968]
[-4.41262579 81.48448181]
[10.50520229 83.05240631]
[25.42303085 84.62033081]
[38.88935089 78.25578308]
[51.80515671 87.39320374]
[65.27147675 81.02865601]
[78.18727875 90.16607666]
[93.10511017 91.73400879]
[107.98683167 89.85400391]
[122.04605865 84.62542725]
[136.10528564 79.39684296]
[150.16452026 74.16826630]
[164.22375488 68.93968201]
[178.28297424 63.71110535]
[188.52062988 51.64871597]
[203.14666748 54.46437836]
[217.20590210 49.23579788]
[224.40997314 43.13889313]
[231.96487427 44.09617996]
[246.23072815 39.46092606]
[250.77888489 29.17388153]
[260.14083862 23.35239220]
[270.93237305 23.80494690]
[279.41571045 30.12331963]
[294.01937866 26.69805527]
[299.90811157 12.34178925]
[313.12826538 4.21730423]
[328.59640503 5.44863033]
[340.36474609 15.56229782]
[343.90808105 30.66939545]
[337.86395264 44.96093369]
[324.55642700 52.94152832]
[309.10256958 51.54247665]
[297.44464111 41.30173874]
[282.84097290 44.72700119]
[270.10366821 59.03527832]
[250.86598206 53.72677231]
[236.60012817 58.36202621]
[222.43447876 63.29502869]
[208.37525940 68.52360535]
[199.14321899 80.21201324]
[183.51155090 77.77033234]
[169.45233154 82.99891663]
[155.39309692 88.22749329]
[141.33386230 93.45607758]
[127.27463531 98.68465424]
[113.21540833 103.91323853]
[126.71652222 110.44928741]
[135.83670044 122.35820007]
[138.62786865 137.09622192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 32]
[9 31]
[11 29]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[33 71]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[40 64]
[41 63]
[43 62]
[44 61]
[48 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
