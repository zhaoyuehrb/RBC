%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGCGCCUCACCCCUGGCGACCCCGGAAGUGGGUCGGGGGCUUGGCCUCUGCCCGGCCACAGAGCCGGAGCUGGAGGUGCUGUCCCGUCUGGCGGCGAUCCCCGGGCAGGGCCCGGGGCCGGGGUUUGAAG\
) } def
/len { sequence length } bind def

/coor [
[97.14131165 309.87509155]
[84.37580109 318.31903076]
[69.14723206 319.85180664]
[54.95503235 314.12118530]
[45.06045151 302.44403076]
[41.73719788 287.50369263]
[45.74892807 272.73327637]
[56.17377853 261.52697754]
[70.61619568 256.45989990]
[72.73497772 241.61030579]
[74.85375977 226.76071167]
[67.42252350 210.90780640]
[78.78862762 196.47642517]
[80.55609131 181.58091736]
[82.32354736 166.68540955]
[84.09100342 151.78990173]
[85.85846710 136.89439392]
[87.62592316 121.99889374]
[76.35319519 112.10315704]
[61.81219101 115.78543854]
[47.27118683 119.46772003]
[32.73018265 123.15000153]
[18.18918037 126.83228302]
[3.64817572 130.51457214]
[-10.84832573 134.36833191]
[-21.93698311 146.45028687]
[-37.88364410 142.62457275]
[-42.28374863 126.82675171]
[-30.61084747 115.30826569]
[-14.87302208 119.91835022]
[-9.21967411 115.04673004]
[-0.03410658 115.97356415]
[14.50689697 112.29128265]
[29.04790115 108.60900116]
[43.58890533 104.92671204]
[58.12990952 101.24443054]
[72.67091370 97.56214905]
[92.11346436 54.82336044]
[89.29578400 40.09038162]
[86.47810364 25.35740280]
[83.66042328 10.62442303]
[80.84274292 -4.10855675]
[66.95743561 -10.77972889]
[59.74707413 -24.19106865]
[61.79218292 -39.10017776]
[72.10083008 -49.81790924]
[69.28315735 -64.55088806]
[66.46547699 -79.28386688]
[63.64779282 -94.01684570]
[60.83011246 -108.74982452]
[58.01243210 -123.48280334]
[55.02095032 -138.18147278]
[51.85607910 -152.84379578]
[48.51826477 -167.46771240]
[45.00797272 -182.05119324]
[41.49768066 -196.63467407]
[37.98738861 -211.21815491]
[34.47709274 -225.80163574]
[20.86771393 -233.83657837]
[17.00695610 -249.16204834]
[25.18533897 -262.68572998]
[40.55077362 -266.38421631]
[53.98721695 -258.06332397]
[57.52307129 -242.65963745]
[49.06057358 -229.31192017]
[52.57086563 -214.72843933]
[56.08115768 -200.14495850]
[59.59144974 -185.56149292]
[63.10174561 -170.97801208]
[67.77004242 -165.15563965]
[66.51840210 -156.00866699]
[69.68326569 -141.34634399]
[74.21274567 -135.41534424]
[72.74541473 -126.30048370]
[75.56309509 -111.56750488]
[78.38077545 -96.83452606]
[81.19845581 -82.10154724]
[84.01613617 -67.36856842]
[86.83381653 -52.63558578]
[100.36983490 -46.47814941]
[107.77212524 -33.37585449]
[106.01943207 -18.25032997]
[95.57572174 -6.92623663]
[98.39340210 7.80674267]
[101.21108246 22.53972244]
[104.02876282 37.27270126]
[106.84644318 52.00568008]
[119.86624908 59.45448303]
[133.99499512 54.41677475]
[148.12374878 49.37906647]
[158.32911682 36.54231262]
[174.50663757 39.22934341]
[180.01423645 54.67597198]
[169.18618774 66.99202728]
[153.16145325 63.50781631]
[139.03269958 68.54552460]
[124.90395355 73.58322906]
[124.37292480 81.06440735]
[136.79969788 89.46532440]
[123.31086731 96.02675629]
[122.77984619 103.50793457]
[136.05534363 110.49084473]
[149.33084106 117.47376251]
[162.60635376 124.45667267]
[175.88185120 131.43957520]
[189.15734863 138.42250061]
[202.43286133 145.40541077]
[215.70835876 152.38832092]
[232.54125977 154.41065979]
[235.25776672 171.14555359]
[219.92886353 178.38858032]
[208.72544861 165.66381836]
[195.44993591 158.68090820]
[182.17443848 151.69799805]
[168.89894104 144.71508789]
[155.62344360 137.73217773]
[142.34793091 130.74926758]
[129.07243347 123.76634979]
[115.79692841 116.78343964]
[102.52143097 123.76634979]
[100.75396729 138.66184998]
[98.98651123 153.55735779]
[97.21905518 168.45286560]
[95.45159149 183.34837341]
[93.68413544 198.24388123]
[101.06357574 208.89833069]
[99.22428131 221.32125854]
[89.70336151 228.87948608]
[87.58457947 243.72909546]
[85.46579742 258.57870483]
[97.91478729 267.48269653]
[104.78955841 281.15734863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 130]
[10 129]
[11 128]
[13 125]
[14 124]
[15 123]
[16 122]
[17 121]
[18 120]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 30]
[38 87]
[39 86]
[40 85]
[41 84]
[42 83]
[46 79]
[47 78]
[48 77]
[49 76]
[50 75]
[51 74]
[52 72]
[53 71]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[88 97]
[89 96]
[90 95]
[101 119]
[102 118]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
