%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCGCGCUCGCCGGAGAGCUGGGUGCUACCGCUGUUUCCGCUGCUGAGCCCUGCCCGCCGGCCGGCCCGCUCGCUAGCUCGCUUCCCCUCGCCCAGGGGGAAAGGUCAGCAGCGUCCUGGAGCCGCCGUGUCACUCCCCGAAAGCC\
) } def
/len { sequence length } bind def

/coor [
[142.13729858 237.74664307]
[136.87513733 223.69993591]
[125.16470337 214.49586487]
[127.56901550 198.85841370]
[122.30685425 184.81172180]
[117.04469299 170.76501465]
[111.71681213 165.56947327]
[111.82308960 156.36631775]
[106.85824585 142.21180725]
[101.89339447 128.05728149]
[96.92855072 113.90277100]
[84.83058167 105.03489685]
[69.83808136 104.56057739]
[54.84558487 104.08625031]
[39.85308838 103.61193085]
[24.86058807 103.13761139]
[10.82265186 110.43465424]
[-1.65359044 102.29876709]
[-15.69152641 109.59581757]
[-28.16776848 101.45993042]
[-43.16026688 100.98561096]
[-51.90467834 103.85697174]
[-58.46291351 100.33992767]
[-73.44207764 99.54962921]
[-88.42124939 98.75932312]
[-97.22425079 101.44568634]
[-103.70687866 97.79116058]
[-118.66605377 96.68522644]
[-133.62522888 95.57929993]
[-142.48291016 98.07946777]
[-148.88705444 94.28908539]
[-163.35816956 100.68418121]
[-175.29518127 91.77592468]
[-190.22770691 90.35485840]
[-204.69883728 96.74995422]
[-216.63584900 87.84169769]
[-231.56837463 86.42063141]
[-246.25033569 93.72624969]
[-259.76678467 84.43982697]
[-258.21316528 68.11444092]
[-243.18769836 61.54424667]
[-230.14730835 71.48809052]
[-215.21476746 72.90916443]
[-201.81172180 66.41242218]
[-188.80664062 75.42232513]
[-173.87411499 76.84339142]
[-160.47106934 70.34664917]
[-147.46597290 79.35655212]
[-132.51930237 80.62012482]
[-117.56011963 81.72605133]
[-102.60094452 82.83198547]
[-87.63094330 83.78015900]
[-72.65177917 84.57045746]
[-57.67261124 85.36076355]
[-42.68594360 85.99311066]
[-27.69344711 86.46743774]
[-14.72787380 79.13645935]
[-1.17926800 87.30627441]
[11.78630447 79.97529602]
[25.33490944 88.14511108]
[40.32740784 88.61943054]
[55.31990814 89.09375763]
[70.31240845 89.56807709]
[85.30490875 90.04239655]
[103.71445465 83.75347137]
[114.26499939 73.09111023]
[124.81554413 62.42874908]
[124.90213776 46.85215378]
[135.75378418 36.18930054]
[150.60314941 36.36784363]
[161.15368652 25.70548058]
[171.70423889 15.04311752]
[182.25479126 4.38075495]
[186.10183716 -3.98044276]
[193.14195251 -6.39224005]
[203.91494751 -16.82979584]
[214.68794250 -27.26735306]
[219.21531677 -42.42695236]
[233.73994446 -45.72613144]
[244.51293945 -56.16368866]
[255.28593445 -66.60124207]
[254.83247375 -77.55404663]
[260.40084839 -86.73983002]
[269.92242432 -91.21620941]
[280.11233521 -89.70812988]
[291.31576538 -99.68225861]
[302.51919556 -109.65638733]
[313.72262573 -119.63050842]
[324.92605591 -129.60462952]
[336.12945557 -139.57876587]
[347.33288574 -149.55288696]
[347.99844360 -165.34315491]
[359.69082642 -175.97630310]
[375.47317505 -175.14385986]
[385.98208618 -163.33970642]
[384.98284912 -147.56704712]
[373.06823730 -137.18350220]
[357.30703735 -138.34945679]
[346.10360718 -128.37533569]
[334.90017700 -118.40120697]
[323.69674683 -108.42707825]
[312.49331665 -98.45295715]
[301.28988647 -88.47882843]
[290.08645630 -78.50470734]
[285.44647217 -59.77423096]
[265.72348022 -55.82825089]
[254.95050049 -45.39069366]
[244.17750549 -34.95313644]
[240.42068481 -20.54010201]
[225.12550354 -16.49435806]
[214.35250854 -6.05680132]
[203.57951355 4.38075495]
[192.91714478 14.93130112]
[182.36660767 25.59366417]
[171.81605530 36.25602722]
[161.26550293 46.91838837]
[161.60058594 61.76504898]
[151.05271912 72.72850037]
[135.47790527 72.97929382]
[124.92736053 83.64165497]
[114.37681580 94.30401611]
[111.08306885 108.93792725]
[116.04791260 123.09243774]
[121.01275635 137.24696350]
[125.97760010 151.40147400]
[131.09138489 165.50285339]
[136.35354614 179.54956055]
[141.61570740 193.59625244]
[153.70252991 203.80503845]
[150.92182922 218.43777466]
[156.18399048 232.48448181]
[171.29631042 231.79664612]
[185.88098145 235.81439209]
[198.50917053 244.14408875]
[207.94367981 255.96971130]
[213.26022339 270.13265991]
[213.93794250 285.24545288]
[209.91041565 299.82742310]
[201.57225037 312.45004272]
[189.74032593 321.87661743]
[175.57379150 327.18368530]
[160.46057129 327.85125732]
[145.88128662 323.81396484]
[133.26428223 315.46734619]
[123.84561920 303.62908936]
[118.54806519 289.45901489]
[117.89060211 274.34536743]
[121.93766022 259.76876831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 131]
[2 130]
[4 128]
[5 127]
[6 126]
[8 125]
[9 124]
[10 123]
[11 122]
[12 64]
[13 63]
[14 62]
[15 61]
[16 60]
[18 58]
[20 56]
[21 55]
[23 54]
[24 53]
[25 52]
[27 51]
[28 50]
[29 49]
[31 48]
[33 46]
[34 45]
[36 43]
[37 42]
[65 121]
[66 120]
[67 119]
[70 116]
[71 115]
[72 114]
[73 113]
[75 112]
[76 111]
[77 110]
[79 108]
[80 107]
[81 106]
[85 104]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
