%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCGGUUCAGCUUCCCCAGCCGGACCCCAAAGACCCGAAGCCCUGGGGGAAGGAAAUUCCAACUUGCUCCCGGCCCACCCCCGCCCCGUUCCUCUCUCCGGCUCGCUGCUUCCCUCGCUCCA\
) } def
/len { sequence length } bind def

/coor [
[74.43527985 130.88275146]
[62.87758255 140.44410706]
[51.31988144 150.00546265]
[39.76218414 159.56683350]
[33.80795288 176.93682861]
[16.46789742 179.30563354]
[5.15412760 189.15441895]
[-6.15964317 199.00320435]
[-17.47341347 208.85198975]
[-28.78718376 218.70077515]
[-34.11578369 233.59764099]
[-48.79554749 236.11831665]
[-60.10931778 245.96710205]
[-71.42308807 255.81588745]
[-73.96099854 271.65692139]
[-87.99871063 279.42367554]
[-102.76768494 273.15814209]
[-106.93843079 257.66671753]
[-97.31151581 244.83308411]
[-81.27187347 244.50212097]
[-69.95809937 234.65333557]
[-58.64433289 224.80455017]
[-54.12496948 210.61212158]
[-38.63597107 207.38700867]
[-27.32220078 197.53820801]
[-16.00843048 187.68942261]
[-4.69465876 177.84063721]
[6.61911201 167.99185181]
[7.79336452 155.88208008]
[17.23645592 147.58718872]
[30.20082474 148.00912476]
[41.75852203 138.44776917]
[53.31622314 128.88641357]
[64.87392426 119.32505035]
[59.91331100 99.40299225]
[65.46498108 79.63749695]
[80.07307434 65.21183777]
[99.90676880 59.90897369]
[119.76491547 65.11952972]
[129.47076416 53.68289566]
[139.17658997 42.24625778]
[148.88243103 30.80961990]
[158.58827209 19.37298203]
[160.46890259 -3.71507859]
[181.58705139 -11.30971813]
[189.78297424 -23.87263870]
[197.97888184 -36.43555832]
[206.17480469 -48.99848175]
[214.37071228 -61.56140137]
[222.56663513 -74.12432098]
[230.76254272 -86.68724060]
[231.82267761 -102.47289276]
[245.25698853 -108.90471649]
[253.45291138 -121.46764374]
[261.64883423 -134.03056335]
[269.84472656 -146.59347534]
[278.04064941 -159.15640259]
[273.19732666 -164.77523804]
[269.45532227 -171.17181396]
[266.93606567 -178.13328552]
[265.72030640 -185.42852783]
[265.84561157 -192.81590271]
[267.30511475 -200.05114746]
[270.04794312 -206.89558411]
[273.98092651 -213.12387085]
[278.97167969 -218.53150940]
[284.85324097 -222.94152832]
[291.42950439 -226.21023560]
[298.48181152 -228.23197937]
[305.77624512 -228.94248962]
[313.07135010 -228.32095337]
[320.12609863 -226.39059448]
[326.70797729 -223.21784973]
[332.60046387 -218.91006470]
[344.39480591 -228.17796326]
[356.18911743 -237.44584656]
[355.46972656 -252.94624329]
[364.02673340 -265.89062500]
[378.56979370 -271.30163574]
[393.50680542 -267.09863281]
[403.09417725 -254.89772034]
[403.64538574 -239.39044189]
[394.94845581 -226.53964233]
[380.34756470 -221.28671265]
[365.45703125 -225.65151978]
[353.66268921 -216.38363647]
[341.86837769 -207.11573792]
[346.18521118 -183.33619690]
[336.04559326 -161.28288269]
[315.00433350 -148.97407532]
[290.60357666 -150.96049500]
[282.40765381 -138.39756775]
[274.21173096 -125.83464813]
[266.01583862 -113.27172852]
[257.81991577 -100.70880127]
[257.34600830 -85.82173920]
[243.32546997 -78.49132538]
[235.12954712 -65.92840576]
[226.93363953 -53.36548615]
[218.73771667 -40.80256653]
[210.54180908 -28.23964500]
[202.34588623 -15.67672348]
[194.14997864 -3.11380291]
[197.43377686 3.50954270]
[198.15951538 10.93563271]
[196.18411255 18.20214844]
[191.71775818 24.35003090]
[185.30255127 28.55002975]
[177.74717712 30.21441650]
[170.02491760 29.07882118]
[160.31907654 40.51546097]
[150.61323547 51.95209885]
[140.90739441 63.38873672]
[131.20155334 74.82537079]
[136.37768555 83.14879608]
[139.37944031 92.47945404]
[140.02740479 102.25962830]
[138.28283691 111.90473938]
[134.25003052 120.83827972]
[128.17002869 128.52627563]
[120.40625000 134.50918579]
[111.42273712 138.42941284]
[101.75646210 140.05264282]
[91.98519897 139.28182983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[12 22]
[13 21]
[14 20]
[39 114]
[40 113]
[41 112]
[42 111]
[43 110]
[45 103]
[46 102]
[47 101]
[48 100]
[49 99]
[50 98]
[51 97]
[53 95]
[54 94]
[55 93]
[56 92]
[57 91]
[74 87]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
