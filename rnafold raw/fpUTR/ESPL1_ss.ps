%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUACAUUUUGGAUCCUCGCGGAGUACUGGUCAGGCGGUUAAGUCCUGUACCUAGGAAAGAGGGCGAGCUCUGGGGCGCUCUCCGGUGUC\
) } def
/len { sequence length } bind def

/coor [
[99.85787964 113.89153290]
[91.63110352 126.43426514]
[83.40432739 138.97698975]
[75.17754364 151.51972961]
[80.79808807 165.98310852]
[76.81129456 180.97927856]
[64.75017548 190.74191284]
[49.25247574 191.51707458]
[36.27737427 183.00669861]
[30.81406593 168.48321533]
[34.96330261 153.53117371]
[47.12961578 143.89994812]
[62.63481522 143.29295349]
[70.86159515 130.75021362]
[79.08837128 118.20748901]
[87.31514740 105.66475677]
[90.11580658 90.92852783]
[87.06396484 76.24227142]
[84.01212311 61.55600739]
[80.96028137 46.86974716]
[77.90844727 32.18348312]
[61.46205139 29.37025833]
[47.34066391 20.55106544]
[37.63813019 7.06592274]
[33.78081894 -9.05574989]
[36.31795502 -25.40052605]
[44.84362411 -39.53226471]
[58.06140900 -49.35519791]
[54.01445770 -63.79895782]
[49.72149658 -78.17151642]
[45.18378067 -92.46868896]
[40.64606094 -106.76586151]
[35.86490631 -120.98347473]
[30.84171295 -135.11738586]
[25.81851959 -149.25129700]
[20.79532433 -163.38522339]
[15.53155422 -177.43130493]
[0.93765205 -183.49708557]
[-5.01533651 -198.13734436]
[1.20439076 -212.66630554]
[15.90678024 -218.46417236]
[30.36916542 -212.09118652]
[36.01126862 -197.32832336]
[29.48573112 -182.93412781]
[34.98336411 -177.75874329]
[34.92923737 -168.40841675]
[39.95243454 -154.27449036]
[44.97562790 -140.14057922]
[49.99882126 -126.00666809]
[55.31655502 -120.64661407]
[54.94323349 -111.30358124]
[59.48094940 -97.00640869]
[64.01866913 -82.70923615]
[69.15030670 -77.17075348]
[68.45821381 -67.84590912]
[72.50516510 -53.40214920]
[85.95931244 -52.62939835]
[98.52065277 -47.68515396]
[108.92736816 -39.05060577]
[116.12928009 -27.57841301]
[119.39378357 -14.40850830]
[118.38035583 -0.85483581]
[113.17601776 11.72573376]
[104.28808594 22.06924629]
[92.59470367 29.13164330]
[95.64654541 43.81790543]
[98.69838715 58.50416565]
[101.75022888 73.19042969]
[104.80207062 87.87668610]
[139.43650818 98.50083923]
[154.92286682 101.73865509]
[159.43058777 115.93476868]
[170.73629761 125.79282379]
[182.04199219 135.65087891]
[193.34768677 145.50894165]
[204.65338135 155.36698914]
[215.95907593 165.22505188]
[232.14744568 167.84587097]
[237.71818542 183.26985168]
[226.94061279 195.63009644]
[210.90174866 192.21145630]
[206.10101318 176.53074646]
[194.79531860 166.67268372]
[183.48962402 156.81463623]
[172.18392944 146.95657349]
[160.87823486 137.09852600]
[149.57254028 127.24047089]
[134.89485168 124.70776367]
[129.57846069 109.80653381]
[122.14831543 110.82778168]
[116.48705292 124.71842957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[17 69]
[18 68]
[19 67]
[20 66]
[21 65]
[28 56]
[29 55]
[30 53]
[31 52]
[32 51]
[33 49]
[34 48]
[35 47]
[36 46]
[37 44]
[70 89]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
