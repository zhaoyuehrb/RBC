%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGCCCGGAGCGCAGGCCGGAGGCUCCCGGCCCGCCGGCCCCGGAGCGGAGCGGAGCGGAGG\
) } def
/len { sequence length } bind def

/coor [
[104.17083740 257.05819702]
[95.17255402 245.18888855]
[101.45803070 230.66983032]
[99.92406464 215.74845886]
[90.66627502 207.75988770]
[89.37741852 195.19415283]
[97.31131744 184.85136414]
[88.72351074 172.68177795]
[95.50101471 158.38575745]
[94.47737885 143.42073059]
[85.49772644 135.12074280]
[84.63862610 122.51832581]
[92.92101288 112.45244598]
[85.68440247 100.48903656]
[92.08773041 88.05967712]
[91.57561493 73.06842041]
[80.30731201 62.31373596]
[80.00151062 47.10317612]
[90.32389832 36.42685318]
[89.81178284 21.43559647]
[89.29966736 6.44434166]
[85.81910706 -2.23421907]
[89.03482819 -9.06558895]
[89.03482819 -24.06558800]
[89.03482819 -39.06558990]
[88.77873230 -54.06340408]
[88.26661682 -69.05465698]
[87.75450134 -84.04591370]
[87.24237823 -99.03717041]
[86.73026276 -114.02842712]
[83.24970245 -122.70698547]
[86.46542358 -129.53836060]
[86.46542358 -144.53836060]
[86.46542358 -159.53836060]
[78.72812653 -173.33853149]
[86.46542358 -186.06579590]
[86.46542358 -201.06579590]
[86.46542358 -216.06579590]
[86.46542358 -231.06579590]
[86.46542358 -246.06579590]
[72.88354492 -253.12208557]
[64.14613342 -265.68856812]
[62.26097107 -280.87753296]
[67.66126251 -295.19866943]
[79.10605621 -305.36111450]
[93.96542358 -309.02960205]
[108.82479095 -305.36111450]
[120.26959229 -295.19866943]
[125.66988373 -280.87753296]
[123.78472137 -265.68856812]
[115.04730225 -253.12208557]
[101.46542358 -246.06579590]
[101.46542358 -231.06579590]
[101.46542358 -216.06579590]
[101.46542358 -201.06579590]
[101.46542358 -186.06579590]
[109.20272827 -173.33853149]
[101.46542358 -159.53836060]
[101.46542358 -144.53836060]
[101.46542358 -129.53836060]
[101.72151947 -114.54054260]
[102.23363495 -99.54928589]
[102.74575043 -84.55802917]
[103.25787354 -69.56677246]
[103.76998901 -54.57551956]
[107.21706390 -47.85792160]
[104.03482819 -39.06558990]
[104.03482819 -24.06558800]
[104.03482819 -9.06558895]
[104.29092407 5.93222475]
[104.80303955 20.92348099]
[105.31515503 35.91473389]
[116.34205627 45.86174393]
[117.07497406 61.05771637]
[106.56687164 72.55630493]
[107.07898712 87.54755402]
[114.31559753 99.51096344]
[107.91226959 111.94032288]
[118.03918457 127.20198059]
[109.44241333 142.39709473]
[110.46604919 157.36212158]
[119.12706757 170.60211182]
[112.27634430 183.82772827]
[122.91840363 198.73474121]
[114.84542847 214.21450806]
[116.37938690 229.13586426]
[125.48738861 242.07243347]
[119.09219360 255.52423096]
[129.13438416 268.48904419]
[122.67800903 283.56378174]
[106.36483765 285.24081421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 88]
[3 86]
[4 85]
[7 83]
[9 81]
[10 80]
[13 78]
[15 76]
[16 75]
[19 72]
[20 71]
[21 70]
[23 69]
[24 68]
[25 67]
[26 65]
[27 64]
[28 63]
[29 62]
[30 61]
[32 60]
[33 59]
[34 58]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
