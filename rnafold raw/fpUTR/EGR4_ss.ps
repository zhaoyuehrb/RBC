%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGAGUCCCCGGCACACAUCCUGUGUCCAUGUUUGGGCAUUUACGUCACGGCGGCAGGGCCGGGGCCUCCCAAA\
) } def
/len { sequence length } bind def

/coor [
[85.74404144 376.55294800]
[94.97370911 363.43072510]
[93.73501587 348.48196411]
[92.49633026 333.53317261]
[91.25763702 318.58441162]
[90.01894379 303.63565063]
[81.25706482 291.59078979]
[87.82833099 277.19882202]
[86.58963776 262.25003052]
[85.35094452 247.30126953]
[84.11225891 232.35250854]
[82.87356567 217.40373230]
[81.63488007 202.45497131]
[80.39618683 187.50621033]
[68.62298584 196.80091858]
[53.68619537 195.42532349]
[43.80860519 184.13670349]
[44.42788696 169.14949036]
[55.20312119 158.71424866]
[70.20248413 158.57563782]
[81.16941071 168.81140137]
[83.63832855 154.01599121]
[86.10724640 139.22056580]
[88.57616425 124.42514801]
[91.04508209 109.62973022]
[62.50942612 86.38993073]
[55.92147446 72.91407013]
[49.33352661 59.43820190]
[42.74557877 45.96233749]
[36.15763092 32.48647308]
[22.25895119 23.78252220]
[23.11777878 7.40587854]
[37.85062408 0.20342873]
[51.30160141 9.58443546]
[49.63349533 25.89852333]
[56.22144318 39.37438965]
[62.80939102 52.85025406]
[69.39733887 66.32611847]
[75.98529053 79.80197906]
[83.25579071 81.64311981]
[82.26461792 66.67590332]
[96.19306946 61.10829544]
[105.79216766 72.63467407]
[97.79679871 85.32540894]
[105.06729889 87.16654968]
[117.27503204 78.45039368]
[129.48275757 69.73424530]
[135.78034973 54.59249878]
[152.07499695 52.74410629]
[161.60415649 66.09053040]
[154.56506348 80.90211487]
[138.19891357 81.94197083]
[125.99118042 90.65812683]
[113.78344727 99.37427521]
[105.84050751 112.09864807]
[103.37158203 126.89406586]
[100.90266418 141.68948364]
[98.43374634 156.48490906]
[95.96482849 171.28033447]
[95.34495544 186.26751709]
[96.58364105 201.21627808]
[97.82233429 216.16505432]
[99.06102753 231.11381531]
[100.29971313 246.06257629]
[101.53840637 261.01135254]
[102.77709198 275.96011353]
[111.62757874 289.07421875]
[104.96771240 302.39694214]
[106.20640564 317.34573364]
[107.44509125 332.29449463]
[108.68378448 347.24325562]
[109.92247772 362.19201660]
[121.18611145 373.61611938]
[119.13416290 389.52740479]
[105.34071350 397.72012329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[21 59]
[22 58]
[23 57]
[24 56]
[25 55]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
