%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCCCGCCUCCCCAGCCUCGCUGUGGCCUGCGGCUCCCGGGCUGGUAGCGCGCCGCUCUCGGUCGCGCGGAGUGAUCGUGUGGAAUCGCGGGUCGCGGACGCUCGCCGCCGGCCAUAGCUCAGCCUAGCGCCGCCAAGGCCGACGGCCCUCAGCCUCUGCC\
) } def
/len { sequence length } bind def

/coor [
[234.92155457 437.05636597]
[239.46029663 422.15542603]
[232.54823303 408.84292603]
[225.63616943 395.53039551]
[211.40243530 391.29522705]
[204.20298767 377.89288330]
[208.74172974 362.99197388]
[201.82966614 349.67944336]
[194.91758728 336.36691284]
[184.49980164 337.11709595]
[174.39533997 334.32501221]
[165.77787781 328.28833008]
[159.65731812 319.68313599]
[156.76136780 309.48822021]
[157.44918823 298.87390137]
[161.66697693 289.06750488]
[168.95126343 281.21163940]
[163.07855225 267.40905762]
[148.54580688 264.25668335]
[138.53759766 253.01837158]
[137.04856873 237.86462402]
[144.85832214 224.58630371]
[138.98559570 210.78372192]
[133.11288452 196.98114014]
[127.24015808 183.17857361]
[121.36743927 169.37599182]
[115.49472046 155.57341003]
[109.62200165 141.77082825]
[103.74928284 127.96825409]
[97.87656403 114.16567993]
[86.81951141 105.60803223]
[88.32086182 91.70704651]
[82.44814301 77.90446472]
[76.57542419 64.10189056]
[70.70269775 50.29930878]
[64.82997894 36.49673080]
[61.17705536 33.95796967]
[58.78988266 30.70431900]
[57.73741531 27.23123169]
[57.91731262 24.00441933]
[59.08119202 21.40553284]
[54.28228378 7.19390202]
[49.48337173 -7.01772881]
[44.68445969 -21.22935867]
[38.94802094 -28.39912605]
[39.93257141 -35.75940323]
[25.36080360 -40.75638580]
[16.62758827 -53.22972870]
[16.91036987 -68.27579498]
[25.89116096 -80.12836456]
[21.36535072 -94.42930603]
[16.83954239 -108.73025513]
[3.09362173 -116.05742645]
[-1.29246974 -130.62509155]
[5.77757835 -143.68457031]
[1.25176942 -157.98551941]
[-3.27403951 -172.28646851]
[-7.79984856 -186.58740234]
[-12.73465729 -200.75242615]
[-18.07439232 -214.76980591]
[-23.41412544 -228.78720093]
[-29.15437698 -242.64540100]
[-35.29040527 -256.33294678]
[-41.42643738 -270.02050781]
[-47.56246567 -283.70806885]
[-53.69849396 -297.39559937]
[-59.83452606 -311.08316040]
[-65.97055817 -324.77072144]
[-80.39048004 -331.80245972]
[-83.74274445 -347.49136353]
[-73.45578766 -359.80224609]
[-57.42087555 -359.29125977]
[-47.93862152 -346.35040283]
[-52.28300095 -330.90673828]
[-46.14697266 -317.21920776]
[-40.01094055 -303.53164673]
[-33.87491226 -289.84408569]
[-27.73888206 -276.15652466]
[-21.60285187 -262.46899414]
[-15.46682358 -248.78143311]
[-12.27136135 -247.18957520]
[-9.70458794 -243.94618225]
[-8.54552174 -239.37162781]
[-9.39673519 -234.12693787]
[-4.05700111 -220.10954285]
[1.28273332 -206.09216309]
[4.38148975 -204.31939697]
[6.75773621 -200.93392944]
[7.65214252 -196.30035400]
[6.50109720 -191.11322021]
[11.02690601 -176.81227112]
[15.55271530 -162.51132202]
[20.07852364 -148.21037292]
[33.37468719 -141.59617615]
[38.16822433 -127.15745544]
[31.14048767 -113.25606537]
[35.66629791 -98.95511627]
[40.19210815 -84.65417480]
[54.35676193 -80.12642670]
[63.24433899 -67.98249817]
[63.27733612 -52.75579834]
[54.23351669 -40.28521347]
[58.89609146 -26.02827072]
[63.69499969 -11.81664085]
[68.49391174 2.39499044]
[73.29282379 16.60662079]
[78.63256073 30.62401199]
[84.50527954 44.42658997]
[90.37799835 58.22916794]
[96.25071716 72.03174591]
[102.12343597 85.83432007]
[113.18048859 94.39196777]
[111.67913818 108.29295349]
[117.55185699 122.09553528]
[123.42457581 135.89811707]
[129.29730225 149.70068359]
[135.17001343 163.50326538]
[141.04273987 177.30584717]
[146.91546631 191.10842896]
[152.78817749 204.91099548]
[158.66090393 218.71357727]
[173.64375305 222.29409790]
[183.52981567 233.87509155]
[184.68725586 248.87922668]
[176.88113403 261.53634644]
[182.75384521 275.33892822]
[202.40220642 278.72177124]
[215.97647095 293.12860107]
[218.15342712 312.65899658]
[208.23011780 329.45483398]
[215.14218140 342.76736450]
[222.05424500 356.07989502]
[236.85337830 360.94030762]
[243.67355347 374.53958130]
[238.94869995 388.61831665]
[245.86076355 401.93084717]
[252.77282715 415.24337769]
[267.57196045 420.10379028]
[274.39212036 433.70303345]
[269.66726685 447.78179932]
[276.57934570 461.09432983]
[283.49139404 474.40686035]
[296.71743774 483.08914185]
[295.71536255 497.95001221]
[302.62744141 511.26251221]
[309.39108276 517.47259521]
[309.54162598 524.89691162]
[316.19741821 538.33941650]
[322.85321045 551.78186035]
[337.53189087 558.25616455]
[341.48263550 573.80511475]
[331.67477417 586.50097656]
[315.63204956 586.60455322]
[305.66107178 574.03637695]
[309.41073608 558.43768311]
[302.75494385 544.99517822]
[296.09915161 531.55273438]
[289.31491089 518.17462158]
[282.40283203 504.86206055]
[269.67117310 497.13195801]
[270.17886353 481.31890869]
[263.26681519 468.00637817]
[256.35473633 454.69384766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 137]
[3 136]
[4 135]
[7 132]
[8 131]
[9 130]
[17 126]
[18 125]
[22 121]
[23 120]
[24 119]
[25 118]
[26 117]
[27 116]
[28 115]
[29 114]
[30 113]
[32 111]
[33 110]
[34 109]
[35 108]
[36 107]
[41 106]
[42 105]
[43 104]
[44 103]
[46 102]
[50 98]
[51 97]
[52 96]
[55 93]
[56 92]
[57 91]
[58 90]
[59 86]
[60 85]
[61 84]
[62 80]
[63 79]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
[140 163]
[141 162]
[142 161]
[144 159]
[145 158]
[147 157]
[148 156]
[149 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
