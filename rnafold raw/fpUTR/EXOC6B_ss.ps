%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGAGGGGUCGGCCUGCGGGUAGCCAGAGGCUGGGGCGGCUGUGGAGCCUGUGGUGGGAGCGGCAUUGUGGGGCAGGGAAAAGGUGAGCCGAGCCGACGGAGGGGACGCGCUGCGGGGCGCCCCCAGUCU\
) } def
/len { sequence length } bind def

/coor [
[89.95584869 386.60195923]
[89.60157013 371.60614014]
[78.67998505 361.54360962]
[78.10707092 346.34075928]
[88.73563385 334.95343018]
[85.40090179 328.27716064]
[88.55429840 319.60018921]
[88.55429840 304.60018921]
[88.55429840 289.60018921]
[88.55429840 274.60018921]
[85.37817383 267.84701538]
[88.73563385 259.24694824]
[89.08992004 244.25114441]
[81.65538025 231.34466553]
[89.71646118 217.73109436]
[90.07074738 202.73527527]
[90.42502594 187.73945618]
[90.77931213 172.74365234]
[91.13359070 157.74783325]
[91.48787689 142.75201416]
[91.84215546 127.75620270]
[82.88432312 123.32403564]
[75.96916199 116.10826111]
[71.92197418 106.97003937]
[71.22576141 96.99996948]
[57.21993637 91.62996674]
[43.21411514 86.25996399]
[29.20829391 80.88995361]
[13.55282116 83.17397308]
[4.43905067 71.39311981]
[-9.56677055 66.02311707]
[-23.57259178 60.65311050]
[-37.57841492 55.28310394]
[-51.58423615 49.91309738]
[-63.22838974 56.79553604]
[-76.51418304 55.69998932]
[-86.57461548 47.25401688]
[-89.85507202 34.73619461]
[-103.73014832 29.03688431]
[-119.90155029 31.76045227]
[-130.13591003 18.94678688]
[-123.90498352 3.77748609]
[-107.61862946 1.85742795]
[-98.03084564 15.16180325]
[-84.15576172 20.86111259]
[-68.97946167 13.71483040]
[-52.99948883 19.83303833]
[-46.21422958 35.90727615]
[-32.20840836 41.27728271]
[-18.20258713 46.64728546]
[-4.19676542 52.01729202]
[9.80905628 57.38729858]
[24.46273994 54.71918488]
[34.57830048 66.88413239]
[48.58412170 72.25414276]
[62.58994293 77.62414551]
[76.59576416 82.99414825]
[83.25122070 76.41111755]
[91.66031647 72.29788971]
[100.94259644 71.08515167]
[110.12619019 72.89986420]
[118.24954224 77.55203247]
[130.40559387 68.76393890]
[142.56163025 59.97584915]
[142.35247803 43.10841751]
[152.11267090 29.55359077]
[167.86054993 24.50430679]
[183.36923218 29.75043488]
[195.31433105 20.67768669]
[201.62403870 6.16913509]
[216.43917847 4.63256264]
[228.38426208 -4.44018650]
[235.06463623 -21.55234528]
[252.49699402 -23.18046379]
[264.22445679 -32.53281021]
[275.95193481 -41.88515854]
[277.86352539 -57.34425354]
[289.89007568 -66.66179657]
[304.61618042 -64.74412537]
[316.34365845 -74.09647369]
[313.97521973 -89.27165222]
[319.52664185 -103.59217072]
[331.50463867 -113.20587158]
[346.68716431 -115.52673340]
[360.99020386 -109.93043518]
[370.56631470 -97.92237091]
[372.83956909 -82.73264313]
[367.19848633 -68.44721222]
[355.16046143 -58.90878296]
[339.96368408 -56.68315506]
[325.69598389 -62.36899948]
[313.96850586 -53.01665497]
[312.56124878 -38.23304367]
[300.80114746 -28.58137131]
[285.30429077 -30.15768623]
[273.57681274 -20.80533791]
[261.84933472 -11.45299149]
[260.15890503 0.58515871]
[250.38174438 8.46672821]
[237.45701599 7.50490522]
[225.51193237 16.57765388]
[220.05661011 30.43726158]
[204.38706970 32.62277985]
[192.44198608 41.69552612]
[193.95823669 55.01284409]
[188.63114929 67.43033600]
[177.76283264 75.63990021]
[164.14665222 77.39665985]
[151.34973145 72.13189697]
[139.19367981 80.91998291]
[127.03762817 89.70807648]
[125.60420227 113.46780396]
[106.83797455 128.11048889]
[106.48368835 143.10629272]
[106.12940979 158.10211182]
[105.77512360 173.09793091]
[105.42084503 188.09375000]
[105.06655884 203.08955383]
[104.71228027 218.08537292]
[112.12147522 232.06443787]
[104.08573151 244.60542297]
[103.73145294 259.60122681]
[103.55429840 274.60018921]
[103.55429840 289.60018921]
[103.55429840 304.60018921]
[103.55429840 319.60018921]
[103.73145294 334.59915161]
[114.88591766 345.47183228]
[115.03158569 360.68478394]
[104.59738922 371.25186157]
[104.95166779 386.24768066]
[107.59674072 405.44802856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 131]
[2 130]
[5 127]
[7 126]
[8 125]
[9 124]
[10 123]
[12 122]
[13 121]
[15 119]
[16 118]
[17 117]
[18 116]
[19 115]
[20 114]
[21 113]
[25 57]
[26 56]
[27 55]
[28 54]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[38 45]
[39 44]
[62 111]
[63 110]
[64 109]
[68 104]
[69 103]
[71 101]
[72 100]
[74 97]
[75 96]
[76 95]
[79 92]
[80 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
