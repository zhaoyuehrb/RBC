%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCGCAGGCGCAGCCGGCCGGCAGUCCCGUCAGCUGUCCCAGAGCCUGUGUCGCGCCCGUGCCGGUAGCGCCCGUGCCGGUAGCGCCGCUGCCACCGCUCACC\
) } def
/len { sequence length } bind def

/coor [
[203.96340942 299.06274414]
[216.80970764 291.31857300]
[231.61337280 288.89956665]
[246.25819397 292.15252686]
[236.80686951 280.50466919]
[227.35556030 268.85681152]
[217.90423584 257.20895386]
[203.87673950 252.20111084]
[201.18962097 236.60977173]
[191.73829651 224.96191406]
[182.28698730 213.31405640]
[172.83566284 201.66619873]
[163.38435364 190.01834106]
[149.35685730 185.01048279]
[146.66972351 169.41914368]
[137.21841431 157.77128601]
[127.76708984 146.12342834]
[118.31577301 134.47557068]
[108.86445618 122.82771301]
[99.41313934 111.17985535]
[89.79026031 99.67332458]
[79.99792480 88.31066132]
[70.20559692 76.94799042]
[54.68489838 75.62672424]
[44.91594696 63.96387100]
[46.27121735 49.17539978]
[36.47888565 37.81273270]
[20.95818901 36.49147034]
[11.18923759 24.82861328]
[12.54450798 10.04014301]
[2.75217652 -1.32252574]
[-5.35657501 -5.87595367]
[-7.15589428 -13.17006683]
[-16.60721207 -24.81792450]
[-26.05852890 -36.46578217]
[-35.68141174 -47.97230911]
[-45.47374344 -59.33497620]
[-61.10654068 -58.94809723]
[-73.29833221 -68.74066162]
[-76.29252625 -84.08891296]
[-68.67536163 -97.74588013]
[-54.04341888 -103.26316071]
[-39.30546570 -98.03565979]
[-31.42030716 -84.53165436]
[-34.11107254 -69.12731171]
[-24.31874275 -57.76464081]
[-17.45793533 -54.70343781]
[-14.41067123 -45.91709900]
[-4.95935392 -34.26924133]
[4.49196386 -22.62138367]
[14.11484528 -11.11485767]
[23.90717697 0.24781109]
[38.73366928 1.09086120]
[48.82635117 12.47472763]
[47.84155273 28.02039909]
[57.63388824 39.38306808]
[72.46038055 40.22612000]
[82.55306244 51.60998535]
[81.56826782 67.15565491]
[91.36059570 78.51832581]
[101.15293121 89.88099670]
[108.50247955 93.52073669]
[111.06099701 101.72853851]
[120.51231384 113.37639618]
[129.96363831 125.02425385]
[139.41494751 136.67210388]
[148.86627197 148.31996155]
[158.31758118 159.96781921]
[173.02110291 165.80880737]
[175.03221130 180.56701660]
[184.48352051 192.21487427]
[193.93484497 203.86273193]
[203.38615417 215.51058960]
[212.83747864 227.15844727]
[227.54100037 232.99943542]
[229.55209351 247.75764465]
[239.00341797 259.40548706]
[248.45472717 271.05334473]
[257.90603638 282.70123291]
[266.74685669 286.04580688]
[270.75985718 293.45083618]
[283.89590454 300.69271851]
[297.03192139 307.93460083]
[310.16793823 315.17648315]
[323.30395508 322.41836548]
[336.43997192 329.66024780]
[353.22998047 332.01226807]
[355.61782837 348.79721069]
[340.14987183 355.73828125]
[329.19808960 342.79626465]
[316.06207275 335.55438232]
[302.92605591 328.31250000]
[289.79003906 321.07061768]
[276.65399170 313.82873535]
[263.51797485 306.58685303]
[269.30981445 320.42358398]
[269.54824829 335.42169189]
[264.19921875 349.43551636]
[254.02792358 360.46026611]
[240.48950195 366.91870117]
[225.52078247 367.88687134]
[211.26319885 363.22625732]
[199.75645447 353.60363770]
[192.64672852 340.39559937]
[190.95112610 325.49176025]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 79]
[5 78]
[6 77]
[7 76]
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[21 61]
[22 60]
[23 59]
[26 56]
[27 55]
[30 52]
[31 51]
[33 50]
[34 49]
[35 48]
[36 46]
[37 45]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[86 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
