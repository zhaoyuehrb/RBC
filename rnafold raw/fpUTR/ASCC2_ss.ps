%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGACUUCCUGUCUGCUCCUGCGGAAUCGCAGUUUGACCCCGGAAGUGCGGGCGCUCAGGGAGCUGUCACCGUGGUCGGCGGCGGCGGCGGCGGCGGCGGCACAGAGCCGGUGGUGGAGCCGCCGAGGAGGGUCACGCAGCACA\
) } def
/len { sequence length } bind def

/coor [
[-35.40718842 264.74160767]
[-43.91195297 252.38568115]
[-45.24213028 237.44477844]
[-39.05296326 223.77958679]
[-52.45475006 230.51695251]
[-65.85653687 237.25430298]
[-79.25832367 243.99166870]
[-92.66011047 250.72903442]
[-106.06189728 257.46640015]
[-116.27194214 274.79129028]
[-135.48367310 273.02380371]
[-148.58103943 280.33541870]
[-161.67839050 287.64700317]
[-161.52316284 300.23117065]
[-166.73027039 311.60894775]
[-176.24464417 319.62365723]
[-188.20143127 322.78543091]
[-200.29138184 320.54760742]
[-210.20674133 313.40036011]
[-223.60853577 320.13772583]
[-237.01031494 326.87509155]
[-250.41210938 333.61245728]
[-263.81390381 340.34982300]
[-272.36279297 354.34439087]
[-288.74795532 353.66769409]
[-296.11376953 339.01583862]
[-286.88287354 325.46139526]
[-270.55126953 326.94802856]
[-257.14947510 320.21066284]
[-243.74768066 313.47329712]
[-230.34590149 306.73593140]
[-216.94410706 299.99856567]
[-214.94293213 282.51147461]
[-202.77920532 269.57415771]
[-185.14076233 266.44531250]
[-168.98997498 274.54965210]
[-155.89262390 267.23803711]
[-142.79527283 259.92645264]
[-140.87471008 249.79829407]
[-133.51382446 242.26963806]
[-123.00023651 240.02912903]
[-112.79926300 244.06462097]
[-99.39747620 237.32725525]
[-85.99568939 230.58988953]
[-72.59390259 223.85252380]
[-59.19211578 217.11515808]
[-45.79032898 210.37779236]
[-33.19553757 202.23092651]
[-21.55541229 192.77009583]
[-9.91528511 183.30926514]
[1.62167025 173.72288513]
[13.05410099 164.01208496]
[24.48653221 154.30128479]
[29.17775345 140.16474915]
[44.70474243 137.12779236]
[56.13717270 127.41699219]
[67.56960297 117.70619965]
[61.17222977 102.57867432]
[61.84637070 85.32803345]
[70.16884613 69.25093079]
[85.19248199 57.71179199]
[104.51176453 53.44822693]
[124.63878632 57.95314789]
[129.73513794 43.84545135]
[134.83149719 29.73775101]
[139.92785645 15.63005161]
[145.02420044 1.52235305]
[150.12055969 -12.58534622]
[147.53222656 -28.19339180]
[159.13343811 -37.53475952]
[164.22979736 -51.64245605]
[169.32615662 -65.75016022]
[174.42251587 -79.85785675]
[171.83418274 -95.46590424]
[183.43539429 -104.80726624]
[188.53175354 -118.91497040]
[193.62809753 -133.02265930]
[198.72445679 -147.13037109]
[195.30683899 -163.16943359]
[207.66777039 -173.94624329]
[223.09138489 -168.37451172]
[225.71119690 -152.18597412]
[212.83215332 -142.03401184]
[207.73579407 -127.92631531]
[202.63945007 -113.81861115]
[197.54309082 -99.71091461]
[200.49594116 -85.11194611]
[188.53021240 -74.76149750]
[183.43385315 -60.65380096]
[178.33749390 -46.54610443]
[173.24114990 -32.43840408]
[176.19400024 -17.83943367]
[164.22825623 -7.48899126]
[159.13189697 6.61870766]
[154.03555298 20.72640610]
[148.93919373 34.83410645]
[143.84283447 48.94180298]
[138.74649048 63.04950333]
[148.58055115 74.37606812]
[163.26393127 71.31039429]
[177.94731140 68.24472046]
[187.90121460 55.66301727]
[203.94406128 55.74481583]
[213.76914978 68.42737579]
[209.83950806 83.98171234]
[195.16963196 90.47587585]
[181.01298523 82.92810059]
[166.32960510 85.99377441]
[151.64622498 89.05944824]
[150.50984192 104.01634216]
[164.56150818 109.26522064]
[178.61317444 114.51410675]
[192.66484070 119.76298523]
[206.71649170 125.01187134]
[220.76815796 130.26075745]
[237.72166443 130.13919067]
[242.53167725 146.39649963]
[228.24125671 155.51901245]
[215.51927185 144.31240845]
[201.46762085 139.06353760]
[187.41595459 133.81465149]
[173.36428833 128.56576538]
[159.31262207 123.31688690]
[145.26095581 118.06800079]
[130.45513916 134.19078064]
[111.19454193 141.35317993]
[92.11556244 139.10852051]
[77.28039551 129.13862610]
[65.84796906 138.84942627]
[54.41553879 148.56021118]
[48.90659332 163.39134216]
[34.19732666 165.73371887]
[22.76489449 175.44451904]
[11.33246422 185.15530396]
[6.77349043 193.15814209]
[-0.45444784 194.94938660]
[-12.09457493 204.41021729]
[-23.73470116 213.87106323]
[-8.73476028 213.82890320]
[4.34735727 221.16772461]
[12.13025856 233.99060059]
[12.60226059 248.98316956]
[5.64136410 262.27023315]
[-6.95321751 270.41741943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 47]
[5 46]
[6 45]
[7 44]
[8 43]
[9 42]
[11 38]
[12 37]
[13 36]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[48 138]
[49 137]
[50 136]
[51 134]
[52 133]
[53 132]
[55 130]
[56 129]
[57 128]
[63 98]
[64 97]
[65 96]
[66 95]
[67 94]
[68 93]
[70 91]
[71 90]
[72 89]
[73 88]
[75 86]
[76 85]
[77 84]
[78 83]
[99 109]
[100 108]
[101 107]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
