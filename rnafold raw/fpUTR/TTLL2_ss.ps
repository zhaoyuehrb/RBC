%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCUCCCUCCAGCCUCCGCGCAUUUCAGCUGGCGCUGCAGCUGCUGCACAGAGACCCACAGAGGCCACCCUCGGAACCAGCGCCCA\
) } def
/len { sequence length } bind def

/coor [
[107.35279083 284.43685913]
[116.74024200 271.42706299]
[115.68215942 256.46441650]
[114.62407684 241.50178528]
[113.56598663 226.53913879]
[112.50790405 211.57650757]
[99.79375458 203.86363220]
[93.99057770 189.97885132]
[97.51723480 175.16615295]
[109.22517395 165.15464783]
[108.16709137 150.19201660]
[107.10900879 135.22937012]
[86.06233215 131.63368225]
[71.55550385 117.11496735]
[68.25841522 97.69604492]
[76.44664001 80.69553375]
[67.54441071 68.62282562]
[58.64218140 56.55011749]
[44.22468567 50.03503418]
[42.89862061 35.19957733]
[28.48112297 28.68449402]
[27.15505981 13.84903526]
[18.25283051 1.77632630]
[9.35060024 -10.29638195]
[-1.75712645 -11.34742832]
[-10.19907284 -18.29772377]
[-13.23698521 -28.57050133]
[-10.06709576 -38.57027817]
[-18.09555435 -51.24086761]
[-26.12401390 -63.91145706]
[-34.15247345 -76.58204651]
[-42.18093109 -89.25263977]
[-50.20938873 -101.92322540]
[-65.68353271 -105.13671875]
[-74.28314209 -118.39652252]
[-70.90622711 -133.83581543]
[-57.55624771 -142.29475403]
[-42.15351105 -138.75479126]
[-33.83618927 -125.31613159]
[-37.53879929 -109.95168304]
[-29.51034164 -97.28109741]
[-21.48188210 -84.61050415]
[-13.45342350 -71.93991852]
[-5.42496490 -59.26932526]
[2.60349393 -46.59873581]
[20.31262779 -39.17546082]
[21.42330933 -19.19861221]
[30.32553864 -7.12590408]
[39.22776794 4.94680452]
[53.00852203 10.59836578]
[54.97132874 26.29734421]
[68.75208282 31.94890594]
[70.71488953 47.64788437]
[79.61711884 59.72059250]
[88.51935577 71.79330444]
[96.57022858 69.05010223]
[105.25273895 68.61138916]
[113.90599060 70.61331940]
[121.84334564 75.00241089]
[128.40681458 81.53212738]
[133.02117920 89.77503967]
[135.24351501 99.15013885]
[134.80377197 108.96350861]
[149.68943787 110.81198120]
[164.57510376 112.66046143]
[179.46078491 114.50893402]
[194.34609985 107.62712097]
[207.59083557 117.29712677]
[205.56993103 133.57127380]
[190.36233521 139.70812988]
[177.61230469 129.39460754]
[162.72663879 127.54612732]
[147.84095764 125.69764709]
[132.95529175 123.84917450]
[122.07164764 134.17129517]
[123.12973022 149.13392639]
[124.18781281 164.09655762]
[137.18812561 172.36082458]
[142.76423645 186.52981567]
[138.97276306 201.09309387]
[127.47054291 210.51843262]
[128.52862549 225.48106384]
[129.58671570 240.44369507]
[130.64479065 255.40632629]
[131.70288086 270.36895752]
[142.82774353 281.92825317]
[140.58380127 297.81359863]
[126.69242859 305.83914185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 85]
[3 84]
[4 83]
[5 82]
[6 81]
[10 77]
[11 76]
[12 75]
[16 55]
[17 54]
[18 53]
[20 51]
[22 49]
[23 48]
[24 47]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[63 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
