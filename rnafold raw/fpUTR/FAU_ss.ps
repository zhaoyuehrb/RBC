%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGGUCGCUCAGCAGUGACGUGACACGCAGCCCACGGUCUGUACUGACGCGCCCUCGCUUCUUCCUCUUUCUCGACUCCAUCUUCGCGGUAGCUGGGACCGCCGUUCAGUCGCCAAU\
) } def
/len { sequence length } bind def

/coor [
[141.99270630 108.60218811]
[126.99784851 108.20953369]
[112.00299072 107.81687927]
[99.62504578 114.31903839]
[87.60435486 107.17797852]
[72.60949707 106.78532410]
[58.61151505 114.15872955]
[46.09114075 106.09091949]
[31.09628105 105.69826508]
[16.10142136 105.30561066]
[1.10270691 105.10926819]
[-13.89729309 105.10926819]
[-28.89729309 105.10926819]
[-43.89729309 105.10926819]
[-58.89215469 105.50192261]
[-73.87159729 106.28695679]
[-88.85103607 107.07199860]
[-96.70583344 118.10413361]
[-109.30993652 122.49609375]
[-121.94438171 118.84272766]
[-130.01593018 108.70734406]
[-145.01078796 109.09999847]
[-160.00564575 109.49265289]
[-175.00050354 109.88530731]
[-182.25852966 123.42106628]
[-195.32048035 131.50071716]
[-210.67277527 131.95089722]
[-224.18571472 124.65048981]
[-232.22439575 111.56327057]
[-232.62644958 96.20964050]
[-225.28372192 82.71965027]
[-212.17137146 74.72203064]
[-196.81654358 74.36811066]
[-183.34963989 81.75308990]
[-175.39315796 94.89044189]
[-160.39830017 94.49778748]
[-145.40344238 94.10513306]
[-130.40858459 93.71247864]
[-119.42815399 81.04785156]
[-102.35282898 80.16633606]
[-89.63607788 92.09255219]
[-74.65663910 91.30751801]
[-59.67719269 90.52247620]
[-55.80184937 87.54216003]
[-49.98329926 87.04891968]
[-43.89729309 90.10926819]
[-28.89729309 90.10926819]
[-13.89729309 90.10926819]
[1.10270691 90.10926819]
[7.87482309 86.92354584]
[16.49407578 90.31075287]
[31.48893547 90.70340729]
[46.48379517 91.09606171]
[59.40924454 83.69457245]
[73.00215149 91.79046631]
[87.99700928 92.18312073]
[100.37495422 85.68096161]
[112.39564514 92.82202148]
[127.39050293 93.21467590]
[142.38536072 93.60733032]
[145.30900574 83.18182373]
[150.28468323 73.57324219]
[157.10260010 65.18031311]
[165.47660828 58.35062027]
[175.05618286 53.36626053]
[185.44111633 50.43214798]
[196.19821167 49.66762161]
[206.87937927 51.10158157]
[217.04026794 54.67140961]
[226.25878906 60.22568893]
[234.15264893 67.53064728]
[240.39517212 76.27997589]
[244.72882080 86.10766602]
[246.97584534 96.60334015]
[247.04559326 107.32939148]
[261.63113403 110.83106995]
[276.21670532 114.33275604]
[290.80224609 117.83443451]
[305.38778687 121.33611298]
[315.23208618 111.58905029]
[328.51022339 108.03839111]
[341.69546509 111.51563263]
[351.34078979 121.00025177]
[354.98010254 133.91604614]
[364.20657349 127.86779022]
[375.01721191 127.96501923]
[383.76779175 133.92942810]
[387.64474487 143.54615784]
[401.91058350 148.18141174]
[416.17642212 152.81666565]
[430.44229126 157.45191956]
[444.70812988 162.08717346]
[457.87277222 153.64762878]
[473.37564087 155.69590759]
[483.89672852 167.26486206]
[484.46829224 182.89199829]
[474.82049561 195.19865417]
[459.50869751 198.37400818]
[445.76266479 190.91874695]
[440.07287598 176.35302734]
[425.80703735 171.71775818]
[411.54116821 167.08250427]
[397.27532959 162.44725037]
[383.00949097 157.81199646]
[364.54748535 163.31027222]
[351.09780884 148.40493774]
[338.73803711 159.12196350]
[322.26443481 160.41757202]
[308.10046387 151.58953857]
[301.88610840 135.92166138]
[287.30056763 132.41998291]
[272.71499634 128.91830444]
[258.12945557 125.41661835]
[243.54391479 121.91493988]
[232.97386169 138.62052917]
[216.95944214 150.25979614]
[197.75140381 155.17083740]
[178.05895996 152.63916016]
[160.66770935 143.00158691]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[5 56]
[6 55]
[8 53]
[9 52]
[10 51]
[11 49]
[12 48]
[13 47]
[14 46]
[15 43]
[16 42]
[17 41]
[21 38]
[22 37]
[23 36]
[24 35]
[75 114]
[76 113]
[77 112]
[78 111]
[79 110]
[84 106]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
