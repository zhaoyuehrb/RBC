%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGCUAGUCUUACCUCAAGUAAUGGGAAACGACCAGACCUCCUAAAGAGUCAGUGUGCAAGUUAGGGCUACUGUCCCAAGAAGGACACCUGAGUCCAA\
) } def
/len { sequence length } bind def

/coor [
[203.46548462 158.41905212]
[189.96545410 151.88078308]
[176.46540833 145.34251404]
[162.96536255 138.80424500]
[149.46533203 132.26597595]
[135.96528625 125.72771454]
[122.02371979 130.84321594]
[108.23962402 124.40479279]
[102.96854401 109.74691010]
[94.76391602 109.32376862]
[89.15513611 102.78961945]
[75.86496735 95.83466339]
[60.05035019 96.29135895]
[52.36134720 83.53485107]
[39.07117844 76.57990265]
[25.67445183 69.83247375]
[12.17441273 63.29420853]
[-2.59419537 68.24658203]
[-16.19201469 61.42353439]
[-20.82233047 47.31340408]
[-34.32236862 40.77513885]
[-50.56052017 50.53607559]
[-69.27626038 48.76406097]
[-83.17542267 36.32457352]
[-86.94490051 18.20634651]
[-100.99543762 12.95444965]
[-115.04597473 7.70255327]
[-128.56555176 15.56099510]
[-143.96453857 12.83977413]
[-153.97201538 0.82376659]
[-153.86274719 -14.81343555]
[-143.68833923 -26.68842316]
[-128.25282288 -29.19419098]
[-114.84438324 -21.14759064]
[-109.79407501 -6.34798336]
[-95.74353790 -1.09608650]
[-81.69300079 4.15581036]
[-73.49185181 -3.83743024]
[-62.81992340 -8.13312817]
[-51.26424026 -8.04991627]
[-40.55948257 -3.56081057]
[-32.32760620 4.69682217]
[-27.83208466 15.51146317]
[-27.78410339 27.27509880]
[-14.28406429 33.81336594]
[-0.34249741 28.69786835]
[13.44160271 35.13628769]
[18.71267891 49.79417038]
[32.21271896 56.33243561]
[39.73723984 56.41641235]
[46.02613068 63.28973007]
[59.31629944 70.24468231]
[74.18031311 69.29051971]
[82.81991577 82.54449463]
[96.11008453 89.49944305]
[109.50681305 96.24687195]
[124.27542114 91.29450226]
[137.87324524 98.11754608]
[142.50355530 112.22767639]
[156.00360107 118.76594543]
[169.50363159 125.30420685]
[183.00367737 131.84246826]
[196.50370789 138.38073730]
[210.00375366 144.91900635]
[226.32321167 138.85946655]
[241.71244812 146.25202942]
[246.97114563 162.14183044]
[260.66799927 168.25708008]
[274.36483765 174.37234497]
[288.06167603 180.48759460]
[301.75854492 186.60284424]
[319.00616455 179.11128235]
[336.03607178 186.31251526]
[342.45422363 203.31698608]
[356.50476074 208.56887817]
[370.55529785 213.82077026]
[384.60583496 219.07266235]
[398.65637207 224.32456970]
[412.93133545 217.54216003]
[427.79293823 222.91883850]
[434.42404175 237.26470947]
[428.89053345 252.06861877]
[414.47537231 258.54766846]
[399.73077393 252.85797119]
[393.40447998 238.37510681]
[379.35394287 233.12319946]
[365.30340576 227.87130737]
[351.25286865 222.61941528]
[337.20233154 217.36750793]
[327.91165161 224.33834839]
[316.27911377 225.89363098]
[305.25851440 221.51910400]
[297.70672607 212.22152710]
[295.64328003 200.29969788]
[281.94644165 194.18444824]
[268.24957275 188.06918335]
[254.55273438 181.95393372]
[240.85588074 175.83868408]
[229.48278809 182.11039734]
[216.38510132 180.60910034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[9 56]
[11 55]
[12 54]
[14 52]
[15 51]
[16 49]
[17 48]
[20 45]
[21 44]
[25 37]
[26 36]
[27 35]
[67 98]
[68 97]
[69 96]
[70 95]
[71 94]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
