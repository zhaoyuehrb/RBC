%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCCAGCCCGAGGAGGCACUCAGGGUUAGGAGGUCUGGGCGAGAAGCAACUAGGGCCCUCAUCACUUCGCCGCCGAAUCCCCGGCGCCGCCCAGCGGGGCAGAGCCAGGCCAGGGCCGCCCGCCCAACCUGGUCCGCUGCCUCUUCGGCC\
) } def
/len { sequence length } bind def

/coor [
[88.64813995 180.78295898]
[91.23391724 161.57452393]
[91.54189301 146.57769775]
[91.84986877 131.58085632]
[92.15784454 116.58401489]
[85.19248962 113.80304718]
[64.29641724 105.46014404]
[54.19097900 116.54527283]
[44.08554459 127.63040924]
[33.98011017 138.71554565]
[23.87467575 149.80067444]
[13.88357830 160.98896790]
[4.00787210 172.27925110]
[-5.86783409 183.56953430]
[-4.56400347 199.31994629]
[-14.84288788 211.32495117]
[-30.60620880 212.46218872]
[-42.50186539 202.05694580]
[-43.47237778 186.28248596]
[-32.94195557 174.49751282]
[-17.15811348 173.69383240]
[-7.28240776 162.40354919]
[2.59329820 151.11326599]
[4.64251614 143.96394348]
[12.78954124 139.69523621]
[22.89497566 128.61010742]
[33.00041199 117.52497101]
[43.10584641 106.43984222]
[53.21128082 95.35470581]
[39.12871552 100.52011108]
[25.81679535 93.60688019]
[21.94230461 79.11590576]
[30.02775002 66.48160553]
[44.80906296 63.92959213]
[56.66259384 73.12097931]
[50.19301605 66.58337402]
[50.40756989 59.14925003]
[44.41927338 45.39641953]
[38.43097687 31.64359093]
[32.44268036 17.89076233]
[26.45438194 4.13793325]
[20.46608543 -9.61489582]
[14.47778893 -23.36772537]
[-7.38916397 -26.83459473]
[-18.76578712 -52.62909317]
[-29.31780243 -63.29000092]
[-39.86981583 -73.95091248]
[-50.42183304 -84.61181641]
[-64.84320068 -79.73477936]
[-79.89064789 -81.59525299]
[-92.58617401 -89.77105713]
[-100.44069672 -102.59555054]
[-101.94198608 -117.49707794]
[-96.84557343 -131.51463318]
[-107.39758301 -142.17555237]
[-123.35005951 -145.97694397]
[-127.77425385 -161.76802063]
[-116.11892700 -173.30429077]
[-100.37409210 -168.71821594]
[-96.73667908 -152.72755432]
[-86.18466187 -142.06665039]
[-72.11551666 -147.01889038]
[-57.23018646 -145.36468506]
[-44.48701096 -137.37892151]
[-36.44197464 -124.60012817]
[-34.73608780 -109.53437042]
[-39.76092148 -95.16383362]
[-29.20890808 -84.50292206]
[-18.65689278 -73.84201813]
[-8.10487843 -63.18110657]
[-0.95781302 -65.45475006]
[13.33631706 -70.00204468]
[20.48338127 -72.27568817]
[22.93630981 -87.07376862]
[25.38923836 -101.87184906]
[27.84216690 -116.66992188]
[30.29509354 -131.46800232]
[20.89503098 -144.17289734]
[23.31449509 -159.79089355]
[36.11806107 -169.05610657]
[51.70960236 -166.47164917]
[60.83893204 -153.57084656]
[58.08978271 -138.00750732]
[45.09317398 -129.01507568]
[42.64024353 -114.21699524]
[40.18731689 -99.41891479]
[37.73439026 -84.62084198]
[35.28145981 -69.82276154]
[40.88642883 -44.96888351]
[28.23061752 -29.35602188]
[34.21891403 -15.60319233]
[40.20721054 -1.85036337]
[46.19550705 11.90246582]
[52.18380356 25.65529442]
[58.17210007 39.40812302]
[64.16040039 53.16095352]
[70.28957367 66.85157776]
[135.38449097 84.63230896]
[149.81187439 88.73725128]
[164.23925781 92.84219360]
[178.66664124 96.94714355]
[193.09402466 101.05208588]
[207.52140808 105.15702820]
[221.94880676 109.26197815]
[241.19981384 103.42018890]
[254.13439941 117.74477386]
[268.71813965 121.25394440]
[283.30187988 124.76310730]
[297.88565063 128.27227783]
[312.46939087 131.78144836]
[327.05313110 135.29061890]
[337.68862915 126.96617126]
[350.98370361 126.31657410]
[362.05093384 133.35537720]
[366.95162964 145.31095886]
[381.46023560 149.11882019]
[395.96887207 152.92666626]
[410.47750854 156.73452759]
[424.99938965 149.91587830]
[439.32031250 157.14712524]
[442.45446777 172.88105774]
[431.99761963 185.04795837]
[415.97134399 184.31442261]
[406.66964722 171.24314880]
[392.16101074 167.43530273]
[377.65237427 163.62744141]
[363.14376831 159.81958008]
[349.03158569 168.91624451]
[332.37197876 164.94265747]
[323.54397583 149.87435913]
[308.96023560 146.36518860]
[294.37646484 142.85603333]
[279.79272461 139.34686279]
[265.20898438 135.83769226]
[250.62522888 132.32852173]
[242.35845947 138.46185303]
[231.85888672 139.01074219]
[222.61811829 133.54887390]
[217.84385681 123.68936157]
[203.41647339 119.58441925]
[188.98908997 115.47946930]
[174.56170654 111.37452698]
[160.13432312 107.26958466]
[145.70692444 103.16463470]
[131.27954102 99.05969238]
[125.24832916 103.51776886]
[126.93904114 118.42218018]
[113.18589783 112.43391418]
[107.15468597 116.89199066]
[106.84671021 131.88882446]
[106.53872681 146.88566589]
[106.23075104 161.88250732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[12 23]
[13 22]
[14 21]
[35 97]
[37 96]
[38 95]
[39 94]
[40 93]
[41 92]
[42 91]
[43 90]
[45 70]
[46 69]
[47 68]
[48 67]
[54 61]
[55 60]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
[98 145]
[99 144]
[100 143]
[101 142]
[102 141]
[103 140]
[104 139]
[106 135]
[107 134]
[108 133]
[109 132]
[110 131]
[111 130]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
