%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCUGUGCGGGGCGCUCGCGGGCUUCAGCGAGGCGGGAGGGCGGCCCUGUUGCCCUGGAGACGCUUUCCCUGCUGCCGGCCGCGACCGCAACCCGCUAGGCCUUCAUCGCGAGCUACGCCCGGACCGAGAAGCCCCGGC\
) } def
/len { sequence length } bind def

/coor [
[78.04089355 87.32305908]
[67.84980774 76.31661224]
[52.79655075 71.44731903]
[49.82691574 56.85175705]
[39.63583374 45.84531021]
[29.44475365 34.83886337]
[19.25366974 23.83242035]
[3.69574428 23.06516266]
[-6.48267126 11.75788689]
[-5.65533161 -3.06948996]
[-15.84641361 -14.07593536]
[-26.03749657 -25.08238029]
[-36.22857666 -36.08882523]
[-46.41965866 -47.09527206]
[-56.85006714 -57.87519073]
[-67.51476288 -68.42337799]
[-78.17945862 -78.97156525]
[-93.43206787 -83.17495728]
[-97.03993225 -97.62599182]
[-107.70462799 -108.17417908]
[-118.36932373 -118.72236633]
[-129.03402710 -129.27055359]
[-139.69871521 -139.81874084]
[-150.36341858 -150.36692810]
[-165.61602783 -154.57032776]
[-169.22389221 -169.02136230]
[-184.80050659 -169.10450745]
[-195.46575928 -179.95379639]
[-195.29049683 -194.80320740]
[-205.95518494 -205.35139465]
[-216.61988831 -215.89958191]
[-227.28459167 -226.44776917]
[-238.40231323 -236.51733398]
[-249.95159912 -246.08883667]
[-261.50088501 -255.66035461]
[-273.05017090 -265.23187256]
[-284.59948730 -274.80337524]
[-296.14877319 -284.37490845]
[-315.94110107 -281.37106323]
[-331.40316772 -293.60559082]
[-332.98165894 -312.95626831]
[-345.13626099 -321.74636841]
[-357.29083252 -330.53646851]
[-369.44543457 -339.32656860]
[-381.60003662 -348.11666870]
[-393.75463867 -356.90676880]
[-405.90921021 -365.69686890]
[-418.06381226 -374.48696899]
[-434.44155884 -378.86941528]
[-434.76419067 -395.82028198]
[-418.56506348 -400.82278442]
[-409.27371216 -386.64154053]
[-397.11914062 -377.85144043]
[-384.96453857 -369.06137085]
[-372.80993652 -360.27127075]
[-360.65533447 -351.48117065]
[-348.50073242 -342.69107056]
[-336.34616089 -333.90097046]
[-324.19155884 -325.11087036]
[-314.74478149 -329.45492554]
[-304.26589966 -329.44476318]
[-294.68011475 -325.01434326]
[-287.77709961 -316.91589355]
[-284.87670898 -306.59317017]
[-286.57727051 -295.92419434]
[-275.02795410 -286.35266113]
[-263.47866821 -276.78115845]
[-251.92938232 -267.20965576]
[-240.38008118 -257.63812256]
[-228.83079529 -248.06661987]
[-225.95910645 -248.24209595]
[-222.84339905 -247.24568176]
[-219.94680786 -244.97785950]
[-217.75984192 -241.51478577]
[-216.73640442 -237.11245728]
[-206.07170105 -226.56427002]
[-195.40699768 -216.01608276]
[-184.74230957 -205.46789551]
[-169.89572144 -205.80625916]
[-158.92994690 -195.26081848]
[-158.67570496 -179.68606567]
[-144.18589783 -176.23715210]
[-139.81523132 -161.03163147]
[-129.15052795 -150.48344421]
[-118.48583221 -139.93525696]
[-107.82113647 -129.38706970]
[-97.15644073 -118.83887482]
[-86.49174500 -108.29068756]
[-72.00194550 -104.84178162]
[-67.63127136 -89.63626099]
[-56.96657562 -79.08807373]
[-46.30187988 -68.53988647]
[-41.53294373 -67.67638397]
[-37.28194046 -63.75891113]
[-35.41321564 -57.28635406]
[-25.22213173 -46.27990723]
[-15.03105068 -35.27346420]
[-4.83996820 -24.26701736]
[5.35111427 -13.26057243]
[20.19823265 -12.94648170]
[30.69023132 -1.92955709]
[30.26011658 13.64133739]
[40.45119858 24.64778328]
[50.64228058 35.65422821]
[60.83336258 46.66067505]
[75.15768433 50.74271011]
[78.85625458 66.12553406]
[89.04733276 77.13198090]
[101.92057037 72.70854187]
[116.26718140 75.55571747]
[128.01144409 85.88752747]
[133.32688904 101.67548370]
[146.97135925 107.90671539]
[160.61584473 114.13793945]
[176.08937073 109.90123749]
[188.96388245 119.47341156]
[189.36315918 135.51148987]
[176.98091125 145.71244812]
[161.31573486 142.25097656]
[154.38461304 127.78241730]
[140.74014282 121.55119324]
[127.09565735 115.31996918]
[116.78429413 126.21380615]
[123.75514221 139.49565125]
[130.72598267 152.77748108]
[137.69683838 166.05932617]
[152.51730347 170.85426331]
[159.39752197 184.42324829]
[154.73495483 198.52275085]
[169.56217957 204.64915466]
[173.87837219 220.10069275]
[164.37252808 233.02426147]
[148.33671570 233.50599670]
[138.07221985 221.17636108]
[141.45310974 205.49359131]
[127.20080566 201.32139587]
[119.94216919 187.95101929]
[124.41499329 173.03018188]
[117.44414520 159.74833679]
[110.47329712 146.46649170]
[103.50244904 133.18464661]
[81.96379089 124.84056091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[4 105]
[5 104]
[6 103]
[7 102]
[10 99]
[11 98]
[12 97]
[13 96]
[14 95]
[15 92]
[16 91]
[17 90]
[19 88]
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[26 81]
[29 78]
[30 77]
[31 76]
[32 75]
[33 70]
[34 69]
[35 68]
[36 67]
[37 66]
[38 65]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[112 122]
[113 121]
[114 120]
[123 141]
[124 140]
[125 139]
[126 138]
[129 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
