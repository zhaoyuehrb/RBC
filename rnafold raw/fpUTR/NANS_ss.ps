%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGACCGCGGGCUGACGUGGCGGGGCUGGCGUGUGGGUCUCGCAGCGUUGCUCACAGAACAGAGUAGAGGCGGCGGCGGCGGCGGCCGGACCCAGACUGGUAGUGAGGCUUUGGACCCCGAGCCGCUGCA\
) } def
/len { sequence length } bind def

/coor [
[223.63366699 157.97456360]
[209.50491333 152.93685913]
[194.91833496 155.95033264]
[184.51828003 144.02769470]
[170.38952637 138.98997498]
[162.96191406 139.71359253]
[155.98896790 133.66284180]
[141.98315430 128.29283142]
[127.97732544 122.92282104]
[113.97150421 117.55281830]
[80.87838745 116.98426056]
[65.87944031 117.16140747]
[50.88048172 117.33856201]
[35.88153076 117.51571655]
[27.24241066 120.77136993]
[20.52722168 117.51571655]
[5.52826881 117.33856201]
[-9.47068501 117.16140747]
[-24.46963882 116.98426056]
[-39.46859360 116.80710602]
[-53.35918045 124.38088226]
[-65.99418640 116.49381256]
[-80.99314117 116.31665802]
[-95.99209595 116.13950348]
[-110.99105072 115.96234894]
[-125.99000549 115.78519440]
[-140.98895264 115.60803986]
[-155.98791504 115.43088531]
[-170.98686218 115.25373840]
[-180.14685059 127.77868652]
[-194.92967224 132.49542236]
[-209.65104675 127.59026337]
[-218.65031433 114.94933319]
[-218.46705627 99.43334198]
[-209.17173767 87.00849915]
[-194.33860779 82.45240784]
[-179.67131042 87.51697540]
[-170.80970764 100.25478363]
[-155.81076050 100.43193817]
[-140.81179810 100.60908508]
[-125.81285095 100.78623962]
[-110.81389618 100.96339417]
[-95.81494141 101.14054871]
[-80.81598663 101.31770325]
[-65.81703186 101.49485779]
[-52.99927139 93.90840912]
[-39.29143906 101.80815125]
[-24.29248619 101.98530579]
[-9.29353142 102.16246033]
[5.70542192 102.33960724]
[20.70437622 102.51676178]
[35.70437622 102.51676178]
[50.70333099 102.33960724]
[65.70228577 102.16246033]
[80.70124054 101.98530579]
[89.91442871 90.14819336]
[86.40413666 75.56472015]
[72.01380157 69.75972748]
[63.81242752 56.58713531]
[64.95360565 41.11207962]
[74.99853516 29.28503418]
[90.08473206 25.65373611]
[104.41124725 31.61449432]
[112.46923828 44.87527466]
[111.16024780 60.33703995]
[100.98760986 72.05442810]
[104.49790955 86.63790131]
[111.88520813 73.58310699]
[126.80609894 72.04457855]
[136.70185852 83.31728363]
[133.24337769 97.91313934]
[119.34150696 103.54699707]
[133.34733582 108.91699982]
[147.35314941 114.28701019]
[161.35897827 119.65701294]
[175.42724609 124.86123657]
[189.55598450 129.89894104]
[205.15315247 127.24579620]
[214.54263306 138.80810547]
[228.67137146 143.84580994]
[242.91516113 148.54841614]
[257.26605225 152.91326904]
[271.61694336 157.27813721]
[285.96783447 161.64300537]
[300.31872559 166.00787354]
[314.66958618 170.37272644]
[329.02047729 174.73759460]
[343.37136841 179.10246277]
[357.77279663 183.29753113]
[372.22277832 187.32223511]
[386.67276001 191.34692383]
[401.69488525 182.47241211]
[418.17642212 187.07139587]
[426.11456299 201.84892273]
[440.65554810 205.53120422]
[455.19656372 209.21348572]
[469.73757935 212.89576721]
[484.27856445 216.57804871]
[498.86206055 220.08834839]
[513.48596191 223.42616272]
[525.08239746 213.11584473]
[540.52764893 211.62434387]
[553.88262939 219.52516174]
[560.01220703 233.78027344]
[556.55932617 248.90830994]
[544.85174561 259.09222412]
[529.39123535 260.41607666]
[516.12268066 252.37084961]
[510.14816284 238.05007935]
[495.52423096 234.71226501]
[488.23364258 236.30603027]
[480.59628296 231.11904907]
[466.05529785 227.43676758]
[451.51428223 223.75448608]
[436.97326660 220.07220459]
[422.43228149 216.38992310]
[412.34350586 224.49389648]
[399.23193359 225.28961182]
[387.90548706 218.25939941]
[382.64807129 205.79690552]
[368.19808960 201.77220154]
[353.74810791 197.74751282]
[346.39038086 198.99520874]
[339.00650024 193.45335388]
[324.65560913 189.08848572]
[310.30474854 184.72361755]
[295.95385742 180.35874939]
[281.60296631 175.99389648]
[267.25207520 171.62902832]
[252.90118408 167.26416016]
[238.55029297 162.89929199]
[233.91384888 164.36647034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[4 77]
[5 76]
[7 75]
[8 74]
[9 73]
[10 72]
[11 55]
[12 54]
[13 53]
[14 52]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[56 67]
[57 66]
[81 131]
[82 130]
[83 129]
[84 128]
[85 127]
[86 126]
[87 125]
[88 124]
[89 122]
[90 121]
[91 120]
[94 116]
[95 115]
[96 114]
[97 113]
[98 112]
[99 110]
[100 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
