%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUCUCAGGACCAUCAGUCAGGCUCUUUGUGUCUAGGAGCCUCCUAAUGCAGUCUUCUGCACAGUCCUGGGGACUGACUGACUGAAUCACACCUCUGGGGCUGGGGGCUGCUGAC\
) } def
/len { sequence length } bind def

/coor [
[121.99654388 388.45712280]
[123.42204285 373.26074219]
[131.30720520 360.19216919]
[144.08641052 351.84625244]
[142.09552002 336.97897339]
[140.10464478 322.11166382]
[138.11375427 307.24438477]
[136.12287903 292.37707520]
[134.13198853 277.50979614]
[132.14111328 262.64248657]
[120.18531799 253.83372498]
[117.95448303 238.78453064]
[127.27500153 226.30392456]
[125.28411865 211.43663025]
[123.29323578 196.56933594]
[119.34670258 182.09782410]
[113.51433563 168.27813721]
[107.68197632 154.45846558]
[101.84960938 140.63877869]
[96.01725006 126.81909943]
[90.18488312 112.99942017]
[78.51096344 103.58032227]
[63.77069855 100.80098724]
[49.03043747 98.02165985]
[34.29017639 95.24232483]
[19.54991341 92.46299744]
[4.80965090 89.68366241]
[-9.93061066 86.90433502]
[-24.67087364 84.12500000]
[-36.65259171 94.17350769]
[-52.29007721 94.11771393]
[-64.19978333 83.98396301]
[-66.75831604 68.55710602]
[-58.75760651 55.12122726]
[-43.97535324 50.02034760]
[-29.39128113 55.66293716]
[-21.89154243 69.38474274]
[-7.15127993 72.16407013]
[7.58898163 74.94340515]
[22.32924271 77.72273254]
[37.06950378 80.50206757]
[51.80976868 83.28139496]
[66.55002594 86.06072998]
[81.29029083 88.84005737]
[86.73288727 83.67980957]
[73.55390167 76.51641846]
[76.29434204 61.76887894]
[91.16695404 59.81814194]
[97.61808777 73.35932159]
[103.06068420 68.19908142]
[101.06980133 53.33178711]
[99.07891846 38.46449280]
[97.08803558 23.59720039]
[95.09715271 8.72990894]
[84.66205597 -3.92081356]
[90.65304565 -19.18646431]
[106.90710449 -21.36304855]
[116.70345306 -8.21148586]
[109.96444702 6.73902559]
[111.95532990 21.60631752]
[113.94621277 36.47360992]
[115.93709564 51.34090424]
[117.92797852 66.20819855]
[132.45074463 69.96174622]
[141.39625549 57.92107391]
[150.34176636 45.88039780]
[159.28727722 33.83972549]
[168.23278809 21.79904938]
[177.17829895 9.75837517]
[181.77076721 -6.56172085]
[198.72439575 -6.66657400]
[203.51838684 9.59546852]
[189.21897888 18.70388603]
[180.27346802 30.74456024]
[171.32795715 42.78523254]
[162.38244629 54.82590866]
[153.43693542 66.86658478]
[144.49142456 78.90725708]
[138.89434814 97.40147400]
[127.36115265 108.74282837]
[114.29801178 111.68744659]
[104.00456238 107.16706085]
[109.83692932 120.98674011]
[115.66928864 134.80641174]
[121.50165558 148.62609863]
[127.33401489 162.44577026]
[133.16638184 176.26545715]
[137.82546997 162.00737000]
[148.87142944 151.85913086]
[163.47242737 148.42243958]
[177.88520813 152.57833862]
[188.41479492 163.26141357]
[192.36172485 177.73281860]
[188.71412659 192.28256226]
[178.40711975 203.18052673]
[164.08312988 207.63282776]
[149.41435242 204.49801636]
[138.16053772 194.57846069]
[140.15141296 209.44573975]
[142.14230347 224.31303406]
[154.41810608 233.90168762]
[156.22535706 249.00758362]
[147.00840759 260.65161133]
[148.99928284 275.51892090]
[150.99017334 290.38619995]
[152.98104858 305.25347900]
[154.97193909 320.12078857]
[156.96281433 334.98806763]
[158.95370483 349.85537720]
[173.47851562 354.54501343]
[184.52423096 365.07852173]
[189.89772034 379.36447144]
[188.53207397 394.56637573]
[180.69844055 407.66586304]
[167.95219421 416.06207275]
[152.82411194 418.08786011]
[138.31788635 413.34106445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 109]
[5 108]
[6 107]
[7 106]
[8 105]
[9 104]
[10 103]
[13 100]
[14 99]
[15 98]
[16 87]
[17 86]
[18 85]
[19 84]
[20 83]
[21 82]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
