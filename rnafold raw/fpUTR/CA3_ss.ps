%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUAAAAGCGCGGGCUCGCGGCGACUCUGCACCACGCAGGGGAAGAGAAAGCAGGAGCCGUCCAGCACGGAGGAAGGCGACC\
) } def
/len { sequence length } bind def

/coor [
[139.33026123 166.92416382]
[126.92432404 172.80654907]
[113.67608643 176.41123962]
[100.00000000 177.62547302]
[86.32391357 176.41123962]
[73.07567596 172.80654907]
[60.66974640 166.92416382]
[49.49422836 158.94812012]
[39.89874649 149.12791443]
[32.18347931 137.77079773]
[18.43504524 143.76918030]
[4.68661165 149.76756287]
[-9.06182194 155.76593018]
[-18.35930824 169.27478027]
[-34.68341827 167.70777893]
[-41.24130630 152.67694092]
[-31.28678131 139.64469910]
[-15.06020260 142.01750183]
[-1.31176853 136.01911926]
[12.43666553 130.02073669]
[26.18509865 124.02236176]
[22.60202789 105.93862915]
[23.38432312 87.51995087]
[28.48786545 69.80516052]
[37.62480545 53.79341507]
[50.27980423 40.38779068]
[41.83000183 27.99420738]
[33.38020325 15.60062695]
[24.93040085 3.20704508]
[16.48060036 -9.18653679]
[8.03079987 -21.58011818]
[-7.40181017 -25.96350861]
[-13.46365070 -40.81724930]
[-5.50459766 -54.74682236]
[10.36984539 -57.06665421]
[21.98216438 -45.99716187]
[20.42438126 -30.02991867]
[28.87418175 -17.63633728]
[37.32398224 -5.24275589]
[45.77378464 7.15082598]
[54.22358322 19.54440689]
[62.67338562 31.93798828]
[75.72829437 26.26671219]
[89.59925842 23.07446480]
[103.81990814 22.46857643]
[117.91212463 24.46941566]
[131.40211487 29.00971222]
[143.83630371 35.93681717]
[154.79666138 45.01782227]
[163.91465759 55.94742203]
[170.88374329 68.35813141]
[175.46961975 81.83269501]
[177.51806641 95.91807556]
[176.96025085 110.14069366]
[173.81489563 124.02236176]
[188.37574768 118.48887634]
[202.23316956 124.76793671]
[207.41876221 138.68357849]
[221.16720581 144.68196106]
[234.91563416 150.68034363]
[250.65843201 149.10720825]
[259.22967529 161.28845215]
[272.97811890 167.28683472]
[286.72656250 173.28521729]
[300.03762817 165.31056213]
[315.49087524 166.71650696]
[327.14422607 176.96243286]
[330.51672363 192.10858154]
[324.31155396 206.33094788]
[310.91476440 214.16073608]
[295.47766113 212.58723450]
[283.93615723 202.21549988]
[280.72817993 187.03364563]
[266.97973633 181.03526306]
[253.23130798 175.03688049]
[238.47189331 177.03906250]
[228.91725159 164.42877197]
[215.16882324 158.43038940]
[201.42037964 152.43200684]
[187.69239807 158.09573364]
[173.66407776 152.20837402]
[167.81651306 137.77079773]
[160.10125732 149.12791443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 21]
[11 20]
[12 19]
[13 18]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[55 82]
[58 79]
[59 78]
[60 77]
[62 75]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
