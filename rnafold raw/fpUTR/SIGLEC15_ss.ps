%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGGCUCCCGCAGAGCCCACAGGGACCUGCAGAUCUGAGUGCCCUGCCCACCCCCGCCCGCCUUCCUUCCCCCACCACGCCUGGGAGGGCCCUCACUGGGGAGGUGGCCGAGAGCGGGUCUGGCCUGGGGUGUUCAGAUGCUCACAGC\
) } def
/len { sequence length } bind def

/coor [
[76.47679138 181.97810364]
[75.56044769 166.64656067]
[82.44699097 152.91809082]
[95.28396606 144.48554993]
[94.34210968 129.51515198]
[93.40024567 114.54474640]
[86.51708984 111.56613922]
[80.55966187 125.33236694]
[66.79352570 119.37472534]
[72.75077057 105.60892487]
[65.86760712 102.63031006]
[54.30991364 112.19167328]
[42.75221252 121.75302887]
[31.19451523 131.31439209]
[29.56074333 146.80531311]
[17.70338821 156.33724976]
[2.94523406 154.68423462]
[-8.61246490 164.24559021]
[-20.17016220 173.80694580]
[-28.52034187 188.56198120]
[-45.01029587 184.62272644]
[-45.78986740 167.68670654]
[-29.73152351 162.24925232]
[-18.17382431 152.68789673]
[-6.61612558 143.12652588]
[-5.47445965 128.32003784]
[6.11048508 118.45881653]
[21.63315392 119.75669098]
[33.19085312 110.19533539]
[44.74855042 100.63397217]
[56.30625153 91.07261658]
[73.11550903 81.68514252]
[88.84893799 82.84124756]
[98.49819946 91.73783112]
[105.72450256 78.59323120]
[112.95080566 65.44863129]
[120.17711639 52.30403519]
[127.40341949 39.15943527]
[134.62973022 26.01483345]
[141.85603333 12.87023354]
[149.08233643 -0.27436656]
[156.30863953 -13.41896629]
[163.53494263 -26.56356621]
[170.76124573 -39.70816803]
[177.98754883 -52.85276794]
[185.21386719 -65.99736786]
[192.30212402 -79.21691895]
[191.83886719 -95.03134155]
[204.59217834 -102.72563171]
[211.54162598 -116.01869202]
[218.49105835 -129.31173706]
[213.99420166 -144.22535706]
[221.23129272 -157.60740662]
[235.47685242 -161.80256653]
[242.42630005 -175.09562683]
[249.37573242 -188.38867188]
[256.32516479 -201.68173218]
[263.27462769 -214.97479248]
[270.08447266 -228.33988953]
[276.61294556 -241.84466553]
[282.99963379 -255.41706848]
[289.24383545 -269.05560303]
[295.34487915 -282.75878906]
[291.45516968 -295.10177612]
[296.86975098 -306.41220093]
[308.17547607 -310.82931519]
[314.56216431 -324.40170288]
[320.94885254 -337.97412109]
[327.33554077 -351.54653931]
[333.72222900 -365.11892700]
[340.10891724 -378.69134521]
[346.49560547 -392.26373291]
[335.86599731 -403.04504395]
[329.57815552 -416.78677368]
[328.37347412 -431.82235718]
[332.37808228 -446.33557129]
[341.09005737 -458.57989502]
[353.44216919 -467.08868408]
[367.93270874 -470.85089111]
[382.80783081 -469.43112183]
[389.19451904 -483.00350952]
[395.58120728 -496.57592773]
[401.96789551 -510.14834595]
[400.05722046 -526.43579102]
[413.36709595 -536.01593018]
[428.20550537 -529.03350830]
[429.30792236 -512.67144775]
[415.54031372 -503.76162720]
[409.15362549 -490.18923950]
[402.76690674 -476.61682129]
[396.38021851 -463.04443359]
[406.95593262 -452.48794556]
[413.29373169 -438.92468262]
[414.61111450 -423.98348999]
[410.72994995 -409.46600342]
[402.09994507 -397.12933350]
[389.74694824 -388.47351074]
[375.15072632 -384.55905151]
[360.06802368 -385.87704468]
[353.68133545 -372.30465698]
[347.29464722 -358.73223877]
[340.90795898 -345.15985107]
[334.52127075 -331.58743286]
[328.13458252 -318.01501465]
[321.74789429 -304.44262695]
[324.18350220 -287.09197998]
[309.04806519 -276.65774536]
[302.94702148 -262.95455933]
[303.10067749 -255.51553345]
[296.57205200 -249.03038025]
[290.18536377 -235.45797729]
[290.18316650 -228.01736450]
[283.52014160 -221.67034912]
[283.36215210 -214.23141479]
[276.56765747 -208.02534485]
[269.61822510 -194.73228455]
[262.66879272 -181.43923950]
[255.71934509 -168.14617920]
[248.76991272 -154.85313416]
[253.45520020 -140.76115417]
[246.59684753 -127.18111420]
[231.78411865 -122.36230469]
[224.83467102 -109.06925201]
[217.88523865 -95.77619171]
[218.84556580 -80.91258240]
[205.59516907 -72.26747894]
[205.28143311 -64.83348083]
[198.35845947 -58.77106094]
[191.13215637 -45.62646103]
[183.90585327 -32.48186111]
[176.67955017 -19.33726120]
[169.45324707 -6.19266176]
[162.22692871 6.95193863]
[155.00062561 20.09653854]
[147.77432251 33.24113846]
[140.54801941 46.38573837]
[133.32171631 59.53033829]
[126.09540558 72.67494202]
[118.86910248 85.81954193]
[111.64279938 98.96414185]
[108.37065125 113.60289001]
[109.31250763 128.57328796]
[110.25436401 143.54368591]
[124.04699707 150.30082703]
[132.59986877 163.05795288]
[133.61230469 178.38343811]
[126.81195831 192.15481567]
[114.02809906 200.66766357]
[98.69951630 201.63204956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 143]
[5 142]
[6 141]
[11 31]
[12 30]
[13 29]
[14 28]
[17 25]
[18 24]
[19 23]
[34 140]
[35 139]
[36 138]
[37 137]
[38 136]
[39 135]
[40 134]
[41 133]
[42 132]
[43 131]
[44 130]
[45 129]
[46 128]
[47 126]
[49 124]
[50 123]
[51 122]
[54 119]
[55 118]
[56 117]
[57 116]
[58 115]
[59 113]
[60 111]
[61 110]
[62 108]
[63 107]
[66 105]
[67 104]
[68 103]
[69 102]
[70 101]
[71 100]
[72 99]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
