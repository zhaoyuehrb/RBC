%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACCACUAUAAAAGUCAGGCGGGCUGAGGAGGAGACAAAGGCCAGGACGCUCCGCAGCUGUUGGGGAAGAGGAGCUGCCUCCUGGG\
) } def
/len { sequence length } bind def

/coor [
[80.03753662 111.22271729]
[65.27586365 113.88600922]
[53.06874466 123.95063782]
[39.16991043 118.59604645]
[30.14804268 131.29421997]
[15.13967133 133.78489685]
[3.08950233 125.10566711]
[-11.67216587 127.76896667]
[-15.76966190 141.27194214]
[-25.27689934 151.60910034]
[-38.26678467 156.77053833]
[-52.14309692 155.78688049]
[-64.15933990 148.91079712]
[-71.96234894 137.55548096]
[-86.80967712 139.69020081]
[-101.65699768 141.82492065]
[-116.50431824 143.95964050]
[-127.23094177 155.88940430]
[-143.23678589 154.79727173]
[-152.24351501 141.52104187]
[-147.34196472 126.24510193]
[-132.29216003 120.68784332]
[-118.63903809 129.11231995]
[-103.79171753 126.97760010]
[-88.94439697 124.84288025]
[-74.09707642 122.70815277]
[-68.53204346 107.64997864]
[-56.10257721 97.34345245]
[-40.09085083 94.63127899]
[-24.78606224 100.33454132]
[-14.33546352 113.00729370]
[0.42620447 110.34400177]
[8.68352795 98.00089264]
[23.61601830 95.08964539]
[36.50661469 103.83437347]
[47.65788269 93.96024323]
[62.61256790 99.12434387]
[77.37423706 96.46104431]
[81.96892548 85.88157654]
[91.13753510 78.88351440]
[102.55426788 77.24203491]
[113.32306671 81.37353516]
[120.71221924 90.22998810]
[135.62628174 88.62655640]
[150.54032898 87.02313232]
[165.45439148 85.41970825]
[180.36843872 83.81627655]
[195.28250122 82.21285248]
[203.70079041 78.10295105]
[210.75613403 80.82815552]
[214.66896057 77.91165161]
[218.89367676 76.67946625]
[222.80949402 77.00160217]
[225.91642761 78.54305267]
[227.89630127 80.82815552]
[242.85809326 81.89823914]
[257.81988525 82.96833038]
[272.78164673 84.03841400]
[287.74343872 85.10850525]
[302.70523071 86.17858887]
[317.02218628 79.44549561]
[329.16506958 88.07103729]
[344.12686157 89.14112854]
[354.87680054 77.78450012]
[370.41744995 76.04611206]
[383.41101074 84.74676514]
[387.72229004 99.77828979]
[381.31567383 114.04325867]
[367.21612549 120.80617523]
[352.08105469 116.87381744]
[343.05676270 104.10290527]
[328.09497070 103.03282166]
[314.84817505 109.84245300]
[301.63513184 101.14037323]
[286.67333984 100.07028961]
[271.71157837 99.00019836]
[256.74978638 97.93010712]
[241.78799438 96.86002350]
[226.82621765 95.78993225]
[211.82621765 95.78993225]
[196.88592529 97.12690735]
[181.97186279 98.73033142]
[167.05781555 100.33376312]
[152.14375305 101.93718719]
[137.22970581 103.54061127]
[122.31565094 105.14404297]
[111.83852386 119.60353851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[4 35]
[7 32]
[8 31]
[14 26]
[15 25]
[16 24]
[17 23]
[43 86]
[44 85]
[45 84]
[46 83]
[47 82]
[48 81]
[50 80]
[55 79]
[56 78]
[57 77]
[58 76]
[59 75]
[60 74]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
