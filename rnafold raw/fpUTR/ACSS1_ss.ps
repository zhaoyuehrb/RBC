%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCGCGGAGACUCCACGGGGCGCCCCGGGCGUGAGGCACCCACUCUGGGAGCACAGAGAGCUCAGGUAGCCUGCCUAG\
) } def
/len { sequence length } bind def

/coor [
[16.73316574 164.12701416]
[10.28412342 178.57417297]
[-4.54511213 179.96810913]
[-16.57695961 188.92547607]
[-28.60880852 197.88285828]
[-40.64065552 206.84024048]
[-47.08969879 221.28739929]
[-61.91893387 222.68133545]
[-73.95078278 231.63870239]
[-85.98262787 240.59608459]
[-95.07694244 254.90446472]
[-111.34370422 250.12652588]
[-111.25556946 233.17280579]
[-94.94001007 228.56423950]
[-82.90815735 219.60685730]
[-70.87631226 210.64947510]
[-65.28786469 196.84301758]
[-49.59803391 194.80839539]
[-37.56618881 185.85101318]
[-25.53433990 176.89363098]
[-13.50249100 167.93624878]
[-7.91404629 154.12979126]
[7.77578735 152.09516907]
[5.82887125 139.81744385]
[9.40809345 127.83633423]
[17.86905861 118.53013611]
[29.59190178 113.77468872]
[42.29115295 114.56542969]
[53.46126938 120.80981445]
[66.15106964 112.81175232]
[78.84086609 104.81368256]
[91.53066254 96.81561279]
[92.94605255 92.90952301]
[96.19752502 89.72599030]
[100.87886810 88.12393951]
[106.19130707 88.72621155]
[119.72382355 82.25542450]
[133.25633240 75.78462982]
[146.78884888 69.31384277]
[160.19332886 62.58185196]
[173.46475220 55.59119797]
[186.73619080 48.60054398]
[199.42597961 40.60247803]
[205.87503052 26.15531921]
[220.70425415 24.76138878]
[232.73611450 15.80400944]
[244.76795959 6.84663010]
[256.79980469 -2.11074853]
[268.83166504 -11.06812763]
[270.87393188 -26.73990631]
[283.45040894 -36.31107712]
[299.09973145 -34.10322952]
[308.53738403 -21.42624092]
[306.16421509 -5.80114651]
[293.38815308 3.50196409]
[277.78903198 0.96372044]
[265.75717163 9.92109966]
[253.72534180 18.87847900]
[241.69348145 27.83585739]
[229.66163635 36.79323578]
[224.07319641 50.59970474]
[208.38336182 52.63432693]
[207.96334839 55.66247559]
[206.15678406 58.67640686]
[202.97529602 61.07961655]
[198.67271423 62.29772568]
[193.72683716 61.87197113]
[180.45541382 68.86262512]
[167.18399048 75.85327911]
[162.61601257 81.91381836]
[153.25962830 82.84635162]
[139.72712708 89.31713867]
[126.19461060 95.78793335]
[112.66210175 102.25872040]
[99.52872467 109.50540924]
[86.83892822 117.50347900]
[74.14913177 125.50154877]
[61.45933533 133.49961853]
[60.93423462 151.40213013]
[50.02112198 165.40899658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[3 21]
[4 20]
[5 19]
[6 18]
[8 16]
[9 15]
[10 14]
[29 78]
[30 77]
[31 76]
[32 75]
[36 74]
[37 73]
[38 72]
[39 71]
[40 69]
[41 68]
[42 67]
[43 62]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
