%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUAAUGGCGCCCGCCCAGACUCCUGGAAGUGAGCGGCCUAGCGAGCGAGCUCCCAGGCGCAAAGCACGCCGGAAGCUGUAGUUCCGCCAUCGGACGGAAGCCGACCGGGGCGUGCGGAGGG\
) } def
/len { sequence length } bind def

/coor [
[118.01763916 294.43359375]
[117.63764191 279.43841553]
[117.25765228 264.44323730]
[116.87766266 249.44804382]
[105.17774963 242.88768005]
[98.21632385 231.29498291]
[97.91898346 217.66731262]
[104.47172546 205.59104919]
[116.24365234 198.29768372]
[116.24365234 183.29768372]
[116.24365234 168.29768372]
[116.24365234 153.29768372]
[116.24365234 138.29768372]
[116.24365234 123.29768372]
[103.69783020 126.06053162]
[92.21453094 122.95756531]
[84.18156433 115.52191162]
[70.55146790 121.78454590]
[56.92137909 128.04718018]
[43.29128647 134.30981445]
[34.25627899 147.99560547]
[17.90496445 146.74398804]
[11.05817318 131.84252930]
[20.75929642 118.62056732]
[37.02865219 120.67972565]
[50.65874481 114.41709137]
[64.28883362 108.15445709]
[77.91893005 101.89182281]
[84.19193268 81.62152100]
[106.14315033 74.40533447]
[126.27600098 89.21990967]
[125.89601135 74.22472382]
[125.51601410 59.22953796]
[122.13864136 50.61660767]
[125.32118988 43.85074997]
[125.32118988 28.85074997]
[125.32118988 13.85074997]
[125.32118988 -1.14925003]
[122.58344269 -5.86242723]
[122.06171417 -10.66570091]
[123.40030670 -14.67215919]
[125.93441010 -17.27741623]
[127.07340240 -32.23411179]
[128.21240234 -47.19080353]
[120.38575745 -57.53652191]
[121.71208191 -70.03665924]
[130.92678833 -77.98326111]
[132.44432068 -92.90629578]
[130.18214417 -101.87690735]
[134.19398499 -108.18647003]
[136.08906555 -123.06627655]
[137.98414612 -137.94609070]
[139.87922668 -152.82589722]
[133.94741821 -167.49301147]
[143.23066711 -179.14077759]
[145.12574768 -194.02058411]
[143.09155273 -203.04562378]
[147.26193237 -209.25152588]
[149.53335571 -224.07855225]
[151.80477905 -238.90557861]
[154.07618713 -253.73260498]
[143.62208557 -265.36212158]
[143.14076233 -280.99230957]
[152.85946655 -293.24304199]
[168.18934631 -296.32992554]
[181.89208984 -288.79541016]
[187.49768066 -274.19708252]
[182.35932922 -259.42779541]
[168.90321350 -251.46119690]
[166.63179016 -236.63417053]
[164.36038208 -221.80714417]
[162.08895874 -206.98011780]
[160.00555420 -192.12550354]
[158.11047363 -177.24569702]
[164.17782593 -163.64288330]
[154.75903320 -150.93081665]
[152.86395264 -136.05101013]
[150.96887207 -121.17120361]
[149.07379150 -106.29139709]
[147.36735535 -91.38877106]
[145.84982300 -76.46573639]
[153.91912842 -60.93699646]
[143.16909790 -46.05180740]
[142.03010559 -31.09511375]
[140.89109802 -16.13842010]
[140.32119751 -1.14925003]
[140.32119751 13.85074997]
[140.32119751 28.85074997]
[140.32119751 43.85074997]
[140.51119995 58.84954834]
[140.89118958 73.84473419]
[141.27117920 88.83992004]
[149.68356323 101.25892639]
[163.46794128 107.17427063]
[177.25230408 113.08960724]
[192.98532104 111.42153168]
[201.62989807 123.55085754]
[215.41427612 129.46620178]
[229.19863892 135.38153076]
[246.13853455 136.07145691]
[250.16500854 152.54032898]
[235.45439148 160.96849060]
[223.28329468 149.16589355]
[209.49893188 143.25056458]
[195.71456909 137.33522034]
[180.96748352 139.42640686]
[171.33695984 126.87397003]
[157.55259705 120.95863342]
[143.76823425 115.04329681]
[131.24365234 123.29768372]
[131.24365234 138.29768372]
[131.24365234 153.29768372]
[131.24365234 168.29768372]
[131.24365234 183.29768372]
[131.24365234 198.29768372]
[145.03045654 208.00204468]
[150.30444336 223.84133911]
[145.18945312 239.55876160]
[131.87284851 249.06805420]
[132.25283813 264.06323242]
[132.63282776 279.05844116]
[133.01281738 294.05361938]
[135.69081116 313.24938965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[4 119]
[9 115]
[10 114]
[11 113]
[12 112]
[13 111]
[14 110]
[17 28]
[18 27]
[19 26]
[20 25]
[31 92]
[32 91]
[33 90]
[35 89]
[36 88]
[37 87]
[38 86]
[42 85]
[43 84]
[44 83]
[47 81]
[48 80]
[50 79]
[51 78]
[52 77]
[53 76]
[55 74]
[56 73]
[58 72]
[59 71]
[60 70]
[61 69]
[93 109]
[94 108]
[95 107]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
