%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAGGACAGCAACAGUCAGGUGGUUUACCUUCCAGAGGCUGGCAAUGCUGUUUCACUGGAGGACACGGCUAAGAAGGAAGUCCACCAGCCUGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[75.63355255 122.44650269]
[71.58499146 117.03397369]
[68.71920013 110.91240692]
[67.15547180 104.33660889]
[66.95890045 97.58029938]
[52.63536453 93.12649536]
[38.31183243 88.67269135]
[23.98829842 84.21888733]
[9.66476440 79.76507568]
[-4.65876913 75.31127167]
[-18.98230171 70.85746765]
[-33.30583572 66.40366364]
[-53.67454910 72.64419556]
[-67.49388885 57.45647812]
[-82.17592621 54.38437653]
[-96.85796356 51.31227875]
[-111.54000092 48.24017715]
[-126.22203827 45.16807938]
[-136.66944885 53.84204102]
[-150.01528931 54.84067154]
[-161.30212402 48.02041626]
[-166.46879578 36.10025024]
[-181.04597473 32.56386566]
[-195.62313843 29.02748299]
[-207.35870361 39.17913437]
[-222.82278442 40.46045303]
[-236.06913757 32.37874222]
[-242.00424194 18.04158592]
[-238.34596252 2.96191192]
[-226.50094604 -7.06183577]
[-211.02388000 -8.17532158]
[-197.86598206 0.04961125]
[-192.08676147 14.45030880]
[-177.50958252 17.98669243]
[-162.93240356 21.52307701]
[-149.05900574 12.16557693]
[-132.36369324 15.72007561]
[-123.14994049 30.48604202]
[-108.46790314 33.55813980]
[-93.78586578 36.63024139]
[-79.10382843 39.70234299]
[-64.42179108 42.77444077]
[-57.63055038 36.56917572]
[-48.58288193 34.25601196]
[-39.37580490 36.50644684]
[-32.20736694 42.91822052]
[-28.85202980 52.08012772]
[-14.52849674 56.53393173]
[-0.20496334 60.98773956]
[14.11857033 65.44154358]
[28.44210434 69.89534760]
[42.76563644 74.34915924]
[57.08917236 78.80296326]
[71.41270447 83.25676727]
[91.06931305 68.09683228]
[115.73986053 70.84822083]
[131.57360840 89.96623230]
[146.52642822 88.77748871]
[161.47924805 87.58873749]
[176.43206787 86.39998627]
[189.57566833 77.59336090]
[202.87608337 84.29768372]
[217.82890320 83.10894012]
[232.78172302 81.92018890]
[247.73454285 80.73143768]
[254.09635925 68.38683319]
[265.66186523 60.89753723]
[279.31143188 60.15477371]
[291.42678833 66.24707031]
[298.85021973 77.46540833]
[313.83322144 76.75167847]
[327.32901001 67.43526459]
[342.02716064 74.70826721]
[342.80746460 91.08883667]
[328.86721802 99.72605133]
[314.54693604 91.73468781]
[299.56393433 92.44841766]
[291.07992554 106.40267181]
[275.82278442 112.67456055]
[259.65725708 108.64174652]
[248.92329407 95.68425751]
[233.97047424 96.87300873]
[219.01765442 98.06175995]
[204.06483459 99.25051117]
[191.99076843 107.97210693]
[177.62081909 101.35280609]
[162.66799927 102.54155731]
[147.71517944 103.73030853]
[132.76235962 104.91905975]
[131.08213806 111.46605682]
[128.10810852 117.53578186]
[123.96408844 122.87557220]
[118.82255554 127.26317596]
[112.89753723 130.51594543]
[106.43565369 132.49848938]
[99.70589447 133.12828064]
[92.98837280 132.37910461]
[86.56270599 130.28215027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 54]
[6 53]
[7 52]
[8 51]
[9 50]
[10 49]
[11 48]
[12 47]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[22 35]
[23 34]
[24 33]
[57 89]
[58 88]
[59 87]
[60 86]
[62 84]
[63 83]
[64 82]
[65 81]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
