%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGUCCGGUCUGCCUGGUCUCUCUAACCGCGCCAGUGUGCCUCCGACUCGGAACGGCUUCCGCGGCCGGGGCAGCGAGGGCCGGGGGCGGCGGGCGGG\
) } def
/len { sequence length } bind def

/coor [
[77.85581207 439.43106079]
[62.11763763 437.98693848]
[52.07458496 425.78396606]
[53.68501282 410.06195068]
[65.99349213 400.14846802]
[67.36411285 385.21121216]
[68.73474121 370.27395630]
[70.10536957 355.33673096]
[71.47599030 340.39947510]
[72.84661865 325.46221924]
[74.21724701 310.52496338]
[67.67527008 297.14395142]
[76.64118958 284.10852051]
[70.09921265 270.72747803]
[79.06513977 257.69204712]
[72.52316284 244.31101990]
[81.48908234 231.27557373]
[82.85971069 216.33831787]
[84.23033905 201.40107727]
[85.60095978 186.46382141]
[86.97158813 171.52658081]
[88.34221649 156.58932495]
[89.71284485 141.65208435]
[90.85551453 126.69567108]
[91.76997375 111.72357178]
[85.70269775 99.12675476]
[93.25792694 87.36196899]
[94.17238617 72.38986969]
[83.97681427 60.61327744]
[85.11749268 45.44246674]
[96.40750122 35.79512405]
[97.32196045 20.82302475]
[87.12638855 9.04643345]
[88.26706696 -6.12437773]
[99.55708313 -15.77171993]
[100.47154236 -30.74381828]
[101.38600159 -45.71591949]
[98.75321960 -54.64534378]
[102.56352997 -61.12849808]
[103.93415070 -76.06575012]
[105.30477905 -91.00299835]
[95.94702911 -108.72866821]
[107.38298035 -124.19437408]
[107.84042358 -139.18739319]
[108.29786682 -154.18041992]
[108.29786682 -169.18041992]
[107.84042358 -184.17344666]
[107.38298035 -199.16647339]
[106.92553711 -214.15948486]
[100.39897919 -229.80686951]
[113.62811279 -240.40998840]
[127.47905731 -230.63308716]
[121.91856384 -214.61692810]
[122.37599945 -199.62391663]
[122.83344269 -184.63088989]
[123.29088593 -169.63786316]
[126.22169495 -165.67042542]
[126.57269287 -159.78092957]
[123.29088593 -153.72297668]
[122.83344269 -138.72994995]
[122.37599945 -123.73693085]
[130.15472412 -116.79430389]
[132.79281616 -106.47821808]
[129.15371704 -96.23568726]
[120.24202728 -89.63237000]
[118.87139893 -74.69512177]
[117.50077820 -59.75787354]
[116.35810089 -44.80146027]
[115.44364166 -29.82935905]
[114.52918243 -14.85725975]
[124.56118011 -3.90762138]
[123.84706879 11.28924370]
[112.29405975 21.73748589]
[111.37960052 36.70958328]
[121.41159821 47.65922165]
[120.69749451 62.85608673]
[109.14448547 73.30432892]
[108.23002625 88.27642822]
[114.29730225 100.87324524]
[106.74207306 112.63803101]
[105.82761383 127.61013031]
[108.46039581 136.53955078]
[104.65009308 143.02270508]
[103.27946472 157.95996094]
[101.90883636 172.89720154]
[100.53820801 187.83445740]
[99.16758728 202.77169800]
[97.79695892 217.70895386]
[96.42633057 232.64619446]
[102.87027740 247.09564209]
[94.00238800 259.06265259]
[100.44632721 273.51211548]
[91.57843781 285.47912598]
[98.02237701 299.92855835]
[89.15449524 311.89559937]
[87.78386688 326.83285522]
[86.41323853 341.77011108]
[85.04261780 356.70733643]
[83.67198944 371.64459229]
[82.30136108 386.58184814]
[80.93074036 401.51910400]
[91.22956848 413.50698853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 101]
[6 100]
[7 99]
[8 98]
[9 97]
[10 96]
[11 95]
[13 93]
[15 91]
[17 89]
[18 88]
[19 87]
[20 86]
[21 85]
[22 84]
[23 83]
[24 81]
[25 80]
[27 78]
[28 77]
[31 74]
[32 73]
[35 70]
[36 69]
[37 68]
[39 67]
[40 66]
[41 65]
[43 61]
[44 60]
[45 59]
[46 56]
[47 55]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
