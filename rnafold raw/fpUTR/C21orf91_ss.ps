%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCCUCUGCUGCGGCCGGAAACAAUAGUGGAGGAACCCGAGCCGCACGGAACGGCGGUGGUGGCCCGCGGAGCCGGACGGGGCACU\
) } def
/len { sequence length } bind def

/coor [
[115.57460785 123.53108978]
[104.26890564 113.67303467]
[90.58625031 110.79614258]
[85.87303925 97.63265991]
[74.56733704 87.77460480]
[63.26164627 77.91654968]
[51.95595169 68.05849457]
[40.65025330 58.20044327]
[29.34455872 48.34238815]
[17.70888901 38.87606812]
[5.75681305 29.81252289]
[-6.19526339 20.74897575]
[-18.14734077 11.68543053]
[-27.07593727 8.90840530]
[-30.34570503 2.10274005]
[-41.98137665 -7.36357927]
[-53.61704636 -16.82989883]
[-65.25271606 -26.29621696]
[-76.88838196 -35.76253510]
[-88.52405548 -45.22885513]
[-100.31964874 -54.49514008]
[-112.27172089 -63.55868530]
[-124.22380066 -72.62223053]
[-136.63174438 -63.96787262]
[-151.10734558 -59.57329559]
[-166.23242188 -59.86903381]
[-180.52516174 -64.82611847]
[-192.58531189 -73.95890808]
[-201.23135376 -86.37265015]
[-205.61624146 -100.85118866]
[-205.31036377 -115.97605896]
[-200.34370422 -130.26547241]
[-191.20283508 -142.31951904]
[-178.78329468 -150.95722961]
[-164.30181885 -155.33241272]
[-149.17716980 -155.01640320]
[-134.89108276 -150.04016113]
[-122.84317017 -140.89122009]
[-114.21376801 -128.46589661]
[-109.84829712 -113.98149872]
[-110.17444611 -98.85705566]
[-115.16025543 -84.57431030]
[-103.20817566 -75.51076508]
[-91.25609589 -66.44721222]
[-83.86977386 -64.88175201]
[-79.05773163 -56.86452484]
[-67.42206573 -47.39820480]
[-55.78639603 -37.93188858]
[-44.15072632 -28.46556854]
[-32.51505661 -18.99924850]
[-20.87938690 -9.53292942]
[-9.08379459 -0.26664627]
[2.86828232 8.79689980]
[14.82035923 17.86044502]
[26.77243614 26.92399216]
[31.73798370 27.12735558]
[36.57313919 30.59719849]
[39.20261383 37.03669357]
[50.50830841 46.89474869]
[61.81400681 56.75280380]
[73.11969757 66.61085510]
[84.42539215 76.46891022]
[95.73109436 86.32696533]
[109.41374969 89.20385742]
[114.12696075 102.36734009]
[125.43266296 112.22539520]
[146.57272339 114.69502258]
[153.17581177 134.12091064]
[165.43035889 142.77111816]
[177.68490601 151.42132568]
[189.93945312 160.07151794]
[198.95765686 162.54209900]
[202.45787048 169.23216248]
[214.40994263 178.29571533]
[229.22315979 173.67529297]
[243.91230774 178.67616272]
[252.82910156 191.37538147]
[252.54486084 206.88986206]
[243.16888428 219.25393677]
[228.30641174 223.71339417]
[213.67237854 218.55346680]
[204.89387512 205.75825500]
[205.34640503 190.24778748]
[193.39433289 181.18423462]
[181.28924561 172.32608032]
[169.03469849 163.67587280]
[156.78015137 155.02566528]
[144.52560425 146.37545776]
[135.78396606 149.38531494]
[126.51905823 147.88883972]
[118.94734955 142.11053467]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[4 63]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[10 55]
[11 54]
[12 53]
[13 52]
[15 51]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[21 44]
[22 43]
[23 42]
[68 88]
[69 87]
[70 86]
[71 85]
[73 84]
[74 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
