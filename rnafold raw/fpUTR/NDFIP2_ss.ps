%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACCUAGACAGCUCCCCCGGACUUGCCUUACUUUUCCAUCUCCUCCCACCCAGCUAUACCCUCCCACUGGCGGCGCGG\
) } def
/len { sequence length } bind def

/coor [
[139.66683960 142.81811523]
[125.30023193 152.59988403]
[108.69026184 157.71766663]
[91.30973816 157.71766663]
[74.69976807 152.59988403]
[60.33315277 142.81811523]
[49.48376846 129.23968506]
[43.11361694 113.06860352]
[28.18407440 114.52076721]
[15.19777966 123.55773163]
[1.78123546 117.08891296]
[-13.14830685 118.54107666]
[-28.07784843 119.99324036]
[-41.06414413 129.03019714]
[-54.48068619 122.56138611]
[-69.41023254 124.01354980]
[-84.33977509 125.46571350]
[-99.51914978 133.01704407]
[-110.97745514 120.52130127]
[-102.14202118 106.05162811]
[-85.79193115 110.53617096]
[-70.86239624 109.08400726]
[-55.93284988 107.63184357]
[-44.01441574 98.69874573]
[-29.53001213 105.06369781]
[-14.60046959 103.61153412]
[0.32907236 102.15937042]
[12.24750710 93.22628021]
[26.73191261 99.59122467]
[41.66145325 98.13906097]
[43.47140503 85.46153259]
[48.00247574 73.48384094]
[55.03655243 62.78256226]
[64.23503876 53.87282181]
[75.15514374 47.18350220]
[87.27120972 43.03661728]
[100.00000000 41.63177872]
[112.72879028 43.03661728]
[124.84485626 47.18350220]
[135.76495361 53.87282181]
[144.96343994 62.78256226]
[151.99752808 73.48384094]
[156.52859497 85.46153259]
[158.33854675 98.13906097]
[173.26808167 99.59122467]
[187.75248718 93.22628021]
[199.67092896 102.15937042]
[214.62582397 103.32176208]
[229.60044861 104.19393158]
[239.89265442 96.14102173]
[252.50024414 97.33361053]
[260.56698608 106.56528473]
[275.49652100 108.01744843]
[290.42605591 109.46961212]
[305.35559082 110.92177582]
[312.83078003 97.65371704]
[325.06018066 88.57838440]
[339.92498779 85.26813507]
[354.84976196 88.29650116]
[367.24871826 97.13877869]
[374.97363281 110.26300812]
[376.68615723 125.39533234]
[372.08956909 139.91398621]
[361.98022461 151.30351257]
[348.10968018 157.59062195]
[332.88107300 157.68603516]
[318.93283081 151.57321167]
[308.68157959 140.31123352]
[303.90344238 125.85131836]
[288.97390747 124.39915466]
[274.04434204 122.94699097]
[259.11480713 121.49482727]
[243.71020508 129.66308594]
[228.72827148 119.16855621]
[213.75364685 118.29637909]
[206.71122742 121.12494659]
[198.21876526 117.08891296]
[184.80221558 123.55773163]
[171.81591797 114.52076721]
[156.88638306 113.06860352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 30]
[9 29]
[11 27]
[12 26]
[13 25]
[15 23]
[16 22]
[17 21]
[44 80]
[45 79]
[47 77]
[48 75]
[49 74]
[52 72]
[53 71]
[54 70]
[55 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
