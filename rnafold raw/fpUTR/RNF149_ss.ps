%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCAGCGGCCCCGACCCCGCCUCAGUCUUCCAGGGCGGCGGUGGGUGUCCGCUUCUCUCUGCUCUUCGACUGCACCGCACUCGCGCGUGACCCUGACUCCCCCUAGUCAGCUCAGCGGUGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[86.18865204 231.18959045]
[70.42652893 230.03594971]
[60.16014099 218.02026367]
[61.48036194 202.27120972]
[73.60392761 192.13243103]
[74.69885254 177.17245483]
[75.79378510 162.21246338]
[76.88871765 147.25248718]
[77.98364258 132.29249573]
[67.44181824 121.62151337]
[52.46960831 122.53420258]
[37.49740219 123.44689178]
[22.53741646 124.54182434]
[7.59187412 125.81883240]
[-7.35366869 127.09584045]
[-15.73848438 130.97917175]
[-22.67797089 128.21743774]
[-37.65017700 129.13012695]
[-52.62238693 130.04281616]
[-67.58236694 131.13774109]
[-82.52791595 132.41474915]
[-97.47345734 133.69175720]
[-112.41899872 134.96876526]
[-127.36454010 136.24577332]
[-142.31008911 137.52278137]
[-152.47529602 149.32559204]
[-167.65039062 150.40774536]
[-178.83992004 140.64404297]
[-191.97560120 150.46166992]
[-206.93701172 143.74688721]
[-208.33312988 127.40727997]
[-194.72775269 118.25163269]
[-180.11692810 125.69849396]
[-170.74600220 114.17801666]
[-155.60729980 112.67004395]
[-143.58709717 122.57723999]
[-128.64155579 121.30023193]
[-113.69600677 120.02322388]
[-98.75046539 118.74621582]
[-83.80492401 117.46920776]
[-68.85937500 116.19219971]
[-62.39595413 112.44949341]
[-53.53507614 115.07060242]
[-38.56287003 114.15791321]
[-23.59066010 113.24522400]
[-8.63067627 112.15029907]
[6.31486654 110.87329102]
[21.26040840 109.59628296]
[27.72383118 105.85356903]
[36.58471298 108.47468567]
[51.55691910 107.56199646]
[66.52912903 106.64930725]
[66.77709961 78.98008728]
[89.14222717 56.84160995]
[85.52521515 42.28423309]
[71.09275055 36.58479691]
[62.79511642 23.47262955]
[63.82292175 7.98963070]
[73.78095245 -3.91067147]
[88.84014893 -7.65236807]
[103.20993805 -1.79670072]
[111.36483765 11.40470695]
[110.16913605 26.87564468]
[100.08258820 38.66722107]
[103.69960022 53.22459793]
[111.03948975 54.76606369]
[114.12266541 40.08634949]
[128.80232239 43.16977310]
[125.71925354 57.84899902]
[133.05912781 59.39046478]
[142.22674561 47.51802063]
[151.39434814 35.64557266]
[153.70460510 19.99394989]
[167.60722351 14.64919281]
[176.77482605 2.77674532]
[185.94242859 -9.09570217]
[190.83723450 -25.32768250]
[207.78988647 -25.11763000]
[212.28100586 -8.76935005]
[197.81488037 0.07190380]
[188.64727783 11.94435120]
[179.47967529 23.81679916]
[177.82513428 38.61922455]
[163.26679993 44.81317902]
[154.09918213 56.68562317]
[144.93157959 68.55807495]
[149.25306702 82.92208099]
[163.44966125 87.76528931]
[177.64625549 92.60848999]
[186.88488770 92.42630005]
[192.12710571 97.74635315]
[206.20155334 102.93382263]
[220.27600098 108.12129211]
[232.36120605 103.42485809]
[244.01742554 108.11241150]
[249.14613342 119.13931274]
[263.09008789 124.66797638]
[277.03402710 130.19664001]
[290.97799683 135.72529602]
[304.92196655 141.25395203]
[318.86590576 146.78262329]
[333.27218628 140.28376770]
[348.02456665 145.95321655]
[354.37072754 160.42738342]
[348.54562378 175.11900330]
[334.00518799 181.31179810]
[319.37597656 175.33169556]
[313.33724976 160.72657776]
[299.39328003 155.19790649]
[285.44934082 149.66925049]
[271.50537109 144.14059448]
[257.56143188 138.61192322]
[243.61746216 133.08326721]
[226.47146606 136.60910034]
[215.08853149 122.19574738]
[201.01408386 117.00827026]
[186.93962097 111.82080078]
[172.80305481 106.80509186]
[158.60646057 101.96188354]
[144.40986633 97.11867523]
[134.99443054 121.44725037]
[114.85522461 134.52401733]
[92.94362640 133.38742065]
[91.84870148 148.34741211]
[90.75376892 163.30738831]
[89.65883636 178.26737976]
[88.56391144 193.22737122]
[99.08206177 205.02330017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 127]
[6 126]
[7 125]
[8 124]
[9 123]
[10 52]
[11 51]
[12 50]
[13 48]
[14 47]
[15 46]
[17 45]
[18 44]
[19 43]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[28 33]
[54 65]
[55 64]
[70 86]
[71 85]
[72 84]
[74 82]
[75 81]
[76 80]
[87 120]
[88 119]
[89 118]
[91 117]
[92 116]
[93 115]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
