%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGAUGGGAAGGCGGGCGCAGUCGACCCAAGGGUGGAGAAGAGGGAAGGCGAAGGACGCGCGUUCCCGGGCUCGUGACCGCCAGCGGCCCGGGGAACCCGCUCCCAGACAGACUCGGAGAG\
) } def
/len { sequence length } bind def

/coor [
[299.23480225 281.11431885]
[288.29504395 270.85168457]
[277.35525513 260.58908081]
[260.63946533 261.87423706]
[247.87773132 250.49031067]
[247.22766113 233.06488037]
[236.02935791 223.08499146]
[224.83106995 213.10511780]
[209.67434692 218.55065918]
[193.74185181 215.62564087]
[181.36575317 205.02989197]
[175.95915222 189.56181335]
[179.07504272 173.37983704]
[167.62551880 163.68919373]
[156.17599487 153.99855042]
[144.72648621 144.30792236]
[133.27696228 134.61727905]
[121.82744598 124.92663574]
[107.11407471 122.61016083]
[101.57901001 107.78877258]
[97.41293335 118.31942749]
[86.56738281 125.76371002]
[71.01523590 126.99574280]
[56.01646042 127.18730164]
[42.31622314 135.10020447]
[29.49118042 127.52606201]
[14.49240303 127.71762085]
[-0.50637347 127.90917206]
[-14.31840229 136.74998474]
[-28.75437355 128.96957397]
[-28.96379662 112.57176208]
[-14.73123550 104.42521667]
[-0.69792879 112.91040039]
[14.30084801 112.71884155]
[29.29962540 112.52729034]
[41.92705154 104.62808990]
[55.82490540 112.18852234]
[70.82368469 111.99697113]
[75.29383087 105.97469330]
[61.07609177 101.19391632]
[61.22938538 86.19469452]
[75.54187012 81.70549774]
[84.23413086 93.93014526]
[88.70427704 87.90787506]
[84.54517365 73.49600983]
[80.38606262 59.08414841]
[76.22695923 44.67228317]
[72.06784821 30.26041794]
[60.80749893 19.14668846]
[64.71248627 4.77308989]
[60.55338287 -9.63877487]
[56.39427567 -24.05063820]
[42.02547073 -30.22084427]
[35.03065491 -44.20678711]
[38.71257019 -59.40473175]
[51.33272552 -68.63867188]
[66.93226624 -67.54862976]
[78.14557648 -56.64928055]
[79.67806244 -41.08697128]
[70.80613708 -28.20974541]
[74.96524811 -13.79788113]
[79.12435150 0.61398363]
[90.08721924 10.69688129]
[86.47971344 26.10131264]
[90.63882446 40.51317596]
[94.79792786 54.92504120]
[98.95703125 69.33690643]
[103.11614227 83.74877167]
[111.26965332 96.33924866]
[126.80197144 99.34886169]
[131.51808167 113.47711182]
[142.96760559 123.16775513]
[154.41712952 132.85839844]
[165.86663818 142.54904175]
[177.31616211 152.23968506]
[188.76567078 161.93031311]
[201.72940063 156.51048279]
[215.69570923 157.22698975]
[227.92010498 163.88153076]
[236.02522278 175.11459351]
[238.46321106 188.68280029]
[234.81094360 201.90681458]
[246.00924683 211.88670349]
[257.20755005 221.86659241]
[270.54672241 219.55158997]
[282.59185791 225.29246521]
[289.00375366 236.77099609]
[287.61788940 249.64930725]
[298.55764771 259.91192627]
[309.49743652 270.17453003]
[322.85382080 277.00146484]
[337.57943726 279.85733032]
[352.30505371 282.71319580]
[367.03070068 285.56906128]
[383.73126221 282.64895630]
[391.16043091 297.88848877]
[378.57305908 309.24606323]
[364.17483521 300.29467773]
[349.44918823 297.43881226]
[334.72357178 294.58294678]
[319.99795532 291.72708130]
[311.84445190 304.31756592]
[320.47421265 316.58651733]
[329.10400391 328.85543823]
[337.73376465 341.12438965]
[352.00183105 347.96054077]
[352.99551392 362.82196045]
[361.62530518 375.09091187]
[377.12023926 379.24859619]
[383.39822388 394.01229858]
[375.64331055 408.05654907]
[359.80441284 410.60778809]
[348.03176880 399.70895386]
[349.35635376 383.72067261]
[340.72656250 371.45175171]
[327.07577515 365.49313354]
[325.46484375 349.75418091]
[316.83505249 337.48522949]
[308.20526123 325.21627808]
[299.57550049 312.94735718]
[294.56997681 304.08874512]
[293.21817017 295.01071167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[6 84]
[7 83]
[8 82]
[13 76]
[14 75]
[15 74]
[16 73]
[17 72]
[18 71]
[20 69]
[23 38]
[24 37]
[26 35]
[27 34]
[28 33]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[50 62]
[51 61]
[52 60]
[91 101]
[92 100]
[93 99]
[94 98]
[102 120]
[103 119]
[104 118]
[105 117]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
