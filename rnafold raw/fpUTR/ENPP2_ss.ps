%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGACUAAACCCAGAGCCUCAAAGCAGUGCACUCCGUGAAGGCAAAGAGAACACGCUGCAAAAGGCUUUCCAAGAAUCCUCGAC\
) } def
/len { sequence length } bind def

/coor [
[87.28946686 488.12414551]
[73.18693542 482.87011719]
[60.38055038 474.96551514]
[49.36255646 464.71417236]
[40.55645370 452.51010132]
[34.30072784 438.82244873]
[30.83583069 424.17727661]
[30.29494286 409.13754272]
[32.69885635 394.28134155]
[37.95516968 380.17965698]
[45.86184311 367.37454224]
[56.11497116 356.35821533]
[68.32044220 347.55407715]
[82.00911713 341.30056763]
[96.65483856 337.83804321]
[96.11330414 322.84780884]
[95.57176971 307.85760498]
[95.03023529 292.86737061]
[94.48869324 277.87716675]
[93.94715881 262.88693237]
[93.40562439 247.89671326]
[81.58556366 241.41984558]
[74.50307465 229.82449341]
[74.13155365 216.13323975]
[80.67816162 203.97889709]
[92.50000000 196.64048767]
[92.50000000 181.64048767]
[92.50000000 166.64048767]
[92.50000000 151.64048767]
[92.50000000 136.64048767]
[92.50000000 121.64048767]
[79.24386597 109.68212891]
[78.59932709 91.84082794]
[90.95802307 78.95710754]
[89.87565613 63.99620819]
[88.79328918 49.03530884]
[77.12379456 38.71733093]
[76.23924255 23.52943420]
[86.14777374 12.46794128]
[85.06540680 -2.49295688]
[75.41957855 -15.75531101]
[82.32853699 -30.62804985]
[98.68492889 -31.81137466]
[107.66271210 -18.08798409]
[100.02630615 -3.57532334]
[101.10867310 11.38557529]
[112.50620270 20.90565300]
[113.81700134 36.06271362]
[103.75418854 47.95294189]
[104.83655548 62.91384125]
[105.91892242 77.87474060]
[115.95550537 83.56885529]
[121.94190216 93.43389893]
[122.35849762 104.96570587]
[117.09954834 115.23699951]
[107.50000000 121.64048767]
[107.50000000 136.64048767]
[107.50000000 151.64048767]
[107.50000000 166.64048767]
[107.50000000 181.64048767]
[107.50000000 196.64048767]
[121.25399017 206.29254150]
[126.57375336 222.05726624]
[121.57987976 237.75547791]
[108.39584351 247.35517883]
[108.93737793 262.34539795]
[109.47891998 277.33563232]
[110.02045441 292.32583618]
[110.56198883 307.31607056]
[111.10352325 322.30627441]
[111.64506531 337.29650879]
[126.50244904 339.69320679]
[140.60668945 344.94265747]
[153.41563416 352.84313965]
[164.43693542 363.09091187]
[173.24699402 375.29211426]
[179.50715637 388.97772217]
[182.97679138 403.62176514]
[183.52253723 418.66134644]
[181.12344360 433.51834106]
[175.87168884 447.62170410]
[167.96916199 460.42938232]
[157.71960449 471.44903564]
[145.51698303 480.25711060]
[131.83032227 486.51504517]
[117.18572998 489.98233032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 71]
[16 70]
[17 69]
[18 68]
[19 67]
[20 66]
[21 65]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[34 51]
[35 50]
[36 49]
[39 46]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
