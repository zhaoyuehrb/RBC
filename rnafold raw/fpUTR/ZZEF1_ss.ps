%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAGGUCGAGGCGGGGAGGCGGCGGCGGCGGCUGCAGAGCCAGGCGCCCAAGACGGAGACCCC\
) } def
/len { sequence length } bind def

/coor [
[75.01627350 186.55117798]
[65.37355042 175.06126404]
[64.97135925 160.06666565]
[73.98429871 148.07637024]
[88.49992371 144.29528809]
[102.21785736 150.36541748]
[99.33596039 135.64486694]
[96.45405579 120.92430878]
[82.63704681 112.20361328]
[79.11136627 96.24961853]
[87.96675110 82.51853943]
[84.37701416 67.95441437]
[80.78727722 53.39028931]
[77.19754791 38.82616043]
[63.89628220 34.49397278]
[54.61751556 24.17188263]
[51.76715851 10.70005703]
[56.00221634 -2.28749418]
[66.08332825 -11.34314537]
[63.20143127 -26.06369781]
[60.31953049 -40.78424835]
[46.31731796 -54.93251419]
[52.45385742 -73.03096008]
[48.16466904 -87.40464783]
[43.87548447 -101.77833557]
[39.58629990 -116.15202332]
[35.29711533 -130.52571106]
[23.01370621 -141.39079285]
[26.54614449 -157.40496826]
[42.26055908 -162.09423828]
[53.99130630 -150.63467407]
[49.67080307 -134.81489563]
[53.95998764 -120.44120789]
[58.24917221 -106.06752014]
[62.53835678 -91.69383240]
[66.82754517 -77.32015228]
[76.60090637 -73.05557251]
[82.36054993 -63.81637573]
[81.86689758 -52.71572876]
[75.04007721 -43.66614914]
[77.92198181 -28.94559860]
[80.80387878 -14.22504616]
[95.77896881 -7.92584515]
[104.24588013 6.13102150]
[102.78347778 22.64011574]
[91.76167297 35.23642731]
[95.35140991 49.80055237]
[98.94113922 64.36467743]
[102.53087616 78.92881012]
[114.25396729 84.27661133]
[120.72265625 95.42048645]
[119.55241394 108.25249481]
[111.17461395 118.04241180]
[114.05651093 132.76295471]
[116.93841553 147.48352051]
[122.25748444 161.50875854]
[129.86187744 174.43830872]
[144.38853455 182.04804993]
[144.79119873 198.44224548]
[130.65562439 206.75596619]
[116.52330017 198.43675232]
[116.93233490 182.04269409]
[109.32794189 169.11315918]
[103.08584595 182.75267029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 55]
[7 54]
[8 53]
[11 49]
[12 48]
[13 47]
[14 46]
[19 42]
[20 41]
[21 40]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
