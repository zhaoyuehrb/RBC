%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGGGAUCUGUCAGCCGCUCCCUCUGGGCUUCCGUCCUCCGCCCGCGCCCGACGGAGCCUGUUCGCGUCGACUGCCCAGAGUCCGCGAAUCCUCCGCUCCGAGCCCGUCCGGACUCCCCCGAUCCCAGCUUUCUCUCCUUUGAAAACACUAAGAAUA\
) } def
/len { sequence length } bind def

/coor [
[57.68301392 216.17999268]
[67.05250549 204.46621704]
[79.39864349 195.94725037]
[93.67517853 191.34501648]
[108.67227173 191.04954529]
[123.11901093 195.08586121]
[135.79408264 203.11445618]
[128.80343628 189.84303284]
[121.81278229 176.57159424]
[114.82212830 163.30017090]
[107.83147430 150.02874756]
[100.84082031 136.75732422]
[85.51903534 121.53163147]
[85.86074066 105.38356018]
[71.14190674 108.27424622]
[56.42308044 111.16493225]
[44.37265778 121.41665649]
[30.39288330 116.27709198]
[18.34246254 126.52882385]
[4.36268759 121.38925934]
[-10.35614204 124.27993774]
[-25.07497215 127.17062378]
[-27.46815681 142.12046814]
[-34.81797028 155.32472229]
[-46.22047043 165.19909668]
[-60.28681183 170.56640625]
[-75.31240082 170.79689026]
[-89.48345184 165.88203430]
[-101.09592438 156.43324280]
[-108.76045990 143.60591125]
[-123.47928619 146.49659729]
[-138.19812012 149.38728333]
[-152.91694641 152.27796936]
[-164.91015625 163.46255493]
[-180.51165771 158.41033936]
[-183.67196655 142.31858826]
[-171.14002991 131.74111938]
[-155.80763245 137.55914307]
[-141.08880615 134.66845703]
[-126.36997223 131.77777100]
[-111.65113831 128.88708496]
[-109.40719604 114.11380005]
[-102.23077393 100.97499847]
[-90.97109985 91.06570435]
[-76.97438049 85.59638977]
[-61.92291260 85.24514771]
[-47.63285828 90.07366943]
[-35.83511734 99.51746368]
[-27.96565628 112.45179749]
[-13.24682617 109.56111145]
[1.47200358 106.67042542]
[12.46963406 96.62545776]
[27.50219917 101.55826569]
[38.49982834 91.51329803]
[53.53239441 96.44609833]
[68.25122070 93.55541992]
[82.97005463 90.66473389]
[92.50000000 79.08111572]
[92.50000000 64.08111572]
[92.50000000 49.08111954]
[92.50000000 34.08111954]
[92.50000000 19.08111763]
[77.55815125 5.71792316]
[77.18674469 -14.02116013]
[91.17893982 -27.51587868]
[90.30676270 -42.49050140]
[89.43459320 -57.46512222]
[88.56241608 -72.43974304]
[87.69024658 -87.41436768]
[86.81807709 -102.38899231]
[85.94589996 -117.36360931]
[82.59782410 -123.15683746]
[82.70025635 -128.90103149]
[85.34171295 -132.93363953]
[85.05084229 -147.93081665]
[84.75997162 -162.92799377]
[84.46910095 -177.92517090]
[72.90686035 -188.69967651]
[72.43334961 -204.49687195]
[83.32949829 -215.94456482]
[99.13081360 -216.25102234]
[110.46266174 -205.23445129]
[110.60205078 -189.43078613]
[99.46628571 -178.21604919]
[99.75715637 -163.21885681]
[100.04802704 -148.22167969]
[100.33889008 -133.22450256]
[100.92052460 -118.23578644]
[101.79269409 -103.26116180]
[102.66487122 -88.28653717]
[103.53704071 -73.31192017]
[104.40921021 -58.33729553]
[105.28138733 -43.36267471]
[106.15355682 -28.38805008]
[115.44951630 -23.83875275]
[122.04963684 -15.76204395]
[124.69686890 -5.58934069]
[122.84259033 4.83963251]
[116.75867462 13.60952663]
[107.50000000 19.08111763]
[107.50000000 34.08111954]
[107.50000000 49.08111954]
[107.50000000 64.08111572]
[107.50000000 79.08111572]
[119.78727722 87.68476105]
[133.88267517 82.55445862]
[147.97805786 77.42416382]
[158.29966736 65.43354034]
[172.90570068 68.35124207]
[187.00109863 63.22093964]
[197.12202454 50.31750107]
[213.31681824 52.89832306]
[218.92565918 68.30847931]
[208.17864990 80.69532013]
[192.13139343 77.31632996]
[178.03601074 82.44663239]
[168.72259521 94.07029724]
[153.10836792 91.51954651]
[139.01296997 96.64984894]
[124.91757965 101.78015137]
[122.21624756 108.77677917]
[136.20941162 114.17967987]
[130.80628967 128.17276001]
[116.81358337 122.77003479]
[114.11225128 129.76666260]
[121.10290527 143.03808594]
[128.09355164 156.30952454]
[135.08421326 169.58094788]
[142.07485962 182.85237122]
[149.06552124 196.12379456]
[154.14042664 198.32220459]
[157.75535583 201.92068481]
[159.61721802 206.20669556]
[159.73341370 210.45327759]
[170.44236755 220.95654297]
[181.15130615 231.45979309]
[191.86026001 241.96305847]
[207.13909912 239.25447083]
[221.07725525 246.07409668]
[228.31521606 259.79968262]
[226.06983948 275.15344238]
[215.20451355 286.23153687]
[199.89717102 288.77423096]
[186.03382874 281.80380249]
[178.94519043 268.00048828]
[181.35699463 252.67201233]
[170.64805603 242.16874695]
[159.93910217 231.66548157]
[149.23016357 221.16223145]
[153.28572083 235.60356140]
[153.01022339 250.60104370]
[148.42703247 264.88369751]
[139.92453003 277.24118042]
[128.22325134 286.62628174]
[114.31479645 292.24365234]
[99.37782288 293.61727905]
[84.67813873 290.63073730]
[71.46144867 283.53713989]
[60.84778595 272.93762207]
[53.73657608 259.73040771]
[50.73045731 245.03471375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 130]
[8 129]
[9 128]
[10 127]
[11 126]
[12 125]
[14 57]
[15 56]
[16 55]
[18 53]
[20 51]
[21 50]
[22 49]
[30 41]
[31 40]
[32 39]
[33 38]
[58 104]
[59 103]
[60 102]
[61 101]
[62 100]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[74 87]
[75 86]
[76 85]
[77 84]
[105 120]
[106 119]
[107 118]
[109 116]
[110 115]
[134 149]
[135 148]
[136 147]
[137 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
