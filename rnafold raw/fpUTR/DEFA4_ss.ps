%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUAAAUAAGGAAGUCCUCUCCUCUGUGUGCAUGGCUGCUCUUGCUACAUAAGACCUGGAACACAGGACUGCUGUCUGCCCUCUCUGCUCGCCCUGCCUAGCUUGAGGAUCUGUCACCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[68.54532623 116.42427826]
[63.76802826 130.64318848]
[58.99072647 144.86210632]
[54.21342850 159.08100891]
[57.99144363 175.03903198]
[45.87638092 186.09152222]
[30.33118248 180.86860657]
[27.34741211 164.74319458]
[39.99451828 154.30371094]
[44.77181625 140.08479309]
[49.54911804 125.86589050]
[54.32641602 111.64698029]
[65.92558289 96.80870056]
[80.68598938 90.99090576]
[94.02537537 94.09519958]
[94.02537537 79.09519958]
[94.02537537 64.09519958]
[94.02537537 49.09520340]
[94.02537537 34.09520340]
[94.02537537 19.09520340]
[82.25531769 11.80352783]
[75.70235443 -0.26982394]
[75.99694824 -13.89510155]
[82.95385742 -25.48768044]
[94.64926910 -32.05112457]
[95.02323151 -47.04646301]
[95.39719391 -62.04180145]
[92.45785522 -70.80912781]
[95.97204590 -77.40503693]
[93.25219727 -86.24291992]
[96.92973328 -92.74916840]
[98.05068207 -107.70722961]
[99.17163849 -122.66528320]
[92.48725891 -137.00508118]
[101.15402985 -149.11854553]
[102.27498627 -164.07661438]
[103.39593506 -179.03466797]
[95.00492096 -195.36863708]
[105.32073212 -209.50743103]
[106.06842041 -224.48878479]
[90.30313110 -233.84963989]
[81.42142487 -249.79376221]
[81.75735474 -267.95776367]
[91.13548279 -283.41903687]
[106.94133759 -292.02993774]
[106.56737518 -307.02529907]
[96.59172058 -322.44259644]
[105.44850159 -337.53826904]
[104.70081329 -352.51962280]
[103.95312500 -367.50097656]
[92.51717377 -378.07720947]
[91.97232819 -393.28109741]
[102.12563324 -404.11834717]
[101.37794495 -419.09970093]
[92.96237946 -432.49703979]
[100.05565643 -445.59417725]
[99.30796814 -460.57553101]
[98.56027985 -475.55688477]
[97.81259155 -490.53823853]
[86.92974091 -502.32565308]
[89.50249481 -518.16107178]
[103.55725098 -525.89691162]
[118.31240845 -519.59887695]
[122.44907379 -504.09832764]
[112.79394531 -491.28591919]
[113.54163361 -476.30456543]
[114.28932190 -461.32321167]
[115.03701019 -446.34185791]
[123.39909363 -434.01608276]
[116.35929871 -419.84738159]
[117.10698700 -404.86602783]
[128.28887939 -395.09356689]
[129.26054382 -379.91101074]
[118.93447876 -368.24865723]
[119.68216705 -353.26730347]
[120.42985535 -338.28594971]
[129.22204590 -329.87823486]
[129.90592957 -317.32934570]
[121.56271362 -307.39926147]
[121.93667603 -292.40390015]
[133.12667847 -288.19308472]
[142.23716736 -280.39682007]
[148.16101074 -269.93127441]
[150.16770935 -258.03869629]
[147.99336243 -246.14018250]
[141.87512207 -235.66572571]
[132.52555847 -227.88238525]
[121.04977417 -223.74108887]
[120.30208588 -208.75973511]
[128.21343994 -199.51837158]
[127.64447021 -186.96374512]
[118.35399628 -177.91371155]
[117.23303986 -162.95565796]
[116.11209106 -147.99760437]
[122.87664795 -134.72770691]
[114.12969208 -121.54433441]
[113.00874329 -106.58627319]
[111.88778687 -91.62821960]
[110.95339966 -76.65734863]
[110.39253235 -61.66783905]
[110.01856995 -46.67250061]
[109.64460754 -31.67716408]
[122.96613312 -22.17128754]
[128.08564758 -6.45316410]
[122.81338501 9.38890076]
[109.02537537 19.09520340]
[109.02537537 34.09520340]
[109.02537537 49.09520340]
[109.02537537 64.09519958]
[109.02537537 79.09519958]
[109.02537537 94.09519958]
[112.18062592 108.75959778]
[118.34992981 122.43218231]
[124.51923370 136.10476685]
[139.38865662 141.45974731]
[146.04071045 155.79591370]
[140.52882385 170.60789490]
[126.12312317 177.10800171]
[111.37024689 171.43981934]
[105.02281189 156.96620178]
[110.84664917 142.27407837]
[104.67733765 128.60148621]
[98.50803375 114.92890167]
[91.01735687 115.30274963]
[84.17447662 128.65097046]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[15 111]
[16 110]
[17 109]
[18 108]
[19 107]
[20 106]
[25 102]
[26 101]
[27 100]
[29 99]
[31 98]
[32 97]
[33 96]
[35 94]
[36 93]
[37 92]
[39 89]
[40 88]
[45 80]
[46 79]
[48 76]
[49 75]
[50 74]
[53 71]
[54 70]
[56 68]
[57 67]
[58 66]
[59 65]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
