%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUGUCCACAGCACCACUGCCCUCGCUCUCUGACGCCAGCACCGCCUGCAGCCGGCCAGGCUCAGCCCAAGGACAGGGGAGAGGCUAAGGCCCCGCGAC\
) } def
/len { sequence length } bind def

/coor [
[156.48503113 204.98298645]
[171.46774292 205.72988892]
[162.35174561 193.81776428]
[153.23576355 181.90563965]
[144.11976624 169.99351501]
[135.00378418 158.08139038]
[125.88778687 146.16926575]
[116.77179718 134.25714111]
[105.10812378 137.79882812]
[92.92276001 137.48008728]
[81.46019745 133.33346558]
[71.89112091 125.78247070]
[59.05904770 133.55021667]
[46.22697067 141.31796265]
[38.80204773 155.93994141]
[22.41426849 156.55046082]
[13.92197609 142.52145386]
[22.06131363 128.28477478]
[38.45922852 128.48588562]
[51.29130173 120.71813965]
[64.12337494 112.95039368]
[61.15244293 104.31369019]
[60.28329468 94.99981689]
[61.66781998 85.52511597]
[65.33010101 76.43905640]
[71.15950775 68.29244232]
[59.39059448 58.99229813]
[43.26146698 63.79618073]
[27.58014107 58.15761566]
[18.38737869 44.45664597]
[19.10076714 28.13810349]
[7.04831362 19.20846939]
[-5.00414085 10.27883625]
[-21.34945297 8.95113182]
[-28.12681389 -5.98203278]
[-18.36425591 -19.15869713]
[-2.10466218 -17.02383995]
[3.92549229 -1.77361763]
[15.97794628 7.15601540]
[28.03040123 16.08564758]
[40.43673325 10.89531517]
[53.88987732 12.57116508]
[64.81777191 20.77722359]
[70.26479340 33.42928696]
[68.69073486 47.22338486]
[80.45964813 56.52352905]
[94.93842316 52.60369873]
[100.40819550 38.63653946]
[105.87797546 24.66937637]
[106.11656189 15.35617638]
[111.74116516 10.35723877]
[117.64266968 -3.43305635]
[123.54417419 -17.22335243]
[129.44567871 -31.01364708]
[124.83832550 -46.38088226]
[134.09831238 -59.48172760]
[150.12216187 -60.26634216]
[160.61775208 -48.13283157]
[157.53376770 -32.38898849]
[143.23597717 -25.11214447]
[137.33447266 -11.32184792]
[131.43296814 2.46844745]
[125.53145599 16.25874329]
[119.84513092 30.13915062]
[114.37535858 44.10631180]
[108.90558624 58.07347107]
[122.21279144 64.26591492]
[132.41999817 74.43236542]
[138.43444824 87.22429657]
[139.70222473 101.03047943]
[136.25486755 114.17929840]
[128.68392944 125.14115143]
[137.79991150 137.05326843]
[146.91590881 148.96539307]
[156.03189087 160.87751770]
[165.14788818 172.78964233]
[174.26387024 184.70176697]
[183.37986755 196.61389160]
[193.73616028 207.46502686]
[205.21015930 217.12667847]
[210.70849609 218.08357239]
[214.78741455 220.86706543]
[216.97450256 224.57803345]
[217.24813843 228.26316833]
[227.77194214 238.95191956]
[238.29574585 249.64068604]
[254.23811340 253.48422241]
[258.62054443 269.28695679]
[246.93478394 280.79238892]
[231.20211792 276.16470337]
[227.60697937 260.16448975]
[217.08317566 249.47572327]
[206.55937195 238.78697205]
[195.54849243 228.60067749]
[184.07450867 218.93901062]
[184.12226868 233.93893433]
[174.71861267 245.62530518]
[160.05584717 248.78816223]
[146.67088318 242.01742554]
[140.53096008 228.33161926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[7 73]
[8 72]
[12 21]
[13 20]
[14 19]
[26 46]
[27 45]
[31 40]
[32 39]
[33 38]
[47 66]
[48 65]
[49 64]
[51 63]
[52 62]
[53 61]
[54 60]
[79 95]
[80 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
