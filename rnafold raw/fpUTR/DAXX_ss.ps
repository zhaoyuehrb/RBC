%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGACAAUAUGGCGGCGCUUAGUUGCAUGAAGGCGGAAACUCUGUGACUUCCGGUCCGUAGUGGGGCCUGCGGUGGGAGUGGGAAGGAAGGCGGAGGGAACCAUGCGAGGUUCUGAGAAUUGCGGCGAGGGUCGCCUCGAGAGACGGUUUCUGAGCAGGAAUUCUGAAAUCCCCACCACUUCCUCCCUCCGGGGGAUUUGAUCCCCU\
) } def
/len { sequence length } bind def

/coor [
[112.01299286 155.69958496]
[109.75602722 170.52880859]
[107.49906158 185.35804749]
[109.93501282 200.15892029]
[96.61128235 207.04936218]
[85.94084167 196.50698853]
[92.66983032 183.10107422]
[94.92679596 168.27185059]
[97.18376160 153.44261169]
[99.44072723 138.61338806]
[101.69770050 123.78414917]
[94.28308105 122.65567017]
[86.13884735 135.25215149]
[77.99461365 147.84863281]
[69.85037994 160.44512939]
[61.70614243 173.04161072]
[63.65388107 188.96598816]
[52.31569672 200.31610107]
[36.38927841 198.38511658]
[28.09200668 184.65432739]
[33.78884125 169.65679932]
[49.10965729 164.89736938]
[57.25389099 152.30088806]
[65.39812469 139.70440674]
[73.54235840 127.10791779]
[81.68659973 114.51143646]
[76.97256470 108.67809296]
[67.54450226 97.01139832]
[62.83047104 91.17805481]
[48.80522537 96.49713135]
[34.77998352 101.81620026]
[20.75473785 107.13527679]
[6.81142998 112.66557312]
[-7.04676294 118.40582275]
[-20.90495682 124.14607239]
[-34.76314926 129.88632202]
[-48.62134171 135.62657166]
[-60.94095993 147.27403259]
[-75.54364014 138.66021729]
[-71.30887604 122.24366760]
[-54.36159515 121.76837921]
[-40.50339890 116.02812958]
[-26.64520836 110.28787994]
[-12.78701496 104.54763031]
[1.07117844 98.80737305]
[3.69469452 94.81406403]
[8.85569191 92.42771149]
[15.43566513 93.11003113]
[29.46090889 87.79096222]
[43.48615265 82.47188568]
[57.51139450 77.15280914]
[57.11510468 69.66329193]
[55.92623520 47.19472122]
[41.41798401 43.38542938]
[26.90973663 39.57613754]
[12.40148640 35.76684952]
[-2.10676312 31.95755768]
[-15.62559795 40.14392853]
[-30.95334816 36.29222488]
[-38.99633026 22.68759346]
[-34.98278809 7.40142345]
[-21.29388428 -0.49727452]
[-6.05100107 3.67765808]
[1.70252776 17.44930840]
[16.21077728 21.25859833]
[30.71902657 25.06789017]
[45.22727585 28.87718010]
[59.73552704 32.68647003]
[108.86595154 37.59730530]
[134.86178589 67.55772400]
[132.13717651 97.77044678]
[143.05928040 87.48903656]
[153.98139954 77.20762634]
[158.72651672 62.11476517]
[173.29711914 59.02499008]
[184.21923828 48.74357605]
[195.14134216 38.46216583]
[206.06346130 28.18075562]
[207.56555176 23.17679405]
[210.54039001 19.60758209]
[214.19419861 17.79394722]
[217.72096252 17.69491386]
[229.09757996 7.91878223]
[240.47418213 -1.85734904]
[251.85079956 -11.63348007]
[263.22741699 -21.40961075]
[263.42010498 -32.28783798]
[269.44494629 -41.08238983]
[279.11267090 -45.02497101]
[289.13858032 -43.03686142]
[300.80526733 -52.46492386]
[306.67556763 -67.15676117]
[321.43774414 -69.13842010]
[333.10443115 -78.56648254]
[337.81356812 -86.39628601]
[345.01928711 -88.04723358]
[356.82702637 -97.29801941]
[363.69738770 -110.63211823]
[364.37683105 -125.61672974]
[365.05624390 -140.60133362]
[365.73568726 -155.58593750]
[366.41513062 -170.57054138]
[355.57376099 -182.07009888]
[356.12265015 -197.86485291]
[367.73620605 -208.58404541]
[383.52426147 -207.86817932]
[394.12008667 -196.14195251]
[393.23733521 -180.36233521]
[381.39974976 -169.89109802]
[380.72030640 -154.90649414]
[380.04086304 -139.92189026]
[379.36141968 -124.93728638]
[378.68197632 -109.95268250]
[391.27847290 -101.80844879]
[400.10156250 -114.94098663]
[414.95086670 -113.78020477]
[428.33648682 -120.54965210]
[441.72207642 -127.31910706]
[455.10769653 -134.08856201]
[468.49328613 -140.85801697]
[481.87890625 -147.62747192]
[490.70199585 -160.76000977]
[505.55130005 -159.59922791]
[514.37438965 -172.73176575]
[529.22369385 -171.57098389]
[542.60931396 -178.34043884]
[547.62756348 -193.08679199]
[561.29888916 -199.76129150]
[575.32635498 -194.88630676]
[588.71197510 -201.65576172]
[602.09759521 -208.42521667]
[606.85534668 -220.41545105]
[618.14550781 -225.77766418]
[629.68035889 -222.12942505]
[643.16668701 -228.69593811]
[656.65301514 -235.26245117]
[670.08935547 -241.93061829]
[683.47497559 -248.70007324]
[691.99029541 -262.71511841]
[708.37707520 -262.07766724]
[715.77795410 -247.44349670]
[706.57958984 -233.86697388]
[690.24444580 -235.31446838]
[676.85882568 -228.54501343]
[672.30749512 -222.71977234]
[663.21954346 -221.77612305]
[649.73321533 -215.20960999]
[636.24688721 -208.64309692]
[627.22320557 -193.59301758]
[608.86700439 -195.03959656]
[595.48144531 -188.27014160]
[582.09582520 -181.50070190]
[577.70880127 -167.31301880]
[564.23034668 -160.25715637]
[549.37878418 -164.95481873]
[535.99316406 -158.18536377]
[528.12750244 -145.53703308]
[512.32073975 -146.21362305]
[504.45507812 -133.56527710]
[488.64834595 -134.24186707]
[475.26275635 -127.47241211]
[461.87713623 -120.70295715]
[448.49154663 -113.93350220]
[435.10592651 -107.16404724]
[421.72030640 -100.39459229]
[413.85464478 -87.74625397]
[398.04791260 -88.42284393]
[390.23437500 -82.56349945]
[381.37142944 -80.27250671]
[372.91058350 -81.45736694]
[366.07781982 -85.49026489]
[354.27005005 -76.23947906]
[342.53250122 -66.89979553]
[330.86581421 -57.47172928]
[325.82998657 -43.45425034]
[310.23333740 -40.79823303]
[298.56665039 -31.37017250]
[292.96035767 -12.86599827]
[273.00354004 -10.03300190]
[261.62692261 -0.25687033]
[250.25032043 9.51926136]
[238.87370300 19.29539299]
[227.49710083 29.07152367]
[216.34487915 39.10287094]
[205.42276001 49.38428116]
[194.50064087 59.66569138]
[183.57853699 69.94710541]
[179.61463928 84.30457306]
[164.26281738 88.12973785]
[153.34069824 98.41115570]
[142.41857910 108.69256592]
[138.39060974 123.14162445]
[142.41857910 137.59068298]
[146.44656372 152.03974915]
[150.47453308 166.48881531]
[154.50251770 180.93786621]
[158.53050232 195.38693237]
[168.60806274 209.02067566]
[158.29689026 222.47860718]
[142.51048279 216.29592896]
[144.08143616 199.41491699]
[140.05345154 184.96585083]
[136.02548218 170.51678467]
[131.99749756 156.06773376]
[127.96952057 141.61866760]
[123.94154358 127.16960144]
[116.52693176 126.04112244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[29 51]
[30 50]
[31 49]
[32 48]
[33 45]
[34 44]
[35 43]
[36 42]
[37 41]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[71 191]
[72 190]
[73 189]
[75 187]
[76 186]
[77 185]
[78 184]
[82 183]
[83 182]
[84 181]
[85 180]
[86 179]
[90 177]
[91 176]
[93 174]
[94 173]
[96 172]
[97 171]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
[114 167]
[116 165]
[117 164]
[118 163]
[119 162]
[120 161]
[121 160]
[123 158]
[125 156]
[126 155]
[129 152]
[130 151]
[131 150]
[134 148]
[135 147]
[136 146]
[137 144]
[138 143]
[192 206]
[193 205]
[194 204]
[195 203]
[196 202]
[197 201]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
