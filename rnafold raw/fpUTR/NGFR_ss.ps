%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCGAGCCGAGCCGCGGCCAGCUCCGGCGGGCAGGGGGGGCGCUGGAGCGCAGCGCAGCGCAGCCCCAUCAGUCCGCAAAGCGGACCGAGCUGGAAGUCGAGCGCUGCCGCGGGAGGCGGGCG\
) } def
/len { sequence length } bind def

/coor [
[47.21144485 569.12689209]
[33.15668488 561.39105225]
[30.58393478 545.55560303]
[41.46678543 533.76818848]
[42.21447372 518.78686523]
[32.06117249 507.94961548]
[32.60602188 492.74572754]
[44.04197311 482.16949463]
[44.78966141 467.18814087]
[45.53734970 452.20678711]
[35.60079956 443.90396118]
[32.24370956 431.19580078]
[36.92012405 418.70303345]
[48.11989975 411.10363770]
[49.24084854 396.14556885]
[50.36180115 381.18753052]
[51.48275375 366.22946167]
[52.60370255 351.27142334]
[53.72465515 336.31335449]
[54.84560776 321.35528564]
[52.17885208 314.37359619]
[56.18553925 306.03982544]
[57.67905807 291.11434937]
[59.17257309 276.18887329]
[52.74094772 262.75448608]
[61.81385422 249.79325867]
[63.12118912 234.85034180]
[64.24214172 219.89228821]
[65.36309052 204.93423462]
[66.48404694 189.97616577]
[55.02153778 180.50257874]
[51.29129410 165.92350769]
[56.92689133 151.77807617]
[69.96181488 143.56851196]
[71.08277130 128.61045837]
[72.20372009 113.65239716]
[69.04846954 98.98800659]
[61.87466431 85.81468201]
[54.70085144 72.64135742]
[47.52704239 59.46803665]
[31.61644363 50.29959869]
[32.61104202 32.82584000]
[25.11104202 19.83545685]
[17.61104202 6.84507656]
[10.11104107 -6.14530468]
[2.61104155 -19.13568497]
[-4.88895845 -32.12606812]
[-17.18605042 -36.24887848]
[-23.14591980 -47.31333160]
[-20.02771759 -59.07212448]
[-27.20152664 -72.24545288]
[-40.08668137 -83.26403046]
[-33.06567383 -98.69587708]
[-16.29330635 -96.22121429]
[-14.02820396 -79.41925812]
[-6.85439396 -66.24593353]
[8.57442379 -57.98318481]
[8.10142231 -39.62606812]
[15.60142231 -26.63568497]
[23.10142326 -13.64530468]
[30.60142326 -0.65492362]
[38.10142136 12.33545780]
[45.60142136 25.32583809]
[57.26103592 28.79655457]
[63.59454727 39.65145111]
[60.70036697 52.29422760]
[67.87417603 65.46755219]
[75.04798889 78.64087677]
[82.22179413 91.81420135]
[93.62032318 83.58045197]
[106.07053375 85.56604767]
[117.79800415 76.21369934]
[123.76329041 61.56016922]
[138.53799438 59.67411041]
[150.26547241 50.32176590]
[161.99295044 40.96941757]
[173.72041321 31.61706924]
[185.44789124 22.26472282]
[197.17535400 12.91237640]
[205.78906250 -1.69038010]
[222.20564270 2.54424930]
[222.68107605 19.49152946]
[206.52770996 24.63984871]
[194.80023193 33.99219513]
[183.07276917 43.34454346]
[171.34529114 52.69688797]
[159.61781311 62.04923630]
[147.89035034 71.40158081]
[142.76388550 85.38616943]
[127.15035248 87.94117737]
[115.42288208 97.29351807]
[108.66916656 115.33451843]
[87.16178131 114.77335358]
[86.04082489 129.73141479]
[84.91987610 144.68946838]
[96.58563995 154.75009155]
[100.05002594 169.57746887]
[94.18854523 183.43774414]
[81.44210052 191.09712219]
[80.32115173 206.05517578]
[79.20019531 221.01324463]
[78.07924652 235.97129822]
[80.57791138 244.87423706]
[76.73931885 251.28678894]
[83.06411743 265.78875732]
[74.09803772 277.68240356]
[72.60451508 292.60787964]
[71.11100006 307.53332520]
[69.80366516 322.47625732]
[68.68271637 337.43429565]
[67.56175995 352.39236450]
[66.44081116 367.35043335]
[65.31985474 382.30847168]
[64.19890594 397.26654053]
[63.07795715 412.22457886]
[74.71739197 425.21316528]
[73.44205475 442.27001953]
[60.51870346 452.95446777]
[59.77101517 467.93582153]
[59.02332687 482.91717529]
[69.34939575 494.57952881]
[68.37771606 509.76208496]
[57.19582748 519.53454590]
[56.44813919 534.51593018]
[66.10326385 547.32830811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 124]
[5 123]
[8 120]
[9 119]
[10 118]
[14 115]
[15 114]
[16 113]
[17 112]
[18 111]
[19 110]
[20 109]
[22 108]
[23 107]
[24 106]
[26 104]
[27 102]
[28 101]
[29 100]
[30 99]
[34 95]
[35 94]
[36 93]
[37 69]
[38 68]
[39 67]
[40 66]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[50 56]
[51 55]
[71 91]
[72 90]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
