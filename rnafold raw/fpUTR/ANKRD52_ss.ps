%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAGCCGCCGCCUGGGCCGCUCCGUGUCCCCGGUGGAGCCGCCGCCGCCGCCGCCGGGAGCUCGAUGCGGACGGAGCCCGGGCCGAGCC\
) } def
/len { sequence length } bind def

/coor [
[80.31367493 335.78640747]
[64.59407806 334.15249634]
[54.69899368 321.82922363]
[56.49900818 306.12777710]
[68.92620850 296.36352539]
[70.47696686 281.44390869]
[71.76996613 266.49975586]
[72.80484009 251.53549194]
[70.25181580 247.26719666]
[70.50771332 241.31605530]
[74.46264648 235.58592224]
[76.52745056 220.72872925]
[78.59225464 205.87152100]
[80.65705872 191.01431274]
[82.72186279 176.15710449]
[84.78665924 161.29989624]
[86.85146332 146.44268799]
[88.91626740 131.58547974]
[90.72431946 116.69484711]
[81.67454529 105.37902832]
[83.17253113 90.96714783]
[94.35605621 81.75439453]
[95.90682220 66.83477020]
[97.45758057 51.91514587]
[99.00833893 36.99552536]
[100.55909729 22.07590103]
[102.10985565 7.15627813]
[103.66061401 -7.76334476]
[105.21137238 -22.68296814]
[105.47028351 -37.68073273]
[104.43541718 -52.64499283]
[103.40055084 -67.60925293]
[102.36568451 -82.57350922]
[101.33081055 -97.53777313]
[100.29594421 -112.50202942]
[99.26107788 -127.46628571]
[98.22621155 -142.43054199]
[89.55525970 -155.66403198]
[96.39604950 -168.89479065]
[87.72509766 -182.12826538]
[94.56589508 -195.35902405]
[93.53102875 -210.32327271]
[83.92734528 -223.61618042]
[90.88348389 -238.46691895]
[107.24355316 -239.59831238]
[116.17772675 -225.84649658]
[108.49528503 -211.35813904]
[109.53015137 -196.39389038]
[118.12709045 -184.23074341]
[111.36031342 -169.92965698]
[119.95724487 -157.76651001]
[113.19046783 -143.46540833]
[114.22534180 -128.50115967]
[115.26020813 -113.53689575]
[116.29507446 -98.57263947]
[117.32994080 -83.60837555]
[118.36480713 -68.64411926]
[119.39967346 -53.67985916]
[120.43453979 -38.71559906]
[122.44833374 -37.16403198]
[123.98983002 -34.73856735]
[124.73669434 -31.60743904]
[124.42993164 -28.04701614]
[122.90776825 -24.41810036]
[120.13099670 -21.13220787]
[118.58023834 -6.21258593]
[117.02947998 8.70703697]
[115.47872162 23.62665939]
[113.92796326 38.54628372]
[112.37719727 53.46590424]
[110.82643890 68.38552856]
[109.27568054 83.30515289]
[118.32545471 94.62097168]
[116.82746887 109.03285217]
[105.64394379 118.24560547]
[107.90073395 127.32402039]
[103.77347565 133.65028381]
[101.70867157 148.50749207]
[99.64386749 163.36470032]
[97.57906342 178.22190857]
[95.51425934 193.07911682]
[93.44946289 207.93632507]
[91.38465881 222.79351807]
[89.31985474 237.65072632]
[87.76909637 252.57035828]
[86.73423004 267.53460693]
[89.30303192 276.52972412]
[85.39658356 282.99465942]
[83.84582520 297.91430664]
[93.99925995 310.02557373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 89]
[6 88]
[7 86]
[8 85]
[11 84]
[12 83]
[13 82]
[14 81]
[15 80]
[16 79]
[17 78]
[18 77]
[19 75]
[22 72]
[23 71]
[24 70]
[25 69]
[26 68]
[27 67]
[28 66]
[29 65]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[39 50]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
