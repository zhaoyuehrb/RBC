%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUGCGUUGCUAUGGCGCCGGGGGCGGGUCGGACGCCUGGGCCCACUCGGCGGUUUGGCGGGAGGGAGGGGAUUUGCGCAGGCCCCGCUCCCGCCCCGCCUCC\
) } def
/len { sequence length } bind def

/coor [
[36.73143005 229.59230042]
[32.93002319 237.22193909]
[26.43051529 242.58885193]
[18.40298843 244.82714844]
[10.25262165 243.62527466]
[0.38354093 254.92134094]
[-9.48554039 266.21740723]
[-19.35461998 277.51348877]
[-29.22370148 288.80957031]
[-29.58345795 304.84857178]
[-42.43434525 314.45245361]
[-57.91826630 310.25390625]
[-64.15727234 295.47369385]
[-56.36534500 281.44995117]
[-40.51977539 278.94049072]
[-30.65069199 267.64440918]
[-20.78161240 256.34832764]
[-10.91253090 245.05226135]
[-1.04345024 233.75619507]
[0.62659496 212.24214172]
[21.52960587 204.42033386]
[29.97940636 192.02674866]
[38.42920685 179.63316345]
[46.87900925 167.23957825]
[55.32880783 154.84600830]
[63.77861023 142.45242310]
[72.22840881 130.05883789]
[80.67821503 117.66526031]
[89.12801361 105.27167511]
[85.77391052 99.04188538]
[86.30767822 90.91176605]
[79.39804077 77.59797668]
[72.48840332 64.28419495]
[65.57876587 50.97040558]
[58.66913223 37.65661621]
[51.56110382 24.44768524]
[44.25627136 11.34656239]
[36.95143890 -1.75456095]
[29.92297745 -7.84925795]
[29.63074493 -15.35868931]
[22.72110748 -28.67247581]
[15.81147099 -41.98626328]
[1.70779645 -50.35396194]
[2.17313433 -66.74650574]
[16.72878456 -74.30065155]
[30.40114212 -65.24533844]
[29.12525749 -48.89590073]
[36.03489304 -35.58211136]
[42.94453049 -22.26832581]
[50.05256271 -9.05939293]
[57.35739136 4.04172993]
[64.66222382 17.14285278]
[70.76840210 21.52366638]
[71.98291779 30.74698067]
[78.89255524 44.06076813]
[85.80219269 57.37455368]
[92.71183014 70.68833923]
[99.62146759 84.00212860]
[112.83039856 91.11016083]
[127.74822998 89.54222870]
[142.66606140 87.97430420]
[157.58387756 86.40637970]
[172.50170898 84.83844757]
[187.41954041 83.27052307]
[202.33737183 81.70259857]
[215.25317383 72.56517029]
[228.71949768 78.92972565]
[237.08610535 74.86222839]
[244.10607910 77.54490662]
[259.06414795 76.42395782]
[274.02218628 75.30300140]
[279.55044556 61.07622528]
[290.70986938 50.66323853]
[305.28472900 46.13154602]
[320.38119507 48.38092041]
[333.00183105 56.96474838]
[340.64080811 70.17870331]
[341.78143311 85.39913940]
[336.19720459 99.60403442]
[324.99685669 109.97299194]
[310.40426636 114.44725800]
[295.31680298 112.13845062]
[282.73004150 103.50498962]
[275.14315796 90.26106262]
[260.18508911 91.38201141]
[245.22703552 92.50296021]
[230.28741455 93.84754944]
[218.43864441 102.87282562]
[203.90530396 96.62042236]
[188.98747253 98.18835449]
[174.06964111 99.75627899]
[159.15180969 101.32420349]
[144.23397827 102.89213562]
[129.31616211 104.46006012]
[114.39832306 106.02798462]
[101.52159119 113.72147369]
[93.07179260 126.11505890]
[84.62199402 138.50863647]
[76.17219543 150.90222168]
[67.72238922 163.29580688]
[59.27259064 175.68937683]
[50.82278824 188.08296204]
[42.37298965 200.47654724]
[33.92318726 212.87013245]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[21 104]
[22 103]
[23 102]
[24 101]
[25 100]
[26 99]
[27 98]
[28 97]
[29 96]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 52]
[37 51]
[38 50]
[40 49]
[41 48]
[42 47]
[59 95]
[60 94]
[61 93]
[62 92]
[63 91]
[64 90]
[65 89]
[67 87]
[69 86]
[70 85]
[71 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
