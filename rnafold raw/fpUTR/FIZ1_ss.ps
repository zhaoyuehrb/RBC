%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGAAGUGACGCUGCCCCCGCUGCCCAAAAUGUCGGCGCCCAGAGGGAGGUAGAGAGCCCCCACAUACCACUGUAUUCCCCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[204.31132507 234.04595947]
[195.57855225 221.85012817]
[186.22619629 210.12265015]
[176.27935791 198.89498901]
[166.33251953 187.66732788]
[156.38568115 176.43966675]
[141.54904175 175.79949951]
[131.30158997 164.55474854]
[132.07365417 148.99705505]
[122.12681580 137.76939392]
[109.94515991 136.67674255]
[101.57112885 127.21627808]
[101.99015808 114.18501282]
[88.95690918 109.12280273]
[86.44554138 95.36836243]
[76.89216614 83.80406189]
[67.33879089 72.23976898]
[57.78540802 60.67546844]
[48.23203278 49.11117172]
[38.48047256 37.71349335]
[28.53363037 26.48583221]
[18.58679199 15.25817204]
[3.64413190 10.05937386]
[0.99584192 -4.59790516]
[-8.95099831 -15.82556629]
[-19.27944565 -26.70321083]
[-29.97719574 -37.21787643]
[-40.85483932 -47.54632568]
[-51.90913773 -57.68547821]
[-67.08882904 -54.46730423]
[-81.24730682 -60.81687927]
[-88.94035339 -74.29266357]
[-87.20983124 -89.71293640]
[-76.72116089 -101.14829254]
[-61.50745392 -104.20161438]
[-47.41868973 -97.69881439]
[-39.87228394 -84.14037323]
[-41.76998520 -68.73977661]
[-30.71568489 -58.60062408]
[-23.50461769 -56.35198975]
[-19.46253014 -47.91562271]
[-8.76478195 -37.40095901]
[-3.86181664 -36.56603241]
[0.49377573 -32.50272369]
[2.27666330 -25.77240562]
[12.22350311 -14.54474545]
[26.45469856 -10.14902496]
[29.81445312 5.31133175]
[39.76129150 16.53899384]
[49.70813370 27.76665497]
[56.64808655 30.74874687]
[59.79632950 39.55779266]
[69.34970856 51.12209320]
[78.90308380 62.68638992]
[88.45645905 74.25068665]
[98.00984192 85.81498718]
[111.04309082 90.87719727]
[113.55445862 104.63163757]
[130.88885498 110.54093933]
[133.35447693 127.82256317]
[143.30131531 139.05021667]
[158.83863831 140.15905762]
[168.76620483 151.68719482]
[167.61334229 166.49282837]
[177.56018066 177.72048950]
[187.50701904 188.94815063]
[197.45385742 200.17581177]
[202.83026123 201.94238281]
[206.49353027 205.34849548]
[208.09815979 209.39973450]
[207.77438354 213.11734009]
[216.50717163 225.31318665]
[230.84016418 220.51145935]
[245.95176697 220.14944458]
[260.49822998 224.25933838]
[273.18615723 232.47567749]
[282.88726807 244.06790161]
[288.73901367 258.00521851]
[290.22103882 273.04830933]
[287.20153809 287.85958862]
[279.94900513 301.12203979]
[269.10836792 311.65637207]
[255.64355469 318.52587891]
[240.75183105 321.11968994]
[225.75737000 319.20724487]
[211.99346924 312.95852661]
[200.68400574 302.92919922]
[192.83459473 290.01107788]
[189.14321899 275.35278320]
[189.93811035 260.25778198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 67]
[4 66]
[5 65]
[6 64]
[9 61]
[10 60]
[13 58]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 50]
[21 49]
[22 48]
[24 46]
[25 45]
[26 42]
[27 41]
[28 39]
[29 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
