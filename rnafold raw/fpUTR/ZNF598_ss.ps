%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGGGGCGGGCCCGCCGGGAGCCAGGCCGCUCGGCGCCACGACCGGCCGAGAGGGGGGCCGGAUCCCGGACC\
) } def
/len { sequence length } bind def

/coor [
[97.25544739 228.44207764]
[97.25544739 213.44207764]
[84.90670776 202.22450256]
[84.33845520 185.21711731]
[96.37372589 172.71920776]
[95.74559021 157.73237610]
[95.11746216 142.74552917]
[94.48932648 127.75868225]
[93.54746246 112.78828430]
[85.72628784 101.19859314]
[91.50514221 88.46688080]
[90.24997711 73.51949310]
[88.99480438 58.57209778]
[87.73963928 43.62470627]
[86.48447418 28.67731285]
[77.61953735 15.57297993]
[84.26470947 2.24290347]
[83.00954437 -12.70448971]
[71.59366608 -16.07985687]
[61.85547256 -22.87949753]
[54.78649139 -32.39005280]
[51.09979630 -43.62324524]
[51.15811920 -55.41856384]
[54.93821335 -66.56315613]
[62.03503799 -75.91653442]
[71.70507050 -82.52729797]
[82.94419098 -85.72987366]
[84.19935608 -100.67726898]
[85.45452881 -115.62466431]
[86.70969391 -130.57205200]
[87.96485901 -145.51943970]
[81.40946198 -159.91865540]
[90.18462372 -171.95385742]
[91.43978882 -186.90124512]
[92.69495392 -201.84864807]
[82.30381012 -213.75660706]
[83.45969391 -229.51856995]
[95.47685242 -239.78323364]
[111.22571564 -238.46076965]
[121.36275482 -226.33575439]
[119.87385559 -210.60176086]
[107.64234924 -200.59347534]
[106.38718414 -185.64608765]
[105.13201141 -170.69868469]
[111.77719116 -157.36860657]
[102.91225433 -144.26428223]
[101.65708923 -129.31687927]
[100.40191650 -114.36949158]
[99.14675140 -99.42210388]
[97.89158630 -84.47470856]
[113.76071930 -74.97022247]
[122.96562958 -58.83613205]
[123.07317352 -40.18367004]
[113.97963715 -23.80893326]
[97.95693970 -13.95965672]
[99.21210480 0.98773587]
[107.98725891 13.02293110]
[101.43186188 27.42214394]
[102.68703461 42.36953735]
[103.94219971 57.31692886]
[105.19736481 72.26432037]
[106.45253754 87.21171570]
[114.27371216 98.80140686]
[108.49485779 111.53311920]
[112.42984772 120.11138916]
[109.47616577 127.13054657]
[110.10430145 142.11738586]
[110.73243713 157.10423279]
[111.36057281 172.09107971]
[122.38035583 180.13743591]
[126.60068512 192.90641785]
[122.66304779 205.55984497]
[112.25544739 213.44207764]
[112.25544739 228.44207764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[5 69]
[6 68]
[7 67]
[8 66]
[9 64]
[11 62]
[12 61]
[13 60]
[14 59]
[15 58]
[17 56]
[18 55]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[33 44]
[34 43]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
