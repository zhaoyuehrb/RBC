%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCGCGCGCGGCCCUGCGGGUGACAGGCAGGCGGGAAGGGGCGGGGCCUCGGGCGGGGCCGCCGUGGGGAGGAGGGCGGUGGGAGGGGAGGAGUGGAG\
) } def
/len { sequence length } bind def

/coor [
[129.72924805 171.14593506]
[137.62538147 158.39245605]
[148.39332581 147.94969177]
[161.38284302 140.44819641]
[175.80503845 136.34169006]
[161.75450134 131.08978271]
[147.70396423 125.83789062]
[133.07325745 128.62928772]
[122.85563660 116.54993439]
[108.80509949 111.29803467]
[94.98480988 113.41727448]
[85.94300079 102.75250244]
[71.89246368 97.50060272]
[57.84193039 92.24871063]
[43.79139328 86.99681091]
[29.74085808 81.74491119]
[15.69032097 76.49301910]
[1.63978398 71.24111938]
[-12.41075230 65.98921967]
[-25.32791519 74.38285828]
[-40.53296280 73.57049561]
[-52.20604324 64.07295990]
[-56.00281143 49.69511414]
[-70.24571228 56.00206757]
[-84.42013550 50.47574234]
[-90.34507751 36.85844803]
[-105.98076630 39.27418900]
[-115.19339752 27.57048798]
[-130.32902527 32.88956070]
[-143.84750366 24.25068092]
[-145.37861633 8.28085804]
[-133.74783325 -2.76922607]
[-117.87728119 -0.42289290]
[-109.94150543 13.51995182]
[-95.31079865 10.72855759]
[-85.09317780 22.80791092]
[-71.68892670 16.41560555]
[-57.36486816 21.54162025]
[-50.75091553 35.64457703]
[-38.45418549 27.28225517]
[-23.41337013 27.77000427]
[-11.40340328 37.13024139]
[-7.15885592 51.93868637]
[6.89168072 57.19058228]
[20.94221687 62.44247818]
[34.99275589 67.69437408]
[49.04328918 72.94627380]
[63.09382629 78.19817352]
[77.14436340 83.45006561]
[91.19490051 88.70196533]
[105.01519012 86.58272552]
[114.05699921 97.24749756]
[128.10752869 102.49939728]
[143.74322510 100.08365631]
[152.95585632 111.78735352]
[167.00639343 117.03925323]
[181.05693054 122.29115295]
[185.62402344 120.86186981]
[190.09214783 121.07248688]
[193.92593384 122.69156647]
[208.27578735 118.32334900]
[222.62565613 113.95512390]
[236.97552490 109.58690643]
[251.32539368 105.21868134]
[265.67526245 100.85046387]
[276.62408447 89.42970276]
[291.05294800 93.12528229]
[297.01358032 78.66828156]
[310.89633179 71.47084045]
[326.14620972 74.93138123]
[335.56265259 87.41593933]
[334.69955444 103.02968597]
[323.96441650 114.40028381]
[308.42602539 116.15889740]
[295.42117310 107.47515106]
[285.49874878 118.58346558]
[270.04348755 115.20033264]
[255.69360352 119.56855011]
[241.34375000 123.93676758]
[226.99388123 128.30499268]
[212.64401245 132.67321777]
[198.29414368 137.04142761]
[212.43725586 142.03868103]
[224.93466187 150.33415222]
[235.03170776 161.42692566]
[242.11869812 174.64717102]
[245.76766968 189.19656372]
[245.75828552 204.19656372]
[242.09111023 218.74137878]
[234.98759460 231.95274353]
[224.87666321 243.03286743]
[212.36889648 251.31269836]
[198.21954346 256.29223633]
[183.28302002 257.67083740]
[168.46128845 255.36520386]
[154.64932251 249.51458740]
[142.68118286 240.47225952]
[133.27954102 228.78427124]
[127.01213837 215.15637207]
[124.25742340 200.41148376]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 57]
[6 56]
[7 55]
[9 53]
[10 52]
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[23 39]
[26 36]
[28 34]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[67 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
