%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGAGCCUGAAUUCACUGUCAGCUUUGAACACUGAACGCGAGGACUGUUAACUGUUUCUGGCAAAC\
) } def
/len { sequence length } bind def

/coor [
[83.51097107 290.37100220]
[70.58729553 282.07196045]
[63.55886078 268.41558838]
[64.31627655 253.07536316]
[72.65579987 240.17778015]
[86.33414459 233.19218445]
[87.02689362 218.20819092]
[87.71964264 203.22419739]
[80.57839203 190.15316772]
[88.94477844 176.72505188]
[89.63752747 161.74105835]
[90.33027649 146.75706482]
[76.36083984 141.48393250]
[64.70325470 132.15379333]
[56.49758530 119.67909241]
[52.54633713 105.27983093]
[53.23592758 90.36421967]
[58.49891663 76.39096069]
[67.82060242 64.72660065]
[80.28933716 56.51188278]
[94.68572998 52.55018234]
[95.37847900 37.56618881]
[96.07122803 22.58219337]
[96.41770172 7.58619595]
[96.41770172 -7.41380405]
[96.41770172 -22.41380501]
[96.41770172 -37.41380310]
[96.41770172 -52.41380310]
[82.83582306 -59.47009277]
[74.09840393 -72.03656006]
[72.21324158 -87.22552490]
[77.61353302 -101.54668427]
[89.05832672 -111.70912170]
[103.91770172 -115.37760162]
[118.77706909 -111.70912170]
[130.22186279 -101.54668427]
[135.62214661 -87.22552490]
[133.73699951 -72.03656006]
[124.99957275 -59.47009277]
[111.41770172 -52.41380310]
[111.41770172 -37.41380310]
[111.41770172 -22.41380501]
[111.41770172 -7.41380405]
[111.41770172 7.58619595]
[114.67911530 14.50795937]
[111.05522156 23.27494621]
[110.36247253 38.25894165]
[109.66972351 53.24293518]
[123.63916016 58.51606369]
[135.29675293 67.84620667]
[143.50241089 80.32090759]
[147.45365906 94.72016907]
[146.76406860 109.63578033]
[141.50108337 123.60903931]
[132.17939758 135.27340698]
[119.71066284 143.48811340]
[105.31427002 147.44981384]
[104.62152100 162.43380737]
[103.92877197 177.41780090]
[111.02047729 191.56059265]
[102.70364380 203.91694641]
[102.01088715 218.90093994]
[101.31813812 233.88493347]
[114.29357910 242.10281372]
[121.40748596 255.71485901]
[120.74625397 271.05950928]
[112.48775482 284.00912476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 63]
[7 62]
[8 61]
[10 59]
[11 58]
[12 57]
[21 48]
[22 47]
[23 46]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
