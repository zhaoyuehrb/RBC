%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCGUCGGGGGCCCGGAGGGGGACUCGGAGCGGGCCAAGGGGCGGCUCCGGCGGGCGGACUCGGAGCGGGCGGCGGAGUGACCCGGACAGCUGUCCUCUCUGACACCACCCCGGCCUGCCUCUUUGUUGCC\
) } def
/len { sequence length } bind def

/coor [
[-14.75340843 235.20979309]
[-26.41797256 244.64048767]
[-38.08253479 254.07118225]
[-49.74709702 263.50186157]
[-61.30031204 273.06866455]
[-66.82124329 287.89532471]
[-81.53240204 290.22579956]
[-92.97267914 299.92736816]
[-104.41295624 309.62890625]
[-115.85323334 319.33044434]
[-127.29351044 329.03201294]
[-128.73831177 344.54168701]
[-140.47857666 354.21746826]
[-155.25579834 352.74447632]
[-166.69607544 362.44604492]
[-178.13635254 372.14758301]
[-183.15240479 387.76077271]
[-199.23678589 390.95837402]
[-209.84326172 378.45098877]
[-204.06079102 363.10513306]
[-187.83789062 360.70730591]
[-176.39761353 351.00576782]
[-164.95733643 341.30419922]
[-163.99626160 326.48489380]
[-152.53239441 316.48318481]
[-136.99505615 317.59173584]
[-125.55477905 307.89016724]
[-114.11450195 298.18862915]
[-102.67422485 288.48709106]
[-91.23394775 278.78552246]
[-86.53130341 264.65280151]
[-71.00186157 261.62838745]
[-67.90610504 254.83959961]
[-59.17779160 251.83731079]
[-47.51322937 242.40661621]
[-35.84866333 232.97592163]
[-24.18410110 223.54522705]
[-18.89689445 200.37361145]
[5.06151104 195.48765564]
[15.02858353 184.27795410]
[24.99565506 173.06825256]
[34.96272659 161.85855103]
[44.92979813 150.64884949]
[54.89687347 139.43913269]
[64.86394501 128.22943115]
[74.83101654 117.01972961]
[84.79808807 105.81002808]
[84.83081818 94.10504150]
[92.71047974 85.44948578]
[104.36096954 84.32082367]
[114.58808136 73.34785461]
[124.81520081 62.37488556]
[135.04231262 51.40191650]
[138.65057373 42.90616989]
[145.64012146 40.29515839]
[156.12165833 29.56495476]
[156.76673889 16.62180901]
[165.79629517 7.89550591]
[177.94987488 7.70638466]
[188.68008423 -2.77515697]
[189.03135681 -18.34803009]
[200.06262207 -28.82494736]
[214.90679932 -28.39409828]
[225.63700867 -38.87564087]
[236.36721802 -49.35718155]
[247.09742737 -59.83872223]
[257.82763672 -70.32026672]
[268.55783081 -80.80180359]
[273.02316284 -95.97979736]
[287.53414917 -99.33837128]
[298.26437378 -109.81991577]
[308.99456787 -120.30145264]
[319.72476196 -130.78298950]
[330.45498657 -141.26454163]
[341.18518066 -151.74607849]
[351.91537476 -162.22761536]
[345.92098999 -176.17149353]
[345.37237549 -191.33934021]
[350.34378052 -205.67982483]
[360.16284180 -217.25352478]
[373.50161743 -224.49519348]
[388.55612183 -226.42543030]
[403.29040527 -222.78321838]
[415.71173096 -214.06112671]
[424.14025879 -201.43873596]
[427.43606567 -186.62313843]
[425.15341187 -171.61801147]
[417.60104370 -158.45266724]
[405.80035400 -148.90762329]
[391.34725952 -144.27375793]
[376.19644165 -145.17778015]
[362.39691162 -151.49742126]
[351.66671753 -141.01586914]
[340.93652344 -130.53433228]
[330.20629883 -120.05279541]
[319.47610474 -109.57125092]
[308.74591064 -99.08970642]
[298.01568604 -88.60816956]
[294.31787109 -74.17988586]
[279.03936768 -70.07160187]
[268.30917358 -59.59005737]
[257.57894897 -49.10851669]
[246.84875488 -38.62697601]
[236.11854553 -28.14543533]
[225.38835144 -17.66389275]
[225.47109985 -2.81368351]
[214.73844910 7.96894598]
[199.16162109 7.95504761]
[188.43142700 18.43658829]
[184.66000366 35.53462601]
[166.85186768 40.04649734]
[156.37033081 50.77669907]
[146.01528931 61.62903214]
[135.78817749 72.60200500]
[125.56105042 83.57497406]
[115.33393860 94.54794312]
[112.03444672 110.95566559]
[96.00778961 115.77709961]
[86.04071808 126.98680115]
[76.07364655 138.19650269]
[66.10657501 149.40620422]
[56.13950348 160.61592102]
[46.17243195 171.82562256]
[36.20536041 183.03532410]
[26.23828697 194.24502563]
[16.27121544 205.45472717]
[18.49957275 211.68135071]
[18.84582901 218.24487305]
[17.30418015 224.59230042]
[14.02690697 230.19551086]
[9.30967140 234.59524536]
[3.56497073 237.43867493]
[-2.71387887 238.50765991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[5 32]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[14 23]
[15 22]
[16 21]
[39 126]
[40 125]
[41 124]
[42 123]
[43 122]
[44 121]
[45 120]
[46 119]
[47 118]
[50 116]
[51 115]
[52 114]
[53 113]
[55 112]
[56 111]
[59 109]
[60 108]
[63 105]
[64 104]
[65 103]
[66 102]
[67 101]
[68 100]
[70 98]
[71 97]
[72 96]
[73 95]
[74 94]
[75 93]
[76 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
