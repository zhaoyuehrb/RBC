%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUGACUGCGCGGCGGGCUGUGGCUGCGGAGGUUGAGGGGCGUCCGAGGCGCGGAGGGGCUGGCUGGGCAGGAGGGGUUGGCGGGGCAGCAGGGCCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[204.73854065 273.61346436]
[191.54943848 266.44137573]
[181.20895386 255.52914429]
[174.73892212 241.93673706]
[172.78430176 226.98989868]
[175.54901123 212.15080261]
[182.77465820 198.87498474]
[172.49325562 187.95286560]
[162.21183777 177.03074646]
[151.93043518 166.10862732]
[137.57296753 162.14474487]
[133.74778748 146.79292297]
[123.46637726 135.87080383]
[113.18496704 124.94868469]
[102.90355682 114.02657318]
[89.57015228 109.81802368]
[86.17433167 96.25483704]
[75.89292145 85.33272552]
[65.61150360 74.41060638]
[55.33009720 63.48849487]
[44.25394440 53.37321472]
[32.44619370 44.12243271]
[20.63844109 34.87165070]
[5.00343323 32.45149612]
[-0.24352570 18.51167488]
[-12.05127811 9.26089096]
[-20.89431572 6.36167479]
[-24.07037544 -0.45196083]
[-35.59333801 -10.05515385]
[-47.11630249 -19.65834618]
[-58.63926697 -29.26153946]
[-74.19404602 -32.15280914]
[-79.01758575 -46.24475098]
[-90.54055023 -55.84794235]
[-102.06351471 -65.45113373]
[-118.30635834 -67.70989990]
[-124.22006989 -83.00565338]
[-113.72112274 -95.60343933]
[-97.60993958 -92.54373169]
[-92.46031952 -76.97409821]
[-80.93735504 -67.37090302]
[-69.41439056 -57.76771164]
[-54.68381500 -55.56332397]
[-49.03607559 -40.78450394]
[-37.51311111 -31.18131065]
[-25.99014664 -21.57811737]
[-14.46718311 -11.97492409]
[-2.80049491 -2.54686117]
[9.00725746 6.70392179]
[23.79769516 8.46239567]
[29.88922310 23.06389809]
[41.69697571 32.31468201]
[53.50472641 41.56546402]
[55.96633530 41.15495300]
[58.73600388 41.64106369]
[61.49640274 43.13957596]
[63.89614487 45.65814972]
[65.58525848 49.08804703]
[66.25221252 53.20708466]
[76.53362274 64.12919617]
[86.81503296 75.05131531]
[97.09644318 85.97342682]
[110.42984772 90.18197632]
[113.82566833 103.74516296]
[124.10707855 114.66727448]
[134.38848877 125.58939362]
[144.66990662 136.51150513]
[159.76277161 141.25662231]
[162.85253906 155.82722473]
[173.13395691 166.74934387]
[183.41535950 177.67144775]
[193.69677734 188.59356689]
[207.38464355 182.18267822]
[222.36360168 180.31896973]
[237.16514587 183.17248535]
[250.34211731 190.45141602]
[260.61010742 201.43188477]
[266.97274780 215.02996826]
[268.81832886 229.90859985]
[265.97860718 244.60914612]
[258.74398804 257.69430542]
[273.83685303 262.43942261]
[276.92663574 277.01004028]
[287.20803833 287.93215942]
[302.30090332 292.67727661]
[305.39068604 307.24786377]
[315.67208862 318.16998291]
[325.95352173 329.09210205]
[341.75616455 329.31884766]
[352.70993042 340.71142578]
[352.31610107 356.51080322]
[340.80834961 367.34350586]
[325.01400757 366.78265381]
[314.30358887 355.16104126]
[315.03140259 339.37350464]
[304.75000000 328.45138550]
[294.46856689 317.52926636]
[280.11111450 313.56539917]
[276.28594971 298.21356201]
[266.00451660 287.29144287]
[251.64706421 283.32754517]
[247.82188416 267.97573853]
[234.32377625 274.40707397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 72]
[8 71]
[9 70]
[10 69]
[12 67]
[13 66]
[14 65]
[15 64]
[17 62]
[18 61]
[19 60]
[20 59]
[21 53]
[22 52]
[23 51]
[25 49]
[26 48]
[28 47]
[29 46]
[30 45]
[31 44]
[33 42]
[34 41]
[35 40]
[81 102]
[83 100]
[84 99]
[86 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
