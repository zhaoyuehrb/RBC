%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCGCAGAGGACUUGCCUCCACCGCCACCUGCAAGUCCGCCCAGCUGUACUUCUGCGCAGGCUCCAGGAGUUGUUUGCUGUCUCUAUGGCAACCCAGUAGCUGGAGUCUGAAG\
) } def
/len { sequence length } bind def

/coor [
[188.18185425 170.78546143]
[176.41116333 161.48756409]
[172.15345764 147.10452271]
[176.96618652 132.89755249]
[189.09020996 124.06304169]
[174.28781128 121.63630676]
[159.48541260 119.20957947]
[144.68301392 116.78285217]
[129.88063049 114.35611725]
[115.07822418 111.92938995]
[84.96607971 125.91289520]
[70.23482513 128.73957825]
[55.50357056 131.56625366]
[40.77231598 134.39294434]
[26.04105949 137.21961975]
[11.30980396 140.04629517]
[-3.42145157 142.87297058]
[-18.15270615 145.69966125]
[-21.18485451 160.59510803]
[-29.69058037 173.19357300]
[-42.37282181 181.57385254]
[-57.29763412 184.45802307]
[-72.18908691 181.40629578]
[-84.77633667 172.88400269]
[-93.13993073 160.19075012]
[-96.00447845 145.26216125]
[-92.93315125 130.37472534]
[-84.39431000 117.79869843]
[-71.69006348 109.45180511]
[-56.75771713 106.60690308]
[-41.87434769 109.69780731]
[-29.30955696 118.25318909]
[-20.97938728 130.96839905]
[-6.24813128 128.14172363]
[8.48312378 125.31504059]
[23.21437836 122.48836517]
[37.94563293 119.66168213]
[52.67689133 116.83500671]
[67.40814209 114.00832367]
[82.13939667 111.18164062]
[86.73600006 96.90329742]
[76.42050934 86.01335907]
[61.13833237 78.67228699]
[63.96198654 61.95513153]
[80.80749512 60.04066849]
[87.31044006 75.69786835]
[97.62593842 86.58779907]
[95.43357086 71.74888611]
[103.75765991 59.27051926]
[118.30045319 55.59531784]
[131.55348206 62.62079239]
[136.67416382 76.71967316]
[131.01869202 90.61268616]
[117.50495911 97.12699127]
[132.30735779 99.55372620]
[147.10975647 101.98045349]
[161.91215515 104.40718079]
[176.71455383 106.83391571]
[191.51693726 109.26064301]
[206.49494934 110.07272339]
[221.47294617 109.26064301]
[236.45094299 108.44856262]
[251.42895508 107.63647461]
[266.40695190 106.82439423]
[281.38494873 106.01230621]
[296.36294556 105.20022583]
[311.34094238 104.38813782]
[326.31896973 103.57605743]
[341.29696655 102.76397705]
[351.82394409 91.28266144]
[367.02532959 90.67246246]
[377.90612793 100.77908325]
[392.88412476 99.96699524]
[407.86212158 99.15491486]
[422.84011841 98.34283447]
[437.94458008 87.91881561]
[453.29650879 96.30241394]
[468.24703979 95.08502960]
[483.19754028 93.86765289]
[498.14807129 92.65026855]
[513.09857178 91.43289185]
[528.04913330 90.21550751]
[542.99963379 88.99813080]
[556.17437744 79.23297119]
[571.10888672 86.00737762]
[572.43981934 102.35243225]
[558.79803467 111.45372772]
[544.21697998 103.94864655]
[529.26647949 105.16603088]
[514.31597900 106.38340759]
[499.36544800 107.60079193]
[484.41494751 108.81816864]
[469.46441650 110.03555298]
[454.51388550 111.25292969]
[446.37329102 120.31272125]
[433.83590698 121.37723541]
[423.65222168 113.32083130]
[408.67422485 114.13291931]
[393.69619751 114.94499969]
[378.71820068 115.75708008]
[368.99389648 126.98088074]
[353.81564331 128.01782227]
[342.10903931 117.74197388]
[327.13104248 118.55406189]
[312.15304565 119.36614227]
[297.17504883 120.17822266]
[282.19702148 120.99031067]
[267.21902466 121.80239105]
[252.24102783 122.61447906]
[237.26303101 123.42655945]
[222.28503418 124.23864746]
[207.30702209 125.05072784]
[218.40409851 135.14305115]
[221.65339661 149.78689575]
[215.86637878 163.62562561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 59]
[6 58]
[7 57]
[8 56]
[9 55]
[10 54]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[41 47]
[42 46]
[60 112]
[61 111]
[62 110]
[63 109]
[64 108]
[65 107]
[66 106]
[67 105]
[68 104]
[69 103]
[72 100]
[73 99]
[74 98]
[75 97]
[77 94]
[78 93]
[79 92]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
