%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGUGGUGGGGAAUUUCCCGCAGGGCGGAAGCUCCAGAACUCCCGGCAAAGCCCAGCUACAGGCGGGCGACUGCGGGGGGCCCCUGAGGCGGCGGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[82.02890778 115.56181335]
[68.17071533 121.30206299]
[54.31251907 127.04231262]
[40.45432663 132.78256226]
[26.59613419 138.52281189]
[23.40952301 159.43237305]
[8.62736607 174.38043213]
[-11.99225616 177.75869751]
[-30.54255104 168.42456055]
[-43.13903809 176.56880188]
[-55.73552322 184.71302795]
[-68.33200836 192.85726929]
[-80.92848969 201.00149536]
[-93.52497864 209.14573669]
[-100.51376343 223.98112488]
[-116.87628174 225.07653809]
[-125.78018188 211.30509949]
[-118.06589508 196.83367920]
[-101.66921234 196.54925537]
[-89.07273102 188.40501404]
[-76.47624207 180.26078796]
[-63.87975693 172.11654663]
[-51.28327179 163.97230530]
[-38.68678665 155.82807922]
[-40.71627045 146.43354797]
[-39.99507523 136.82554626]
[-36.56901932 127.79477692]
[-30.70707130 120.08827209]
[-22.88029099 114.34760284]
[-13.72398376 111.05548096]
[-3.98614621 110.49518585]
[5.53363991 112.72624207]
[14.04986000 117.57841492]
[20.85588264 124.66462708]
[34.71407700 118.92437744]
[48.57226944 113.18412018]
[62.43046188 107.44387054]
[76.28865814 101.70362091]
[76.52743530 92.82223511]
[80.08036041 84.37193298]
[86.65135193 77.58161926]
[95.49295807 73.51615906]
[105.48866272 72.91284180]
[115.29330444 76.05669403]
[123.51409149 82.71482849]
[132.76487732 70.90707397]
[142.01565552 59.09932327]
[144.43580627 43.46431351]
[158.37562561 38.21735764]
[167.62641907 26.40960312]
[176.87719727 14.60185146]
[174.41586304 -2.63619995]
[184.91069031 -16.10820770]
[201.55975342 -17.86838531]
[210.44969177 -29.95015144]
[219.33963013 -42.03191757]
[228.22955322 -54.11368561]
[230.86036682 -63.04025269]
[237.57496643 -66.42065430]
[246.82574463 -78.22840881]
[256.07653809 -90.03616333]
[261.08523560 -106.23336029]
[278.03601074 -105.90421295]
[282.41217041 -89.52478790]
[267.88427734 -80.78537750]
[258.63351440 -68.97763062]
[249.38272095 -57.16987610]
[240.31132507 -45.22375107]
[231.42138672 -33.14198685]
[222.53146362 -21.06021881]
[213.64152527 -8.97845173]
[217.34904480 3.46298695]
[213.10098267 15.93721199]
[202.25358582 23.75898361]
[188.68495178 23.85263443]
[179.43415833 35.66038513]
[170.18338013 47.46813965]
[168.42491150 62.25857544]
[153.82341003 68.35010529]
[144.57261658 80.15785980]
[135.32183838 91.96560669]
[135.54838562 106.96389771]
[145.15158081 118.48686218]
[154.75477600 130.00982666]
[164.35797119 141.53279114]
[173.96116638 153.05575562]
[183.56434631 164.57872009]
[193.16754150 176.10168457]
[202.77073669 187.62464905]
[218.53088379 188.80513000]
[228.77677917 200.83828735]
[227.42973328 216.58506775]
[215.28890991 226.70318604]
[199.55726624 225.18972778]
[189.56808472 212.94261169]
[191.24777222 197.22784424]
[181.64457703 185.70487976]
[172.04138184 174.18191528]
[162.43820190 162.65895081]
[152.83500671 151.13598633]
[143.23181152 139.61302185]
[133.62861633 128.09005737]
[124.02542114 116.56709290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[45 81]
[46 80]
[47 79]
[49 77]
[50 76]
[51 75]
[54 71]
[55 70]
[56 69]
[57 68]
[59 67]
[60 66]
[61 65]
[82 103]
[83 102]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
