%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGAAAAACAGCUCGCGCUGCAGCAAGCUAGCUGGGAAGCUCCCAGUUCUAAAGAGAGGCUGUUUACCAGAACAGCAUAACAAGGGCAGGUCUGACUGCAAGGCUGGGACUGGGAGGCAGAGCCGCCGCCAAGGGGGCCUCGGUUAAACACUGGUCGUUCAAUCACCUGCAAGACGAAGGAGGCAAGG\
) } def
/len { sequence length } bind def

/coor [
[92.99379730 160.07205200]
[85.49404907 160.13374329]
[78.82746887 173.57087708]
[72.16088867 187.00801086]
[65.49430847 200.44515991]
[80.34037018 198.30171204]
[91.38749695 208.44868469]
[90.51060486 223.42303467]
[78.35463715 232.21122742]
[63.86022568 228.34962463]
[57.68791199 214.67817688]
[49.94003296 227.52226257]
[42.19215012 240.36633301]
[34.44426727 253.21041870]
[34.67074966 269.60800171]
[20.44667435 277.76934814]
[6.40454674 269.29876709]
[6.98970509 252.91006470]
[21.60018921 245.46252441]
[29.34807205 232.61845398]
[37.09595490 219.77436829]
[44.84383774 206.93029785]
[52.05716705 193.77857971]
[58.72374725 180.34143066]
[65.39032745 166.90429688]
[72.05690765 153.46716309]
[52.22470474 134.46618652]
[43.24933243 109.19934845]
[46.49081039 83.23913574]
[60.67991638 62.03936005]
[82.31033325 49.78945541]
[79.36885071 35.08069229]
[76.42737579 20.37192917]
[73.48590088 5.66316557]
[70.54441833 -9.04559803]
[67.60294342 -23.75436020]
[64.66146851 -38.46312332]
[61.71998978 -53.17188644]
[52.37111282 -56.76860046]
[45.51237106 -64.07111359]
[42.50714111 -73.62982178]
[43.95366287 -83.54642487]
[36.63241959 -96.63838196]
[29.31117249 -109.73034668]
[21.98992729 -122.82230377]
[14.66868305 -135.91426086]
[7.34743834 -149.00622559]
[0.02619357 -162.09817505]
[-7.29505110 -175.19013977]
[-14.61629581 -188.28208923]
[-21.93754005 -201.37405396]
[-29.25878525 -214.46600342]
[-36.58003235 -227.55796814]
[-50.32400131 -223.93547058]
[-64.81611633 -224.70159912]
[-78.66084290 -229.96475220]
[-90.46996307 -239.39186096]
[-99.00135040 -252.22419739]
[-103.28839111 -267.33651733]
[-102.74652100 -283.33511353]
[-97.24557495 -298.68618774]
[-108.56711578 -308.52603149]
[-119.88866425 -318.36587524]
[-131.21020508 -328.20571899]
[-142.53175354 -338.04559326]
[-153.85328674 -347.88543701]
[-165.17483521 -357.72528076]
[-181.36740112 -360.32006836]
[-186.96295166 -375.73504639]
[-176.20527649 -388.11260986]
[-160.16094971 -384.71978760]
[-155.33497620 -369.04681396]
[-144.01344299 -359.20697021]
[-132.69189453 -349.36712646]
[-121.37035370 -339.52728271]
[-110.04881287 -329.68740845]
[-98.72727203 -319.84756470]
[-87.40572357 -310.00772095]
[-80.63323975 -313.23007202]
[-87.07791138 -326.77502441]
[-93.52259064 -340.32000732]
[-103.83732605 -351.21063232]
[-96.66696930 -364.38583374]
[-81.92088318 -361.63760376]
[-79.97761536 -346.76467896]
[-73.53294373 -333.21969604]
[-67.08827209 -319.67474365]
[-60.31578827 -322.89706421]
[-60.80914307 -337.88894653]
[-61.30249786 -352.88082886]
[-61.79585266 -367.87271118]
[-73.50253296 -378.49011230]
[-74.18931580 -394.27947998]
[-63.44874191 -405.87326050]
[-47.65300369 -406.39306641]
[-36.17343140 -395.53051758]
[-35.82065582 -379.73016357]
[-46.80396652 -368.36608887]
[-46.31061172 -353.37417603]
[-45.81725693 -338.38229370]
[-45.32390213 -323.39041138]
[-26.32403374 -315.75167847]
[-12.03998661 -301.78759766]
[-4.36990738 -283.88821411]
[-4.12579536 -264.91836548]
[-10.96271992 -247.76104736]
[-23.48807144 -234.87921143]
[-16.16682816 -221.78726196]
[-8.84558296 -208.69529724]
[-1.52433777 -195.60333252]
[5.79690695 -182.51138306]
[13.11815166 -169.41941833]
[20.43939590 -156.32746887]
[27.76064110 -143.23550415]
[35.08188629 -130.14353943]
[42.40312958 -117.05158997]
[49.72437668 -103.95963287]
[57.04561996 -90.86766815]
[54.65368271 -105.67572784]
[63.97317505 -117.42932892]
[78.93659210 -118.47623444]
[89.80194092 -108.13484955]
[89.49528503 -93.13798523]
[78.21669006 -83.24954987]
[92.20114899 -88.67494202]
[106.18561554 -94.10033417]
[116.25295258 -106.30522156]
[130.91708374 -103.69511414]
[144.90153503 -109.12050629]
[152.66415405 -123.16049957]
[168.50444031 -125.70307159]
[180.27110291 -114.79778290]
[178.93774414 -98.81023407]
[165.52722168 -90.00470734]
[150.32693481 -95.13604736]
[136.34246826 -89.71065521]
[127.27539062 -77.89382935]
[111.61100006 -80.11586761]
[97.62654114 -74.69048309]
[83.64208221 -69.26509094]
[76.42875671 -56.11336517]
[79.37023163 -41.40460205]
[82.31170654 -26.69583702]
[85.25318146 -11.98707485]
[88.19466400 2.72168827]
[91.13613892 17.43045044]
[94.07761383 32.13921356]
[97.01909637 46.84797668]
[104.22684479 46.57674789]
[111.45285034 47.28491211]
[118.56378937 48.97232437]
[125.42671967 51.62065506]
[131.91159058 55.19350052]
[137.89367676 59.63682938]
[143.25599670 64.87976837]
[147.89158630 70.83570862]
[151.70558167 77.40373230]
[154.61718750 84.47027588]
[156.56132507 91.91115570]
[157.49000549 99.59367371]
[157.37351990 107.37903595]
[156.20114136 115.12483215]
[153.98155212 122.68765259]
[150.74295044 129.92575073]
[146.53276062 136.70164490]
[141.41694641 142.88482666]
[135.47901917 148.35417175]
[128.81871033 153.00033569]
[135.70539856 166.32600403]
[142.59207153 179.65168762]
[155.80155945 188.35916138]
[154.77114868 203.21807861]
[170.13063049 205.42401123]
[181.23661804 216.26083374]
[183.81863403 231.56156921]
[176.88383484 245.44279480]
[163.09880066 252.56687927]
[147.76416016 250.19445801]
[136.77638245 239.23779297]
[134.36050415 223.90994263]
[141.44548035 210.10476685]
[128.72857666 202.35043335]
[129.26640320 186.53836060]
[122.37971497 173.21269226]
[115.49303436 159.88702393]
[107.99328613 159.94869995]
[108.11664581 174.94819641]
[112.86888885 189.17549133]
[100.80632782 198.09147644]
[88.59930420 189.37434387]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[5 23]
[11 22]
[12 21]
[13 20]
[14 19]
[31 148]
[32 147]
[33 146]
[34 145]
[35 144]
[36 143]
[37 142]
[38 141]
[42 118]
[43 117]
[44 116]
[45 115]
[46 114]
[47 113]
[48 112]
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
[88 101]
[89 100]
[90 99]
[91 98]
[124 140]
[125 139]
[126 138]
[128 136]
[129 135]
[168 185]
[169 184]
[170 183]
[172 181]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
