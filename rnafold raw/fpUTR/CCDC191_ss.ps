%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCGUGGGAGUGGUGGUUCGACGGUGUCCUAUGCCUGCUUUCCUUGCGGGCGGAGGAACUACAAUUCCCAGCGUGACCCGGAGGCAGCCCGGGCAGAAGGGCGGUUGCUGCAGCUUUGGCCGAGGUUCGGGCUCGAACUUGGAAA\
) } def
/len { sequence length } bind def

/coor [
[161.74633789 126.73764038]
[147.40383911 122.34529877]
[133.06134033 117.95295715]
[118.71884155 113.56061554]
[104.37633514 109.16827393]
[96.29885101 110.00706482]
[89.77782440 104.52749634]
[75.53178406 99.83172607]
[61.28574371 95.13594818]
[47.03970337 90.44017029]
[29.14174271 94.63111877]
[17.93266296 81.16682434]
[3.59016228 76.77448273]
[-10.75233841 72.38214111]
[-26.21326256 75.73928833]
[-36.11699677 64.61430359]
[-50.45949936 60.22195816]
[-64.80200195 55.82961655]
[-74.92843628 68.27639008]
[-89.01536560 75.87856293]
[-104.90139771 77.50316620]
[-120.16186523 72.93184662]
[-132.47891235 62.88964462]
[-139.99354553 48.93022156]
[-141.58613586 33.19550705]
[-156.01863098 29.10857964]
[-170.45114136 25.02165222]
[-179.63203430 25.69241142]
[-185.14485168 20.69178009]
[-199.48736572 16.29943848]
[-213.82986450 11.90709782]
[-228.17236328 7.51475620]
[-243.63328552 10.87190056]
[-253.53701782 -0.25308365]
[-267.87951660 -4.64542532]
[-282.22201538 -9.03776646]
[-296.56451416 -13.43010807]
[-310.90701294 -17.82245064]
[-325.24954224 -22.21479225]
[-339.59204102 -26.60713387]
[-352.61148071 -17.94526291]
[-368.14688110 -19.72999382]
[-378.86288452 -31.11862946]
[-379.69973755 -46.73380280]
[-370.26229858 -59.20251083]
[-355.00662231 -62.63740540]
[-341.13598633 -55.41663742]
[-335.19967651 -40.94963455]
[-320.85717773 -36.55729294]
[-306.51467896 -32.16495132]
[-292.17218018 -27.77260971]
[-277.82968140 -23.38026810]
[-263.48718262 -18.98792648]
[-249.14468384 -14.59558487]
[-234.70962524 -18.26689911]
[-223.78001404 -6.82774496]
[-209.43751526 -2.43540335]
[-195.09501648 1.95693827]
[-180.75251770 6.34927988]
[-166.36421204 10.58915329]
[-151.93170166 14.67607975]
[-137.49920654 18.76300621]
[-129.19996643 7.40288830]
[-117.49034882 -0.44935474]
[-103.77195740 -3.82918978]
[-89.69528198 -2.30889153]
[-76.96113586 3.94844437]
[-67.11518860 14.20612621]
[-61.36030579 27.24054527]
[-60.40966034 41.48711777]
[-46.06715775 45.87945938]
[-31.72465706 50.27180099]
[-17.28960419 46.60048676]
[-6.35999727 58.03963852]
[7.98250389 62.43198013]
[22.32500458 66.82432556]
[33.19603348 61.42080307]
[45.21159744 65.01509857]
[51.73548126 76.19412994]
[65.98152161 80.88990784]
[80.22756195 85.58568573]
[94.47360229 90.28145599]
[108.76867676 94.82577515]
[123.11118317 99.21811676]
[137.45367432 103.61045837]
[151.79618835 108.00279999]
[166.13868713 112.39514160]
[180.94898987 114.77310181]
[195.94561768 115.09148407]
[210.94223022 115.40985870]
[225.93885803 115.72824097]
[240.93547058 116.04662323]
[255.93209839 116.36500549]
[270.92871094 116.68338776]
[285.92535400 117.00176239]
[300.92196655 117.32014465]
[307.15072632 106.39077759]
[317.39212036 99.21131134]
[329.64761353 97.10721588]
[341.55761719 100.42079926]
[350.85580444 108.45729828]
[355.80041504 119.62947845]
[370.77001953 120.58404541]
[385.73959351 121.53861237]
[400.00418091 114.69521332]
[412.21328735 123.22676086]
[424.01715088 113.06278229]
[439.18484497 114.24409485]
[448.80191040 125.55991364]
[463.77148438 126.51448822]
[478.21841431 118.75442505]
[492.01797485 127.61468506]
[490.97436523 143.98059082]
[476.16116333 151.01631165]
[462.81692505 141.48408508]
[447.84732056 140.52951050]
[436.87084961 150.53213501]
[421.67596436 149.77731323]
[411.25869751 138.19636536]
[398.06484985 145.10804749]
[384.78503418 136.50820923]
[369.81542969 135.55363464]
[354.84585571 134.59907532]
[344.28173828 148.68231201]
[327.24359131 153.69932556]
[310.43988037 147.47990417]
[300.60357666 132.31677246]
[285.60696411 131.99838257]
[270.61035156 131.68000793]
[255.61372375 131.36161804]
[240.61709595 131.04324341]
[225.62046814 130.72486877]
[210.62385559 130.40647888]
[195.62722778 130.08810425]
[180.63061523 129.76971436]
[192.76763916 138.58407593]
[200.37008667 151.51475525]
[202.17068481 166.40629578]
[197.86927795 180.77632141]
[188.18289185 192.22944641]
[174.72619629 198.85644531]
[159.74235535 199.55265808]
[145.72912598 194.20202637]
[135.02243042 183.69647217]
[129.40704346 169.78721619]
[129.81901550 154.79287720]
[136.18968201 141.21293640]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[5 83]
[7 82]
[8 81]
[9 80]
[10 79]
[12 76]
[13 75]
[14 74]
[16 72]
[17 71]
[18 70]
[25 62]
[26 61]
[27 60]
[29 59]
[30 58]
[31 57]
[32 56]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[88 135]
[89 134]
[90 133]
[91 132]
[92 131]
[93 130]
[94 129]
[95 128]
[96 127]
[102 123]
[103 122]
[104 121]
[106 119]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
