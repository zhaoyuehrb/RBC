%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCGAGGGGGCGCUGUGCCAGGCGGCGGCCGUGCGGGGCGGGCGCGCUGCUCCUUCCGCCUCGCGGACCCCGGAAGCGCGCGUGGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[109.01893616 116.56009674]
[100.25482178 118.85505676]
[91.43188477 116.79778290]
[84.58669281 110.86314392]
[69.90042877 113.91498566]
[57.96310043 124.29817963]
[43.92782974 119.31214905]
[31.99050140 129.69534302]
[17.95523262 124.70932007]
[3.26897049 127.76116180]
[-8.66835880 138.14434814]
[-22.70362854 133.15832520]
[-37.38988876 136.21017456]
[-52.07614899 139.26200867]
[-66.76241302 142.31384277]
[-81.44867706 145.36569214]
[-96.13493347 148.41752625]
[-106.10068512 160.98985291]
[-122.14344788 160.89294434]
[-131.95658875 148.20112610]
[-128.01229858 132.65049744]
[-113.33630371 126.17015839]
[-99.18677521 133.73126221]
[-84.50051117 130.67942810]
[-69.81425476 127.62758636]
[-55.12799072 124.57574463]
[-40.44173050 121.52390289]
[-25.75546837 118.47206879]
[-14.86859894 108.30715942]
[0.21713023 113.07489777]
[14.90339184 110.02305603]
[25.79026031 99.85814667]
[40.87599182 104.62589264]
[51.76285934 94.46098328]
[66.84858704 99.22872162]
[81.53485107 96.17687988]
[95.22325134 81.75827026]
[114.22159576 87.61757660]
[128.51876831 83.07986450]
[142.81593323 78.54214478]
[157.11311340 74.00442505]
[171.41027832 69.46670532]
[182.22319031 57.91718674]
[196.69477844 61.44176865]
[210.99194336 56.90405273]
[225.28910828 52.36633301]
[239.58628845 47.82861328]
[253.88345337 43.29089737]
[268.10107422 38.50974274]
[282.23498535 33.48654938]
[296.36889648 28.46335411]
[310.50280762 23.44016075]
[324.54891968 18.17638969]
[338.50308228 12.67357635]
[350.42163086 -4.96018314]
[370.70745850 -1.88579261]
[384.02572632 -8.78676796]
[397.34399414 -15.68774414]
[410.66229248 -22.58871841]
[423.98056030 -29.48969460]
[435.26217651 -42.14517975]
[450.54614258 -34.80783844]
[447.72656250 -18.08999252]
[430.88153076 -16.17141724]
[417.56326294 -9.27044106]
[404.24496460 -2.36946535]
[390.92669678 4.53151035]
[377.60842896 11.43248558]
[376.25909424 20.57878304]
[370.66793823 28.11648369]
[362.05398560 32.18089676]
[352.40209961 31.68974113]
[344.00588989 26.62775230]
[330.05172729 32.13056564]
[324.87634277 37.62819672]
[315.52600098 37.57407379]
[301.39208984 42.59726715]
[287.25817871 47.62046432]
[273.12426758 52.64365768]
[267.76422119 57.96139145]
[258.42117310 57.58806610]
[244.12400818 62.12578583]
[229.82682800 66.66350555]
[215.52966309 71.20122528]
[201.23249817 75.73893738]
[191.44219971 86.96389008]
[175.94799805 83.76387787]
[161.65081787 88.30159760]
[147.35365295 92.83931732]
[133.05648804 97.37703705]
[118.75930786 101.91474915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 36]
[5 35]
[7 33]
[9 31]
[10 30]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[38 91]
[39 90]
[40 89]
[41 88]
[42 87]
[44 85]
[45 84]
[46 83]
[47 82]
[48 81]
[49 79]
[50 78]
[51 77]
[52 76]
[53 74]
[54 73]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
