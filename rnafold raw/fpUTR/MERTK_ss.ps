%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCACUGCCCGGGCCGCCCGGACAGGGAGCUUCGCUGGCGCGCUUGGCCGGCGACAGGACAGGUUCGGGACGUCCAUCUGUCCAUCCGUCCGGAGAGAAAUUACAGAUCCGCAGCCCCGGG\
) } def
/len { sequence length } bind def

/coor [
[130.47996521 407.92507935]
[125.28530884 422.45159912]
[113.04774475 431.84548950]
[97.67222595 433.10925293]
[84.06503296 425.83959961]
[76.56816864 412.35626221]
[77.57385254 396.96170044]
[86.76117706 384.56829834]
[101.19850159 379.13073730]
[104.24217987 364.44277954]
[107.28586578 349.75482178]
[110.32955170 335.06686401]
[113.37323761 320.37890625]
[116.41692352 305.69094849]
[119.27278900 290.96533203]
[113.92222595 277.06494141]
[123.99040222 264.86074829]
[126.65798187 250.09985352]
[126.08344269 235.11085510]
[122.29375458 220.59747314]
[118.50405884 206.08409119]
[114.71437073 191.57070923]
[110.92468262 177.05732727]
[107.13498688 162.54394531]
[102.34518433 156.80035400]
[103.43889618 147.61146545]
[100.02109528 133.00604248]
[89.12154388 131.16180420]
[79.44226837 125.82205200]
[72.06901550 117.58576202]
[67.82887268 107.37681580]
[67.19747162 96.34038544]
[70.24562836 85.71446991]
[58.55236053 76.31939697]
[46.85909271 66.92431641]
[35.16582108 57.52924347]
[23.47255325 48.13417053]
[11.77928257 38.73909378]
[0.08601333 29.34401703]
[-11.60725594 19.94894218]
[-26.90975952 23.16879272]
[-40.67739487 15.75352573]
[-46.40951157 1.20440710]
[-41.39957428 -13.60891628]
[-28.01312637 -21.69204521]
[-12.57083511 -19.22837448]
[-2.36408114 -7.38117313]
[-2.21218085 8.25567245]
[9.48108864 17.65074730]
[21.17435837 27.04582405]
[32.86763000 36.44089890]
[44.56089783 45.83597565]
[56.25416565 55.23104858]
[67.94743347 64.62612915]
[79.64070892 74.02120209]
[88.44103241 69.08415985]
[98.32171631 67.03665161]
[108.35925293 68.07005310]
[115.35618591 54.80193329]
[122.35311127 41.53381348]
[129.35003662 28.26569366]
[136.34696960 14.99757481]
[143.34390259 1.72945619]
[150.34083557 -11.53866291]
[157.33775330 -24.80678177]
[157.46948242 -31.60620499]
[160.61112976 -36.51791000]
[165.04583740 -38.56023026]
[172.71110535 -51.45377731]
[170.16651917 -67.29374695]
[181.07032776 -79.06179047]
[197.05804443 -77.73046875]
[205.86526489 -64.32106018]
[200.73585510 -49.12011337]
[185.60466003 -43.78849792]
[177.93937683 -30.89495277]
[170.60588074 -17.80985260]
[163.60894775 -4.54173374]
[156.61201477 8.72638512]
[149.61509705 21.99450493]
[142.61816406 35.26262283]
[135.62123108 48.53074265]
[128.62429810 61.79886246]
[121.62737274 75.06697845]
[132.34623718 93.43341827]
[129.63786316 114.52570343]
[114.62652588 129.58822632]
[118.04432678 144.19366455]
[121.64836884 158.75425720]
[125.43806458 173.26763916]
[129.22775269 187.78102112]
[133.01744080 202.29440308]
[136.80712891 216.80778503]
[140.59681702 231.32116699]
[145.81976318 217.25984192]
[155.23880005 205.58586121]
[167.87825012 197.50846863]
[182.42886353 193.86434937]
[197.38342285 195.03097534]
[211.19287109 200.88752747]
[222.42677307 210.82731628]
[229.92144775 223.82077026]
[232.90057373 238.52195740]
[231.05555725 253.40806580]
[224.57751465 266.93710327]
[214.13748169 277.70770264]
[200.81686401 284.60415649]
[185.99548340 286.91213989]
[171.20860291 284.39254761]
[157.98793030 277.30639648]
[147.70289612 266.38769531]
[141.41888428 252.76742554]
[138.75129700 267.52832031]
[143.91105652 282.48449707]
[134.03369141 293.63290405]
[135.59516907 302.75396729]
[131.10487366 308.73464966]
[128.06118774 323.42260742]
[125.01750946 338.11053467]
[121.97382355 352.79849243]
[118.93013763 367.48645020]
[115.88645172 382.17440796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 122]
[10 121]
[11 120]
[12 119]
[13 118]
[14 117]
[15 115]
[17 113]
[18 112]
[19 94]
[20 93]
[21 92]
[22 91]
[23 90]
[24 89]
[26 88]
[27 87]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[58 84]
[59 83]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
