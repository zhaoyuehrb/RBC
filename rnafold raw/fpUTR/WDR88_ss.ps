%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGCGCGGGCGCGGGCGCGCGGCGCCACCGUUCCCAUCCAGGCUUGUCGGCGGCCACCGGCGGACCGGGCUUCGAG\
) } def
/len { sequence length } bind def

/coor [
[96.14997864 118.53189087]
[87.89292908 114.54896545]
[82.47606659 107.15299988]
[67.47903442 106.85476685]
[52.48199844 106.55653381]
[38.53071976 114.01792908]
[25.95979881 106.02911377]
[10.96276474 105.73088074]
[-4.03427029 105.43264771]
[-19.03130531 105.13441467]
[-34.02833939 105.43264771]
[-49.00166321 106.32687378]
[-63.97498322 107.22109985]
[-78.94830322 108.11532593]
[-92.26267242 116.66156006]
[-105.42856598 109.69676208]
[-117.10894012 120.69441986]
[-132.96878052 118.27672577]
[-140.84176636 104.29832458]
[-134.68841553 89.48225403]
[-119.22906494 85.19412994]
[-106.32279205 94.72344208]
[-94.07942200 86.24116516]
[-79.84252930 93.14200592]
[-64.86920929 92.24777985]
[-49.89588928 91.35355377]
[-34.92256546 90.45932007]
[-30.98459053 87.33409882]
[-24.97371292 86.84081268]
[-18.73307228 90.13737488]
[-3.73603773 90.43560791]
[11.26099682 90.73384094]
[26.25803185 91.03207397]
[39.13662338 83.54935455]
[52.78023148 91.55950165]
[67.77726746 91.85773468]
[82.77429962 92.15596771]
[99.24750519 81.08737946]
[116.54803467 90.81217957]
[131.47396851 89.32337189]
[144.43803406 80.25455475]
[157.87042236 86.69042206]
[172.79635620 85.20161438]
[187.72229004 83.71280670]
[202.64822388 82.22399902]
[217.57415771 80.73519135]
[232.50007629 79.24638367]
[247.42601013 77.75757599]
[262.28094482 75.67654419]
[277.04141235 73.00657654]
[291.80187988 70.33660889]
[304.00445557 60.26646423]
[317.90570068 65.61477661]
[332.66616821 62.94480896]
[347.42663574 60.27484131]
[361.93658447 51.50572586]
[374.37976074 63.02109528]
[366.75903320 78.16575623]
[350.09658813 75.03530884]
[335.33615112 77.70527649]
[320.57568359 80.37524414]
[309.42886353 90.25440979]
[294.47186279 85.09706879]
[279.71139526 87.76703644]
[264.95092773 90.43701172]
[261.41290283 94.00870514]
[255.50344849 95.21389008]
[248.91482544 92.68350983]
[233.98889160 94.17231750]
[219.06295776 95.66112518]
[204.13702393 97.14993286]
[189.21109009 98.63874054]
[174.28515625 100.12754822]
[159.35922241 101.61635590]
[147.46275330 110.57867432]
[132.96276855 104.24930573]
[118.03684235 105.73810577]
[113.22471619 113.54106140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 37]
[4 36]
[5 35]
[7 33]
[8 32]
[9 31]
[10 30]
[11 27]
[12 26]
[13 25]
[14 24]
[16 22]
[39 77]
[40 76]
[42 74]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[48 68]
[49 65]
[50 64]
[51 63]
[53 61]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
