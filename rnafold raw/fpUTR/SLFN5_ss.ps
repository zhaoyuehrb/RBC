%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGAUAUAAGCCCGGGAUCCCGCCGGGUCAGGUUCUCUGCUCUGGACUUGGGAGGCUCCGUUGCCUGCUCCCGGAGGGAGACGCGCUGCCGAGGAGAACCCAGCGGGAGAACAUUUCAGGAUAGGAAUAGGCCAAGUGCUGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[153.06092834 352.69564819]
[145.74397278 354.34252930]
[141.07864380 368.59857178]
[136.41333008 382.85461426]
[143.78126526 396.83636475]
[139.02487183 411.90792847]
[124.96602631 419.12762451]
[109.94558716 414.21215820]
[102.87491608 400.07775879]
[107.94892120 385.11013794]
[122.15727997 378.18930054]
[126.82260895 363.93325806]
[131.48793030 349.67721558]
[124.68087769 332.15618896]
[128.37913513 316.05722046]
[138.91934204 306.45288086]
[124.39189148 303.27621460]
[114.40247345 292.02117920]
[112.93877411 276.86495972]
[120.77071381 263.59973145]
[114.92106628 249.78735352]
[109.07142639 235.97497559]
[103.22177887 222.16259766]
[97.37213898 208.35021973]
[91.52249146 194.53785706]
[79.43446350 185.83563232]
[81.17742157 170.11071777]
[75.32778168 156.29833984]
[69.47813416 142.48597717]
[63.62849045 128.67359924]
[51.91511917 119.30359650]
[37.15536880 116.62969208]
[22.39561844 113.95578766]
[7.63586855 111.28187561]
[-7.12388134 108.60797119]
[-21.88363075 105.93405914]
[-36.64338303 103.26015472]
[-47.76229858 114.08370209]
[-63.12440109 116.27127838]
[-76.82263947 108.98171234]
[-83.58977509 95.01799011]
[-80.82369232 79.74945068]
[-69.58801270 69.04714966]
[-54.20308304 67.02635193]
[-40.58472443 74.46408844]
[-33.96947479 88.50040436]
[-19.20972443 91.17430878]
[-4.44997358 93.84822083]
[10.30977631 96.52212524]
[25.06952667 99.19603729]
[39.82927704 101.86994171]
[54.58902740 104.54385376]
[58.82946777 98.35768127]
[67.31034851 85.98535156]
[71.55078888 79.79918671]
[63.73354721 66.99720001]
[55.91630554 54.19522476]
[48.09906006 41.39324188]
[32.68033600 37.92359161]
[24.30179024 24.52301216]
[27.93426323 9.14183235]
[41.42267609 0.90543377]
[56.76459122 4.70032454]
[64.85792542 18.27506447]
[60.90103912 33.57600021]
[68.71828461 46.37797928]
[76.53553009 59.17995834]
[84.35277557 71.98194122]
[93.54229736 75.13996887]
[100.01988220 80.72110748]
[105.86952972 66.90872955]
[111.71916962 53.09635544]
[117.56881714 39.28398132]
[123.27252197 25.41070938]
[128.82966614 11.47807789]
[134.38679504 -2.45455408]
[139.79675293 -16.44499588]
[145.05891418 -30.49168968]
[142.65458679 -46.12913895]
[154.36502075 -55.33322144]
[149.05700684 -70.47272491]
[157.70576477 -83.98488617]
[173.67669678 -85.50433350]
[184.71829224 -73.86547852]
[182.36035156 -57.99665070]
[168.41171265 -50.07105637]
[171.19241333 -35.43832397]
[159.10560608 -25.22952843]
[153.84344482 -11.18283367]
[154.44630432 -3.76551771]
[148.31942749 3.10258365]
[142.76229858 17.03521538]
[137.20515442 30.96784592]
[137.65150452 38.39622498]
[131.38119507 45.13362503]
[125.53154755 58.94599915]
[119.68190002 72.75837708]
[113.83226013 86.57074738]
[118.08065796 118.24314880]
[77.44086456 122.82395172]
[83.29051208 136.63632202]
[89.14015198 150.44869995]
[94.98979950 164.26107788]
[107.49623108 173.95126343]
[105.33486938 188.68820190]
[111.18450928 202.50057983]
[117.03415680 216.31295776]
[122.88379669 230.12533569]
[128.73344421 243.93769836]
[134.58308411 257.75009155]
[149.55993652 261.35565186]
[159.42663574 272.95312500]
[160.55897522 287.95919800]
[152.73171997 300.60324097]
[177.70352173 306.72579956]
[185.89421082 337.43164062]
[196.21762085 348.31405640]
[206.54103088 359.19647217]
[216.86444092 370.07891846]
[227.18783569 380.96133423]
[237.51124573 391.84378052]
[252.62226868 396.53070068]
[255.76815796 411.08932495]
[266.09155273 421.97174072]
[283.84048462 426.75747681]
[287.33489990 443.92556763]
[297.88546753 454.58792114]
[313.68887329 454.42059326]
[324.92327881 465.53649902]
[324.92352295 481.34078979]
[313.68945312 492.45703125]
[297.88604736 492.29019165]
[286.88916016 480.93920898]
[287.22308350 465.13845825]
[276.67254639 454.47610474]
[264.53991699 454.08554077]
[255.66065979 445.22964478]
[255.20913696 432.29513550]
[244.88572693 421.41271973]
[230.51309204 417.50415039]
[226.62881470 402.16717529]
[216.30540466 391.28475952]
[205.98200989 380.40231323]
[195.65859985 369.51989746]
[185.33518982 358.63745117]
[175.01177979 347.75503540]
[167.69482422 349.40191650]
[170.98835754 364.03585815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[16 114]
[20 110]
[21 109]
[22 108]
[23 107]
[24 106]
[25 105]
[27 103]
[28 102]
[29 101]
[30 100]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[55 68]
[56 67]
[57 66]
[58 65]
[70 98]
[71 97]
[72 96]
[73 95]
[74 93]
[75 92]
[76 91]
[77 89]
[78 88]
[80 86]
[116 146]
[117 145]
[118 144]
[119 143]
[120 142]
[121 141]
[123 139]
[124 138]
[126 135]
[127 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
