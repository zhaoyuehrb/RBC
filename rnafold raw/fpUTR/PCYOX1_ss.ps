%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAGCCGCGCAGCGGUGGGAGGACUGCGGGGCUCUUGAGGCCAGCUGCAGAGCUUGUGGAGGCC\
) } def
/len { sequence length } bind def

/coor [
[104.77555847 133.07960510]
[89.97041321 131.88218689]
[77.14615631 124.38786316]
[68.83565521 112.07681274]
[66.68026733 97.38053894]
[52.37158203 92.87926483]
[38.06289291 88.37799835]
[23.75420380 83.87672424]
[8.26819992 87.11621857]
[-1.55065978 75.91625214]
[-15.85934830 71.41497803]
[-30.16803741 66.91371155]
[-44.47672653 62.41244125]
[-58.78541565 57.91117096]
[-73.19569397 53.74657059]
[-85.13086700 63.66278076]
[-100.61737823 64.63624573]
[-113.70034027 56.29264832]
[-119.34909821 41.84027100]
[-115.39157867 26.83635139]
[-103.34953308 17.05019760]
[-87.85337830 16.24478912]
[-74.86169434 24.72982025]
[-69.37004852 39.24262619]
[-61.83969116 37.85319519]
[-54.28414536 43.60248184]
[-39.97545624 48.10375214]
[-25.66676712 52.60502243]
[-11.35807896 57.10629272]
[2.95060968 61.60755920]
[17.41316032 58.04611206]
[28.25547218 69.56803894]
[42.56416321 74.06930542]
[56.87284851 78.57057953]
[71.18154144 83.07184601]
[81.36248779 72.25637054]
[95.22444153 66.92039490]
[110.02958679 68.11782074]
[122.85384369 75.61213684]
[131.16435242 87.92318726]
[133.31973267 102.61946106]
[147.62841797 107.12073517]
[161.93710327 111.62200165]
[176.24580383 116.12327576]
[188.24989319 110.81448364]
[200.22131348 115.11389160]
[205.74053955 126.12230682]
[219.82250977 131.28930664]
[233.90449524 136.45631409]
[247.98646545 141.62330627]
[262.06845093 146.79031372]
[277.17169189 141.37998962]
[290.74206543 149.93713379]
[292.36953735 165.89741516]
[280.80566406 177.01750183]
[264.92123413 174.76698303]
[256.90145874 160.87229919]
[242.81947327 155.70529175]
[228.73748779 150.53828430]
[214.65551758 145.37127686]
[200.57353210 140.20428467]
[183.65539551 144.25872803]
[171.74452209 130.43196106]
[157.43583679 125.93069458]
[143.12715149 121.42942047]
[128.81846619 116.92815399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 35]
[6 34]
[7 33]
[8 32]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[15 24]
[41 66]
[42 65]
[43 64]
[44 63]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
