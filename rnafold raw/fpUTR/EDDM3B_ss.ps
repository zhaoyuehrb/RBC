%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGACUCAGACUCUGCUCUUCAGAUCCACACACUGAUCCCAACUACAACCAGUGACCUGAACUUGGAGUCUGAGUAGGGCGGCCCCGGUGACUGAG\
) } def
/len { sequence length } bind def

/coor [
[114.45635986 274.92117310]
[123.07485962 262.64431763]
[135.28944397 253.93778992]
[149.70608521 249.79527283]
[164.67941284 250.68954468]
[178.50262451 256.51992798]
[171.20968628 243.41218567]
[163.91673279 230.30444336]
[156.62377930 217.19670105]
[149.33082581 204.08895874]
[142.03787231 190.98121643]
[134.74491882 177.87347412]
[127.45197296 164.76573181]
[120.15902710 151.65800476]
[112.86607361 138.55026245]
[105.57312012 125.44252014]
[92.24854279 124.86556244]
[80.95646667 117.76865387]
[74.65775299 106.01265717]
[75.00399780 92.68009186]
[81.90438843 81.26686859]
[75.03099060 67.93433380]
[68.15759277 54.60180283]
[61.28419876 41.26927185]
[54.41080093 27.93673897]
[41.21000671 19.21609306]
[42.25522232 4.35820627]
[35.38182449 -8.97432518]
[31.67802620 -10.99264908]
[28.98315811 -13.75972843]
[27.40553093 -16.89750099]
[26.92928505 -20.02981949]
[27.42453766 -22.81994820]
[28.66811180 -25.00253487]
[23.98760986 -39.25360107]
[19.30710793 -53.50466919]
[14.62660599 -67.75573730]
[-0.53377271 -68.86539459]
[-14.11324215 -75.69667816]
[-24.04103279 -87.20787048]
[-28.80322647 -101.64358521]
[-27.67362404 -116.80249023]
[-20.82448387 -130.37295532]
[-9.30024624 -140.28559875]
[5.14172363 -145.02880859]
[20.29913139 -143.87925720]
[33.86058044 -137.01226807]
[43.75805283 -125.47500610]
[48.48225021 -111.02680969]
[47.31277084 -95.87092590]
[40.42794800 -82.31851959]
[28.87767410 -72.43624115]
[33.55817413 -58.18516922]
[38.23867798 -43.93410492]
[42.91917801 -29.68303680]
[48.71435547 -15.84772301]
[55.58775330 -2.51519132]
[68.29691315 5.25182295]
[67.74333191 21.06334114]
[74.61672974 34.39587402]
[81.49012756 47.72840500]
[88.36352539 61.06093597]
[95.23692322 74.39347076]
[111.27059937 76.51905060]
[122.95812225 87.69934082]
[125.79254150 103.62300873]
[118.68086243 118.14956665]
[125.97381592 131.25730896]
[133.26676941 144.36505127]
[140.55972290 157.47279358]
[147.85266113 170.58053589]
[155.14561462 183.68826294]
[162.43856812 196.79600525]
[169.73152161 209.90374756]
[177.02447510 223.01148987]
[184.31742859 236.11923218]
[191.61036682 249.22697449]
[199.06463623 253.47862244]
[202.07789612 260.55969238]
[214.56643677 268.86849976]
[227.05499268 277.17727661]
[243.44653320 277.67681885]
[250.97029114 292.24819946]
[241.88647461 305.90164185]
[225.53973389 304.59164429]
[218.74618530 289.66583252]
[206.25764465 281.35702515]
[193.76908875 273.04824829]
[198.48526001 287.28753662]
[198.19094849 302.28463745]
[192.91973877 316.32794189]
[183.27323914 327.81469727]
[170.35240173 335.43386841]
[155.63188171 338.31594849]
[140.79173279 336.13192749]
[127.52565002 329.13116455]
[117.34769440 318.11257935]
[111.41947937 304.33374023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 77]
[7 76]
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[21 63]
[22 62]
[23 61]
[24 60]
[25 59]
[27 57]
[28 56]
[34 55]
[35 54]
[36 53]
[37 52]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
