%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAUAAAGACAGUGAAAAGAUCAGUGGUUAUCUUUGCAGACGCCACCAUCGCUGUGAGCCCUGUACUAUCAGCC\
) } def
/len { sequence length } bind def

/coor [
[146.85990906 292.67410278]
[137.23365784 287.01727295]
[129.21385193 279.23315430]
[123.26083374 269.76119995]
[119.71800995 259.13803101]
[118.79208374 247.96697998]
[120.54098511 236.88374329]
[124.87028503 226.52029419]
[131.53823853 217.46879578]
[140.16935730 210.24778748]
[134.14393616 196.51118469]
[128.11849976 182.77458191]
[122.09306335 169.03797913]
[116.06763458 155.30137634]
[110.04220581 141.56477356]
[104.01676941 127.82817841]
[95.15262604 127.69557953]
[86.77037048 124.80965424]
[79.70332336 119.45731354]
[74.65404510 112.17065430]
[72.12450409 103.67405701]
[72.36616516 94.81221771]
[75.35500336 86.46611023]
[80.79389191 79.46545410]
[88.14213562 74.50621033]
[85.67321777 59.71079254]
[83.20429993 44.91537476]
[80.73537445 30.11995506]
[78.26645660 15.32453537]
[68.12086487 7.05903244]
[66.50215149 -5.51881075]
[73.74750519 -15.42971992]
[71.89211273 -30.31452942]
[70.03672791 -45.19933701]
[59.71728134 -57.94457626]
[65.84706116 -73.15502930]
[82.12027740 -75.18347931]
[91.79643250 -61.94324112]
[84.92153168 -47.05472565]
[86.77692413 -32.16991806]
[88.63230896 -17.28511047]
[99.98023224 -4.06314993]
[93.06188202 12.85561657]
[95.53079987 27.65103531]
[97.99971771 42.44645691]
[100.46863556 57.24187469]
[102.93755341 72.03729248]
[121.83412170 82.28522491]
[127.96785736 102.88808441]
[117.75337219 121.80274963]
[123.77880096 135.53935242]
[129.80422974 149.27595520]
[135.82966614 163.01254272]
[141.85510254 176.74914551]
[147.88052368 190.48574829]
[153.90596008 204.22235107]
[173.62554932 203.47528076]
[191.88363647 210.85169983]
[205.49218750 225.02667236]
[212.09017944 243.49139404]
[210.55317688 262.99719238]
[201.18481445 280.12719727]
[210.87930298 291.57345581]
[220.57379150 303.01971436]
[236.34281921 304.07489014]
[246.68405151 316.02621460]
[245.46221924 331.78320312]
[233.40222168 341.99749756]
[217.65902710 340.60916138]
[207.57281494 328.44183350]
[209.12753296 312.71420288]
[199.43304443 301.26794434]
[189.73855591 289.82168579]
[179.60908508 294.41259766]
[168.66950989 296.47485352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[32 41]
[33 40]
[34 39]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
