%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACAAGGGAGCUGGCGCCGCCAGCAGCCGCCGAGCUGGGUUGAGCCGCUGGGCCGCGCCGCGCGCCGCCGCCGUCUGGGAGGCUCGGCCCGGCCGCCCGAGCAGGCCGCGCGCGGGCCGCCGGGCCCGAGGCCAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[182.58734131 181.79188538]
[167.68037415 180.12397766]
[155.41355896 171.49116516]
[148.81167603 158.02212524]
[149.50259399 143.03805542]
[157.31594849 130.23370361]
[170.32395935 122.76670074]
[155.65873718 119.61534119]
[143.32737732 127.89019012]
[128.40985107 124.90317535]
[119.81404114 111.91280365]
[105.14881897 108.76144409]
[97.16240692 110.28794861]
[90.19365692 105.37306213]
[75.60227966 101.89575958]
[61.01089859 98.41845703]
[46.41952133 94.94115448]
[31.82814026 91.46385193]
[22.67163086 92.51966858]
[16.95218468 87.74312592]
[2.44189763 83.94160461]
[-9.11770916 89.78127289]
[-21.16236115 86.25937653]
[-27.34484863 75.80332184]
[-41.76684189 71.67947388]
[-50.96129227 72.32635498]
[-56.46228027 67.29975891]
[-70.78881836 62.85562897]
[-86.26177216 66.15689087]
[-96.12524414 54.99619675]
[-110.45178223 50.55206299]
[-124.77832031 46.10792923]
[-140.25126648 49.40918732]
[-150.11474609 38.24849319]
[-164.44128418 33.80435944]
[-178.76782227 29.36022568]
[-187.97441101 29.80209923]
[-193.36204529 24.65420151]
[-207.58601379 19.89199066]
[-221.61755371 27.16463852]
[-236.65641785 22.30580902]
[-243.78030396 8.19816113]
[-238.76274109 -6.78848839]
[-224.58056641 -13.76282692]
[-209.64781189 -8.58710194]
[-202.82380676 5.66801977]
[-188.59983826 10.43023014]
[-174.32368469 15.03368855]
[-159.99714661 19.47782135]
[-145.67062378 23.92195511]
[-131.22239685 20.30282021]
[-120.33419037 31.78138924]
[-106.00765228 36.22552490]
[-91.68111420 40.66965866]
[-77.23288727 37.05052185]
[-66.34468842 48.52909088]
[-52.01814651 52.97322464]
[-37.64299011 57.25748444]
[-23.22099876 61.38133240]
[-6.49481821 56.18588257]
[6.24341726 69.43131256]
[20.75370407 73.23283386]
[35.30544281 76.87247467]
[49.89682007 80.34977722]
[64.48820496 83.82707977]
[79.07958221 87.30438232]
[93.67095947 90.78168488]
[108.30017090 94.09621429]
[122.96540070 97.24757385]
[136.13890076 88.93513489]
[150.96662903 92.33997345]
[158.81008911 104.95011139]
[173.47532654 108.10147095]
[184.33882141 104.93646240]
[192.85159302 110.26904297]
[207.85066223 110.43614197]
[222.84973145 110.60324860]
[237.84880066 110.77034760]
[252.84786987 110.93745422]
[258.74197388 103.39434814]
[267.34036255 99.51152802]
[276.62011719 100.06146240]
[284.46261597 104.78983307]
[289.13723755 112.50314331]
[304.09164429 113.67169952]
[319.04605103 114.84025574]
[334.00045776 116.00881195]
[348.95486450 117.17736816]
[363.92138672 118.17926025]
[378.89810181 119.01435089]
[393.87484741 119.84944916]
[408.85159302 120.68454742]
[423.82830811 121.51964569]
[438.80505371 122.35474396]
[453.01458740 115.39774323]
[465.29135132 123.83161163]
[480.26809692 124.66670990]
[495.24484253 125.50180817]
[510.22155762 126.33690643]
[525.19830322 127.17200470]
[539.40783691 120.21500397]
[551.68463135 128.64888000]
[566.66131592 129.48397827]
[577.23168945 117.95999908]
[592.74316406 115.97788239]
[605.87164307 124.47350311]
[610.41839600 139.43550110]
[604.23645020 153.79927063]
[590.24481201 160.78268433]
[575.04986572 157.08837891]
[565.82623291 144.46070862]
[550.84948730 143.62561035]
[537.71124268 150.64233398]
[524.36322021 142.14874268]
[509.38647461 141.31364441]
[494.40972900 140.47854614]
[479.43298340 139.64344788]
[464.45626831 138.80834961]
[451.31796265 145.82508850]
[437.96997070 137.33148193]
[422.99322510 136.49638367]
[408.01647949 135.66128540]
[393.03976440 134.82618713]
[378.06301880 133.99108887]
[363.08627319 133.15599060]
[356.17694092 135.94676208]
[347.78631592 132.13177490]
[332.83190918 130.96322632]
[317.87750244 129.79466248]
[302.92306519 128.62611389]
[287.96865845 127.45755005]
[270.30032349 138.03961182]
[252.68077087 125.93652344]
[237.68170166 125.76941681]
[222.68263245 125.60231781]
[207.68356323 125.43521118]
[192.68449402 125.26811218]
[203.72164917 135.42591858]
[208.51193237 149.64047241]
[205.87416077 164.40672302]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 73]
[8 72]
[11 69]
[12 68]
[14 67]
[15 66]
[16 65]
[17 64]
[18 63]
[20 62]
[21 61]
[24 59]
[25 58]
[27 57]
[28 56]
[30 54]
[31 53]
[32 52]
[34 50]
[35 49]
[36 48]
[38 47]
[39 46]
[75 137]
[76 136]
[77 135]
[78 134]
[79 133]
[84 131]
[85 130]
[86 129]
[87 128]
[88 127]
[89 125]
[90 124]
[91 123]
[92 122]
[93 121]
[94 120]
[96 118]
[97 117]
[98 116]
[99 115]
[100 114]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
