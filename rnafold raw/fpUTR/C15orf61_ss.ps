%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGGGGGCGCGCUUGCGCGCCAGCGGCUGCGGACACCAGCCUGCGUCCCCGGCGCGGCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[153.76626587 238.36332703]
[148.19132996 224.43780518]
[142.28657532 210.64891052]
[136.05534363 197.00442505]
[129.82412720 183.35993958]
[123.59289551 169.71546936]
[117.36167145 156.07098389]
[111.13044739 142.42651367]
[104.89921570 128.78202820]
[98.66799164 115.13755035]
[86.04919434 107.02793884]
[71.04919434 107.02793884]
[56.04919052 107.02793884]
[41.04919052 107.02793884]
[27.12538719 115.69163513]
[12.78995323 107.72750854]
[12.78995323 91.32836151]
[27.12538719 83.36423492]
[41.04919052 92.02793884]
[56.04919052 92.02793884]
[71.04919434 92.02793884]
[86.04919434 92.02793884]
[89.63274384 90.40132141]
[93.15676117 89.91321564]
[96.30945587 90.43785858]
[99.84584045 75.86068726]
[103.03432465 61.20348358]
[105.87309265 46.47455215]
[108.71186066 31.74562263]
[111.55062866 17.01669121]
[114.38939667 2.28776121]
[112.92060852 -7.10030937]
[117.72963715 -13.06705761]
[112.59281158 -28.64091492]
[123.71215057 -40.69464111]
[139.64903259 -36.82839584]
[144.00895691 -21.01944160]
[132.30680847 -9.53067303]
[129.11833191 5.12652969]
[126.27955627 19.85546112]
[123.44078827 34.58439255]
[120.60202026 49.31332016]
[117.76325226 64.04225159]
[119.65901947 71.46753693]
[114.42301941 79.39707184]
[110.88663483 93.97424316]
[112.31247711 108.90631866]
[118.54370117 122.55080414]
[124.77492523 136.19528198]
[131.00614929 149.83976746]
[137.23738098 163.48423767]
[143.46859741 177.12872314]
[149.69982910 190.77320862]
[155.93104553 204.41767883]
[162.57310486 211.21299744]
[162.11683655 218.86286926]
[167.69177246 232.78839111]
[182.85946655 235.60700989]
[194.07981873 246.19508362]
[197.77246094 261.17401123]
[192.75906372 275.76403809]
[180.63940430 285.30960083]
[165.28080750 286.76467896]
[151.58416748 279.66500854]
[143.92001343 266.27603149]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[3 54]
[4 53]
[5 52]
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[11 22]
[12 21]
[13 20]
[14 19]
[25 46]
[26 45]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
