%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUAUCCAAGUGCACUGUAUGGCCUCAGCCUACAGAACCCUUAACUCUUAAAUUUAUCAUCUAUUGAACAAUUUCUAACAUCAAAAUUUGUACUACUUUCAACACCAAACAUCACUAAUUAAUGAAAGAAAAAUACAGAGGAAUUAUUUGUUUUGUUUCAUU\
) } def
/len { sequence length } bind def

/coor [
[125.01107788 119.34571838]
[98.60685730 127.73339081]
[93.83600616 141.95446777]
[89.06515503 156.17553711]
[84.29430389 170.39660645]
[91.55841827 184.43257141]
[86.69045258 199.46847534]
[72.57848358 206.58378601]
[57.59488297 201.55712891]
[50.62916183 187.37071228]
[55.81396103 172.44110107]
[70.07322693 165.62576294]
[74.84407806 151.40467834]
[79.61493683 137.18360901]
[84.38578796 122.96253204]
[68.33238983 111.06629944]
[62.44827652 88.33217621]
[49.60304260 96.07813263]
[36.75780869 103.82409668]
[23.91257095 111.57006073]
[11.06733608 119.31602478]
[5.30159760 126.46057892]
[-2.09701943 127.08449554]
[-15.08740044 134.58448792]
[-28.07778168 142.08448792]
[-35.80429840 156.54937744]
[-52.20121384 156.81996155]
[-60.40078735 142.61788940]
[-51.96799850 128.55302429]
[-35.57778168 129.09411621]
[-22.58740044 121.59411621]
[-9.59701920 114.09411621]
[3.32137418 106.47078705]
[16.16660881 98.72482300]
[29.01184464 90.97886658]
[41.85708237 83.23290253]
[54.70231628 75.48693848]
[55.91082001 68.08494568]
[40.92445374 68.72433472]
[25.93808746 69.36371613]
[10.95172215 70.00310516]
[-3.52466273 73.93175507]
[-17.33550644 68.07849884]
[-24.58028984 54.94407654]
[-22.16376305 40.14001083]
[-11.11836052 29.99116516]
[3.83690143 28.83351517]
[16.31347084 37.16284943]
[30.31825829 42.53555298]
[44.32304382 47.90825653]
[58.32783127 53.28095627]
[59.53633881 45.87896347]
[49.82179260 34.44972229]
[40.10724258 23.02047920]
[30.39269829 11.59123611]
[20.67815018 0.16199358]
[5.16683435 -1.26517558]
[-4.52228355 -12.99444008]
[-3.06610489 -27.77331543]
[-12.78065205 -39.20255661]
[-22.49519920 -50.63179779]
[-38.30517578 -53.35652924]
[-45.90567017 -67.48493958]
[-39.46623230 -82.17892456]
[-23.92664719 -86.16651917]
[-11.20755577 -76.38877106]
[-11.06595612 -60.34634781]
[-1.35140932 -48.91710281]
[8.36313725 -37.48786163]
[23.18352890 -36.54363251]
[33.19827652 -25.09114075]
[32.10739517 -9.55255318]
[41.82194138 1.87668920]
[51.53648758 13.30593204]
[61.25103378 24.73517418]
[70.96558380 36.16441727]
[78.18156433 34.12002563]
[81.85626221 19.57710075]
[92.61354065 30.03124046]
[99.82952881 27.98684883]
[102.10549927 13.16052246]
[104.38146973 -1.66580415]
[93.26277924 -12.48959541]
[90.66282654 -27.78730202]
[97.58133698 -41.67664719]
[111.35800171 -48.81688690]
[126.69541931 -46.46246338]
[137.69602966 -35.51869202]
[140.12988281 -20.19367981]
[133.06111145 -6.38020658]
[119.20779419 0.61016577]
[116.93182373 15.43649197]
[114.65585327 30.26281929]
[123.76132202 18.34265137]
[132.86679077 6.42248392]
[135.45162964 -8.35312653]
[141.07118225 -22.26069832]
[149.47663879 -34.68439484]
[160.29580688 -45.07409286]
[173.04957581 -52.96973038]
[187.17324829 -58.02168655]
[202.04138184 -60.00625610]
[216.99562073 -58.83555984]
[231.37379456 -54.56144333]
[244.53923035 -47.37316132]
[255.90895081 -37.58901215]
[264.97949219 -25.64225006]
[271.34921265 -12.06187534]
[274.73608398 2.55076313]
[274.99008179 17.54861259]
[272.10000610 32.26755905]
[266.19381714 46.05584717]
[257.53302002 58.30291748]
[246.50115967 68.46646881]
[233.58668518 76.09645844]
[219.36149597 80.85501862]
[204.45547485 82.53144073]
[189.52865601 81.05149078]
[175.24201965 76.48071289]
[162.22817993 69.02148438]
[151.06677246 59.00785065]
[136.54081726 55.26659393]
[122.01488495 51.52533722]
[132.96894836 61.77270508]
[143.92300415 72.02007294]
[154.87705994 82.26744080]
[165.83111572 92.51480865]
[176.78518677 102.76218414]
[187.73924255 113.00955200]
[203.10290527 116.78692627]
[207.11146545 131.13198853]
[218.06552124 141.37934875]
[229.01957703 151.62672424]
[234.19380188 152.82318115]
[237.98820496 155.62547302]
[240.01933289 159.22669983]
[240.28518677 162.78558350]
[250.63636780 173.64160156]
[260.98754883 184.49760437]
[271.33874512 195.35362244]
[281.68994141 206.20962524]
[297.28350830 205.03733826]
[309.95217896 214.20458984]
[313.71420288 229.38290405]
[306.79324341 243.40554810]
[292.45718384 249.65144348]
[277.47506714 245.17147827]
[268.92098999 232.08094788]
[270.83392334 216.56082153]
[260.48272705 205.70480347]
[250.13154602 194.84880066]
[239.78036499 183.99278259]
[229.42918396 173.13677979]
[218.77221680 162.58078003]
[207.81814575 152.33340454]
[196.86408997 142.08604431]
[182.28393555 139.04162598]
[177.49188232 123.96360779]
[166.53781128 113.71623993]
[155.58375549 103.46887207]
[144.62969971 93.22150421]
[133.67562866 82.97413635]
[122.72157288 72.72676849]
[111.76751709 62.47939682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[23 32]
[24 31]
[25 30]
[52 76]
[53 75]
[54 74]
[55 73]
[56 72]
[59 69]
[60 68]
[61 67]
[80 93]
[81 92]
[82 91]
[123 164]
[124 163]
[125 162]
[126 161]
[127 160]
[128 159]
[129 158]
[131 156]
[132 155]
[133 154]
[137 153]
[138 152]
[139 151]
[140 150]
[141 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
