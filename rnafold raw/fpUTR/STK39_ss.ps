%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCCUCCCCUCCUAGCUGGCUUCGGCGGGGACGGCGGCGGCGGCGGCGGGCGGGGAGGGCGUGCGCCGGCCGAGAGGUGUCGGCGGCGAGGCAAAGGAAGUUUCAAGUGGAAGGUCGUCCGUCGGCCGGCGCGUCCUCCUGCUCUCCUCCGCAGCAUC\
) } def
/len { sequence length } bind def

/coor [
[-54.35375977 297.95025635]
[-65.11444855 308.40051270]
[-75.87512970 318.85073853]
[-80.38463593 334.01568604]
[-94.90536499 337.33197021]
[-105.66604614 347.78222656]
[-116.32426453 358.33694458]
[-126.87899780 368.99517822]
[-137.43373108 379.65338135]
[-147.98846436 390.31161499]
[-158.54319763 400.96981812]
[-143.81159973 403.79470825]
[-136.65859985 416.97933960]
[-142.32205200 430.86907959]
[-156.65484619 435.29302979]
[-169.16159058 427.01162720]
[-170.68392944 412.08868408]
[-182.22669983 421.66809082]
[-193.76945496 431.24746704]
[-205.31221008 440.82687378]
[-210.49395752 456.38583374]
[-226.61141968 459.41229248]
[-237.08433533 446.79284668]
[-231.13906860 431.50933838]
[-214.89160156 429.28411865]
[-203.34884644 419.70471191]
[-191.80607605 410.12533569]
[-180.26332092 400.54592896]
[-169.20141602 390.41506958]
[-158.64668274 379.75686646]
[-148.09194946 369.09866333]
[-137.53721619 358.44042969]
[-126.98248291 347.78222656]
[-124.49782562 340.78125000]
[-116.11629486 337.02154541]
[-105.35560608 326.57128906]
[-101.61577606 312.15383911]
[-86.32537842 308.09005737]
[-75.56468964 297.63980103]
[-64.80400848 287.18957520]
[-61.31547165 264.31375122]
[-38.28204727 258.10928345]
[-28.81572723 246.47361755]
[-19.34940910 234.83793640]
[-9.88308907 223.20227051]
[-7.85297251 208.44667053]
[6.85806084 202.62463379]
[16.32438087 190.98896790]
[18.35449600 176.23336792]
[33.06552887 170.41133118]
[42.53184891 158.77566528]
[51.99816895 147.13998413]
[61.46448898 135.50431824]
[70.93080902 123.86865234]
[80.39712524 112.23297882]
[89.86344910 100.59731293]
[92.11959076 92.81310272]
[99.62975311 88.82932281]
[109.32130432 77.38057709]
[119.01285553 65.93182373]
[128.70440674 54.48307419]
[138.39595032 43.03432465]
[139.96492004 36.52755356]
[144.00090027 32.43655396]
[148.69589233 31.33754730]
[158.82673645 20.27564240]
[168.95759583 9.21373558]
[179.08845520 -1.84817028]
[189.21931458 -12.91007614]
[199.35015869 -23.97198296]
[209.48101807 -35.03388977]
[219.61187744 -46.09579468]
[229.74273682 -57.15769958]
[239.87358093 -68.21960449]
[250.00444031 -79.28150940]
[250.22640991 -92.21078491]
[258.93450928 -101.21978760]
[271.04687500 -101.83865356]
[281.39166260 -112.70078278]
[291.62994385 -123.66332245]
[301.76080322 -134.72523499]
[311.78326416 -145.88545227]
[321.69635010 -157.14291382]
[320.87756348 -172.69822693]
[331.09121704 -183.97367859]
[345.92587280 -184.65838623]
[349.23919678 -200.12875366]
[363.45712280 -204.56718445]
[373.37023926 -215.82464600]
[383.06176758 -227.27340698]
[392.52810669 -238.90907288]
[401.99441528 -250.54473877]
[411.46072388 -262.18041992]
[420.92706299 -273.81607056]
[417.80072021 -289.13796997]
[425.29992676 -302.86004639]
[439.88378906 -308.50320435]
[454.66625977 -303.40289307]
[462.66748047 -289.96731567]
[460.10952759 -274.54034424]
[448.20019531 -264.40615845]
[432.56271362 -264.34976196]
[423.09640503 -252.71409607]
[413.63009644 -241.07841492]
[404.16375732 -229.44274902]
[394.69744873 -217.80708313]
[394.29483032 -213.00201416]
[390.83612061 -208.41261292]
[384.62768555 -205.91156006]
[374.71459961 -194.65408325]
[372.11032104 -179.98892212]
[357.18334961 -174.74530029]
[358.38064575 -159.94319153]
[348.48773193 -148.38529968]
[332.95379639 -147.22982788]
[323.04071045 -135.97236633]
[320.96990967 -128.83802795]
[312.82269287 -124.59437561]
[302.69186401 -113.53247070]
[300.48223877 -106.43990326]
[292.25378418 -102.35601807]
[281.90902710 -91.49388885]
[278.73419189 -74.25636292]
[261.06634521 -69.15065765]
[250.93548584 -58.08875275]
[240.80464172 -47.02684402]
[230.67378235 -35.96493912]
[220.54292297 -24.90303230]
[210.41206360 -13.84112644]
[200.28121948 -2.77922082]
[190.15036011 8.28268528]
[180.01950073 19.34459114]
[169.88864136 30.40649796]
[159.75779724 41.46840286]
[149.84469604 52.72587585]
[140.15315247 64.17462158]
[130.46160889 75.62337494]
[120.77005768 87.07212067]
[111.07850647 98.52087402]
[101.49911499 110.06362915]
[92.03279877 121.69930267]
[82.56647491 133.33497620]
[73.10015869 144.97064209]
[63.63383865 156.60630798]
[54.16751862 168.24197388]
[44.70119858 179.87765503]
[41.99398804 195.46551514]
[27.96004868 200.45529175]
[18.49373055 212.09095764]
[15.78651905 227.67881775]
[1.75258005 232.66859436]
[-7.71373892 244.30426025]
[-17.18005753 255.93992615]
[-26.64637756 267.57559204]
[-24.17920113 274.12265015]
[-23.88738632 281.06118774]
[-25.76788521 287.69262695]
[-29.60054779 293.35934448]
[-34.97336197 297.50997925]
[-41.32655716 299.75308228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[5 36]
[6 35]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[17 28]
[18 27]
[19 26]
[20 25]
[42 154]
[43 153]
[44 152]
[45 151]
[47 149]
[48 148]
[50 146]
[51 145]
[52 144]
[53 143]
[54 142]
[55 141]
[56 140]
[58 139]
[59 138]
[60 137]
[61 136]
[62 135]
[65 134]
[66 133]
[67 132]
[68 131]
[69 130]
[70 129]
[71 128]
[72 127]
[73 126]
[74 125]
[75 124]
[78 122]
[79 121]
[80 119]
[81 118]
[82 116]
[83 115]
[86 112]
[88 110]
[89 109]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
