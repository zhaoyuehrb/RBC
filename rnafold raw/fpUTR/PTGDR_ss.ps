%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCGAGCCGCGCGCGGAGCUGCCGGGGGCUCCUUAGCACCCGGGCGCCGGGGCCCUCGCCCUUCCGCAGCCUUCACUCCAGCCCUCUGCUCCCGCACGCC\
) } def
/len { sequence length } bind def

/coor [
[73.39653015 308.56567383]
[66.11626434 321.98062134]
[53.73143387 330.90130615]
[38.70104980 333.55651855]
[24.00940323 329.41909790]
[12.57353401 319.31051636]
[6.66404247 305.23782349]
[7.45426273 289.99517822]
[14.78729534 276.60900879]
[27.20716095 267.73715210]
[42.24788666 265.14114380]
[46.31398773 250.70275879]
[50.38009262 236.26437378]
[46.38251114 221.91625977]
[57.57097626 210.73016357]
[61.63708115 196.29177856]
[65.70318604 181.85339355]
[69.76928711 167.41502380]
[68.53163910 159.99760437]
[74.18581390 152.60189819]
[68.85604095 141.62414551]
[72.62162018 129.59339905]
[83.96141052 123.21732330]
[88.90016937 109.05368042]
[86.47472382 95.28382874]
[96.93618774 86.00755310]
[101.87495422 71.84391785]
[106.81371307 57.68027878]
[111.75247192 43.51664352]
[116.69123077 29.35300446]
[121.62998962 15.18936539]
[126.56874847 1.02572715]
[119.30863190 -8.64326286]
[117.71479797 -20.50697899]
[122.07656097 -31.52431488]
[131.17175293 -38.92919159]
[142.60630798 -40.92486954]
[148.39935303 -54.76107788]
[140.45138550 -64.65988922]
[137.55087280 -76.94402313]
[140.20094299 -89.21010590]
[147.82496643 -99.08589935]
[158.89065552 -104.68906403]
[171.21768188 -104.98579407]
[177.84346008 -118.44309998]
[184.46923828 -131.90040588]
[191.09501648 -145.35771179]
[197.51480103 -158.91448975]
[203.72711182 -172.56759644]
[200.72731018 -192.38597107]
[216.61772156 -203.22406006]
[221.98611450 -217.23049927]
[227.35452271 -231.23692322]
[232.72291565 -245.24336243]
[238.09132385 -259.24981689]
[234.98471069 -275.35202026]
[247.55187988 -285.88760376]
[262.86477661 -280.01843262]
[265.17083740 -263.78225708]
[252.09776306 -253.88140869]
[246.72935486 -239.87496948]
[241.36096191 -225.86853027]
[235.99255371 -211.86209106]
[230.62416077 -197.85565186]
[235.68328857 -188.73898315]
[234.77770996 -178.12950134]
[227.96916199 -169.65625000]
[217.38021851 -166.35528564]
[211.16790771 -152.70217896]
[211.26438904 -145.18284607]
[204.55232239 -138.73191833]
[197.92654419 -125.27462006]
[191.30076599 -111.81731415]
[184.67498779 -98.36001587]
[193.62675476 -83.29576111]
[191.85647583 -65.70631409]
[179.87409973 -52.49834824]
[162.23556519 -48.96803284]
[156.44252014 -35.13182449]
[164.43907166 -18.80452538]
[158.01428223 -1.46126759]
[140.73239136 5.96448708]
[135.79362488 20.12812614]
[130.85487366 34.29176331]
[125.91610718 48.45540237]
[120.97734833 62.61904144]
[116.03858948 76.78267670]
[111.09983063 90.94631958]
[113.52527618 104.71617126]
[103.06381226 113.99244690]
[98.12504578 128.15608215]
[102.04140472 146.06761169]
[88.49347687 157.10643005]
[84.20766449 171.48112488]
[80.14156342 185.91949463]
[76.07546234 200.35787964]
[72.00936127 214.79626465]
[75.71610260 230.17710876]
[64.81847382 240.33047485]
[60.75236893 254.76885986]
[56.68626785 269.20724487]
[68.16184998 279.27072144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 101]
[12 100]
[13 99]
[15 97]
[16 96]
[17 95]
[18 94]
[20 93]
[23 91]
[24 90]
[26 88]
[27 87]
[28 86]
[29 85]
[30 84]
[31 83]
[32 82]
[37 79]
[38 78]
[44 74]
[45 73]
[46 72]
[47 71]
[48 69]
[49 68]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
