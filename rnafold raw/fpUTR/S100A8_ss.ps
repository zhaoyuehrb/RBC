%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAACCAGAGACUGUAGCAACUCUGGCAGGGAGAAGCUGUCUCUGAUGGCCUGAAGCUGUGGGCAGCUGGCCAAGCCUAACCGCUAUAAAAAGGAGCUGCCUCUCAGCCCUGC\
) } def
/len { sequence length } bind def

/coor [
[91.42299652 188.55633545]
[76.49142456 189.98750305]
[62.71234894 184.05984497]
[53.48340988 172.23500061]
[51.08027267 157.42875671]
[56.09550476 143.29202271]
[67.29244995 133.31060791]
[81.90895081 129.94572449]
[66.95842743 131.16310120]
[52.00791168 132.38049316]
[37.05739594 133.59786987]
[22.10687828 134.81524658]
[7.15635967 136.03263855]
[-7.79415798 137.25001526]
[-12.30059052 140.38543701]
[-17.07919312 141.29098511]
[-21.20053101 140.25611877]
[-23.99916267 137.90869141]
[-38.99916458 137.90869141]
[-53.99916458 137.90869141]
[-65.13228607 148.80323792]
[-80.34442139 148.58955383]
[-90.66210175 137.90869141]
[-105.66210175 137.90869141]
[-120.66210175 137.90869141]
[-135.66210938 137.90869141]
[-147.97732544 148.19046021]
[-163.66482544 144.83157349]
[-170.69047546 130.40869141]
[-163.66482544 115.98580170]
[-147.97732544 112.62692261]
[-135.66210938 122.90869141]
[-120.66210175 122.90869141]
[-105.66210175 122.90869141]
[-90.66210175 122.90869141]
[-80.34442139 112.22781372]
[-65.13228607 112.01413727]
[-53.99916458 122.90869141]
[-38.99916458 122.90869141]
[-23.99916267 122.90869141]
[-9.01153946 122.29949188]
[5.93897867 121.08211517]
[20.88949585 119.86473083]
[35.84001541 118.64735413]
[50.79053116 117.42996979]
[65.74105072 116.21259308]
[80.69156647 114.99520874]
[75.23938751 91.56969452]
[92.99385834 73.02965546]
[96.21841431 58.38034821]
[99.44297028 43.73103714]
[102.66752625 29.08172989]
[105.89208221 14.43242264]
[104.21750641 9.20417118]
[104.75447845 4.37025738]
[106.95346069 0.73421216]
[110.01895142 -1.25212312]
[114.42179108 -15.59140491]
[118.82463074 -29.93068695]
[123.22747040 -44.26996994]
[127.63031006 -58.60925293]
[123.43517303 -74.46273041]
[135.25627136 -85.82907104]
[150.93307495 -81.01554871]
[154.33862305 -64.97390747]
[141.96958923 -54.20641327]
[137.56675720 -39.86713028]
[133.16390991 -25.52784920]
[128.76107788 -11.18856716]
[124.35823822 3.15071535]
[120.54138947 17.65697861]
[117.31683350 32.30628586]
[114.09227753 46.95559692]
[110.86772156 61.60490417]
[107.64316559 76.25421143]
[118.67177582 86.42129517]
[133.01106262 82.01846313]
[147.35034180 77.61562347]
[154.53083801 63.53669739]
[169.58909607 58.73831177]
[183.59130859 66.06725311]
[188.23022461 81.17539978]
[180.75364685 95.09934998]
[165.59730530 99.57826996]
[151.75318909 91.95490265]
[137.41389465 96.35774231]
[123.07461548 100.76058197]
[120.87319946 107.93022156]
[135.49282837 104.57365417]
[145.70942688 115.55641937]
[141.30627441 129.89559937]
[126.68657684 133.25184631]
[116.47035980 122.26950073]
[114.26894379 129.43914795]
[123.66658783 141.13034058]
[133.06423950 152.82154846]
[140.98937988 157.63243103]
[142.55291748 164.95896912]
[151.63052368 176.90036011]
[160.70814514 188.84175110]
[169.78575134 200.78315735]
[185.42385864 204.36495972]
[192.24354553 218.88636780]
[185.01332092 233.20780945]
[169.27961731 236.34309387]
[157.11196899 225.88710022]
[157.84436035 209.86076355]
[148.76673889 197.91937256]
[139.68913269 185.97798157]
[130.61151123 174.03657532]
[121.37303925 162.21919250]
[111.97538757 150.52799988]
[102.57774353 138.83679199]
[110.18694305 151.76350403]
[110.64001465 166.75666809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 47]
[9 46]
[10 45]
[11 44]
[12 43]
[13 42]
[14 41]
[18 40]
[19 39]
[20 38]
[23 35]
[24 34]
[25 33]
[26 32]
[49 75]
[50 74]
[51 73]
[52 72]
[53 71]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[76 87]
[77 86]
[78 85]
[94 113]
[95 112]
[96 111]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
