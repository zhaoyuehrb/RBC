%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGCGCGGGAGGCCAGUUGGGAGGCGCACAUCCGGCGGUUACCCGGUGCUUCAUAAAGCCGCUUUCGCCGCUGGCUGUCGCCGCGUUUUGCCUCCGCAGCAGCUCUGGGCUCUUCUCAGCUGCGCGAGCAGCUGCUCCAAUGCCCCGGAGUGGCC\
) } def
/len { sequence length } bind def

/coor [
[171.50039673 140.55938721]
[157.83361816 134.37722778]
[144.16683960 128.19505310]
[130.50006104 122.01288605]
[116.83328247 115.83071899]
[103.16650391 109.64855194]
[95.06192017 109.45411682]
[89.29265594 103.20685577]
[75.75068665 96.75588226]
[62.20872116 90.30490112]
[48.66675568 83.85392761]
[35.12478638 77.40294647]
[21.58282089 70.95196533]
[5.79651117 72.00221252]
[-2.36609864 59.54343796]
[-15.90806580 53.09246063]
[-9.73888206 66.76510620]
[-11.80165863 81.62258911]
[-21.46226120 93.09746552]
[-35.75084686 97.66214752]
[-50.27484894 93.91336823]
[-60.56933212 83.00356293]
[-63.46957779 68.28662109]
[-58.08401108 54.28677368]
[-46.06824112 45.30783844]
[-31.11743355 44.10982895]
[-43.30473709 35.36513519]
[-55.49204254 26.62044334]
[-67.67934418 17.87575150]
[-76.52715302 15.39534378]
[-80.01874542 8.83593845]
[-92.03089905 -0.14783370]
[-104.04305267 -9.13160515]
[-119.72837830 -11.20066929]
[-125.28649902 -25.01937294]
[-137.29866028 -34.00314331]
[-149.31080627 -42.98691559]
[-161.32296753 -51.97068787]
[-173.33511353 -60.95446014]
[-185.34727478 -69.93823242]
[-197.35942078 -78.92200470]
[-209.37158203 -87.90577698]
[-224.47373962 -81.23621368]
[-240.78698730 -83.06671906]
[-253.88497925 -92.80566406]
[-260.26165771 -107.72854614]
[-258.26943970 -123.73957825]
[-270.45675659 -132.48426819]
[-282.64407349 -141.22895813]
[-294.83135986 -149.97364807]
[-308.79187012 -143.57055664]
[-324.08206177 -145.02153015]
[-336.58898926 -153.93629456]
[-342.94830322 -167.91680908]
[-341.44940186 -183.20237732]
[-332.49548340 -195.68127441]
[-318.49508667 -201.99673462]
[-303.21429443 -200.44993591]
[-290.76351929 -191.45693970]
[-284.49197388 -177.43682861]
[-286.08666992 -162.16094971]
[-273.89938354 -153.41625977]
[-261.71206665 -144.67156982]
[-249.52476501 -135.92687988]
[-237.45214844 -142.37237549]
[-223.71376038 -142.97903442]
[-210.99804688 -137.57084656]
[-201.81797791 -127.15450287]
[-198.01455688 -113.73240662]
[-200.38780212 -99.91793060]
[-188.37565613 -90.93415833]
[-176.36349487 -81.95038605]
[-164.35134888 -72.96661377]
[-152.33918762 -63.98284149]
[-140.32704163 -54.99906921]
[-128.31488037 -46.01529694]
[-116.30272675 -37.03152466]
[-101.47659302 -35.60504150]
[-95.05928040 -21.14375877]
[-83.04712677 -12.15998745]
[-71.03497314 -3.17621589]
[-58.93465042 5.68844843]
[-46.74734879 14.43314075]
[-34.56004715 23.17783356]
[-22.37274170 31.92252541]
[-9.45708847 39.55049133]
[4.08487940 46.00146866]
[18.90257645 44.48980713]
[28.03379822 57.40999985]
[41.57576752 63.86097717]
[55.11773300 70.31195831]
[68.65969849 76.76293182]
[82.20166779 83.21391296]
[95.74363708 89.66489410]
[109.34867096 95.98177338]
[123.01544952 102.16394043]
[136.68222046 108.34610748]
[150.34899902 114.52827454]
[164.01577759 120.71044159]
[177.68255615 126.89260864]
[195.93263245 124.63203430]
[205.63705444 139.22639465]
[219.42330933 145.13734436]
[235.15580750 143.46426392]
[243.80424500 155.59083557]
[257.59048462 161.50177002]
[271.37673950 167.41271973]
[285.16299438 173.32366943]
[298.94924927 179.23460388]
[312.73550415 185.14555359]
[326.52175903 191.05650330]
[340.30801392 196.96743774]
[354.15197754 202.74189758]
[365.34094238 191.23036194]
[380.05108643 184.89900208]
[396.02606201 184.68690491]
[410.82766724 190.59696960]
[422.20816040 201.69996643]
[428.45147705 216.28048706]
[428.63195801 232.10195923]
[442.64096069 237.46363831]
[456.64996338 242.82531738]
[470.65899658 248.18701172]
[484.66799927 253.54869080]
[498.67700195 258.91036987]
[512.68603516 264.27206421]
[528.78674316 261.15771484]
[539.32830811 273.71981812]
[533.46655273 289.03555298]
[517.23144531 291.34939575]
[507.32434082 278.28106689]
[493.31530762 272.91937256]
[479.30630493 267.55770874]
[465.29730225 262.19601440]
[451.28829956 256.83432007]
[437.27926636 251.47265625]
[423.27026367 246.11096191]
[413.99432373 256.67776489]
[401.63821411 263.45040894]
[387.68151855 265.59460449]
[373.80355835 262.83163452]
[361.68115234 255.47453308]
[352.78622437 244.39260864]
[348.20687866 230.90893555]
[348.51455688 216.64224243]
[341.09466553 217.04481506]
[334.39706421 210.75369263]
[320.61080933 204.84274292]
[306.82455444 198.93180847]
[293.03829956 193.02085876]
[279.25204468 187.10990906]
[265.46578979 181.19897461]
[251.67955017 175.28802490]
[237.89329529 169.37707520]
[223.14689636 171.47296143]
[213.51235962 158.92359924]
[199.72612000 153.01264954]
[188.34692383 157.21356201]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 97]
[5 96]
[6 95]
[8 94]
[9 93]
[10 92]
[11 91]
[12 90]
[13 89]
[15 87]
[16 86]
[26 85]
[27 84]
[28 83]
[29 82]
[31 81]
[32 80]
[33 79]
[35 77]
[36 76]
[37 75]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[47 64]
[48 63]
[49 62]
[50 61]
[102 157]
[103 156]
[105 154]
[106 153]
[107 152]
[108 151]
[109 150]
[110 149]
[111 148]
[112 147]
[113 145]
[120 137]
[121 136]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
