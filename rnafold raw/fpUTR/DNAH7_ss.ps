%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGACCGCUGCAAGUCCCGGGGCCCUGCCUCUAUCGUCCUAGGGGUUCCGCGGGCAGGAGCAACCCAGAAGCACCGGUGAGGCCAGCGCGUCCUCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[104.49446869 236.47071838]
[90.70582581 243.58781433]
[75.37239075 241.20761108]
[64.39017487 230.24537659]
[61.98207474 214.91630554]
[69.07404327 201.11473083]
[82.93908691 194.14762878]
[85.23995972 179.32514954]
[87.54083252 164.50267029]
[89.84170532 149.68019104]
[92.14258575 134.85771179]
[76.60320282 124.12454224]
[69.51604462 107.85967255]
[71.92182922 91.43601227]
[59.16857147 83.53952789]
[46.41531754 75.64304352]
[33.66205978 67.74655914]
[20.78871346 60.04740906]
[7.79833221 52.54740906]
[-5.19204903 45.04740906]
[-18.18243027 37.54740906]
[-31.17281151 30.04740715]
[-44.16319275 22.54740715]
[-57.15357208 15.04740715]
[-70.14395142 7.54740763]
[-83.13433838 0.04740755]
[-94.94062042 9.58554363]
[-109.39642334 14.21094322]
[-124.54669952 13.29805946]
[-138.34251404 6.97035122]
[-148.91809082 -3.91641045]
[-154.84318542 -17.88988113]
[-155.31643677 -33.06026077]
[-150.27388000 -47.37588501]
[-140.39747620 -58.90067673]
[-127.02290344 -66.07601166]
[-111.95898438 -67.93147278]
[-97.24298096 -64.21613312]
[-84.86511993 -55.43246078]
[-76.49939728 -42.76837540]
[-73.27720642 -27.93658447]
[-75.63433838 -12.94297314]
[-62.64395523 -5.44297361]
[-49.65357208 2.05702639]
[-36.66319275 9.55702686]
[-23.67281151 17.05702591]
[-10.68243027 24.55702591]
[2.30795097 32.05702591]
[15.29833221 39.55702591]
[28.28871346 47.05702591]
[35.78479767 47.68627930]
[41.55854034 54.99330521]
[54.31179810 62.88978577]
[67.06505585 70.78627014]
[79.81831360 78.68275452]
[98.64427948 70.67616272]
[118.12868500 76.91156006]
[130.09895325 67.87203979]
[136.44895935 53.38107681]
[151.26831055 51.88568115]
[163.23855591 42.84616089]
[161.97085571 27.47097015]
[169.23701477 13.86191273]
[182.71844482 6.36158800]
[198.11325073 7.36332273]
[210.50901794 16.54746628]
[215.95030212 30.98339462]
[212.70080566 46.06465149]
[201.79742432 56.97886658]
[186.71940613 60.24335098]
[172.27807617 54.81641769]
[160.30783081 63.85593796]
[154.81401062 77.70033264]
[139.13847351 79.84229279]
[127.16820526 88.88181305]
[130.61766052 95.48029327]
[132.39599609 103.09749603]
[132.21546936 111.29464722]
[129.90657043 119.55494690]
[141.87683105 128.59446716]
[153.84707642 137.63398743]
[165.81733704 146.67350769]
[177.92538452 155.52761841]
[193.45924377 152.61645508]
[206.45446777 161.61087036]
[209.20123291 177.17463684]
[200.06993103 190.07405090]
[184.47799683 192.65611267]
[171.67585754 183.38894653]
[169.25877380 167.77056885]
[161.85272217 166.45236206]
[156.77781677 158.64376831]
[144.80757141 149.60424805]
[132.83731079 140.56472778]
[120.86705017 131.52520752]
[106.96506500 137.15858459]
[104.66419220 151.98106384]
[102.36331940 166.80354309]
[100.06243896 181.62602234]
[97.76156616 196.44851685]
[108.86205292 207.29096985]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 100]
[8 99]
[9 98]
[10 97]
[11 96]
[14 55]
[15 54]
[16 53]
[17 52]
[18 50]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[57 75]
[58 74]
[60 72]
[61 71]
[79 95]
[80 94]
[81 93]
[82 92]
[83 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
