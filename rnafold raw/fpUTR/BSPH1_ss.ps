%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCUCCCUGGGCCUCUCCAGGGGAUUCUUGAGCCCUGGCUGACAAAGACCAGGAAGAUCUGAGAUACCGGGAAGCCUGUGACUGCCC\
) } def
/len { sequence length } bind def

/coor [
[103.78598022 136.90097046]
[96.52153015 136.93122864]
[89.39049530 135.54508972]
[82.66635895 132.79573059]
[76.60699463 128.78858948]
[71.44480896 123.67733765]
[58.20059586 130.71940613]
[44.95637894 137.76148987]
[31.71216583 144.80355835]
[18.46795273 151.84562683]
[5.22373867 158.88771057]
[-8.02047539 165.92977905]
[-12.40093994 181.11486816]
[-26.27607346 188.68165588]
[-41.41400528 184.14089966]
[-48.83367157 170.18653870]
[-44.13311005 155.09745789]
[-30.10108757 147.82574463]
[-15.06254864 152.68556213]
[-1.81833482 145.64349365]
[11.42587948 138.60142517]
[24.67009354 131.55934143]
[37.91430664 124.51727295]
[51.15851974 117.47519684]
[64.40273285 110.43312836]
[64.69857025 88.60593414]
[77.21928406 70.72451019]
[97.62895203 62.98117447]
[99.71654510 48.12715149]
[101.80414581 33.27313232]
[103.89173889 18.41910934]
[105.71977997 3.53091764]
[107.28770447 -11.38691044]
[94.82080078 -25.41930389]
[96.31620026 -43.81578445]
[110.39946747 -55.25516510]
[110.92295837 -70.24602509]
[111.44644928 -85.23689270]
[111.96994781 -100.22775269]
[112.49343872 -115.21861267]
[112.75522614 -130.21632385]
[112.75522614 -145.21632385]
[102.47345734 -157.53155518]
[105.83233643 -173.21905518]
[120.25522614 -180.24470520]
[134.67811584 -173.21905518]
[138.03698730 -157.53155518]
[127.75522614 -145.21632385]
[127.75522614 -130.21632385]
[130.97381592 -123.37929535]
[127.48429871 -114.69512177]
[126.96080780 -99.70426178]
[126.43731689 -84.71339417]
[125.91381836 -69.72253418]
[125.39032745 -54.73167419]
[134.98405457 -48.09920502]
[140.14675903 -37.50585175]
[139.44537354 -25.62083054]
[132.94139099 -15.50419426]
[122.20553589 -9.81898403]
[120.63761139 5.09884453]
[123.12390137 12.23485851]
[118.74575806 20.50670624]
[116.65816498 35.36072922]
[114.57056427 50.21474838]
[112.48297119 65.06877136]
[124.53060150 72.17438507]
[133.09059143 83.23610687]
[136.94592285 96.68124390]
[135.54846191 110.59822083]
[129.09689331 123.00839996]
[138.73870850 134.49906921]
[148.38052368 145.98973083]
[163.17822266 151.58782959]
[165.43203735 166.31092834]
[175.07385254 177.80160522]
[190.71038818 177.62066650]
[202.77212524 187.57296753]
[205.56390381 202.95932007]
[197.76750183 216.51477051]
[183.06416321 221.83885193]
[168.39634705 216.41767883]
[160.68974304 202.81097412]
[163.58317566 187.44340515]
[153.94136047 175.95274353]
[139.83331299 171.17652893]
[136.88984680 155.63154602]
[127.24803925 144.14088440]
[117.60622406 132.65020752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[28 66]
[29 65]
[30 64]
[31 63]
[32 61]
[33 60]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[41 49]
[42 48]
[71 89]
[72 88]
[73 87]
[75 85]
[76 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
