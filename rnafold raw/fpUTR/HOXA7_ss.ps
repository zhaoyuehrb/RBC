%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUGCGGCGAGCUCCGUCCAAAAGAAAAUGGGGUUUGGUGUAAAUCUGGGGGUGUAAUGUUAUCAUAUAUCACUCUACCUCGUAAAACCGACACUGAAAGCUGCCGGACAACAAAUCACAGGUCAAAAUU\
) } def
/len { sequence length } bind def

/coor [
[162.13365173 231.38397217]
[154.99444580 218.19186401]
[142.13218689 210.68110657]
[142.36877441 194.86167908]
[129.50651550 187.35092163]
[129.74310303 171.53147888]
[122.60389709 158.33937073]
[115.46469116 145.14726257]
[108.32547760 131.95515442]
[101.18626404 118.76305389]
[86.99900818 113.89256287]
[73.26240540 119.91799164]
[59.52580643 125.94342804]
[45.78920746 131.96885681]
[32.05260849 137.99429321]
[18.31600761 144.01971436]
[4.57940817 150.04515076]
[-9.15719128 156.07058716]
[-22.89379120 162.09600830]
[-24.50362206 177.37030029]
[-33.54789734 189.78387451]
[-47.59375381 195.99752808]
[-62.86292648 194.33982849]
[-75.24808502 185.25668335]
[-81.41767883 171.19142151]
[-79.71212769 155.92752075]
[-70.59020996 143.57089233]
[-56.50567245 137.44541931]
[-41.24719238 139.19880676]
[-28.91922379 148.35942078]
[-15.18262291 142.33398438]
[-1.44602299 136.30854797]
[12.29057693 130.28312683]
[26.02717590 124.25769043]
[39.76377487 118.23225403]
[53.50037766 112.20682526]
[67.23697662 106.18139648]
[80.97357941 100.15596008]
[89.61748505 87.89697266]
[90.67954254 72.93462372]
[91.74160004 57.97226715]
[92.80365753 43.00991440]
[93.86570740 28.04755974]
[78.65679169 21.51013756]
[66.59943390 10.20412922]
[59.12141800 -4.50786924]
[57.10015488 -20.86137962]
[60.75975800 -36.90166092]
[69.64634705 -50.71735764]
[82.68428040 -60.66826630]
[98.30628967 -65.58003235]
[98.66056824 -80.57585144]
[99.01485443 -95.57166290]
[99.36913300 -110.56748199]
[99.72341919 -125.56329346]
[99.54626465 -140.56225586]
[98.83789825 -155.54551697]
[90.45752716 -168.96490479]
[97.58515167 -182.04336548]
[96.87678528 -197.02662659]
[96.16841888 -212.00988770]
[95.46005249 -226.99314880]
[83.60227203 -237.44152832]
[82.68905640 -253.21940613]
[93.26220703 -264.96606445]
[109.04886627 -265.71240234]
[120.68308258 -255.01565552]
[121.26248169 -239.22200012]
[110.44332123 -227.70152283]
[111.15168762 -212.71826172]
[111.86005402 -197.73498535]
[112.56842041 -182.75172424]
[120.89812469 -170.40403748]
[113.82115936 -156.25387573]
[114.52952576 -141.27061462]
[116.96928406 -138.60105896]
[118.18671417 -134.58178711]
[117.54573059 -129.82461548]
[114.71923065 -125.20901489]
[114.36495209 -110.21319580]
[114.01066589 -95.21738434]
[113.65638733 -80.22156525]
[113.30210114 -65.22575378]
[126.17064667 -60.93271637]
[137.30928040 -53.15974808]
[145.79957581 -42.53607941]
[150.93818665 -29.92647743]
[152.29507446 -16.36083221]
[149.74948120 -2.95006037]
[143.50064087 9.20487881]
[134.05221558 19.10336304]
[122.17169952 25.92748260]
[108.82806396 29.10961342]
[107.76600647 44.07196808]
[106.70394897 59.03432083]
[105.64189911 73.99667358]
[104.57984161 88.95903015]
[109.18035889 90.43138885]
[113.21327972 93.86618042]
[115.84317780 98.99860382]
[116.37154388 105.21479797]
[114.37837219 111.62384796]
[121.51758575 124.81594849]
[128.65679932 138.00805664]
[135.79600525 151.20016479]
[142.93521118 164.39227295]
[156.30812073 172.84661865]
[155.56088257 187.72245789]
[168.93379211 196.17680359]
[168.18655396 211.05265808]
[175.32575989 224.24475098]
[189.99971008 220.73225403]
[205.08273315 221.13830566]
[219.54644775 225.43521118]
[232.40467834 233.33003235]
[242.78076172 244.28445435]
[249.96720886 257.55160522]
[253.47404480 272.22689819]
[253.06217957 287.30978394]
[248.75967407 301.77182007]
[240.85989380 314.62701416]
[229.90145874 324.99887085]
[216.63153076 332.18017578]
[201.95487976 335.68136597]
[186.87217712 335.26367188]
[172.41178894 330.95556641]
[159.55964661 323.05084229]
[149.19203186 312.08840942]
[142.01583862 298.81570435]
[138.52032471 284.13769531]
[138.94384766 269.05514526]
[143.25750732 254.59643555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[4 108]
[6 106]
[7 105]
[8 104]
[9 103]
[10 102]
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[39 97]
[40 96]
[41 95]
[42 94]
[43 93]
[51 83]
[52 82]
[53 81]
[54 80]
[55 79]
[56 75]
[57 74]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
