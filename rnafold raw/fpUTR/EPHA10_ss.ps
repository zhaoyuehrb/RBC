%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCUGGGGUCUGGGGGCAUUGCUCAGCGGUGCUAGGCUGGCGCGGCUUGAGCCGCCGCCGGACUGACAGCUCGGUCUGCGGACC\
) } def
/len { sequence length } bind def

/coor [
[178.80831909 282.17730713]
[172.02259827 268.79992676]
[165.23689270 255.42254639]
[158.45117188 242.04518127]
[145.00401306 241.13005066]
[133.70735168 233.58024597]
[127.62136841 221.31040955]
[128.45942688 207.53056335]
[136.10731506 195.90655518]
[129.80899048 182.29292297]
[123.51065063 168.67929077]
[117.21231079 155.06565857]
[110.91397095 141.45202637]
[104.61563873 127.83839417]
[98.31729889 114.22476196]
[86.99993896 106.01446533]
[88.06906891 92.07357025]
[81.77072906 78.45993805]
[75.47239685 64.84630585]
[64.79121399 61.58331680]
[57.91358185 53.06790924]
[57.00893402 42.38267899]
[62.13989258 33.22061157]
[56.84030151 19.18799400]
[51.54071426 5.15537691]
[46.24112320 -8.87724113]
[40.94153595 -22.90985870]
[35.38946533 -36.84450912]
[29.58671761 -50.67665100]
[17.11322975 -60.40920639]
[19.32458305 -75.13874054]
[13.52183819 -88.97088623]
[7.71909237 -102.80302429]
[1.91634679 -116.63516998]
[-3.88639903 -130.46731567]
[-9.68914413 -144.29945374]
[-21.39209747 -156.56636047]
[-12.84427547 -171.20777893]
[3.59122157 -167.04716492]
[4.14299726 -150.10218811]
[9.94574261 -136.27005005]
[15.74848843 -122.43791199]
[21.55123329 -108.60577393]
[27.35397911 -94.77362823]
[33.15672684 -80.94149017]
[45.21516418 -72.19829559]
[43.41886139 -56.47939682]
[49.22160339 -42.64725494]
[54.84217834 -37.58111191]
[54.97415161 -28.20944786]
[60.27374268 -14.17683029]
[65.57333374 -0.14421229]
[70.87291718 13.88840485]
[76.17250824 27.92102242]
[92.01473999 38.76207352]
[89.08602905 58.54797363]
[95.38436127 72.16160583]
[101.68270111 85.77523804]
[113.00006104 93.98553467]
[111.93093109 107.92642975]
[118.22927094 121.54006195]
[124.52760315 135.15368652]
[130.82594299 148.76731873]
[137.12428284 162.38095093]
[143.42260742 175.99458313]
[149.72094727 189.60821533]
[166.25653076 192.59303284]
[177.70405579 204.66700745]
[179.76324463 221.01118469]
[171.82853699 235.25946045]
[178.61425781 248.63684082]
[185.39997864 262.01422119]
[192.18568420 275.39157104]
[205.32894897 284.19869995]
[204.18620300 299.04940796]
[210.97192383 312.42678833]
[217.75762939 325.80413818]
[224.54335022 339.18151855]
[238.56871033 347.67980957]
[237.95118713 364.06735229]
[223.32601929 371.48599243]
[209.73834229 362.30413818]
[211.16596985 345.96725464]
[204.38026428 332.58987427]
[197.59454346 319.21249390]
[190.80883789 305.83511353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[17 58]
[18 57]
[19 56]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 48]
[29 47]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[75 86]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
