%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUCCGCCGCGCCCUCGCUCCGCCUCGCGCGGGGGGACCAUCUGCUGGCAUUUCCUGCAGCCAGGCCCGCGCCGCCAGUGGAGCCCCCGCGCGCCCGGCCGGCCCGGAGCACCGAGCUCGCGGCACGGUAGGAGAAGCCCCCGAGCGCCCACAGC\
) } def
/len { sequence length } bind def

/coor [
[241.09327698 405.10827637]
[235.04643250 391.38107300]
[228.99957275 377.65390015]
[222.95272827 363.92672729]
[209.01887512 358.79025269]
[202.69096375 344.95507812]
[208.17303467 330.37478638]
[202.12619019 316.64761353]
[195.80931091 303.04257202]
[189.22485352 289.56500244]
[182.64041138 276.08740234]
[176.05596924 262.60983276]
[169.47152710 249.13226318]
[162.88708496 235.65467834]
[148.76118469 231.07270813]
[141.89161682 217.49832153]
[146.79339600 202.71284485]
[140.20895386 189.23527527]
[133.62451172 175.75769043]
[126.64357758 162.48115540]
[119.27227020 149.41731262]
[111.90097046 136.35346985]
[104.52967072 123.28963470]
[97.15837097 110.22579193]
[89.02610016 97.62157440]
[80.16143799 85.52125549]
[71.29677582 73.42093658]
[52.51427841 66.19792938]
[51.12473297 46.94282532]
[41.78894806 35.20216370]
[32.45315933 23.46150398]
[23.11737251 11.72084522]
[13.78158665 -0.01981476]
[4.44579983 -11.76047421]
[-4.88998652 -23.50113487]
[-14.22577286 -35.24179459]
[-23.56155968 -46.98245239]
[-32.89734650 -58.72311401]
[-48.35372543 -60.65651321]
[-57.65429306 -72.69620514]
[-55.71583939 -87.41958618]
[-65.05162811 -99.16024780]
[-74.38741302 -110.90090179]
[-82.22145844 -115.70339203]
[-83.78890991 -122.96700287]
[-92.89091492 -134.88981628]
[-101.99291992 -146.81263733]
[-116.51689148 -153.08677673]
[-118.08977509 -167.89810181]
[-127.19177246 -179.82090759]
[-136.29377747 -191.74372864]
[-145.39578247 -203.66654968]
[-161.74530029 -201.37498474]
[-176.93847656 -207.59111023]
[-186.87881470 -220.53695679]
[-188.93757629 -236.63403320]
[-182.64842224 -251.49230957]
[-191.98420715 -263.23297119]
[-201.31999207 -274.97363281]
[-210.65579224 -286.71429443]
[-226.10293579 -292.22042847]
[-228.79148865 -308.39770508]
[-215.95570374 -318.60427856]
[-200.79992676 -312.34054565]
[-198.91513062 -296.05007935]
[-189.57934570 -284.30941772]
[-180.24354553 -272.56875610]
[-170.90776062 -260.82809448]
[-157.53379822 -263.73150635]
[-144.15202332 -260.56307983]
[-133.39668274 -251.88777161]
[-127.41034698 -239.36029053]
[-127.41715240 -225.40971375]
[-133.47296143 -212.76855469]
[-124.37096405 -200.84573364]
[-115.26895905 -188.92291260]
[-106.16695404 -177.00009155]
[-92.29402161 -171.57876587]
[-90.07009888 -155.91464233]
[-80.96809387 -143.99182129]
[-71.86609650 -132.06900024]
[-62.64675140 -120.23669434]
[-53.31096649 -108.49603271]
[-43.97517776 -96.75537109]
[-29.19356728 -95.32723999]
[-19.55850220 -83.55352783]
[-21.15668678 -68.05889893]
[-11.82089996 -56.31824112]
[-2.48511338 -44.57757950]
[6.85067320 -32.83692169]
[16.18646049 -21.09626007]
[25.52224541 -9.35560131]
[34.85803223 2.38505840]
[44.19382095 14.12571812]
[53.52960587 25.86637688]
[62.86539078 37.60703659]
[73.14554596 37.85815430]
[81.75431061 43.87578583]
[85.68334961 53.85378647]
[83.39709473 64.55627441]
[92.26175690 76.65659332]
[101.12642670 88.75691223]
[104.82241058 74.21938324]
[117.62114716 66.39683533]
[132.24436951 69.73772430]
[140.37625122 82.34218597]
[137.39244080 97.04241943]
[124.98972321 105.47882080]
[110.22220612 102.85449219]
[117.59351349 115.91832733]
[124.96481323 128.98217773]
[132.33612061 142.04600525]
[139.70741272 155.10984802]
[144.29762268 157.81217957]
[147.07965088 161.63751221]
[147.92976379 165.69407654]
[147.10209656 169.17324829]
[153.68653870 182.65081787]
[160.27098083 196.12840271]
[174.94682312 201.34925842]
[181.43238831 215.11123657]
[176.36465454 229.07023621]
[182.94909668 242.54782104]
[189.53353882 256.02539062]
[196.11799622 269.50296021]
[202.70243835 282.98056030]
[209.28688049 296.45812988]
[214.61674500 300.51406860]
[216.73878479 305.85833740]
[215.85336304 310.60076904]
[221.90022278 324.32794189]
[236.35835266 330.12451172]
[242.29516602 344.13198853]
[236.67991638 357.87985229]
[242.72676086 371.60705566]
[248.77362061 385.33422852]
[254.82046509 399.06143188]
[277.58398438 405.20504761]
[288.47167969 425.82934570]
[280.87225342 447.60696411]
[289.00451660 460.21118164]
[304.50454712 463.29745483]
[313.21276855 476.48617554]
[309.96279907 491.95269775]
[296.68273926 500.52099609]
[281.25146484 497.10766602]
[272.82403564 483.73779297]
[276.40029907 468.34344482]
[268.26803589 455.73922729]
[261.15246582 457.14053345]
[253.89050293 456.71649170]
[246.94435120 454.48303223]
[240.75886536 450.57156372]
[235.73304749 445.22140503]
[232.19435120 438.76498413]
[230.37734985 431.60736084]
[230.40824890 424.20071411]
[232.29608154 417.01580811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 137]
[2 136]
[3 135]
[4 134]
[7 131]
[8 130]
[9 127]
[10 126]
[11 125]
[12 124]
[13 123]
[14 122]
[17 119]
[18 118]
[19 117]
[20 113]
[21 112]
[22 111]
[23 110]
[24 109]
[25 102]
[26 101]
[27 100]
[29 96]
[30 95]
[31 94]
[32 93]
[33 92]
[34 91]
[35 90]
[36 89]
[37 88]
[38 87]
[41 84]
[42 83]
[43 82]
[45 81]
[46 80]
[47 79]
[49 77]
[50 76]
[51 75]
[52 74]
[57 68]
[58 67]
[59 66]
[60 65]
[140 149]
[141 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
