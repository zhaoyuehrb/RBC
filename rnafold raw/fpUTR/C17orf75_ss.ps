%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUACCGACGGCUGCACGGGAGCAGGGGAGCGGUUUGGCGGAGACACAGGGCCGCUCAGAGGCCGCCGCA\
) } def
/len { sequence length } bind def

/coor [
[54.22529602 249.29731750]
[46.40103149 262.23071289]
[35.11109161 272.28201294]
[21.35936546 278.55746460]
[6.36865139 280.49908447]
[-8.52808857 277.93423462]
[-22.00624466 271.09091187]
[-32.86735153 260.57769775]
[-40.14564514 247.32939148]
[-43.19394302 232.52400208]
[-41.74119568 217.47804260]
[-35.91657639 203.52938843]
[-26.23801231 191.91831970]
[-13.56610966 183.67730713]
[0.97235334 179.53913879]
[16.08462524 179.87174988]
[30.42693520 184.64559937]
[39.13597870 172.43280029]
[47.84502029 160.21998596]
[45.13927078 145.61811829]
[53.79750443 133.10853577]
[69.13162994 130.36950684]
[77.84067535 118.15670013]
[71.73686218 104.67940521]
[73.17127991 89.95403290]
[81.76134491 77.90808105]
[95.21594238 71.75439453]
[109.94652557 73.13425446]
[118.65556335 60.92145157]
[127.36460876 48.70864868]
[136.07365417 36.49584579]
[144.78269958 24.28304100]
[153.49174500 12.07023811]
[162.20079041 -0.14256480]
[170.90982056 -12.35536766]
[179.61886597 -24.56817055]
[181.33168030 -40.29639053]
[195.02078247 -46.16646957]
[196.73359680 -61.89468765]
[210.42269897 -67.76476288]
[211.45301819 -84.13151550]
[226.26049805 -91.17924500]
[239.61247253 -81.65785217]
[237.77357483 -65.36212921]
[222.63549805 -59.05572128]
[221.54560852 -44.20104599]
[207.23358154 -37.45742416]
[206.14370728 -22.60274887]
[191.83168030 -15.85912800]
[183.12263489 -3.64632487]
[174.41358948 8.56647873]
[165.70454407 20.77928162]
[156.99549866 32.99208450]
[148.28645325 45.20488739]
[139.57740784 57.41769028]
[130.86837769 69.63049316]
[122.15932465 81.84329987]
[128.26313782 95.32059479]
[126.82872009 110.04596710]
[118.23865509 122.09191895]
[104.78405762 128.24560547]
[90.05347443 126.86574554]
[81.34443665 139.07855225]
[83.75070953 154.46839905]
[74.74452972 166.72985840]
[60.05782318 168.92903137]
[51.34878159 181.14183044]
[42.63973618 193.35464478]
[51.82584763 205.35908508]
[57.06390762 219.53845215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 68]
[18 67]
[19 66]
[22 63]
[23 62]
[28 57]
[29 56]
[30 55]
[31 54]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[38 47]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
