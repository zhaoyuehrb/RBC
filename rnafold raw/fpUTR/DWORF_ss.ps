%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGAGACGCUGGAUAACAAAAGAAAGAGGUAAGCGUGGCCUGACCUAGCCACCCACCAACAGGAAUA\
) } def
/len { sequence length } bind def

/coor [
[34.76979446 287.33911133]
[20.55017471 292.20767212]
[5.75400162 294.84844971]
[-9.27188206 295.19952393]
[-24.17524719 293.25271606]
[-38.60673904 289.05361938]
[-52.22806168 282.70065308]
[-64.71990967 274.34277344]
[-75.78946686 264.17590332]
[-85.17723083 252.43833923]
[-92.66314697 239.40524292]
[-98.07173920 225.38214111]
[-101.27621460 210.69773865]
[-102.20146179 195.69625854]
[-100.82578278 180.72935486]
[-97.18143463 166.14788818]
[-91.35384369 152.29367065]
[-83.47961426 139.49143982]
[-73.74333954 128.04132080]
[-62.37323380 118.21171570]
[-49.63584137 110.23303986]
[-35.82974243 104.29232025]
[-21.27857208 100.52883148]
[-6.32342958 99.03078461]
[8.68511486 99.83329773]
[23.39523888 102.91756439]
[37.46211624 108.21127319]
[50.55599976 115.59033966]
[62.36994934 124.88179016]
[73.33248901 114.64349365]
[84.29502869 104.40519714]
[85.46038055 92.60733795]
[94.30659485 84.71481323]
[106.16046143 84.89700317]
[110.86396027 76.66740417]
[118.32586670 74.99971771]
[130.17399597 65.80071259]
[142.02214050 56.60171509]
[153.87028503 47.40271378]
[165.71841431 38.20371246]
[165.08937073 22.69939232]
[173.72167969 9.80508995]
[188.29602051 4.47892857]
[203.20828247 8.76892567]
[212.72439575 21.02548790]
[213.18521118 36.53572083]
[204.41352844 49.33561707]
[189.78225708 54.50336456]
[174.91741943 50.05184937]
[163.06927490 59.25085068]
[151.22114563 68.44985199]
[139.37300110 77.64884949]
[127.52486420 86.84785461]
[115.88919830 96.31417084]
[110.85894775 112.17107391]
[94.53332520 115.36773682]
[83.57078552 125.60603333]
[72.60824585 135.84432983]
[81.07182312 148.26481628]
[87.54013062 161.83174133]
[91.86154175 176.22708130]
[93.93476105 191.11338806]
[93.71118927 206.14170837]
[91.19606018 220.95976257]
[86.44833374 235.22016907]
[79.57930756 248.58868408]
[70.75000000 260.75189209]
[60.16738510 271.42468262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[29 58]
[30 57]
[31 56]
[34 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
