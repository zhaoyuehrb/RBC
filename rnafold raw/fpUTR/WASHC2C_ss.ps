%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGGUCACGUGAGGCCGGUCACGCCCCGGGCAGCUUGGCUGGGGCUAGGCUUCCGGGGCUCUGCGGUCCUCGGCCUGUGCUGGCAGCCUCGGAGCCCACCGAGCCGGGCGGCUGGG\
) } def
/len { sequence length } bind def

/coor [
[83.29479980 115.58307648]
[77.84040070 105.55408478]
[77.91983032 94.13809967]
[65.48918915 85.74291229]
[53.05854797 77.34772491]
[40.62790680 68.95253754]
[28.19726562 60.55735016]
[15.76662540 52.16216278]
[11.13493156 52.02582932]
[7.22822475 50.50490570]
[4.40722227 48.02192307]
[2.84787750 45.07528687]
[2.53289819 42.16851425]
[-8.94361496 32.50985718]
[-20.42012787 22.85120010]
[-31.89664078 13.19254398]
[-43.49964523 3.68621373]
[-55.22711563 -5.66613340]
[-66.95458984 -15.01848030]
[-79.75957489 -9.22125530]
[-93.74584198 -9.53282166]
[-106.16151428 -15.83440399]
[-114.58860779 -26.83431435]
[-117.41387177 -40.33229446]
[-114.13739777 -53.65952301]
[-125.61390686 -63.31818008]
[-137.09042358 -72.97683716]
[-148.56694031 -82.63549042]
[-160.04344177 -92.29415131]
[-171.51995850 -101.95280457]
[-182.99647522 -111.61146545]
[-194.47299194 -121.27011871]
[-203.17042542 -124.45838928]
[-206.12059021 -131.33837891]
[-217.33815002 -141.29661560]
[-228.55569458 -151.25485229]
[-239.77325439 -161.21308899]
[-250.99081421 -171.17132568]
[-262.20837402 -181.12954712]
[-273.42593384 -191.08778381]
[-284.64349365 -201.04602051]
[-300.80789185 -203.81076050]
[-306.24121094 -219.28366089]
[-295.35412598 -231.54756165]
[-279.34631348 -227.98638916]
[-274.68524170 -212.26358032]
[-263.46768188 -202.30534363]
[-252.25013733 -192.34710693]
[-241.03257751 -182.38887024]
[-229.81501770 -172.43063354]
[-218.59745789 -162.47239685]
[-207.37991333 -152.51417542]
[-196.16235352 -142.55593872]
[-184.81433105 -132.74662781]
[-173.33781433 -123.08797455]
[-161.86131287 -113.42932129]
[-150.38479614 -103.77066040]
[-138.90827942 -94.11200714]
[-127.43176270 -84.45334625]
[-115.95525360 -74.79469299]
[-104.47873688 -65.13603973]
[-89.48698425 -71.00862122]
[-73.48170471 -68.54101562]
[-60.80942917 -58.30835724]
[-54.95920944 -43.00731659]
[-57.60224152 -26.74595261]
[-45.87477112 -17.39360619]
[-34.14729691 -8.04125881]
[-26.86458969 -6.30923748]
[-22.23798370 1.71603084]
[-10.76147079 11.37468719]
[0.71504194 21.03334427]
[12.19155502 30.69200134]
[24.16181374 39.73152161]
[36.59245300 48.12670898]
[49.02309418 56.52189636]
[61.45373535 64.91708374]
[73.88437653 73.31227112]
[86.31501770 81.70745850]
[103.73658752 77.46261597]
[118.85611725 87.10261536]
[122.35876465 104.68844604]
[135.21513367 112.41590118]
[148.07151794 120.14335632]
[160.92788696 127.87081146]
[173.78427124 135.59826660]
[189.59826660 136.07604980]
[196.52072144 149.26425171]
[209.37710571 156.99169922]
[222.23347473 164.71916199]
[231.32493591 166.49560547]
[235.32341003 172.82411194]
[247.97132874 180.88824463]
[260.61923218 188.95237732]
[275.86364746 185.75140381]
[288.57553101 194.10975647]
[291.53323364 208.66268921]
[307.44491577 206.61393738]
[318.86676025 217.87985229]
[317.03689575 233.81820679]
[303.35900879 242.20245361]
[288.32565308 236.60090637]
[283.46908569 221.31060791]
[269.02716064 224.76977539]
[256.08547974 216.77177429]
[252.55511475 201.60028076]
[239.90719604 193.53614807]
[227.25927734 185.47201538]
[214.50601196 177.57554626]
[201.64964294 169.84808350]
[188.79327393 162.12062073]
[173.89884949 162.19557190]
[166.05680847 148.45465088]
[153.20043945 140.72718811]
[140.34405518 132.99972534]
[127.48768616 125.27227783]
[114.63130951 117.54482269]
[104.31488800 122.43384552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 79]
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[13 73]
[14 72]
[15 71]
[16 70]
[17 68]
[18 67]
[19 66]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[31 55]
[32 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[82 117]
[83 116]
[84 115]
[85 114]
[86 113]
[88 111]
[89 110]
[90 109]
[92 108]
[93 107]
[94 106]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
