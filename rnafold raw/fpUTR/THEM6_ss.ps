%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGGCCGCCCUCGCGCUGUGGUUCGCUCCGGGCGCGCUGCGCUCGUGAGUUCCCAGGAGGCCUGGCGGGCACCGUAACCAGCGCCGCGGACACCGGCACCGGCGCCACGGACUCCGCAGGACCCCGCGCCCGCCGCCGCCGCU\
) } def
/len { sequence length } bind def

/coor [
[85.57711029 232.35415649]
[82.21823120 216.66667175]
[92.50000000 204.35144043]
[92.50000000 189.35144043]
[92.50000000 174.35144043]
[92.50000000 159.35144043]
[84.76270294 146.62416077]
[92.50000000 132.82398987]
[92.50000000 117.82399750]
[81.72245026 107.39114380]
[66.73037720 107.87854004]
[51.73829269 108.36594391]
[36.74621582 108.85334778]
[32.19153214 111.69569397]
[27.47713280 112.38519287]
[23.46769333 111.23281860]
[20.77140999 108.85334778]
[5.77933073 108.36594391]
[-9.21274853 107.87854004]
[-17.96606445 110.74365997]
[-24.52334976 107.21468353]
[-39.50135040 106.40260315]
[-47.23540878 114.18265533]
[-57.76717377 116.33610535]
[-67.52555084 112.38170624]
[-73.33823395 103.86812592]
[-88.26699829 102.40797424]
[-103.19576263 100.94782257]
[-118.12452698 99.48767853]
[-133.06822205 98.18933105]
[-148.02511597 97.05294800]
[-162.98200989 95.91656494]
[-177.93890381 94.78018188]
[-192.89579773 93.64379883]
[-207.85269165 92.50741577]
[-222.80958557 91.37103271]
[-239.06126404 96.20004272]
[-248.20045471 81.92028809]
[-237.00874329 69.18521881]
[-221.67320251 76.41413879]
[-206.71630859 77.55052185]
[-191.75941467 78.68690491]
[-176.80252075 79.82328796]
[-161.84562683 80.95967102]
[-146.88873291 82.09605408]
[-131.93183899 83.23243713]
[-124.97242737 80.58326721]
[-116.66437531 84.55891418]
[-101.73561096 86.01906586]
[-86.80684662 87.47920990]
[-71.87808228 88.93936157]
[-54.97852707 79.63239288]
[-38.68926620 91.42459869]
[-23.71126556 92.23667908]
[-8.72534561 92.88646698]
[6.26673365 93.37386322]
[21.25881195 93.86126709]
[36.25881195 93.86126709]
[51.25089264 93.37386322]
[66.24297333 92.88646698]
[81.23505402 92.39906311]
[88.50398254 85.45462036]
[97.45560455 83.35961151]
[105.40509796 85.87084961]
[110.36573029 91.47400665]
[124.30038452 85.92193604]
[138.23503113 80.36986542]
[152.16969299 74.81779480]
[166.10433960 69.26572418]
[180.03898621 63.71364975]
[193.97363281 58.16157532]
[203.92980957 45.86583328]
[218.61701965 48.34275818]
[228.57318115 36.04701614]
[243.26039124 38.52393723]
[247.18632507 23.62785530]
[258.99273682 14.01215744]
[274.01965332 13.20189381]
[286.49291992 21.29852676]
[300.42758179 15.74645424]
[310.38372803 3.45071220]
[325.07095337 5.92763519]
[339.00558472 0.37556291]
[352.94024658 -5.17650938]
[366.62130737 -11.32700157]
[380.02310181 -18.06436729]
[393.42489624 -24.80173302]
[402.27941895 -37.91309738]
[417.12588501 -36.71673965]
[430.52767944 -43.45410538]
[436.84707642 -50.15444946]
[444.29357910 -50.18870926]
[453.43008423 -63.10516739]
[468.24716187 -61.58744812]
[481.79177856 -68.03289032]
[495.33636475 -74.47833252]
[504.18643188 -88.28443146]
[520.55310059 -87.25291443]
[527.59979248 -72.44491577]
[518.07739258 -59.09363937]
[501.78182983 -60.93372726]
[488.23721313 -54.48828888]
[474.69262695 -48.04284668]
[466.52490234 -35.58740997]
[450.73904419 -36.64410782]
[437.26504517 -30.05231667]
[423.86325073 -23.31495094]
[415.96731567 -10.68548870]
[400.16226196 -11.39994526]
[386.76046753 -4.66257954]
[373.35867310 2.07478571]
[372.36621094 4.77184248]
[370.20568848 7.22231102]
[366.97146606 8.96403790]
[362.92886353 9.57999897]
[358.49230957 8.75814152]
[344.55767822 14.31021404]
[330.62301636 19.86228561]
[321.66354370 31.76090622]
[305.97964478 29.68110466]
[292.04498291 35.23317719]
[288.55749512 49.68915939]
[277.09082031 59.43489838]
[261.90670776 60.57321548]
[248.81246948 52.45858765]
[239.85299683 64.35720825]
[224.16908264 62.27740860]
[215.20962524 74.17602539]
[199.52571106 72.09622955]
[185.59106445 77.64830017]
[171.65640259 83.20037079]
[157.72175598 88.75244141]
[143.78710938 94.30451965]
[129.85246277 99.85659027]
[115.91780853 105.40866089]
[107.50000000 117.82399750]
[107.50000000 132.82398987]
[115.23729706 146.62416077]
[107.50000000 159.35144043]
[107.50000000 174.35144043]
[107.50000000 189.35144043]
[107.50000000 204.35144043]
[117.78176880 216.66667175]
[114.42288971 232.35415649]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 142]
[4 141]
[5 140]
[6 139]
[8 137]
[9 136]
[10 61]
[11 60]
[12 59]
[13 58]
[17 57]
[18 56]
[19 55]
[21 54]
[22 53]
[26 51]
[27 50]
[28 49]
[29 48]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[65 135]
[66 134]
[67 133]
[68 132]
[69 131]
[70 130]
[71 129]
[73 127]
[75 125]
[79 121]
[80 120]
[82 118]
[83 117]
[84 116]
[85 111]
[86 110]
[87 109]
[89 107]
[90 106]
[92 105]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
