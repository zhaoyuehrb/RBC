%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGAUUUCACGCAGGUUCUAUAGAAUUUGCCAAGACUGCUGGCCUGUUUUCUACCCUGAUUCCUUAGGUGGCUUCUGGGACAGAAUUACGGUUCUCUAAGUAUUUGCUUGCAGGAUUUCUAUAAUUGGCCUGAUGAAUCCUUUGAUGAA\
) } def
/len { sequence length } bind def

/coor [
[137.25170898 491.58444214]
[136.31607056 476.61364746]
[135.38044739 461.64285278]
[134.44480896 446.67205811]
[133.50918579 431.70129395]
[120.57481384 415.66305542]
[130.15872192 396.54376221]
[128.29110718 381.66046143]
[126.42349243 366.77719116]
[124.55588531 351.89392090]
[115.17543030 344.19232178]
[113.53053284 331.76199341]
[121.05097198 321.23123169]
[119.49339294 306.31231689]
[117.93581390 291.39340210]
[116.37822723 276.47451782]
[114.82064819 261.55560303]
[113.26306915 246.63667297]
[100.76580048 231.93130493]
[109.08441162 213.61604309]
[106.90756989 198.77484131]
[104.73073578 183.93363953]
[102.55390167 169.09242249]
[100.37705994 154.25122070]
[98.20022583 139.41001892]
[96.02339172 124.56880951]
[83.43251801 121.16314697]
[73.44601440 111.31692505]
[69.30358887 96.89359283]
[72.98009491 81.33232117]
[57.98740005 81.80036163]
[42.99470139 82.26840210]
[28.00200653 82.73644257]
[18.47184753 95.13442993]
[3.19098759 98.45547485]
[-10.62541866 91.13147736]
[-16.45368767 76.62060547]
[-11.54188633 61.77445602]
[1.79078007 53.60292053]
[17.24903488 55.96434784]
[27.53396416 67.74375153]
[42.52666092 67.27570343]
[57.51935577 66.80766296]
[72.51205444 66.33962250]
[81.27825928 54.16778564]
[76.97067261 39.79960251]
[72.66309357 25.43141747]
[68.35550690 11.06323338]
[54.67090988 -1.21323609]
[59.29657364 -18.11303329]
[54.69100952 -32.38849258]
[50.08544540 -46.66395569]
[45.47988129 -60.93941498]
[31.54285049 -72.92853546]
[35.81593704 -89.92090607]
[30.91438484 -104.09746552]
[26.01283455 -118.27402496]
[14.19079876 -128.78829956]
[17.34445953 -143.34521484]
[12.44290924 -157.52177429]
[-1.49154687 -164.48371887]
[-6.26046610 -178.93058777]
[0.46255857 -192.17205811]
[-4.43899202 -206.34861755]
[-18.76038742 -213.03242493]
[-24.08238602 -227.91368103]
[-17.24754333 -242.16360474]
[-2.31084800 -247.32797241]
[11.86602211 -240.34284973]
[16.87218285 -225.35240173]
[9.73756599 -211.25016785]
[14.63911629 -197.07360840]
[28.10515976 -190.81251526]
[33.27798080 -176.50529480]
[26.61946678 -162.42332458]
[31.52101898 -148.24676514]
[42.99246216 -138.74649048]
[40.18939209 -123.17557526]
[45.09094238 -108.99901581]
[49.99249268 -94.82245636]
[60.76145935 -89.22454071]
[64.93843079 -77.40202332]
[59.75534439 -65.54498291]
[64.36090851 -51.26951981]
[68.96646881 -36.99406052]
[73.57203674 -22.71859741]
[84.22221375 -16.89785576]
[88.15232849 -4.99100113]
[82.72369385 6.75564814]
[87.03127289 21.12383270]
[91.33885956 35.49201584]
[95.64644623 49.86019897]
[109.10240936 56.48870087]
[123.11912537 51.14718628]
[137.13583374 45.80567551]
[151.15254211 40.46416092]
[161.29283142 28.31980705]
[175.94105530 31.01771736]
[189.95776367 25.67620468]
[203.97448730 20.33469200]
[217.99119568 14.99317932]
[232.00790405 9.65166664]
[241.93382263 -3.40238714]
[258.16555786 -1.06518662]
[264.00531006 14.25895596]
[253.44563293 26.80587769]
[237.34941101 23.66837883]
[223.33270264 29.00989151]
[209.31599426 34.35140610]
[195.29928589 39.69291687]
[181.28256226 45.03443146]
[172.14485168 56.79672241]
[156.49406433 54.48087311]
[142.47735596 59.82238770]
[128.46063232 65.16390228]
[114.44392395 70.50540924]
[128.86492920 100.05264282]
[110.86459351 122.39197540]
[113.04142761 137.23318481]
[115.21826935 152.07438660]
[117.39510345 166.91558838]
[119.57194519 181.75679016]
[121.74877930 196.59800720]
[123.92561340 211.43920898]
[133.07656860 217.46792603]
[137.27864075 227.34953308]
[135.35295105 237.68930054]
[128.18197632 245.07910156]
[129.73956299 259.99801636]
[131.29714966 274.91693115]
[132.85472107 289.83584595]
[134.41230774 304.75476074]
[135.96987915 319.67364502]
[147.12995911 334.28298950]
[139.43916321 350.02630615]
[141.30677795 364.90957642]
[143.17439270 379.79284668]
[145.04200745 394.67614746]
[153.28988647 399.47848511]
[158.29594421 407.44149780]
[159.02653503 416.68029785]
[155.44270325 425.07687378]
[148.47998047 430.76565552]
[149.41560364 445.73645020]
[150.35124207 460.70724487]
[151.28686523 475.67803955]
[152.22248840 490.64880371]
[161.73782349 504.00509644]
[154.68338013 518.80938721]
[138.31616211 519.83227539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[7 138]
[8 137]
[9 136]
[10 135]
[13 133]
[14 132]
[15 131]
[16 130]
[17 129]
[18 128]
[20 124]
[21 123]
[22 122]
[23 121]
[24 120]
[25 119]
[26 118]
[30 44]
[31 43]
[32 42]
[33 41]
[45 92]
[46 91]
[47 90]
[48 89]
[50 86]
[51 85]
[52 84]
[53 83]
[55 80]
[56 79]
[57 78]
[59 76]
[60 75]
[63 72]
[64 71]
[93 116]
[94 115]
[95 114]
[96 113]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
