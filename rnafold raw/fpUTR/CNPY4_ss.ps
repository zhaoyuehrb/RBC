%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGAUUUAAGGUUGCCGCUAGCCGCCUGGGAAUUUAAGGGACCCACACUACCUUCCCGAAGUUGAAGGCAAGCGGUGAUUGUUUGUAGACGGCGCUUUGUC\
) } def
/len { sequence length } bind def

/coor [
[172.85937500 391.63671875]
[169.26963806 377.07260132]
[165.67990112 362.50848389]
[162.09016418 347.94433594]
[149.25048828 340.48257446]
[145.40251160 325.76361084]
[153.31614685 312.34677124]
[142.75784302 301.84097290]
[146.96772766 286.59014893]
[143.37799072 272.02603149]
[139.78825378 257.46191406]
[136.19851685 242.89778137]
[132.17053223 228.44871521]
[127.70799255 214.12789917]
[123.24544525 199.80708313]
[118.78289795 185.48626709]
[114.32035828 171.16546631]
[109.85781097 156.84465027]
[105.39526367 142.52383423]
[100.93271637 128.20301819]
[96.47016907 113.88220978]
[86.32463074 104.26141357]
[89.20901489 90.58033752]
[84.74646759 76.25952148]
[80.28392029 61.93871307]
[74.96485138 47.91346741]
[68.80865479 34.23497009]
[53.64612961 23.92411041]
[55.89249802 6.59194231]
[49.32598114 -6.89437962]
[42.75946426 -20.38070107]
[36.19295120 -33.86702347]
[29.62643433 -47.35334396]
[26.01157379 -49.43758392]
[23.40353203 -52.23319244]
[21.89958191 -55.37009048]
[21.47729874 -58.48248672]
[22.00491524 -61.24454880]
[23.26165009 -63.40062332]
[18.79910469 -77.72143555]
[14.33655834 -92.04225159]
[-0.72961074 -94.73838043]
[-12.80996704 -104.13644409]
[-19.12853432 -118.07682800]
[-18.23335075 -133.35614014]
[-10.33012486 -146.46328735]
[2.76504230 -154.38636780]
[18.04297638 -155.30470276]
[31.99291801 -149.00727844]
[41.40927505 -136.94117737]
[44.12823868 -121.87910461]
[39.52500534 -107.28222656]
[28.65737152 -96.50479126]
[33.11991882 -82.18398285]
[37.58246231 -67.86316681]
[43.11275482 -53.91986084]
[49.67927170 -40.43353653]
[56.24578857 -26.94721603]
[62.81230164 -13.46089458]
[69.37881470 0.02542670]
[80.79511261 4.33089733]
[86.33351135 15.65314102]
[82.48715210 28.07877731]
[88.64334869 41.75727463]
[91.40095520 42.84488297]
[93.85323334 45.18311310]
[95.48451996 48.64540482]
[95.84143829 52.90716171]
[94.60473633 57.47616577]
[99.06728363 71.79698181]
[103.52983093 86.11779022]
[113.67536926 95.73858643]
[110.79098511 109.41966248]
[115.25353241 123.74047852]
[119.71607971 138.06129456]
[124.17861938 152.38209534]
[128.64117432 166.70291138]
[133.10371399 181.02372742]
[137.56625366 195.34454346]
[142.02880859 209.66535950]
[146.49134827 223.98616028]
[151.27423096 228.93795776]
[152.51721191 234.70127869]
[150.76264954 239.30804443]
[154.35237122 253.87216187]
[157.94210815 268.43627930]
[161.53184509 283.00042725]
[172.34690857 294.54794312]
[167.88027954 308.75701904]
[181.12258911 316.95941162]
[184.55561829 331.78063965]
[176.65429688 344.35461426]
[180.24403381 358.91873169]
[183.83377075 373.48284912]
[187.42350769 388.04699707]
[202.05369568 392.94195557]
[211.69715881 404.98385620]
[213.27668762 420.33013916]
[206.28825378 434.08389282]
[192.96185303 441.85632324]
[177.54988098 441.16726685]
[164.97024536 432.23660278]
[159.23707581 417.91412354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[7 89]
[9 87]
[10 86]
[11 85]
[12 84]
[13 81]
[14 80]
[15 79]
[16 78]
[17 77]
[18 76]
[19 75]
[20 74]
[21 73]
[23 71]
[24 70]
[25 69]
[26 64]
[27 63]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[39 55]
[40 54]
[41 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
