%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGGGGGCGGGGCCGGAAGCUCUUUCCCCGCGACUGCGCCACGUCUGAGGCGGCUGUGGCCGCGUCGGUGUCCGCGUCGAGGAGCCGGGGCAGGGCACG\
) } def
/len { sequence length } bind def

/coor [
[99.80183411 145.72760010]
[86.17308807 139.46203613]
[82.41340637 124.94085693]
[91.28959656 112.84840393]
[77.86214447 119.53447723]
[64.43469238 126.22055054]
[51.00724411 132.90663147]
[37.57979584 139.59269714]
[24.15234566 146.27877808]
[15.24775028 159.35618591]
[0.40595174 158.10307312]
[-13.02149773 164.78915405]
[-26.44894791 171.47523499]
[-39.87639618 178.16130066]
[-53.30384445 184.84738159]
[-59.74500275 199.54060364]
[-75.28505707 203.52638245]
[-88.00300598 193.74714661]
[-88.14272308 177.70469666]
[-75.59703827 167.70544434]
[-59.98992157 171.41993713]
[-46.56247330 164.73385620]
[-33.13502121 158.04777527]
[-19.70757294 151.36170959]
[-6.28012371 144.67562866]
[1.66405153 132.07644653]
[17.46627045 132.85133362]
[30.89372063 126.16525269]
[44.32117081 119.47917938]
[57.74861908 112.79310608]
[71.17607117 106.10703278]
[84.60351562 99.42095184]
[92.50000000 86.66769409]
[92.50000000 71.66769409]
[92.50000000 56.66769791]
[92.50000000 41.66769791]
[89.32692719 32.91210556]
[92.73810577 26.20755005]
[93.20002747 11.21466351]
[93.66195679 -3.77822208]
[93.89294434 -18.77644348]
[93.89294434 -33.77644348]
[93.89294434 -48.77644348]
[93.89294434 -63.77644348]
[93.66195679 -78.77466583]
[93.20002747 -93.76754761]
[92.73810577 -108.76043701]
[81.05370331 -119.40235138]
[80.40002441 -135.19311523]
[91.16487885 -146.76434326]
[106.96167755 -147.25103760]
[118.41844940 -136.36445618]
[118.73809814 -120.56339264]
[107.73098755 -109.22235870]
[108.19291687 -94.22947693]
[108.65483856 -79.23658752]
[112.06602478 -72.53203583]
[108.89294434 -63.77644348]
[108.89294434 -48.77644348]
[108.89294434 -33.77644348]
[108.89294434 -18.77644348]
[112.09603882 -11.97001839]
[108.65483856 -3.31629610]
[108.19291687 11.67658997]
[107.73098755 26.66947556]
[107.50000000 41.66769791]
[107.50000000 56.66769791]
[107.50000000 71.66769409]
[107.50000000 86.66769409]
[115.00000000 99.65808105]
[127.99037933 107.15808105]
[140.98075867 114.65808105]
[153.97114563 122.15808105]
[166.96151733 129.65808105]
[179.95190430 137.15808105]
[193.05624390 144.45713806]
[206.27142334 151.55354309]
[222.09001160 151.26567078]
[229.64242554 164.10351562]
[242.85760498 171.19992065]
[256.07278442 178.29631042]
[271.13116455 173.49829102]
[285.13320923 180.82757568]
[289.77175903 195.93582153]
[282.29486084 209.85958862]
[267.13839722 214.33815002]
[253.29444885 206.71446228]
[248.97639465 191.51150513]
[235.76119995 184.41510010]
[222.54602051 177.31869507]
[207.67266846 178.11416626]
[199.17501831 164.76873779]
[185.95983887 157.67233276]
[178.44793701 157.27421570]
[172.45190430 150.14845276]
[159.46151733 142.64845276]
[146.47114563 135.14845276]
[133.48075867 127.64846039]
[120.49037933 120.14846039]
[107.50000000 112.64846039]
[116.67163849 124.51779175]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[33 69]
[34 68]
[35 67]
[36 66]
[38 65]
[39 64]
[40 63]
[41 61]
[42 60]
[43 59]
[44 58]
[45 56]
[46 55]
[47 54]
[70 100]
[71 99]
[72 98]
[73 97]
[74 96]
[75 95]
[76 93]
[77 92]
[79 90]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
