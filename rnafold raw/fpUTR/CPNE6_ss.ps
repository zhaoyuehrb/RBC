%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCUUCAGCAGAUGCCCUCAUGUGACCAGGAUAUGAGGUUGGGUGUCCUUAAGCAAUUAUGUCCAUUUCCUGUGUCUCCUUAUAAAAUGGUGGCUAGGGAACUGGACAUCAUUCUCAAAGCUAUGACGUUCAGCAAGGUAUGUG\
) } def
/len { sequence length } bind def

/coor [
[110.77647400 248.06111145]
[109.39730835 263.30435181]
[101.08248901 276.15435791]
[87.74270630 283.65826416]
[72.44333649 284.09176636]
[58.70006943 277.35519409]
[49.67100143 264.99661255]
[47.43095016 249.85592651]
[52.49466324 235.41232300]
[63.69853210 224.98486328]
[78.46799469 220.96969604]
[81.64935303 206.31095886]
[76.78741455 192.23222351]
[87.27558136 180.38700867]
[90.45693970 165.72825623]
[93.63829803 151.06950378]
[96.81965637 136.41075134]
[100.00101471 121.75200653]
[88.78972626 111.78672791]
[74.60520935 116.66519165]
[60.42068863 121.54366302]
[46.23617172 126.42213440]
[32.05165482 131.30059814]
[17.86713791 136.17907715]
[3.68262029 141.05754089]
[-1.75732172 155.71841431]
[-15.37387657 163.40759277]
[-30.73772430 160.49447632]
[-40.59452438 148.35456848]
[-40.29019928 132.71994019]
[-29.96844101 120.97280884]
[-14.50286674 118.65979004]
[-1.19584990 126.87303162]
[12.98866749 121.99456024]
[27.17318535 117.11608887]
[41.35770035 112.23761749]
[55.54221725 107.35914612]
[69.72673798 102.48067474]
[83.91125488 97.60221100]
[95.93245697 88.63054657]
[104.64517975 76.42037201]
[113.35789490 64.21018982]
[122.07061768 52.00000763]
[130.78334045 39.78982544]
[139.49604797 27.57964325]
[148.20877075 15.36946201]
[156.92149353 3.15928078]
[165.63421631 -9.05090046]
[174.34692383 -21.26108170]
[170.12010193 -32.46299744]
[171.84130859 -44.18987656]
[178.96282959 -53.51343155]
[189.60325623 -58.16282654]
[201.04342651 -57.07726288]
[210.26992798 -68.90399933]
[219.49642944 -80.73073578]
[227.94622803 -93.12431335]
[235.58460999 -106.03381348]
[243.22299194 -118.94331360]
[243.59140015 -134.76022339]
[256.73144531 -141.77371216]
[264.36981201 -154.68321228]
[272.00820923 -167.59271240]
[279.64657593 -180.50221252]
[287.28494263 -193.41171265]
[294.92333984 -206.32119751]
[302.56170654 -219.23069763]
[302.93014526 -235.04762268]
[316.07015991 -242.06109619]
[323.70855713 -254.97059631]
[331.34692383 -267.88009644]
[338.98529053 -280.78961182]
[346.62368774 -293.69909668]
[342.91674805 -308.82843018]
[350.84704590 -321.81167603]
[365.29339600 -325.25244141]
[372.93176270 -338.16192627]
[380.57012939 -351.07144165]
[380.93856812 -366.88836670]
[394.07858276 -373.90182495]
[401.71697998 -386.81134033]
[394.70294189 -400.55203247]
[396.25387573 -415.90124512]
[405.87487793 -427.96109009]
[420.49591064 -432.88330078]
[435.45150757 -429.09722900]
[445.96932983 -417.81103516]
[448.69320679 -402.62603760]
[442.75396729 -388.38772583]
[430.04678345 -379.63955688]
[414.62646484 -379.17294312]
[406.98809814 -366.26345825]
[407.16601562 -351.36990356]
[393.47964478 -343.43304443]
[385.84124756 -330.52355957]
[378.20288086 -317.61404419]
[382.14117432 -303.29534912]
[374.57867432 -290.09448242]
[359.53317261 -286.06072998]
[351.89480591 -273.15121460]
[344.25640869 -260.24172974]
[336.61804199 -247.33221436]
[328.97967529 -234.42272949]
[329.15759277 -219.52917480]
[315.47122192 -211.59231567]
[307.83282471 -198.68283081]
[300.19445801 -185.77333069]
[292.55606079 -172.86383057]
[284.91769409 -159.95433044]
[277.27932739 -147.04483032]
[269.64093018 -134.13533020]
[269.81884766 -119.24179077]
[256.13247681 -111.30493164]
[248.49411011 -98.39543152]
[240.85572815 -85.48593903]
[255.69287109 -87.69026947]
[267.85961914 -78.91699982]
[270.45394897 -64.14305878]
[262.00418091 -51.74946594]
[247.30368042 -48.76691818]
[234.69184875 -56.88735962]
[231.32316589 -71.50423431]
[222.09666443 -59.67749786]
[212.87016296 -47.85076141]
[216.24130249 -29.91010666]
[205.29924011 -14.90365601]
[186.55711365 -12.54836273]
[177.84439087 -0.33818159]
[169.13166809 11.87199974]
[160.41896057 24.08218193]
[151.70623779 36.29236221]
[142.99351501 48.50254440]
[134.28079224 60.71272659]
[125.56807709 72.92290497]
[116.85535431 85.13308716]
[108.14263916 97.34326935]
[115.20919800 102.08393860]
[118.42293549 112.27455902]
[114.65976715 124.93337250]
[111.47840881 139.59211731]
[108.29705048 154.25086975]
[105.11568451 168.90962219]
[101.93432617 183.56837463]
[106.56871796 198.69560242]
[96.30810547 209.49230957]
[93.12674713 224.15106201]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 146]
[12 145]
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[40 136]
[41 135]
[42 134]
[43 133]
[44 132]
[45 131]
[46 130]
[47 129]
[48 128]
[49 127]
[54 124]
[55 123]
[56 122]
[57 115]
[58 114]
[59 113]
[61 111]
[62 110]
[63 109]
[64 108]
[65 107]
[66 106]
[67 105]
[69 103]
[70 102]
[71 101]
[72 100]
[73 99]
[76 96]
[77 95]
[78 94]
[80 92]
[81 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
