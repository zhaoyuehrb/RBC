%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGACCGGAACGGAGCCGUGCGGCCCCGCGCGCUCGCAGUCUGUCUCCCGCCGUCCCCACGCACGCGUCCCGGCUCACGCGUCCCCCCGCCCGCCCGCCCGCCCGCCCGCCCCCGCUUGUGCCGCCCCUACCAGAGACCCCCAGGAGCAGG\
) } def
/len { sequence length } bind def

/coor [
[70.36744690 122.07074738]
[56.76926041 128.40235901]
[43.17107773 134.73397827]
[29.57289314 141.06559753]
[15.97470856 147.39721680]
[2.37652493 153.72883606]
[-11.22165871 160.06045532]
[-21.40329552 175.37106323]
[-38.79471588 173.22015381]
[-52.26178360 179.82606506]
[-65.72885132 186.43197632]
[-79.19592285 193.03788757]
[-81.85224915 209.71394348]
[-93.79108429 221.42028809]
[-110.18767548 223.70242310]
[-124.57824707 215.85990906]
[-137.90866089 222.73739624]
[-151.23908997 229.61488342]
[-164.56950378 236.49238586]
[-170.80650330 243.24819946]
[-178.24052429 243.37107849]
[-191.70758057 249.97698975]
[-205.17465210 256.58288574]
[-218.64172363 263.18881226]
[-232.10879517 269.79470825]
[-240.79420471 283.70498657]
[-257.17196655 282.86801147]
[-264.39407349 268.14477539]
[-255.03100586 254.68130493]
[-238.71470642 256.32766724]
[-225.24763489 249.72174072]
[-211.78056335 243.11582947]
[-198.31350708 236.50991821]
[-184.84643555 229.90400696]
[-171.44700623 223.16195679]
[-158.11657715 216.28446960]
[-144.78616333 209.40696716]
[-131.45573425 202.52947998]
[-130.65869141 189.17005920]
[-123.29301453 177.86650085]
[-111.20079041 171.64237976]
[-97.50471497 172.22573853]
[-85.80183411 179.57081604]
[-72.33476257 172.96490479]
[-58.86769867 166.35899353]
[-45.40063095 159.75308228]
[-41.17024231 148.38110352]
[-29.95530319 142.78198242]
[-17.55327797 146.46228027]
[-3.95509410 140.13066101]
[9.64308929 133.79904175]
[23.24127388 127.46742249]
[36.83945847 121.13580322]
[50.43764114 114.80418396]
[64.03582764 108.47256470]
[63.05456924 100.49138641]
[63.82321167 92.48693848]
[66.30533600 84.83834076]
[70.38339233 77.90785980]
[75.86421204 72.02376556]
[82.48820496 67.46473694]
[89.94163513 64.44672394]
[97.87146759 63.11266327]
[105.90212250 63.52574539]
[111.25398254 49.51298141]
[105.04865265 35.22551346]
[110.67581940 21.09081650]
[124.33497620 15.26303482]
[129.68682861 1.25026906]
[135.03869629 -12.76249695]
[128.83335876 -27.04996300]
[134.46052551 -41.18466187]
[148.11968994 -47.01244354]
[145.81538391 -62.66494370]
[157.58442688 -71.79396820]
[162.93627930 -85.80673218]
[168.28814697 -99.81949615]
[161.38003540 -109.58085632]
[160.08274841 -121.34782410]
[164.60563660 -132.15779114]
[173.70736694 -139.34576416]
[185.03392029 -141.20120239]
[190.94926453 -154.98556519]
[196.86460876 -168.76994324]
[190.76998901 -183.35182190]
[196.84860229 -197.94038391]
[211.49411011 -203.88047791]
[226.01759338 -197.64796448]
[231.80252075 -182.94047546]
[225.41679382 -168.48370361]
[210.64897156 -162.85459900]
[204.73362732 -149.07023621]
[198.81829834 -135.28587341]
[206.63769531 -118.78097534]
[199.84919739 -101.48417664]
[182.30090332 -94.46763611]
[176.94905090 -80.45487213]
[171.59719849 -66.44210815]
[174.28428650 -51.79189301]
[162.13244629 -41.66058350]
[168.42910767 -28.21113205]
[163.20117188 -13.92395496]
[149.05145264 -7.41063786]
[143.69960022 6.60212803]
[138.34773254 20.61489296]
[144.64439392 34.06434631]
[139.41645813 48.35152054]
[125.26674652 54.86483765]
[119.91488647 68.87760162]
[127.15044403 74.93888092]
[132.61418152 82.63562012]
[135.94953918 91.46555328]
[136.93885803 100.85243225]
[135.51757812 110.18367767]
[131.77845764 118.85034943]
[142.85755920 128.96238708]
[158.26646423 132.55076599]
[162.45092773 146.84550476]
[173.53002930 156.95753479]
[184.60914612 167.06958008]
[195.68824768 177.18162537]
[211.09715271 180.76998901]
[215.28161621 195.06472778]
[226.36071777 205.17677307]
[239.29345703 199.40028381]
[253.40859985 199.00155640]
[266.56570435 204.00788879]
[276.78225708 213.62947083]
[282.53237915 226.38380432]
[282.97473145 240.32398987]
[278.07537842 253.33601379]
[288.94726562 263.67050171]
[304.95706177 264.70315552]
[314.01306152 277.94580078]
[309.16833496 293.23986816]
[294.13928223 298.85299683]
[280.45495605 290.47933960]
[278.61276245 274.54241943]
[267.74087524 264.20791626]
[252.93563843 270.14859009]
[236.96279907 269.04809570]
[223.01136780 261.07543945]
[213.88883972 247.77679443]
[211.45623779 231.77575684]
[216.24867249 216.25587463]
[205.16957092 206.14384460]
[190.55311584 203.27874756]
[185.57620239 188.26072693]
[174.49710083 178.14869690]
[163.41799927 168.03665161]
[152.33888245 157.92460632]
[137.72244263 155.05952454]
[132.74552917 140.04150391]
[121.66641998 129.92945862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 52]
[5 51]
[6 50]
[7 49]
[9 46]
[10 45]
[11 44]
[12 43]
[16 38]
[17 37]
[18 36]
[19 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[64 109]
[65 108]
[68 105]
[69 104]
[70 103]
[73 100]
[75 98]
[76 97]
[77 96]
[82 93]
[83 92]
[84 91]
[115 154]
[116 153]
[118 151]
[119 150]
[120 149]
[121 148]
[123 146]
[124 145]
[131 139]
[132 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
