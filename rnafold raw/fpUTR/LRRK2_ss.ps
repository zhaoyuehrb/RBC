%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCUGGCUGCGGGCGGUGAGCUGAGCUCGCCCCCGGGGAGCUGUGGCCGGCGCCCCUGCCGGUUCCCUGAGCAGCGGACGUUCAUGCUGGGAGGGCGGCGGGUUGGAAGCAGGUGCCACC\
) } def
/len { sequence length } bind def

/coor [
[81.08381653 110.53653717]
[66.26250458 112.84489441]
[51.44118500 115.15325165]
[36.61986542 117.46160889]
[21.79854584 119.76996613]
[6.97722769 122.07833099]
[-7.84409046 124.38668823]
[-22.66540909 126.69504547]
[-37.48672867 129.00340271]
[-52.30804443 131.31176758]
[-67.12936401 133.62011719]
[-86.44635010 158.92361450]
[-100.48210144 164.21488953]
[-114.51785278 169.50617981]
[-121.54441071 175.53137207]
[-128.98371887 174.74789429]
[-143.15104675 179.67602539]
[-157.31838989 184.60417175]
[-171.48573303 189.53230286]
[-185.65306091 194.46043396]
[-199.82040405 199.38858032]
[-213.98774719 204.31671143]
[-226.96115112 215.23123169]
[-241.04054260 205.78627014]
[-235.86224365 189.64248657]
[-218.91587830 190.14936829]
[-204.74853516 185.22123718]
[-190.58120728 180.29310608]
[-176.41386414 175.36495972]
[-162.24652100 170.43682861]
[-148.07919312 165.50869751]
[-133.91184998 160.58055115]
[-119.80913544 155.47042847]
[-105.77338409 150.17913818]
[-91.73763275 144.88786316]
[-90.96544647 129.90774536]
[-104.38275146 123.20133972]
[-120.71090698 124.72566986]
[-129.97305298 111.19257355]
[-122.64109802 96.52375031]
[-106.25752258 95.80921936]
[-97.67634583 109.78403473]
[-84.25904083 116.49044037]
[-69.43772125 118.79880524]
[-54.61640549 116.49044037]
[-39.79508591 114.18208313]
[-24.97376823 111.87372589]
[-10.15244961 109.56536865]
[4.66886902 107.25701141]
[19.49018669 104.94864655]
[34.31150436 102.64028931]
[49.13282394 100.33193207]
[63.95414352 98.02357483]
[78.77545929 95.71521759]
[91.84281158 79.94256592]
[112.20945740 82.11789703]
[124.43488312 73.42658234]
[136.66030884 64.73526764]
[148.88574219 56.04394913]
[161.11116028 47.35263443]
[173.33657837 38.66131592]
[185.56201172 29.97000122]
[187.82046509 24.99905014]
[191.44032288 21.78750992]
[195.48840332 20.55996513]
[199.08337402 21.12297630]
[211.94308472 13.40108395]
[224.80281067 5.67919254]
[237.66252136 -2.04269981]
[239.42156982 -15.46789455]
[248.48785400 -25.25979996]
[261.35592651 -27.96476364]
[273.23895264 -22.80728912]
[286.29321289 -30.19551086]
[299.34750366 -37.58373260]
[312.40179443 -44.97195053]
[325.45605469 -52.36017227]
[327.07656860 -67.79239655]
[337.48342896 -79.30226898]
[352.67495728 -82.46399689]
[366.80975342 -76.06184387]
[374.45266724 -62.55756378]
[372.66482544 -47.14382553]
[362.13372803 -35.74753189]
[346.90878296 -32.75078201]
[332.84426880 -39.30589294]
[319.79000854 -31.91767311]
[306.73571777 -24.52945328]
[293.68145752 -17.14123154]
[280.62716675 -9.75301075]
[276.87820435 6.58650541]
[262.21289062 15.38123894]
[245.38441467 10.81701946]
[232.52470398 18.53891182]
[219.66497803 26.26080322]
[206.80526733 33.98269653]
[194.25332642 42.19542694]
[182.02790833 50.88674164]
[169.80247498 59.57806015]
[157.57705688 68.26937866]
[145.35162354 76.96069336]
[133.12620544 85.65200806]
[120.90077972 94.34332275]
[121.57716370 101.80736542]
[119.66849518 109.05487061]
[115.40345001 115.21755981]
[121.76216888 128.80308533]
[136.34887695 134.26803589]
[142.60398865 148.13627625]
[137.30412292 162.00880432]
[143.66282654 175.59432983]
[157.41206360 184.53248596]
[156.27593994 200.89222717]
[141.42318726 207.84407043]
[128.13305664 198.23654175]
[130.07730103 181.95304871]
[123.71858215 168.36750793]
[109.67108154 163.55053711]
[103.02890778 149.86346436]
[108.17663574 135.16180420]
[101.81791687 121.57627106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 52]
[4 51]
[5 50]
[6 49]
[7 48]
[8 47]
[9 46]
[10 45]
[11 44]
[12 35]
[13 34]
[14 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[36 43]
[37 42]
[56 103]
[57 102]
[58 101]
[59 100]
[60 99]
[61 98]
[62 97]
[66 96]
[67 95]
[68 94]
[69 93]
[73 90]
[74 89]
[75 88]
[76 87]
[77 86]
[106 121]
[107 120]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
