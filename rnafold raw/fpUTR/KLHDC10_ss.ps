%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGUCUCUGGUGGGACCGGGCGCUGCCCCCUUCCCCUGUCUCCUGGGUCUCUGGAGGAGCCCAGGAAGGAGGCUCCGCUGGUUCCGCUGGGUCAGGCGCUGACGGGACCGGGCUGCGGCAAUCGUUAGCGGGUC\
) } def
/len { sequence length } bind def

/coor [
[294.95007324 275.86895752]
[283.19180298 266.55535889]
[271.43353271 257.24176025]
[259.67526245 247.92817688]
[252.41371155 246.22566223]
[247.75622559 238.26113892]
[240.53593445 236.39134216]
[236.06367493 228.32136536]
[224.74807739 218.47467041]
[213.43249512 208.62797546]
[202.11689758 198.78128052]
[190.80131531 188.93458557]
[179.48571777 179.08789062]
[168.17013550 169.24119568]
[156.85453796 159.39450073]
[145.53894043 149.54780579]
[134.22335815 139.70111084]
[122.90776825 129.85441589]
[111.59217834 120.00772095]
[100.27658844 110.16102600]
[92.53990936 107.63432312]
[88.81673431 99.95383453]
[77.73160553 89.84840393]
[62.16451263 90.39923859]
[51.06656647 79.99297333]
[50.63736343 65.14873505]
[39.55223083 55.04330444]
[28.46709633 44.93787003]
[13.05605984 41.35868835]
[8.86307812 27.06644440]
[-2.22205591 16.96100998]
[-13.30718994 6.85557556]
[-11.70314503 21.76956367]
[-18.26953316 35.25594711]
[-30.99867439 43.19124985]
[-45.99861526 43.14923859]
[-58.68310547 35.14276123]
[-65.17385101 21.61981010]
[-63.48629379 6.71504164]
[-54.13640976 -5.01439381]
[-39.98293686 -9.98220634]
[-25.35434341 -6.67004728]
[-34.11496353 -18.84590530]
[-42.87558365 -31.02176476]
[-51.63620377 -43.19762421]
[-60.39682388 -55.37348175]
[-69.15744781 -67.54933929]
[-77.91806793 -79.72519684]
[-85.54096985 -84.92299652]
[-86.73657990 -92.28500366]
[-95.21362305 -104.65996552]
[-103.69066620 -117.03492737]
[-112.16771698 -129.40988159]
[-126.10720062 -139.06011963]
[-120.69293213 -155.12629700]
[-103.75580597 -154.37118530]
[-99.79275513 -137.88693237]
[-91.31570435 -125.51197052]
[-82.83866119 -113.13700867]
[-74.36161804 -100.76204681]
[-65.74220276 -88.48581696]
[-56.98158646 -76.30995941]
[-48.22096634 -64.13410187]
[-39.46034622 -51.95824432]
[-30.69972610 -39.78238297]
[-21.93910599 -27.60652542]
[-13.17848587 -15.43066692]
[-3.20175505 -4.22955799]
[7.88337851 5.87587643]
[18.96851158 15.98131084]
[33.58666611 18.83768463]
[38.57252884 33.85273361]
[49.65766525 43.95816803]
[60.74279785 54.06360245]
[75.56331635 53.12132263]
[86.94917297 63.21175766]
[87.83703613 78.76326752]
[98.92217255 88.86869812]
[110.12328339 98.84542847]
[121.43887329 108.69213104]
[132.75445557 118.53882599]
[144.07005310 128.38551331]
[155.38563538 138.23220825]
[166.70123291 148.07890320]
[178.01683044 157.92559814]
[189.33241272 167.77229309]
[200.64801025 177.61898804]
[211.96359253 187.46568298]
[223.27919006 197.31239319]
[234.59477234 207.15908813]
[245.91036987 217.00578308]
[257.33892822 226.72113037]
[268.98886108 236.16990662]
[280.74713135 245.48350525]
[292.50540161 254.79708862]
[304.26367188 264.11068726]
[326.58068848 265.52944946]
[334.21609497 285.74661255]
[346.78353882 293.93554688]
[359.35101318 302.12451172]
[371.91848755 310.31344604]
[384.48593140 318.50241089]
[397.05340576 326.69134521]
[409.62084961 334.88031006]
[422.18832397 343.06924438]
[434.75579834 351.25820923]
[451.75595093 347.31982422]
[466.08761597 356.67324829]
[469.20120239 373.15902710]
[481.95446777 381.05551147]
[494.70773315 388.95199585]
[510.59100342 386.69338989]
[522.16052246 397.80758667]
[520.54119873 413.76870728]
[506.97521973 422.33276367]
[491.86920166 416.93014526]
[486.81124878 401.70526123]
[474.05798340 393.80877686]
[461.30471802 385.91229248]
[449.24493408 390.59558105]
[436.50653076 387.40301514]
[427.82669067 377.28952026]
[426.56683350 363.82565308]
[413.99935913 355.63671875]
[401.43191528 347.44775391]
[388.86444092 339.25881958]
[376.29699707 331.06985474]
[363.72952271 322.88092041]
[351.16204834 314.69198608]
[338.59460449 306.50302124]
[326.02713013 298.31408691]
[318.66140747 301.62203979]
[310.49267578 301.69732666]
[302.89309692 298.45141602]
[297.16973877 292.36001587]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[4 93]
[6 92]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[17 82]
[18 81]
[19 80]
[20 79]
[22 78]
[23 77]
[26 74]
[27 73]
[28 72]
[30 70]
[31 69]
[32 68]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[50 60]
[51 59]
[52 58]
[53 57]
[98 131]
[99 130]
[100 129]
[101 128]
[102 127]
[103 126]
[104 125]
[105 124]
[106 123]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
