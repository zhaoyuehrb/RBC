%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGACAGGGCGGUUUGGGAGGCCCAGGCGGCGGAGCCUCCGGGACGGCGAGCGGCGGGCGGCGGAGGAGGAGACGGCAGGUCGGGCAUUAAAAAAUAUUUAAUCAUUCAUGUGUUGAGACUCAUUCUUGAGUU\
) } def
/len { sequence length } bind def

/coor [
[90.90972137 166.21141052]
[96.49620056 180.13230896]
[91.12580872 194.13798523]
[77.66417694 200.75497437]
[63.29447937 196.45245361]
[55.68440628 183.52624512]
[58.89470673 168.87380981]
[71.21105194 160.31402588]
[78.10291290 146.99102783]
[70.91799164 144.83999634]
[58.48242950 153.22789001]
[51.36820984 167.35935974]
[36.49018097 168.06185913]
[24.05461884 176.44975281]
[11.61905479 184.83764648]
[-0.81650919 193.22554016]
[-13.25207233 201.61343384]
[-25.68763542 210.00132751]
[-38.12319946 218.38922119]
[-47.87336731 232.25898743]
[-63.90021896 226.72940063]
[-63.02339935 209.79814148]
[-46.51109314 205.95365906]
[-34.07553101 197.56576538]
[-21.63996696 189.17787170]
[-9.20440292 180.78997803]
[3.23116088 172.40208435]
[15.66672421 164.01419067]
[28.10228729 155.62629700]
[34.32703018 142.09477234]
[50.09453583 140.79232788]
[62.53009796 132.40443420]
[56.41978073 120.09141541]
[54.08913803 106.98252106]
[55.49039078 94.17561340]
[60.27277756 82.67816162]
[67.82897186 73.32799530]
[58.18716049 61.83732605]
[48.54534531 50.34666061]
[38.90353394 38.85599518]
[29.26171875 27.36532784]
[19.61990356 15.87466145]
[2.80957484 17.29900932]
[-11.41419315 8.53888130]
[-17.58331490 -6.80685854]
[-13.46402168 -22.65395355]
[-28.38797379 -27.90621567]
[-30.98377037 -42.57288361]
[-40.89035034 -53.83608246]
[-56.74417496 -56.29286194]
[-64.58268738 -70.29062653]
[-58.39284515 -85.09148407]
[-42.92296982 -89.34148407]
[-30.04022598 -79.78039551]
[-29.62714958 -63.74266052]
[-19.72056961 -52.47946167]
[-5.50520420 -48.03281784]
[-2.20082140 -32.56053162]
[10.97119904 -35.02861404]
[23.73742867 -30.60842514]
[32.70619202 -20.36046791]
[35.43849945 -6.90825176]
[31.11057091 6.23284674]
[40.75238419 17.72351265]
[50.39419937 29.21417999]
[60.03601456 40.70484543]
[69.67782593 52.19551468]
[79.31964111 63.68618011]
[88.45063782 59.83803940]
[98.23095703 58.24785995]
[108.11073303 59.00503922]
[117.53451538 62.06701279]
[125.97248077 67.26162720]
[132.95024109 74.29683685]
[138.07548523 82.77711487]
[152.62992859 79.14828491]
[167.18435669 75.51945496]
[181.73880005 71.89062500]
[196.29322815 68.26179504]
[207.81166077 57.41576385]
[222.03269958 61.84423065]
[236.58712769 58.21540070]
[244.24000549 53.05838013]
[251.52246094 54.67566299]
[266.15737915 51.38648605]
[280.79232788 48.09730530]
[293.98138428 35.30795670]
[310.51428223 41.07496643]
[325.06872559 37.44614029]
[339.62316895 33.81731033]
[354.17758179 30.18848228]
[368.73202515 26.55965424]
[383.28646851 22.93082619]
[392.74850464 9.97514629]
[408.78259277 9.43910789]
[419.08877563 21.73391151]
[415.76101685 37.42803955]
[401.35208130 44.48229599]
[386.91528320 37.48526001]
[372.36087036 41.11408997]
[357.80642700 44.74291992]
[343.25198364 48.37174606]
[328.69754028 52.00057602]
[314.14312744 55.62940216]
[307.60183716 65.87284851]
[295.43560791 68.97669983]
[284.08151245 62.73223877]
[269.44656372 66.02141571]
[254.81163025 69.31060028]
[240.21595764 72.76983643]
[225.66152954 76.39866638]
[215.18412781 86.98513794]
[199.92205811 82.81623077]
[185.36763000 86.44506073]
[170.81318665 90.07389069]
[156.25875854 93.70272064]
[141.70431519 97.33155060]
[137.28511047 126.36315155]
[113.49911499 147.66355896]
[119.27965546 161.50498962]
[125.06019592 175.34643555]
[130.84072876 189.18786621]
[136.62127686 203.02931213]
[142.40180969 216.87074280]
[155.76216125 226.38038635]
[153.93759155 242.67771912]
[138.80506897 248.99743652]
[125.93164062 238.83836365]
[128.56037903 222.65127563]
[122.77983093 208.80984497]
[116.99929810 194.96841431]
[111.21875763 181.12696838]
[105.43821716 167.28553772]
[99.65767670 153.44409180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 32]
[11 31]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[46 58]
[48 56]
[49 55]
[75 117]
[76 116]
[77 115]
[78 114]
[79 113]
[81 111]
[82 110]
[84 109]
[85 108]
[86 107]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
