%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGACACUUGUGCGGCAGCGGCGGCGGCCACCCGGCGCUCCUUCGCGACGGUUCGGCCGGGUGCCGCUGGCGGCCGUUGCCAGGGUAGGGGUCGCUUUGCGGC\
) } def
/len { sequence length } bind def

/coor [
[121.03385162 273.43005371]
[132.53239441 263.32846069]
[128.94265747 248.76431274]
[125.35292053 234.20019531]
[121.76318359 219.63606262]
[111.20487976 209.13027954]
[115.41474915 193.87945557]
[111.82501221 179.31533813]
[108.23528290 164.75120544]
[104.64554596 150.18707275]
[101.05580902 135.62295532]
[90.49750519 125.11716461]
[94.70737457 109.86634827]
[90.89808655 95.35810089]
[86.87010956 80.90903473]
[82.84213257 66.45997620]
[78.81415558 52.01091003]
[74.78617096 37.56184769]
[70.75819397 23.11278725]
[66.73021698 8.66372490]
[62.70223999 -5.78533697]
[58.67426300 -20.23439980]
[53.78121948 -34.41389465]
[48.04096985 -48.27209091]
[42.30071640 -62.13028336]
[36.56046677 -75.98847198]
[30.82021523 -89.84666443]
[25.07996368 -103.70486450]
[18.80179024 -110.57431030]
[19.38261986 -118.06935120]
[14.06354618 -132.09458923]
[8.74447250 -146.11984253]
[3.42539930 -160.14508057]
[-1.89367402 -174.17031860]
[-7.21274757 -188.19557190]
[-12.53182030 -202.22080994]
[-28.84173393 -206.38880920]
[-39.39719772 -219.28979492]
[-40.23629761 -235.77226257]
[-31.22761154 -249.40295410]
[-36.96786118 -263.26116943]
[-52.08707047 -266.75247192]
[-62.24119186 -278.48590088]
[-63.52576065 -293.94970703]
[-55.44683456 -307.19775391]
[-41.11092758 -313.13586426]
[-26.03048515 -309.48077393]
[-16.00424576 -297.63787842]
[-14.88750458 -282.16104126]
[-23.10967064 -269.00140381]
[-17.36941910 -255.14321899]
[-4.06588793 -253.21240234]
[6.60563087 -244.85971069]
[11.75759602 -232.20796204]
[9.92803001 -218.56074524]
[1.49342299 -207.53988647]
[6.81249619 -193.51463318]
[12.13156986 -179.48939514]
[17.45064354 -165.46415710]
[22.76971626 -151.43890381]
[28.08878899 -137.41366577]
[33.40786362 -123.38842010]
[38.93815613 -109.44511414]
[44.67840576 -95.58692169]
[50.41865921 -81.72872925]
[56.15890884 -67.87053680]
[61.89916229 -54.01234055]
[67.63941193 -40.15414810]
[70.36290741 -38.98374939]
[72.74345398 -36.57252121]
[74.26941681 -33.06253815]
[74.49745941 -28.79194260]
[73.12332153 -24.26237679]
[77.15129852 -9.81331444]
[81.17928314 4.63574696]
[85.20726013 19.08480835]
[89.23523712 33.53387070]
[93.26321411 47.98293304]
[97.29119110 62.43199539]
[101.31916809 76.88105774]
[105.34714508 91.33011627]
[110.45296478 97.75539398]
[109.27150726 106.27661133]
[120.08657074 117.82411957]
[115.61993408 132.03321838]
[119.20967102 146.59735107]
[122.79940796 161.16146851]
[126.38914490 175.72560120]
[129.97888184 190.28971863]
[140.79394531 201.83723450]
[136.32731628 216.04632568]
[139.91703796 230.61045837]
[143.50677490 245.17459106]
[147.09651184 259.73870850]
[161.97241211 263.33959961]
[173.46328735 273.44992065]
[178.92861938 287.74636841]
[177.11253357 302.94375610]
[168.43232727 315.54980469]
[154.88267517 322.66775513]
[139.57716370 322.66195679]
[126.03290558 315.53375244]
[117.36225891 302.92111206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[5 91]
[7 89]
[8 88]
[9 87]
[10 86]
[11 85]
[13 83]
[14 81]
[15 80]
[16 79]
[17 78]
[18 77]
[19 76]
[20 75]
[21 74]
[22 73]
[23 68]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[30 62]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[40 51]
[41 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
