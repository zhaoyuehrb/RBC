%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCGCAGCCAGAGCCAGAGCCGGAGCCGCAGCCGGAACCGGAGCCGGAGCCGCGGGGCAGGAGGCGGCGCCCGCGGGCGGCCGGGCCCGGC\
) } def
/len { sequence length } bind def

/coor [
[72.56705475 380.34362793]
[59.73189926 369.26684570]
[66.82267761 353.86691284]
[67.82456207 338.90042114]
[68.82645416 323.93392944]
[69.82834625 308.96740723]
[62.05084610 299.53799438]
[62.89234924 286.93948364]
[72.44589233 278.07858276]
[73.94732666 263.15393066]
[75.44876099 248.22924805]
[69.02426147 234.79142761]
[78.10404205 221.83503723]
[75.59045410 214.72175598]
[79.91316223 206.43966675]
[81.91246796 191.57350159]
[83.91177368 176.70733643]
[71.71958160 165.85514832]
[68.29256439 149.72798157]
[75.15415192 134.55520630]
[89.81471252 126.31616211]
[91.31614685 111.39149475]
[85.74799347 98.56623840]
[93.75918579 87.10707092]
[95.26062012 72.18240356]
[88.94351196 57.67706680]
[97.91590118 45.78818512]
[99.41733551 30.86351776]
[100.91876984 15.93885136]
[102.42021179 1.01418376]
[103.92164612 -13.91048336]
[94.19618225 -26.07819366]
[95.93145752 -41.19253922]
[107.59144592 -50.38929367]
[109.09288025 -65.31396484]
[102.77577972 -79.81929779]
[111.74816132 -91.70818329]
[102.02270508 -103.87589264]
[103.75798035 -118.99023438]
[115.41796875 -128.18699646]
[116.91940308 -143.11166382]
[118.42083740 -158.03633118]
[108.69537354 -170.20404053]
[110.43065643 -185.31838989]
[122.09063721 -194.51513672]
[123.59207153 -209.43980408]
[116.36559296 -224.16087341]
[125.72463989 -237.62715149]
[142.04142761 -235.98565674]
[148.53063965 -220.92504883]
[138.51673889 -207.93836975]
[137.01530457 -193.01370239]
[146.60978699 -181.67872620]
[145.29972839 -166.52160645]
[133.34550476 -156.53489685]
[131.84407043 -141.61022949]
[130.34263611 -126.68555450]
[139.93710327 -115.35058594]
[138.62704468 -100.19345856]
[126.67282867 -90.20674896]
[133.09733582 -76.76892090]
[124.01754761 -63.81252670]
[122.51611328 -48.88785934]
[132.11059570 -37.55288696]
[130.80052185 -22.39576340]
[118.84631348 -12.40904808]
[117.34487915 2.51561904]
[115.84343719 17.44028664]
[114.34200287 32.36495209]
[112.84056854 47.28961945]
[119.26506805 60.72744370]
[110.18528748 73.68383789]
[108.68385315 88.60850525]
[114.25200653 101.43376160]
[106.24081421 112.89292908]
[104.73937988 127.81759644]
[115.75607300 136.29002380]
[121.05673218 149.01940918]
[119.33670807 162.59085083]
[111.15928650 173.42155457]
[98.77793121 178.70664978]
[96.77863312 193.57281494]
[94.77932739 208.43896484]
[93.02870941 223.33647156]
[99.34581757 237.84179688]
[90.37342834 249.73068237]
[88.87199402 264.65536499]
[87.37055969 279.58001709]
[95.35956573 296.06594849]
[84.79484558 309.96929932]
[83.79295349 324.93582153]
[82.79106903 339.90231323]
[81.78917694 354.86880493]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 93]
[4 92]
[5 91]
[6 90]
[9 88]
[10 87]
[11 86]
[13 84]
[15 83]
[16 82]
[17 81]
[21 76]
[22 75]
[24 73]
[25 72]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[34 63]
[35 62]
[37 60]
[40 57]
[41 56]
[42 55]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
