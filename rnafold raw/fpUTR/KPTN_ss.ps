%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCAACGGCCGGGCACCCGGCGGUUCAGGUCGCUUAGAGAGUCGUAGGUUGGGUAGUGCGGGUUGGGGCGGGGGCUGCGGAGAGGGUGCUUAACUGAGGGGC\
) } def
/len { sequence length } bind def

/coor [
[81.71697235 386.94189453]
[84.48293304 367.75857544]
[84.93166351 352.76528931]
[77.57856750 339.81225586]
[85.72524261 326.24972534]
[75.35781097 315.61715698]
[75.59930420 300.40542603]
[86.82203674 289.60321045]
[87.27076721 274.60992432]
[87.71949768 259.61663818]
[77.35206604 248.98403931]
[77.59355927 233.77232361]
[88.81628418 222.97009277]
[89.26502228 207.97680664]
[89.71375275 192.98352051]
[90.16248322 177.99023438]
[90.61121368 162.99694824]
[91.05994415 148.00366211]
[91.50868225 133.01037598]
[91.95741272 118.01708984]
[80.27817535 100.59024811]
[90.89431000 82.49613953]
[89.54972076 67.55651855]
[88.20513153 52.61690903]
[86.86054230 37.67729187]
[85.51595306 22.73767853]
[84.17136383 7.79806471]
[82.82677460 -7.14155006]
[79.61308289 -11.67139721]
[78.67366791 -16.49693108]
[79.71570587 -20.65875626]
[82.09341431 -23.47103500]
[82.09341431 -38.47103500]
[82.09341431 -53.47103500]
[82.09341431 -68.47103882]
[82.09341431 -83.47103882]
[82.09341431 -98.47103882]
[73.82787323 -105.85520935]
[71.13771820 -116.37870789]
[74.69751740 -126.40580750]
[83.06531525 -132.61283875]
[83.96237946 -147.58599854]
[77.06423187 -161.82418823]
[85.54882812 -174.06596375]
[86.44589233 -189.03910828]
[87.34295654 -204.01226807]
[88.24001312 -218.98541260]
[89.13707733 -233.95857239]
[76.27493286 -242.35264587]
[69.34734344 -256.06045532]
[70.21781158 -271.39468384]
[78.65217590 -284.23043823]
[92.38162994 -291.11502075]
[107.71303558 -290.19650269]
[120.52230835 -281.72195435]
[127.36382294 -267.97097778]
[126.39724731 -252.64253235]
[117.88258362 -239.85987854]
[104.11022949 -233.06150818]
[103.21316528 -218.08834839]
[102.31610870 -203.11520386]
[101.41904449 -188.14204407]
[100.52198029 -173.16889954]
[107.48429108 -160.00167847]
[98.93553162 -146.68893433]
[98.03846741 -131.71577454]
[108.02878571 -115.27459717]
[97.09341431 -98.47103882]
[97.09341431 -83.47103882]
[97.09341431 -68.47103882]
[97.09341431 -53.47103500]
[97.09341431 -38.47103500]
[97.09341431 -23.47103500]
[97.76638794 -8.48613930]
[99.11097717 6.45347500]
[100.45556641 21.39308929]
[101.80015564 36.33270264]
[103.14474487 51.27231979]
[104.48933411 66.21192932]
[105.83392334 81.15155029]
[112.91691589 85.08516693]
[117.82190704 91.53367615]
[119.72182465 99.40975189]
[118.29632568 107.38534546]
[113.78576660 114.11564636]
[106.95069885 118.46582031]
[106.50196838 133.45910645]
[106.05323029 148.45239258]
[105.60449982 163.44567871]
[105.15576935 178.43896484]
[104.70703888 193.43225098]
[104.25830841 208.42553711]
[103.80957031 223.41882324]
[114.36619568 234.87289429]
[113.69753265 250.07182312]
[102.71278381 260.06536865]
[102.26405334 275.05865479]
[101.81532288 290.05194092]
[112.37194824 301.50598145]
[111.70328522 316.70492554]
[100.71852875 326.69845581]
[108.03952789 340.72393799]
[99.92494965 353.21401978]
[99.47621918 368.20730591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 104]
[3 103]
[5 101]
[8 98]
[9 97]
[10 96]
[13 93]
[14 92]
[15 91]
[16 90]
[17 89]
[18 88]
[19 87]
[20 86]
[22 80]
[23 79]
[24 78]
[25 77]
[26 76]
[27 75]
[28 74]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[37 68]
[41 66]
[42 65]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
