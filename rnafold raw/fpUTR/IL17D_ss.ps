%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUGUUUUCAGCUCCUGGAGGCGAAAGGUGCAGAGUCGCUCUGUGUCCGUGAGGCCGGGCGGCGACCUCGCUCAGUCGGCUUCUCGGUCCGAGUCCCCGGGUCUGG\
) } def
/len { sequence length } bind def

/coor [
[49.53051758 386.78137207]
[42.45378876 400.30477905]
[30.20516014 409.41159058]
[15.21661091 412.29360962]
[0.46412596 408.37866211]
[-11.12317753 398.44400024]
[-17.24463272 384.46221924]
[-16.68481827 369.20938110]
[-9.55488682 355.71392822]
[2.72950745 346.65542603]
[17.72929001 343.83245850]
[21.57676506 329.33428955]
[25.42424011 314.83609009]
[19.60207176 304.12438965]
[22.80153847 291.94296265]
[33.81844711 285.04641724]
[38.08213425 270.66513062]
[42.34581757 256.28387451]
[46.60950089 241.90258789]
[50.87318420 227.52131653]
[47.07270813 213.11973572]
[58.41349792 202.08808899]
[62.67718124 187.70681763]
[66.94086456 173.32554626]
[59.35763931 164.56579590]
[56.98893738 153.10095215]
[60.55260468 141.82275391]
[69.25480652 133.63481140]
[80.96337891 130.70518494]
[86.04850769 116.59342957]
[79.12842560 105.86204529]
[79.44922638 93.09696198]
[67.76036072 83.69641113]
[56.07149887 74.29585266]
[44.38263321 64.89530182]
[32.69376755 55.49474716]
[21.00490189 46.09419250]
[4.87287378 40.87940598]
[5.41807318 23.93422890]
[21.85195351 19.76722908]
[30.40545654 34.40532684]
[42.09432220 43.80588150]
[53.78318787 53.20643616]
[65.47205353 62.60699081]
[77.16091919 72.00754547]
[88.84978485 81.40809631]
[95.70811462 78.74992371]
[103.06050110 78.53795624]
[110.06057739 80.79659271]
[121.18844604 70.73823547]
[132.31631470 60.67987442]
[137.36576843 45.68609238]
[151.99589539 42.89170456]
[163.12376404 32.83334351]
[174.25163269 22.77498436]
[185.37950134 12.71662617]
[196.50737000 2.65826631]
[207.63523865 -7.40009308]
[218.76309204 -17.45845222]
[229.89096069 -27.51681137]
[230.40800476 -44.92935944]
[243.05845642 -56.41179276]
[259.76959229 -55.28953171]
[270.60296631 -65.66439819]
[281.43634033 -76.03926086]
[292.26974487 -86.41412354]
[296.33355713 -102.30178070]
[312.19540405 -106.46509552]
[323.53799438 -94.62120819]
[318.69305420 -78.95410156]
[302.64459229 -75.58074188]
[291.81121826 -65.20587921]
[280.97784424 -54.83101273]
[270.14443970 -44.45615005]
[271.66049194 -31.57166672]
[265.34286499 -20.01713181]
[253.32621765 -14.16840839]
[239.94932556 -16.38894653]
[228.82145691 -6.33058643]
[217.69358826 3.72777295]
[206.56571960 13.78613281]
[195.43786621 23.84449196]
[184.30999756 33.90285110]
[173.18212891 43.96121216]
[162.05426025 54.01956940]
[157.80073547 68.29391479]
[142.37466431 71.80773926]
[131.24681091 81.86610413]
[120.11894226 91.92446136]
[118.00383759 112.07675171]
[100.16025543 121.67856598]
[95.07511902 135.79031372]
[103.81728363 152.46179199]
[97.85002899 169.98286438]
[81.32213593 177.58923340]
[77.05845642 191.97050476]
[72.79476929 206.35177612]
[76.29027557 221.78199768]
[65.25445557 231.78500366]
[60.99077225 246.16627502]
[56.72708893 260.54754639]
[52.46340561 274.92883301]
[48.19972229 289.31008911]
[52.95311737 307.02682495]
[39.92240906 318.68359375]
[36.07493591 333.18176270]
[32.22745895 347.67993164]
[43.85379791 357.56884766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 107]
[12 106]
[13 105]
[16 103]
[17 102]
[18 101]
[19 100]
[20 99]
[22 97]
[23 96]
[24 95]
[29 92]
[30 91]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[37 41]
[49 89]
[50 88]
[51 87]
[53 85]
[54 84]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[60 78]
[63 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
