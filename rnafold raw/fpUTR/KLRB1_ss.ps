%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCACAGAAUUGAGAGUUUGUUCUUACACACAAGUUUAAUGCCACCUUCCUCUGUCUGCC\
) } def
/len { sequence length } bind def

/coor [
[91.37693024 294.44009399]
[90.62924194 279.45874023]
[79.80734253 272.06677246]
[75.26437378 259.56408691]
[78.92319489 246.56999207]
[89.63019562 238.02893066]
[89.63019562 223.02893066]
[89.63019562 208.02893066]
[89.63019562 193.02893066]
[89.63019562 178.02893066]
[79.19020844 170.10671997]
[75.27609253 157.39312744]
[79.57806396 144.59756470]
[90.69749451 136.60081482]
[91.44518280 121.61946869]
[92.19287109 106.63811493]
[89.33419037 98.74264526]
[93.36971283 90.93422699]
[94.86322784 76.00876617]
[87.21291351 65.31732178]
[89.00554657 52.70341873]
[98.69448090 45.07004929]
[100.93011475 30.23758507]
[93.82223511 19.17809486]
[96.24138641 6.66923046]
[106.29877472 -0.47169930]
[109.27096558 -15.17428684]
[112.24315643 -29.87687302]
[107.39372253 -44.93653870]
[117.49947357 -55.87834549]
[120.47166443 -70.58093262]
[114.73868561 -85.94534302]
[125.38542175 -98.41847992]
[141.45941162 -95.16905212]
[146.42512512 -79.53978729]
[135.17425537 -67.60874176]
[132.20205688 -52.90615463]
[137.26408386 -38.89811325]
[126.94574738 -26.90468216]
[123.97355652 -12.20209408]
[121.00136566 2.50049281]
[127.58257294 18.58921051]
[115.76258087 32.47322083]
[113.52694702 47.30568314]
[120.90192413 63.04635239]
[109.78868866 77.50228119]
[108.29517365 92.42774200]
[107.17422485 107.38580322]
[106.42653656 122.36715698]
[105.67884827 137.34851074]
[117.60191345 149.89436340]
[116.96610260 166.85757446]
[104.63019562 178.02893066]
[104.63019562 193.02893066]
[104.63019562 208.02893066]
[104.63019562 223.02893066]
[104.63019562 238.02893066]
[117.16379547 249.96487427]
[117.37432098 266.93869019]
[105.61059570 278.71105957]
[106.35828400 293.69241333]
[109.50630951 312.81674194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[6 57]
[7 56]
[8 55]
[9 54]
[10 53]
[14 50]
[15 49]
[16 48]
[18 47]
[19 46]
[22 44]
[23 43]
[26 41]
[27 40]
[28 39]
[30 37]
[31 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
