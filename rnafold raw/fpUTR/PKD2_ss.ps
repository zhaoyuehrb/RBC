%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCGGGAAGAAAGGAACAUGGCUCCUGAGGCGCACAGCGCCGAGCGCGGCGCCGCGCACCCGCGCGCCGGACGCCAGUGACCGCG\
) } def
/len { sequence length } bind def

/coor [
[175.89097595 209.11415100]
[166.90180969 197.10603333]
[157.91264343 185.09791565]
[148.92347717 173.08979797]
[139.72140503 161.24404907]
[130.30937195 149.56442261]
[120.89733887 137.88479614]
[111.48530579 126.20517731]
[103.95087433 128.33749390]
[96.12052155 128.34736633]
[88.58074951 126.23402405]
[81.89626312 122.15576935]
[76.56774139 116.41806030]
[72.99428558 109.45064545]
[58.03250122 110.52072906]
[43.07072067 111.59082031]
[28.10894012 112.66091156]
[19.08464241 125.43181610]
[3.94956565 129.36418152]
[-10.14996910 122.60125732]
[-16.55659485 108.33628845]
[-12.24529552 93.30477142]
[0.74826217 84.60411072]
[16.28891945 86.34249878]
[27.03885078 97.69912720]
[42.00063324 96.62903595]
[56.96241379 95.55895233]
[71.92419434 94.48886108]
[74.87095642 86.31956482]
[80.13288116 79.41065979]
[87.22519684 74.39868164]
[95.49446869 71.74538422]
[97.09789276 56.83132553]
[98.70131683 41.91727066]
[100.30474854 27.00321770]
[92.82793427 18.71429062]
[91.30934143 7.87980747]
[96.02379608 -1.74559081]
[105.12879181 -6.96618938]
[107.79209137 -21.72785759]
[110.45539093 -36.48952484]
[113.11869049 -51.25119400]
[115.78198242 -66.01286316]
[118.44528198 -80.77452850]
[112.39144897 -96.01536560]
[122.77434540 -108.70897675]
[138.91293335 -105.79725647]
[144.20521545 -90.27553558]
[133.20695496 -78.11122894]
[130.54365540 -63.34956360]
[127.88035583 -48.58789444]
[125.21705627 -33.82622910]
[122.55375671 -19.06455994]
[119.89045715 -4.30289173]
[127.90853119 13.14197636]
[115.21880341 28.60664368]
[113.61537170 43.52069855]
[112.01194763 58.43475342]
[110.40852356 73.34880829]
[127.45262146 91.93917847]
[123.16492462 116.79313660]
[132.57696533 128.47276306]
[141.98899841 140.15238953]
[151.40103149 151.83200073]
[159.40977478 156.69194031]
[160.93159485 164.10063171]
[169.92076111 176.10874939]
[178.90992737 188.11686707]
[187.89909363 200.12498474]
[197.51809692 211.63476562]
[207.73936462 222.61317444]
[217.96063232 233.59159851]
[228.56723022 244.19819641]
[239.54565430 254.41946411]
[255.64001465 257.56646729]
[260.70513916 273.16378784]
[249.53045654 285.16625977]
[233.61154175 281.22671509]
[229.32438660 265.39788818]
[218.34596252 255.17662048]
[213.40979004 254.47640991]
[208.93675232 250.51759338]
[206.98220825 243.81286621]
[196.76094055 232.83444214]
[186.53967285 221.85603333]
[182.81851196 221.44070435]
[179.15217590 219.05397034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 64]
[6 63]
[7 62]
[8 61]
[14 28]
[15 27]
[16 26]
[17 25]
[32 59]
[33 58]
[34 57]
[35 56]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[70 85]
[71 84]
[72 83]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
