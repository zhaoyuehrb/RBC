%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCCCAGCCUCACAUCACUCACACCUUGCAUUUCACCCCUGCAUCCCAGUCGCCCUGCAGCCUCACACAGAUCCUGCACACACCCAGACAGCUGGCGCUCACACAUUCACCGUUGGCCUGCCUCUGUUCACCCUCC\
) } def
/len { sequence length } bind def

/coor [
[163.97822571 213.03025818]
[155.20401001 217.56518555]
[146.11053467 221.42022705]
[136.75041199 224.57312012]
[127.17775726 227.00559998]
[117.44793701 228.70362854]
[107.61722565 229.65736389]
[97.74245453 229.86129761]
[87.88074493 229.31425476]
[78.08911896 228.01939392]
[68.42420197 225.98420715]
[58.94188309 223.22047424]
[49.69700241 219.74415588]
[40.74301910 215.57536316]
[32.13171768 210.73820496]
[23.91289139 205.26065063]
[16.13407326 199.17439270]
[8.84024715 192.51460266]
[2.07359052 185.31982422]
[-4.12676382 177.63163757]
[-9.72496033 169.49450684]
[-14.68862438 160.95550537]
[-18.98905182 152.06399536]
[-22.60137367 142.87139893]
[-25.50469971 133.43087769]
[-27.68223953 123.79704285]
[-29.12140274 114.02558136]
[-29.81386375 104.17301178]
[-29.75562096 94.29631042]
[-44.67810822 92.77334595]
[-59.60059357 91.25038147]
[-74.52307892 89.72741699]
[-84.05771637 101.85565948]
[-98.64324188 106.88217163]
[-113.62548065 103.20301819]
[-124.22364044 91.99219513]
[-127.05590057 76.82704163]
[-121.21848297 62.54670334]
[-108.57409668 53.70797729]
[-93.15751648 53.13127518]
[-79.88811493 61.00061798]
[-73.00011444 74.80493164]
[-58.07762909 76.32789612]
[-43.15514374 77.85086060]
[-28.23265648 79.37382507]
[-25.45319176 66.37635040]
[-21.35993004 53.73099518]
[-15.99573517 41.57019043]
[-9.41678429 30.02128410]
[-1.69197583 19.20522690]
[7.09779358 9.23528576]
[16.86047363 0.21587019]
[27.49382591 -7.75856400]
[38.88649368 -14.60450554]
[50.91916656 -20.25026131]
[63.46583557 -24.63670540]
[76.39510345 -27.71790123]
[89.57157135 -29.46158218]
[89.23258209 -44.45775223]
[88.89359283 -59.45391846]
[88.55459595 -74.45008850]
[88.21560669 -89.44625854]
[77.07223511 -100.33032990]
[76.94207001 -115.54340363]
[87.38704681 -126.09983063]
[87.04804993 -141.09600830]
[76.49059296 -153.17572021]
[79.49408722 -168.93511963]
[93.75451660 -176.28492737]
[108.33249664 -169.58702087]
[112.04504395 -153.97943115]
[102.04421997 -141.43499756]
[102.38321686 -126.43882751]
[113.29453278 -116.36515808]
[113.85194397 -101.16174316]
[103.21177673 -89.78524780]
[103.55076599 -74.78907776]
[103.88976288 -59.79291153]
[104.22875214 -44.79674149]
[104.56774139 -29.80057335]
[129.07208252 -26.58541489]
[152.52377319 -18.78681183]
[174.07366943 -6.68713999]
[192.94146729 9.27549362]
[208.44403076 28.52310753]
[220.02000427 50.35877991]
[227.25027466 73.99187469]
[229.87301636 98.56668091]
[227.79327393 123.19338989]
[242.37286377 126.71978760]
[256.95245361 130.24618530]
[271.53204346 133.77258301]
[286.11163330 137.29898071]
[297.56097412 131.24108887]
[309.67172241 134.53698730]
[316.04922485 144.87780762]
[330.54541016 148.73280334]
[345.04159546 152.58779907]
[359.62118530 156.11419678]
[374.27673340 159.31019592]
[388.93231201 162.50621033]
[404.06414795 157.88693237]
[414.85061646 168.15834045]
[429.50616455 171.35433960]
[440.34765625 160.37864685]
[455.40698242 157.02896118]
[469.87875366 162.37414551]
[479.14511108 174.70857239]
[480.24917603 190.09637451]
[472.83865356 203.62736511]
[459.27819824 210.98384094]
[443.89492798 209.81838989]
[431.59756470 200.50289917]
[426.31018066 186.00990295]
[411.65460205 182.81390381]
[397.57101440 187.66177368]
[385.73629761 177.16177368]
[371.08071899 173.96575928]
[356.42517090 170.76976013]
[351.93020630 172.59870911]
[346.23400879 171.56297302]
[341.18658447 167.08396912]
[326.69042969 163.22897339]
[312.19424438 159.37399292]
[295.56948853 164.88061523]
[282.58523560 151.87857056]
[268.00564575 148.35217285]
[253.42605591 144.82577515]
[238.84646606 141.29937744]
[224.26687622 137.77297974]
[221.03717041 147.10687256]
[217.10751343 156.16835022]
[212.50062561 164.90501404]
[207.24316406 173.26634216]
[201.36552429 181.20396423]
[194.90168762 188.67199707]
[187.88903809 195.62724304]
[180.36814880 202.02947998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[29 45]
[30 44]
[31 43]
[32 42]
[58 80]
[59 79]
[60 78]
[61 77]
[62 76]
[65 73]
[66 72]
[89 130]
[90 129]
[91 128]
[92 127]
[93 126]
[96 124]
[97 123]
[98 122]
[99 119]
[100 118]
[101 117]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
