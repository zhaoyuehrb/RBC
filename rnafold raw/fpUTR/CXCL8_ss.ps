%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGUGCAUAAGUUCUCUAGUAGGGUGAUGAUAUAAAAAGCCACCGGAGCACUCCAUAAGGCACAAACUUUCAGAGACAGCAGAGCACACAAGCUUCUAGGACAAGAGCCAGGAAGAAACCACCGGAAGGAACCAUCUCACUGUGUGUAAAC\
) } def
/len { sequence length } bind def

/coor [
[-113.21538544 154.69807434]
[-131.50111389 147.44308472]
[-147.16793823 135.56271362]
[-159.07487488 119.92921448]
[-166.35670471 101.68785095]
[-181.20402527 103.82257080]
[-196.05134583 105.95729828]
[-210.89866638 108.09201813]
[-225.06719971 119.80986786]
[-241.09651184 112.72976685]
[-255.89720154 115.16690826]
[-270.61639404 118.05574036]
[-285.24029541 121.39355469]
[-299.86422729 124.73136902]
[-311.59667969 135.34550476]
[-325.72656250 130.63427734]
[-340.35049438 133.97209167]
[-354.97439575 137.30990601]
[-369.59832764 140.64772034]
[-381.33078003 151.26185608]
[-395.46066284 146.55062866]
[-410.08459473 149.88844299]
[-417.80996704 154.87713623]
[-425.04080200 153.14196777]
[-439.72976685 156.18078613]
[-451.67630005 166.55339050]
[-465.70712280 161.55491638]
[-469.35632324 176.37538147]
[-479.08111572 188.13935852]
[-492.95062256 194.51110840]
[-508.21109009 194.22552490]
[-521.83245850 187.33929443]
[-531.11029053 175.21968079]
[-534.20239258 160.27305603]
[-530.49487305 145.46708679]
[-520.72387695 133.74148560]
[-506.82934570 127.42440033]
[-491.57015991 127.77008057]
[-477.97598267 134.70989990]
[-468.74594116 146.86595154]
[-457.85006714 136.71069336]
[-442.76858521 141.49182129]
[-428.07962036 138.45300293]
[-413.42239380 135.26452637]
[-398.79849243 131.92671204]
[-388.11203003 121.55131531]
[-372.93615723 126.02380371]
[-358.31222534 122.68598938]
[-343.68829346 119.34817505]
[-329.06439209 116.01036072]
[-318.37792969 105.63496399]
[-303.20202637 110.10744476]
[-288.57812500 106.76963043]
[-273.95419312 103.43181610]
[-271.76443481 100.59594727]
[-268.06500244 98.70697784]
[-263.32910156 98.47513580]
[-258.33435059 100.36621857]
[-243.53364563 97.92907715]
[-236.19985962 88.26184082]
[-223.84500122 86.13920593]
[-213.03338623 93.24469757]
[-198.18606567 91.10997772]
[-183.33874512 88.97525024]
[-168.49142456 86.84053040]
[-168.11830139 75.92399597]
[-166.11254883 65.18401337]
[-162.51867676 54.86341858]
[-157.41709900 45.19569016]
[-150.92236328 36.39967728]
[-143.18055725 28.67462158]
[-134.36604309 22.19567680]
[-124.67749786 17.10990906]
[-114.33347321 13.53297138]
[-103.56742859 11.54647350]
[-92.62249756 11.19611835]
[-81.74595642 12.49065018]
[-71.18368530 15.40164089]
[-61.17456818 19.86410904]
[-51.94511795 25.77797890]
[-43.70433044 33.01031113]
[-36.63896942 41.39830780]
[-30.90931511 50.75296021]
[-26.64554977 60.86331940]
[-23.94477844 71.50125122]
[-22.86883354 82.42657471]
[-7.91874504 83.64921570]
[7.03134346 84.87185669]
[21.98143196 86.09449005]
[36.93152237 87.31713104]
[51.88161087 88.53977203]
[66.83169556 89.76241302]
[80.50693512 67.22980499]
[108.18004608 59.26637650]
[136.12413025 73.22650146]
[150.01141357 67.55700684]
[163.89871216 61.88750458]
[177.78599548 56.21800232]
[191.67327881 50.54850006]
[201.52529907 38.16915512]
[216.23289490 40.52201080]
[230.12019348 34.85251236]
[236.93235779 28.67492104]
[244.34904480 29.21219254]
[254.23434448 16.12735939]
[270.47326660 18.41411209]
[276.36059570 33.72003555]
[265.83996582 46.29970932]
[249.73408508 43.21224213]
[235.78968811 48.73979950]
[221.90240479 54.40929794]
[213.04368591 66.38312531]
[197.34278870 64.43579102]
[183.45549011 70.10529327]
[169.56820679 75.77478790]
[155.68092346 81.44429016]
[141.79364014 87.11379242]
[141.41130066 94.60404205]
[156.39179993 95.36870575]
[171.37228394 96.13360596]
[170.60714722 111.11407471]
[155.62713623 110.34920502]
[140.64663696 109.58453369]
[140.26429749 117.07478333]
[153.50212097 124.12886047]
[169.86447144 123.03092957]
[178.77049255 136.80099487]
[171.05844116 151.27360535]
[154.66180420 151.56056213]
[146.44804382 137.36668396]
[133.21022034 130.31260681]
[126.41931152 135.32273865]
[118.94626617 138.88543701]
[111.08815765 140.92568970]
[103.14550018 141.42761230]
[95.41080475 140.43293762]
[88.15784454 138.03744507]
[81.63192749 134.38543701]
[76.04165649 129.66249084]
[71.55233002 124.08683014]
[68.28123474 117.89987183]
[66.29502106 111.35603333]
[65.60906219 104.71250153]
[50.65896988 103.48986053]
[35.70888138 102.26721954]
[20.75879288 101.04457855]
[5.80870438 99.82194519]
[-9.14138412 98.59930420]
[-24.09147263 97.37666321]
[-30.33591652 116.09768677]
[-41.35967255 132.45417786]
[-56.35290909 145.25454712]
[-74.21685028 153.56808472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 65]
[6 64]
[7 63]
[8 62]
[10 59]
[11 58]
[12 54]
[13 53]
[14 52]
[16 50]
[17 49]
[18 48]
[19 47]
[21 45]
[22 44]
[24 43]
[25 42]
[27 40]
[86 149]
[87 148]
[88 147]
[89 146]
[90 145]
[91 144]
[92 143]
[95 117]
[96 116]
[97 115]
[98 114]
[99 113]
[101 111]
[102 110]
[104 109]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
