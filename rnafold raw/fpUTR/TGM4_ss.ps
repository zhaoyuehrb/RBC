%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACCGACUGUGUGGAAGCACCAGGCAUCAGAGAUAGAGUCUUCCCUGGCAUUGCAGGAGAGAAUCUGAAGGG\
) } def
/len { sequence length } bind def

/coor [
[98.07393646 144.93710327]
[86.79653931 142.99676514]
[76.37374878 138.27339172]
[67.48020172 131.07273865]
[60.69153595 121.86086273]
[56.44716263 111.23400879]
[41.50119781 112.50609589]
[32.92130280 116.45286560]
[25.89613152 113.50119019]
[10.90964794 114.13780975]
[-4.07683706 114.77442169]
[-17.53619385 123.09044647]
[-30.58037949 115.90028381]
[-45.56686401 116.53690338]
[-60.55334854 117.17351532]
[-72.42110443 127.96869659]
[-88.23702240 125.27863312]
[-95.86847687 111.16692352]
[-89.46127319 96.45885468]
[-73.93046570 92.43720245]
[-61.18996429 102.18703461]
[-46.20347977 101.55041504]
[-31.21699715 100.91379547]
[-18.82957268 92.64331055]
[-4.71345472 99.78794098]
[10.27302933 99.15132141]
[25.25951385 98.51470184]
[40.22911072 97.56013489]
[55.17507172 96.28804779]
[60.69986725 78.12416077]
[73.22682190 63.85792160]
[90.52399445 56.03116989]
[109.50951385 56.03840637]
[126.80071259 63.87833786]
[139.31678772 78.15412140]
[153.45996094 73.15702057]
[167.60311890 68.15992737]
[181.74627686 63.16282654]
[192.18054199 51.27011490]
[206.75840759 54.32548141]
[220.90156555 49.32838440]
[235.04472351 44.33128738]
[249.18789673 39.33419037]
[259.62216187 27.44147682]
[274.20001221 30.49684334]
[288.34317017 25.49974632]
[302.48635864 20.50264931]
[316.62951660 15.50555229]
[323.21652222 1.13938427]
[338.06152344 -4.28290653]
[352.35723877 2.45562816]
[357.62228394 17.35713577]
[350.73300171 31.58081627]
[335.77664185 36.68801117]
[321.62661743 29.64871407]
[307.48342896 34.64580917]
[293.34027100 39.64290619]
[279.19711304 44.64000320]
[269.77447510 56.17529297]
[254.18498230 53.47735214]
[240.04182434 58.47444916]
[225.89866638 63.47154617]
[211.75550842 68.46864319]
[202.33285522 80.00392914]
[186.74337769 77.30599213]
[172.60021973 82.30308533]
[158.45704651 87.30018616]
[144.31388855 92.29727936]
[144.82351685 103.72903442]
[142.43186951 114.91941833]
[137.29377747 125.14412689]
[129.74179077 133.74134827]
[120.26473236 140.15461731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 29]
[7 28]
[9 27]
[10 26]
[11 25]
[13 23]
[14 22]
[15 21]
[35 68]
[36 67]
[37 66]
[38 65]
[40 63]
[41 62]
[42 61]
[43 60]
[45 58]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
