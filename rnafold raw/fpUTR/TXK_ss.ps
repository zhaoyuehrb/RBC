%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUUCAGUUGAAAGAUGUGUUUUUGUGAGUAGAGCACCGCAGAAGAACUGAAGACUGUUGUGUGCUCCCCGCAGAAGGGGCUACC\
) } def
/len { sequence length } bind def

/coor [
[81.13636017 132.67277527]
[68.91237640 121.37538147]
[62.73965073 105.91722870]
[63.81971741 89.30727386]
[50.56703568 82.28115082]
[37.31435776 75.25502014]
[24.06167603 68.22889709]
[10.80899429 61.20277023]
[-2.44368601 54.17664337]
[-15.69636631 47.15051651]
[-27.37212753 57.83078766]
[-41.95871353 63.89554214]
[-57.71170425 64.63909912]
[-72.75382233 59.99095917]
[-85.29867554 50.52207947]
[-93.86289978 37.37479019]
[-97.44151306 22.12500763]
[-95.62588501 6.59334183]
[-109.12358856 0.05024914]
[-122.62129211 -6.49284315]
[-136.11898804 -13.03593540]
[-149.61668396 -19.57902908]
[-163.11439514 -26.12211990]
[-176.61209106 -32.66521454]
[-190.80743408 -26.10577965]
[-205.88439941 -30.25541878]
[-214.72407532 -43.15480042]
[-213.15266418 -58.71322632]
[-201.91212463 -69.58448792]
[-186.30990601 -70.63550568]
[-173.71289062 -61.37002182]
[-170.06900024 -46.16291428]
[-156.57130432 -39.61982346]
[-143.07359314 -33.07672882]
[-129.57589722 -26.53363800]
[-116.07819366 -19.99054527]
[-102.58049774 -13.44745255]
[-89.08279419 -6.90435982]
[-79.13454437 -17.13830757]
[-66.47704315 -23.77955437]
[-52.36026001 -26.15708542]
[-38.18297958 -24.02168846]
[-25.35424042 -17.57200623]
[-15.15327168 -7.43613148]
[-8.60194778 5.38952684]
[-6.36242485 19.63819313]
[-8.67024040 33.89783478]
[4.58244038 40.92396164]
[17.83512115 47.95008850]
[31.08780098 54.97621536]
[44.34048080 62.00234222]
[57.59316254 69.02847290]
[70.84584045 76.05459595]
[80.87929535 67.47699738]
[93.25348663 62.88084412]
[106.45358276 62.82879639]
[118.86363983 67.32722473]
[128.96441650 75.82543182]
[135.51939392 87.28307343]
[137.72610474 100.29751587]
[135.31440735 113.27553558]
[148.02554321 121.23963165]
[160.73669434 129.20372009]
[169.89810181 131.18217468]
[173.75569153 137.69181824]
[186.17103577 146.10963440]
[198.58636475 154.52743530]
[211.00169373 162.94523621]
[223.41703796 171.36305237]
[237.96475220 165.96455383]
[252.89813232 170.18041992]
[262.47500610 182.38957214]
[263.01284790 197.89732361]
[254.30487061 210.74063110]
[239.69946289 215.98098755]
[224.81268311 211.60336304]
[215.36882019 199.29106140]
[214.99922180 183.77838135]
[202.58389282 175.36058044]
[190.16856384 166.94276428]
[177.75321960 158.52496338]
[165.33789062 150.10716248]
[152.77259827 141.91487122]
[140.06146240 133.95077515]
[127.35031128 125.98667908]
[113.50570679 135.22702026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 53]
[5 52]
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[61 85]
[62 84]
[63 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
