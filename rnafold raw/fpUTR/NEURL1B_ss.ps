%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCAGCUGCCGCCCGCCGGCUCGCCCGUGCAGCUGCGAUGCCCCGGAGCGUCGACCCCGGUCCUGGUCCCUGGCCCGCCGCGUAAUUAGCCUCCGCGCGCCCAGAGCGCGCCGCCGCCAACGCCGCGCCCGACGCAGCG\
) } def
/len { sequence length } bind def

/coor [
[51.30110168 140.89138794]
[38.89862442 149.32812500]
[31.32445908 166.07223511]
[13.82311630 166.76979065]
[1.70739770 175.61338806]
[-10.30975437 184.59048462]
[-22.32690620 193.56756592]
[-34.34405899 202.54464722]
[-46.36120987 211.52172852]
[-58.37836456 220.49880981]
[-70.39551544 229.47590637]
[-82.31262970 238.58537292]
[-94.12825012 247.82609558]
[-94.83683014 258.77969360]
[-101.35926056 267.33230591]
[-111.31822968 270.76913452]
[-121.30025482 268.17041016]
[-133.51306152 276.87945557]
[-135.87591553 292.50610352]
[-148.64582825 301.81765747]
[-164.24662781 299.28970337]
[-173.42263794 286.42205811]
[-170.72990417 270.84884644]
[-157.76596069 261.80938721]
[-142.22209167 264.66662598]
[-130.00929260 255.95759583]
[-123.39199829 237.83822632]
[-103.36898041 236.01048279]
[-91.55335999 226.76974487]
[-88.19574738 220.11885071]
[-79.37260437 217.45875549]
[-67.35544586 208.48165894]
[-55.33829498 199.50457764]
[-43.32114410 190.52749634]
[-31.30399132 181.55041504]
[-19.28683853 172.57333374]
[-7.26968718 163.59623718]
[-3.76575923 157.02124023]
[5.11407328 154.55699158]
[7.44375038 142.63647461]
[17.61586571 135.28950500]
[30.46188736 136.92564392]
[42.86436462 128.48890686]
[45.45717621 116.62284851]
[55.78933334 109.50270081]
[68.59601593 111.42263031]
[81.18209839 103.26232147]
[84.30765533 89.11392975]
[96.46540833 81.23133087]
[110.65760040 84.15159607]
[123.24367523 75.99129486]
[135.82975769 67.83098602]
[148.41583252 59.67068100]
[161.00192261 51.51037216]
[173.58799744 43.35006714]
[177.00262451 28.15210533]
[189.88294983 20.05568886]
[204.35084534 23.40468025]
[211.72093201 9.40495300]
[226.60928345 8.97320938]
[239.19535828 0.81290382]
[251.78143311 -7.34740210]
[264.36752319 -15.50770855]
[267.78216553 -30.70566940]
[280.66247559 -38.80208588]
[295.13037109 -35.45309448]
[307.71643066 -43.61339951]
[320.30252075 -51.77370834]
[332.88861084 -59.93401337]
[334.17724609 -73.38873291]
[342.87249756 -83.48070526]
[355.61016846 -86.65045929]
[367.65756226 -81.95234680]
[380.42108154 -89.83222198]
[393.18460083 -97.71210480]
[405.94815063 -105.59197998]
[413.62612915 -119.42523956]
[428.52038574 -119.52751923]
[441.28390503 -127.40739441]
[454.04742432 -135.28727722]
[466.26022339 -143.99632263]
[477.86853027 -153.49617004]
[489.47683716 -162.99603271]
[501.08514404 -172.49589539]
[512.69342041 -181.99574280]
[509.55249023 -196.97549438]
[513.74389648 -211.69590759]
[524.30450439 -222.77435303]
[538.80761719 -227.66506958]
[553.92047119 -225.24420166]
[566.17022705 -216.06806946]
[572.74206543 -202.24525452]
[572.12573242 -186.95216370]
[564.46289062 -173.70301819]
[551.51446533 -165.54238892]
[536.25579834 -164.34552002]
[522.19329834 -170.38743591]
[510.58499146 -160.88758850]
[498.97668457 -151.38772583]
[487.36837769 -141.88787842]
[475.76010132 -132.38801575]
[490.44039917 -129.30775452]
[498.81323242 -116.86203766]
[496.13412476 -102.10323334]
[483.92117310 -93.39440155]
[469.09484863 -95.67038727]
[460.05648804 -107.64151001]
[461.92730713 -122.52375031]
[449.16378784 -114.64387512]
[436.40026855 -106.76399231]
[429.63519287 -93.49435425]
[413.82800293 -92.82846069]
[401.06448364 -84.94857788]
[388.30096436 -77.06870270]
[375.53744507 -69.18881989]
[372.39837646 -52.70292282]
[358.04574585 -43.37256622]
[341.04891968 -47.34793472]
[328.46282959 -39.18762589]
[315.87673950 -31.02732086]
[303.29067993 -22.86701584]
[300.44400024 -8.29196548]
[287.79617310 0.16303910]
[272.52783203 -2.92162824]
[259.94174194 5.23867750]
[247.35566711 13.39898396]
[234.76957703 21.55928993]
[228.29974365 34.97533798]
[212.51115417 35.99076080]
[209.66448975 50.56581116]
[197.01666260 59.02081299]
[181.74830627 55.93614578]
[169.16221619 64.09645081]
[156.57614136 72.25675964]
[143.99006653 80.41706848]
[131.40397644 88.57736969]
[118.81790161 96.73767853]
[115.69234467 110.88607025]
[103.53459167 118.76866913]
[89.34239960 115.84840393]
[76.75632477 124.00870514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[4 39]
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[12 29]
[13 28]
[17 26]
[18 25]
[46 141]
[47 140]
[50 137]
[51 136]
[52 135]
[53 134]
[54 133]
[55 132]
[58 129]
[60 127]
[61 126]
[62 125]
[63 124]
[66 121]
[67 120]
[68 119]
[69 118]
[73 115]
[74 114]
[75 113]
[76 112]
[78 110]
[79 109]
[80 108]
[81 101]
[82 100]
[83 99]
[84 98]
[85 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
