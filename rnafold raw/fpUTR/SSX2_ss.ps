%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAUUGGCUACUUUAAGUUCAGAGUACGCAUGCUCUGACUUUCUCUCUCUUUCGAUUCUUCCAUACUCAGAGUACGCACGGUCUGAUUUUCUCUUUGGAUUCUUCCAAAAUCAGAGUCAGACUGCUCCCGGUGCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 228.73318481]
[92.50000000 213.73318481]
[84.76270294 201.00592041]
[92.50000000 187.20574951]
[92.50000000 172.20574951]
[92.50000000 157.20574951]
[92.50000000 142.20574951]
[92.50000000 127.20574951]
[88.38386536 125.71902466]
[84.54708862 123.61377716]
[73.29315186 133.53086853]
[62.03921127 143.44796753]
[50.78527069 153.36506653]
[39.53133011 163.28216553]
[28.27738953 173.19926453]
[27.53167152 188.98594666]
[15.78543758 199.55957031]
[0.00751855 198.64698792]
[-10.44132614 186.78962708]
[-9.36198235 171.02223206]
[2.60519457 160.69934082]
[18.36029053 161.94532776]
[29.61423111 152.02822876]
[40.86817169 142.11112976]
[52.12211227 132.19403076]
[63.37605286 122.27693176]
[74.62999725 112.35983276]
[71.87023926 97.73745728]
[76.93162537 83.74414825]
[67.40741730 72.15581512]
[52.66754150 66.40718842]
[50.56389236 51.66188812]
[41.03968811 40.07355118]
[31.51548195 28.48521805]
[21.99127579 16.89688301]
[12.46707058 5.30854845]
[2.94286442 -6.27978611]
[-6.58134174 -17.86812019]
[-16.10554695 -29.45645523]
[-29.46831894 -22.51887321]
[-43.98159027 -18.51155090]
[-59.01090240 -17.60967064]
[-73.89924622 -19.85265923]
[-87.99575806 -25.14246368]
[-100.68420410 -33.24783325]
[-111.40989685 -43.81444168]
[-119.70395660 -56.38035583]
[-125.20380402 -70.39625549]
[-127.66900635 -85.24942017]
[-126.99179840 -100.29052734]
[-123.20178223 -114.86206055]
[-116.46464539 -128.32699585]
[-107.07490540 -140.09672546]
[-95.44303894 -149.65670776]
[-82.07753754 -156.58903503]
[-67.56269073 -160.59065247]
[-52.53302383 -161.48661804]
[-37.64556503 -159.23777771]
[-23.55113411 -153.94242859]
[-10.86588001 -145.83206177]
[-0.14434385 -135.26123047]
[8.14477253 -122.69205475]
[13.63910484 -108.67399597]
[16.09846497 -93.81986237]
[15.41534042 -78.77902222]
[11.61959457 -64.20898438]
[4.87715960 -50.74669266]
[-4.51721287 -38.98066330]
[5.00699329 -27.39232635]
[14.53119946 -15.80399227]
[24.05540466 -4.21565723]
[33.57961273 7.37267733]
[43.10381699 18.96101189]
[52.62802124 30.54934692]
[62.15222931 42.13768005]
[76.21086884 47.05743027]
[78.99575043 62.63160706]
[88.51995850 74.21994019]
[111.91024780 74.41584778]
[127.11796570 92.18856812]
[142.11698914 92.01658630]
[157.11599731 91.84460449]
[172.11500549 91.67262268]
[187.11402893 91.50064087]
[202.11303711 91.32865906]
[217.11206055 91.15667725]
[232.11106873 90.98469543]
[247.11007690 90.81272125]
[262.10910034 90.64073944]
[277.10812378 90.46875763]
[292.10711670 90.29677582]
[301.12521362 77.80757904]
[315.59899902 73.07856750]
[329.91275024 77.72407532]
[338.64184570 89.76319885]
[353.64086914 89.59121704]
[368.63989258 89.41923523]
[383.63888550 89.24725342]
[398.63790894 89.07527161]
[413.63693237 88.90328979]
[427.46047974 80.08052063]
[441.88629150 87.87976074]
[442.07431030 104.27783203]
[427.83111572 112.40579987]
[413.80889893 103.90230560]
[398.80987549 104.07428741]
[383.81088257 104.24626923]
[368.81185913 104.41825104]
[353.81283569 104.59023285]
[338.81384277 104.76221466]
[330.36306763 116.99832916]
[316.15960693 121.97080994]
[301.58120728 117.57492065]
[292.27911377 105.29579163]
[277.28009033 105.46776581]
[262.28106689 105.63974762]
[247.28205872 105.81172943]
[232.28305054 105.98371124]
[217.28402710 106.15569305]
[202.28501892 106.32767487]
[187.28601074 106.49965668]
[172.28698730 106.67163849]
[157.28797913 106.84362030]
[142.28897095 107.01560211]
[127.28994751 107.18758392]
[124.51002502 113.98789978]
[120.06905365 119.84025574]
[114.26799774 124.34803772]
[107.50000000 127.20574951]
[107.50000000 142.20574951]
[107.50000000 157.20574951]
[107.50000000 172.20574951]
[107.50000000 187.20574951]
[115.23729706 201.00592041]
[107.50000000 213.73318481]
[107.50000000 228.73318481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[4 133]
[5 132]
[6 131]
[7 130]
[8 129]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[29 78]
[30 77]
[32 75]
[33 74]
[34 73]
[35 72]
[36 71]
[37 70]
[38 69]
[39 68]
[80 125]
[81 124]
[82 123]
[83 122]
[84 121]
[85 120]
[86 119]
[87 118]
[88 117]
[89 116]
[90 115]
[91 114]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
