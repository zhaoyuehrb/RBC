%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUAAGGGCCCGCCUCUCCUGGCUCACAGCUGCUUGCUGCUCCAGCCUUGCCCUCCCAGAGCUGCCGGACGCUCGCGGGUCUCGGAACGCAUCCCGCCGCGGGGGCUUCGGCCGUGGC\
) } def
/len { sequence length } bind def

/coor [
[225.19819641 123.25585175]
[218.37130737 124.82822418]
[211.34750366 124.13684082]
[204.86312866 121.22080994]
[199.60858154 116.35416412]
[196.15486145 110.02047729]
[181.16000366 109.62782288]
[166.16514587 109.23516846]
[151.17027283 108.84251404]
[136.17541504 108.44985962]
[122.15837860 129.81723022]
[97.65604401 137.07514954]
[74.26286316 126.78919220]
[61.90097046 135.28527832]
[49.53907776 143.78137207]
[46.90577316 159.36474609]
[33.97641373 168.45359802]
[18.42176247 165.65568542]
[9.47011375 152.63095093]
[12.43232536 137.10675049]
[25.55096817 128.29330444]
[41.04298401 131.41947937]
[53.40487671 122.92339325]
[65.76676941 114.42729950]
[64.48380280 110.89315796]
[63.56464005 107.24744415]
[63.01868057 103.52748871]
[62.85153198 99.77140045]
[48.17931747 96.65272522]
[33.50710297 93.53404999]
[18.83488846 90.41537476]
[4.65108061 97.91198730]
[-9.99525356 91.36489105]
[-13.86869812 75.79646301]
[-3.99787974 63.14946747]
[12.04515553 63.12559509]
[21.95356369 75.74316406]
[36.62577820 78.86183929]
[51.29799271 81.98051453]
[65.97020721 85.09918976]
[70.30748749 77.67476654]
[76.23548889 71.44638062]
[83.43663025 66.74769592]
[91.52511597 63.83043671]
[100.06763458 62.85088730]
[108.60652161 63.86153412]
[116.68433380 66.80822754]
[123.86831665 71.53309631]
[129.77360535 77.78303528]
[134.08383179 85.22319794]
[136.56806946 93.45499420]
[151.56292725 93.84764862]
[166.55780029 94.24030304]
[181.55265808 94.63295746]
[196.54751587 95.02561188]
[216.09263611 81.34867859]
[236.06979370 93.06246185]
[250.94146729 91.10456848]
[265.81314087 89.14667511]
[270.08581543 79.13665771]
[278.11331177 71.90827942]
[288.35925293 68.75273895]
[298.90109253 70.19046021]
[307.79071045 75.88659668]
[313.41442871 84.72579956]
[328.39385986 83.94076538]
[343.37332153 83.15572357]
[358.35275269 82.37068176]
[373.33218384 81.58564758]
[388.31164551 80.80060577]
[403.27951050 79.81955719]
[416.43008423 71.02336121]
[429.72518921 77.73823547]
[444.67895508 76.56135559]
[459.63272095 75.38446808]
[474.58648682 74.20758057]
[489.54022217 73.03069305]
[504.49398804 71.85380554]
[519.44775391 70.67691803]
[523.15148926 67.90195465]
[527.15008545 66.65837097]
[530.89978027 66.84080505]
[533.95367432 68.17011261]
[536.01214600 70.24316406]
[551.00701904 70.63581848]
[566.00189209 71.02847290]
[575.34088135 58.63643646]
[590.18994141 54.13260269]
[604.83935547 59.24878693]
[613.65600586 72.01771545]
[613.24981689 87.52947235]
[603.77697754 99.81947327]
[588.87988281 104.16195679]
[574.28686523 98.88715363]
[565.60919189 86.02333069]
[550.61437988 85.63068390]
[535.61950684 85.23802948]
[520.62463379 85.63068390]
[505.67086792 86.80756378]
[490.71713257 87.98445129]
[475.76336670 89.16133881]
[460.80960083 90.33822632]
[445.85583496 91.51511383]
[430.90206909 92.69200134]
[418.82110596 101.40401459]
[404.45642090 94.77331543]
[397.95510864 98.48055267]
[389.09667969 95.78004456]
[374.11724854 96.56508636]
[359.13778687 97.35012817]
[344.15835571 98.13516235]
[329.17889404 98.92020416]
[314.19946289 99.70524597]
[302.43548584 115.09912872]
[282.86340332 117.10256958]
[267.77102661 104.01834869]
[252.89936829 105.97624207]
[238.02769470 107.93413544]
[235.54490662 114.31753540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[13 24]
[14 23]
[15 22]
[28 40]
[29 39]
[30 38]
[31 37]
[57 118]
[58 117]
[59 116]
[65 113]
[66 112]
[67 111]
[68 110]
[69 109]
[70 108]
[71 106]
[73 104]
[74 103]
[75 102]
[76 101]
[77 100]
[78 99]
[79 98]
[84 97]
[85 96]
[86 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
