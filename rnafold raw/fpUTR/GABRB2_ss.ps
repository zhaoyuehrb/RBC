%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGGGGAAGGGAAGAAGAGGACGAGGUGGCGCGGAGACCGCGGGAGAACACAGUGCCUCCGGAGGAAAUCUGCUCGGUCCCCGGCAGCCGCCGCUUCCCCUUUGAUGUUUUGGUACGCCGUGCGCAUGCGCCUCACAUUAGAAUUACUGCACUGGGCAGACUAAGUUGGAUCUCCUCUCUUCAGUGAAACCCUCAAUUCCAUCAAAAACUAAAGGG\
) } def
/len { sequence length } bind def

/coor [
[91.74893188 67.42791748]
[77.16716003 63.91054535]
[62.58538437 60.39317322]
[48.00361252 56.87580109]
[33.42184067 53.35843277]
[18.84006691 49.84106064]
[3.61033797 54.12660980]
[-6.94774437 43.62060547]
[-19.67383003 54.76684189]
[-36.37039185 56.11581039]
[-50.43875504 47.33319855]
[-56.43728256 32.04973221]
[-71.06800842 28.74189568]
[-85.69873810 25.43405724]
[-100.32946777 22.12621880]
[-115.95853424 32.84168625]
[-134.14350891 28.79378319]
[-143.42736816 13.01144695]
[-158.14697266 10.12467289]
[-172.86656189 7.23789930]
[-187.58616638 4.35112572]
[-202.30575562 1.46435201]
[-213.42285156 7.99681044]
[-225.62039185 5.29336977]
[-232.48072815 -4.66515350]
[-247.15740967 -7.76277781]
[-261.83407593 -10.86040211]
[-276.51074219 -13.95802689]
[-291.18740845 -17.05565262]
[-305.86410522 -20.15327644]
[-320.54077148 -23.25090027]
[-335.21743774 -26.34852600]
[-349.89410400 -29.44614983]
[-358.93090820 -28.15661812]
[-364.75839233 -32.69490814]
[-378.01995850 -24.52366447]
[-392.81045532 -28.08670235]
[-400.51876831 -40.77991486]
[-409.57315063 -39.62014389]
[-415.33493042 -44.24156189]
[-429.91668701 -47.75893021]
[-444.49847412 -51.27630234]
[-453.56854248 -50.24653244]
[-459.26345825 -54.95012665]
[-473.79327393 -58.67630768]
[-488.32308960 -62.40248489]
[-502.85290527 -66.12866974]
[-512.72070312 -54.53606415]
[-526.58666992 -48.40243149]
[-541.67895508 -48.89534760]
[-555.00585938 -55.86351395]
[-563.94879150 -67.87737274]
[-566.77703857 -82.52204895]
[-581.30682373 -86.24822235]
[-595.83666992 -89.97440338]
[-611.76672363 -79.71169281]
[-629.82806396 -84.27958679]
[-638.65539551 -100.32174683]
[-653.28607178 -103.62958527]
[-667.91680908 -106.93742371]
[-683.40838623 -101.55751801]
[-695.63464355 -112.48687744]
[-692.01824951 -128.48229980]
[-676.27947998 -133.08908081]
[-664.60900879 -121.56815338]
[-649.97827148 -118.26031494]
[-635.34753418 -114.95247650]
[-627.25451660 -122.98436737]
[-616.17529297 -126.14748383]
[-604.82800293 -123.54558563]
[-596.05493164 -115.71179962]
[-592.11047363 -104.50421906]
[-577.58068848 -100.77804565]
[-563.05084229 -97.05186462]
[-553.52392578 -108.52804565]
[-539.90295410 -114.75537872]
[-524.86743164 -114.44998169]
[-511.40057373 -107.61888885]
[-502.19769287 -95.56923676]
[-499.12670898 -80.65848541]
[-484.59689331 -76.93230438]
[-470.06707764 -73.20612335]
[-455.53726196 -69.47994232]
[-440.98110962 -65.85807800]
[-426.39932251 -62.34070587]
[-411.81756592 -58.82333374]
[-397.21093750 -55.41064072]
[-384.79187012 -63.55328751]
[-369.90710449 -60.40709305]
[-361.45056152 -47.32563782]
[-346.79647827 -44.12282181]
[-332.11981201 -41.02519989]
[-317.44314575 -37.92757416]
[-302.76647949 -34.82994843]
[-288.08978271 -31.73232460]
[-273.41311646 -28.63470078]
[-258.73645020 -25.53707504]
[-244.05978394 -22.43945122]
[-229.38310242 -19.34182549]
[-213.01519775 -25.67802048]
[-199.41899109 -13.25524521]
[-184.69938660 -10.36847115]
[-169.97979736 -7.48169756]
[-155.26019287 -4.59492397]
[-140.54060364 -1.70815015]
[-132.68132019 -9.96889019]
[-121.69737244 -13.44853210]
[-110.28012085 -11.17321587]
[-101.28593445 -3.59431887]
[-97.02162933 7.49549055]
[-82.39089966 10.80332851]
[-67.76016998 14.11116695]
[-53.12944412 17.41900444]
[-43.95643616 7.72311115]
[-31.08751106 3.79297352]
[-17.85141754 6.75696421]
[-7.72732830 15.94553852]
[-3.43037367 29.03882980]
[10.75636959 24.50169563]
[22.35743713 35.25928879]
[36.93920898 38.77665710]
[51.52098465 42.29402924]
[66.10275269 45.81140137]
[80.68453217 49.32876968]
[95.26630402 52.84614182]
[109.19544983 47.28028488]
[117.33795166 34.68267822]
[117.62012482 18.28595924]
[132.09046936 10.56967163]
[145.86314392 19.47167206]
[144.76998901 35.83434677]
[129.93556213 42.82517624]
[121.79306030 55.42278290]
[125.06794739 62.17001343]
[138.25328064 55.01829529]
[151.43859863 47.86657333]
[164.62393188 40.71485519]
[174.26553345 29.22400665]
[189.15194702 31.06651115]
[195.70103455 44.56129837]
[187.93754578 57.39594269]
[172.94612122 57.86101913]
[159.16998291 63.79550552]
[145.39384460 69.72998810]
[131.61772156 75.66448212]
[134.89259338 82.41171265]
[149.82743835 83.80834198]
[164.76228333 85.20496368]
[179.69711304 86.60159302]
[194.63195801 87.99822235]
[209.56680298 89.39485168]
[218.49812317 76.97798920]
[232.35394287 70.73993683]
[247.37197876 72.26470947]
[259.52905273 81.04316711]
[265.61883545 94.63655090]
[280.55368042 96.03317261]
[295.48852539 97.42980194]
[309.94915771 91.01103210]
[321.90072632 99.89973450]
[336.83557129 101.29636383]
[351.77041626 102.69299316]
[366.71487427 103.98246765]
[381.66821289 105.16471863]
[396.62155151 106.34696198]
[412.88796997 101.56781769]
[421.98333740 115.87553406]
[410.75262451 128.57621765]
[395.43930054 121.30030060]
[380.48596191 120.11804962]
[365.53262329 118.93580627]
[358.62100220 121.54063416]
[350.37377930 117.62783051]
[335.43893433 116.23120117]
[320.50411987 114.83457947]
[307.11172485 121.35324860]
[294.09188843 112.36464691]
[279.15707397 110.96801758]
[264.22222900 109.57138824]
[255.71769714 121.79998779]
[242.14379883 128.17221069]
[227.10345459 126.88607788]
[214.64445496 118.18721008]
[208.17016602 104.32968903]
[193.23532104 102.93305969]
[178.30049133 101.53643799]
[163.36564636 100.13980865]
[148.43081665 98.74317932]
[133.49597168 97.34654999]
[128.91470337 106.44155884]
[122.28865814 112.68624115]
[114.85089874 115.77931213]
[120.71517181 129.58547974]
[126.57943726 143.39164734]
[132.44371033 157.19781494]
[147.47872925 155.63594055]
[162.30583191 158.57673645]
[175.60661316 165.75869751]
[186.19836426 176.54324341]
[193.13928223 189.97138977]
[195.81217957 204.84912109]
[193.97937012 219.85353088]
[187.80384827 233.65042114]
[177.83474731 245.01300049]
[164.95848083 252.93090820]
[150.32000732 256.70007324]
[135.22097778 255.98536682]
[121.00399017 250.85034180]
[108.93319702 241.75157166]
[100.08193970 229.49813843]
[95.23725128 215.17961121]
[94.82993317 200.06916809]
[98.89618683 185.51042175]
[107.07445526 172.79792786]
[118.63753510 163.06208801]
[112.77326965 149.25592041]
[106.90899658 135.44975281]
[101.04473114 121.64357758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 123]
[4 122]
[5 121]
[6 120]
[8 118]
[12 113]
[13 112]
[14 111]
[15 110]
[18 105]
[19 104]
[20 103]
[21 102]
[22 101]
[25 99]
[26 98]
[27 97]
[28 96]
[29 95]
[30 94]
[31 93]
[32 92]
[33 91]
[35 90]
[38 87]
[40 86]
[41 85]
[42 84]
[44 83]
[45 82]
[46 81]
[47 80]
[53 74]
[54 73]
[55 72]
[58 67]
[59 66]
[60 65]
[126 133]
[127 132]
[146 189]
[147 188]
[148 187]
[149 186]
[150 185]
[151 184]
[156 179]
[157 178]
[158 177]
[160 175]
[161 174]
[162 173]
[163 171]
[164 170]
[165 169]
[192 218]
[193 217]
[194 216]
[195 215]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
