%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUUAGCACCUAUCUGCUCUCUGGCCUGCGUCAGUGGUCUACAGCAGUUACACACAGGCAGUGGUAUCUGUGAGCAGCUCUGUGGACUCAAAGGUUUUCUCCCUGAGAGGCAUGACCCAGGCCAGCUGAUUCAUCAGAAUCAGG\
) } def
/len { sequence length } bind def

/coor [
[54.03002548 326.23788452]
[50.22520447 340.74731445]
[46.42038727 355.25671387]
[42.61556625 369.76614380]
[44.44649124 386.62094116]
[28.75724030 393.04617310]
[18.23988342 379.74874878]
[28.10614395 365.96133423]
[31.91096306 351.45190430]
[35.71578217 336.94247437]
[39.52059937 322.43307495]
[29.22537041 333.34216309]
[15.82227993 326.60739136]
[6.28113508 315.03298950]
[2.22759986 300.59106445]
[4.35233450 285.74230957]
[12.29331589 273.01672363]
[24.69752502 264.58251953]
[39.45147324 261.87680054]
[54.04131699 265.36053467]
[65.98117065 274.44018555]
[73.23616791 287.56704712]
[79.56936646 301.16448975]
[80.53042603 286.19531250]
[81.49147797 271.22613525]
[82.45252991 256.25695801]
[83.41358185 241.28776550]
[84.37463379 226.31858826]
[85.33569336 211.34941101]
[86.29674530 196.38023376]
[79.39077759 183.18338013]
[87.99636078 169.90728760]
[88.95741272 154.93811035]
[89.91847229 139.96891785]
[90.87952423 124.99974060]
[76.91893768 113.24517822]
[73.81387329 95.26112366]
[83.02470398 79.50586700]
[77.09986115 65.72557831]
[71.17502594 51.94529343]
[65.25018311 38.16500854]
[59.32534409 24.38472176]
[53.40050507 10.60443592]
[47.47566605 -3.17584991]
[41.55082703 -16.95613480]
[35.62598801 -30.73642159]
[29.31708145 -37.44211578]
[29.72526932 -44.87506485]
[24.09626389 -58.77881622]
[18.46726036 -72.68256378]
[12.83825493 -86.58631897]
[0.48767206 -96.47437286]
[2.88338017 -111.17504883]
[-9.46720219 -121.06311035]
[-7.07149458 -135.76377869]
[-12.70049953 -149.66754150]
[-18.32950401 -163.57128906]
[-23.95850945 -177.47503662]
[-29.58751488 -191.37878418]
[-35.21651840 -205.28254700]
[-50.30725861 -208.89491272]
[-60.36702347 -220.70933533]
[-61.52762222 -236.18295288]
[-53.34278488 -249.36581421]
[-38.95974731 -255.18885803]
[-23.90908051 -251.41300964]
[-13.97807503 -239.49014282]
[-12.98540306 -224.00485229]
[-21.31276894 -210.91154480]
[-15.68376350 -197.00779724]
[-10.05475807 -183.10404968]
[-4.42575312 -169.20028687]
[1.20325184 -155.29653931]
[6.83225679 -141.39279175]
[18.78021622 -132.49922180]
[16.78713226 -116.80405426]
[28.73509026 -107.91049194]
[26.74200630 -92.21532440]
[32.37100983 -78.31156921]
[38.00001526 -64.40782166]
[43.62902069 -50.50407028]
[49.40627289 -36.66126251]
[55.33111191 -22.88097572]
[61.25595093 -9.10068893]
[67.18079376 4.67959690]
[73.10562897 18.45988274]
[79.03047180 32.24016953]
[84.95530701 46.02045441]
[90.88014984 59.80073929]
[96.80498505 73.58102417]
[102.85015869 73.54160309]
[108.74824524 74.86758423]
[114.19487000 77.49053955]
[118.90896606 81.27511597]
[122.64723969 86.02600098]
[133.91545105 74.92023468]
[148.23373413 79.02339172]
[162.70167542 75.06374359]
[177.16961670 71.10410309]
[191.63755798 67.14446259]
[206.10548401 63.18482208]
[215.26974487 50.01683044]
[231.28746033 49.11544418]
[241.87120056 61.17213440]
[238.90205383 76.93803406]
[224.65766907 84.31890106]
[210.06513977 77.65275574]
[195.59719849 81.61240387]
[181.12925720 85.57204437]
[166.66131592 89.53168488]
[152.19337463 93.49132538]
[141.96002197 104.31387329]
[126.60688782 100.49393463]
[120.62720490 116.81335449]
[105.84870148 125.96080017]
[104.88764954 140.92997742]
[103.92659760 155.89915466]
[102.96554565 170.86833191]
[109.80276489 185.13589478]
[101.26592255 197.34127808]
[100.30487061 212.31045532]
[99.34381866 227.27964783]
[98.38276672 242.24882507]
[97.42170715 257.21801758]
[96.46065521 272.18719482]
[95.49960327 287.15637207]
[94.53855133 302.12554932]
[97.40592957 316.84893799]
[103.91418457 330.36346436]
[110.42243958 343.87799072]
[116.93069458 357.39254761]
[123.43895721 370.90707397]
[129.94720459 384.42160034]
[136.45545959 397.93612671]
[150.30250549 406.72201538]
[149.34698486 423.09329224]
[134.57186890 430.20861816]
[121.17652130 420.74835205]
[122.94093323 404.44439697]
[116.43267822 390.92984009]
[109.92442322 377.41531372]
[103.41616821 363.90078735]
[96.90790558 350.38626099]
[90.39965057 336.87173462]
[83.89139557 323.35717773]
[76.42605591 324.07736206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[23 127]
[24 126]
[25 125]
[26 124]
[27 123]
[28 122]
[29 121]
[30 120]
[32 118]
[33 117]
[34 116]
[35 115]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 83]
[46 82]
[48 81]
[49 80]
[50 79]
[51 78]
[53 76]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[95 113]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
[128 145]
[129 144]
[130 143]
[131 142]
[132 141]
[133 140]
[134 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
