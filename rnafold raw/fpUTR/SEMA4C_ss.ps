%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGAGAGGCCGCGGAGGGCUGGCGGGCGAGCGCGGGCAGGCGGCGACGCGGGGGCAGGGGUGGACGGCGGUCAGAGCCGAACGCGAGGGCGGCGCCCGGGGACUGGAGCUGCGCGCAAUAGGACAGCUGGCCUGAAGCUCAGAGCCGGGGCGUGCGCC\
) } def
/len { sequence length } bind def

/coor [
[97.15335083 588.06292725]
[97.15335083 573.06292725]
[97.15335083 558.06292725]
[87.48381042 551.89739990]
[81.95442200 541.71356201]
[82.05193329 530.00567627]
[87.86833191 519.70605469]
[98.04873657 513.45062256]
[90.81389618 500.43115234]
[99.08373260 486.94335938]
[99.66897583 471.95477295]
[100.25421906 456.96618652]
[93.01937866 443.94674683]
[101.28921509 430.45895386]
[101.87445831 415.47036743]
[102.45969391 400.48181152]
[91.23221588 383.19628906]
[102.75820160 365.16983032]
[102.46553040 350.17266846]
[102.17285156 335.17553711]
[101.88017273 320.17840576]
[101.58749390 305.18124390]
[93.07306671 296.54428101]
[92.73579407 284.01913452]
[101.30440521 274.33438110]
[101.30440521 259.33438110]
[101.30440521 244.33438110]
[101.30440521 229.33438110]
[101.30440521 214.33438110]
[93.56710815 201.60711670]
[101.30440521 187.80694580]
[101.30440521 172.80694580]
[101.30440521 157.80694580]
[99.98896790 142.86473083]
[97.36823273 128.09544373]
[94.74749756 113.32616425]
[85.89636993 102.50261688]
[90.48321533 89.29457092]
[87.86248016 74.52528381]
[85.24174500 59.75600433]
[82.62100983 44.98671722]
[68.94882202 30.21861839]
[76.19886780 12.32482910]
[73.00389099 -2.33095813]
[69.80890656 -16.98674583]
[57.68791962 -22.92908669]
[51.30992889 -34.60499573]
[52.81504059 -47.62775421]
[61.42833328 -57.25046921]
[51.16209793 -69.28852844]
[56.28482056 -83.27449036]
[53.37640762 -97.98982239]
[50.46799850 -112.70516205]
[47.55958939 -127.42050171]
[37.29335022 -139.45855713]
[42.41607285 -153.44451904]
[39.50766373 -168.15985107]
[29.24142647 -180.19792175]
[34.36415100 -194.18386841]
[17.11515427 -204.39445496]
[12.92031002 -223.68501282]
[24.02520752 -239.63888550]
[20.26084900 -254.15885925]
[16.49649048 -268.67883301]
[3.15664554 -276.72161865]
[-0.45410636 -291.50054932]
[7.29566240 -304.16848755]
[3.53130436 -318.68847656]
[-0.23305368 -333.20843506]
[-3.99741173 -347.72842407]
[-18.19252586 -354.28836060]
[-24.80315781 -368.45993042]
[-20.70796776 -383.55175781]
[-7.84057903 -392.43795776]
[7.72341967 -390.92269897]
[18.63518524 -379.72146606]
[19.74251366 -364.12313843]
[10.52256107 -351.49276733]
[14.28691864 -336.97280884]
[18.05127716 -322.45281982]
[21.81563568 -307.93286133]
[34.74399567 -300.62579346]
[38.76843262 -285.95410156]
[31.01646423 -272.44320679]
[34.78082275 -257.92321777]
[38.54518127 -243.40324402]
[48.54990005 -240.74557495]
[56.59437943 -234.10266113]
[61.16678238 -224.63520813]
[61.37137604 -214.04237366]
[57.10318756 -204.25685120]
[49.07948685 -197.09228516]
[59.13769531 -186.10676575]
[54.22299957 -171.06826782]
[57.13141251 -156.35292053]
[67.18962097 -145.36740112]
[62.27492523 -130.32890320]
[65.18333435 -115.61357117]
[68.09174347 -100.89823151]
[71.00016022 -86.18289948]
[81.05836487 -75.19737244]
[76.14366913 -60.15887833]
[90.49133301 -51.42863464]
[94.18214417 -34.69879532]
[84.46469879 -20.18172455]
[87.65967560 -5.52593708]
[90.85465240 9.12985039]
[99.96567535 13.89079094]
[105.03446198 23.08647537]
[104.15964508 33.77108765]
[97.39029694 42.36598587]
[100.01103210 57.13526917]
[102.63176727 71.90454865]
[105.25250244 86.67383575]
[114.10363007 97.49738312]
[109.51678467 110.70542908]
[112.13751984 125.47471619]
[114.75825500 140.24400330]
[122.27812195 127.26510620]
[135.55702209 120.28865051]
[150.51119995 121.46012115]
[162.54173279 130.41926575]
[167.94879150 144.41082764]
[165.06953430 159.13189697]
[154.78941345 170.05522156]
[140.26992798 173.82148743]
[125.97635651 169.27244568]
[116.30440521 157.80694580]
[116.30440521 172.80694580]
[116.30440521 187.80694580]
[124.04170227 201.60711670]
[116.30440521 214.33438110]
[116.30440521 229.33438110]
[116.30440521 244.33438110]
[116.30440521 259.33438110]
[116.30440521 274.33438110]
[125.88539886 290.03234863]
[116.58464050 304.88858032]
[116.87731934 319.88571167]
[117.16999817 334.88287354]
[117.46266937 349.88000488]
[117.75534821 364.87713623]
[125.43265533 370.50469971]
[129.57092285 378.92346191]
[129.34417725 388.16348267]
[124.93169403 396.12750244]
[117.44827271 401.06704712]
[116.86303711 416.05560303]
[116.27779388 431.04418945]
[123.47077179 445.13574219]
[115.24279785 457.55145264]
[114.65755463 472.54000854]
[114.07231140 487.52859497]
[121.26529694 501.62014771]
[113.03731537 514.03582764]
[126.41740417 527.39221191]
[125.84868622 545.97106934]
[112.15335083 558.06292725]
[112.15335083 573.06292725]
[112.15335083 588.06292725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[8 155]
[10 153]
[11 152]
[12 151]
[14 149]
[15 148]
[16 147]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[25 136]
[26 135]
[27 134]
[28 133]
[29 132]
[31 130]
[32 129]
[33 128]
[34 118]
[35 117]
[36 116]
[38 114]
[39 113]
[40 112]
[41 111]
[43 107]
[44 106]
[45 105]
[49 102]
[51 100]
[52 99]
[53 98]
[54 97]
[56 95]
[57 94]
[59 92]
[62 86]
[63 85]
[64 84]
[67 81]
[68 80]
[69 79]
[70 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
