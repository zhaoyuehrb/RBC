%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGCUCGGGGGCGGGCUUCUGAGUUCGCGCAUGCGCCUCUGUGCGUUUGUCCCAUGCUGGUUCCGUGAGUCUGGCCUUAGGUGUCUCGUGUCUGGGGUUGAUCCGAGCUGUCGCCGCCGCCGCCGCA\
) } def
/len { sequence length } bind def

/coor [
[71.88583374 504.96115112]
[56.12305832 503.81637573]
[45.84992218 491.80645752]
[47.16129303 476.05667114]
[59.27915955 465.91107178]
[60.36568069 450.95046997]
[51.85446548 435.65319824]
[62.18735123 420.46823120]
[62.91205215 405.48574829]
[63.63675308 390.50326538]
[56.52338409 377.41705322]
[64.91838074 364.00680542]
[65.64308167 349.02432251]
[66.36778259 334.04183960]
[67.09248352 319.05935669]
[67.81718445 304.07687378]
[56.97734070 299.06506348]
[48.46831131 290.63592529]
[43.32463837 279.78082275]
[42.18304443 267.78808594]
[45.20372772 256.09002686]
[52.04834366 246.09179688]
[61.91775894 239.00282288]
[73.64527130 235.69033813]
[75.45332336 220.79971313]
[77.26136780 205.90907288]
[79.06941986 191.01844788]
[80.87747192 176.12780762]
[82.68552399 161.23718262]
[80.34501648 154.14616394]
[84.72139740 146.01019287]
[82.55292511 138.86468506]
[87.12461853 130.83685303]
[89.64997101 116.05095673]
[81.36137390 104.16628265]
[83.80078888 89.88359070]
[95.56413269 81.42369080]
[98.08949280 66.63779449]
[100.61484528 51.85190582]
[103.14020538 37.06601334]
[105.66555786 22.28012276]
[100.36205292 7.37430429]
[110.13163757 -3.86867046]
[112.47815704 -18.68399620]
[114.64549255 -33.52659225]
[116.81282806 -48.36918640]
[118.98016357 -63.21178436]
[106.40822601 -71.79710388]
[98.84140015 -84.93598175]
[97.73410034 -99.99566650]
[103.25253296 -113.98522949]
[114.25233459 -124.14957428]
[128.51538086 -128.51199341]
[130.68272400 -143.35458374]
[118.44010162 -154.95526123]
[115.51618195 -171.39762878]
[122.86180878 -186.21115112]
[137.42539978 -193.68464661]
[139.23344421 -208.57528687]
[141.04150391 -223.46592712]
[142.84954834 -238.35655212]
[144.65759277 -253.24719238]
[146.28559875 -268.15856934]
[147.73330688 -283.08856201]
[149.18101501 -298.01852417]
[144.69160461 -314.36727905]
[159.15863037 -323.20703125]
[171.65780640 -311.75244141]
[164.11099243 -296.57083130]
[162.66328430 -281.64083862]
[161.21557617 -266.71087646]
[163.72673035 -259.67846680]
[159.54823303 -251.43913269]
[157.74018860 -236.54850769]
[155.93212891 -221.65786743]
[154.12408447 -206.76724243]
[152.31602478 -191.87660217]
[162.93103027 -183.68760681]
[168.13145447 -171.21296692]
[166.44970703 -157.69337463]
[158.22143555 -146.69911194]
[145.52531433 -141.18725586]
[143.35798645 -126.34465790]
[155.77807617 -118.08592987]
[163.41213989 -105.20063782]
[164.69990540 -90.21723175]
[159.33259583 -76.10297394]
[148.32470703 -65.67640686]
[133.82275391 -61.04444885]
[131.65542603 -46.20185089]
[129.48808289 -31.35925674]
[127.32075500 -16.51666069]
[129.48922729 -9.37115574]
[124.91753387 -1.34331501]
[130.40165710 12.50491810]
[120.45144653 24.80547905]
[117.92609406 39.59136963]
[115.40074158 54.37726212]
[112.87538147 69.16315460]
[110.35002899 83.94904327]
[118.63862610 95.83371735]
[116.19921112 110.11640930]
[104.43586731 118.57630920]
[101.91050720 133.36219788]
[99.56399536 148.17752075]
[97.57615662 163.04522705]
[95.76810455 177.93586731]
[93.96005249 192.82649231]
[92.15200043 207.71713257]
[90.34395599 222.60775757]
[88.53590393 237.49839783]
[103.60299683 247.96327209]
[111.32422638 264.51132202]
[109.67962646 282.61352539]
[99.19995117 297.36218262]
[82.79966736 304.80157471]
[82.07496643 319.78405762]
[81.35026550 334.76654053]
[80.62556458 349.74902344]
[79.90086365 364.73150635]
[86.96239471 378.88937378]
[78.61923218 391.22796631]
[77.89453125 406.21044922]
[77.16983795 421.19293213]
[85.27590942 431.31054688]
[84.30360413 443.83502197]
[75.32627869 452.03698730]
[74.23975372 466.99758911]
[84.76453400 478.78762817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 128]
[6 127]
[8 124]
[9 123]
[10 122]
[12 120]
[13 119]
[14 118]
[15 117]
[16 116]
[24 111]
[25 110]
[26 109]
[27 108]
[28 107]
[29 106]
[31 105]
[33 104]
[34 103]
[37 100]
[38 99]
[39 98]
[40 97]
[41 96]
[43 94]
[44 92]
[45 91]
[46 90]
[47 89]
[53 83]
[54 82]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 71]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
