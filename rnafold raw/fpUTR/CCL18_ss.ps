%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGAGGCCAGGAGUUGUGAGUUUCCAAGCCCCAGCUCACUCUGACCACUUCUCUGCCUGCCCAGCAUC\
) } def
/len { sequence length } bind def

/coor [
[95.27838898 304.04299927]
[89.99295044 289.72421265]
[91.45216370 274.53103638]
[99.36629486 261.48001099]
[112.16399384 253.16244507]
[110.20610046 238.29077148]
[107.92424774 223.46534729]
[105.31952667 208.69323730]
[102.71479797 193.92111206]
[100.11007690 179.14900208]
[96.51757050 175.57513428]
[95.34457397 169.60290527]
[97.98138428 162.97993469]
[96.67404938 148.03701782]
[95.36670685 133.09410095]
[94.05937195 118.15117645]
[83.02751160 108.75733185]
[81.76466370 94.32295227]
[90.99770355 83.15615845]
[89.69036865 68.21324158]
[88.38303375 53.27031708]
[84.41170502 44.68708801]
[87.35918427 37.64939117]
[86.70489502 22.66366577]
[86.05060577 7.67794275]
[70.47409058 0.15284956]
[60.74527359 -14.04603672]
[59.36533356 -31.11567116]
[66.61312866 -46.53577423]
[80.49419403 -56.26586914]
[78.53630066 -71.13754272]
[76.57840729 -86.00921631]
[66.17140198 -98.68305969]
[72.19625092 -113.93537903]
[88.45510101 -116.07589722]
[98.22224426 -102.90263367]
[91.45008087 -87.96710968]
[93.40797424 -73.09543610]
[95.36586761 -58.22376251]
[107.80352783 -54.53570557]
[117.88962555 -46.30148315]
[124.03681183 -34.76965332]
[125.25940704 -21.71132278]
[121.33130646 -9.14816284]
[112.82666779 0.96058697]
[101.03632355 7.02365160]
[101.69061279 22.00937462]
[102.34490967 36.99509811]
[103.32595062 51.96298218]
[104.63329315 66.90589905]
[105.94062805 81.84882355]
[116.97248840 91.24266815]
[118.23533630 105.67704773]
[109.00229645 116.84384155]
[110.30963135 131.78675842]
[111.61696625 146.72967529]
[112.92430115 161.67260742]
[114.88219452 176.54428101]
[117.48691559 191.31639099]
[120.09164429 206.08850098]
[122.69636536 220.86062622]
[127.40065765 229.06506348]
[125.07777405 236.33287048]
[127.03565979 251.20454407]
[141.55003357 255.92640686]
[152.57234192 266.48440552]
[157.91412354 280.78222656]
[156.51475525 295.98107910]
[148.65208435 309.06317139]
[135.88723755 317.43103027]
[120.75469971 319.42327881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 64]
[6 63]
[7 61]
[8 60]
[9 59]
[10 58]
[13 57]
[14 56]
[15 55]
[16 54]
[19 51]
[20 50]
[21 49]
[23 48]
[24 47]
[25 46]
[30 39]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
