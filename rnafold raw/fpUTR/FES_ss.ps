%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGAAGCGCGGAAUCAGGAACUGGCCGGGGUCCGCACCGGGCCUGAGUCGGUCCGAGGCCGUCCCAGGAGCAGCUGCCCGUGCGGAACAGCACU\
) } def
/len { sequence length } bind def

/coor [
[78.37297821 118.82298279]
[74.16146851 109.05265808]
[73.93742371 98.89935303]
[77.37584686 89.85859680]
[66.18544006 79.86986542]
[56.59062576 81.71041107]
[47.39317703 78.85586548]
[40.72267914 72.10467529]
[38.05853653 63.14097977]
[39.90306091 54.11581421]
[29.73443604 43.08861923]
[19.56581116 32.06142044]
[9.39718437 21.03422546]
[-6.15914536 20.23525810]
[-16.31449127 8.90725803]
[-15.45692921 -5.91840124]
[-25.62555504 -16.94559669]
[-33.90871811 -21.24104309]
[-35.93777847 -28.49842262]
[-45.74399185 -39.84911346]
[-55.55020142 -51.19980621]
[-63.68992996 -55.76122284]
[-65.48291779 -63.08050156]
[-74.91642761 -74.74279022]
[-84.34994507 -86.40506744]
[-93.78345490 -98.06735229]
[-103.21696472 -109.72963715]
[-118.68895721 -111.53388977]
[-128.08973694 -123.49548340]
[-126.27431488 -138.23454285]
[-135.70782471 -149.89682007]
[-145.14134216 -161.55911255]
[-154.57485962 -173.22138977]
[-164.00836182 -184.88368225]
[-173.44187927 -196.54595947]
[-182.87539673 -208.20823669]
[-197.53756714 -216.72039795]
[-193.41697693 -233.16596985]
[-176.47340393 -233.75900269]
[-171.21310425 -217.64175415]
[-161.77958679 -205.97947693]
[-152.34608459 -194.31718445]
[-142.91256714 -182.65490723]
[-133.47906494 -170.99261475]
[-124.04554749 -159.33033752]
[-114.61203766 -147.66806030]
[-99.81901550 -146.36341858]
[-90.08595276 -134.67057800]
[-91.55467987 -119.16314697]
[-82.12117004 -107.50086212]
[-72.68766022 -95.83858490]
[-63.25414658 -84.17630005]
[-53.82063293 -72.51401520]
[-44.19951248 -61.00601959]
[-34.39329910 -49.65532684]
[-24.58708763 -38.30463409]
[-14.59835911 -27.11422348]
[-4.42973328 -16.08702660]
[10.41671467 -15.74267387]
[20.88623428 -4.70438480]
[20.42438126 10.86560059]
[30.59300613 21.89279747]
[40.76163101 32.91999054]
[50.93025970 43.94718933]
[71.05452728 48.00591660]
[76.17416382 68.67945099]
[87.36457825 78.66818237]
[112.65360260 74.27220917]
[132.30769348 96.04328156]
[147.14866638 98.22171021]
[156.29011536 96.35207367]
[162.43185425 100.71850586]
[177.19450378 103.37636566]
[192.43310547 97.31692505]
[205.13053894 107.69514465]
[202.22474670 123.83480072]
[186.70498657 129.13279724]
[174.53663635 118.13901520]
[159.77398682 115.48114777]
[144.97023010 113.06268311]
[130.12925720 110.88425446]
[121.87159729 123.40667725]
[129.71943665 136.18992615]
[137.56726074 148.97319031]
[145.41510010 161.75643921]
[160.84207153 165.18920898]
[169.25263977 178.56971741]
[165.65695190 193.95953369]
[152.18826294 202.22816467]
[136.83732605 198.46997070]
[128.71154785 184.91461182]
[132.63183594 169.60426331]
[124.78401184 156.82101440]
[116.93618011 144.03776550]
[109.08834839 131.25451660]
[96.99729156 131.11186218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 67]
[5 66]
[10 64]
[11 63]
[12 62]
[13 61]
[16 58]
[17 57]
[19 56]
[20 55]
[21 54]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[69 81]
[70 80]
[72 79]
[73 78]
[82 95]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
