%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCGGGCGCGGGCGGGGGCGGAGUGGCGGCGGCAGCGGCGGCUAGAAGCGGCAGCCCAGAGCCCUCUCGCGGCCGCGGCGGCAGCAGCAGCGCCAGCCCCAGCAACACUGAGGCCGCCGCCGCCGCCUGGCGCUCCCGCCGCCCGGCCCGAC\
) } def
/len { sequence length } bind def

/coor [
[55.37308502 716.46185303]
[40.91721725 710.49847412]
[33.72242737 696.61431885]
[37.18587494 681.36511230]
[49.67222595 671.95104980]
[50.28011322 656.96331787]
[50.88799667 641.97564697]
[51.49588013 626.98797607]
[52.10376358 612.00030518]
[49.21546173 605.14923096]
[52.87889862 596.71594238]
[53.79041290 581.74365234]
[54.70192337 566.77136230]
[55.61343765 551.79907227]
[56.52495193 536.82684326]
[57.43646622 521.85455322]
[58.34797668 506.88226318]
[51.39838409 493.70834351]
[59.95998764 480.40383911]
[60.87149811 465.43154907]
[58.39267731 461.28680420]
[58.53216934 455.53128052]
[62.13550949 449.87481689]
[63.65303421 434.95178223]
[65.17055511 420.02874756]
[66.68807983 405.10571289]
[68.20560455 390.18267822]
[61.79560089 376.73791504]
[70.88934326 363.79132080]
[72.25556183 348.85366821]
[73.47032928 333.90295410]
[74.68509674 318.95220947]
[75.89986420 304.00146484]
[77.11463165 289.05075073]
[78.32940674 274.10000610]
[71.64823151 260.78796387]
[80.47771454 247.65971375]
[81.69248962 232.70898438]
[82.90725708 217.75823975]
[84.12202454 202.80751038]
[85.33679199 187.85678101]
[86.55155945 172.90605164]
[87.76632690 157.95532227]
[88.98109436 143.00459290]
[90.19586945 128.05386353]
[78.41485596 122.24941254]
[69.86314392 111.56824493]
[66.51402283 97.73542023]
[69.44760132 83.24710083]
[78.56538391 70.92044830]
[70.76033783 58.11103058]
[62.95528412 45.30161285]
[55.15023422 32.49219513]
[47.34518433 19.68277740]
[33.55709457 11.92396736]
[33.54198074 -2.97063041]
[25.73693085 -15.78004837]
[13.37552071 -19.59453773]
[7.14755297 -30.47283745]
[9.93309689 -42.28211212]
[2.38925719 -55.24708557]
[-5.15458202 -68.21205902]
[-19.64548874 -75.88966370]
[-19.97145653 -92.28557587]
[-5.79715729 -100.53307343]
[8.29610443 -92.14785004]
[7.81038952 -75.75589752]
[15.35422897 -62.79092407]
[22.89806747 -49.82595062]
[38.56344604 -41.97204590]
[38.54634857 -23.58509827]
[46.35139847 -10.77568054]
[59.58121872 -3.93308568]
[60.15460205 11.87772751]
[67.95964813 24.68714523]
[75.76470184 37.49656296]
[83.56975555 50.30598068]
[91.37480164 63.11539841]
[106.36787415 62.65943146]
[113.38009644 49.39939117]
[120.39232635 36.13935471]
[127.26982117 22.80893326]
[134.01187134 9.40950012]
[140.75392151 -3.98993158]
[141.82879639 -13.12151718]
[147.77079773 -17.59053230]
[154.78303528 -30.85057259]
[153.63342285 -47.20937347]
[167.37528992 -56.15885162]
[181.87217712 -48.49254608]
[182.21093750 -32.09689713]
[168.04307556 -23.83834267]
[161.03083801 -10.57830334]
[154.15335083 2.75211668]
[147.41130066 16.15154839]
[140.66925049 29.55098152]
[140.47103882 36.98336411]
[133.65237427 43.15158081]
[126.64013672 56.41162109]
[119.62790680 69.67166138]
[122.62177277 76.08156586]
[124.01097870 82.48962402]
[137.96879578 76.99604034]
[151.92660522 71.50244904]
[159.62059021 57.42472839]
[175.44827271 54.80486298]
[187.26803589 65.65258789]
[186.01274109 81.64645386]
[172.64535522 90.51734161]
[157.42019653 85.46025848]
[143.46238708 90.95384979]
[129.50457764 96.44744110]
[123.86385345 117.71035767]
[105.14659882 129.26863098]
[103.93183136 144.21936035]
[102.71705627 159.17008972]
[101.50228882 174.12081909]
[100.28752136 189.07154846]
[99.07275391 204.02227783]
[97.85798645 218.97302246]
[96.64321899 233.92375183]
[95.42845154 248.87448120]
[102.02273560 263.25592041]
[93.28013611 275.31478882]
[92.06536865 290.26550293]
[90.85059357 305.21624756]
[89.63582611 320.16699219]
[88.42105865 335.11770630]
[87.20629120 350.06845093]
[89.64042664 358.93502808]
[85.81238556 365.30883789]
[92.11384583 379.82098389]
[83.12864685 391.70019531]
[81.61112213 406.62322998]
[80.09359741 421.54626465]
[78.57607269 436.46929932]
[77.05854797 451.39233398]
[75.84378052 466.34307861]
[74.93226624 481.31536865]
[81.81666565 495.56021118]
[73.32025909 507.79376221]
[72.40874481 522.76605225]
[71.49723053 537.73834229]
[70.58571625 552.71063232]
[69.67420197 567.68292236]
[68.76268768 582.65515137]
[67.85118103 597.62744141]
[67.09143829 612.60821533]
[66.48355865 627.59588623]
[65.87567139 642.58355713]
[65.26779175 657.57122803]
[64.65990448 672.55889893]
[76.34284973 682.95324707]
[78.55996704 698.43286133]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[11 147]
[12 146]
[13 145]
[14 144]
[15 143]
[16 142]
[17 141]
[19 139]
[20 138]
[23 137]
[24 136]
[25 135]
[26 134]
[27 133]
[29 131]
[30 129]
[31 128]
[32 127]
[33 126]
[34 125]
[35 124]
[37 122]
[38 121]
[39 120]
[40 119]
[41 118]
[42 117]
[43 116]
[44 115]
[45 114]
[50 78]
[51 77]
[52 76]
[53 75]
[54 74]
[56 72]
[57 71]
[60 69]
[61 68]
[62 67]
[79 100]
[80 99]
[81 98]
[82 96]
[83 95]
[84 94]
[86 93]
[87 92]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
