%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUCCCAGGGGAGAGCCAGCCGCUGCCGCGGCACUGGUUCAGACGGCCAGGCCCUAGGGACCCACC\
) } def
/len { sequence length } bind def

/coor [
[125.23205566 275.79602051]
[122.47581482 261.05142212]
[119.71957397 246.30683899]
[116.96333313 231.56224060]
[114.20708466 216.81764221]
[111.45084381 202.07304382]
[101.50666046 190.98420715]
[106.57643890 175.99728394]
[103.82019806 161.25268555]
[101.06395721 146.50808716]
[98.30770874 131.76348877]
[77.11245728 122.08945465]
[68.19646454 100.56433105]
[76.34319305 78.73645020]
[67.86614227 66.36148834]
[59.38909912 53.98652267]
[50.91205215 41.61156082]
[42.43500519 29.23659897]
[33.95795822 16.86163521]
[24.91843987 4.89137793]
[15.33573723 -6.64863205]
[5.75303555 -18.18864059]
[-3.82966661 -29.72865105]
[-13.41236877 -41.26866150]
[-28.97282600 -46.44593811]
[-32.00389862 -62.56253052]
[-19.38747787 -73.03907776]
[-4.10225534 -67.09819794]
[-1.87235904 -50.85136414]
[7.71034288 -39.31135178]
[17.29304504 -27.77134323]
[26.87574768 -16.23133469]
[36.45845032 -4.69132423]
[41.37764740 -3.36790276]
[45.37142944 1.27356696]
[46.33292007 8.38459015]
[54.80996704 20.75955200]
[63.28701401 33.13451385]
[71.76406097 45.50947571]
[80.24110413 57.88443756]
[88.71815491 70.25939941]
[96.64113617 68.36929321]
[104.78437805 68.55332947]
[112.61388397 70.79943085]
[119.61625671 74.96031952]
[125.33232880 80.76314545]
[129.38726807 87.82740021]
[131.51516724 95.68984985]
[131.57652283 103.83493805]
[129.56729126 111.72855377]
[125.61921692 118.85308838]
[119.99121094 124.74135590]
[113.05230713 129.00724792]
[115.80854797 143.75184631]
[118.56479645 158.49644470]
[121.32103729 173.24104309]
[131.46237183 185.38450623]
[126.19544220 199.31680298]
[128.95169067 214.06140137]
[131.70793152 228.80599976]
[134.46417236 243.55059814]
[137.22041321 258.29519653]
[139.97665405 273.03979492]
[152.34626770 283.25604248]
[151.92715454 299.29364014]
[139.04080200 308.84985352]
[123.57253265 304.59402466]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[5 59]
[6 58]
[8 56]
[9 55]
[10 54]
[11 53]
[14 41]
[15 40]
[16 39]
[17 38]
[18 37]
[19 36]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
