%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUUUUGACUCUCGUGGCGCCCCAGGGGCCGACGGGAGUGGCGGCCGCGCGGAGGAGGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[115.27907562 152.79763794]
[109.46124268 149.73175049]
[104.57902527 145.29226685]
[100.95075226 139.75332642]
[98.81680298 133.46119690]
[98.32370758 126.81269836]
[99.51412964 120.23006439]
[102.32347107 114.13424683]
[89.17468262 109.38018799]
[86.34028625 95.68866730]
[76.51737213 84.35242462]
[66.69446564 73.01618195]
[56.87155151 61.67993546]
[47.04864120 50.34369278]
[37.22573090 39.00744629]
[27.40281868 27.67120361]
[17.57990837 16.33496094]
[2.69525623 10.97234058]
[0.20812696 -3.71314406]
[-8.07933998 -8.36191845]
[-9.79677868 -15.83046627]
[-19.06916237 -27.62126160]
[-28.34154892 -39.41205978]
[-37.61393356 -51.20285416]
[-52.15777969 -59.91565323]
[-47.81161499 -76.30306244]
[-30.86149406 -76.66323853]
[-25.82313728 -60.47523880]
[-16.55075073 -48.68444443]
[-7.27836704 -36.89364624]
[1.99401796 -25.10284996]
[11.54437065 -13.53605461]
[25.72642326 -8.98427868]
[28.91615295 6.51204967]
[38.73906326 17.84829330]
[48.56197357 29.18453789]
[58.38488388 40.52078247]
[68.20779419 51.85702515]
[78.03070831 63.19326782]
[87.85361481 74.52951050]
[97.67652893 85.86575317]
[110.82531738 90.61981201]
[113.65971375 104.31133270]
[139.75773621 107.18627167]
[150.22973633 130.67813110]
[164.15525818 136.25306702]
[178.08078003 141.82801819]
[192.00628662 147.40295410]
[207.69358826 145.34889221]
[216.63351440 157.26220703]
[231.06129456 150.81123352]
[245.79476929 156.52963257]
[252.09284973 171.02479553]
[246.21897888 185.69699097]
[231.65803528 191.84146118]
[217.04876709 185.81280518]
[211.05857849 171.18772888]
[196.36732483 173.64053345]
[186.43135071 161.32846069]
[172.50584412 155.75352478]
[158.58032227 150.17858887]
[144.65480042 144.60365295]
[140.05885315 149.14770508]
[134.45239258 152.40838623]
[128.18655396 154.16839600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 43]
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[19 32]
[21 31]
[22 30]
[23 29]
[24 28]
[45 62]
[46 61]
[47 60]
[48 59]
[50 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
