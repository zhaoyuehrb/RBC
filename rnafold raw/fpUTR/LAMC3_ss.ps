%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGCAGGGGAAGGCGGGUCCUGGCGGCCAGCGCGCGGUCCGCGCCCACCCUAGCCGAGCGGGGCCGGCAGAGCGCGCGGCGUCGGUGCCCUUGACC\
) } def
/len { sequence length } bind def

/coor [
[23.28221130 347.13211060]
[17.70727539 361.05761719]
[12.13233852 374.98312378]
[6.55740166 388.90866089]
[6.28381872 405.86038208]
[-10.08117580 410.29022217]
[-18.86815643 395.79107666]
[-7.36811733 383.33370972]
[-1.79318058 369.40820312]
[3.78175616 355.48269653]
[9.35669327 341.55715942]
[-2.33683825 329.58090210]
[-7.72299528 313.67532349]
[-5.69897127 296.94995117]
[3.38442993 282.69625854]
[17.78251648 273.73977661]
[34.69164276 271.88006592]
[39.37214279 257.62899780]
[44.05264664 243.37792969]
[48.73314667 229.12686157]
[45.35349655 214.62075806]
[57.01059723 203.92390442]
[61.69110107 189.67283630]
[66.37159729 175.42176819]
[71.05210114 161.17070007]
[75.73260498 146.91963196]
[80.41310883 132.66856384]
[79.49259949 125.19481659]
[85.47480011 118.04375458]
[90.60510254 103.94837189]
[90.19129944 95.73721313]
[96.12826538 89.49151611]
[101.70320892 75.56599426]
[107.27814484 61.64048004]
[112.85308075 47.71495819]
[118.42801666 33.78944016]
[124.00295258 19.86392212]
[114.81695557 5.76670074]
[115.76588440 -10.86723328]
[126.28507996 -23.57405090]
[142.12910461 -27.53214645]
[147.25941467 -41.62753677]
[152.38970947 -55.72292328]
[152.40368652 -65.04623413]
[157.91287231 -70.17977905]
[163.48780823 -84.10529327]
[169.06274414 -98.03081512]
[174.63768005 -111.95633698]
[168.66130066 -126.34106445]
[174.51344299 -140.38410950]
[188.26391602 -145.99302673]
[179.88574219 -159.05387878]
[180.81823730 -174.54290771]
[190.70283508 -186.50427246]
[205.73872375 -190.33859253]
[220.14427185 -184.57147217]
[228.38027954 -171.42050171]
[227.27981567 -155.94250488]
[217.26603699 -144.08906555]
[202.18943787 -140.41809082]
[208.27052307 -126.86981201]
[202.81512451 -112.66793823]
[188.56320190 -106.38140106]
[182.98826599 -92.45587921]
[177.41333008 -78.53035736]
[171.83839417 -64.60484314]
[166.48509216 -50.59262085]
[161.35479736 -36.49723434]
[156.22448730 -22.40184402]
[164.73274231 -11.98226738]
[166.95298767 1.39565706]
[162.19088745 14.20912361]
[151.60531616 23.02932358]
[137.92846680 25.43885803]
[132.35353088 39.36437607]
[126.77859497 53.28989792]
[121.20365906 67.21541595]
[115.62872314 81.14093781]
[110.05378723 95.06645203]
[104.70049286 109.07867432]
[99.57019043 123.17405701]
[94.66416931 137.34907532]
[89.98367310 151.60014343]
[85.30316925 165.85121155]
[80.62266541 180.10227966]
[75.94216919 194.35333252]
[71.26166534 208.60440063]
[74.30653381 224.12985229]
[62.98421478 233.80735779]
[58.30371094 248.05842590]
[53.62321091 262.30950928]
[48.94271088 276.56057739]
[59.23402023 285.15863037]
[65.92456818 296.74359131]
[68.21736145 309.89102173]
[65.85455322 322.99331665]
[59.14622498 334.45599365]
[48.92986298 342.89193726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[17 92]
[18 91]
[19 90]
[20 89]
[22 87]
[23 86]
[24 85]
[25 84]
[26 83]
[27 82]
[29 81]
[30 80]
[32 79]
[33 78]
[34 77]
[35 76]
[36 75]
[37 74]
[41 69]
[42 68]
[43 67]
[45 66]
[46 65]
[47 64]
[48 63]
[51 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
