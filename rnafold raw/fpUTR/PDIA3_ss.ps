%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGGUUUGGGGGUUGGGACCUCCGGCUGCAGGUCCGCCUGGGCCAGACGCGCGAGCGCAAGCAGCGGGUUAGUGGUCGCGCGCCCGACCUCCGCAGUCCCAGCCGAGCCGCGACCCUUCCGGCCGUCCCCACCCCACCUCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[104.23075104 373.01538086]
[102.96717834 358.06869507]
[94.18525696 346.03845215]
[100.73255920 331.63552856]
[99.46898651 316.68884277]
[98.20541382 301.74215698]
[96.94184113 286.79547119]
[94.43210602 284.22848511]
[93.07562256 280.29214478]
[93.51406860 275.55841064]
[96.10155487 270.86898804]
[95.78530884 255.87232971]
[95.46907043 240.87565613]
[95.15282440 225.87899780]
[94.83657837 210.88232422]
[86.83267212 198.32101440]
[94.27730560 184.36077881]
[93.96105957 169.36412048]
[93.64481354 154.36744690]
[93.32856750 139.37078857]
[93.01232147 124.37411499]
[81.28704834 117.10996246]
[75.09918976 104.78273773]
[76.27980042 91.04024506]
[84.47953033 79.94905853]
[79.21736908 65.90236664]
[73.95520782 51.85566711]
[68.69304657 37.80897141]
[63.43088531 23.76227760]
[58.16872406 9.71558094]
[53.23485565 5.15146399]
[51.63904190 -0.39193824]
[52.99453354 -5.03577185]
[48.32920837 -19.29181480]
[36.68350601 -30.00107002]
[40.07860184 -44.50357437]
[28.43289757 -55.21282959]
[31.82799530 -69.71533203]
[27.16267014 -83.97137451]
[13.34581470 -91.16388702]
[8.81759644 -105.68800354]
[15.75970650 -118.81594086]
[11.09438324 -133.07197571]
[6.42905951 -147.32801819]
[-5.21664381 -158.03727722]
[-1.82154775 -172.53977966]
[-13.46725082 -183.24903870]
[-10.07215500 -197.75154114]
[-21.71785927 -208.46080017]
[-18.32276154 -222.96330261]
[-22.98808479 -237.21934509]
[-27.65340805 -251.47538757]
[-32.31873322 -265.73141479]
[-36.98405457 -279.98745728]
[-41.64937973 -294.24349976]
[-46.31470108 -308.49954224]
[-57.96040726 -319.20880127]
[-54.56531143 -333.71130371]
[-59.23063278 -347.96734619]
[-63.89595795 -362.22338867]
[-75.54165649 -372.93264771]
[-72.14656067 -387.43515015]
[-76.81188965 -401.69119263]
[-81.47721100 -415.94723511]
[-95.07933044 -424.45382690]
[-96.76618958 -440.40792847]
[-85.24376678 -451.57098389]
[-69.35108948 -449.37960815]
[-61.27964401 -435.51483154]
[-67.22116852 -420.61257935]
[-62.55584335 -406.35653687]
[-57.89052200 -392.10049438]
[-46.57851410 -382.41091919]
[-49.63991547 -366.88873291]
[-44.97459030 -352.63269043]
[-40.30926514 -338.37664795]
[-28.99725914 -328.68707275]
[-32.05865860 -313.16488647]
[-27.39333725 -298.90884399]
[-22.72801208 -284.65280151]
[-18.06268883 -270.39675903]
[-13.39736652 -256.14071655]
[-8.73204231 -241.88465881]
[-4.06671906 -227.62861633]
[7.24528933 -217.93905640]
[4.18388796 -202.41687012]
[15.49589634 -192.72729492]
[12.43449497 -177.20510864]
[23.74650383 -167.51553345]
[20.68510246 -151.99334717]
[25.35042572 -137.73730469]
[30.01574898 -123.48126221]
[43.37590408 -116.99729156]
[48.31028748 -102.60609436]
[41.41871262 -88.63669586]
[46.08403778 -74.38065338]
[57.39604568 -64.69108582]
[54.33464432 -49.16889572]
[65.64665222 -39.47932816]
[62.58525085 -23.95713806]
[67.25057220 -9.70109558]
[72.21542358 4.45342016]
[77.47758484 18.50011635]
[82.73974609 32.54681015]
[88.00190735 46.59350586]
[93.26406860 60.64020157]
[98.52622986 74.68689728]
[116.65965271 80.88505554]
[125.27709961 98.00165558]
[139.91101074 101.29541016]
[154.54490662 104.58915710]
[169.17881775 107.88291168]
[178.30786133 106.71249390]
[184.08497620 111.40344238]
[198.64619446 115.00498962]
[214.24287415 109.93786621]
[226.24674988 121.11100769]
[222.30926514 137.03044128]
[206.48095703 141.31961060]
[195.04464722 129.56620789]
[180.48344421 125.96465302]
[165.88507080 122.51681519]
[151.25115967 119.22306824]
[136.61724854 115.92931366]
[121.98335266 112.63556671]
[116.04688263 119.63218689]
[108.00898743 124.05786896]
[108.32523346 139.05453491]
[108.64147949 154.05120850]
[108.95772552 169.04786682]
[109.27397156 184.04454041]
[117.30049896 197.67851257]
[109.83324432 210.56608582]
[110.14949036 225.56274414]
[110.46573639 240.55941772]
[110.78197479 255.55607605]
[111.09822083 270.55273438]
[111.88852692 285.53192139]
[113.15209961 300.47860718]
[114.41567230 315.42529297]
[115.67923737 330.37197876]
[124.55153656 343.47131348]
[117.91386414 356.80511475]
[119.17743683 371.75180054]
[130.46006775 383.15713501]
[128.43461609 399.07183838]
[114.65481567 407.28747559]
[99.69136810 401.50173950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 144]
[2 143]
[4 141]
[5 140]
[6 139]
[7 138]
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[25 107]
[26 106]
[27 105]
[28 104]
[29 103]
[30 102]
[33 101]
[34 100]
[36 98]
[38 96]
[39 95]
[42 92]
[43 91]
[44 90]
[46 88]
[48 86]
[50 84]
[51 83]
[52 82]
[53 81]
[54 80]
[55 79]
[56 78]
[58 76]
[59 75]
[60 74]
[62 72]
[63 71]
[64 70]
[109 125]
[110 124]
[111 123]
[112 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
