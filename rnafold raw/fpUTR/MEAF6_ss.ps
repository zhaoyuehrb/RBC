%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGGGGGGCGCCCCCUGGCGGCGCAGGGACCGCCCCCAACCUCGCGCCGCCGCCGCCCGCCUCAGCCCAAC\
) } def
/len { sequence length } bind def

/coor [
[99.04438782 195.05070496]
[109.28980255 183.23692322]
[106.75479126 168.45268250]
[103.90654755 153.72558594]
[100.74636078 139.06225586]
[97.58616638 124.39892578]
[94.42597961 109.73559570]
[90.95526886 95.14264679]
[87.17559814 80.62665558]
[83.39592743 66.11065674]
[79.61625671 51.59466553]
[75.83658600 37.07867050]
[67.33786011 34.04617310]
[60.93503571 27.82524109]
[57.72889709 19.59681511]
[58.22407532 10.87615395]
[62.25133896 3.23392892]
[69.01251984 -1.98667765]
[67.74043274 -16.93264008]
[66.46834564 -31.87860298]
[65.19625854 -46.82456589]
[63.92416763 -61.77052689]
[62.65207672 -76.71649170]
[61.37998962 -91.66245270]
[60.10789871 -106.60841370]
[58.83581161 -121.55437469]
[57.24677658 -136.46997070]
[55.34150696 -151.34848022]
[53.43624115 -166.22698975]
[38.93867111 -171.00015259]
[27.95377159 -181.59707642]
[22.66260719 -195.91372681]
[24.11573982 -211.10751343]
[32.02465057 -224.16169739]
[44.81901550 -232.48437500]
[59.95850754 -234.42306519]
[74.43717194 -229.59283447]
[85.38024902 -218.95274353]
[90.61499786 -204.61537170]
[89.10204315 -189.42742920]
[81.14179230 -176.40447998]
[68.31474304 -168.13224792]
[70.22001648 -153.25373840]
[72.12528229 -138.37524414]
[76.22176361 -131.94995117]
[73.78177643 -122.82646179]
[75.05386353 -107.88050079]
[76.32595062 -92.93453979]
[77.59803772 -77.98857880]
[78.87013245 -63.04261398]
[80.14221954 -48.09665298]
[81.41430664 -33.15069199]
[82.68639374 -18.20472908]
[83.95848083 -3.25876665]
[98.47492218 12.61020660]
[90.35257721 33.29899979]
[94.13224792 47.81499481]
[97.91191864 62.33098602]
[101.69158936 76.84698486]
[105.47126007 91.36297607]
[110.52845001 97.97593689]
[109.08930969 106.57540894]
[112.24949646 121.23873901]
[115.40969086 135.90206909]
[118.56987762 150.56539917]
[123.57447815 158.57449341]
[121.53903198 165.91766357]
[124.07404327 180.70190430]
[137.66984558 188.42770386]
[143.07031250 203.10316467]
[137.72549438 217.79898071]
[124.15906525 225.57623291]
[108.77665710 222.76275635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 68]
[3 67]
[4 65]
[5 64]
[6 63]
[7 62]
[8 60]
[9 59]
[10 58]
[11 57]
[12 56]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 44]
[28 43]
[29 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
