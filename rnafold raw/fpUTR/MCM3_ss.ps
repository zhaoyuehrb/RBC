%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGAAGAAGAAGCUUUUGAUUGGACAGUCGCUAGUCCGACCUCAGAGAACUCAGCCAAUCAUAAUGCUUAU\
) } def
/len { sequence length } bind def

/coor [
[37.73314667 409.28396606]
[26.12455940 419.14099121]
[11.50855827 423.41793823]
[-3.58254981 421.37384033]
[-16.53413773 413.36282349]
[-25.10226250 400.77285767]
[-27.80244827 385.78524780]
[-24.16687012 370.99664307]
[-14.82541180 358.96929932]
[-1.39654040 351.78701782]
[13.79311180 350.69415283]
[18.85595512 336.57440186]
[23.91879845 322.45462036]
[28.98164177 308.33486938]
[19.33850098 295.22653198]
[19.29767990 278.78909302]
[29.06887436 265.36743164]
[45.03693008 260.25683594]
[49.48762131 245.93232727]
[53.93831253 231.60783386]
[58.38900375 217.28332520]
[62.83969879 202.95881653]
[67.29039001 188.63432312]
[71.74108124 174.30981445]
[63.27661514 159.94026184]
[67.76908112 143.53330994]
[82.95733643 135.15780640]
[86.78763580 120.65509796]
[90.61793518 106.15237427]
[94.13530731 91.57060242]
[89.52306366 76.43660736]
[99.79946899 65.65492249]
[103.00228119 51.00084686]
[105.88905334 36.28125000]
[108.45845032 21.50294685]
[99.15874481 8.72441483]
[101.70113373 -6.87404013]
[114.57727051 -16.03812981]
[130.14797974 -13.33096409]
[139.17541504 -0.35865483]
[136.30378723 15.18255615]
[123.23675537 24.07234383]
[120.66735840 38.85064697]
[122.68714905 46.20323181]
[117.65635681 54.20365906]
[114.45354462 68.85773468]
[119.29487610 82.94357300]
[108.78938293 94.77342224]
[110.30455017 102.96515656]
[105.12065125 109.98267365]
[101.29035187 124.48539734]
[97.46005249 138.98811340]
[105.61192322 149.93933105]
[105.86353302 163.39268494]
[98.34941864 174.31721497]
[86.06558228 178.76051331]
[81.61489105 193.08502197]
[77.16419983 207.40951538]
[72.71350861 221.73402405]
[68.26281738 236.05851746]
[63.81212234 250.38302612]
[59.36143112 264.70751953]
[68.49534607 275.26025391]
[71.12184906 288.85629272]
[66.64680481 301.84515381]
[56.36805344 310.79464722]
[43.10140228 313.39770508]
[38.03855896 327.51748657]
[32.97571564 341.63723755]
[27.91287231 355.75698853]
[38.94722366 366.25283813]
[44.75255585 380.33184814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 70]
[12 69]
[13 68]
[14 67]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[23 57]
[24 56]
[27 52]
[28 51]
[29 50]
[30 48]
[32 46]
[33 45]
[34 43]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
