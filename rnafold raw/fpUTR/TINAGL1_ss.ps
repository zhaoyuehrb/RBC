%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAGCGCCCCGCCCCGCGCUCCUCUCUUGACUUUGAGCGUCCGGCGGUCGCAGAGCCAGGAGGCGGAGGCGCGCGGGCCAGCCUGGGCCCCAGCCCACACCUUCACCAGGGCCCAGGAGCCACC\
) } def
/len { sequence length } bind def

/coor [
[175.56388855 207.31544495]
[163.45516968 198.46224976]
[157.69288635 184.61320496]
[159.94772339 169.78366089]
[169.56593323 158.27322388]
[183.75639343 153.41934204]
[170.29988098 146.79194641]
[156.84336853 140.16455078]
[143.38687134 133.53715515]
[139.86021423 134.38934326]
[135.73815918 133.50625610]
[131.87385559 130.62443542]
[129.20600891 125.88671875]
[116.27791595 118.27986145]
[103.34982300 110.67300415]
[90.32862854 103.22662354]
[77.21633148 95.94185638]
[64.10404205 88.65709686]
[50.99174500 81.37233734]
[41.86314392 79.91165924]
[37.64845657 73.74176025]
[24.72035980 66.13490295]
[11.79226208 58.52804565]
[-1.13583529 50.92118835]
[-14.06393337 43.31433105]
[-27.17622757 36.02956772]
[-40.46469498 29.07135963]
[-53.75315857 22.11315155]
[-67.04162598 15.15494442]
[-80.41513824 8.36162281]
[-93.87164307 1.73422647]
[-107.32815552 -4.89316988]
[-120.78466034 -11.52056599]
[-134.24116516 -18.14796257]
[-138.80599976 -17.66160202]
[-142.84953308 -18.62141800]
[-145.96629333 -20.66715240]
[-147.91781616 -23.34089088]
[-148.65036011 -26.15324211]
[-161.38635254 -34.07754135]
[-177.27452087 -31.85360909]
[-188.81979370 -42.99301529]
[-187.16561890 -58.95056152]
[-173.58094788 -67.48498535]
[-158.48677063 -62.04940414]
[-153.46206665 -46.81353378]
[-140.72607422 -38.88923264]
[-127.61377716 -31.60447121]
[-114.15726471 -24.97707558]
[-100.70075989 -18.34967804]
[-87.24424744 -11.72228146]
[-73.78774261 -5.09488535]
[-66.31691742 -4.96056080]
[-60.08341980 1.86647797]
[-46.79495239 8.82468605]
[-33.50648499 15.78289318]
[-20.21801949 22.74110222]
[-15.37879753 22.15753555]
[-10.13655567 24.68400192]
[-6.45707512 30.38623238]
[6.47102261 37.99309158]
[19.39912033 45.59994888]
[32.32721710 53.20680618]
[45.25531769 60.81366348]
[58.27650833 68.26004028]
[71.38880157 75.54480743]
[84.50109863 82.82956696]
[97.61338806 90.11432648]
[105.72133636 90.98411560]
[110.95668030 97.74490356]
[123.88477325 105.35176086]
[136.81286621 112.95861816]
[150.01426697 120.08065033]
[163.47076416 126.70804596]
[176.92727661 133.33543396]
[190.38378906 139.96284485]
[201.71838379 139.54212952]
[208.67687988 146.82096863]
[223.17373657 150.67338562]
[237.67059326 154.52580261]
[246.86711121 148.46801758]
[257.65835571 148.53230286]
[266.41580200 154.45201111]
[270.33050537 164.03265381]
[284.61911011 168.59727478]
[298.90771484 173.16189575]
[313.19631958 177.72651672]
[327.48492432 182.29113770]
[341.77352905 186.85575867]
[356.06213379 191.42037964]
[370.35073853 195.98500061]
[384.63934326 200.54962158]
[393.45587158 188.25636292]
[405.64089966 179.29084778]
[420.00067139 174.53146362]
[435.12838745 174.44445801]
[449.54196167 179.03836060]
[461.82931519 187.86309814]
[470.78665161 200.05413818]
[475.53640747 214.41711426]
[475.61328125 229.54487610]
[471.00973511 243.95536804]
[462.17675781 256.23681641]
[449.97970581 265.18597412]
[435.61355591 269.92611694]
[420.48574829 269.99285889]
[406.07833862 265.37963867]
[393.80282593 256.53842163]
[384.86184692 244.33540344]
[380.13131714 229.96607971]
[380.07473755 214.83822632]
[365.78613281 210.27360535]
[351.49752808 205.70898438]
[337.20892334 201.14436340]
[322.92031860 196.57974243]
[308.63168335 192.01512146]
[294.34307861 187.45050049]
[280.05447388 182.88587952]
[265.76586914 178.32125854]
[247.31736755 183.89755249]
[233.81819153 169.02265930]
[219.32133484 165.17024231]
[204.82446289 161.31784058]
[212.32713318 174.30667114]
[212.00645447 189.30325317]
[203.95539856 201.95948792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 76]
[7 75]
[8 74]
[9 73]
[13 72]
[14 71]
[15 70]
[16 68]
[17 67]
[18 66]
[19 65]
[21 64]
[22 63]
[23 62]
[24 61]
[25 60]
[26 57]
[27 56]
[28 55]
[29 54]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[39 47]
[40 46]
[78 123]
[79 122]
[80 121]
[84 119]
[85 118]
[86 117]
[87 116]
[88 115]
[89 114]
[90 113]
[91 112]
[92 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
