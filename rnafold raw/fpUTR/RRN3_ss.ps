%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAAGGUUGCGCUGGCACGCGCAACUUCCGGGACAGAGGCUGUGGCUGGAAGGAGCUGGGCAUCCGGCCUGAGGCGCAGCGGUCGCGUUAGUUCGGCCCA\
) } def
/len { sequence length } bind def

/coor [
[101.73990631 201.04098511]
[100.36927795 186.10372925]
[98.99864960 171.16648865]
[97.62802887 156.22923279]
[96.25740051 141.29199219]
[94.88677216 126.35473633]
[81.63779449 119.32164001]
[68.49760437 126.55596161]
[55.35741043 133.79028320]
[42.21722031 141.02461243]
[29.07703209 148.25892639]
[15.93684292 155.49325562]
[2.79665351 162.72756958]
[-10.34353638 169.96189880]
[-14.50225639 185.20921326]
[-28.26565170 192.97738647]
[-43.46814728 188.65768433]
[-51.09036636 174.81292725]
[-46.61018753 159.65696716]
[-32.68561935 152.18153381]
[-17.57785797 156.82170105]
[-4.43766880 149.58738708]
[8.70252037 142.35305786]
[21.84271049 135.11874390]
[34.98289871 127.88442230]
[48.12308884 120.65010071]
[61.26327896 113.41577148]
[74.40346527 106.18144989]
[77.35786438 91.47528076]
[68.03108978 79.72746277]
[58.70431519 67.97963715]
[49.37753677 56.23181915]
[40.05076218 44.48400116]
[22.82140541 38.21422195]
[20.73920059 20.86296844]
[11.05850029 9.40504360]
[1.37779939 -2.05288148]
[-8.30290127 -13.51080608]
[-23.14372826 -21.70752525]
[-19.37568855 -38.23744583]
[-2.44866896 -39.19260025]
[3.15502381 -23.19150734]
[12.83572388 -11.73358154]
[22.51642418 -0.27565709]
[32.19712448 11.18226719]
[44.32345963 12.54956913]
[52.47539520 22.16541672]
[51.79858398 35.15722656]
[61.12535858 46.90504456]
[70.45213318 58.65286636]
[79.77890778 70.40068054]
[89.10568237 82.14850616]
[92.42636108 79.50249481]
[96.37073517 77.50012970]
[100.80863953 76.28433990]
[105.57796478 75.97072601]
[110.49058533 76.64057159]
[120.51620483 65.48320007]
[130.54182434 54.32583237]
[140.56744385 43.16846085]
[150.59306335 32.01108932]
[153.45510864 15.86362076]
[168.96046448 10.52359200]
[181.15855408 21.48436737]
[177.50103760 37.47043991]
[161.75044250 42.03670883]
[151.72482300 53.19408035]
[141.69920349 64.35145569]
[131.67356873 75.50882721]
[121.64795685 86.66619873]
[125.71405792 101.10457611]
[140.08874512 105.39038849]
[154.46343994 109.67620087]
[168.83813477 113.96201324]
[184.27372742 110.49025726]
[194.25973511 121.54145813]
[208.63442993 125.82727051]
[223.00910950 130.11308289]
[237.44749451 134.17918396]
[253.12702942 129.37457275]
[264.94168091 140.74761963]
[260.73754883 156.59870911]
[244.83947754 160.62161255]
[233.60205078 148.67788696]
[226.20437622 150.02850342]
[218.72329712 144.48777771]
[204.34861755 140.20196533]
[189.97392273 135.91615295]
[175.56649780 139.69445801]
[164.55232239 128.33670044]
[150.17762756 124.05089569]
[135.80293274 119.76508331]
[121.42824554 115.47927094]
[109.82402039 124.98410797]
[111.19464874 139.92135620]
[112.56527710 154.85861206]
[113.93589783 169.79585266]
[115.30652618 184.73310852]
[116.67715454 199.67034912]
[126.57689667 212.74426270]
[119.95598602 227.74745178]
[103.62545013 229.24592590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[5 95]
[6 94]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[35 45]
[36 44]
[37 43]
[38 42]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[71 93]
[72 92]
[73 91]
[74 90]
[76 88]
[77 87]
[78 86]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
