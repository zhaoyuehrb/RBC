%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCUUUAAAGGGAGGGGAAAAAAGAGAGAGAGAGGCAGGCACUGUAUAAAAGAAGCUUCCUUGAGGUUUCUAAAAUUUAUACAAAAACAUCAUAUGUAAGUAAACUCACCAGAUUUGGCAUCUGCUCUUUGGUG\
) } def
/len { sequence length } bind def

/coor [
[63.97202301 584.92962646]
[49.35274124 589.09436035]
[34.25308609 587.34252930]
[20.97564125 579.94134521]
[11.54512405 568.01934814]
[7.39961672 553.39459229]
[9.17128181 538.29724121]
[16.58995056 525.02954102]
[28.52433205 515.61474609]
[43.15451813 511.48846436]
[44.88316727 496.58840942]
[46.61181259 481.68835449]
[48.34045792 466.78829956]
[50.06910706 451.88821411]
[51.79775238 436.98815918]
[45.57873535 423.45401001]
[54.85485840 410.63748169]
[56.58350372 395.73739624]
[58.31214905 380.83734131]
[46.27584076 372.06280518]
[40.20726776 358.35043335]
[41.82779694 343.34243774]
[50.80177689 331.08010864]
[64.79994965 324.91583252]
[66.52859497 310.01577759]
[68.25724030 295.11569214]
[55.17375565 287.92184448]
[45.81593323 276.23522949]
[41.63406754 261.81729126]
[43.29531097 246.85643005]
[50.57747269 233.63584900]
[62.39813995 224.18519592]
[76.97547913 219.96891785]
[78.70412445 205.06886292]
[80.43276978 190.16879272]
[69.77855682 182.04145813]
[64.51023865 169.60234070]
[66.11181641 156.07954407]
[74.26908112 145.04061890]
[86.92414856 139.45138550]
[88.99649048 124.59523773]
[75.16967773 110.46221161]
[74.71298981 90.69570160]
[87.87233734 75.93918610]
[85.11609650 61.19459152]
[82.35985565 46.44999695]
[79.60361481 31.70540047]
[76.84736633 16.96080399]
[74.09112549 2.21620655]
[71.33488464 -12.52838993]
[68.57864380 -27.27298546]
[65.14438629 -41.87455750]
[61.03944016 -56.30194092]
[56.93449402 -70.72932434]
[52.82954788 -85.15670776]
[48.72460556 -99.58409882]
[44.61965942 -114.01148224]
[40.51471329 -128.43885803]
[36.40977097 -142.86625671]
[32.30482483 -157.29364014]
[22.15471649 -170.87345886]
[32.39400482 -184.38616943]
[48.21315002 -178.28771973]
[46.73220825 -161.39857483]
[50.83715439 -146.97119141]
[54.94210052 -132.54380798]
[59.04704285 -118.11642456]
[63.15198898 -103.68904114]
[67.25693512 -89.26165771]
[71.36187744 -74.83427429]
[75.46681976 -60.40688705]
[79.57176971 -45.97950363]
[82.05265808 -44.49925613]
[84.06849670 -41.90288162]
[85.17408752 -38.37310410]
[85.00281525 -34.25638580]
[83.32323456 -30.02923012]
[86.07948303 -15.28463268]
[88.83572388 -0.54003620]
[91.59196472 14.20456028]
[94.34820557 28.94915771]
[97.10445404 43.69375229]
[99.86069489 58.43835068]
[102.61693573 73.18294525]
[107.73548889 74.18982697]
[112.56407928 76.16416931]
[116.92172241 79.03197479]
[120.64507294 82.68573761]
[134.36698914 76.62692261]
[148.08889771 70.56810760]
[161.81080627 64.50929260]
[173.85809326 52.58038330]
[188.65585327 60.85461426]
[184.80139160 77.36460114]
[167.86961365 78.23120117]
[154.14770508 84.29001617]
[140.42579651 90.34883118]
[126.70388794 96.40764618]
[124.95558929 110.15979004]
[116.60137177 121.22256470]
[103.85264587 126.66757965]
[101.78030396 141.52374268]
[114.09934235 153.05142212]
[117.12283325 169.48138428]
[109.85997772 184.34172058]
[95.33282471 191.89744568]
[93.60417938 206.79750061]
[91.87553406 221.69757080]
[105.10034943 229.13934326]
[114.44330597 241.04530334]
[118.50518036 255.58198547]
[116.69699860 270.52581787]
[109.32521057 283.60333252]
[97.54029846 292.83703613]
[83.15730286 296.84436035]
[81.42864990 311.74441528]
[79.70000458 326.64447021]
[91.91503906 335.84991455]
[97.84318542 349.84112549]
[95.98458099 364.82150269]
[86.93775177 376.78021240]
[73.21221161 382.56600952]
[71.48356628 397.46606445]
[69.75492096 412.36611938]
[75.85028839 426.96600342]
[66.69781494 438.71682739]
[64.96916962 453.61688232]
[63.24052048 468.51693726]
[61.51187134 483.41699219]
[59.78322601 498.31704712]
[58.05458069 513.21710205]
[71.35144806 520.58337402]
[80.81330109 532.48052979]
[84.99726868 547.09429932]
[83.26533508 562.19622803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 131]
[11 130]
[12 129]
[13 128]
[14 127]
[15 126]
[17 124]
[18 123]
[19 122]
[24 117]
[25 116]
[26 115]
[33 108]
[34 107]
[35 106]
[40 102]
[41 101]
[44 84]
[45 83]
[46 82]
[47 81]
[48 80]
[49 79]
[50 78]
[51 77]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
