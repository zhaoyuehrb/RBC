%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUUUGCGCACGCGCACGAACGCACGGCCGCGCAGCAUCUGUCUUGCUGGAAGCUUUUUCCUAGAGGUUGAGCGGUUUGCACA\
) } def
/len { sequence length } bind def

/coor [
[14.87797546 259.63967896]
[5.14639807 266.94943237]
[-6.26248503 271.13217163]
[-18.37347603 271.84246826]
[-30.15484619 269.03115845]
[-40.60622406 262.94863892]
[-51.87620163 272.84750366]
[-63.14617920 282.74636841]
[-74.41616058 292.64523315]
[-79.16016388 308.34320068]
[-95.18656158 311.81982422]
[-106.00875854 299.49862671]
[-100.49381256 284.05459595]
[-84.31502533 281.37527466]
[-73.04505157 271.47637939]
[-61.77507019 261.57751465]
[-50.50509262 251.67864990]
[-56.27321625 234.57696533]
[-54.22433853 216.59620667]
[-44.70534134 201.14739990]
[-29.48418999 191.17900085]
[-11.42166424 188.61416626]
[6.06626511 193.97988892]
[15.75518608 182.52891541]
[25.44410706 171.07794189]
[27.40726089 163.76284790]
[35.70881653 159.39144897]
[45.81425095 148.30632019]
[55.91968536 137.22117615]
[66.02511597 126.13604736]
[76.13055420 115.05091095]
[86.23599243 103.96577454]
[89.41447449 90.35002136]
[102.67887878 85.92878723]
[112.78430939 74.84365082]
[122.88974762 63.75852203]
[132.99517822 52.67338562]
[136.57435608 37.26235199]
[150.86660767 33.06937027]
[160.97204590 21.98423576]
[171.07746887 10.89910126]
[181.18290710 -0.18603258]
[166.21745300 -1.20344949]
[155.19567871 -11.37795925]
[152.98703003 -26.21446228]
[160.56726074 -39.15818787]
[174.58743286 -44.49060440]
[188.85343933 -39.85584259]
[197.06256104 -27.30154228]
[195.58821106 -12.37467957]
[208.19337463 -20.50547981]
[220.79853821 -28.63628006]
[233.40370178 -36.76708221]
[238.17945862 -52.08281326]
[253.18304443 -57.76365662]
[266.90499878 -49.45175171]
[268.81900024 -33.52328110]
[257.45678711 -22.19720459]
[241.53450012 -24.16192055]
[228.92933655 -16.03112030]
[216.32417297 -7.90031910]
[203.71902466 0.23048113]
[192.26803589 9.91940212]
[182.16261292 21.00453568]
[172.05717468 32.08966827]
[161.95173645 43.17480469]
[159.09536743 57.79295731]
[144.08032227 62.77882004]
[133.97488403 73.86395264]
[123.86944580 84.94908905]
[113.76400757 96.03422546]
[110.58552551 109.64997864]
[97.32112122 114.07121277]
[87.21569061 125.15634918]
[77.11025238 136.24148560]
[67.00482178 147.32661438]
[56.89938354 158.41174316]
[46.79394913 169.49688721]
[36.89508057 180.76686096]
[27.20615959 192.21783447]
[17.51723862 203.66880798]
[23.79956818 214.20779419]
[26.76756287 226.09254456]
[26.17955589 238.30847168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 17]
[7 16]
[8 15]
[9 14]
[23 81]
[24 80]
[25 79]
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
[34 71]
[35 70]
[36 69]
[37 68]
[39 66]
[40 65]
[41 64]
[42 63]
[50 62]
[51 61]
[52 60]
[53 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
