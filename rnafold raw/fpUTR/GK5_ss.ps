%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGAGCCGGCGGCAGGGGCCAGGCCUCUCUAGGCUCUCCGGCUGAGCCGGGUUGGGGCCCGGGUUGGGCCGCCCGGGGACUCUGGAGCAUUGGGAUUUGUAGCGCGCCCUCUGGGUAGGCGGCUGUAGCGGAGAGGCGUGCGGGAUCGGG\
) } def
/len { sequence length } bind def

/coor [
[60.42042160 100.04979706]
[49.02934647 109.80907440]
[44.51178741 117.82077789]
[37.30274200 119.64886475]
[25.71369362 129.17219543]
[14.12464619 138.69554138]
[2.53559756 148.21887207]
[-9.05345058 157.74221802]
[-20.64249992 167.26554871]
[-21.08368874 178.21127319]
[-27.37565804 186.90812683]
[-37.22136688 190.59649658]
[-47.24934387 188.27339172]
[-59.21960449 197.31291199]
[-64.22180176 205.03131104]
[-71.52970886 206.41212463]
[-83.68304443 215.20397949]
[-95.83638000 223.99581909]
[-107.98970795 232.78765869]
[-120.14304352 241.57949829]
[-132.29637146 250.37133789]
[-141.58569336 264.55389404]
[-157.78553772 259.55374146]
[-157.46533203 242.60281372]
[-141.08822632 238.21801758]
[-128.93489075 229.42616272]
[-116.78155518 220.63432312]
[-104.62821960 211.84248352]
[-92.47488403 203.05064392]
[-80.32155609 194.25880432]
[-68.25912476 185.34265137]
[-56.28886414 176.30313110]
[-50.14838409 158.00581360]
[-30.16583633 155.67649841]
[-18.57678795 146.15316772]
[-6.98774004 136.62982178]
[4.60130835 127.10649109]
[16.19035721 117.58315277]
[27.77940559 108.05981445]
[39.27007294 98.41799927]
[50.66114426 88.65872955]
[51.12306976 73.66584015]
[40.35439301 63.22383118]
[29.58571434 52.78182220]
[18.81703568 42.33981323]
[3.52352953 38.28774643]
[-0.22733344 23.87315941]
[-10.99601269 13.43114948]
[-21.76469040 2.98914027]
[-32.53337097 -7.45286894]
[-43.40868378 -17.78377151]
[-54.38948441 -28.00247955]
[-65.37028503 -38.22118759]
[-76.35108948 -48.43989182]
[-92.44618225 -51.58314896]
[-97.51494598 -67.17929077]
[-86.34307861 -79.18434906]
[-70.42323303 -75.24854279]
[-66.13238525 -59.42069626]
[-55.15158081 -49.20198822]
[-44.17078018 -38.98328018]
[-33.18997574 -28.76457405]
[-26.10714531 -26.49616432]
[-22.09136009 -18.22154808]
[-11.32268238 -7.77953863]
[-0.55400312 2.66247058]
[10.21467590 13.10447979]
[24.73793411 16.40966606]
[29.25904465 31.57113457]
[40.02772141 42.01314163]
[50.79640198 52.45515442]
[61.56508255 62.89716339]
[75.90514374 58.49686050]
[78.96353912 43.81196213]
[81.87100983 29.09644127]
[84.62725067 14.35184479]
[87.38349915 -0.39275157]
[90.13973999 -15.13734818]
[82.29595184 -29.13215446]
[88.48020935 -43.93534470]
[103.94848633 -48.19118118]
[116.83483124 -38.63494873]
[117.25395203 -22.59737015]
[104.88433838 -12.38110542]
[102.12808990 2.36349130]
[99.37184906 17.10808754]
[96.61560822 31.85268402]
[98.48958588 39.04993439]
[93.64843750 46.87036133]
[90.59004211 61.55525589]
[102.83114624 61.93524551]
[113.92570496 65.97962952]
[122.84938812 73.02665710]
[128.86956787 82.15278625]
[131.60319519 92.28596497]
[131.03411865 102.32811737]
[145.28080750 107.02191925]
[159.52749634 111.71572113]
[173.77420044 116.40951538]
[188.02088928 121.10331726]
[197.50357056 115.61860657]
[208.21743774 116.27988434]
[216.60202026 122.62344360]
[220.00582886 132.33793640]
[234.04780579 137.61267090]
[248.08978271 142.88742065]
[262.13177490 148.16215515]
[276.17373657 153.43690491]
[290.21572876 158.71163940]
[304.25769043 163.98638916]
[318.35308838 169.11668396]
[332.50039673 174.10200500]
[346.64770508 179.08732605]
[360.79504395 184.07264709]
[374.94235229 189.05796814]
[390.54486084 181.21269226]
[406.68685913 186.93705750]
[413.58364868 202.24513245]
[427.83032227 206.93893433]
[442.07702637 211.63273621]
[458.01260376 207.76116943]
[469.13598633 219.81118774]
[464.00436401 235.38674927]
[447.89672852 238.46507263]
[437.38320923 225.87942505]
[423.13653564 221.18563843]
[408.88983154 216.49183655]
[398.27587891 223.86041260]
[385.16036987 223.74946594]
[374.35598755 215.97474670]
[369.95703125 203.20529175]
[355.80972290 198.21997070]
[341.66238403 193.23464966]
[327.51507568 188.24932861]
[313.36776733 183.26400757]
[305.96823120 184.01181030]
[298.98294067 178.02836609]
[284.94097900 172.75361633]
[270.89898682 167.47888184]
[256.85702515 162.20413208]
[242.81504822 156.92939758]
[228.77307129 151.65464783]
[214.73109436 146.37991333]
[195.98812866 150.98413086]
[183.32708740 135.35000610]
[169.08039856 130.65620422]
[154.83370972 125.96240997]
[140.58700562 121.26860809]
[126.34031677 116.57480621]
[115.54116058 128.89920044]
[99.22957611 134.49603271]
[81.45025635 131.08181763]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[4 39]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[13 32]
[14 31]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[42 72]
[43 71]
[44 70]
[45 69]
[47 67]
[48 66]
[49 65]
[50 64]
[51 62]
[52 61]
[53 60]
[54 59]
[73 90]
[74 89]
[75 87]
[76 86]
[77 85]
[78 84]
[96 149]
[97 148]
[98 147]
[99 146]
[100 145]
[104 143]
[105 142]
[106 141]
[107 140]
[108 139]
[109 138]
[110 137]
[111 135]
[112 134]
[113 133]
[114 132]
[115 131]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
