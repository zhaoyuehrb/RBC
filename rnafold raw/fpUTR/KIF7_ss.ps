%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGGAUGGAAACCUGACUGCCUGGCCCGGGACGGCGCUUGCAGCCAGGCAGGGCCCAGAGCAGUCCUCCCUCGGC\
) } def
/len { sequence length } bind def

/coor [
[85.90668488 304.46417236]
[85.30269623 289.47634888]
[84.69870758 274.48849487]
[83.79302979 259.51586914]
[82.58602905 244.56451416]
[81.37902832 229.61315918]
[80.17202759 214.66180420]
[76.39023590 208.06750488]
[79.22988129 199.08615112]
[78.62589264 184.09831238]
[78.02189636 169.11048889]
[66.48830414 178.70091248]
[51.49071121 178.96955872]
[39.62103271 169.79837036]
[36.09637451 155.21835327]
[42.46593094 141.63789368]
[55.93008041 135.02603149]
[70.57090759 138.28889465]
[79.95343781 149.99273682]
[83.54317474 135.42860413]
[87.13290405 120.86448669]
[90.72264099 106.30035400]
[94.01837158 91.66689301]
[97.01875305 76.97003937]
[100.01914215 62.27317810]
[103.01953125 47.57631683]
[105.72335052 32.82201767]
[108.12952423 18.01626396]
[110.53569031 3.21051002]
[105.11228943 -11.65210438]
[114.79099274 -22.97341156]
[104.03588104 -34.00217819]
[101.86251068 -49.07300568]
[108.89693451 -62.37642288]
[122.25617981 -68.90854645]
[124.66234589 -83.71430206]
[127.06851959 -98.52005768]
[116.72061157 -110.24417114]
[116.38145447 -125.87807465]
[126.21118927 -138.03991699]
[141.56851196 -140.98724365]
[155.20216370 -133.32843018]
[160.67474365 -118.67971039]
[155.40228271 -103.95778656]
[141.87426758 -96.11388397]
[139.46810913 -81.30812836]
[137.06193542 -66.50238037]
[147.66514587 -56.07597733]
[150.12478638 -41.22962189]
[143.29081726 -27.62262917]
[129.59674072 -20.56724167]
[135.19224548 -6.76363420]
[125.34144592 5.61667919]
[122.93527985 20.42243385]
[120.52910614 35.22818756]
[122.62289429 42.53590775]
[117.71638489 50.57670212]
[114.71600342 65.27355957]
[111.71561432 79.97042084]
[108.71523285 94.66728210]
[110.34071350 102.81060791]
[105.28677368 109.89009094]
[101.69703674 124.45421600]
[98.10729980 139.01834106]
[94.51756287 153.58247375]
[93.00973511 168.50650024]
[93.61372375 183.49432373]
[94.21771240 198.48216248]
[95.12339020 213.45480347]
[96.33039093 228.40615845]
[97.53738403 243.35751343]
[98.74438477 258.30886841]
[102.64590454 266.88244629]
[99.68653870 273.88452148]
[100.29052734 288.87234497]
[100.89451599 303.86019897]
[103.85900879 323.01382446]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 72]
[5 71]
[6 70]
[7 69]
[9 68]
[10 67]
[11 66]
[19 65]
[20 64]
[21 63]
[22 62]
[23 60]
[24 59]
[25 58]
[26 57]
[27 55]
[28 54]
[29 53]
[31 51]
[35 47]
[36 46]
[37 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
