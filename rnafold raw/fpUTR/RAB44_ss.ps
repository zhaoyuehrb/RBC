%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGUCACCCUACCACCAGGUCCCAGAGCCCAGGGCUGUGUGUUCCACUGGGAGCCUUUGAGAGGGCCAACGCACC\
) } def
/len { sequence length } bind def

/coor [
[93.54169464 262.24645996]
[102.79916382 249.14382935]
[101.59216309 234.19247437]
[97.81037140 227.59817505]
[100.65000916 218.61683655]
[100.04602051 203.62899780]
[87.25269318 192.90853882]
[86.01339722 175.92845154]
[97.55865479 162.96496582]
[96.35166168 148.01361084]
[95.14466095 133.06225586]
[93.93766022 118.11089325]
[82.96910858 108.64320374]
[81.80318451 94.20066833]
[91.11097717 83.09610748]
[89.90397644 68.14475250]
[80.49913788 59.05606842]
[79.94538116 46.39394760]
[87.99109650 37.13052368]
[87.38710785 22.14268875]
[86.78311157 7.15485287]
[85.87744141 -7.81778049]
[84.67044067 -22.76914024]
[83.46343994 -37.72050095]
[82.25643921 -52.67185974]
[81.04944611 -67.62322235]
[79.84244537 -82.57457733]
[75.66918182 -96.98235321]
[68.69833374 -110.26419067]
[61.72748947 -123.54602814]
[54.75664139 -136.82786560]
[42.04206085 -148.04284668]
[49.29901123 -163.36515808]
[66.03143311 -160.63345337]
[68.03848267 -143.79872131]
[75.00933075 -130.51687622]
[81.98017883 -117.23503876]
[88.95102692 -103.95320129]
[93.80049896 -118.14765167]
[104.92293549 -128.21202087]
[119.52993011 -131.62313843]
[133.95948792 -127.52583313]
[144.59410095 -116.94731903]
[148.76765442 -102.53963470]
[145.43385315 -87.91480255]
[135.42845154 -76.73928833]
[121.25984192 -71.81480408]
[106.48011017 -74.37593079]
[94.79380798 -83.78157806]
[96.00080109 -68.83021545]
[97.20780182 -53.87885666]
[98.41480255 -38.92749786]
[99.62179565 -23.97613907]
[100.82879639 -9.02477932]
[104.61059570 -2.43048239]
[101.77095032 6.55086374]
[102.37493896 21.53869820]
[102.97892761 36.52653503]
[113.17986298 50.65855408]
[104.85533905 66.93775177]
[106.06233978 81.88910675]
[117.03089142 91.35679626]
[118.19681549 105.79933167]
[108.88902283 116.90389252]
[110.09602356 131.85525513]
[111.30301666 146.80661011]
[112.51001740 161.75796509]
[123.82511139 169.36476135]
[128.53953552 181.94868469]
[125.10939789 194.73843384]
[115.03385925 203.02500916]
[115.63784790 218.01284790]
[116.54352570 232.98547363]
[117.75051880 247.93682861]
[128.98991394 259.38479614]
[126.90424347 275.29168701]
[113.09345245 283.45513916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 74]
[3 73]
[5 72]
[6 71]
[9 67]
[10 66]
[11 65]
[12 64]
[15 61]
[16 60]
[19 58]
[20 57]
[21 56]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[28 38]
[29 37]
[30 36]
[31 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
