%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGGCCUGGGCCUGCGCCGCUCAGCUCUCUGGAAACUAGCGCCUCAGCUGCGCGGCGCGUAGGUCGCGGGGAGCUCCGAACCGCCGGCGCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[201.16085815 197.07945251]
[189.82461548 187.25654602]
[178.48837280 177.43363953]
[167.15213013 167.61071777]
[155.81587219 157.78781128]
[144.47962952 147.96490479]
[133.14338684 138.14198303]
[121.80715179 128.31907654]
[110.47090149 118.49616241]
[99.13465881 108.67325592]
[95.87907410 108.70677185]
[92.54595947 107.46475220]
[89.64360046 104.91990662]
[87.68089294 101.24695587]
[87.08819580 96.81642151]
[77.08665466 85.63745880]
[67.08512115 74.45848846]
[57.08358765 63.27952194]
[47.08205414 52.10055542]
[37.08051682 40.92158890]
[27.07898331 29.74262238]
[17.07744789 18.56365585]
[2.10958624 13.43787003]
[-0.61022919 -1.20630538]
[-10.61176395 -12.38527203]
[-20.61329842 -23.56423950]
[-30.61483383 -34.74320602]
[-40.61636734 -45.92217255]
[-51.30678177 -56.44429398]
[-66.80310822 -59.63402557]
[-71.35488892 -73.81607819]
[-82.69113159 -83.63898468]
[-94.02737427 -93.46189880]
[-105.36361694 -103.28481293]
[-121.29354858 -109.08771515]
[-120.12725830 -126.00150299]
[-103.55161285 -129.56300354]
[-95.54070282 -114.62105560]
[-84.20446014 -104.79814148]
[-72.86821747 -94.97523499]
[-61.53197479 -85.15232086]
[-46.84649277 -82.66519165]
[-41.48387146 -67.78054047]
[-38.50888824 -67.96479797]
[-35.27911758 -66.86956787]
[-32.32658768 -64.39035034]
[-30.21069527 -60.63449478]
[-29.43740273 -55.92370605]
[-19.43586731 -44.74473953]
[-9.43433285 -33.56577301]
[0.56720257 -22.38680649]
[10.56873798 -11.20783997]
[24.82122231 -6.88164902]
[28.25641441 8.56212044]
[38.25794983 19.74108696]
[48.25948334 30.92005348]
[58.26102066 42.09902191]
[68.26255798 53.27798843]
[78.26409149 64.45695496]
[88.26562500 75.63591766]
[98.26715851 86.81488800]
[108.95757294 97.33701324]
[120.29381561 107.15991974]
[131.63006592 116.98283386]
[142.96630859 126.80574799]
[154.30255127 136.62866211]
[165.63879395 146.45156860]
[176.97503662 156.27447510]
[188.31127930 166.09738159]
[199.64752197 175.92030334]
[210.98376465 185.74320984]
[223.06282043 194.63682556]
[235.80870056 202.54521179]
[244.93151855 204.46836853]
[248.82792664 210.91215515]
[261.31646729 219.22096252]
[277.09191895 220.42330933]
[283.40243530 233.91503906]
[295.89096069 242.22384644]
[308.37951660 250.53263855]
[323.82266235 247.17330933]
[337.07266235 255.78802490]
[340.26852417 271.26580811]
[331.51419067 284.42398071]
[316.00347900 287.45602417]
[302.93859863 278.56307983]
[300.07070923 263.02117920]
[287.58215332 254.71238708]
[275.09362793 246.40359497]
[260.21142578 245.79554749]
[253.00767517 231.70950317]
[240.51911926 223.40071106]
[227.90031433 215.29109192]
[215.15443420 207.38270569]
[212.74018860 208.07666016]
[209.91195679 207.90016174]
[206.98020935 206.69886780]
[204.30282593 204.42594910]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[7 65]
[8 64]
[9 63]
[10 62]
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[22 54]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[29 43]
[31 41]
[32 40]
[33 39]
[34 38]
[72 94]
[73 93]
[75 92]
[76 91]
[78 89]
[79 88]
[80 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
