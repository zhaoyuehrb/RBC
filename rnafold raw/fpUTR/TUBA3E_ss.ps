%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGGCGCGCGUGGGCAGGUCAUUGCAGUUGGGCGCUCAGCAGCUGUGGCAGCCGGUUGAGGUCUGGAAGUAGCGUUGGGCUGAAGCAGCGGAGUUCGCC\
) } def
/len { sequence length } bind def

/coor [
[84.35737610 120.43425751]
[93.80924988 108.78716278]
[79.06465149 111.54341125]
[64.32005310 114.29965210]
[49.66732788 117.50864410]
[35.12037659 121.16735077]
[20.57342148 124.82605743]
[6.02646732 128.48477173]
[-8.52048683 132.14347839]
[-20.01661873 143.01313782]
[-34.24671936 138.61387634]
[-48.79367447 142.27258301]
[-54.65683365 156.51791382]
[-67.63218689 164.48620605]
[-82.63410187 163.30024719]
[-93.92588043 153.62379456]
[-108.47283173 157.28250122]
[-123.01979065 160.94120789]
[-137.56674194 164.59989929]
[-148.95680237 176.39814758]
[-164.80183411 172.17117310]
[-168.80180359 156.26731873]
[-156.84190369 145.04713440]
[-141.22544861 150.05294800]
[-126.67848969 146.39424133]
[-112.13153839 142.73553467]
[-97.58458710 139.07682800]
[-92.21426392 125.20969391]
[-79.55846405 117.06754303]
[-64.35726929 117.94914246]
[-52.45238113 127.72563171]
[-37.90542603 124.06692505]
[-27.44979095 113.45896149]
[-12.17919254 117.59651947]
[2.36776161 113.93781281]
[16.91471481 110.27910614]
[31.46166992 106.62039948]
[46.00862503 102.96169281]
[49.25745010 99.24614716]
[54.93943024 97.64172363]
[61.56381226 99.55505371]
[76.30841064 96.79881287]
[91.05300140 94.04257202]
[105.04008484 88.62394714]
[117.79334259 80.72746277]
[130.54660034 72.83097839]
[143.29986572 64.93449402]
[156.05311584 57.03801346]
[159.78344727 41.91444397]
[172.82954407 34.08796310]
[187.22457886 37.73746490]
[199.97782898 29.84098244]
[212.73109436 21.94449997]
[225.48434448 14.04801655]
[238.23760986 6.15153456]
[240.85556030 1.23053706]
[244.76480103 -1.77731895]
[248.96708679 -2.70321631]
[252.55235291 -1.82172501]
[265.97979736 -8.50780010]
[279.40725708 -15.19387531]
[288.31182861 -28.27128983]
[303.15362549 -27.01817513]
[309.57696533 -33.76129532]
[317.09912109 -33.69621277]
[330.72610474 -39.96561813]
[344.35308838 -46.23502350]
[353.38128662 -59.92529297]
[369.73321533 -58.68180466]
[376.58743286 -43.78374863]
[366.89285278 -30.55696869]
[350.62249756 -32.60804367]
[336.99551392 -26.33864021]
[323.36853027 -20.06923485]
[309.83972168 -13.59072590]
[301.89553833 -0.99154526]
[286.09332275 -1.76642632]
[272.66586304 4.91964912]
[259.23843384 11.60572433]
[246.13407898 18.90479088]
[233.38082886 26.80127335]
[220.62757874 34.69775772]
[207.87431335 42.59423828]
[195.12106323 50.49072266]
[191.97154236 65.00334167]
[179.15042114 73.19317627]
[163.94960022 69.79127502]
[151.19633484 77.68775177]
[138.44308472 85.58423615]
[125.68982697 93.48072052]
[112.93656921 101.37720490]
[127.76841736 103.61691284]
[140.25837708 111.92358398]
[148.05876160 124.73583984]
[149.70336914 139.64541626]
[144.88304138 153.84979248]
[134.50386047 164.67904663]
[120.51675415 170.09761047]
[105.55084229 169.08700562]
[92.41919708 161.83717346]
[83.59014130 149.71084595]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 43]
[3 42]
[4 41]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[11 32]
[12 31]
[16 27]
[17 26]
[18 25]
[19 24]
[44 91]
[45 90]
[46 89]
[47 88]
[48 87]
[51 84]
[52 83]
[53 82]
[54 81]
[55 80]
[59 79]
[60 78]
[61 77]
[63 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
