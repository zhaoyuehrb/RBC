%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGCCCCGGGAACCCGGAUCCUUCCGGGACGCUUCGUUGGCCCCGCGGAGCCGGCGGAGCAGUUAUCUGUGGCCACAAAGAAAGUUAUUUGUCUCUGUCUUGGCAAGGCUGGGAGGAAAGUUUUAGCUAAGAAACUCAGCCCAUUGGAGACC\
) } def
/len { sequence length } bind def

/coor [
[275.98330688 137.06758118]
[265.26354980 115.89085388]
[252.16072083 122.97360229]
[238.77014160 114.54726410]
[223.78939819 113.78752899]
[208.80863953 113.02778625]
[193.82789612 112.26805115]
[180.72506714 119.35079193]
[167.33450317 110.92446136]
[152.35375977 110.16471863]
[137.37300110 109.40498352]
[128.02262878 126.45613861]
[111.53692627 136.77084351]
[92.11360168 137.72267151]
[74.69837189 129.06927490]
[62.83673477 138.25086975]
[50.97509766 147.43244934]
[39.11346054 156.61404419]
[27.25182533 165.79563904]
[15.39018917 174.97721863]
[9.68268776 190.35112000]
[-6.52831697 192.82807922]
[-16.56633377 179.86003113]
[-10.10511017 164.78738403]
[6.20859957 163.11558533]
[18.07023621 153.93400574]
[29.93187141 144.75241089]
[41.79350662 135.57081604]
[53.65514374 126.38922882]
[65.51677704 117.20764160]
[62.71408081 109.74451447]
[61.50689316 101.86440277]
[61.94687271 93.90451813]
[47.88059235 88.69493866]
[33.81430817 83.48535919]
[19.74802780 78.27577972]
[5.68174505 73.06620026]
[-8.38453674 67.85662079]
[-22.45081902 62.64704514]
[-36.51710129 57.43746567]
[-50.58338165 52.22788620]
[-64.64966583 47.01831055]
[-78.71595001 41.80873108]
[-92.83429718 36.74196625]
[-107.00327301 31.81853867]
[-123.94947815 32.33104706]
[-129.13313293 16.18898582]
[-115.05688477 6.73934603]
[-102.07984924 17.64956284]
[-87.91087341 22.57299232]
[-80.51686096 21.79314232]
[-73.50637054 27.74244881]
[-59.44008636 32.95202637]
[-45.37380600 38.16160583]
[-31.30752182 43.37118530]
[-17.24123955 48.58076477]
[-3.17495823 53.79034424]
[10.89132404 58.99991989]
[24.95760536 64.20950317]
[39.02388763 69.41907501]
[53.09016800 74.62865448]
[67.15644836 79.83823395]
[76.04316711 69.81282806]
[87.82500458 63.43547058]
[101.07817078 61.47685242]
[114.20103455 64.17366791]
[125.60774231 71.20001984]
[133.91981506 81.70677948]
[138.13275146 94.42423248]
[153.11349487 95.18397522]
[168.09423828 95.94371033]
[182.26858521 88.91530609]
[194.58763123 97.28730011]
[209.56838989 98.04704285]
[224.54913330 98.80677795]
[239.52987671 99.56651306]
[253.70422363 92.53811646]
[266.02328491 100.91011047]
[268.64016724 93.80194855]
[272.59793091 87.35503387]
[277.73892212 81.81884003]
[283.85980225 77.40671539]
[290.71960449 74.28765106]
[298.04910278 72.57982635]
[305.56158447 72.34613800]
[312.96386719 73.59185791]
[319.96783447 76.26463318]
[326.30166626 80.25662231]
[331.72033691 85.40886688]
[336.01510620 91.51762390]
[339.02160645 98.34240723]
[340.62603760 105.61544800]
[340.76959229 113.05223846]
[355.21154785 117.10555267]
[369.65353394 121.15886688]
[384.09548950 125.21218109]
[398.53747559 129.26550293]
[412.97946167 133.31881714]
[427.42141724 137.37213135]
[442.24844360 139.64353943]
[457.24151611 140.09951782]
[472.23458862 140.55548096]
[487.22766113 141.01144409]
[502.22073364 141.46740723]
[517.21380615 141.92338562]
[532.20684814 142.37934875]
[547.20379639 142.68334961]
[562.20300293 142.83535767]
[577.20220947 142.98736572]
[592.20147705 143.13938904]
[607.20068359 143.29139709]
[622.19995117 143.44340515]
[631.33892822 130.90310669]
[646.11383057 126.16160583]
[660.84338379 131.04208374]
[669.86383057 143.66790771]
[669.70654297 159.18417358]
[660.43206787 171.62458801]
[645.60662842 176.20553589]
[630.93084717 171.16555786]
[622.04791260 158.44262695]
[607.04870605 158.29061890]
[592.04943848 158.13861084]
[577.05023193 157.98660278]
[562.05102539 157.83459473]
[547.05175781 157.68258667]
[540.29162598 160.77780151]
[531.75091553 157.37242126]
[516.75781250 156.91644287]
[501.76477051 156.46047974]
[486.77169800 156.00451660]
[471.77862549 155.54855347]
[456.78555298 155.09257507]
[441.79248047 154.63661194]
[453.75424194 163.68737793]
[460.70852661 176.97789001]
[461.32473755 191.96522522]
[455.48498535 205.78178406]
[444.30661011 215.78398132]
[429.92843628 220.05804443]
[415.10147095 217.78620911]
[402.66265869 209.40313721]
[394.99194336 196.51281738]
[393.55703735 181.58160400]
[398.63247681 167.46636963]
[409.24713135 156.86782837]
[423.36810303 151.81410217]
[408.92614746 147.76078796]
[394.48416138 143.70747375]
[380.04217529 139.65415955]
[365.60021973 135.60084534]
[351.15823364 131.54753113]
[336.71624756 127.49420929]
[320.23434448 144.09239197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[4 76]
[5 75]
[6 74]
[7 73]
[9 71]
[10 70]
[11 69]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[44 50]
[45 49]
[93 153]
[94 152]
[95 151]
[96 150]
[97 149]
[98 148]
[99 147]
[100 134]
[101 133]
[102 132]
[103 131]
[104 130]
[105 129]
[106 128]
[107 126]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
