%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCGGGAGUUGGCAUUCGGUGGUCCUGGCAGUUAGCUGAGCACGCCCUCUGAGCCGCUCGGUGGACACCAGGCACUCUAGUAGGCCUGGCCUACCCAGAAACAGCAGGAGAGAGAAGAAACAGGCCAGCUGUGAGAAGCCAAGGACACCGAGUCAGUC\
) } def
/len { sequence length } bind def

/coor [
[-14.85927677 179.06822205]
[-28.43666267 185.44432068]
[-42.01404953 191.82041931]
[-45.11022949 204.95979309]
[-55.07416534 213.77601624]
[-68.10533142 215.20646667]
[-79.40341949 208.95039368]
[-93.10263062 215.06034851]
[-106.80184174 221.17031860]
[-120.50105286 227.28027344]
[-124.73782349 232.46192932]
[-130.14913940 234.39663696]
[-134.85601807 233.34973145]
[-148.78318787 238.92054749]
[-162.71034241 244.49136353]
[-150.32380676 252.95147705]
[-149.01574707 267.89434814]
[-159.74403381 278.37783813]
[-174.65272522 276.72531128]
[-182.82475281 264.14685059]
[-178.27574158 249.85285950]
[-192.67932129 254.04052734]
[-207.08291626 258.22821045]
[-218.17430115 269.51058960]
[-232.55560303 265.63409424]
[-246.95919800 269.82177734]
[-251.86207581 274.37826538]
[-257.48641968 275.55810547]
[-262.00692749 273.88003540]
[-276.56292725 277.50256348]
[-291.11892700 281.12506104]
[-300.58657837 294.07666016]
[-316.62091064 294.60574341]
[-326.92175293 282.30645752]
[-323.58718872 266.61376953]
[-309.17520142 259.56576538]
[-294.74145508 266.56906128]
[-280.18542480 262.94653320]
[-265.62942505 259.32403564]
[-251.14688110 255.41818237]
[-236.74328613 251.23051453]
[-226.68214417 240.24766541]
[-211.27059937 243.82461548]
[-196.86700439 239.63694763]
[-182.46342468 235.44926453]
[-168.28117371 230.56420898]
[-154.35400391 224.99337769]
[-140.42683411 219.42256165]
[-126.61101532 213.58106995]
[-112.91180420 207.47109985]
[-99.21259308 201.36114502]
[-85.51338196 195.25117493]
[-80.19467926 179.32058716]
[-64.70557404 171.99957275]
[-48.39014435 178.24302673]
[-34.81275558 171.86692810]
[-21.23537064 165.49084473]
[-8.05427742 158.33131409]
[4.68536472 150.41288757]
[17.42500687 142.49446106]
[30.16464996 134.57603455]
[42.90429306 126.65760040]
[55.64393616 118.73917389]
[68.38357544 110.82073975]
[81.12322235 102.90231323]
[84.51844025 88.81619263]
[96.82452393 81.16724396]
[110.95835114 84.35804749]
[111.36319733 72.41621399]
[117.44088745 62.26855469]
[127.56988525 56.39591980]
[139.15576172 56.16794968]
[149.29536438 61.52533722]
[162.33424377 54.10998917]
[175.37313843 46.69464111]
[184.28230286 30.60589218]
[201.79411316 31.34638214]
[214.68582153 23.67803383]
[227.57754517 16.00968552]
[240.39384460 8.21592617]
[253.13348389 0.29749748]
[265.87313843 -7.62093115]
[278.61276245 -15.53935909]
[286.24890137 -29.39576721]
[301.14279175 -29.54306984]
[313.88241577 -37.46149826]
[326.62207031 -45.37992859]
[339.36169434 -53.29835510]
[352.10134888 -61.21678543]
[364.84100342 -69.13521576]
[367.96850586 -91.36347961]
[386.19729614 -103.99127197]
[407.57611084 -99.22528076]
[419.30355835 -108.57762146]
[421.21514893 -124.03672028]
[433.24169922 -133.35426331]
[447.96780396 -131.43659973]
[459.69528198 -140.78894043]
[457.32684326 -155.96412659]
[462.87829590 -170.28463745]
[474.85626221 -179.89834595]
[490.03878784 -182.21919250]
[504.34185791 -176.62290955]
[513.91796875 -164.61483765]
[516.19122314 -149.42510986]
[510.55010986 -135.13967896]
[498.51208496 -125.60124969]
[483.31530762 -123.37561798]
[469.04763794 -129.06146240]
[457.32015991 -119.70912170]
[455.91287231 -104.92550659]
[444.15280151 -95.27383423]
[428.65591431 -96.85015106]
[416.92843628 -87.49780273]
[418.99780273 -79.60638428]
[418.63235474 -71.42242432]
[415.84494019 -63.68308258]
[410.86743164 -57.09142685]
[404.13153076 -52.25257874]
[396.23156738 -49.61817551]
[387.87182617 -49.44427490]
[379.80398560 -51.76660919]
[372.75942993 -56.39556885]
[360.01977539 -48.47714233]
[347.28012085 -40.55871201]
[334.54049683 -32.64028549]
[321.80084229 -24.72185707]
[309.06121826 -16.80342865]
[302.33630371 -3.51339936]
[286.53118896 -2.79971695]
[273.79156494 5.11871147]
[261.05191040 13.03713989]
[248.31227112 20.95556831]
[244.27104187 27.18897438]
[235.24589539 28.90140533]
[222.35417175 36.56975174]
[209.46246338 44.23810196]
[206.16384888 55.90909576]
[195.44299316 62.39415359]
[182.78848267 59.73352814]
[169.74960327 67.14888000]
[156.71070862 74.56422424]
[152.97013855 92.44670868]
[137.10147095 102.12563324]
[118.87677765 97.09768677]
[115.48155975 111.18380737]
[103.17547607 118.83275604]
[89.04164886 115.64195251]
[76.30200195 123.56038666]
[63.56236267 131.47880554]
[50.82271957 139.39724731]
[38.08307648 147.31567383]
[25.34343529 155.23410034]
[12.60379314 163.15252686]
[-0.13584936 171.07095337]
[14.08403015 175.84536743]
[20.92397308 189.19509888]
[16.49283218 203.52565002]
[3.31142139 210.68460083]
[-11.12153625 206.59928894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[7 52]
[8 51]
[9 50]
[10 49]
[13 48]
[14 47]
[15 46]
[21 45]
[22 44]
[23 43]
[25 41]
[26 40]
[29 39]
[30 38]
[31 37]
[58 155]
[59 154]
[60 153]
[61 152]
[62 151]
[63 150]
[64 149]
[65 148]
[68 145]
[73 142]
[74 141]
[75 140]
[77 137]
[78 136]
[79 135]
[80 133]
[81 132]
[82 131]
[83 130]
[85 128]
[86 127]
[87 126]
[88 125]
[89 124]
[90 123]
[93 114]
[94 113]
[97 110]
[98 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
