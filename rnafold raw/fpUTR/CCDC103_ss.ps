%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGCUAGGCAACCACAGCUGCGGGCGUGGUCUGCGCGGGGUUGCCCUCCUGUUCUGGUUUAUCAGGGGAUCCCCAAAGAAAGCAAGGGGACCAAGGCCGGGACUGCUGGGGUGAAGGUCCGGGAGGCUGAGUAAGGGGACGGAAGGGCACAGGCC\
) } def
/len { sequence length } bind def

/coor [
[78.04541016 212.53353882]
[77.17784882 197.19917297]
[84.10803223 183.49267578]
[96.97177124 175.10101318]
[96.07754517 160.12770081]
[95.18331909 145.15437317]
[94.28909302 130.18104553]
[79.05090332 126.28826904]
[66.54446411 114.62491608]
[53.08588028 121.24810028]
[39.62729645 127.87128448]
[26.16871452 134.49446106]
[12.71013165 141.11764526]
[-0.74845135 147.74082947]
[-14.20703411 154.36401367]
[-20.56786156 160.99740601]
[-27.99969292 160.98208618]
[-37.22277832 173.83686829]
[-52.02932358 172.21961975]
[-65.61692810 178.57391357]
[-72.10838318 185.07951355]
[-79.53844452 184.91645813]
[-93.24970245 190.99932861]
[-106.96095276 197.08221436]
[-120.67221069 203.16510010]
[-134.38346863 209.24797058]
[-148.09472656 215.33085632]
[-160.12107849 227.28088379]
[-174.93331909 219.03262329]
[-171.10784912 202.51589966]
[-154.17761230 201.61959839]
[-140.46635437 195.53671265]
[-126.75509644 189.45384216]
[-113.04383850 183.37095642]
[-99.33258057 177.28807068]
[-85.62132263 171.20520020]
[-71.97121429 164.98631287]
[-58.38360977 158.63201904]
[-50.13240051 146.23175049]
[-34.35398102 147.39448547]
[-20.83021736 140.90542603]
[-7.37163401 134.28224182]
[6.08694887 127.65906525]
[19.54553223 121.03588104]
[33.00411606 114.41269684]
[46.46269608 107.78952026]
[59.92127991 101.16633606]
[62.29725266 86.35570526]
[51.58572769 75.85507202]
[40.87420273 65.35443878]
[30.16267967 54.85380936]
[19.45115471 44.35317993]
[8.73963070 33.85255051]
[-5.80716038 38.61169052]
[-20.89745522 36.05403900]
[-33.06361389 26.76731682]
[-39.50994110 12.88555145]
[-38.75511932 -2.40133309]
[-30.97260284 -15.58052063]
[-17.95075226 -23.62353134]
[-2.68189788 -24.68214035]
[11.32529163 -18.51308632]
[20.85206604 -6.53397322]
[23.70924187 8.50248623]
[19.24026299 23.14102554]
[29.95178604 33.64165497]
[40.66331100 44.14228821]
[51.37483597 54.64291763]
[62.08635712 65.14354706]
[72.79788208 75.64418030]
[100.10728455 66.38562775]
[123.01447296 79.65682983]
[136.33871460 72.76737213]
[149.66294861 65.87791443]
[162.98718262 58.98845291]
[176.31143188 52.09899139]
[175.09642029 36.97287369]
[179.75260925 22.57277298]
[189.54083252 11.08345222]
[202.94580078 4.23551130]
[217.91065979 3.04473710]
[232.15251160 7.66154194]
[243.51074219 17.35277367]
[256.83499146 10.46331501]
[270.15921021 3.57385564]
[270.74612427 -12.92439461]
[279.50924683 -26.80455780]
[293.98568726 -34.34223557]
[310.19494629 -33.57119751]
[323.73327637 -24.79537201]
[336.91790771 -31.94838524]
[350.10253906 -39.10139847]
[363.28713989 -46.25440979]
[376.47177124 -53.40742111]
[381.11605835 -70.24597168]
[396.19195557 -78.38002777]
[412.17367554 -73.22296143]
[420.34628296 -86.76988220]
[435.23452759 -86.33412933]
[448.27432251 -93.74787140]
[456.44692993 -107.29478455]
[471.33517456 -106.85903931]
[484.37496948 -114.27277374]
[492.19720459 -128.68614197]
[508.59555054 -128.84803772]
[516.70080566 -114.59191895]
[508.17498779 -100.58326721]
[491.78872681 -101.23297119]
[478.74890137 -93.81922913]
[471.50900269 -80.80259705]
[455.68807983 -80.70806122]
[442.64825439 -73.29432678]
[435.40835571 -60.27769089]
[419.58740234 -60.18315887]
[417.93038940 -47.37299347]
[409.05279541 -37.72373962]
[396.04370117 -34.92507935]
[383.62478638 -40.22279358]
[370.44015503 -33.06978226]
[357.25552368 -25.91676903]
[344.07092285 -18.76375771]
[330.88629150 -11.61074448]
[331.42080688 2.06503272]
[325.97402954 14.69291782]
[315.56033325 23.77660370]
[302.18203735 27.49360085]
[288.44451904 25.06068230]
[277.04867554 16.89809418]
[263.72442627 23.78755379]
[250.40019226 30.67701340]
[251.74186707 45.54742813]
[247.27593994 59.83731461]
[237.65324402 71.35983276]
[224.31620789 78.33917236]
[209.28276062 79.68419647]
[194.84098816 75.15892792]
[183.20088196 65.42323303]
[169.87664795 72.31269073]
[156.55241394 79.20214844]
[143.22816467 86.09161377]
[129.90393066 92.98107147]
[130.71218872 99.47884369]
[130.12484741 106.00029755]
[128.16859436 112.24909210]
[124.93233490 117.94126892]
[120.56310272 122.81817627]
[115.25946045 126.65818787]
[109.26241302 129.28681946]
[110.15663910 144.26014709]
[111.05086517 159.23347473]
[111.94509125 174.20678711]
[125.71615601 181.00778198]
[134.22839355 193.79203796]
[135.19207764 209.12066650]
[128.34796143 222.87034607]
[115.53707886 231.34246826]
[100.20550537 232.25808716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 151]
[5 150]
[6 149]
[7 148]
[9 47]
[10 46]
[11 45]
[12 44]
[13 43]
[14 42]
[15 41]
[17 40]
[19 38]
[20 37]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[72 141]
[73 140]
[74 139]
[75 138]
[76 137]
[83 130]
[84 129]
[85 128]
[90 122]
[91 121]
[92 120]
[93 119]
[94 118]
[97 114]
[99 112]
[100 111]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
