%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUUUCUCUCUCAGCUCUCCGUCUCUCUUUCUCUCUCAGCCUCUUUCUUUCUCCCUGUCUCCCCCACUGUCAGCACCUCUUCUGUGUGGUGAGUGGACCGCUUACCCCACUAGGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[123.33232117 195.56407166]
[121.10552216 210.39785767]
[117.42198181 224.93855286]
[112.31784821 239.04342651]
[105.84320068 252.57409668]
[98.06158447 265.39776611]
[89.04936981 277.38858032]
[78.89498901 288.42889404]
[67.69808960 298.41036987]
[55.56855392 307.23501587]
[42.62541580 314.81625366]
[28.99569321 321.07968140]
[14.81313419 325.96383667]
[0.21692187 329.42080688]
[-14.64970684 331.41665649]
[-29.64085960 331.93176270]
[-44.60942078 330.96112061]
[-59.40850067 328.51425171]
[-73.89286804 324.61511230]
[-87.92037964 319.30203247]
[-101.35338593 312.62713623]
[-114.06005096 304.65588379]
[-125.91569519 295.46655273]
[-136.80395508 285.14932251]
[-146.61799622 273.80538940]
[-155.26150513 261.54611206]
[-162.64965820 248.49180603]
[-168.70996094 234.77053833]
[-173.38291931 220.51699829]
[-176.62269592 205.87104797]
[-178.39747620 190.97642517]
[-178.68988037 175.97926331]
[-177.49700928 161.02677917]
[-174.83056641 146.26567078]
[-170.71673584 131.84082031]
[-165.19587708 117.89377594]
[-158.32217407 104.56140137]
[-150.16308594 91.97453308]
[-140.79867554 80.25669861]
[-130.32083130 69.52288055]
[-118.83238220 59.87841797]
[-106.44607544 51.41795731]
[-93.28346252 44.22452164]
[-79.47370148 38.36870956]
[-65.15232086 33.90797806]
[-50.45986557 30.88610458]
[-35.54051208 29.33274841]
[-20.54067421 29.26314735]
[-5.60754871 30.67798805]
[9.11231804 33.56338501]
[23.47447586 37.89102173]
[37.33798218 43.61843109]
[50.56678772 50.68940735]
[63.03107071 59.03456116]
[74.60852051 68.57199860]
[85.18552399 79.20811462]
[94.65732574 90.83725739]
[98.47739410 76.33184052]
[102.29746246 61.82642746]
[98.32978058 46.51081085]
[109.05323029 36.17365265]
[98.55139923 24.87254333]
[95.84902954 9.68370724]
[101.80844879 -4.54615450]
[114.52800751 -13.27634335]
[129.94895935 -13.72108841]
[143.15052795 -5.73847389]
[149.92013550 8.12427807]
[148.09764099 23.44361305]
[138.26457214 35.33118820]
[123.55864716 39.99372101]
[127.79956055 54.27181244]
[116.80287170 65.64649200]
[112.98281097 80.15190887]
[109.16274261 94.65732574]
[116.55096436 107.71160126]
[130.95321655 111.90388489]
[145.35545349 116.09617615]
[159.75770569 120.28845978]
[174.15995789 124.48074341]
[180.80628967 119.00341797]
[189.00546265 116.69627380]
[197.34497070 117.87735748]
[204.41984558 122.27046967]
[209.06933594 129.06489563]
[210.56721497 137.06396484]
[224.46208191 142.71488953]
[238.35693359 148.36579895]
[254.05522156 146.39746094]
[262.92993164 158.35943604]
[276.82479858 164.01034546]
[290.71966553 169.66127014]
[304.61453247 175.31219482]
[318.50939941 180.96310425]
[332.40423584 186.61402893]
[346.29910278 192.26493835]
[360.19396973 197.91586304]
[377.14395142 198.28202820]
[381.48431396 214.67098999]
[366.93737793 223.37863159]
[354.54306030 211.81071472]
[340.64819336 206.15980530]
[326.75332642 200.50888062]
[312.85845947 194.85797119]
[298.96359253 189.20704651]
[285.06875610 183.55612183]
[271.17388916 177.90521240]
[257.27902222 172.25428772]
[242.57460022 174.62681580]
[232.70602417 162.26066589]
[218.81115723 156.60974121]
[204.91630554 150.95883179]
[183.98451233 156.28582764]
[169.96766663 138.88299561]
[155.56542969 134.69070435]
[141.16317749 130.49842834]
[126.76092529 126.30613708]
[112.35868073 122.11385345]
[117.45296478 136.22230530]
[121.12635040 150.76554871]
[123.34278870 165.60089111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[57 75]
[58 74]
[59 73]
[61 71]
[76 118]
[77 117]
[78 116]
[79 115]
[80 114]
[86 112]
[87 111]
[88 110]
[90 108]
[91 107]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
