%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCCCUUUCUUUCUUCUCUCGCUGGGAAGCUGGGAAGUAUGAGCGUGCAGCCCUGCCGCUGCGGCGGCCGCCCCGGCUCCUCGCCUCCCCCACUUCUGGCCACCCCUCGCCGGUGAGAGAAGAGAACGCGAGAAGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[141.25912476 678.50250244]
[126.66557312 673.49932861]
[117.11156464 661.38635254]
[115.64573669 646.02880859]
[122.73583221 632.32720947]
[136.11943054 624.65368652]
[136.77828979 609.66815186]
[137.43716431 594.68261719]
[138.09602356 579.69708252]
[138.75488281 564.71154785]
[139.41374207 549.72607422]
[140.07261658 534.74053955]
[140.73147583 519.75500488]
[140.40196228 504.75863647]
[139.08551025 489.81649780]
[137.76905823 474.87438965]
[136.45259094 459.93225098]
[135.13613892 444.99014282]
[133.81968689 430.04803467]
[132.50323486 415.10589600]
[131.18678284 400.16378784]
[129.87033081 385.22167969]
[128.55386353 370.27954102]
[127.23741150 355.33743286]
[125.92095947 340.39529419]
[124.60450745 325.45318604]
[123.28804779 310.51107788]
[111.74287415 301.17059326]
[110.19494629 286.03591919]
[120.07037354 273.98959351]
[118.75392151 259.04748535]
[106.49010468 244.15661621]
[115.06896210 225.97117615]
[113.09745789 211.10130310]
[111.12595367 196.23143005]
[108.66558838 181.43458557]
[105.71903229 166.72683716]
[102.77248383 152.01908875]
[99.82592773 137.31134033]
[96.87937927 122.60359192]
[81.48650360 113.33833313]
[77.57114410 95.80392456]
[87.56063843 80.87088776]
[83.97090149 66.30676270]
[80.38117218 51.74263382]
[76.63167572 37.21881866]
[72.72286987 22.73706245]
[61.65674210 11.42992020]
[65.81015778 -2.87386894]
[54.74403763 -14.18101025]
[58.89745331 -28.48480034]
[54.98864746 -42.96655655]
[51.07984543 -57.44831085]
[47.17103958 -71.93006897]
[42.62990570 -86.22615051]
[30.61412621 -96.51846313]
[33.49616623 -111.13157654]
[28.33147049 -125.21440125]
[23.16677666 -139.29722595]
[18.00208282 -153.38005066]
[12.83738899 -167.46287537]
[-0.09071620 -177.55227661]
[2.45057011 -193.75332642]
[17.84699059 -199.39976501]
[30.26002884 -188.68302917]
[26.92021370 -172.62756348]
[32.08490753 -158.54473877]
[37.24960327 -144.46191406]
[42.41429520 -130.37908936]
[47.57899094 -116.29627228]
[59.22535706 -107.01126099]
[56.71273041 -91.39084625]
[59.28270721 -90.09754181]
[61.47389984 -87.66873169]
[62.83600616 -84.25144196]
[62.98345947 -80.15827942]
[61.65279388 -75.83887482]
[65.56159973 -61.35711670]
[69.47040558 -46.87535858]
[73.37921143 -32.39360428]
[84.16574860 -22.12229538]
[80.29191589 -6.78267384]
[91.07846069 3.48863578]
[87.20462036 18.82825661]
[91.11342621 33.31001282]
[95.93045044 38.99203110]
[94.94529724 48.15290070]
[98.53503418 62.71702576]
[102.12476349 77.28115845]
[112.81600189 81.12116241]
[120.33073425 89.64038086]
[122.80639648 100.72727966]
[119.62937927 111.63391876]
[111.58712769 119.65703583]
[114.53367615 134.36479187]
[117.48023224 149.07252502]
[120.42678070 163.78027344]
[123.37333679 178.48802185]
[126.93080902 182.51800537]
[128.38629150 187.06057739]
[127.90512085 191.20883179]
[125.99582672 194.25991821]
[127.96733093 209.12979126]
[129.93884277 223.99966431]
[139.01808167 230.16436768]
[143.08134460 240.12097168]
[140.99485779 250.44549561]
[133.69604492 257.73101807]
[135.01249695 272.67315674]
[146.84208679 282.80715942]
[147.96430969 297.97933960]
[138.23016357 309.19461060]
[139.54663086 324.13671875]
[140.86308289 339.07885742]
[142.17953491 354.02096558]
[143.49598694 368.96310425]
[144.81243896 383.90521240]
[146.12889099 398.84732056]
[147.44535828 413.78945923]
[148.76181030 428.73156738]
[150.07826233 443.67367554]
[151.39471436 458.61581421]
[152.71116638 473.55792236]
[154.02763367 488.50006104]
[155.34408569 503.44216919]
[166.14657593 493.03515625]
[181.14637756 493.11190796]
[191.84182739 503.62890625]
[192.17088318 518.62530518]
[181.94705200 529.60131836]
[166.96504211 530.33593750]
[155.71699524 520.41387939]
[155.05813599 535.39941406]
[154.39927673 550.38488770]
[153.74040222 565.37042236]
[153.08154297 580.35595703]
[152.42268372 595.34149170]
[151.76382446 610.32702637]
[151.10494995 625.31250000]
[163.76345825 634.13104248]
[169.62368774 648.40203857]
[166.81568909 663.57165527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 139]
[7 138]
[8 137]
[9 136]
[10 135]
[11 134]
[12 133]
[13 132]
[14 125]
[15 124]
[16 123]
[17 122]
[18 121]
[19 120]
[20 119]
[21 118]
[22 117]
[23 116]
[24 115]
[25 114]
[26 113]
[27 112]
[30 109]
[31 108]
[33 104]
[34 103]
[35 102]
[36 98]
[37 97]
[38 96]
[39 95]
[40 94]
[43 89]
[44 88]
[45 87]
[46 85]
[47 84]
[49 82]
[51 80]
[52 79]
[53 78]
[54 77]
[55 72]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
