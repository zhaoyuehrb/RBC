%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCCACUGGCGCCGGGGCCGCGCAUGCGCUGCGCUGCCUUUCCCGGGCGCUGAUUCCUGAGUGCUGAGCGCGAACCCGAGGAG\
) } def
/len { sequence length } bind def

/coor [
[84.15432739 212.66473389]
[75.56047821 214.52919006]
[66.84555054 213.64822388]
[59.42570877 226.68455505]
[52.00587082 239.72088623]
[49.42575836 256.47735596]
[32.60988998 258.63671875]
[25.87981033 243.07580566]
[38.96953583 232.30105591]
[46.38937378 219.26470947]
[53.80921173 206.22837830]
[45.38137817 186.17340088]
[53.90159607 165.88017273]
[74.59485626 157.66390991]
[78.96570587 143.31483459]
[83.33654785 128.96577454]
[87.70739746 114.61670685]
[80.98464966 101.78117371]
[85.20674133 87.92043304]
[97.94353485 81.01244354]
[102.31438446 66.66337585]
[106.68522644 52.31431198]
[111.05607605 37.96524811]
[115.42692566 23.61618042]
[106.91516876 8.46658611]
[111.78211975 -7.86617374]
[126.60457611 -15.57663631]
[130.44221497 -30.07741165]
[134.27986145 -44.57818985]
[138.11749268 -59.07896423]
[141.95513916 -73.57974243]
[143.33917236 -88.51575470]
[142.23138428 -103.47479248]
[141.12359619 -118.43383026]
[140.01580811 -133.39286804]
[138.90802002 -148.35189819]
[125.04131317 -154.95570374]
[116.34751892 -167.61720276]
[115.16521454 -182.93051147]
[121.81244659 -196.77645874]
[134.50112915 -205.43051147]
[149.81808472 -206.56480408]
[163.64311218 -199.87420654]
[172.25735474 -187.15846252]
[173.34364319 -171.83802795]
[166.60974121 -158.03404236]
[153.86705017 -149.45968628]
[154.97483826 -134.50065613]
[156.08262634 -119.54161835]
[157.19041443 -104.58258057]
[158.29820251 -89.62354279]
[168.43223572 -100.68253326]
[182.86787415 -104.75835419]
[197.28929138 -100.63246155]
[207.38488770 -89.53836823]
[210.13639832 -74.79288483]
[204.72119141 -60.80448151]
[192.75825500 -51.75526810]
[177.82415771 -50.35070419]
[164.38375854 -57.01070404]
[156.45591736 -69.74209595]
[152.61827087 -55.24132156]
[148.78063965 -40.74054718]
[144.94299316 -26.23977089]
[141.10534668 -11.73899460]
[149.13684082 -1.48542166]
[149.72952271 11.72196579]
[142.43566895 22.98291206]
[129.77598572 27.98702621]
[125.40514374 42.33609390]
[121.03429413 56.68515778]
[116.66345215 71.03422546]
[112.29260254 85.38329315]
[119.01535034 98.21882629]
[114.79325867 112.07956696]
[102.05646515 118.98755646]
[97.68561554 133.33662415]
[93.31477356 147.68568420]
[88.94392395 162.03475952]
[95.69282532 168.04127502]
[100.23617554 175.81065369]
[102.14698029 184.57054138]
[101.25873566 193.45771790]
[97.67967987 201.60310364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[14 79]
[15 78]
[16 77]
[17 76]
[20 73]
[21 72]
[22 71]
[23 70]
[24 69]
[27 65]
[28 64]
[29 63]
[30 62]
[31 61]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
