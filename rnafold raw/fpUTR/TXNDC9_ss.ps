%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGUCCAAGGUGAUAUCGCGCGAGGUUCGCAGCCAAUAAGGAGGCGGAUGUGACGGCCCGUUUGCAGCCGCCGGCAGCUACUGCAAGGCAAAAGCCGGAGUGGACGUGUCUUUUGAAACUGCUGCUCUUUCACUUCUCAGGCGUCACCGAGAGCUCAGCACCCAGGCUGAACUCUGUACCAUUUGGAAGA\
) } def
/len { sequence length } bind def

/coor [
[176.40544128 474.22985840]
[164.02304077 464.87808228]
[159.53451538 450.02438354]
[164.66580200 435.38027954]
[177.44381714 426.57675171]
[177.68923950 411.57876587]
[177.93466187 396.58078003]
[178.18008423 381.58276367]
[178.42552185 366.58477783]
[174.54322815 352.09588623]
[166.83169556 339.22994995]
[159.12014771 326.36404419]
[151.40859985 313.49810791]
[143.69706726 300.63217163]
[140.36744690 299.42669678]
[137.46086121 296.53955078]
[135.76542664 292.18936157]
[135.94070435 286.94027710]
[128.86975098 273.71145630]
[121.79879761 260.48263550]
[107.51538849 256.41818237]
[100.15599060 243.10301208]
[104.51601410 228.14881897]
[97.44506073 214.91999817]
[90.37410736 201.69117737]
[76.42385101 196.17843628]
[62.21989822 201.00003052]
[48.01594543 205.82162476]
[33.81199646 210.64321899]
[19.60804367 215.46481323]
[5.40409088 220.28640747]
[-1.63626099 234.18141174]
[-16.10977364 238.86885071]
[-29.31315041 232.07131958]
[-43.51710129 236.89291382]
[-51.87379456 250.58763123]
[-67.80843353 252.44958496]
[-79.09732819 241.05043030]
[-77.08060455 225.13464355]
[-63.30532074 216.91143799]
[-48.33869553 222.68894958]
[-34.13474274 217.86737061]
[-27.79787254 204.43681335]
[-13.46173191 199.34469604]
[0.58249897 206.08244324]
[14.78645134 201.26086426]
[28.99040222 196.43927002]
[43.19435501 191.61767578]
[57.39830780 186.79608154]
[71.60225677 181.97448730]
[79.62722015 169.30168152]
[77.91291809 154.39996338]
[76.19861603 139.49824524]
[74.48430634 124.59653473]
[66.35593414 111.98980713]
[53.49000549 104.27826691]
[40.62407684 96.56672668]
[27.75814819 88.85518646]
[15.06907272 91.22621155]
[4.50777626 84.52542877]
[1.45120633 72.81098938]
[-11.28682613 64.88996887]
[-24.02485847 56.96895218]
[-40.66836166 53.73937988]
[-42.17238235 36.85227966]
[-26.36158943 30.73221970]
[-16.10384178 44.23091888]
[-3.36580873 52.15193939]
[9.37222385 60.07295609]
[26.91026497 59.69373703]
[35.46968842 75.98925781]
[48.33561707 83.70079803]
[61.20154953 91.41233826]
[74.06747437 99.12387848]
[84.76049805 88.60440826]
[77.26049805 75.61402893]
[69.76049805 62.62364578]
[62.26049805 49.63326645]
[49.10464859 38.93934250]
[55.73874664 23.33725739]
[72.56759644 25.39300346]
[75.25087738 42.13326645]
[82.75087738 55.12364578]
[90.25087738 68.11402893]
[97.75087738 81.10440826]
[104.87233734 78.75179291]
[119.11526489 74.04656982]
[126.23672485 71.69395447]
[124.52242279 56.79224014]
[122.80811310 41.89052200]
[112.60987091 29.04809952]
[118.88346100 13.89639759]
[135.17515564 12.02218914]
[144.72546387 25.35349846]
[137.70983887 40.17621613]
[139.42413330 55.07793427]
[141.13844299 69.97965240]
[155.74659729 73.38579559]
[163.87496948 60.77906799]
[172.00334167 48.17234421]
[180.13171387 35.56561661]
[188.26008606 22.95889091]
[196.38845825 10.35216522]
[204.51683044 -2.25456095]
[201.39347839 -17.51504517]
[209.81639099 -30.18426514]
[224.38417053 -33.06787109]
[232.51254272 -45.67459488]
[233.48794556 -61.46570587]
[246.88754272 -67.96954346]
[255.01591492 -80.57627106]
[255.27972412 -96.97329712]
[269.74142456 -104.70579529]
[283.52404785 -95.81923676]
[282.44924927 -79.45534515]
[267.62265015 -72.44789886]
[259.49426270 -59.84117126]
[259.10028076 -44.95177841]
[245.11927795 -37.54622269]
[236.99090576 -24.93949509]
[240.37655640 -10.48014259]
[232.31282043 2.42066264]
[217.12356567 5.87381268]
[208.99519348 18.48053932]
[200.86682129 31.08726501]
[192.73844910 43.69399261]
[184.61006165 56.30071640]
[176.48168945 68.90744019]
[168.35331726 81.51416779]
[130.94425964 136.71560669]
[89.38602448 122.88223267]
[91.10033417 137.78395081]
[92.81463623 152.68566895]
[94.52893829 167.58738708]
[103.52253723 174.68258667]
[106.67967987 184.99159241]
[103.60292816 194.62022400]
[110.67388153 207.84904480]
[117.74482727 221.07786560]
[132.60108948 225.76075745]
[139.58358765 239.27738953]
[135.02761841 253.41169739]
[142.09857178 266.64050293]
[149.16952515 279.86932373]
[156.56298828 292.92062378]
[164.27453613 305.78656006]
[171.98608398 318.65249634]
[179.69761658 331.51843262]
[187.40916443 344.38433838]
[204.09553528 334.27789307]
[229.26518250 341.51342773]
[241.31329346 350.44891357]
[253.36140442 359.38439941]
[265.40951538 368.31991577]
[281.10302734 370.32598877]
[286.71655273 384.12228394]
[298.76467896 393.05776978]
[310.81277466 401.99325562]
[322.86090088 410.92874146]
[334.90902710 419.86422729]
[350.50350952 417.29763794]
[363.29644775 426.57751465]
[365.69802856 442.19827271]
[356.28344727 454.89239502]
[340.63815308 457.12869263]
[328.04428101 447.58038330]
[325.97351074 431.91235352]
[313.92541504 422.97686768]
[301.87728882 414.04138184]
[289.82919312 405.10589600]
[277.78106689 396.17041016]
[262.94934082 394.80343628]
[256.47402954 380.36801147]
[244.42591858 371.43252563]
[232.37780762 362.49703979]
[220.32969666 353.56155396]
[213.60314941 356.87872314]
[220.23747253 370.33181763]
[230.70431519 381.07635498]
[223.72004700 394.35113525]
[208.93672180 391.81082153]
[206.78437805 376.96612549]
[200.15005493 363.51303101]
[193.42350769 366.83020020]
[193.17808533 381.82818604]
[192.93266296 396.82620239]
[192.68722534 411.82418823]
[192.44180298 426.82217407]
[204.92492676 436.03906250]
[209.57432556 450.84323120]
[204.60220337 465.54211426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 188]
[6 187]
[7 186]
[8 185]
[9 184]
[10 149]
[11 148]
[12 147]
[13 146]
[14 145]
[18 144]
[19 143]
[20 142]
[23 139]
[24 138]
[25 137]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[34 42]
[35 41]
[51 134]
[52 133]
[53 132]
[54 131]
[55 74]
[56 73]
[57 72]
[58 71]
[61 69]
[62 68]
[63 67]
[75 85]
[76 84]
[77 83]
[78 82]
[88 97]
[89 96]
[90 95]
[98 129]
[99 128]
[100 127]
[101 126]
[102 125]
[103 124]
[104 123]
[107 120]
[108 119]
[110 117]
[111 116]
[151 176]
[152 175]
[153 174]
[154 173]
[156 171]
[157 170]
[158 169]
[159 168]
[160 167]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
