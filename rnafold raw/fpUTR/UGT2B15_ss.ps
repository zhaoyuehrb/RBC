%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCUCCUUGGCAUGCACCUAUUCAGACUGUUAGUAUUAUGUAUUUACUUCAAAUUUUAGCAGUUAUAUUUUAACUUGAUUGAUUUUUCCUCAGAUAUAAGUAUGAGAAAUGACAGAAAGAAACAACAACUGGAAAAGAAGCAUUGCAUAAGACCAGG\
) } def
/len { sequence length } bind def

/coor [
[138.91508484 543.25402832]
[138.02647400 528.28039551]
[137.13786316 513.30670166]
[136.24925232 498.33306885]
[135.36064148 483.35940552]
[124.22579193 478.37515259]
[116.23542786 469.06100464]
[112.96449280 457.15798950]
[115.09805298 444.92602539]
[122.28894806 434.71490479]
[133.21252441 428.51290894]
[132.91616821 413.51583862]
[132.61981201 398.51876831]
[132.17530823 383.52536011]
[131.58270264 368.53707886]
[130.99011230 353.54879761]
[119.90995789 343.66113281]
[119.09545898 328.46929932]
[129.54167175 316.91445923]
[128.94908142 301.92617798]
[118.78771210 287.64617920]
[127.42234802 271.40985107]
[126.53373718 256.43621826]
[125.64512634 241.46255493]
[124.75651550 226.48889160]
[123.86790466 211.51522827]
[118.29036713 203.57182312]
[120.51551819 192.86228943]
[116.13466644 178.51628113]
[111.75381470 164.17025757]
[107.37296295 149.82424927]
[102.99211121 135.47822571]
[98.61125946 121.13221741]
[86.76670074 116.53417206]
[79.68541718 105.98472595]
[79.91629028 93.28108978]
[87.37621307 82.99590302]
[83.27965546 68.56613922]
[72.06761169 57.40367508]
[76.03490448 43.04714966]
[71.93834686 28.61738014]
[67.84178162 14.18761253]
[63.74522400 -0.24215524]
[59.64866257 -14.67192268]
[55.55210495 -29.10169029]
[51.45554352 -43.53145981]
[47.35898209 -57.96122742]
[33.83809280 -65.69577026]
[29.88915443 -80.38796997]
[37.34618759 -93.23040771]
[33.24962997 -107.66017151]
[28.44558144 -121.87007141]
[22.94576454 -135.82542419]
[17.44594765 -149.78079224]
[3.22811294 -156.14402771]
[-2.15068364 -170.37509155]
[4.00331974 -183.89041138]
[-1.49649680 -197.84577942]
[-6.99631310 -211.80113220]
[-12.49612904 -225.75648499]
[-18.13354301 -239.65682983]
[-23.90800476 -253.50080872]
[-29.81894875 -267.28704834]
[-35.86579895 -281.01425171]
[-41.91265106 -294.74142456]
[-47.95950317 -308.46859741]
[-62.33337402 -315.59402466]
[-65.58350372 -331.30441284]
[-55.21667099 -343.54809570]
[-39.18542099 -342.93280029]
[-29.78755951 -329.93051147]
[-34.23231888 -314.51547241]
[-28.18546677 -300.78826904]
[-22.13861656 -287.06109619]
[-16.09176445 -273.33392334]
[-10.48751831 -268.45443726]
[-10.06403065 -259.27526855]
[-4.28956938 -245.43128967]
[1.21717751 -240.44203186]
[1.45922887 -231.25630188]
[6.95904493 -217.30094910]
[12.45886135 -203.34559631]
[17.95867729 -189.39022827]
[31.67872810 -183.70729065]
[37.45512390 -169.63291931]
[31.40130615 -155.28060913]
[36.90112305 -141.32524109]
[42.40093994 -127.36988831]
[50.93677902 -139.70436096]
[65.88716888 -140.92327881]
[76.30828094 -130.13438416]
[74.57176208 -115.23523712]
[61.94875336 -107.13217163]
[47.67939758 -111.75673676]
[51.77595520 -97.32696533]
[64.86859131 -90.31850433]
[69.22864532 -75.74302673]
[61.78875351 -62.05778503]
[65.88531494 -47.62801743]
[69.98187256 -33.19824982]
[74.07843018 -18.76848221]
[78.17498779 -4.33871508]
[82.27155304 10.09105206]
[86.36811066 24.52082062]
[90.46466827 38.95058823]
[101.38370514 49.08094025]
[97.70941925 64.46958160]
[101.80598450 78.89934540]
[116.38524628 86.58274078]
[121.04239655 102.39099121]
[112.95727539 116.75136566]
[117.33812714 131.09738159]
[121.71897888 145.44338989]
[126.09983063 159.78941345]
[130.48068237 174.13542175]
[134.86152649 188.48144531]
[139.73840332 174.29637146]
[149.81008911 163.18055725]
[163.44691467 156.93260193]
[178.44236755 156.56346130]
[192.37010193 162.13285828]
[202.97651672 172.73963928]
[208.54544067 186.66757202]
[208.17579651 201.66300964]
[201.92736816 215.29962158]
[190.81121826 225.37092590]
[176.62599182 230.24731445]
[161.66693115 229.13977051]
[148.35452271 222.22749329]
[138.84156799 210.62663269]
[139.73017883 225.60028076]
[140.61877441 240.57394409]
[141.50738525 255.54759216]
[142.39599609 270.52124023]
[151.52427673 279.68286133]
[151.92817688 292.20776367]
[143.93736267 301.33358765]
[144.52996826 316.32186890]
[155.85585022 327.01589966]
[156.24331665 342.22457886]
[145.97839355 352.95617676]
[146.57099915 367.94445801]
[147.16358948 382.93276978]
[150.64506531 391.43661499]
[147.61688232 398.22241211]
[147.91323853 413.21948242]
[148.20959473 428.21655273]
[163.36537170 438.08877563]
[169.54598999 454.92089844]
[164.46955872 471.95495605]
[150.33430481 482.47079468]
[151.22290039 497.44445801]
[152.11151123 512.41809082]
[153.00012207 527.39178467]
[153.88873291 542.36541748]
[163.36207581 555.75152588]
[156.26116943 570.53356934]
[139.89082336 571.50506592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[4 152]
[5 151]
[11 147]
[12 146]
[13 145]
[14 143]
[15 142]
[16 141]
[19 138]
[20 137]
[22 134]
[23 133]
[24 132]
[25 131]
[26 130]
[28 116]
[29 115]
[30 114]
[31 113]
[32 112]
[33 111]
[37 108]
[38 107]
[40 105]
[41 104]
[42 103]
[43 102]
[44 101]
[45 100]
[46 99]
[47 98]
[50 95]
[51 94]
[52 88]
[53 87]
[54 86]
[57 83]
[58 82]
[59 81]
[60 80]
[61 78]
[62 77]
[63 75]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
