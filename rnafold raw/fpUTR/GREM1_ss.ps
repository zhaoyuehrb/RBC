%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCGGUGCGCCUUCCGCGGACCGGGCGACCCAGUGCACGGCCGCCGCGUCACUCUCGGUCCCGCUGACCCCGCGCCGAGCCCCGGCGGCUCUGGCCGCGGCCGCACUCAGCGCCACGCGUCGAAAGCGCAGGCCCCGAGGACCCGCCGCACUGACAGU\
) } def
/len { sequence length } bind def

/coor [
[66.88667297 113.77610016]
[64.66090393 106.11730957]
[49.67246628 105.52841187]
[34.68402863 104.93951416]
[19.69559479 104.35061646]
[4.70715904 103.76171875]
[-10.28127670 103.17282104]
[-25.26971245 102.58392334]
[-40.25814819 101.99502563]
[-55.24658203 101.40613556]
[-64.88645935 113.42191315]
[-79.58142090 117.41082001]
[-93.64115906 112.04538727]
[-101.74848938 99.57906342]
[-116.73693085 98.99017334]
[-130.83023071 106.17971039]
[-143.24392700 97.94870758]
[-158.23236084 97.35980988]
[-173.22079468 96.77091217]
[-188.20922852 96.18201447]
[-203.20272827 95.74029541]
[-218.19982910 95.44578552]
[-233.19694519 95.15128326]
[-248.19404602 94.85677338]
[-263.19116211 94.56227112]
[-278.18826294 94.26776886]
[-268.86730957 106.02021027]
[-270.40625000 120.94106293]
[-281.92971802 130.54364014]
[-296.88342285 129.36619568]
[-306.76202393 118.07843018]
[-305.94674683 103.10060120]
[-294.90270996 92.95230865]
[-309.76123047 90.89712524]
[-324.61978149 88.84194183]
[-339.47833252 86.78675842]
[-354.35632324 84.87754059]
[-368.97027588 90.93917084]
[-380.69989014 81.75957489]
[-395.59591675 79.99651337]
[-410.49194336 78.23345184]
[-426.93194580 82.37619019]
[-435.46383667 67.72548676]
[-423.74755859 55.47130585]
[-408.72888184 63.33742523]
[-393.83285522 65.10048676]
[-378.93682861 66.86354828]
[-365.38836670 60.67580795]
[-352.59326172 69.98151398]
[-345.54458618 67.63251495]
[-337.42312622 71.92821503]
[-322.56460571 73.98339844]
[-307.70605469 76.03858185]
[-292.84753418 78.09377289]
[-277.89376831 79.27066040]
[-262.89663696 79.56516266]
[-247.89953613 79.85966492]
[-232.90243530 80.15417480]
[-217.90531921 80.44867706]
[-202.90821838 80.74318695]
[-196.12371826 77.71459961]
[-187.62033081 81.19358063]
[-172.63189697 81.78247833]
[-157.64346313 82.37137604]
[-142.65502930 82.96027374]
[-129.63380432 75.72860718]
[-116.14803314 84.00173187]
[-101.15959167 84.59062958]
[-92.09915924 72.79883575]
[-77.66179657 68.55305481]
[-63.32509613 73.68261719]
[-54.65768433 86.41769409]
[-39.66925049 87.00659180]
[-24.68081474 87.59548950]
[-9.69237900 88.18438721]
[5.29605627 88.77328491]
[20.28449249 89.36218262]
[35.27292633 89.95108032]
[50.26136398 90.53997803]
[65.24980164 91.12887573]
[77.31024170 72.22503662]
[98.24020386 64.17854309]
[119.85807800 70.13479614]
[133.71334839 87.76547241]
[148.57188416 85.71028900]
[163.43043518 83.65510559]
[178.28897095 81.59992218]
[193.14750671 79.54473877]
[208.00604248 77.48954773]
[220.61596680 67.93442535]
[234.28332520 73.85496521]
[249.14186096 71.79977417]
[264.00039673 69.74459076]
[270.09381104 60.65595627]
[279.99154663 56.53326035]
[290.30264282 58.52553558]
[297.63769531 65.73024750]
[312.56546021 64.25998688]
[325.54080200 55.20729446]
[338.96517944 61.65984726]
[353.89294434 60.18958664]
[368.82070923 58.71932983]
[383.74847412 57.24907303]
[398.66110229 55.63233566]
[413.55712891 53.86927795]
[426.35223389 44.56357193]
[439.90069580 50.75130844]
[454.75924683 48.69612503]
[469.57455444 46.34960556]
[481.99444580 36.54874420]
[495.77542114 42.19980240]
[510.59072876 39.85328293]
[525.40606689 37.50676727]
[540.22137451 35.16025162]
[554.91967773 26.71056366]
[567.10803223 38.49531555]
[559.15789795 53.46968842]
[542.56787109 49.97557449]
[527.75256348 52.32209015]
[512.93725586 54.66860962]
[498.12191772 57.01512527]
[486.76171875 66.64814758]
[471.92108154 61.16493225]
[457.10574341 63.51144791]
[453.59820557 66.82199097]
[447.95773315 67.93090057]
[441.66375732 65.64733887]
[429.93411255 74.82693481]
[415.32019043 68.76530457]
[400.42416382 70.52836609]
[394.11859131 74.45794678]
[385.21875000 72.17684174]
[370.29095459 73.64710236]
[355.36318970 75.11736298]
[340.43542480 76.58761597]
[328.52783203 85.53514862]
[314.03570557 79.18775940]
[299.10794067 80.65802002]
[284.31518555 93.06345367]
[266.05557251 84.60313416]
[251.19705200 86.65831757]
[236.33850098 88.71350098]
[224.79136658 98.12162781]
[210.06123352 92.34809113]
[195.20269775 94.40327454]
[180.34414673 96.45845795]
[165.48561096 98.51364899]
[150.62707520 100.56883240]
[135.76853943 102.62401581]
[134.30416870 110.46408844]
[131.14334106 117.78667450]
[126.44235229 124.22964478]
[120.43368530 129.47436523]
[113.41449738 133.26145935]
[105.73191071 135.40365601]
[97.76585388 135.79499817]
[89.91029358 134.41615295]
[82.55370331 131.33528137]
[76.05989838 126.70477295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 80]
[3 79]
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[9 73]
[10 72]
[14 68]
[15 67]
[17 65]
[18 64]
[19 63]
[20 62]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 49]
[39 47]
[40 46]
[41 45]
[84 149]
[85 148]
[86 147]
[87 146]
[88 145]
[89 144]
[91 142]
[92 141]
[93 140]
[97 138]
[98 137]
[100 135]
[101 134]
[102 133]
[103 132]
[104 130]
[105 129]
[107 127]
[108 124]
[109 123]
[111 121]
[112 120]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
