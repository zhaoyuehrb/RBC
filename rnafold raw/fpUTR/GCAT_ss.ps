%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUGCGUCCGCGAUGCGCACGGCUCCCAGGCAGGCAGGCGCGCUCGGGCGAGGUAGGAGCG\
) } def
/len { sequence length } bind def

/coor [
[117.49411011 287.31134033]
[121.77317810 272.56057739]
[132.86544800 261.93716431]
[129.22074890 247.38668823]
[125.57604218 232.83621216]
[114.97814178 222.37037659]
[119.13039398 207.10375977]
[115.48569489 192.55329895]
[111.84098816 178.00282288]
[108.19628906 163.45236206]
[104.55158234 148.90188599]
[100.90688324 134.35142517]
[90.30898285 123.88558197]
[94.46123505 108.61897278]
[89.43239594 101.90377808]
[91.01341248 93.26509094]
[88.08705139 78.55331421]
[85.16069794 63.84153366]
[82.23434448 49.12975311]
[79.30799103 34.41797638]
[74.39952087 26.26198578]
[76.61769104 18.91341209]
[66.93923187 6.39790440]
[72.72531128 -7.32691193]
[70.52435303 -22.16456032]
[68.32339478 -37.00220871]
[54.50561142 -44.06255341]
[47.50678635 -57.91159821]
[50.01811600 -73.22410583]
[61.07393646 -84.11209869]
[76.42306519 -86.38893127]
[90.16344452 -79.17910004]
[97.01161957 -65.25494385]
[94.33432770 -49.97058487]
[83.16104126 -39.20316315]
[85.36199951 -24.36551666]
[87.56295776 -9.52786922]
[97.08399200 1.92635155]
[91.45534515 16.71245575]
[94.01976776 31.49162102]
[96.94612122 46.20339966]
[99.87248230 60.91518021]
[102.79883575 75.62696075]
[105.72518921 90.33873749]
[109.01171112 104.97426605]
[119.87030029 116.48085785]
[115.45735168 130.70672607]
[119.10205078 145.25718689]
[122.74675751 159.80766296]
[126.39145660 174.35812378]
[130.03616333 188.90859985]
[133.68086243 203.45906067]
[144.53945923 214.96565247]
[140.12651062 229.19151306]
[143.77120972 243.74198914]
[147.41590881 258.29244995]
[162.20626831 262.43261719]
[172.93353271 273.42449951]
[176.71211243 288.31134033]
[172.52560425 303.08862305]
[161.50015259 313.78140259]
[146.60154724 317.51330566]
[131.83744812 313.28048706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 56]
[4 55]
[5 54]
[7 52]
[8 51]
[9 50]
[10 49]
[11 48]
[12 47]
[14 45]
[16 44]
[17 43]
[18 42]
[19 41]
[20 40]
[22 39]
[24 37]
[25 36]
[26 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
