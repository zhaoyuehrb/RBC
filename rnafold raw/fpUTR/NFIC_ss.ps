%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCGCUCCCUCCCCCGCGCGCCCUCCCUCGCCGCCUCCUCCCGCCGCCUGCGGCCCCCCCCUCGCCGGGGACCGAGCGCGCUCGCUCCGGCGCCGGCCUCGCCUCCUCGCAGCAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[118.55581665 121.25939941]
[106.04335785 112.98665619]
[92.10011292 111.94852448]
[85.68390656 99.52581024]
[73.17144012 91.25306702]
[60.65897369 82.98033142]
[48.14651108 74.70758820]
[35.63404465 66.43485260]
[23.05397987 72.23316193]
[9.36283207 71.03617096]
[-1.84162474 63.26661682]
[-7.66878366 51.06009674]
[-6.68062115 37.67909622]
[-18.97410393 29.08431435]
[-31.26758575 20.48953056]
[-43.56106949 11.89474869]
[-55.85455322 3.29996586]
[-64.79743195 0.90318596]
[-68.35167694 -5.68094873]
[-80.41788483 -14.59198189]
[-92.48410034 -23.50301361]
[-104.09196472 -14.88406658]
[-117.64907837 -9.90692139]
[-132.04447937 -8.96980476]
[-146.10128784 -12.14027214]
[-158.67279053 -19.15043068]
[-168.73612976 -29.41954422]
[-175.47543335 -42.10214233]
[-178.34796143 -56.15761948]
[-177.12785339 -70.43560791]
[-171.92381287 -83.77015686]
[-183.75462341 -92.99143219]
[-195.58543396 -102.21270752]
[-207.41624451 -111.43398285]
[-219.24703979 -120.65525818]
[-232.25688171 -112.83804321]
[-247.21275330 -110.25225830]
[-262.09201050 -113.24760437]
[-274.88235474 -121.41898346]
[-283.85400391 -133.66128540]
[-287.79360962 -148.31884766]
[-286.16836548 -163.40933228]
[-279.19808960 -176.89190674]
[-267.82543945 -186.94314575]
[-253.58848572 -192.20368958]
[-238.41264343 -191.96212769]
[-224.35032654 -186.25109863]
[-213.30335999 -175.84297180]
[-206.76574707 -162.14538574]
[-205.62162781 -147.01080322]
[-210.02577209 -132.48606873]
[-198.19496155 -123.26479340]
[-186.36415100 -114.04351807]
[-174.53334045 -104.82224274]
[-162.70252991 -95.60096741]
[-149.87217712 -104.48755646]
[-134.91062927 -108.99817657]
[-119.26773071 -108.68325806]
[-104.46325684 -103.56147766]
[-91.93914795 -94.11910248]
[-82.91913605 -81.26380920]
[-78.28915405 -66.23747253]
[-78.51031494 -50.49620438]
[-83.57306671 -35.56922913]
[-71.50685883 -26.65819550]
[-59.44064331 -17.74716187]
[-47.25976944 -8.99351692]
[-34.96628571 -0.39873406]
[-22.67280388 8.19604874]
[-10.37932110 16.79083061]
[1.91416132 25.38561440]
[17.19097900 19.53126335]
[33.11810303 23.93823624]
[43.41689301 37.07308578]
[43.90678406 53.92238617]
[56.41925049 62.19512558]
[68.93171692 70.46786499]
[81.44418335 78.74060059]
[93.95664215 87.01334381]
[107.89988708 88.05147552]
[114.31609344 100.47418976]
[126.82855988 108.74693298]
[133.28276062 105.53996277]
[140.37075806 104.56376648]
[147.34916687 105.88720703]
[153.49670410 109.33971405]
[158.18878174 114.53242493]
[160.96087646 120.90176392]
[161.55444336 127.77048492]
[159.94068909 134.41964722]
[171.01809692 144.53355408]
[182.09552002 154.64744568]
[193.17292786 164.76133728]
[204.25035095 174.87524414]
[217.22575378 175.08770752]
[226.25355530 183.84106445]
[226.82731628 195.99978638]
[237.63844299 206.39785767]
[248.63571167 205.55876160]
[258.05270386 210.86306763]
[262.83483887 220.30850220]
[261.58859253 230.59922791]
[271.84545898 241.54441833]
[287.64755249 241.80668640]
[298.57568359 253.22384644]
[298.14636230 269.02230835]
[286.61431885 279.82910156]
[270.82128906 279.23278809]
[260.13699341 267.58709717]
[260.90026855 251.80126953]
[250.64341736 240.85607910]
[231.81961060 236.75781250]
[227.24037170 217.20896912]
[216.42926025 206.81089783]
[199.23117065 203.58949280]
[194.13644409 185.95265198]
[183.05903625 175.83876038]
[171.98161316 165.72485352]
[160.90420532 155.61096191]
[149.82679749 145.49707031]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[4 79]
[5 78]
[6 77]
[7 76]
[8 75]
[13 71]
[14 70]
[15 69]
[16 68]
[17 67]
[19 66]
[20 65]
[21 64]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[90 120]
[91 119]
[92 118]
[93 117]
[94 116]
[97 114]
[98 113]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
