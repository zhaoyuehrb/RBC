%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAGCAGCGAGCGGCGCCCGCGUCUGCAGCGGCGCCGGGUCCGAGCGCGCGGCGCGGCGGUGGGGGUCGGGGCCCGGGCGGGGAGCGGGGACCGGGC\
) } def
/len { sequence length } bind def

/coor [
[19.34367943 380.01611328]
[14.26261044 394.12933350]
[21.21768379 408.32095337]
[16.02168465 423.24667358]
[1.75730872 430.05133057]
[-13.11264324 424.69781494]
[-19.76609230 410.36227417]
[-14.25566483 395.54977417]
[0.14939922 389.04824829]
[5.23046780 374.93502808]
[-4.40897322 361.75045776]
[-4.35492277 345.25296021]
[5.56721830 331.86657715]
[21.65140533 326.91992188]
[26.28665924 312.65405273]
[30.92191505 298.38821411]
[23.95214081 285.27496338]
[28.44972610 270.74133301]
[42.25138474 263.51968384]
[46.88664246 249.25384521]
[51.52189636 234.98799133]
[56.15715027 220.72215271]
[60.79240417 206.45629883]
[56.16259384 189.60949707]
[69.73512268 177.28981018]
[73.91999054 162.88540649]
[78.10485840 148.48100281]
[82.28972626 134.07659912]
[86.47459412 119.67218781]
[77.51632690 108.02596283]
[77.07467651 93.33957672]
[85.31693268 81.17610168]
[99.12100220 76.14294434]
[103.30587006 61.73854065]
[107.49073792 47.33413696]
[103.91078186 31.92327881]
[114.89165497 21.85999870]
[119.07652283 7.45559311]
[123.26139069 -6.94881248]
[127.44625854 -21.35321808]
[123.86630249 -36.76407242]
[134.84718323 -46.82735443]
[139.03204346 -61.23176193]
[143.21691895 -75.63616180]
[139.63696289 -91.04701996]
[150.61782837 -101.11030579]
[147.03787231 -116.52115631]
[158.01875305 -126.58444214]
[162.20362854 -140.98884583]
[166.38848877 -155.39324951]
[156.77191162 -167.57115173]
[156.18357849 -183.07705688]
[164.84968567 -195.94865417]
[179.43797302 -201.23654175]
[194.33891296 -196.90742493]
[203.82281494 -184.62591553]
[204.24291992 -169.11453247]
[195.43768311 -156.33770752]
[180.79289246 -151.20838928]
[176.60803223 -136.80398560]
[172.42315674 -122.39957428]
[176.30244446 -108.01902008]
[165.02223206 -96.92543793]
[168.90151978 -82.54487610]
[157.62132263 -71.45130157]
[153.43644714 -57.04689407]
[149.25158691 -42.64248657]
[153.13087463 -28.26193047]
[141.85066223 -17.16835022]
[137.66580200 -2.76394582]
[133.48092651 11.64046001]
[129.29606628 26.04486465]
[133.17535400 40.42542267]
[121.89514160 51.51900101]
[117.71027374 65.92340851]
[113.52540588 80.32781219]
[122.48367310 91.97403717]
[122.92532349 106.66042328]
[114.68306732 118.82389832]
[100.87899780 123.85705566]
[96.69412994 138.26145935]
[92.50926208 152.66586304]
[88.32439423 167.07026672]
[84.13952637 181.47467041]
[89.68611145 193.24964905]
[85.77426147 205.24032593]
[75.05825043 211.09155273]
[70.42299652 225.35740662]
[65.78774261 239.62324524]
[61.15248871 253.88909912]
[56.51723480 268.15493774]
[63.43824387 282.10977173]
[58.53421402 296.51135254]
[45.18776321 303.02346802]
[40.55250549 317.28930664]
[35.91725159 331.55517578]
[44.87822723 342.16217041]
[47.36163712 355.71319580]
[42.81682205 368.60327148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[14 96]
[15 95]
[16 94]
[19 91]
[20 90]
[21 89]
[22 88]
[23 87]
[25 84]
[26 83]
[27 82]
[28 81]
[29 80]
[33 76]
[34 75]
[35 74]
[37 72]
[38 71]
[39 70]
[40 69]
[42 67]
[43 66]
[44 65]
[46 63]
[48 61]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
