%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGGGCGCACAGUGGCUUCCGGGCCCGGACGCCAUUUCCAGCGGUUGCUGGUUCUGACGGGUUGUAGUCUGCCAGGACA\
) } def
/len { sequence length } bind def

/coor [
[164.36871338 149.55137634]
[161.37838745 138.75936890]
[147.93591309 132.10357666]
[134.49342346 125.44776917]
[121.05094147 118.79197693]
[107.60845947 112.13617706]
[93.64418030 112.83662415]
[85.73574829 101.30630493]
[72.29325867 94.65051270]
[58.85078049 87.99471283]
[41.39703369 94.81747437]
[24.66839790 87.08910370]
[18.75387383 69.96659088]
[4.84133816 64.35933685]
[-9.07119846 58.75207901]
[-22.98373604 53.14482117]
[-36.89627075 47.53756714]
[-50.80880737 41.93030930]
[-66.50083923 43.94793701]
[-75.41307831 32.01390076]
[-89.32561493 26.40664291]
[-103.23815155 20.79938698]
[-117.15068817 15.19213104]
[-133.30369568 18.02278137]
[-143.62271118 5.27720165]
[-137.49243164 -9.93304825]
[-121.21915436 -11.96096706]
[-111.54343414 1.27959383]
[-97.63089752 6.88684988]
[-83.71836090 12.49410629]
[-69.80582428 18.10136223]
[-55.10891342 15.68266869]
[-45.20155334 28.01777458]
[-31.28901672 33.62503052]
[-17.37648010 39.23228455]
[-3.46394277 44.83954239]
[10.44859409 50.44679642]
[24.36113167 56.05405426]
[33.90774536 49.27935410]
[45.67242050 48.06013489]
[56.62825394 52.83015060]
[63.89735413 62.46666336]
[65.50657654 74.55223083]
[78.94905853 81.20802307]
[92.39154053 87.86382294]
[106.35581970 87.16337585]
[114.26425171 98.69369507]
[127.70674133 105.34948730]
[141.14921570 112.00528717]
[154.59170532 118.66108704]
[168.03419495 125.31688690]
[187.87083435 122.89031219]
[198.33094788 138.96849060]
[212.24348450 144.57574463]
[226.15602112 150.18299866]
[240.06855774 155.79025269]
[253.98109436 161.39752197]
[267.89361572 167.00477600]
[283.58566284 164.98715210]
[292.49789429 176.92118835]
[306.41043091 182.52844238]
[320.32296753 188.13569641]
[334.23550415 193.74295044]
[348.67822266 187.32548523]
[363.39837646 193.07809448]
[369.66278076 207.58784485]
[363.75485229 222.24636841]
[349.17968750 228.35700989]
[334.58447266 222.29444885]
[328.62826538 207.65548706]
[314.71572876 202.04823303]
[300.80319214 196.44097900]
[286.89065552 190.83372498]
[272.19372559 193.25241089]
[262.28637695 180.91731262]
[248.37384033 175.31005859]
[234.46130371 169.70278931]
[220.54876709 164.09553528]
[206.63623047 158.48828125]
[192.72369385 152.88102722]
[183.42303467 157.81901550]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 51]
[3 50]
[4 49]
[5 48]
[6 47]
[8 45]
[9 44]
[10 43]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[20 31]
[21 30]
[22 29]
[23 28]
[53 80]
[54 79]
[55 78]
[56 77]
[57 76]
[58 75]
[60 73]
[61 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
