%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCAGUUUCUGGUCACAUGAUUUUCUUCUCGGGCUGCAAACAAAGGGAAGCCUGCAACAAGUUAAGCUGAAGACCGAAGCAAGAGCUGGUUCAGGUGGCAGCCACAGCAGCCUCAGGGACCUCAGCAACU\
) } def
/len { sequence length } bind def

/coor [
[79.41150665 132.84008789]
[71.57707977 126.35327911]
[65.69994354 118.05170441]
[62.18481827 108.50703430]
[61.27375412 98.37654114]
[63.02949905 88.35784149]
[49.86431503 81.16911316]
[36.69913101 73.98037720]
[23.53394508 66.79164124]
[10.36876106 59.60290527]
[1.23995352 58.21164322]
[-3.02121353 52.08321381]
[-16.01159477 44.58321381]
[-29.00197601 37.08321381]
[-41.99235535 29.58321381]
[-54.07145309 38.76858902]
[-68.70756531 42.61920166]
[-83.66246033 40.57840347]
[-96.66145325 32.98802948]
[-105.73940277 21.03162384]
[-109.53778076 6.54999018]
[-107.50789642 -8.24219799]
[-120.49827576 -15.74219799]
[-135.58711243 -11.87380028]
[-148.65437317 -19.66491890]
[-152.24931335 -34.07366562]
[-165.23968506 -41.57366562]
[-178.23007202 -49.07366562]
[-196.23715210 -43.43762207]
[-212.41955566 -52.50947189]
[-216.85256958 -70.19750214]
[-230.18508911 -77.07089996]
[-243.51762390 -83.94429779]
[-256.85015869 -90.81769562]
[-270.18267822 -97.69109344]
[-283.51522827 -104.56449127]
[-295.36935425 -95.00418091]
[-310.08883667 -91.09819031]
[-325.12341309 -93.52324677]
[-337.86828613 -101.85919952]
[-346.11532593 -114.66179657]
[-348.43563843 -129.71290588]
[-344.42727661 -144.40484619]
[-334.78466797 -156.19212341]
[-321.17846680 -163.03254700]
[-305.96603394 -163.74095154]
[-291.78302002 -158.19461060]
[-281.08670044 -147.35446167]
[-275.73028564 -133.09863281]
[-276.64181519 -117.89701843]
[-263.30929565 -111.02362061]
[-249.97676086 -104.15022278]
[-236.64422607 -97.27682495]
[-223.31169128 -90.40342712]
[-209.97917175 -83.53002930]
[-200.01734924 -89.32038116]
[-188.37651062 -89.54049683]
[-177.99011230 -84.01779175]
[-171.53236389 -74.04159546]
[-170.73007202 -62.06404877]
[-157.73968506 -54.56404877]
[-144.74931335 -47.06404877]
[-130.47349548 -51.15511322]
[-117.19256592 -43.73410034]
[-112.99827576 -28.73257828]
[-100.00789642 -21.23257828]
[-88.21242523 -30.38661003]
[-73.77177429 -34.33793640]
[-58.87825012 -32.45439911]
[-45.80529404 -24.99212837]
[-36.56046295 -13.06121159]
[-32.57714081 1.53934109]
[-34.49235535 16.59283447]
[-21.50197601 24.09283447]
[-8.51159477 31.59283447]
[4.47878647 39.09283447]
[17.55749512 46.43772125]
[30.72268105 53.62645721]
[43.88786697 60.81518936]
[57.05305099 68.00392914]
[70.21823120 75.19265747]
[86.54898071 63.64855194]
[106.46067810 61.78197861]
[124.65240479 70.08985901]
[136.28112793 86.36046600]
[138.25103760 106.26220703]
[152.30529785 111.50416565]
[166.35954285 116.74613190]
[180.53454590 121.65214539]
[194.82229614 126.21944427]
[209.11004639 130.78674316]
[223.39779663 135.35403442]
[237.68554688 139.92134094]
[251.60728455 132.93397522]
[266.03201294 137.76940918]
[272.60760498 151.08470154]
[288.10839844 147.91676331]
[297.87542725 159.16195679]
[312.16317749 163.72924805]
[326.45092773 168.29655457]
[341.95175171 165.12861633]
[351.71878052 176.37379456]
[366.00653076 180.94110107]
[381.90716553 176.92839050]
[393.13693237 188.87930298]
[388.14361572 204.49975586]
[372.06390381 207.72077942]
[361.43923950 195.22885132]
[347.15148926 190.66154480]
[332.67263794 194.15617371]
[321.88363647 182.58430481]
[307.59588623 178.01699829]
[293.30813599 173.44970703]
[278.82931519 176.94433594]
[268.04031372 165.37245178]
[254.96037292 172.40457153]
[240.40548706 167.97621155]
[233.11825562 154.20909119]
[218.83050537 149.64178467]
[204.54275513 145.07449341]
[190.25500488 140.50720215]
[175.96725464 135.93989563]
[171.30894470 137.34237671]
[165.72155762 135.76327515]
[161.11756897 130.80036926]
[147.06332397 125.55841064]
[133.00907898 120.31645203]
[126.58722687 128.20420837]
[118.33449554 134.14973450]
[108.81919098 137.74360657]
[98.69657135 138.73834229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 81]
[7 80]
[8 79]
[9 78]
[10 77]
[12 76]
[13 75]
[14 74]
[15 73]
[22 66]
[23 65]
[26 62]
[27 61]
[28 60]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[86 127]
[87 126]
[88 125]
[89 122]
[90 121]
[91 120]
[92 119]
[93 118]
[96 115]
[98 113]
[99 112]
[100 111]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
