%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCGUCGGCGGGAGCGGCGCAGCGCGGGCCGGGCCGGGACGGGGACUGUCGGCUGCAGGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[82.70679474 116.37052917]
[78.77066040 101.18396759]
[64.46196747 96.68269348]
[50.15328217 92.18142700]
[35.84459305 87.68016052]
[26.35829163 88.06837463]
[20.97962379 82.61798096]
[6.89764690 77.45098114]
[-7.18433046 72.28397369]
[-21.26630783 67.11697388]
[-35.34828568 61.94997025]
[-45.31802750 69.15834808]
[-57.42709732 70.47631073]
[-68.49005127 65.67865753]
[-75.65661621 56.13316345]
[-77.14583588 44.41318130]
[-90.68209076 37.95022583]
[-104.21834564 31.48726845]
[-119.03273773 36.99265289]
[-133.36599731 30.33432579]
[-138.71444702 15.46255302]
[-131.90495300 1.20049441]
[-116.97746277 -3.99042416]
[-102.78819275 2.96947742]
[-97.75538635 17.95101357]
[-84.21913147 24.41396904]
[-70.68287659 30.87692451]
[-54.15832901 23.63433266]
[-37.16440964 30.56221962]
[-30.18128204 47.86799240]
[-16.09930420 53.03499603]
[-2.01732779 58.20199966]
[12.06464958 63.36900330]
[26.14662743 68.53600311]
[40.34586334 73.37146759]
[54.65454865 77.87274170]
[68.96324158 82.37400818]
[83.27192688 86.87527466]
[101.94414520 74.98741913]
[125.23239899 85.88159943]
[139.05670166 80.06022644]
[152.88101196 74.23884583]
[166.70532227 68.41746521]
[180.52963257 62.59609222]
[192.78077698 50.87662125]
[207.43370056 59.40470505]
[203.29522705 75.84579468]
[186.35101318 76.42040253]
[172.52670288 82.24177551]
[158.70239258 88.06315613]
[144.87808228 93.88453674]
[131.05377197 99.70590973]
[127.56919098 114.29555511]
[137.27073669 125.73583221]
[146.97229004 137.17611694]
[156.67384338 148.61639404]
[166.37538147 160.05667114]
[181.98855591 165.07272339]
[185.18617249 181.15710449]
[172.67878723 191.76358032]
[157.33293152 185.98110962]
[154.93510437 169.75820923]
[145.23356628 158.31793213]
[135.53201294 146.87765503]
[125.83046722 135.43737793]
[116.12891388 123.99710846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 38]
[3 37]
[4 36]
[5 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[16 27]
[17 26]
[18 25]
[40 52]
[41 51]
[42 50]
[43 49]
[44 48]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
