%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUCAACAAGAGCUCCAGCAAAGACUUUCACUGUAGCUUGACUUGACCUGAGAUUAACUAGGGAAUCUUGAGAAUAAAG\
) } def
/len { sequence length } bind def

/coor [
[56.54529953 145.42695618]
[56.19868088 130.43095398]
[62.17453766 116.67272186]
[73.37050629 106.69021606]
[87.71821594 102.32516479]
[74.27572632 95.66936493]
[60.83324814 89.01357269]
[47.39076233 82.35777283]
[33.68579483 89.39197540]
[18.64258385 87.03501892]
[7.99766064 76.39784241]
[5.68520069 61.70803070]
[-7.75728273 55.05223465]
[-21.19976616 48.39643860]
[-34.64225006 41.74063873]
[-48.08473206 35.08484268]
[-63.88516617 35.89533234]
[-71.85771179 23.31408882]
[-85.30020142 16.65829086]
[-98.74268341 10.00249386]
[-110.74757385 19.42827415]
[-125.65514374 22.70349693]
[-140.50547791 19.17786407]
[-152.35005188 9.55138969]
[-158.83709717 -4.26457930]
[-158.67860413 -19.52687454]
[-151.90606689 -33.20515442]
[-139.86415100 -42.58358765]
[-124.94379425 -45.80007935]
[-110.10745239 -42.21599197]
[-98.30088806 -32.54294968]
[-91.86829376 -18.70154190]
[-92.08688354 -3.43998957]
[-78.64440155 3.21580815]
[-65.20191956 9.87160587]
[-50.36297989 8.58504677]
[-41.42893600 21.64235878]
[-27.98645210 28.29815674]
[-14.54396820 34.95395279]
[-1.10148513 41.60975266]
[12.34099770 48.26554871]
[25.42557144 41.19929504]
[40.33846664 43.21659851]
[51.33251190 53.75151062]
[54.04656219 68.91529083]
[67.48904419 75.57108307]
[80.93152618 82.22688293]
[94.37400818 88.88268280]
[102.99941254 87.96041107]
[110.09867859 92.88158417]
[125.08766937 93.45612335]
[140.08491516 93.74344635]
[155.08491516 93.74344635]
[170.08491516 93.74344635]
[185.08491516 93.74344635]
[200.08491516 93.74344635]
[215.08491516 93.74344635]
[224.09634399 81.11119080]
[238.82243347 76.22019196]
[253.60070801 80.95114899]
[262.74862671 93.48490906]
[262.74862671 109.00198364]
[253.60070801 121.53574371]
[238.82243347 126.26670074]
[224.09634399 121.37570953]
[215.08491516 108.74344635]
[200.08491516 108.74344635]
[185.08491516 108.74344635]
[170.08491516 108.74344635]
[155.08491516 108.74344635]
[140.08491516 108.74344635]
[133.22242737 111.97491455]
[124.51313019 108.44511414]
[109.52413940 107.87057495]
[120.04512787 118.56210327]
[125.11084747 132.68083191]
[123.78681946 147.62228394]
[116.31729126 160.63020325]
[104.08016205 169.30503845]
[89.33280945 172.04652405]
[74.79569244 168.34893799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 48]
[6 47]
[7 46]
[8 45]
[12 41]
[13 40]
[14 39]
[15 38]
[16 37]
[18 35]
[19 34]
[20 33]
[50 74]
[51 73]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
