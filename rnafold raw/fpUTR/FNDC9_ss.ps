%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGAUGCUGAUCUGAAGAAAUGAAUAAUGUGAGCAUUAGGGGCGGCAGUGGGAUUACUCAGUGUUGAGAGAAACAACACGGAAAGCCCAGAGCAGAGGAGGGAGAAGGCCCCAUUCUCUCAGCUUUAAUCUACUGCACCUCGGAGGGCAGAGCUCUAACCAGACACGCUGCAAGCAUCAGAAUCGGG\
) } def
/len { sequence length } bind def

/coor [
[108.43964386 277.26016235]
[97.24975586 287.88043213]
[82.09021759 290.74258423]
[67.79838562 284.93338013]
[58.93473053 272.30645752]
[58.32761383 256.89102173]
[66.17076111 243.60614014]
[79.96144867 236.69090271]
[81.45497131 221.76544189]
[82.94848633 206.83998108]
[84.44200134 191.91452026]
[85.93552399 176.98905945]
[87.30493927 162.05169678]
[88.55017090 147.10346985]
[89.79540253 132.15525818]
[91.04062653 117.20703125]
[84.77446747 113.08570862]
[76.53183746 125.61802673]
[68.28919983 138.15034485]
[64.32266235 152.61639404]
[49.33890533 153.31422424]
[44.04501724 139.27946472]
[55.75688171 129.90771484]
[63.99951935 117.37539673]
[72.24214935 104.84307861]
[65.97599792 100.72175598]
[52.74350357 107.78583527]
[39.51101303 114.84991455]
[26.27852440 121.91399384]
[13.04603386 128.97807312]
[4.84299946 143.17814636]
[-11.55384922 142.90357971]
[-19.27684021 128.43681335]
[-10.38122272 114.66001129]
[5.98195505 115.74558258]
[19.21444511 108.68150330]
[32.44693375 101.61742401]
[45.67942429 94.55334473]
[58.91191483 87.48926544]
[65.86577606 74.19852448]
[64.12438202 59.29994965]
[62.38298798 44.40137482]
[60.64159393 29.50279999]
[51.01912689 20.89522362]
[49.88463593 8.43730164]
[57.30339813 -1.13221824]
[55.80987930 -16.05768013]
[54.31636047 -30.98314095]
[52.82284546 -45.90860367]
[51.32932663 -60.83406448]
[49.83580780 -75.75952911]
[48.34229279 -90.68498993]
[39.28718948 -91.24697113]
[30.33123207 -93.81697083]
[21.92457962 -98.37410736]
[14.51186180 -104.79577637]
[8.50911045 -112.85941315]
[4.28120995 -122.24933624]
[2.12109661 -132.56884766]
[2.23181581 -143.35682678]
[4.71248293 -154.10835266]
[9.54899788 -164.29830933]
[-1.01343584 -174.94888306]
[-11.57586956 -185.59947205]
[-22.13830376 -196.25006104]
[-32.70073700 -206.90065002]
[-43.26317215 -217.55123901]
[-58.83071518 -216.07286072]
[-71.67702484 -224.98950195]
[-75.73645782 -240.09098816]
[-69.09228516 -254.24687195]
[-54.88167191 -260.77316284]
[-39.81444168 -256.58834839]
[-31.00487709 -243.66839600]
[-32.61258698 -228.11366272]
[-22.05015182 -217.46308899]
[-11.48771763 -206.81250000]
[-0.92528373 -196.16191101]
[9.63715076 -185.51132202]
[20.19958496 -174.86073303]
[32.99894714 -182.68226624]
[28.33998680 -196.94038391]
[14.74166012 -205.45303345]
[13.06192207 -221.40791321]
[24.58932304 -232.56579590]
[40.48102951 -230.36732483]
[48.54627991 -216.49897766]
[42.59811020 -201.59934998]
[47.25707245 -187.34123230]
[62.21512604 -186.22027588]
[68.94711304 -199.62477112]
[75.67910004 -213.02925110]
[82.41109467 -226.43374634]
[89.14308167 -239.83824158]
[95.65133667 -253.35276794]
[101.93405914 -266.97360229]
[108.21678925 -280.59445190]
[114.49951172 -294.21530151]
[120.78224182 -307.83615112]
[127.06496429 -321.45697021]
[133.23426819 -335.12957764]
[139.28973389 -348.85296631]
[145.34519958 -362.57635498]
[138.28155518 -376.52764893]
[141.88853455 -391.74356079]
[154.46302795 -401.03958130]
[170.06776428 -400.02639771]
[181.33464050 -389.18243408]
[182.94378662 -373.62786865]
[174.13542175 -360.70709229]
[159.06858826 -356.52087402]
[153.01312256 -342.79748535]
[146.95765686 -329.07409668]
[147.13414001 -321.67129517]
[140.68580627 -315.17425537]
[134.40307617 -301.55340576]
[128.12036133 -287.93255615]
[121.83763123 -274.31173706]
[115.55490112 -260.69088745]
[109.27217865 -247.07003784]
[110.06193542 -242.34245300]
[107.87694550 -237.07041931]
[102.54756927 -233.10624695]
[95.81558228 -219.70175171]
[89.08359528 -206.29727173]
[82.35160828 -192.89277649]
[75.61961365 -179.48828125]
[95.65011597 -156.39805603]
[98.84348297 -127.70233917]
[85.96689606 -103.76719666]
[63.26775360 -92.17850494]
[64.76126862 -77.25304413]
[66.25479126 -62.32758331]
[67.74830627 -47.40212250]
[69.24182129 -32.47665787]
[70.73534393 -17.55119705]
[72.22885895 -2.62573600]
[83.22779083 11.03837109]
[75.54016876 27.76140594]
[77.28156281 42.65998077]
[79.02295685 57.55855560]
[80.76435089 72.45713043]
[171.50695801 65.66573334]
[185.64450073 70.67871094]
[199.86340332 75.45601654]
[214.15975952 79.99631500]
[228.45610046 84.53661346]
[242.75245667 89.07691956]
[257.04879761 93.61721802]
[273.97506714 92.64881134]
[279.59130859 108.64550781]
[265.77447510 118.47057343]
[252.50851440 107.91356659]
[238.21215820 103.37326813]
[223.91580200 98.83296967]
[209.61946106 94.29266357]
[195.32310486 89.75236511]
[190.73040771 91.12384033]
[185.22760010 89.61135101]
[180.63151550 84.81625366]
[166.49397278 79.80327606]
[161.81779480 85.66701508]
[173.54527283 95.01935577]
[185.27259827 104.37190247]
[175.91986084 116.09906006]
[164.19293213 106.74683380]
[152.46545410 97.39448547]
[147.78927612 103.25821686]
[155.82247925 115.92581177]
[163.85566711 128.59339905]
[177.44441223 138.73155212]
[171.46421814 154.59576416]
[154.56448364 153.24092102]
[151.18807983 136.62658691]
[143.15487671 123.95899963]
[135.12168884 111.29141235]
[120.55462646 114.87200165]
[105.98885345 118.45225525]
[104.74362183 133.40048218]
[103.49839783 148.34870911]
[102.25316620 163.29693604]
[104.66254425 172.12796021]
[100.86098480 178.48257446]
[99.36746216 193.40803528]
[97.87394714 208.33349609]
[96.38043213 223.25895691]
[94.88690948 238.18441772]
[107.03394318 247.69511414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 187]
[9 186]
[10 185]
[11 184]
[12 183]
[13 181]
[14 180]
[15 179]
[16 178]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[40 142]
[41 141]
[42 140]
[43 139]
[46 137]
[47 136]
[48 135]
[49 134]
[50 133]
[51 132]
[52 131]
[62 80]
[63 79]
[64 78]
[65 77]
[66 76]
[67 75]
[81 89]
[82 88]
[90 127]
[91 126]
[92 125]
[93 124]
[94 123]
[95 120]
[96 119]
[97 118]
[98 117]
[99 116]
[100 115]
[101 113]
[102 112]
[103 111]
[143 161]
[144 160]
[145 157]
[146 156]
[147 155]
[148 154]
[149 153]
[168 176]
[169 175]
[170 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
