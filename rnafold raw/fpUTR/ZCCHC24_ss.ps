%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAGUCGGGGGGAGGCGGCGGCAGCGGCAGCGGCUGCGGGCAGCGCGCGGGGCGCAGGGCGCGGGGCGAUCACCGUCGGGGCUCGGGAGGCGGGCAGUGGGCACAGGCUCCCCGGUGCCCGCCCCUCCGCUGCGGAGGGGGGCCGCGAGCGGGCGGCCGGGGAGGGGCCGGCACCGCCGCCACAAA\
) } def
/len { sequence length } bind def

/coor [
[-31.27941132 485.52795410]
[-39.10842514 486.73516846]
[-45.19420624 500.44515991]
[-43.72131348 516.19763184]
[-55.95688248 524.69116211]
[-62.04266357 538.40112305]
[-68.12844086 552.11114502]
[-74.21422577 565.82110596]
[-66.32446289 579.18267822]
[-67.82875824 594.62664795]
[-78.14866638 606.21453857]
[-93.31597900 609.49053955]
[-107.49855804 603.19494629]
[-115.24290466 589.74859619]
[-113.57116699 574.32183838]
[-103.12615204 562.84655762]
[-87.92419434 559.73529053]
[-81.83841705 546.02532959]
[-75.75263214 532.31536865]
[-69.66685486 518.60540771]
[-71.57504272 503.83352661]
[-58.90417480 494.35937500]
[-52.81839371 480.64941406]
[-57.25494766 459.47238159]
[-39.03689957 446.44140625]
[-41.92747498 431.82998657]
[-29.91771126 421.53067017]
[-24.76124573 407.44482422]
[-19.60478210 393.35897827]
[-22.49535751 378.74755859]
[-10.48559284 368.44821167]
[-5.32912827 354.36239624]
[-0.17266376 340.27655029]
[4.98380089 326.19070435]
[4.32948160 318.81399536]
[10.34590626 311.91378784]
[15.73702240 297.91607666]
[21.12813950 283.91836548]
[18.48212051 269.26068115]
[30.66230965 259.16348267]
[36.05342484 245.16575623]
[41.44454193 231.16806030]
[35.18561554 217.70100403]
[40.45357132 203.42854309]
[54.62148666 196.95491028]
[51.97546768 182.29722595]
[64.15565491 172.20001221]
[61.50963974 157.54232788]
[73.68982697 147.44511414]
[71.04380798 132.78742981]
[83.22399902 122.69021606]
[88.61511230 108.69251251]
[86.63317108 94.85186005]
[97.38717651 85.91637421]
[102.77829742 71.91866302]
[108.16941071 57.92095566]
[101.31990051 46.30975723]
[102.39907837 33.06743622]
[110.78875732 23.01751900]
[123.24912262 19.69086838]
[128.87338257 5.78519821]
[126.87494659 -9.90928555]
[138.81987000 -18.80692863]
[144.44413757 -32.71259689]
[142.44569397 -48.40708160]
[154.39062500 -57.30472565]
[160.01489258 -71.21039581]
[165.63914490 -85.11606598]
[161.32974243 -97.28683472]
[166.31553650 -108.76046753]
[177.41828918 -113.59342194]
[183.27412415 -127.40317535]
[183.74635315 -136.54579163]
[189.34492493 -141.39344788]
[195.43069458 -155.10342407]
[193.95780945 -170.85592651]
[206.19337463 -179.34945679]
[212.27915955 -193.05941772]
[218.36494446 -206.76939392]
[216.89204407 -222.52189636]
[229.12760925 -231.01542664]
[235.21339417 -244.72540283]
[241.29917908 -258.43536377]
[235.85848999 -273.03115845]
[242.22564697 -286.84829712]
[256.17401123 -291.94522095]
[262.25979614 -305.65518188]
[268.34558105 -319.36517334]
[268.97052002 -328.49859619]
[274.64929199 -333.25204468]
[280.96331787 -346.85839844]
[287.27734375 -360.46478271]
[293.59136963 -374.07113647]
[299.90539551 -387.67749023]
[306.21939087 -401.28387451]
[312.53341675 -414.89022827]
[318.84744263 -428.49658203]
[317.63800049 -444.27151489]
[330.01376343 -452.55938721]
[336.32778931 -466.16577148]
[342.64181519 -479.77212524]
[348.95584106 -493.37847900]
[340.60754395 -506.35189819]
[340.62130737 -521.77923584]
[348.99273682 -534.73773193]
[363.05056763 -541.09234619]
[378.30895996 -538.81536865]
[389.89904785 -528.63336182]
[394.12246704 -513.79534912]
[389.63153076 -499.03610229]
[377.85928345 -489.06524658]
[362.56219482 -487.06445312]
[356.24816895 -473.45809937]
[349.93414307 -459.85174561]
[343.62014771 -446.24536133]
[345.28121948 -431.44369507]
[332.45382690 -422.18255615]
[326.13980103 -408.57620239]
[319.82577515 -394.96984863]
[313.51174927 -381.36346436]
[307.19772339 -367.75711060]
[300.88369751 -354.15075684]
[294.56967163 -340.54437256]
[288.25567627 -326.93801880]
[282.05554199 -313.27938843]
[275.96975708 -299.56939697]
[269.88397217 -285.85943604]
[275.46020508 -272.09567261]
[269.48367310 -258.10510254]
[255.00914001 -252.34957886]
[248.92337036 -238.63961792]
[242.83758545 -224.92964172]
[244.74577332 -210.15777588]
[232.07490540 -200.68360901]
[225.98912048 -186.97364807]
[219.90335083 -173.26367188]
[221.81153870 -158.49180603]
[209.14067078 -149.01763916]
[203.05488586 -135.30767822]
[197.08387756 -121.54733276]
[191.22802734 -107.73758698]
[194.31636047 -90.47108459]
[179.54481506 -79.49179840]
[173.92056274 -65.58612823]
[168.29629517 -51.68046188]
[170.69700623 -36.98060226]
[158.34980774 -27.08833504]
[152.72554016 -13.18266487]
[155.12626648 1.51719236]
[142.77905273 11.40946102]
[137.15478516 25.31513214]
[144.37738037 40.49312592]
[138.27676392 56.51749420]
[122.16712189 63.31207275]
[116.77600098 77.30978394]
[111.38488770 91.30748749]
[113.36682892 105.14813995]
[102.61282349 114.08362579]
[97.22170258 128.08132935]
[99.48211670 143.74023438]
[87.68753815 152.83622742]
[89.94794464 168.49513245]
[78.15336609 177.59112549]
[80.41377258 193.25003052]
[68.61919403 202.34602356]
[74.78445435 216.65083313]
[69.11769104 230.76969910]
[55.44224930 236.55917358]
[50.05113602 250.55688477]
[44.66001892 264.55459595]
[46.92042542 280.21350098]
[35.12584686 289.30947876]
[29.73473167 303.30718994]
[24.34361458 317.30490112]
[19.06964111 331.34716797]
[13.91317558 345.43301392]
[8.75671101 359.51885986]
[3.60024643 373.60467529]
[6.12199736 389.22363281]
[-5.51894236 398.51544189]
[-10.67540741 412.60128784]
[-15.83187199 426.68713379]
[-13.31012058 442.30606079]
[-24.95105934 451.59786987]
[-20.06806946 458.42297363]
[-18.31177139 466.53286743]
[-19.89727211 474.58200073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[5 20]
[6 19]
[7 18]
[8 17]
[25 184]
[27 182]
[28 181]
[29 180]
[31 178]
[32 177]
[33 176]
[34 175]
[36 174]
[37 173]
[38 172]
[40 170]
[41 169]
[42 168]
[45 165]
[47 163]
[49 161]
[51 159]
[52 158]
[54 156]
[55 155]
[56 154]
[60 151]
[61 150]
[63 148]
[64 147]
[66 145]
[67 144]
[68 143]
[71 141]
[72 140]
[74 139]
[75 138]
[77 136]
[78 135]
[79 134]
[81 132]
[82 131]
[83 130]
[86 127]
[87 126]
[88 125]
[90 124]
[91 123]
[92 122]
[93 121]
[94 120]
[95 119]
[96 118]
[97 117]
[99 115]
[100 114]
[101 113]
[102 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
