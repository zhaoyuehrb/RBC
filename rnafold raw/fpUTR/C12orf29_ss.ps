%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCGCUGGGCUUGGUAGUUGGGGCGCAGCCGCGGUGGCUGGGCGCGGAGUGUGCGUGGCCUGAGCCGUGCGGGUGACUGCUUCAGGGCUUCUCCGCGACUGGACCGGGCGCCGCUCGAAAGCACGCCCUCCAUUCGCACUGCUUGUUGGGCUCAUC\
) } def
/len { sequence length } bind def

/coor [
[88.44638824 378.50152588]
[77.00158691 368.33908081]
[71.60129547 354.01794434]
[73.48645782 338.82894897]
[82.22387695 326.26248169]
[95.80575562 319.20620728]
[95.80575562 304.20620728]
[95.80575562 289.20620728]
[88.06845093 276.47894287]
[95.80575562 262.67877197]
[95.80575562 247.67875671]
[95.80575562 232.67875671]
[87.46065521 223.87574768]
[87.36943054 211.34469604]
[96.12863159 201.82958984]
[96.42498779 186.83251953]
[96.72134399 171.83544922]
[97.01770020 156.83837891]
[97.31405640 141.84130859]
[97.61041260 126.84423828]
[78.65303802 98.87885284]
[65.81336975 91.12366486]
[52.97370148 83.36847687]
[40.13403320 75.61328888]
[27.29436684 67.85809326]
[14.45470047 60.10290909]
[1.53904653 52.47494125]
[-11.52479362 45.10363770]
[-24.66081810 37.86175537]
[-40.48162079 37.97496414]
[-47.89182663 25.05451393]
[-61.02785110 17.81262970]
[-74.16387939 10.57074738]
[-87.29989624 3.32886410]
[-100.43592072 -3.91301894]
[-113.05583954 -1.08487833]
[-123.86244202 -7.42941046]
[-127.31352234 -19.05798340]
[-140.30390930 -26.55798340]
[-153.29428101 -34.05798340]
[-166.28466797 -41.55798340]
[-179.42068481 -48.79986572]
[-192.69723511 -55.78080750]
[-208.51271057 -55.35504532]
[-216.17674255 -68.12657166]
[-229.45327759 -75.10750580]
[-242.72981262 -82.08844757]
[-256.00634766 -89.06938934]
[-270.40859985 -82.97761536]
[-285.34179688 -87.61801910]
[-293.75497437 -100.79954529]
[-291.67565918 -116.29827118]
[-280.08569336 -126.79618073]
[-264.45742798 -127.33647156]
[-252.17012024 -117.66404724]
[-249.02542114 -102.34592438]
[-235.74888611 -95.36499023]
[-222.47233582 -88.38404846]
[-209.19580078 -81.40310669]
[-194.32995605 -82.32819366]
[-185.71629333 -69.05734253]
[-172.43975830 -62.07640457]
[-167.64749146 -62.63200760]
[-162.46261597 -60.14575195]
[-158.78466797 -54.54836655]
[-145.79428101 -47.04836655]
[-132.80390930 -39.54836655]
[-119.81352234 -32.04836655]
[-102.31404877 -33.01778793]
[-93.19403839 -17.04904366]
[-80.05801392 -9.80716038]
[-66.92198944 -2.56527710]
[-53.78596878 4.67660618]
[-40.64994431 11.91848946]
[-25.76871872 11.28729248]
[-17.41893387 24.72573280]
[-4.28291082 31.96761513]
[3.13252330 32.44544220]
[9.03904629 39.48455811]
[16.44359207 40.10879898]
[22.20989037 47.26324081]
[35.04955673 55.01842880]
[47.88922501 62.77362061]
[60.72888947 70.52880859]
[73.56855774 78.28399658]
[86.40822601 86.03918457]
[100.83798981 81.94262695]
[107.68743134 68.59777069]
[102.61022186 53.63122559]
[109.67786407 39.49531174]
[124.69725037 34.57662201]
[138.75764465 41.79332352]
[143.51727295 56.86387253]
[136.15231323 70.84718323]
[121.03228760 75.44721222]
[114.18284607 88.79206848]
[122.31510925 101.39627838]
[137.29681396 100.65563965]
[152.27851868 99.91500092]
[167.26022339 99.17436218]
[180.66152954 90.76509857]
[193.75531006 97.86454010]
[208.73701477 97.12390137]
[223.71871948 96.38326263]
[238.70042419 95.64261627]
[244.52847290 92.34232330]
[250.27653503 92.49797821]
[254.28628540 95.18055725]
[269.28555298 95.03237152]
[284.28482056 94.88418579]
[299.28408813 94.73600006]
[314.28335571 94.58781433]
[323.88452148 85.92303467]
[336.41406250 86.13805389]
[345.13421631 94.56970978]
[360.13348389 94.71789551]
[375.13275146 94.86608124]
[389.14144897 86.34035492]
[403.39752197 94.44571686]
[403.23550415 110.84407043]
[388.82208252 118.66618347]
[374.98455811 109.86534882]
[359.98529053 109.71716309]
[344.98602295 109.56897736]
[330.22174072 119.01287079]
[314.43154907 109.58708191]
[299.43228149 109.73526764]
[284.43301392 109.88345337]
[269.43374634 110.03163910]
[254.43447876 110.17982483]
[239.44107056 110.62432098]
[224.45936584 111.36495972]
[209.47766113 112.10560608]
[194.49595642 112.84624481]
[182.16624451 121.20252991]
[168.00086975 114.15606689]
[153.01916504 114.89670563]
[138.03746033 115.63734436]
[123.05575562 116.37798309]
[112.60749054 127.14059448]
[112.31112671 142.13766479]
[112.01477051 157.13473511]
[111.71841431 172.13180542]
[111.42205811 187.12887573]
[111.12570190 202.12596130]
[120.39503479 218.00848389]
[110.80575562 232.67875671]
[110.80575562 247.67875671]
[110.80575562 262.67877197]
[118.54305267 276.47894287]
[110.80575562 289.20620728]
[110.80575562 304.20620728]
[110.80575562 319.20620728]
[124.38763428 326.26248169]
[133.12504578 338.82894897]
[135.01020813 354.01794434]
[129.60992432 368.33908081]
[118.16512299 378.50152588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 153]
[7 152]
[8 151]
[10 149]
[11 148]
[12 147]
[15 145]
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 86]
[22 85]
[23 84]
[24 83]
[25 82]
[26 81]
[27 79]
[28 77]
[29 76]
[31 74]
[32 73]
[33 72]
[34 71]
[35 70]
[38 68]
[39 67]
[40 66]
[41 65]
[42 62]
[43 61]
[45 59]
[46 58]
[47 57]
[48 56]
[87 96]
[88 95]
[97 139]
[98 138]
[99 137]
[100 136]
[102 134]
[103 133]
[104 132]
[105 131]
[108 130]
[109 129]
[110 128]
[111 127]
[112 126]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
