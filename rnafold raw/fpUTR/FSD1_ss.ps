%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGCAAUGCGCGCGGUGAUGGAGCGCUAACCGGGGGCGCGGCGGCGGCGAGGGCUCGGCGGGCCAUUGGCUACCGGCCGCGGCAAAGGCAGCUUGGGGACCCAGCGUGCGCGGGGCCCGCGGGCCGGGCCGGGGUGACCUGGGCUGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[88.42755127 98.34867859]
[77.92968750 87.63444519]
[67.43181610 76.92021179]
[56.93395615 66.20597839]
[46.43608856 55.49174118]
[35.93822479 44.77750397]
[30.79161263 43.35057449]
[27.10859871 40.36425400]
[25.24114037 36.65393066]
[25.15106964 33.07214737]
[15.32815933 21.73590469]
[5.50524807 10.39966106]
[-4.31766272 -0.93658286]
[-19.84186363 -2.21602225]
[-29.64220238 -13.85251617]
[-28.32678223 -28.64458466]
[-38.14969254 -39.98082733]
[-47.97260284 -51.31707001]
[-63.49680328 -52.59651184]
[-73.29714203 -64.23300171]
[-71.98171997 -79.02507019]
[-86.86637878 -84.38769531]
[-89.35350800 -99.07317352]
[-99.17641449 -110.40942383]
[-108.99932861 -121.74566650]
[-118.82223511 -133.08190918]
[-129.42164612 -131.15136719]
[-139.77943420 -133.80648804]
[-148.01710510 -140.49578857]
[-152.66996765 -149.94259644]
[-152.94735718 -160.38832092]
[-148.86627197 -169.91967773]
[-157.97744751 -181.83547974]
[-173.38023376 -181.58984375]
[-185.82872009 -190.35845947]
[-190.66967773 -204.60729980]
[-186.24505615 -218.80450439]
[-200.77384949 -225.06745911]
[-202.35813904 -239.87756348]
[-211.46931458 -251.79336548]
[-220.58049011 -263.70916748]
[-229.69166565 -275.62496948]
[-238.80284119 -287.54077148]
[-247.91401672 -299.45660400]
[-257.14627075 -311.27883911]
[-266.49862671 -323.00631714]
[-281.15213013 -328.97158813]
[-283.03820801 -343.74630737]
[-292.39056396 -355.47378540]
[-301.74288940 -367.20126343]
[-316.39642334 -373.16653442]
[-318.28250122 -387.94125366]
[-327.63482666 -399.66873169]
[-337.10632324 -411.30020142]
[-346.69595337 -422.83444214]
[-356.28555298 -434.36871338]
[-365.87518311 -445.90295410]
[-375.46481323 -457.43722534]
[-390.24023438 -465.75125122]
[-386.34136963 -482.25079346]
[-369.40731812 -483.07183838]
[-363.93054199 -467.02685547]
[-354.34094238 -455.49258423]
[-344.75131226 -443.95831299]
[-335.16168213 -432.42407227]
[-325.57205200 -420.88980103]
[-318.83691406 -417.73806763]
[-315.90734863 -409.02105713]
[-306.55502319 -397.29357910]
[-292.57043457 -392.16714478]
[-290.01541138 -376.55358887]
[-280.66308594 -364.82614136]
[-271.31072998 -353.09866333]
[-257.32614136 -347.97219849]
[-254.77113342 -332.35867310]
[-245.41879272 -320.63119507]
[-238.74932861 -317.34271240]
[-235.99821472 -308.56777954]
[-226.88703918 -296.65197754]
[-217.77586365 -284.73614502]
[-208.66468811 -272.82034302]
[-199.55351257 -260.90454102]
[-190.44232178 -248.98873901]
[-176.56521606 -243.57807922]
[-174.32923889 -227.91567993]
[-159.46865845 -228.46450806]
[-146.98680115 -220.05815125]
[-141.78749084 -205.74659729]
[-146.06164551 -190.94665527]
[-136.95045471 -179.03085327]
[-117.55072784 -177.94926453]
[-104.93412781 -162.77699280]
[-107.48599243 -142.90481567]
[-97.66308594 -131.56857300]
[-87.84017181 -120.23233032]
[-78.01726532 -108.89608765]
[-63.83520889 -104.34431458]
[-60.64548111 -88.84798431]
[-45.81677246 -88.04488373]
[-35.69345474 -76.68824768]
[-36.63636017 -61.13998032]
[-26.81344986 -49.80373764]
[-16.99053955 -38.46749496]
[-2.16182923 -37.66439438]
[7.96148825 -26.30776405]
[7.01858091 -10.75949383]
[16.84149170 0.57674974]
[26.66440201 11.91299343]
[36.48731232 23.24923706]
[46.65246201 34.27964020]
[57.15032578 44.99387360]
[67.64819336 55.70811081]
[78.14605713 66.42234802]
[88.64392090 77.13658142]
[99.14178467 87.85081482]
[112.15759277 95.30660248]
[126.71038055 98.94203186]
[141.26316833 102.57746124]
[155.81596375 106.21288300]
[171.42439270 101.18207550]
[183.40222168 112.38312531]
[179.42770386 128.29335022]
[163.58946228 132.54566956]
[152.18052673 120.76567078]
[137.62774658 117.13024902]
[123.07495117 113.49481964]
[108.52216339 109.85939789]
[100.41255188 122.47819519]
[109.76490021 134.20567322]
[124.41843414 140.17094421]
[126.30448914 154.94566345]
[135.65682983 166.67312622]
[145.00918579 178.40060425]
[154.36152649 190.12808228]
[163.71388245 201.85554504]
[179.16877747 207.33988953]
[181.88017273 223.51333618]
[169.05880737 233.73803711]
[153.89419556 227.49569702]
[151.98640442 211.20790100]
[142.63406372 199.48042297]
[133.28170776 187.75296021]
[123.92936707 176.02548218]
[114.57701874 164.29800415]
[100.59243011 159.17155457]
[98.03742981 143.55801392]
[88.68508148 131.83055115]
[75.90200043 139.67864990]
[60.92330170 138.87953186]
[49.04780960 129.71588135]
[44.47656250 115.42938995]
[48.82667542 101.07402802]
[60.55926132 91.72809601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 115]
[2 114]
[3 113]
[4 112]
[5 111]
[6 110]
[10 109]
[11 108]
[12 107]
[13 106]
[16 103]
[17 102]
[18 101]
[21 98]
[23 96]
[24 95]
[25 94]
[26 93]
[32 90]
[33 89]
[37 85]
[39 83]
[40 82]
[41 81]
[42 80]
[43 79]
[44 78]
[45 76]
[46 75]
[48 73]
[49 72]
[50 71]
[52 69]
[53 68]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
[116 127]
[117 126]
[118 125]
[119 124]
[128 147]
[129 146]
[131 144]
[132 143]
[133 142]
[134 141]
[135 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
