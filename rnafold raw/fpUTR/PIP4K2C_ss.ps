%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCCCUGUUCGCGCGUCCGCUGUCCGGCCUCCGGUCACGUGACAGCAGCGCAGGUGAGCGCCGCUUCCGGGGUCGGGCGCCUGGAUAGCUGCCGGCUCCGGCUUCCACUUGGUCGGUUGCGCGGGAGACU\
) } def
/len { sequence length } bind def

/coor [
[61.53007507 357.62536621]
[46.95494461 352.56878662]
[37.44534683 340.42089844]
[36.03576279 325.05807495]
[43.17597961 311.38250732]
[56.58758545 303.75805664]
[57.30131531 288.77505493]
[54.44951630 281.87704468]
[58.21451569 273.44522095]
[59.28460312 258.48345947]
[60.35469055 243.52166748]
[61.42477798 228.55987549]
[62.49486542 213.59809875]
[63.56495285 198.63632202]
[64.63504028 183.67453003]
[65.70513153 168.71275330]
[58.89549637 155.46594238]
[67.59757233 142.25289917]
[68.66766357 127.29111481]
[65.30499268 112.67289734]
[57.80499268 99.68251038]
[50.30499268 86.69213104]
[42.80499268 73.70175171]
[35.30499268 60.71136856]
[27.80499458 47.72098923]
[20.30499458 34.73060989]
[12.65094280 21.83039474]
[4.84392595 9.02217484]
[-2.96309090 -3.78604412]
[-16.75237274 -11.54273701]
[-16.76977158 -26.43733215]
[-24.57678795 -39.24555206]
[-32.38380432 -52.05377197]
[-40.19082260 -64.86199188]
[-47.99784088 -77.67021179]
[-55.80485916 -90.47843170]
[-63.61187363 -103.28665161]
[-77.40115356 -111.04334259]
[-77.41855621 -125.93793488]
[-85.22557068 -138.74615479]
[-92.43572235 -144.51542664]
[-93.06178284 -151.95338440]
[-100.56178284 -164.94377136]
[-107.63259125 -170.88299561]
[-108.08147430 -178.33374023]
[-115.27021027 -191.49893188]
[-122.45894623 -204.66410828]
[-135.86352539 -213.06814575]
[-135.17219543 -227.94668579]
[-142.36093140 -241.11187744]
[-149.54966736 -254.27706909]
[-156.73840332 -267.44226074]
[-171.97120667 -271.65377808]
[-179.69163513 -285.44403076]
[-175.31927490 -300.63146973]
[-161.44818115 -308.20565796]
[-146.30783081 -303.67297363]
[-138.88070679 -289.72256470]
[-143.57321167 -274.63098145]
[-136.38447571 -261.46578979]
[-129.19573975 -248.30061340]
[-122.00701141 -235.13542175]
[-109.11661530 -227.67306519]
[-109.29376221 -211.85284424]
[-102.10502625 -198.68766785]
[-94.91629028 -185.52247620]
[-87.57140350 -172.44377136]
[-80.07140350 -159.45338440]
[-72.41735077 -146.55317688]
[-64.61033630 -133.74494934]
[-51.37946320 -126.90438843]
[-50.80365372 -111.09366608]
[-42.99663925 -98.28544617]
[-35.18962097 -85.47722626]
[-27.38260460 -72.66900635]
[-19.57558632 -59.86079025]
[-11.76856995 -47.05257034]
[-3.96155238 -34.24435043]
[9.26931858 -27.40378571]
[9.84512806 -11.59306145]
[17.65214539 1.21515799]
[25.45916176 14.02337742]
[31.68726158 18.13749504]
[33.29537582 27.23060799]
[40.79537582 40.22098923]
[48.29537582 53.21136856]
[55.79537582 66.20175171]
[63.29537582 79.19213104]
[70.79537201 92.18251038]
[78.29537201 105.17289734]
[78.05420685 71.95054626]
[122.45542145 56.54236221]
[137.41720581 55.47227478]
[152.37898254 54.40218735]
[167.34075928 53.33209991]
[180.61103821 43.69715881]
[195.47808838 50.61831665]
[196.64799500 66.97568512]
[182.91723633 75.94219971]
[168.41085815 68.29388428]
[153.44906616 69.36396790]
[138.48728943 70.43405914]
[123.52550507 71.50414276]
[121.93126678 78.83274841]
[118.74279022 93.48995209]
[117.14855194 100.81855011]
[130.31373596 108.00728607]
[146.68643188 107.07630157]
[155.45153809 120.93649292]
[147.59226990 135.32968140]
[131.19355774 135.44938660]
[123.12500000 121.17247009]
[109.95981598 113.98373413]
[103.37722015 117.57810211]
[90.21203613 124.76683807]
[83.62944794 128.36120605]
[82.55935669 143.32298279]
[89.29244995 157.63996887]
[80.66690826 169.78283691]
[79.59682465 184.74462891]
[78.52673340 199.70640564]
[77.45664978 214.66818237]
[76.38655853 229.62997437]
[75.31647491 244.59175110]
[74.24638367 259.55352783]
[73.17630005 274.51531982]
[72.28432465 289.48876953]
[71.57059479 304.47177124]
[84.19672394 313.33657837]
[90.00466919 327.62893677]
[87.14113617 342.78820801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 128]
[7 127]
[9 126]
[10 125]
[11 124]
[12 123]
[13 122]
[14 121]
[15 120]
[16 119]
[18 117]
[19 116]
[20 90]
[21 89]
[22 88]
[23 87]
[24 86]
[25 85]
[26 84]
[27 82]
[28 81]
[29 80]
[31 78]
[32 77]
[33 76]
[34 75]
[35 74]
[36 73]
[37 72]
[39 70]
[40 69]
[42 68]
[43 67]
[45 66]
[46 65]
[47 64]
[49 62]
[50 61]
[51 60]
[52 59]
[92 103]
[93 102]
[94 101]
[95 100]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
