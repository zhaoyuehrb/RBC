%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGCUUUCCGGCCGGAAGCUGCGGCGCGACCCGGCUGCGCAUGCGCCUCUCACACGUGCUGUCAGAACGCCGCCUCCUCCGCUUGCGGCCGGUCUGCACC\
) } def
/len { sequence length } bind def

/coor [
[101.29276276 506.83691406]
[89.04380798 497.31103516]
[84.76573181 482.39532471]
[90.10353851 467.82525635]
[103.00473785 459.20324707]
[103.46218109 444.21023560]
[91.59138489 435.25354004]
[87.21917725 420.85397339]
[92.22282410 406.47283936]
[104.88140869 397.69409180]
[105.33885193 382.70108032]
[105.79628754 367.70803833]
[106.25373077 352.71502686]
[106.71117401 337.72201538]
[107.16861725 322.72897339]
[107.62606049 307.73596191]
[100.28049469 294.77865601]
[108.43504333 281.22085571]
[108.89248657 266.22781372]
[109.34992981 251.23480225]
[109.80737305 236.24177551]
[95.99544525 217.64500427]
[107.26271057 196.62318420]
[104.98400116 181.79728699]
[102.70529175 166.97137451]
[100.42658234 152.14546204]
[98.14786530 137.31956482]
[95.86915588 122.49365997]
[85.46916962 117.66021729]
[78.72312927 108.38590240]
[77.32743073 97.00284576]
[81.63301849 86.37346649]
[90.55721283 79.17063904]
[81.59128571 66.13519287]
[88.13326263 52.75417328]
[86.76264191 37.81692505]
[85.39201355 22.87967491]
[76.42609406 9.84423161]
[82.96806335 -3.53679228]
[81.59744263 -18.47404099]
[80.22681427 -33.41128922]
[78.85618591 -48.34853745]
[69.89026642 -61.38397980]
[76.43224335 -74.76500702]
[75.06161499 -89.70225525]
[66.09569550 -102.73769379]
[72.63767242 -116.11872101]
[61.27360916 -127.44293213]
[63.18499374 -143.37171936]
[76.90557098 -151.68586731]
[91.91009521 -146.00749207]
[96.68836975 -130.69255066]
[87.57492065 -117.48934937]
[96.44280243 -105.52231598]
[89.99886322 -91.07287598]
[91.36949158 -76.13562775]
[100.23737335 -64.16860199]
[93.79343414 -49.71916199]
[95.16406250 -34.78191376]
[96.53469086 -19.84466743]
[97.90531158 -4.90741825]
[106.77320099 7.05961323]
[100.32926178 21.50905037]
[101.69989014 36.44629669]
[103.07051086 51.38354492]
[111.93840027 63.35057831]
[105.49446106 77.80001068]
[119.80056000 88.55595398]
[121.97882843 106.32136536]
[110.69506073 120.21495056]
[112.97377777 135.04084778]
[115.25248718 149.86676025]
[117.53119659 164.69265747]
[119.80990601 179.51856995]
[122.08861542 194.34448242]
[128.94320679 197.01597595]
[134.52958679 201.72204590]
[138.27227783 207.93374634]
[139.80004883 214.96952820]
[138.98254395 222.07002258]
[135.94070435 228.47993469]
[131.03025818 233.52841187]
[124.80039978 236.69921875]
[124.34295654 251.69224548]
[123.88551331 266.68527222]
[123.42807007 281.67828369]
[130.74092102 295.70800781]
[122.61908722 308.19338989]
[122.16164398 323.18643188]
[121.70420074 338.17944336]
[121.24675751 353.17245483]
[120.78931427 368.16549683]
[120.33187103 383.15850830]
[119.87442780 398.15155029]
[131.97427368 407.68566895]
[136.09188843 422.34509277]
[130.84996033 436.45135498]
[118.45520782 444.66769409]
[117.99776459 459.66070557]
[130.34933472 469.05316162]
[134.78895569 483.92156982]
[129.60952759 498.54870605]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 99]
[6 98]
[10 94]
[11 93]
[12 92]
[13 91]
[14 90]
[15 89]
[16 88]
[18 86]
[19 85]
[20 84]
[21 83]
[23 75]
[24 74]
[25 73]
[26 72]
[27 71]
[28 70]
[33 67]
[35 65]
[36 64]
[37 63]
[39 61]
[40 60]
[41 59]
[42 58]
[44 56]
[45 55]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
