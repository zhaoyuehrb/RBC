%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUGUCCUGGAGCUGGACCUGGCUCUGGGUUUCCAGGAAGCAGUUUGACUAAAGGCAGCAAGCUGCUUCCUCUGCUGCCUGAGAUACCAGAUUCCCA\
) } def
/len { sequence length } bind def

/coor [
[82.13466644 171.51112366]
[83.98806000 156.62356567]
[73.38145447 167.23016357]
[62.77485275 177.83676147]
[58.82383347 186.27757263]
[51.66456604 188.60337830]
[40.73003387 198.87159729]
[29.79550552 209.13980103]
[18.86097717 219.40800476]
[19.91448021 235.01005554]
[10.65100384 247.60855103]
[-4.55552292 251.25485229]
[-18.52504349 244.22731018]
[-24.66157722 229.84408569]
[-20.06764030 214.89651489]
[-6.91234875 206.44238281]
[8.59276962 208.47348022]
[19.52729988 198.20526123]
[30.46182823 187.93705750]
[41.39635849 177.66885376]
[52.16825104 167.23016357]
[62.77485275 156.62356567]
[73.38145447 146.01695251]
[74.95251465 138.44546509]
[81.47842407 132.80389404]
[86.11368561 118.53805542]
[90.74893951 104.27220917]
[90.04877472 96.08355713]
[95.76033783 89.63510895]
[100.84140015 75.52190399]
[105.92247009 61.40868759]
[111.00354004 47.29547882]
[100.23604584 34.86106491]
[97.17386627 18.79504395]
[102.55094910 3.44776392]
[114.82888031 -7.07268476]
[130.63554382 -10.00005722]
[135.27079773 -24.26590538]
[139.90605164 -38.53175354]
[144.54130554 -52.79759979]
[149.17655945 -67.06344604]
[153.81181335 -81.32929230]
[158.44706726 -95.59514618]
[163.08233643 -109.86099243]
[167.71759033 -124.12683868]
[172.35284424 -138.39268494]
[176.98809814 -152.65853882]
[181.62335205 -166.92437744]
[186.25860596 -181.19023132]
[185.94694519 -190.50477600]
[191.27000427 -195.82733154]
[196.35107422 -209.94053650]
[189.39599609 -224.13217163]
[194.59199524 -239.05789185]
[208.85636902 -245.86253357]
[223.72631836 -240.50901794]
[230.37977600 -226.17350769]
[224.86933899 -211.36097717]
[210.46427917 -204.85946655]
[205.38320923 -190.74626160]
[200.52444458 -176.55497742]
[195.88919067 -162.28912354]
[191.25393677 -148.02328491]
[186.61868286 -133.75743103]
[181.98342896 -119.49158478]
[177.34817505 -105.22573853]
[172.71292114 -90.95989227]
[168.07766724 -76.69403839]
[163.44241333 -62.42819214]
[158.80715942 -48.16234589]
[154.17190552 -33.89649582]
[149.53665161 -19.63064957]
[144.90139771 -5.36480236]
[154.74533081 4.23964596]
[159.47703552 17.22402000]
[158.10740662 31.04249191]
[150.84965515 42.95900726]
[139.08862305 50.58901215]
[125.11675262 52.37654495]
[120.03568268 66.48976135]
[114.95461273 80.60296631]
[109.87354279 94.71617889]
[105.01478577 108.90746307]
[100.37953186 123.17330933]
[95.74427795 137.43916321]
[108.16547394 129.02999878]
[122.67790985 125.23668671]
[137.62527466 126.49214172]
[151.30163574 132.65307617]
[162.14611816 143.01634216]
[168.92102051 156.39918518]
[170.85314941 171.27423096]
[167.72196960 185.94378662]
[159.88485718 198.73361206]
[148.23625183 208.18400574]
[134.10560608 213.21641541]
[119.10565948 213.25645447]
[104.94834900 208.29959106]
[93.24944305 198.91154480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[6 20]
[7 19]
[8 18]
[9 17]
[25 85]
[26 84]
[27 83]
[29 82]
[30 81]
[31 80]
[32 79]
[37 73]
[38 72]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
