%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUGGCCAGAGCCAGCCCGGGCACACACCACUGUGCUGGGGUGUACAUCUACACUAGACACCUUCCUGCUUCCCUCCUUCCAGAGCAGACCUCUUUGUCACCCCGAGCUCCUUGUUUCUUAAGCAGUC\
) } def
/len { sequence length } bind def

/coor [
[149.41618347 217.88400269]
[142.81547546 204.41438293]
[136.21476746 190.94476318]
[129.61407471 177.47514343]
[123.01336670 164.00552368]
[116.41266632 150.53588867]
[109.81196594 137.06626892]
[90.23628235 137.07901001]
[73.20554352 127.42700195]
[63.15885544 110.62606812]
[48.21166229 111.88362122]
[33.26447296 113.14118195]
[26.41546249 128.13865662]
[13.03124046 137.60543823]
[-3.20477009 139.05140686]
[-17.88184166 132.17816162]
[-27.06017685 118.93457794]
[-41.97291565 120.55020142]
[-56.88565445 122.16581726]
[-71.79839325 123.78144073]
[-84.68491364 132.96011353]
[-98.17151642 126.63865662]
[-113.08425140 128.25427246]
[-127.99699402 129.86988831]
[-142.90972900 131.48551941]
[-157.82246399 133.10113525]
[-172.73521423 134.71675110]
[-182.44531250 147.18629456]
[-198.13879395 149.05456543]
[-210.50497437 139.21316528]
[-212.20721436 123.50080872]
[-202.23562622 111.23937225]
[-186.50614929 109.70333862]
[-174.35083008 119.80401611]
[-159.43809509 118.18839264]
[-144.52534485 116.57277679]
[-129.61260986 114.95715332]
[-114.69987488 113.34153748]
[-99.78713226 111.72591400]
[-87.96726990 102.66280365]
[-73.41400909 108.86869812]
[-58.50127411 107.25308228]
[-43.58853531 105.63745880]
[-28.67579651 104.02184296]
[-23.96918678 91.14500427]
[-14.11148643 81.52133179]
[-0.99958104 77.08284760]
[12.80854702 78.75601196]
[24.59282494 86.26902008]
[32.00691223 98.19399261]
[46.95410538 96.93643188]
[61.90129852 95.67887115]
[64.57176971 85.33631134]
[69.99180603 76.13178253]
[77.74076080 68.77966309]
[87.21724701 63.85052490]
[97.68579102 61.72693253]
[108.33393860 62.57368851]
[118.33529663 66.32508087]
[127.94645691 54.80876160]
[137.55761719 43.29244614]
[147.16877747 31.77612877]
[139.78308105 16.36894417]
[139.82470703 -0.66203105]
[147.23765564 -15.93409538]
[160.50659180 -26.43463898]
[176.96630859 -30.11538887]
[193.33702087 -26.29182243]
[202.38497925 -38.25570297]
[211.43295288 -50.21958160]
[220.48091125 -62.18346024]
[229.52886963 -74.14733887]
[238.57682800 -86.11122131]
[232.00036621 -99.93180847]
[232.61152649 -115.22511292]
[240.26988220 -128.47683716]
[253.21559143 -136.64183044]
[268.47384644 -137.84384155]
[282.53836060 -131.80665588]
[292.17727661 -119.91757965]
[295.17556763 -104.90862274]
[290.84432983 -90.22874451]
[280.17880249 -79.25127411]
[265.62982178 -74.49874115]
[250.54071045 -77.06325531]
[241.49275208 -65.09938049]
[232.44477844 -53.13549805]
[223.39682007 -41.17161942]
[214.34886169 -29.20774078]
[205.30090332 -17.24386215]
[212.20394897 -6.11559343]
[214.89102173 6.73399591]
[213.01647949 19.75944519]
[206.78472900 31.38645554]
[196.92808533 40.20216751]
[184.62084961 45.12683868]
[171.33940125 45.54605103]
[158.68510437 41.38729095]
[149.07394409 52.90360641]
[139.46276855 64.41992188]
[129.85160828 75.93624115]
[136.85739136 89.43044281]
[138.06765747 104.58662415]
[133.29206848 119.02159119]
[123.28158569 130.46557617]
[129.88229370 143.93519592]
[136.48298645 157.40481567]
[143.08369446 170.87443542]
[149.68440247 184.34405518]
[156.28509521 197.81367493]
[162.88580322 211.28330994]
[179.50083923 216.60263062]
[187.02516174 231.96861267]
[181.26954651 247.72305298]
[188.19132996 261.03051758]
[195.11312866 274.33798218]
[202.03492737 287.64544678]
[208.95672607 300.95294189]
[215.87852478 314.26040649]
[228.55163574 325.52221680]
[221.23820496 340.81762695]
[204.51597595 338.02420044]
[202.57106018 321.18218994]
[195.64926147 307.87472534]
[188.72746277 294.56726074]
[181.80566406 281.25979614]
[174.88386536 267.95233154]
[167.96206665 254.64485168]
[155.19815063 252.50038147]
[145.88284302 243.23580933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[3 109]
[4 108]
[5 107]
[6 106]
[7 105]
[10 52]
[11 51]
[12 50]
[17 44]
[18 43]
[19 42]
[20 41]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[59 101]
[60 100]
[61 99]
[62 98]
[68 90]
[69 89]
[70 88]
[71 87]
[72 86]
[73 85]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
