%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUCUGGGCUCUUGAGAAGAGCUGCUGCAGGCAUUUGCAGAGUGAAUGAGCUCUGACUGAGACUUGACUUCAGAACCACUGGGCUGGCCUGGCCUCUUGACACAGCAACACACUGCUUCUUGCCUUCCAGGG\
) } def
/len { sequence length } bind def

/coor [
[30.74398232 355.95816040]
[14.38478184 354.81420898]
[7.44004250 339.95816040]
[17.05391693 326.67260742]
[18.10026360 311.70916748]
[19.14661026 296.74569702]
[20.19295692 281.78222656]
[21.23930550 266.81875610]
[22.28565216 251.85531616]
[8.65438461 245.59523010]
[-2.01374364 256.13995361]
[-12.68187237 266.68466187]
[-23.35000038 277.22937012]
[-34.01813126 287.77410889]
[-44.68625641 298.31881714]
[-51.70072174 313.75363159]
[-68.47413635 311.28607178]
[-70.74636078 294.48507690]
[-55.23097229 287.65069580]
[-44.56284714 277.10595703]
[-33.89471817 266.56124878]
[-23.22658730 256.01654053]
[-12.55845928 245.47181702]
[-1.89033091 234.92710876]
[-3.65369487 224.72741699]
[-2.13865113 214.80525208]
[2.30331278 206.15571594]
[9.03739738 199.58326721]
[17.22854424 195.62747192]
[25.94153976 194.52116394]
[34.24644852 196.18385315]
[41.89708710 183.28161621]
[49.54772568 170.37937927]
[57.19836426 157.47714233]
[64.84900665 144.57490540]
[53.52449799 132.59666443]
[46.11880875 117.86986542]
[43.25638962 101.63627625]
[45.17860031 85.26471710]
[51.72335434 70.13564301]
[40.12128067 60.62817764]
[28.51920509 51.12071228]
[16.91713142 41.61324692]
[5.31505775 32.10578156]
[-6.28701591 22.59831810]
[-21.98734665 24.40805817]
[-34.31674194 14.52061176]
[-35.96038818 -1.19797480]
[-25.94313812 -13.42214298]
[-10.20805264 -14.89951134]
[1.90952432 -4.75358200]
[3.22044849 10.99624443]
[14.82252216 20.50370789]
[26.42459679 30.01117325]
[38.02666855 39.51863861]
[49.62874603 49.02610397]
[61.23081970 58.53356552]
[75.11489868 48.97798157]
[91.19269562 43.92018127]
[90.84365845 28.92424393]
[90.49462891 13.92830467]
[90.14559174 -1.06763363]
[89.79656219 -16.06357193]
[77.47460175 -25.69182968]
[74.27494049 -40.99856949]
[81.70836639 -54.75640869]
[96.26503754 -60.46932602]
[111.07173920 -55.43984985]
[119.13719940 -42.04274750]
[116.65315247 -26.60372162]
[104.79249573 -16.41260719]
[105.14153290 -1.41666794]
[105.49057007 13.57927036]
[105.83959961 28.57520866]
[106.18863678 43.57114792]
[117.34970856 45.94907761]
[127.80966949 50.51124191]
[137.14581299 57.07328415]
[144.98088074 65.37002563]
[157.97125244 57.87002563]
[162.16555786 42.86850357]
[175.44648743 35.44748688]
[189.72229004 39.53855515]
[202.71267700 32.03855515]
[215.70306396 24.53855515]
[228.69343567 17.03855515]
[241.68382263 9.53855419]
[247.20823669 -5.52333164]
[262.47344971 -10.45820045]
[275.76928711 -1.48044431]
[276.89633179 14.52297211]
[264.98999023 25.27559662]
[249.18382263 22.52893639]
[236.19343567 30.02893639]
[223.20306396 37.52893448]
[210.21267700 45.02893448]
[197.22229004 52.52893448]
[193.62734985 66.93768311]
[180.56010437 74.72880554]
[165.47125244 70.86040497]
[152.48088074 78.36040497]
[155.21145630 86.80116272]
[156.59362793 95.56427765]
[156.59362793 104.43572235]
[155.21145630 113.19883728]
[152.48088074 121.63959503]
[165.47125244 129.13958740]
[178.46163940 136.63958740]
[191.45202637 144.13958740]
[206.65100098 139.80757141]
[220.42070007 147.56455994]
[224.59179688 162.80850220]
[216.68965149 176.49540710]
[201.40246582 180.50511169]
[187.79986572 172.45869446]
[183.95202637 157.12997437]
[170.96163940 149.62997437]
[157.97125244 142.12997437]
[144.98088074 134.62997437]
[131.36273193 147.31694031]
[114.37317657 154.91744995]
[95.83853912 156.61445618]
[77.75124359 152.22554016]
[70.10060120 165.12777710]
[62.44996262 178.03001404]
[54.79932404 190.93225098]
[47.14868546 203.83448792]
[56.34981537 229.26370239]
[37.24911118 252.90165710]
[36.20276642 267.86511230]
[35.15641785 282.82858276]
[34.11007309 297.79205322]
[33.06372452 312.75549316]
[32.01737595 327.71896362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 134]
[5 133]
[6 132]
[7 131]
[8 130]
[9 129]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[31 127]
[32 126]
[33 125]
[34 124]
[35 123]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[79 101]
[80 100]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
