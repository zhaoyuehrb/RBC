%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAGAGAAGCCAAUCAGCGUCGCCGCGGUCCCAGUUCUAAAGUCCCCACGCACCCACCCGGACUCAGAGUCUCCUCAGACGCCGAG\
) } def
/len { sequence length } bind def

/coor [
[56.19261932 274.28308105]
[51.87923431 288.81478882]
[42.85334778 300.99301147]
[30.20487785 309.34719849]
[15.46119213 312.86846924]
[0.40266028 311.13168335]
[-13.15232658 304.34655762]
[-23.56693649 293.33239746]
[-29.58355713 279.41921997]
[-30.47564888 264.28713989]
[-26.13549042 249.76341248]
[-17.08717537 237.60183716]
[-4.42333269 229.27099609]
[10.32681847 225.77688599]
[25.38212395 227.54141235]
[32.09638214 214.12803650]
[30.87443733 199.28364563]
[43.97052383 190.40652466]
[50.68478012 176.99314880]
[57.39904022 163.57977295]
[64.11329651 150.16639709]
[70.82755280 136.75300598]
[66.66721344 127.11728668]
[68.66138458 116.58648682]
[76.36994934 108.82309723]
[87.32281494 106.66815948]
[87.68120575 92.69091797]
[99.77696991 85.67778778]
[107.43102264 72.77758026]
[107.26692200 67.90015411]
[108.66423035 63.72714615]
[111.16211700 60.69433212]
[114.20025635 59.02135086]
[117.20645142 58.69828033]
[126.61849213 47.01865768]
[135.82055664 35.17290115]
[144.80972290 23.16478157]
[153.79888916 11.15666389]
[162.78805542 -0.85145521]
[161.74714661 -13.85621548]
[169.66963196 -23.70840454]
[181.79464722 -25.37171745]
[191.20668030 -37.05134201]
[200.61871338 -48.73096466]
[210.03074646 -60.41058731]
[219.44277954 -72.09020996]
[212.12705994 -85.41494751]
[210.47233582 -100.52555084]
[214.73094177 -115.11775970]
[224.25347900 -126.96637726]
[237.58782959 -134.26457214]
[252.70059204 -135.89941406]
[267.28720093 -131.62161255]
[279.12326050 -122.08349609]
[286.40393066 -108.73956299]
[288.01889038 -93.62465668]
[283.72189331 -79.04370117]
[274.16821289 -67.22017670]
[260.81472778 -59.95709229]
[245.69769287 -58.36201096]
[231.12240601 -62.67817307]
[221.71037292 -50.99855042]
[212.29833984 -39.31892776]
[202.88630676 -27.63930511]
[193.47425842 -15.95968246]
[191.82435608 1.41315246]
[174.79617310 8.13770962]
[165.80700684 20.14582825]
[156.81784058 32.15394592]
[147.82867432 44.16206741]
[146.30685425 51.57075882]
[138.29811096 56.43069458]
[128.88607788 68.11031342]
[120.33123779 80.43162537]
[112.67718506 93.33184052]
[112.31879425 107.30908203]
[100.22303009 114.32221222]
[101.11405182 134.30697632]
[84.24093628 143.46726990]
[77.52667236 156.88064575]
[70.81241608 170.29402161]
[64.09815979 183.70741272]
[57.38389969 197.12078857]
[58.12559509 212.92459106]
[45.50976181 220.84230042]
[38.79550171 234.25567627]
[49.23039246 245.25062561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 86]
[16 85]
[18 83]
[19 82]
[20 81]
[21 80]
[22 79]
[26 77]
[28 75]
[29 74]
[34 73]
[35 72]
[36 70]
[37 69]
[38 68]
[39 67]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
