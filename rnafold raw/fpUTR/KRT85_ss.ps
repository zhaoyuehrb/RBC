%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCUCCCCACCAAUAAAAGGACCAGGGAGGAUCAGAGAGAGCAGAAGGAUCCUGAGCCUCGCACUCUGCCGCCCGCACCACCUUCCGCUGCCUCUCAGACUCUGCUCAGCCUCACACG\
) } def
/len { sequence length } bind def

/coor [
[46.45805740 310.00823975]
[39.55662155 296.69018555]
[36.41146469 282.02362061]
[37.24523926 267.04681396]
[41.99991608 252.81797791]
[29.93370438 261.72900391]
[17.86749077 270.64004517]
[5.80127764 279.55108643]
[-6.26493502 288.46209717]
[-8.27691841 307.20404053]
[-23.02113914 318.43353271]
[-40.99991989 315.49386597]
[-52.58735275 325.01919556]
[-52.56430817 340.65673828]
[-62.63788605 352.61740112]
[-78.05165100 355.25366211]
[-91.52768707 347.32080078]
[-96.70303345 332.56445312]
[-91.13404083 317.95211792]
[-77.45022583 310.38330078]
[-62.11265564 313.43176270]
[-50.52522659 303.90643311]
[-51.90133286 292.43884277]
[-47.47377396 281.64077759]
[-38.25449371 274.28982544]
[-26.50362778 272.33825684]
[-15.17596817 276.39590454]
[-3.10975504 267.48486328]
[8.95645809 258.57382202]
[21.02267075 249.66279602]
[33.08888245 240.75175476]
[42.31016159 228.92094421]
[48.00540543 215.04420471]
[53.52003098 201.09469604]
[58.85310745 187.07476807]
[56.14638138 172.42816162]
[68.28462982 162.28057861]
[73.61770630 148.26065063]
[78.95078278 134.24072266]
[84.28385925 120.22080231]
[89.61693573 106.20087433]
[94.58425140 92.04722595]
[99.18244934 77.76939392]
[103.78064728 63.49155807]
[100.64625549 47.98394394]
[111.91255188 38.24126053]
[116.51074982 23.96342850]
[121.10894775 9.68559361]
[125.70715332 -4.59224129]
[130.30534363 -18.87007523]
[119.10880280 -30.95849609]
[115.52203369 -46.94461823]
[120.42456055 -62.47949219]
[132.39939880 -73.38514709]
[148.14102173 -76.77820587]
[152.36700439 -91.17060089]
[148.83106995 -106.59162140]
[159.84065247 -116.62349701]
[164.06663513 -131.01589966]
[158.24101257 -140.38104248]
[158.59381104 -151.18339539]
[164.76075745 -159.78884888]
[174.46287537 -163.43865967]
[179.43019104 -177.59230042]
[184.39750671 -191.74595642]
[183.93751526 -208.69366455]
[200.09555054 -213.82727051]
[209.50152588 -199.72180176]
[198.55114746 -186.77864075]
[193.58383179 -172.62500000]
[188.61653137 -158.47134399]
[193.67988586 -139.88386536]
[178.45903015 -126.78990173]
[174.23304749 -112.39750671]
[178.07124329 -98.00593567]
[166.75939941 -86.94461060]
[162.53341675 -72.55221558]
[172.62835693 -63.25851440]
[177.73458862 -50.45094681]
[176.79394531 -36.62855911]
[169.93420410 -24.51527596]
[158.45527649 -16.52309227]
[144.58319092 -14.27187538]
[139.98498535 0.00595898]
[135.38677979 14.28379345]
[130.78858948 28.56162834]
[126.19038391 42.83946228]
[129.65367126 57.32583237]
[118.05848694 68.08975983]
[113.46028137 82.36759186]
[108.86208344 96.64543152]
[110.18022156 101.85817719]
[108.41426086 107.42380524]
[103.63686371 111.53395081]
[98.30378723 125.55387878]
[92.97071075 139.57380676]
[87.63763428 153.59373474]
[82.30455780 167.61364746]
[84.62982178 183.26306152]
[72.87303162 192.40783691]
[67.53995514 206.42776489]
[67.39921570 215.68518066]
[61.88215637 220.73944092]
[56.18690872 234.61619568]
[68.82216644 226.53224182]
[83.14195251 222.06639099]
[98.13252258 221.53475952]
[112.73268890 224.97500610]
[125.90886688 232.14356995]
[136.72828674 242.53298950]
[144.42503357 255.40777588]
[148.45423889 269.85647583]
[148.53067017 284.85629272]
[144.64889526 299.34533691]
[137.08374023 312.29788208]
[126.37074280 322.79699707]
[113.26829529 330.09945679]
[98.70394897 333.68829346]
[83.70873260 333.30944824]
[69.34419250 328.98971558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[12 22]
[13 21]
[32 104]
[33 103]
[34 101]
[35 100]
[37 98]
[38 97]
[39 96]
[40 95]
[41 94]
[42 91]
[43 90]
[44 89]
[46 87]
[47 86]
[48 85]
[49 84]
[50 83]
[55 77]
[56 76]
[58 74]
[59 73]
[63 71]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
