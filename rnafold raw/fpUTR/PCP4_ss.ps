%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGAACCGGUGGAGCAGCGACCCCUGAGCAGUGUUCUCUGUGCUGAGCGGCGGGACUGAGCUGUUGAGUUAGAGCCAAC\
) } def
/len { sequence length } bind def

/coor [
[91.04992676 111.18354034]
[76.93282318 116.25379181]
[62.91543198 121.59352875]
[49.00289536 127.20078278]
[35.09035873 132.80804443]
[32.45646286 142.33602905]
[25.71230507 149.37060547]
[16.57050323 152.31752014]
[7.26332712 150.59687805]
[-0.00216247 144.75192261]
[-14.46596527 148.72665405]
[-28.92976761 152.70137024]
[-40.18638992 163.81887817]
[-54.50894928 159.73065186]
[-63.65946960 172.90818787]
[-79.67623138 173.82627869]
[-90.27254486 161.78062439]
[-87.31982422 146.01164246]
[-73.08314514 138.61592102]
[-58.48366928 145.26684570]
[-48.26159668 134.43363953]
[-32.90449142 138.23756409]
[-18.44068718 134.26284790]
[-3.97688508 130.28813171]
[8.75136662 114.23323059]
[29.48310280 118.89550018]
[43.39564133 113.28824615]
[57.30817795 107.68099213]
[62.46518326 102.11847687]
[71.86257172 102.13668823]
[85.97966766 97.06643677]
[95.15826416 86.51916504]
[108.95007324 88.81645966]
[123.06717682 83.74620819]
[127.50234985 68.99373627]
[139.63203430 59.78916550]
[154.67788696 59.49543381]
[166.86575317 68.01564789]
[180.98284912 62.94539642]
[195.09996033 57.87514496]
[209.21705627 52.80488968]
[223.33415222 47.73463821]
[230.57255554 41.74156952]
[238.09022522 42.75188065]
[252.39117432 38.22607040]
[266.69210815 33.70026398]
[277.51464844 22.15975189]
[291.98327637 25.69638634]
[306.28424072 21.17057800]
[320.58517456 16.64476776]
[334.88613892 12.11895943]
[349.18707275 7.59315014]
[363.48800659 3.06734133]
[368.26806641 -11.69513893]
[380.83215332 -20.80136108]
[396.34915161 -20.74979591]
[408.85241699 -11.56027317]
[413.53424072 3.23365068]
[408.59436035 17.94340897]
[395.93222046 26.91279793]
[380.41668701 26.69290733]
[368.01382446 17.36828804]
[353.71289062 21.89409637]
[339.41192627 26.41990471]
[325.11099243 30.94571495]
[310.81005859 35.47152328]
[296.50909424 39.99733353]
[286.70947266 51.21412659]
[271.21792603 48.00120926]
[256.91699219 52.52701569]
[242.61604309 57.05282593]
[228.40440369 61.85173798]
[214.28730774 66.92198944]
[200.17021179 71.99224091]
[186.05310059 77.06250000]
[171.93600464 82.13275146]
[167.95413208 96.46044159]
[156.15953064 105.80664062]
[140.94526672 106.42283630]
[128.13743591 97.86331177]
[114.02033234 102.93356323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 28]
[4 27]
[5 26]
[10 24]
[11 23]
[12 22]
[14 20]
[33 81]
[34 80]
[38 76]
[39 75]
[40 74]
[41 73]
[42 72]
[44 71]
[45 70]
[46 69]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
