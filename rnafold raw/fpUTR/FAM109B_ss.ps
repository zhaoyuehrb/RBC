%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCCCGCGGCCACGUUGCAGCCCAGGCGGAGGCGCGGGAUCUCGAGCUGGGAUCGCCCUCUUGGGCUUCGGUGCGAUCGGCGGCGGGAGGUUCCCUGGGAACCAGGUGGUCGAAGGGCUGAGCUGUGUGGCCAGACAAGAGGUCCCUGCCCUCCCCCAGUGAGCCCUGCUGUUCCCGUGGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[105.14207458 834.69122314]
[105.14207458 819.69122314]
[105.14207458 804.69122314]
[105.14207458 789.69122314]
[105.14207458 774.69122314]
[105.14207458 759.69122314]
[105.14207458 744.69122314]
[105.14207458 729.69122314]
[105.14207458 714.69122314]
[105.14207458 699.69122314]
[105.14207458 684.69122314]
[94.46120453 674.37353516]
[94.24752045 659.16143799]
[105.14207458 648.02832031]
[105.14207458 633.02832031]
[105.14207458 618.02832031]
[102.44409180 614.06561279]
[102.22032928 608.36187744]
[105.40110016 602.52917480]
[105.90232086 587.53753662]
[106.40354919 572.54589844]
[106.65419769 557.54803467]
[106.65419769 542.54803467]
[98.91689301 529.82073975]
[106.65419769 516.02056885]
[106.65419769 501.02056885]
[106.40354919 486.02267456]
[105.90232086 471.03103638]
[97.74406433 458.56942749]
[105.01590729 444.51840210]
[104.51468658 429.52679443]
[104.01345825 414.53515625]
[103.51223755 399.54354858]
[103.01100922 384.55191040]
[99.63852692 377.95874023]
[102.62878418 369.30606079]
[102.37813568 354.30813599]
[102.00218201 339.31286621]
[101.50096130 324.32122803]
[100.99973297 309.32962036]
[100.49851227 294.33798218]
[99.99728394 279.34637451]
[99.49606323 264.35473633]
[98.99483490 249.36311340]
[98.49361420 234.37149048]
[87.47393799 224.41647339]
[86.75206757 209.21998596]
[97.26852417 197.72903442]
[96.64205170 182.74211121]
[95.89039612 167.76095581]
[95.13873291 152.77981567]
[94.38706970 137.79866028]
[79.42835999 133.38005066]
[67.12770081 123.15157318]
[59.69056320 108.53723145]
[58.60909271 91.77405548]
[64.37396240 75.57082367]
[51.34200668 68.14330292]
[38.31005096 60.71577835]
[25.27809334 53.28825378]
[8.89114380 53.92062378]
[0.38014480 39.90296173]
[8.50048351 25.65542984]
[24.89865112 25.83467102]
[32.70561981 40.25629807]
[45.73757553 47.68382263]
[58.76953125 55.11134720]
[71.80148315 62.53887177]
[85.07435608 55.55095673]
[86.32619476 40.60328293]
[87.57803345 25.65561295]
[88.82986450 10.70794010]
[90.08170319 -4.23973227]
[91.33354187 -19.18740463]
[84.77494049 -33.58515549]
[93.54740906 -45.62230682]
[85.82559204 -55.96987152]
[87.18817139 -68.40553284]
[96.36054230 -76.31097412]
[97.86198425 -91.23564148]
[99.36341858 -106.16030884]
[100.86485291 -121.08497620]
[102.36628723 -136.00964355]
[96.04917908 -150.51498413]
[105.02156830 -162.40385437]
[106.52300262 -177.32852173]
[97.33548737 -184.91079712]
[93.00196838 -195.87789917]
[94.49446106 -207.45431519]
[101.32604218 -216.77009583]
[111.70075989 -221.57234192]
[113.70006561 -236.43850708]
[115.69937134 -251.30467224]
[117.69867706 -266.17083740]
[119.69798279 -281.03698730]
[121.69728088 -295.90316772]
[117.81604004 -312.40686035]
[132.60034180 -320.70510864]
[144.66699219 -308.79574585]
[136.56344604 -293.90383911]
[134.56414795 -279.03768921]
[132.56483459 -264.17153931]
[130.56553650 -249.30535889]
[128.56622314 -234.43919373]
[126.56692505 -219.57304382]
[138.52726746 -205.73324585]
[136.55964661 -187.22689819]
[121.44766998 -175.82708740]
[119.94623566 -160.90242004]
[126.37073517 -147.46459961]
[117.29095459 -134.50820923]
[115.78952026 -119.58354187]
[114.28808594 -104.65887451]
[112.78665161 -89.73420715]
[111.28520966 -74.80953979]
[119.35052490 -59.23325348]
[108.49508667 -44.37046814]
[115.14322662 -31.04187393]
[106.28121185 -17.93556786]
[105.02937317 -2.98789477]
[103.77754211 11.95977688]
[102.52570343 26.90744972]
[101.27386475 41.85512161]
[100.02202606 56.80279541]
[113.49507904 59.54824448]
[125.25334167 66.32795715]
[134.14395142 76.34799957]
[139.33662415 88.50392151]
[140.40037537 101.50190735]
[137.33737183 113.99626923]
[130.57133484 124.72875977]
[120.89279938 132.65524292]
[109.36822510 137.04699707]
[110.11988831 152.02815247]
[110.87155151 167.00930786]
[111.62320709 181.99046326]
[115.18471527 190.42408752]
[112.26014709 197.22779846]
[123.52062988 207.99067688]
[123.81537628 223.20144653]
[113.48523712 233.87026978]
[113.98645782 248.86189270]
[114.48768616 263.85351562]
[114.98890686 278.84515381]
[115.49013519 293.83676147]
[115.99135590 308.82839966]
[116.49258423 323.82000732]
[116.99380493 338.81164551]
[120.41389465 347.30358887]
[117.37603760 354.05749512]
[117.62668610 369.05541992]
[118.00263214 384.05068970]
[118.50386047 399.04232788]
[119.00508118 414.03393555]
[119.50630951 429.02557373]
[120.00753784 444.01718140]
[128.20164490 457.55111694]
[120.89395142 470.52981567]
[121.39517212 485.52145386]
[124.57594299 491.35415649]
[124.35218048 497.05786133]
[121.65419769 501.02056885]
[121.65419769 516.02056885]
[129.39149475 529.82073975]
[121.65419769 542.54803467]
[121.65419769 557.54803467]
[124.63829041 563.48376465]
[124.22406006 569.17681885]
[121.39517212 573.04711914]
[120.89395142 588.03875732]
[120.39272308 603.03039551]
[120.14207458 618.02832031]
[120.14207458 633.02832031]
[120.14207458 648.02832031]
[131.03663635 659.16143799]
[130.82295227 674.37353516]
[120.14207458 684.69122314]
[120.14207458 699.69122314]
[120.14207458 714.69122314]
[120.14207458 729.69122314]
[120.14207458 744.69122314]
[120.14207458 759.69122314]
[120.14207458 774.69122314]
[120.14207458 789.69122314]
[120.14207458 804.69122314]
[120.14207458 819.69122314]
[120.14207458 834.69122314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 187]
[2 186]
[3 185]
[4 184]
[5 183]
[6 182]
[7 181]
[8 180]
[9 179]
[10 178]
[11 177]
[14 174]
[15 173]
[16 172]
[19 171]
[20 170]
[21 169]
[22 166]
[23 165]
[25 163]
[26 162]
[27 159]
[28 158]
[30 156]
[31 155]
[32 154]
[33 153]
[34 152]
[36 151]
[37 150]
[38 148]
[39 147]
[40 146]
[41 145]
[42 144]
[43 143]
[44 142]
[45 141]
[48 138]
[49 136]
[50 135]
[51 134]
[52 133]
[57 68]
[58 67]
[59 66]
[60 65]
[69 124]
[70 123]
[71 122]
[72 121]
[73 120]
[74 119]
[76 117]
[79 115]
[80 114]
[81 113]
[82 112]
[83 111]
[85 109]
[86 108]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
