%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCUGCUGGCUGCGCGGUGGCGGCGGCUGUGUGUGCGCCGCGCCUUGCCGCCCCCCCUGGCCCCCCGAGCCCGGGGCGCGCGCUCCCGCCCGGGCCGUCCGGGCCCCGCGGCGCCGCGGCCCGAGGCCCCGGGAAGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[85.14241028 259.46600342]
[82.23382568 274.54696655]
[72.16230774 286.14266968]
[57.63705063 291.13391113]
[42.56526947 288.17803955]
[31.00120163 278.07025146]
[26.05552292 263.52941895]
[29.05859375 248.46696472]
[39.20260620 236.93463135]
[53.75886917 232.03456116]
[56.64564133 217.31495667]
[59.53241730 202.59536743]
[62.41918945 187.87576294]
[65.30596161 173.15617371]
[68.19273376 158.43656921]
[71.07951355 143.71697998]
[73.96628571 128.99737549]
[64.94192505 117.01569366]
[49.99745178 115.72621918]
[41.10492706 118.11825562]
[34.74646759 114.24483490]
[19.83320045 112.63411713]
[5.28197956 118.84479523]
[-6.54086018 109.78556061]
[-21.45412827 108.17484283]
[-36.36739731 106.56411743]
[-51.28066635 104.95339966]
[-66.19393158 103.34268188]
[-81.10720062 101.73195648]
[-91.54485321 113.06163788]
[-106.47784424 116.03807068]
[-120.13851166 109.72536469]
[-127.37590790 96.73467255]
[-142.28916931 95.12394714]
[-157.20243835 93.51322937]
[-172.11570740 91.90251160]
[-187.02897644 90.29178619]
[-203.42579651 94.60234070]
[-212.10697937 80.03960419]
[-200.51654053 67.66631317]
[-185.41825867 75.37851715]
[-170.50498962 76.98924255]
[-155.59172058 78.59996033]
[-140.67845154 80.21067810]
[-125.76518250 81.82140350]
[-115.92090607 70.67562866]
[-101.22738647 67.42533875]
[-87.27430725 73.52163696]
[-79.49648285 86.81869507]
[-64.58321381 88.42941284]
[-49.66994476 90.04013062]
[-34.75667572 91.65084839]
[-19.84340858 93.26157379]
[-4.93014002 94.87229156]
[8.55438328 88.54640198]
[21.44392014 97.72084808]
[36.35718918 99.33156586]
[51.28692245 100.78174591]
[66.23139954 102.07122040]
[68.46974945 90.15904999]
[74.66510010 80.07960510]
[83.82386780 73.05606079]
[94.61075592 69.85288239]
[105.54138184 70.69606018]
[115.18607330 75.26881409]
[122.35684967 82.78006744]
[136.24572754 77.11444855]
[150.13459778 71.44882965]
[164.02346802 65.78321075]
[174.92619324 50.98532867]
[192.18991089 53.95975113]
[205.95365906 47.99660873]
[219.71742249 42.03346634]
[233.41622925 35.92258835]
[247.04849243 29.66468430]
[260.68075562 23.40678024]
[274.31301880 17.14887619]
[283.62689209 4.35973835]
[298.42163086 6.08179665]
[312.05389404 -0.17610732]
[325.68615723 -6.43401146]
[339.31842041 -12.69191551]
[345.87014771 -19.16291618]
[353.31198120 -18.93428230]
[367.07574463 -24.89742470]
[372.56466675 -36.62163544]
[384.20904541 -41.28550339]
[395.52441406 -36.88233185]
[409.41329956 -42.54795074]
[423.30218506 -48.21356964]
[437.19104004 -53.87919235]
[442.93093872 -65.48258972]
[454.67300415 -69.89483643]
[465.89102173 -65.24922180]
[479.89855957 -70.61469269]
[493.90612793 -75.98016357]
[507.91369629 -81.34564209]
[521.92126465 -86.71111298]
[529.74389648 -100.71775055]
[545.59490967 -103.19248962]
[557.31481934 -92.23692322]
[555.91302490 -76.25522614]
[542.46490479 -67.50719452]
[527.28674316 -72.70355225]
[513.27917480 -67.33808136]
[499.27160645 -61.97260666]
[485.26403809 -56.60713577]
[471.25650024 -51.24166107]
[460.99905396 -37.04067230]
[442.85665894 -39.99031830]
[428.96780396 -34.32469940]
[415.07891846 -28.65908051]
[401.19003296 -22.99345970]
[391.24053955 -8.57505989]
[373.03887939 -11.13366985]
[359.27511597 -5.17052746]
[345.57632446 0.94034916]
[331.94406128 7.19825315]
[318.31179810 13.45615768]
[304.67953491 19.71406174]
[296.34069824 32.05559158]
[280.57092285 30.78114128]
[266.93865967 37.03904724]
[253.30639648 43.29695129]
[239.67413330 49.55485153]
[234.87261963 55.24510574]
[225.68055725 55.79721832]
[211.91680908 61.76036072]
[198.15304565 67.72350311]
[193.38525391 78.89013672]
[181.90733337 83.94989777]
[169.68908691 79.67208099]
[155.80021667 85.33769989]
[141.91134644 91.00331879]
[128.02247620 96.66893768]
[125.52013397 115.94247437]
[110.52934265 130.17709351]
[88.68588257 131.88415527]
[85.79911041 146.60374451]
[82.91233826 161.32334900]
[80.02555847 176.04293823]
[77.13878632 190.76254272]
[74.25201416 205.48213196]
[71.36524200 220.20173645]
[68.47846222 234.92134094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 145]
[11 144]
[12 143]
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 59]
[19 58]
[21 57]
[22 56]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[33 45]
[34 44]
[35 43]
[36 42]
[37 41]
[66 135]
[67 134]
[68 133]
[69 132]
[71 129]
[72 128]
[73 127]
[74 125]
[75 124]
[76 123]
[77 122]
[79 120]
[80 119]
[81 118]
[82 117]
[84 116]
[85 115]
[88 113]
[89 112]
[90 111]
[91 110]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
