%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCGCGAGGCCCGCGGUCCCUUUAAGACGCCCGGGGCCCGCCUGGCUCUCGCCGCCGCCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[121.28356171 221.32008362]
[131.33575439 209.77832031]
[125.84004974 195.82135010]
[120.34434509 181.86436462]
[114.76936340 176.61494446]
[114.93508911 167.12216187]
[110.09962463 152.92292786]
[105.26416016 138.72367859]
[100.42869568 124.52445221]
[95.59323120 110.32521820]
[90.42622375 96.24324036]
[84.93052673 82.28625488]
[79.43482208 68.32927704]
[64.80519104 57.41954803]
[67.66067505 40.25830841]
[61.51681900 26.57426643]
[55.37296295 12.89022255]
[49.22910690 -0.79382068]
[36.51818466 -10.21417427]
[38.36371994 -24.99399948]
[32.21986389 -38.67804337]
[26.07600975 -52.36208725]
[19.93215561 -66.04612732]
[4.65163422 -66.92035675]
[-8.46634865 -74.80560303]
[-16.40737915 -87.88989258]
[-17.34666443 -103.16655731]
[-11.06836510 -117.12512207]
[0.98481178 -126.55801392]
[16.04313469 -129.29762268]
[30.64631271 -124.71441650]
[41.43864059 -113.86157227]
[45.94012070 -99.23299408]
[43.11634445 -84.19023132]
[33.61619949 -72.18998718]
[39.76005554 -58.50594330]
[45.90390778 -44.82189941]
[52.04776382 -31.13785553]
[64.31923676 -22.69627762]
[62.91315079 -6.93767595]
[69.05700684 6.74636698]
[75.20085907 20.43041039]
[81.34471893 34.11445236]
[92.71378326 38.84640884]
[97.84386444 50.48607635]
[93.39180756 62.83358002]
[98.88750458 76.79055786]
[104.38320160 90.74753571]
[110.22487640 96.73917389]
[109.79246521 105.48975372]
[114.62792969 119.68898773]
[119.46339417 133.88821411]
[124.29885864 148.08744812]
[129.13432312 162.28669739]
[134.30133057 176.36866760]
[139.79702759 190.32565308]
[145.29272461 204.28262329]
[160.51547241 205.87213135]
[173.24943542 214.36357117]
[180.56845093 227.80569458]
[180.79064941 243.10958862]
[173.86499023 256.75854492]
[161.38291931 265.61611938]
[146.21273804 267.64688110]
[131.84043884 262.38424683]
[121.56866455 251.03746033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 57]
[3 56]
[4 55]
[6 54]
[7 53]
[8 52]
[9 51]
[10 50]
[11 48]
[12 47]
[13 46]
[15 43]
[16 42]
[17 41]
[18 40]
[20 38]
[21 37]
[22 36]
[23 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
