%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUCGCUCCGGUUCCUCUGCCUCCUCUGGCUGCUGCCUCCGCAGCUCCCUCCUCCUACCCCACCUCCUCCAUCUGGGGAGCGUCUGCGGGGGCCUGAGGGGCGGCGGCGGCGGCGGCGGCUGCGAU\
) } def
/len { sequence length } bind def

/coor [
[95.24721527 196.74508667]
[82.21743011 185.89793396]
[89.03367615 170.37455750]
[89.76969147 155.39262390]
[90.50570679 140.41069031]
[91.24172211 125.42875671]
[91.97773743 110.44682312]
[85.15897369 107.32360840]
[72.93081665 116.01107788]
[71.52145386 101.07716370]
[64.70269775 97.95394135]
[53.83898926 108.29705048]
[42.97528458 118.64015961]
[42.83803177 134.44384766]
[31.50767899 145.46195984]
[15.70632076 145.15762329]
[4.80862284 133.71141052]
[5.27999640 117.91415405]
[16.84078407 107.13808441]
[32.63217545 107.77645111]
[43.49588013 97.43334198]
[54.35958862 87.09023285]
[51.72165298 72.32401276]
[57.82431030 58.62154770]
[70.56472778 50.70437241]
[85.55287933 51.30055618]
[97.62419891 60.20466614]
[102.61920929 74.34856415]
[98.81695557 88.85828400]
[106.84191895 76.18548584]
[114.86688232 63.51268005]
[122.89184570 50.83987808]
[130.91680908 38.16707230]
[138.94177246 25.49427032]
[146.96673584 12.82146645]
[154.99169922 0.14866279]
[163.01666260 -12.52414036]
[171.04162598 -25.19694328]
[171.88780212 -40.99550629]
[185.23374939 -47.60874939]
[193.25871277 -60.28155518]
[201.28367615 -72.95435333]
[209.30863953 -85.62715912]
[210.15481567 -101.42572021]
[223.50076294 -108.03896332]
[231.52572632 -120.71176910]
[239.55068970 -133.38456726]
[240.39686584 -149.18313599]
[253.74281311 -155.79638672]
[261.76776123 -168.46917725]
[263.74902344 -177.49688721]
[270.14840698 -181.35113525]
[278.48196411 -193.82318115]
[286.81552124 -206.29522705]
[295.14907837 -218.76727295]
[289.07736206 -234.50019836]
[293.49789429 -250.60281372]
[306.49114990 -260.82583618]
[322.85092163 -261.32321167]
[330.87588501 -273.99603271]
[338.90084839 -286.66882324]
[346.92581177 -299.34164429]
[354.31927490 -312.39294434]
[361.06344604 -325.79132080]
[367.64270020 -339.27142334]
[374.05603027 -352.83126831]
[380.46932983 -366.39111328]
[386.88265991 -379.95092773]
[393.29598999 -393.51077271]
[399.70932007 -407.07061768]
[395.68014526 -422.59948730]
[405.42379761 -435.34469604]
[421.46578979 -435.52923584]
[431.50009155 -423.01153564]
[427.82922363 -407.39410400]
[413.26916504 -400.65728760]
[406.85583496 -387.09744263]
[400.44250488 -373.53762817]
[394.02917480 -359.97778320]
[387.61584473 -346.41793823]
[381.20254517 -332.85809326]
[381.18655396 -325.38769531]
[374.46182251 -319.04714966]
[367.71765137 -305.64877319]
[368.55538940 -302.86807251]
[368.28216553 -299.57192993]
[366.68951416 -296.20492554]
[363.74240112 -293.28070068]
[359.59860229 -291.31668091]
[351.57363892 -278.64385986]
[343.54867554 -265.97106934]
[335.52371216 -253.29826355]
[341.59637451 -241.34327698]
[340.93676758 -227.84187317]
[333.61096191 -216.35261536]
[321.45617676 -209.95709229]
[307.62112427 -210.43371582]
[299.28756714 -197.96166992]
[290.95401001 -185.48963928]
[282.62045288 -173.01759338]
[274.44058228 -160.44421387]
[266.41561890 -147.77140808]
[266.14343262 -132.87930298]
[252.22349548 -125.35961151]
[244.19853210 -112.68680573]
[236.17356873 -100.01399994]
[235.90139771 -85.12188721]
[221.98144531 -77.60219574]
[213.95648193 -64.92938995]
[205.93151855 -52.25658798]
[197.90655518 -39.58378601]
[197.63438416 -24.69166756]
[183.71443176 -17.17197990]
[175.68946838 -4.49917650]
[167.66450500 8.17362690]
[159.63954163 20.84642982]
[151.61457825 33.51923370]
[143.58961487 46.19203568]
[135.56465149 58.86484146]
[127.53968811 71.53764343]
[119.51471710 84.21044922]
[111.48975372 96.88325500]
[106.95966339 111.18283844]
[106.22365570 126.16477203]
[105.48764038 141.14671326]
[104.75162506 156.12863159]
[104.01560974 171.11056519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 127]
[4 126]
[5 125]
[6 124]
[7 123]
[11 22]
[12 21]
[13 20]
[29 122]
[30 121]
[31 120]
[32 119]
[33 118]
[34 117]
[35 116]
[36 115]
[37 114]
[38 113]
[40 111]
[41 110]
[42 109]
[43 108]
[45 106]
[46 105]
[47 104]
[49 102]
[50 101]
[52 100]
[53 99]
[54 98]
[55 97]
[59 92]
[60 91]
[61 90]
[62 89]
[63 84]
[64 83]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
