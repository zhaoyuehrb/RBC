%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUGUGCUGGGAGCUGUGGUCCGGGUCGGCGGGCGCGCAAGUUGGCUAGUCUCUGCGGCCACCUCCGGAAGGGUCCGCCGGCUGUGCUGGUGAGGCCCAGUUCCAAGGCUCCGGCAUCCUGUGUCUCACUGAGCACUGCUGCCCG\
) } def
/len { sequence length } bind def

/coor [
[186.67646790 345.92111206]
[200.41389465 351.94491577]
[193.09846497 338.84970093]
[185.78305054 325.75451660]
[179.73321533 321.41894531]
[178.45469666 312.30279541]
[171.41886902 299.05526733]
[164.38304138 285.80770874]
[157.34721375 272.56018066]
[150.31140137 259.31265259]
[143.27557373 246.06512451]
[136.23974609 232.81758118]
[130.28329468 228.35458374]
[129.19856262 219.21334839]
[122.44550323 205.81945801]
[115.69245148 192.42558289]
[108.93939209 179.03169250]
[96.30068970 171.15054321]
[96.99663544 155.34465027]
[90.24358368 141.95075989]
[83.49052429 128.55686951]
[72.55163574 118.29331207]
[58.75514984 112.40630341]
[44.95866013 106.51929474]
[31.16217041 100.63227844]
[17.36568069 94.74526978]
[3.56919074 88.85826111]
[-3.14136863 89.27862549]
[-8.25542259 86.60558319]
[-10.67947197 82.41746521]
[-24.21367836 75.95021820]
[-36.65883636 79.50685883]
[-47.82058334 73.78774261]
[-51.93008423 62.36455536]
[-65.32396698 55.61149979]
[-78.71785736 48.85844040]
[-87.85909271 47.77370453]
[-92.32209015 41.81726074]
[-105.56962585 34.78143311]
[-118.81715393 27.74560928]
[-132.06469727 20.70978355]
[-145.38615417 13.81495476]
[-158.78004456 7.06189823]
[-172.01802063 14.98399353]
[-187.43676758 14.46865559]
[-200.11624146 5.68032837]
[-206.01043701 -8.57666588]
[-203.23857117 -23.75297165]
[-192.68510437 -35.00588608]
[-177.71763611 -38.74464417]
[-163.11221313 -33.77621841]
[-153.52938843 -21.68602371]
[-152.02697754 -6.33198929]
[-138.63310242 0.42106676]
[-131.19294739 0.62536925]
[-125.02886963 7.46224928]
[-111.78133392 14.49807453]
[-98.53379822 21.53389931]
[-85.28626251 28.56972504]
[-71.96480560 35.46455383]
[-58.57091522 42.21760941]
[-45.17702484 48.97066498]
[-27.76809311 47.00603104]
[-17.74643326 62.41601181]
[-4.21222734 68.88325500]
[9.45619965 75.06177521]
[23.25268936 80.94878387]
[37.04917908 86.83579254]
[50.84566879 92.72280121]
[64.64215851 98.60980988]
[78.43864441 104.49681854]
[85.12122345 86.59188843]
[101.83115387 82.06078339]
[109.42288208 69.12379456]
[117.01461029 56.18680191]
[124.60633850 43.24981308]
[132.19805908 30.31282616]
[139.65205383 17.29599190]
[146.96748352 4.20078087]
[154.28291321 -8.89443111]
[161.59832764 -21.98964310]
[168.91375732 -35.08485413]
[176.22918701 -48.18006516]
[183.54460144 -61.27527618]
[185.99072266 -78.05183411]
[202.78880310 -80.34552002]
[209.64302063 -64.83886719]
[196.63981628 -53.95985413]
[189.32438660 -40.86464310]
[182.00897217 -27.76943016]
[174.69354248 -14.67421818]
[167.37811279 -1.57900679]
[160.06269836 11.51620483]
[152.74726868 24.61141586]
[152.22738647 32.03619003]
[145.13505554 37.90455246]
[137.54331970 50.84154129]
[129.95159912 63.77853012]
[122.35987091 76.71552277]
[114.76814270 89.65251160]
[118.62958527 97.25314331]
[118.64301300 106.14477539]
[114.47705841 114.41263580]
[106.73458862 120.13005066]
[96.88441467 121.80381775]
[103.63746643 135.19770813]
[110.39052582 148.59159851]
[123.51225281 157.43075562]
[122.33328247 172.27864075]
[129.08633423 185.67251587]
[135.83938599 199.06640625]
[142.59245300 212.46029663]
[149.48727417 225.78175354]
[156.52310181 239.02929688]
[163.55892944 252.27682495]
[170.59475708 265.52435303]
[177.63058472 278.77188110]
[184.66639709 292.01943970]
[191.70222473 305.26696777]
[198.87826538 318.43908691]
[206.19367981 331.53430176]
[213.50910950 344.62951660]
[222.30010986 356.78344727]
[232.44699097 367.83065796]
[242.59388733 378.87783813]
[250.76336670 383.12030029]
[252.83583069 390.26889038]
[262.74594116 401.52896118]
[272.65606689 412.78906250]
[287.65942383 420.68438721]
[284.22595215 437.28704834]
[267.32168579 438.58383179]
[261.39599609 422.69918823]
[251.48587036 411.43908691]
[241.57574463 400.17901611]
[231.54667664 389.02474976]
[221.39979553 377.97753906]
[211.25289917 366.93032837]
[212.67343140 381.86291504]
[207.11317444 395.79431152]
[195.80116272 405.64511108]
[181.23780823 409.23794556]
[166.64215088 405.77862549]
[155.24040222 396.03182983]
[149.55279541 382.15194702]
[150.83651733 367.20697021]
[158.80780029 354.50033569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 122]
[3 121]
[4 120]
[6 119]
[7 118]
[8 117]
[9 116]
[10 115]
[11 114]
[12 113]
[14 112]
[15 111]
[16 110]
[17 109]
[19 107]
[20 106]
[21 105]
[22 71]
[23 70]
[24 69]
[25 68]
[26 67]
[27 66]
[30 65]
[31 64]
[34 62]
[35 61]
[36 60]
[38 59]
[39 58]
[40 57]
[41 56]
[42 54]
[43 53]
[73 100]
[74 99]
[75 98]
[76 97]
[77 96]
[78 94]
[79 93]
[80 92]
[81 91]
[82 90]
[83 89]
[84 88]
[123 138]
[124 137]
[125 136]
[127 135]
[128 134]
[129 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
