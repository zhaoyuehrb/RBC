%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCUGCUCAAUCAAGUCAAAUACUGAACAACUUCCUGGCGGAGAGGCUGAGAAUUUUAUACUUGCUUGCUCGAAAGCACCCCAAAUAAGAUGAUCCACGCCAACACCUCCCCUUUACAGGUUUUAAAAUAUUCUUAUAACU\
) } def
/len { sequence length } bind def

/coor [
[94.08644867 110.61757660]
[86.50709534 124.50512695]
[71.61395264 124.71340179]
[58.90682983 132.68391418]
[46.19970703 140.65441895]
[33.49258804 148.62493896]
[20.78546715 156.59545898]
[8.07834625 164.56596375]
[12.25409126 180.40956116]
[11.36101818 196.75126648]
[5.49689388 212.01084900]
[-4.76036358 224.71620178]
[-18.40962029 233.64537048]
[-34.12422943 237.94409180]
[-50.38097763 237.20750427]
[-65.60771942 231.51823425]
[-78.33543396 221.43733215]
[-90.68019867 229.95829773]
[-103.02495575 238.47927856]
[-107.31947327 253.93684387]
[-122.13809204 260.08404541]
[-136.11323547 252.20527649]
[-138.52435303 236.34445190]
[-127.52186584 224.66862488]
[-111.54592133 226.13452148]
[-99.20116425 217.61354065]
[-86.85640717 209.09257507]
[-91.32212830 196.12574768]
[-92.25718689 182.43054199]
[-89.59035492 168.95193481]
[-83.49919891 156.62168884]
[-74.39823151 146.29396057]
[-62.91070938 138.68612671]
[-49.82597351 134.32893372]
[-36.04519272 133.52951050]
[-22.51931572 136.34970093]
[-10.18343925 142.60134888]
[0.10783300 151.85884094]
[12.81495380 143.88833618]
[25.52207375 135.91781616]
[38.22919464 127.94730377]
[50.93631744 119.97679138]
[63.64343643 112.00627899]
[70.31388092 98.68882751]
[86.11592865 97.91045380]
[94.08644867 85.20333099]
[95.73081970 70.29373932]
[97.37519836 55.38414383]
[88.39892578 37.39154434]
[100.33266449 22.23487091]
[101.32056427 7.26743841]
[91.18289185 -4.55902863]
[92.39797974 -19.72406197]
[103.73518372 -29.31590080]
[104.72307587 -44.28333664]
[105.71097565 -59.25076675]
[106.69887543 -74.21820068]
[107.68676758 -89.18563843]
[108.67466736 -104.15306854]
[109.66256714 -119.12049866]
[94.47484589 -130.63131714]
[89.24453735 -148.80183411]
[95.88324738 -166.34757996]
[111.58110809 -176.34503174]
[111.58110809 -191.34503174]
[111.58110809 -206.34503174]
[111.58110809 -221.34503174]
[111.58110809 -236.34503174]
[100.22996521 -247.34172058]
[100.06287384 -263.14514160]
[111.17896271 -274.37936401]
[126.98324585 -274.37936401]
[138.09933472 -263.14514160]
[137.93223572 -247.34172058]
[126.58110809 -236.34503174]
[126.58110809 -221.34503174]
[126.58110809 -206.34503174]
[126.58110809 -191.34503174]
[126.58110809 -176.34503174]
[136.79516602 -171.54570007]
[144.48846436 -163.21859741]
[148.50224304 -152.56076050]
[148.21051025 -141.12429810]
[143.61732483 -130.59040833]
[135.36192322 -122.52214050]
[124.62999725 -118.13260651]
[123.64210510 -103.16516876]
[122.65420532 -88.19773865]
[121.66630554 -73.23030090]
[120.67840576 -58.26287079]
[119.69051361 -43.29543686]
[118.70261383 -28.32800484]
[128.68077087 -17.32928276]
[127.89212799 -2.13610411]
[116.28800201 8.25533581]
[115.30010223 23.22276878]
[122.75719452 30.34620667]
[125.06999207 40.62239838]
[121.22642517 50.66585541]
[112.28479767 57.02851868]
[110.64041901 71.93811798]
[108.99604034 86.84770966]
[120.64649963 77.39960480]
[134.26896667 83.67879486]
[134.65248108 98.67389679]
[121.36763763 105.64115143]
[135.71275330 110.02497864]
[150.05784607 114.40880585]
[164.40295410 118.79262543]
[176.10571289 108.74031067]
[191.38851929 106.63337708]
[205.37471008 113.14414978]
[213.60131836 126.19506073]
[213.44329834 141.62161255]
[204.95103455 154.50125122]
[190.83439636 160.72413635]
[175.59796143 158.30455017]
[164.10359192 148.01458740]
[160.01913452 133.13774109]
[145.67402649 128.75390625]
[131.32891846 124.37008667]
[116.98381805 119.98625946]
[127.47111511 130.71084595]
[137.95840454 141.43542480]
[148.32333374 152.27830505]
[155.23674011 165.59013367]
[158.14526367 180.30545044]
[156.81611633 195.24644470]
[151.35568237 209.21726990]
[142.20100403 221.09968567]
[130.08482361 229.94265747]
[115.97690582 235.03840637]
[101.00642395 235.97904968]
[86.37161255 232.68933105]
[73.24382782 225.43252563]
[62.67379761 214.78947449]
[55.50753784 201.61204529]
[52.31863022 186.95494080]
[53.36231613 171.99128723]
[58.55505371 157.91877747]
[67.48122406 145.86375427]
[79.42588806 136.79138184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[3 43]
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[17 27]
[18 26]
[19 25]
[46 102]
[47 101]
[48 100]
[50 96]
[51 95]
[54 92]
[55 91]
[56 90]
[57 89]
[58 88]
[59 87]
[60 86]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
