%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUUUCGACCCUGCGGAGCAUCCGCUUCCGGUUCCCAGACUGAAUUGUCAGUGAGCGGAGUCUGAGGUCGCUGUGGACUGCCCACUGGGCCUUGCCCGAG\
) } def
/len { sequence length } bind def

/coor [
[79.58991241 132.80236816]
[72.82121277 126.68138885]
[67.76607513 119.23985291]
[64.66106415 110.93487549]
[63.62530136 102.25975800]
[64.65692139 93.71477509]
[67.63656616 85.77833557]
[72.33753967 78.88020325]
[62.65683746 67.42227936]
[52.97613525 55.96435547]
[43.29543686 44.50643158]
[33.61473465 33.04850388]
[22.57271767 34.57114029]
[12.14252281 31.15822792]
[4.38382339 23.64216805]
[-9.99086952 27.92798042]
[-24.36556244 32.21379471]
[-38.74025726 36.49960709]
[-53.11494827 40.78541946]
[-66.56623077 51.10527420]
[-80.20646667 41.03649521]
[-74.30717468 25.14200974]
[-57.40076447 26.41072464]
[-43.02606964 22.12491226]
[-28.65137672 17.83909988]
[-14.27668285 13.55328751]
[0.09801096 9.26747417]
[1.08020639 3.17215228]
[3.59356117 -2.46705937]
[7.46977234 -7.27254009]
[12.44927597 -10.92249966]
[9.71949196 -25.67201805]
[6.98970795 -40.42153549]
[4.03531361 -55.12770844]
[0.85699522 -69.78711700]
[-2.32132292 -84.44652557]
[-5.49964094 -99.10594177]
[-8.90114403 -113.71517181]
[-22.16266060 -121.88645935]
[-25.63045502 -136.69960022]
[-17.75865555 -149.29206848]
[-21.38255119 -163.84773254]
[-25.00644684 -178.40339661]
[-28.63034248 -192.95906067]
[-32.25423813 -207.51472473]
[-44.02519608 -218.93298340]
[-39.76032257 -234.76785278]
[-23.84695816 -238.72976685]
[-12.65540409 -226.74305725]
[-17.69857216 -211.13862610]
[-14.07467747 -196.58296204]
[-10.45078182 -182.02729797]
[-6.82688570 -167.47163391]
[-3.20299006 -152.91596985]
[9.65417004 -145.48434448]
[13.53666687 -130.77445984]
[5.65452099 -117.33907318]
[10.40548706 -111.51000214]
[9.15976906 -102.28425598]
[12.33808708 -87.62484741]
[15.51640511 -72.96543884]
[18.69472313 -58.30602646]
[23.26571465 -52.33478165]
[21.73922539 -43.15131760]
[24.46900940 -28.40180206]
[27.19879341 -13.65228367]
[46.10789108 -0.30578971]
[45.07266235 23.36780548]
[54.75336075 34.82572937]
[64.43405914 46.28365326]
[74.11476135 57.74158096]
[83.79546356 69.19950104]
[108.24192810 64.12493134]
[131.25360107 76.98028564]
[140.70698547 103.07126617]
[155.31622314 106.47277069]
[169.92546082 109.87426758]
[184.53469849 113.27577209]
[198.86065674 106.05453491]
[213.37779236 112.88332367]
[216.94979858 128.52366638]
[206.83653259 140.97763062]
[190.79603577 140.69161987]
[181.13319397 127.88500977]
[166.52395630 124.48350525]
[151.91471863 121.08200073]
[137.30548096 117.68050385]
[128.52575684 129.84259033]
[136.35348511 142.63816833]
[144.18121338 155.43374634]
[152.00892639 168.22930908]
[159.83665466 181.02488708]
[173.26004028 191.38101196]
[167.02461243 207.14665222]
[150.14894104 205.51927185]
[147.04107666 188.85261536]
[139.21334839 176.05703735]
[131.38563538 163.26145935]
[123.55790710 150.46589661]
[115.73018646 137.67031860]
[106.31819916 139.77677917]
[96.80476379 139.59951782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[31 66]
[32 65]
[33 64]
[34 62]
[35 61]
[36 60]
[37 59]
[38 57]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[75 87]
[76 86]
[77 85]
[78 84]
[88 100]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
