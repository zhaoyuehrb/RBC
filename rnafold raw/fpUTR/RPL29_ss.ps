%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGGCGUUGUUGACCCUAUUUCCCGUGCUGCACCGCAGCCCCUUUCUCUUCCGGUUCUAGGCGCUUCGGGAGCCGCGGCUUAUGGUGCAGAC\
) } def
/len { sequence length } bind def

/coor [
[1.95177484 245.07452393]
[-12.71969700 254.50192261]
[-29.67166138 258.49649048]
[-46.96298599 256.61654663]
[-62.61892700 249.09225464]
[-72.95922852 259.95861816]
[-76.70893860 268.51107788]
[-83.82560730 271.00619507]
[-94.51953125 281.52471924]
[-105.21346283 292.04327393]
[-112.26570892 307.46087646]
[-129.03303528 304.95223999]
[-131.26409912 288.14572144]
[-115.73200989 281.34936523]
[-105.03808594 270.83081055]
[-94.34416199 260.31225586]
[-83.82560730 249.61833191]
[-73.48530579 238.75195312]
[-80.06329346 227.84962463]
[-83.76078033 215.65347290]
[-84.34527588 202.91130066]
[-81.77533722 190.40582275]
[-76.20345306 178.90653992]
[-67.96700287 169.12248230]
[-57.56785202 161.65838623]
[-45.64176178 156.97738647]
[-32.91952133 155.37228394]
[-20.18216133 156.94718933]
[-8.21302605 161.61080933]
[2.25041866 169.08177185]
[13.93357754 159.67413330]
[25.61673737 150.26647949]
[37.29989624 140.85884094]
[48.98305511 131.45120239]
[60.66621399 122.04354858]
[72.34937286 112.63590240]
[84.03253174 103.22825623]
[89.57456970 87.48233032]
[106.06321716 84.87984467]
[117.42893982 75.09105682]
[128.79466248 65.30226898]
[140.16038513 55.51348495]
[125.17208862 54.92105484]
[112.03948975 47.67295456]
[103.54914093 35.30712128]
[101.50254822 20.44739342]
[106.33397675 6.24678516]
[117.01827240 -4.28155041]
[131.28839111 -8.90365982]
[146.11640930 -6.63880110]
[158.35607910 2.03245711]
[165.41029358 15.27020454]
[165.78227234 30.26559067]
[159.39321899 43.83666992]
[173.32153320 38.26871109]
[187.24983215 32.70075226]
[201.17814636 27.13279343]
[215.10646057 21.56483459]
[229.03477478 15.99687576]
[242.96308899 10.42891693]
[252.90522766 -1.87817013]
[267.59524536 0.58200300]
[273.59274292 -14.04008389]
[288.20504761 -20.06141853]
[302.76290894 -13.90965080]
[308.62942505 0.76548541]
[302.32406616 15.25749207]
[287.58773804 20.96851730]
[273.16320801 14.51031399]
[264.21731567 26.41914368]
[248.53103638 24.35722733]
[234.60273743 29.92518616]
[220.67442322 35.49314499]
[206.74610901 41.06110382]
[192.81779480 46.62906265]
[178.88948059 52.19702148]
[164.96118164 57.76498032]
[159.75401306 64.95803070]
[149.94917297 66.87921143]
[138.58345032 76.66799164]
[127.21772003 86.45677948]
[115.85199738 96.24556732]
[114.24359131 107.90580750]
[105.19901276 115.43865204]
[93.44017792 114.91141510]
[81.75701904 124.31906128]
[70.07386017 133.72671509]
[58.39070129 143.13435364]
[46.70754242 152.54200745]
[35.02438354 161.94964600]
[23.34122276 171.35728455]
[11.65806389 180.76493835]
[17.82068062 197.17747498]
[18.16170692 214.68249512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 18]
[6 17]
[8 16]
[9 15]
[10 14]
[30 92]
[31 91]
[32 90]
[33 89]
[34 88]
[35 87]
[36 86]
[37 85]
[39 82]
[40 81]
[41 80]
[42 79]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
