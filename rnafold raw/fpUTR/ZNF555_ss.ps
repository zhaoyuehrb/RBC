%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGCUCUGUCUAAUCAGGCCCCUGGGACGGGACGCCUCUGUCCUAGCCGUGAGUGCCCCGCCUGCCCCUAGCGGUCCCUGGCGUCCCGGUUCCUGUCGCGCUCACCUGCGCCGGUAGCGAAGAAAUCGCCCCGGGAC\
) } def
/len { sequence length } bind def

/coor [
[67.15882874 233.37687683]
[61.50985718 238.24624634]
[54.57038498 240.78532410]
[47.24995041 240.71281433]
[39.50662613 253.55963135]
[37.73149109 262.60794067]
[31.44034767 266.60650635]
[23.40867043 279.27505493]
[15.37699509 291.94360352]
[19.07570267 307.30899048]
[10.75496864 320.74554443]
[-4.64866400 324.28158569]
[-17.99649239 315.81924438]
[-21.36948776 300.37908936]
[-12.76651096 287.12149048]
[2.70844436 283.91192627]
[10.74012089 271.24337769]
[18.77179718 258.57482910]
[26.65979958 245.81631470]
[34.40312195 232.96948242]
[32.13669586 210.63829041]
[52.21623230 199.06997681]
[58.46147156 185.43191528]
[64.70671082 171.79383850]
[70.95195007 158.15576172]
[77.19718933 144.51770020]
[83.44242859 130.87962341]
[68.43054962 103.93312073]
[80.72149658 78.88989258]
[73.86637115 65.54795837]
[67.01123810 52.20602417]
[60.15611267 38.86408997]
[53.30098343 25.52215385]
[46.44585419 12.18021965]
[39.59072495 -1.16171432]
[32.73559570 -14.50364876]
[25.88046837 -27.84558296]
[10.67797661 -30.33364487]
[-0.01939717 -41.16967773]
[-2.25843000 -56.05089569]
[4.61229944 -69.23918915]
[-2.39316177 -82.50280762]
[-9.54806042 -95.68640900]
[-16.85148239 -108.78832245]
[-24.30249596 -121.80686188]
[-31.75350952 -134.82539368]
[-39.20452118 -147.84394836]
[-54.19013977 -152.09471130]
[-61.56107330 -165.40350342]
[-57.41625977 -179.66380310]
[-64.86727142 -192.68234253]
[-72.31828308 -205.70088196]
[-85.88852692 -213.83471680]
[-85.49537659 -228.72412109]
[-92.94638824 -241.74266052]
[-100.39739990 -254.76121521]
[-113.51287842 -265.50460815]
[-106.82005310 -281.08160400]
[-89.99906921 -278.96246338]
[-87.37886047 -262.21221924]
[-79.92784882 -249.19367981]
[-72.47683716 -236.17514038]
[-59.43954086 -228.97248840]
[-59.29974747 -213.15190125]
[-51.84873199 -200.13336182]
[-44.39772034 -187.11482239]
[-30.00261497 -183.46563721]
[-22.26077461 -170.36912537]
[-26.18598175 -155.29495239]
[-18.73496819 -142.27641296]
[-11.28395557 -129.25787354]
[-3.83294201 -116.23933411]
[2.27109194 -111.96057129]
[3.63554430 -102.84130859]
[10.79044247 -89.65770721]
[16.79622078 -85.24208832]
[17.95423317 -76.09432220]
[32.67683411 -74.00074768]
[43.47126770 -63.51531982]
[46.05184937 -48.50885391]
[39.22240067 -34.70071030]
[46.07752991 -21.35877800]
[52.93265915 -8.01684284]
[59.78778839 5.32509136]
[66.64291382 18.66702461]
[73.49804688 32.00896072]
[80.35317230 45.35089493]
[87.20830536 58.69282913]
[94.06343079 72.03475952]
[102.73989105 71.54318237]
[111.16316223 73.68116760]
[118.55490875 78.25114441]
[124.23207855 84.83082581]
[127.67008209 92.81222534]
[142.66911316 92.98173523]
[157.66816711 93.15123749]
[163.73101807 90.18817902]
[169.49645996 90.71633148]
[173.33714294 93.68265533]
[188.31320190 94.52975464]
[203.28926086 95.37685394]
[218.26531982 96.22395325]
[229.88549805 85.51195526]
[245.67312622 86.23760223]
[256.26165771 97.97038269]
[255.36915588 113.74945068]
[243.52507019 124.21336365]
[227.75633240 123.15406036]
[217.41822815 111.20001984]
[202.44215393 110.35292053]
[187.46609497 109.50581360]
[172.49003601 108.65871429]
[157.49865723 108.15028381]
[142.49961853 107.98077393]
[127.50057220 107.81126404]
[127.52735901 113.67840576]
[126.26972961 119.78781891]
[123.64679718 125.85601044]
[133.05583191 137.53805542]
[142.46485901 149.22009277]
[151.87390137 160.90213013]
[167.60632324 164.04382324]
[174.83070374 178.36820984]
[168.00509644 192.88684082]
[152.36553955 196.46226501]
[139.90934753 186.35173035]
[140.19186401 170.31117249]
[130.78282166 158.62911987]
[121.37379456 146.94708252]
[111.96475983 135.26504517]
[97.08049774 137.12486267]
[90.83525848 150.76293945]
[84.59001923 164.40100098]
[78.34477997 178.03907776]
[72.09954071 191.67715454]
[65.85430145 205.31521606]
[70.11257935 211.76943970]
[71.80424500 219.24418640]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 20]
[5 19]
[7 18]
[8 17]
[9 16]
[22 136]
[23 135]
[24 134]
[25 133]
[26 132]
[27 131]
[29 89]
[30 88]
[31 87]
[32 86]
[33 85]
[34 84]
[35 83]
[36 82]
[37 81]
[41 77]
[42 75]
[43 74]
[44 72]
[45 71]
[46 70]
[47 69]
[50 66]
[51 65]
[52 64]
[54 62]
[55 61]
[56 60]
[94 115]
[95 114]
[96 113]
[99 112]
[100 111]
[101 110]
[102 109]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
