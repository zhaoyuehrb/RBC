%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCGGCUGCCGGAAGCGGGUCUGGAGCGGGCGAGACGGCCAGGGCCGGCGAGCGCAGUGCAGCGCCGCGCGGUGCGGGCGGCCGAGUGGGGGCGUC\
) } def
/len { sequence length } bind def

/coor [
[36.70752716 150.72607422]
[25.06831932 147.02403259]
[11.55378723 153.53228760]
[-1.96074581 160.04054260]
[-11.86323071 175.46156311]
[-29.24134827 173.68829346]
[-42.54033661 180.62637329]
[-55.83932877 187.56443787]
[-62.14499664 194.43692017]
[-69.67762756 194.50401306]
[-83.19216156 201.01226807]
[-96.70669556 207.52052307]
[-110.22122955 214.02879333]
[-123.73576355 220.53704834]
[-128.71836853 235.53535461]
[-142.88424683 242.54273987]
[-157.82902527 237.40184021]
[-164.68624878 223.16267395]
[-159.38764954 208.27307129]
[-145.07676697 201.56677246]
[-130.24401855 207.02250671]
[-116.72948456 200.51425171]
[-103.21495056 194.00599670]
[-89.70041656 187.49774170]
[-76.18588257 180.98948669]
[-62.77740097 174.26545715]
[-49.47841263 167.32737732]
[-36.17942429 160.38931274]
[-32.18476486 148.84725952]
[-21.00345612 143.00173950]
[-8.46900177 146.52600098]
[5.04553127 140.01774597]
[18.56006432 133.50949097]
[27.53297615 118.52182007]
[45.81438065 119.80931091]
[59.11336899 112.87123871]
[72.41236115 105.93316650]
[85.71134949 98.99509430]
[93.37462616 87.30039978]
[107.35057831 87.70591736]
[120.64956665 80.76784515]
[125.30976105 60.45931244]
[142.98989868 49.97861481]
[162.49806213 55.48340225]
[174.80064392 46.90165329]
[187.10322571 38.31990433]
[199.40580750 29.73815346]
[211.70838928 21.15640259]
[218.60028076 6.91517544]
[233.46546936 5.97960997]
[236.54559326 -6.67131472]
[247.12576294 -13.54530144]
[259.14282227 -11.36203289]
[271.71414185 -19.54505539]
[284.28546143 -27.72807884]
[296.85678101 -35.91110229]
[304.20156860 -49.92411804]
[319.08911133 -50.38275146]
[331.66043091 -58.56577301]
[344.23175049 -66.74879456]
[356.80307007 -74.93182373]
[359.82684326 -90.44415283]
[372.98031616 -99.20549774]
[388.45980835 -96.01791382]
[397.08160400 -82.77252197]
[393.73052979 -67.32759094]
[380.39474487 -58.84632111]
[364.98611450 -62.36050034]
[352.41479492 -54.17747498]
[339.84347534 -45.99445343]
[327.27212524 -37.81142807]
[320.82653809 -24.38371849]
[305.03979492 -23.33978081]
[292.46847534 -15.15675831]
[279.89715576 -6.97373438]
[267.32583618 1.20928907]
[260.34317017 17.22134399]
[242.04722595 18.28219414]
[236.03530884 31.90959740]
[220.29014587 33.45898819]
[207.98756409 42.04073715]
[195.68498230 50.62248611]
[183.38240051 59.20423508]
[171.07980347 67.78598785]
[172.39172363 77.46940613]
[169.96746826 86.99644470]
[164.11721802 94.96980286]
[155.65686035 100.20312500]
[145.79444885 101.89742279]
[135.95777893 99.76277161]
[127.58763885 94.06683350]
[114.28865051 101.00490570]
[106.62537384 112.69960022]
[92.64942169 112.29408264]
[79.35043335 119.23215485]
[66.05144501 126.17022705]
[52.75245285 133.10830688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[6 28]
[7 27]
[8 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[35 97]
[36 96]
[37 95]
[38 94]
[40 92]
[41 91]
[44 84]
[45 83]
[46 82]
[47 81]
[48 80]
[50 78]
[53 76]
[54 75]
[55 74]
[56 73]
[58 71]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
