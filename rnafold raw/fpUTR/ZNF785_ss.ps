%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAAGGCAGAGAGGAAAGGCGAGGGGUGUUGACGCCAGGAAGGUUCCAUCUUGGUUAAGGGCAGGAGUCCCUUACGGACUUGUCUGAGGAAAGACAGGAAAGCGCCAGCAUCUCCACCUUCCCCGGAAGCCUCCCUUUGCCAGGCAGAAAGGGUUUCCC\
) } def
/len { sequence length } bind def

/coor [
[222.57183838 449.61734009]
[210.44522095 458.44601440]
[195.99053955 462.45376587]
[181.04905701 461.13006592]
[167.52407837 454.64355469]
[157.13844299 443.82049561]
[151.21510315 430.03958130]
[150.50860596 415.05621338]
[155.10893250 400.77908325]
[164.43008423 389.02679443]
[177.28471375 381.29641724]
[192.03535461 378.57269287]
[206.80300903 381.20251465]
[219.70477295 388.84939575]
[213.19651794 375.33486938]
[200.70329285 367.22506714]
[201.68667603 351.43444824]
[195.17842102 337.91992188]
[188.67016602 324.40539551]
[182.16191101 310.89086914]
[169.66868591 302.78106689]
[170.65208435 286.99044800]
[164.88742065 282.30477905]
[164.15158081 273.14813232]
[157.90824890 259.50918579]
[151.66493225 245.87025452]
[145.42160034 232.23129272]
[139.17828369 218.59234619]
[132.93495178 204.95339966]
[126.69163513 191.31445312]
[120.44830322 177.67550659]
[114.20497894 164.03656006]
[101.87237549 155.68455505]
[103.16368866 139.91613770]
[96.92035675 126.27718353]
[90.67703247 112.63823700]
[78.94956207 103.28588867]
[64.26330566 100.23404694]
[49.57704163 97.18221283]
[34.89077759 94.13037109]
[20.20451736 91.07852936]
[8.81147289 101.61314392]
[-6.60171175 103.40573120]
[-20.10835266 95.76699066]
[-26.51486969 81.63418579]
[-23.35782814 66.44166565]
[-11.85117340 56.03126144]
[3.58055115 54.40599060]
[17.00353241 62.19079590]
[23.25635910 76.39226532]
[37.94261932 79.44410706]
[52.62887955 82.49594879]
[67.31513977 85.54779053]
[82.00140381 88.59962463]
[86.26651764 82.43045044]
[94.79675293 70.09208679]
[99.06187439 63.92290878]
[91.01952362 51.26112747]
[82.97718048 38.59934616]
[74.93483734 25.93756485]
[66.89249420 13.27578449]
[58.85015106 0.61400288]
[50.68465805 -11.96871185]
[35.77024841 -18.78724861]
[34.48764420 -35.13616180]
[48.15628052 -44.19709015]
[62.71503448 -36.64892960]
[63.18710709 -20.25657845]
[69.53610992 -16.39950752]
[71.51193237 -7.42834091]
[79.55427551 5.23344040]
[87.59661865 17.89522171]
[95.63896179 30.55700302]
[103.68130493 43.21878433]
[111.72365570 55.88056564]
[119.18050385 55.07719803]
[117.57401276 40.16347122]
[132.48776245 38.55723572]
[134.09419250 53.47046280]
[141.55105591 52.66709900]
[146.71189880 38.58286285]
[151.87275696 24.49863052]
[157.03359985 10.41439819]
[162.19445801 -3.66983485]
[167.35530090 -17.75406837]
[172.51615906 -31.83830070]
[165.64149475 -46.06906509]
[170.92187500 -60.96514511]
[185.22453308 -67.68895721]
[200.06394958 -62.25138855]
[206.63616943 -47.87844467]
[201.04200745 -33.09734726]
[186.60038757 -26.67745018]
[181.43952942 -12.59321785]
[176.27868652 1.49101555]
[171.11782837 15.57524872]
[165.95698547 29.65948105]
[160.79612732 43.74371338]
[155.63528442 57.82794952]
[152.70381165 86.98075867]
[138.24200439 106.33838654]
[119.55674744 112.55403137]
[104.31598663 106.39491272]
[110.55931091 120.03385925]
[116.80263519 133.67280579]
[129.58180237 143.00036621]
[127.84393311 157.79322815]
[134.08724976 171.43218994]
[140.33058167 185.07113647]
[146.57389832 198.71008301]
[152.81723022 212.34902954]
[159.06054688 225.98797607]
[165.30387878 239.62692261]
[171.54719543 253.26586914]
[177.79052734 266.90481567]
[184.16662598 280.48220825]
[197.12536621 289.55865479]
[195.67645264 304.38259888]
[202.18470764 317.89712524]
[208.69296265 331.41168213]
[215.20121765 344.92620850]
[228.15995789 354.00265503]
[226.71104431 368.82659912]
[233.21929932 382.34112549]
[241.85494995 388.43627930]
[243.39404297 397.68997192]
[253.30712891 408.94744873]
[263.22021484 420.20492554]
[273.13330078 431.46240234]
[283.04638672 442.71987915]
[292.95947266 453.97732544]
[302.87258911 465.23480225]
[312.78567505 476.49227905]
[326.26699829 475.79711914]
[337.51440430 482.90359497]
[342.52600098 495.01727295]
[339.67285156 507.61270142]
[349.36441040 519.06146240]
[359.05593872 530.51019287]
[368.74749756 541.95892334]
[378.43905640 553.40771484]
[393.28762817 561.59033203]
[389.53524780 578.12384033]
[372.60913086 579.09503174]
[366.99029541 563.09924316]
[357.29873657 551.65051270]
[347.60720825 540.20172119]
[337.91564941 528.75299072]
[328.22409058 517.30426025]
[311.44204712 516.64453125]
[300.08789062 503.81512451]
[301.52819824 486.40536499]
[291.61511230 475.14788818]
[281.70202637 463.89041138]
[271.78890991 452.63296509]
[261.87582397 441.37548828]
[251.96273804 430.11801147]
[242.04965210 418.86053467]
[232.13656616 407.60305786]
[234.15527344 422.46661377]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 124]
[15 123]
[17 121]
[18 120]
[19 119]
[20 118]
[22 116]
[24 115]
[25 114]
[26 113]
[27 112]
[28 111]
[29 110]
[30 109]
[31 108]
[32 107]
[34 105]
[35 104]
[36 103]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[63 68]
[80 99]
[81 98]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
[126 159]
[127 158]
[128 157]
[129 156]
[130 155]
[131 154]
[132 153]
[133 152]
[137 149]
[138 148]
[139 147]
[140 146]
[141 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
