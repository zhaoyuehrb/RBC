%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGCGCCUGCGCCAGAACCGCUGCCUCGCUCCCGGAAGUGGAGGGUCUACACGAAGCGCCGCUGGGUCUGGGUGCCCGGAGGCAGCAGCGUUCGCGGAGUUCGCCCGCUGGCCCCCGAUCACC\
) } def
/len { sequence length } bind def

/coor [
[116.89682770 281.46191406]
[115.39140320 266.53765869]
[113.88597107 251.61338806]
[112.38054657 236.68911743]
[99.91462708 221.99411011]
[108.16876221 203.68447876]
[105.91538239 188.85470581]
[103.66199493 174.02493286]
[94.10054016 162.60443115]
[99.67689514 147.79852295]
[97.42350769 132.96875000]
[95.17012787 118.13897705]
[83.13662720 110.59511566]
[79.31344604 96.05076599]
[86.87236786 82.09147644]
[102.72666168 76.81044769]
[97.20479584 62.86379623]
[91.68292999 48.91714859]
[86.16106415 34.97050476]
[80.46437073 21.09434509]
[74.42077637 7.36572742]
[68.20514679 -6.28586245]
[61.98950958 -19.93745232]
[55.77387619 -33.58904266]
[49.55824280 -47.24063110]
[43.34260941 -60.89221954]
[37.12697601 -74.54380798]
[30.91134071 -88.19539642]
[24.18559265 -101.60301971]
[16.95928764 -114.74761963]
[3.53075647 -123.11333466]
[4.17959452 -137.99380493]
[-3.04671073 -151.13839722]
[-10.27301598 -164.28300476]
[-17.49932098 -177.42759705]
[-24.72562599 -190.57220459]
[-31.95193100 -203.71679688]
[-39.66852570 -216.57969666]
[-47.86444092 -229.14262390]
[-56.06035614 -241.70553589]
[-64.25627136 -254.26846313]
[-72.45218658 -266.83139038]
[-86.47272491 -274.16180420]
[-86.94663239 -289.04885864]
[-102.15419769 -292.42044067]
[-110.28706360 -305.27777100]
[-106.97904968 -319.75509644]
[-115.17496490 -332.31802368]
[-130.51521301 -337.01446533]
[-136.27360535 -351.98846436]
[-128.03282166 -365.75323486]
[-112.11446381 -367.74963379]
[-100.72974396 -356.44616699]
[-102.61204529 -340.51394653]
[-94.41613007 -327.95101929]
[-79.83307648 -325.14562988]
[-71.34229279 -312.52178955]
[-74.38371277 -297.24478149]
[-60.94939423 -290.81295776]
[-59.88926315 -275.02728271]
[-51.69334793 -262.46438599]
[-43.49743271 -249.90145874]
[-35.30151749 -237.33853149]
[-27.10560417 -224.77561951]
[-23.63283539 -223.71096802]
[-20.53342628 -220.84519958]
[-18.67916679 -216.38768005]
[-18.80733109 -210.94309998]
[-11.58102608 -197.79850769]
[-4.35472059 -184.65390015]
[2.87158442 -171.50930786]
[10.09788990 -158.36470032]
[17.32419395 -145.22010803]
[30.23585320 -137.79458618]
[30.10388756 -121.97392273]
[37.33019257 -108.82932281]
[40.71289825 -107.50611115]
[43.58763504 -104.41501617]
[45.10085297 -99.83049011]
[44.56293106 -94.41103363]
[50.77856445 -80.75944519]
[56.99419785 -67.10785675]
[63.20983124 -53.45626450]
[69.42546844 -39.80467606]
[75.64109802 -26.15308571]
[81.85673523 -12.50149632]
[88.07236481 1.15009367]
[93.77111816 5.98792028]
[94.26785278 15.22373962]
[99.84322357 20.20324898]
[100.10770416 29.44863510]
[105.62957764 43.39528275]
[111.15144348 57.34193039]
[116.67330933 71.28857422]
[127.60784149 81.55678558]
[141.87368774 86.19203949]
[156.13954163 90.82729340]
[171.02925110 84.85436249]
[184.91099548 92.89655304]
[187.13587952 108.78458405]
[175.99716187 120.33051300]
[160.03952026 118.67729950]
[151.50428772 105.09313965]
[137.23843384 100.45788574]
[122.97258759 95.82263184]
[119.27632904 108.48252106]
[109.99990082 115.88558960]
[112.25328827 130.71536255]
[114.50666809 145.54513550]
[124.22930908 158.02636719]
[118.49177551 171.77154541]
[120.74515533 186.60131836]
[122.99854279 201.43109131]
[132.22758484 207.44915771]
[136.47488403 217.37547302]
[134.53605652 227.77207947]
[127.30481720 235.18370056]
[128.81024170 250.10795593]
[130.31565857 265.03222656]
[131.82109070 279.95648193]
[143.28692627 291.17764282]
[141.51942444 307.12304688]
[127.87446594 315.56072998]
[112.81929016 310.01803589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 120]
[2 119]
[3 118]
[4 117]
[6 113]
[7 112]
[8 111]
[10 109]
[11 108]
[12 107]
[16 94]
[17 93]
[18 92]
[19 91]
[20 89]
[21 87]
[22 86]
[23 85]
[24 84]
[25 83]
[26 82]
[27 81]
[28 80]
[29 76]
[30 75]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[37 68]
[38 64]
[39 63]
[40 62]
[41 61]
[42 60]
[44 58]
[47 55]
[48 54]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
