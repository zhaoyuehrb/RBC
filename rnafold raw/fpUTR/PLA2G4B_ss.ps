%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAUUGGGACAUCACAUCCCUGGCUCUGGGUUAGAAAGCUGACAGUCCUUGAUCCUGUGGCCACUGCCCCAUCAUUCCUGCUCCUGAGGACUCAGUCUC\
) } def
/len { sequence length } bind def

/coor [
[-34.71105957 275.35430908]
[-43.83708954 271.94717407]
[-54.92222214 282.05261230]
[-66.00735474 292.15805054]
[-67.67649841 297.47628784]
[-70.96649170 301.15124512]
[-74.92708588 302.83355713]
[-78.61328125 302.62585449]
[-90.58354187 311.66537476]
[-102.55379486 320.70489502]
[-114.52405548 329.74441528]
[-115.14568329 345.36965942]
[-125.70376587 356.90484619]
[-141.21310425 358.90344238]
[-154.35066223 350.42178345]
[-158.91328430 335.46463013]
[-152.74664307 321.09429932]
[-138.76243591 314.09600830]
[-123.56357574 317.77416992]
[-111.59331512 308.73464966]
[-99.62305450 299.69512939]
[-87.65280151 290.65560913]
[-76.11279297 281.07290649]
[-65.02765656 270.96746826]
[-53.94252396 260.86203003]
[-54.98568344 240.60546875]
[-40.81409073 225.69963074]
[-19.96273232 225.71952820]
[-10.20345783 214.32846069]
[-0.44418287 202.93739319]
[9.31509209 191.54631042]
[19.07436562 180.15524292]
[28.83364105 168.76416016]
[38.59291458 157.37309265]
[34.29278183 144.63275146]
[36.91386032 131.33328247]
[45.86906433 121.01282501]
[58.87178040 116.47158051]
[72.51897430 119.01262665]
[82.62441254 107.92749023]
[82.06009674 93.44895935]
[91.82162476 82.74107361]
[106.29045868 81.96707153]
[109.84413147 73.35893250]
[116.88185120 70.70230103]
[127.32386017 59.93362045]
[137.76586914 49.16493988]
[134.38951111 35.70005798]
[138.12168884 22.44244385]
[147.87127686 12.86888409]
[160.98416138 9.43405056]
[173.96505737 12.94172192]
[184.73373413 2.49971223]
[195.50242615 -7.94229698]
[206.27110291 -18.38430595]
[205.81892395 -29.47071838]
[211.51292419 -38.73456955]
[221.20521545 -43.15343857]
[231.49528503 -41.44866943]
[236.07984924 -49.55486679]
[243.39070129 -51.32650757]
[255.07691956 -60.73036575]
[266.76312256 -70.13422394]
[272.17941284 -85.61310577]
[288.34075928 -88.39563751]
[298.62179565 -75.61937714]
[292.44622803 -60.42745209]
[276.16699219 -58.44801331]
[264.48077393 -49.04415512]
[252.79455566 -39.64029694]
[241.25454712 -30.05759621]
[236.38439941 -11.45185947]
[216.71310425 -7.61562729]
[205.94442749 2.82638192]
[195.17575073 13.26839066]
[184.40707397 23.71039963]
[187.26722717 39.79374313]
[179.96043396 54.58853912]
[165.15744019 62.24503708]
[148.53454590 59.60694885]
[138.09254456 70.37562561]
[127.65052795 81.14431000]
[117.37558746 92.07250977]
[117.93990326 106.55104065]
[108.17837524 117.25892639]
[93.70954132 118.03292847]
[83.60411072 129.11805725]
[87.26051331 145.54702759]
[80.52982330 160.79327393]
[66.21289825 168.99699402]
[49.98398972 167.13237000]
[40.22471619 178.52343750]
[30.46544075 189.91452026]
[20.70616531 201.30558777]
[10.94689083 212.69665527]
[1.18761635 224.08773804]
[-8.57165813 235.47880554]
[-4.92140818 244.88905334]
[-5.05173588 254.92292786]
[-8.89990330 264.12689209]
[-15.86776447 271.18402100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[4 23]
[8 22]
[9 21]
[10 20]
[11 19]
[28 97]
[29 96]
[30 95]
[31 94]
[32 93]
[33 92]
[34 91]
[39 87]
[40 86]
[43 83]
[45 82]
[46 81]
[47 80]
[52 76]
[53 75]
[54 74]
[55 73]
[59 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
