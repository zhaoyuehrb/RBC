%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCCGGCUCUGCCGUGAAGAGCUUUGCAUUGUGGGAAGUCUUUCCUUUCUCGUUCCCCGGCCAUCUUAGCGGCUGCUGUUGGUUGGGGGCCGUCCCGCUCCUAAGGCAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[51.94894028 244.46395874]
[43.97714615 244.88803101]
[36.22624207 243.09390259]
[27.47532272 255.27673340]
[18.72440338 267.45956421]
[10.13925457 279.75979614]
[1.72144890 292.17510986]
[-6.69635725 304.59045410]
[-15.11416340 317.00579834]
[-18.99839020 333.50878906]
[-35.93171310 334.34484863]
[-41.42270279 318.30471802]
[-27.52949715 308.58798218]
[-19.11169243 296.17263794]
[-10.69388580 283.75732422]
[-2.27608013 271.34197998]
[-1.11149061 263.94155884]
[6.54157114 258.70864868]
[15.29249001 246.52581787]
[24.04340935 234.34298706]
[17.62689018 212.79960632]
[28.91351891 193.06515503]
[51.23149490 187.54954529]
[57.52983093 173.93591309]
[63.82816696 160.32228088]
[70.12650299 146.70864868]
[76.42484283 133.09501648]
[82.72317505 119.48138428]
[75.35312653 108.39908600]
[74.42221832 95.12248230]
[80.17366028 83.12015533]
[91.10485077 75.52778625]
[104.35994720 74.32893372]
[111.02462006 60.89084625]
[117.68930054 47.45276260]
[124.35397339 34.01467896]
[131.01864624 20.57659531]
[137.68331909 7.13851166]
[124.26644897 13.84577465]
[109.31454468 15.04600716]
[94.99954224 10.56486225]
[83.40084839 1.05327404]
[76.20330048 -12.10709476]
[74.45242310 -27.00455856]
[78.40254211 -41.47509766]
[87.47987366 -53.41670990]
[100.36582184 -61.09474945]
[115.18857574 -63.39389038]
[129.79495239 -59.98016357]
[142.06324768 -51.34944916]
[150.21131897 -38.75544739]
[153.05560303 -24.02758217]
[150.18220520 -9.30348492]
[161.34748840 -19.32030106]
[166.45278931 -34.29516220]
[181.09323120 -37.03500366]
[192.25851440 -47.05181885]
[203.42378235 -57.06863785]
[214.58906555 -67.08545685]
[225.75433350 -77.10227203]
[236.91961670 -87.11908722]
[248.08488464 -97.13590240]
[259.25015259 -107.15271759]
[270.41543579 -117.16953278]
[281.58071899 -127.18634796]
[281.55426025 -138.23092651]
[287.55227661 -147.24028015]
[297.34350586 -151.30668640]
[307.52520752 -149.28312683]
[319.21640015 -158.68077087]
[330.90759277 -168.07841492]
[342.59878540 -177.47607422]
[348.02328491 -192.95207214]
[364.18612671 -195.72602844]
[374.46035767 -182.94430542]
[368.27673340 -167.75566101]
[351.99645996 -165.78486633]
[340.30523682 -156.38722229]
[328.61404419 -146.98956299]
[316.92285156 -137.59191895]
[311.42398071 -119.13631439]
[291.59753418 -116.02107239]
[280.43225098 -106.00425720]
[269.26696777 -95.98744202]
[258.10171509 -85.97062683]
[246.93643188 -75.95381165]
[235.77114868 -65.93699646]
[224.60588074 -55.92017746]
[213.44059753 -45.90336227]
[202.27532959 -35.88654327]
[191.11004639 -25.86972809]
[186.80335999 -11.61133862]
[171.36430359 -8.15502548]
[160.19902039 1.86179113]
[151.12141418 13.80318737]
[144.45674133 27.24127007]
[137.79205322 40.67935562]
[131.12738037 54.11743927]
[124.46270752 67.55551910]
[117.79803467 80.99360657]
[125.59111786 95.19294739]
[123.48184967 111.25235748]
[112.28640747 122.95772552]
[96.33680725 125.77971649]
[90.03846741 139.39335632]
[83.74013519 153.00698853]
[77.44179535 166.62062073]
[71.14346313 180.23423767]
[64.84512329 193.84786987]
[70.29708862 199.97410583]
[73.82743835 207.34602356]
[75.17362976 215.38044739]
[74.24520111 223.44639587]
[71.12978363 230.91461182]
[66.08498383 237.20668030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 16]
[7 15]
[8 14]
[9 13]
[23 109]
[24 108]
[25 107]
[26 106]
[27 105]
[28 104]
[33 100]
[34 99]
[35 98]
[36 97]
[37 96]
[38 95]
[53 94]
[54 93]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
