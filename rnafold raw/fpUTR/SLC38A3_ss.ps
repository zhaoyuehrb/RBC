%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCCGCGUCGCUGUUGUCGCUGUUGCAGCCGAGUUCAGCCGGGAGCAGAGCGAACCGCACCGGCCCGAGCGGAGCGCCGCACGUUCCCAACCGCGAGGCCAGACAUCUGACUGUUGGUGUGAGACCAGUGCUCCUGGUGGUGUGCCCUGAGCC\
) } def
/len { sequence length } bind def

/coor [
[-75.67890930 270.43643188]
[-79.25156403 270.18417358]
[-91.47554016 278.87750244]
[-103.69952393 287.57086182]
[-115.92350769 296.26422119]
[-128.14749146 304.95755005]
[-129.85330200 309.09637451]
[-132.53941345 312.13973999]
[-135.72883606 313.91180420]
[-138.93708801 314.41415405]
[-141.73223877 313.81225586]
[-154.62008667 321.48709106]
[-167.50794983 329.16192627]
[-180.39581299 336.83676147]
[-181.92974854 352.16494751]
[-192.07667542 363.51806641]
[-206.78904724 366.68194580]
[-220.38063049 360.64810181]
[-233.26847839 368.32293701]
[-246.15634155 375.99777222]
[-258.96575928 383.80282593]
[-271.69543457 391.73730469]
[-284.42507935 399.67175293]
[-294.66857910 413.18127441]
[-310.48583984 407.07791138]
[-308.99963379 390.18923950]
[-292.35955811 386.94207764]
[-279.62988281 379.00762939]
[-266.90020752 371.07318115]
[-262.86361694 364.82934570]
[-253.83117676 363.10992432]
[-240.94332886 355.43508911]
[-228.05546570 347.76025391]
[-226.88528442 332.93563843]
[-217.09432983 321.50756836]
[-202.27828979 317.99499512]
[-188.07064819 323.94891357]
[-175.18278503 316.27407837]
[-162.29493713 308.59924316]
[-149.40707397 300.92440796]
[-136.84083557 292.73358154]
[-124.61685181 284.04022217]
[-112.39287567 275.34689331]
[-100.16889191 266.65353394]
[-87.94490814 257.96017456]
[-75.99083710 248.89927673]
[-64.31771851 239.47917175]
[-62.99608231 224.68765259]
[-51.29207230 214.96804810]
[-35.78633499 216.45458984]
[-24.11321831 207.03448486]
[-20.86386490 200.34709167]
[-12.10672379 197.54464722]
[-11.72010422 187.26188660]
[-5.58322382 178.72926331]
[4.45431614 174.93524170]
[15.13050175 177.37303162]
[27.35448265 168.67967224]
[39.57846451 159.98632812]
[51.80244446 151.29298401]
[64.02642822 142.59963989]
[76.25040436 133.90628052]
[78.19631958 66.03865814]
[80.91739655 51.28753281]
[83.63847351 36.53640747]
[86.35955048 21.78528023]
[88.93099976 7.00733614]
[91.35255432 -7.79590893]
[77.33627319 -20.73726273]
[73.90877533 -39.35243988]
[82.26395416 -56.17045593]
[98.90305328 -64.55030060]
[100.42057800 -79.47333527]
[101.93810272 -94.39637756]
[103.45562744 -109.31941986]
[104.97315216 -124.24245453]
[106.49067688 -139.16549683]
[97.50756836 -152.45773315]
[102.43629456 -167.72491455]
[117.49595642 -173.25540161]
[131.13407898 -164.80664062]
[132.88864136 -148.85981750]
[121.41371918 -137.64797974]
[119.89619446 -122.72492981]
[118.37866974 -107.80189514]
[116.86114502 -92.87885284]
[115.34362030 -77.95581055]
[113.82609558 -63.03277206]
[123.47688293 -57.24298859]
[130.27873230 -48.21212006]
[133.20544434 -37.23835373]
[131.79139709 -25.91746521]
[126.20511627 -15.91078281]
[117.23024750 -8.70138836]
[106.15579987 -5.37435198]
[103.73424530 9.42889309]
[105.77010345 16.57975960]
[101.11067963 24.50635719]
[98.38960266 39.25748444]
[95.66852570 54.00860977]
[92.94744873 68.75973511]
[98.16952515 74.14303589]
[108.61367035 84.90964508]
[113.83574677 90.29294586]
[128.66276550 88.02153015]
[143.48979187 85.75011444]
[158.31681824 83.47869873]
[173.14384460 81.20727539]
[180.13847351 67.35610962]
[193.95411682 60.29158020]
[209.27838135 62.73013687]
[220.21876526 73.73410797]
[222.56848145 89.07225037]
[215.42401123 102.84672546]
[201.53254700 109.76096344]
[186.23564148 107.15631104]
[175.41526794 96.03430176]
[160.58824158 98.30571747]
[145.76121521 100.57713318]
[130.93418884 102.84855652]
[116.10716248 105.11997223]
[114.30094147 112.39922333]
[125.10279083 122.80692291]
[110.68850708 126.95774078]
[108.88228607 134.23699951]
[120.92757416 143.17630005]
[132.97285461 152.11560059]
[145.01814270 161.05491638]
[157.06341553 169.99421692]
[173.08023071 169.07705688]
[183.67584229 181.12332153]
[180.72221375 196.89215088]
[166.48510742 204.28703308]
[151.88601685 197.63525391]
[148.12411499 182.03948975]
[136.07882690 173.10018921]
[124.03354645 164.16088867]
[111.98826599 155.22158813]
[99.94298553 146.28227234]
[84.94375610 146.13026428]
[72.71977234 154.82360840]
[60.49579239 163.51696777]
[48.27181244 172.21031189]
[36.04782867 180.90365601]
[23.82384872 189.59700012]
[16.34355545 208.27455139]
[-2.92513418 209.40628052]
[-14.69311523 218.70761108]
[-26.36623192 228.12770081]
[-28.18826294 243.59761047]
[-40.16065598 252.98464966]
[-54.89761734 251.15228271]
[-66.57073212 260.57238770]
[-68.48455048 265.55535889]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[11 40]
[12 39]
[13 38]
[14 37]
[18 33]
[19 32]
[20 31]
[21 29]
[22 28]
[23 27]
[46 153]
[47 152]
[50 149]
[51 148]
[53 147]
[57 145]
[58 144]
[59 143]
[60 142]
[61 141]
[62 140]
[63 101]
[64 100]
[65 99]
[66 98]
[67 96]
[68 95]
[72 88]
[73 87]
[74 86]
[75 85]
[76 84]
[77 83]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[125 139]
[126 138]
[127 137]
[128 136]
[129 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
