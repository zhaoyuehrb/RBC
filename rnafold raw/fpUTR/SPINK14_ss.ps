%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUUUUCUCUUCUUUCUGAGUGAUUGUAUUAGAGGGCAACAACCUGAGACAAUAUUUCAGAGCAUCAUUCCAAGGACACACCAGGAGGAAAA\
) } def
/len { sequence length } bind def

/coor [
[81.44090271 279.41134644]
[65.71432495 277.84600830]
[55.76560211 265.56600952]
[57.49712753 249.85685730]
[69.88162231 240.03852844]
[71.36730957 225.11227417]
[72.85298920 210.18603516]
[74.33867645 195.25979614]
[75.82435608 180.33354187]
[77.31004333 165.40730286]
[78.79572296 150.48106384]
[80.28141022 135.55482483]
[81.76708984 120.62857819]
[79.26092529 108.19912720]
[83.00471497 98.39790344]
[89.99648285 93.66587067]
[82.85726929 80.47376251]
[75.71806335 67.28165436]
[68.57884979 54.08955002]
[61.43964005 40.89744186]
[54.30042648 27.70533752]
[47.16121674 14.51323032]
[32.28096008 9.90717411]
[25.22871399 -3.57319880]
[29.71158600 -17.73086166]
[22.57237625 -30.92296791]
[15.43316460 -44.11507416]
[8.29395390 -57.30718231]
[1.15474284 -70.49929047]
[-12.21816540 -78.95362854]
[-11.47092533 -93.82947540]
[-18.61013603 -107.02158356]
[-25.74934769 -120.21369171]
[-32.88855743 -133.40579224]
[-39.86370850 -139.61483765]
[-40.03750992 -147.15422058]
[-55.36454010 -149.57531738]
[-66.31745911 -160.56681824]
[-68.68464661 -175.90228271]
[-61.55586624 -189.68487549]
[-47.67228317 -196.61494446]
[-32.37241745 -194.02770996]
[-21.53938103 -182.91802979]
[-19.33869553 -167.55781555]
[-26.61656952 -153.85334778]
[-19.69645119 -140.54501343]
[-12.55724049 -127.35290527]
[-5.41802979 -114.16079712]
[1.72118115 -100.96868896]
[14.58344555 -93.45793915]
[14.34684944 -77.63849640]
[21.48605919 -64.44638824]
[28.62527084 -51.25428391]
[35.76448059 -38.06217957]
[42.90369415 -24.87007332]
[57.20791245 -20.87947655]
[64.63601685 -7.60250568]
[60.35332489 7.37401962]
[67.49253082 20.56612587]
[74.63174438 33.75823212]
[81.77095795 46.95034027]
[88.91016388 60.14244461]
[96.04937744 73.33454895]
[103.18859100 86.52665710]
[100.81494904 71.71565247]
[105.33218384 57.41199875]
[115.78180695 46.65070724]
[129.94656372 41.71516800]
[144.82090759 43.65262222]
[157.24873352 52.05197906]
[164.59304810 65.13101196]
[165.29548645 80.11455536]
[159.20700073 93.82332611]
[147.61947632 103.34853363]
[132.99162292 106.66905975]
[118.42742157 103.08044434]
[130.98492432 111.28466797]
[146.91841125 109.41290283]
[158.21432495 120.80509186]
[156.20739746 136.72212219]
[142.43717957 144.95381165]
[127.46699524 139.18550110]
[122.78070068 123.84216309]
[110.22319794 115.63793945]
[96.69333649 122.11425781]
[95.20764923 137.04049683]
[93.72196960 151.96675110]
[92.23628235 166.89299011]
[90.75060272 181.81922913]
[89.26491547 196.74546814]
[87.77923584 211.67172241]
[86.29354858 226.59796143]
[84.80786896 241.52420044]
[95.01402283 253.59111023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 93]
[6 92]
[7 91]
[8 90]
[9 89]
[10 88]
[11 87]
[12 86]
[13 85]
[16 64]
[17 63]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[31 49]
[32 48]
[33 47]
[34 46]
[36 45]
[76 84]
[77 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
