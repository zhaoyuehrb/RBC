%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCCUGCACCCUCGCUGCCUCCUUUCCUCCAUGCUGCCUGGAUCUGGCGAGCUGGGGUGAUUAAUUGGCU\
) } def
/len { sequence length } bind def

/coor [
[91.83567810 343.69503784]
[79.36104584 335.19290161]
[69.64373016 323.63970947]
[63.40483093 309.89276123]
[61.10731125 294.97216797]
[62.92165756 279.98513794]
[68.71323395 266.04382324]
[78.05227661 254.18275452]
[90.24575806 245.28210449]
[104.38883972 240.00234985]
[103.11675262 225.05639648]
[101.84466553 210.11042786]
[100.57257080 195.16447449]
[99.30048370 180.21850586]
[98.02839661 165.27255249]
[89.23962402 153.24729919]
[95.77870941 138.84066772]
[94.50662231 123.89470673]
[93.23453522 108.94873810]
[91.64550018 94.03314972]
[89.74022675 79.15464020]
[87.83496094 64.27613068]
[75.86981201 59.61176682]
[67.16383362 50.27105713]
[63.39517212 38.14782715]
[65.24964905 25.66264343]
[72.29694366 15.27954960]
[83.08828735 9.01977158]
[82.45166779 -5.96671295]
[81.81505585 -20.95319748]
[67.77450562 -26.93865585]
[57.72785950 -38.42898941]
[53.66989517 -53.14278030]
[56.40631485 -68.15859985]
[65.39380646 -80.49504089]
[78.84789276 -87.70269012]
[94.09725952 -88.35047913]
[108.11412811 -82.30977631]
[118.11544037 -70.77996826]
[122.11544037 -56.05031204]
[119.31990814 -41.04538727]
[110.28390503 -28.74443436]
[96.80153656 -21.58981514]
[97.43815613 -6.60333109]
[98.07477570 8.38315392]
[113.09115601 17.20335388]
[120.07617950 33.32356262]
[116.17523956 50.61070633]
[102.71347046 62.37086868]
[104.61873627 77.24937439]
[106.52400208 92.12787628]
[110.70026398 99.32963562]
[108.18049622 107.67665100]
[109.45258331 122.62261200]
[110.72467041 137.56857300]
[119.60443878 150.66287231]
[112.97435760 164.00045776]
[114.24644470 178.94642639]
[115.51853943 193.89237976]
[116.79062653 208.83834839]
[118.06271362 223.78430176]
[119.33480072 238.73027039]
[134.16673279 241.54388428]
[147.68904114 248.25579834]
[158.89826965 258.36795044]
[166.96264648 271.12994385]
[171.28370667 285.59475708]
[171.54083252 300.68902588]
[167.71492004 315.29260254]
[160.08987427 328.32186890]
[149.23155212 338.80990601]
[135.94567871 345.97848511]
[121.21818542 349.29562378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[17 55]
[18 54]
[19 53]
[20 51]
[21 50]
[22 49]
[28 45]
[29 44]
[30 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
