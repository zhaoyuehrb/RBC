%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGGCUGCGUUGGGGCCUUUUUUUCGCAUCCUGCUUCGUCAGGUUUAUACCACUUUAUUUGGUGUGCUGUGUUAGUCACC\
) } def
/len { sequence length } bind def

/coor [
[80.63711548 149.20899963]
[68.70027161 142.62362671]
[58.19701385 153.33258057]
[47.69375229 164.04151917]
[37.19049072 174.75047302]
[26.68723297 185.45941162]
[22.54800034 200.72955322]
[8.11225605 204.39814758]
[1.33808208 219.93992615]
[-15.47159672 217.73287964]
[-18.00418663 200.96916199]
[-2.59669042 193.89488220]
[0.79127747 179.39071655]
[15.97828674 174.95616150]
[26.48154640 164.24720764]
[36.98480606 153.53826904]
[47.48806763 142.82931519]
[57.99132538 132.12037659]
[53.72475433 125.59391022]
[50.46426392 118.51101685]
[48.28074265 111.02565765]
[47.22166443 103.30059814]
[47.31005096 95.50376892]
[48.54398346 87.80470276]
[50.89663696 80.37077332]
[54.31686020 73.36360931]
[58.73028946 66.93554688]
[64.04097748 61.22635651]
[70.13346100 56.36014938]
[76.87527466 52.44272995]
[72.29538727 38.15901184]
[67.71549225 23.87529373]
[63.13560486 9.59157562]
[48.96893311 2.58579850]
[43.98462677 -12.41194344]
[51.13979340 -26.50375557]
[66.18939209 -31.32921600]
[80.20476532 -24.02546501]
[84.87084198 -8.92568684]
[77.41932678 5.01168585]
[81.99921417 19.29540443]
[86.57910156 33.57912064]
[91.15899658 47.86283875]
[112.63995361 48.65140152]
[132.03242493 57.92423248]
[146.13223267 74.14918518]
[160.12548828 68.74652100]
[174.11874390 63.34385681]
[188.11199951 57.94119263]
[202.10525513 52.53852463]
[216.09851074 47.13586044]
[230.09176636 41.73319244]
[234.98265076 26.88014030]
[248.30380249 18.68983650]
[263.76535034 21.02949524]
[274.06686401 32.79439926]
[274.34426880 48.42952347]
[264.46655273 60.55243683]
[249.09771729 63.43907166]
[235.49443054 55.72644806]
[221.50117493 61.12911606]
[207.50791931 66.53178406]
[193.51466370 71.93444824]
[179.52140808 77.33711243]
[165.52815247 82.73977661]
[151.53489685 88.14244080]
[152.33108521 107.60948181]
[146.02368164 126.04357910]
[133.46885681 140.94242859]
[141.21934509 153.78492737]
[148.96983337 166.62744141]
[164.13601685 171.85873413]
[169.36596680 187.02539062]
[160.64772034 200.49281311]
[144.66917419 201.92997742]
[133.68769836 190.23440552]
[136.12733459 174.37792969]
[128.37684631 161.53541565]
[120.62635040 148.69291687]
[107.49257660 152.34794617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[8 12]
[30 43]
[31 42]
[32 41]
[33 40]
[46 66]
[47 65]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[69 79]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
