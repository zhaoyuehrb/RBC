%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGCUCCGGGACCGCGCUCGGGGGCGGGUCUAUAGUGGGAAGGGGACGCGCGCCCUGCGGCCCGGCCUCUAGUCAUCGCCCUCGCAGCGGCGGCCAACAUCACCGCCACUGCCACCCCUCCCAGACUGUGGACGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[79.04096222 147.11351013]
[62.28554153 135.16508484]
[51.53712463 117.61572266]
[48.50767517 97.26059723]
[33.80404663 94.29356384]
[19.10041618 91.32653809]
[4.39678526 88.35950470]
[-10.44838238 86.20985413]
[-25.38968468 84.88415527]
[-40.33098602 83.55844879]
[-55.27228928 82.23274994]
[-70.21359253 80.90705109]
[-79.11863708 83.27858734]
[-85.46952057 79.38317108]
[-100.37784576 77.72725677]
[-115.28616333 76.07135010]
[-130.19447327 74.41543579]
[-145.10279846 72.75952911]
[-150.02540588 74.92777252]
[-154.79826355 74.93512726]
[-158.60612488 73.21520996]
[-160.93309021 70.46722412]
[-175.69874573 67.82620239]
[-190.46441650 65.18517303]
[-205.41130066 70.37182617]
[-216.57745361 60.51452255]
[-231.34312439 57.87349701]
[-246.10879517 55.23246765]
[-261.05566406 60.41912079]
[-272.22183228 50.56182098]
[-286.98748779 47.92079163]
[-301.75314331 45.27976608]
[-316.51882935 42.63873672]
[-325.41720581 55.03960800]
[-338.81900024 62.34400940]
[-354.06332397 63.10164261]
[-368.12335205 57.16208267]
[-378.20745850 45.70462799]
[-382.31347656 31.00417328]
[-379.62612915 15.97949696]
[-370.67898560 3.61376286]
[-357.24850464 -3.63780451]
[-342.00134277 -4.33540106]
[-327.96481323 1.65948200]
[-317.92587280 13.15655613]
[-313.87780762 27.87306786]
[-299.11212158 30.51409531]
[-284.34646606 33.15512466]
[-269.58078003 35.79615021]
[-255.69004822 30.42059517]
[-243.46775818 40.46680069]
[-228.70208740 43.10782623]
[-213.93641663 45.74885559]
[-200.04568481 40.37329865]
[-187.82339478 50.41950226]
[-173.05772400 53.06053162]
[-158.29205322 55.70155716]
[-143.44688416 57.85121155]
[-128.53857422 59.50711823]
[-113.63024902 61.16302872]
[-98.72193146 62.81893921]
[-83.81361389 64.47485352]
[-68.88788605 65.96574402]
[-53.94658661 67.29145050]
[-39.00528336 68.61714935]
[-24.06398201 69.94284821]
[-9.12268066 71.26855469]
[-16.20319366 58.04484940]
[-10.48798370 44.17631149]
[3.85347867 39.78057861]
[16.35853386 48.06451416]
[17.90425301 62.98466110]
[7.36381388 73.65587616]
[22.06744385 76.62290955]
[36.77107620 79.58993530]
[51.47470474 82.55696106]
[56.90654373 71.68184662]
[64.73331451 62.38052368]
[74.52005005 55.16991806]
[85.72284698 50.45076370]
[97.71910095 48.48532867]
[109.84211731 49.38284302]
[121.41815186 53.09342575]
[131.80386353 59.41086197]
[140.42205811 67.98405457]
[146.79379272 78.33654785]
[161.17765808 74.08162689]
[175.56152344 69.82669830]
[189.94538879 65.57176971]
[200.98393250 54.23770523]
[215.38319397 58.04694748]
[229.76707458 53.79202271]
[244.15093994 49.53709412]
[258.53479004 45.28216934]
[272.91867065 41.02724075]
[277.13644409 26.18764114]
[288.72268677 16.00123596]
[303.98022461 13.71847057]
[318.04046631 20.06776810]
[326.41680908 33.02309036]
[326.43640137 48.45044327]
[318.09301758 61.42700958]
[304.04895020 67.81201935]
[288.78567505 65.56803894]
[277.17358398 55.41110992]
[262.78973389 59.66603470]
[248.40585327 63.92096329]
[234.02198792 68.17588806]
[219.63812256 72.43081665]
[209.62841797 83.46054077]
[194.20031738 79.95563507]
[179.81645203 84.21056366]
[165.43258667 88.46549225]
[151.04872131 92.72041321]
[151.45471191 103.37278748]
[149.66166687 113.88101196]
[145.74620056 123.79599762]
[139.87564087 132.69400024]
[132.30088806 140.19473267]
[139.89648438 153.12945557]
[147.49208069 166.06416321]
[155.08767700 178.99888611]
[162.68325806 191.93360901]
[170.27885437 204.86833191]
[185.56382751 204.07556152]
[199.46154785 210.48742676]
[208.77842712 222.63049316]
[211.37351990 237.71440125]
[206.65049744 252.27296448]
[195.69467163 262.96072388]
[181.02359009 267.32171631]
[166.00859070 264.35385132]
[154.10000610 254.73905945]
[148.03431702 240.68679810]
[149.20539856 225.42614746]
[157.34414673 212.46391296]
[149.74855042 199.52920532]
[142.15295410 186.59448242]
[134.55735779 173.65975952]
[126.96176147 160.72505188]
[119.36616516 147.79032898]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 76]
[5 75]
[6 74]
[7 73]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[22 57]
[23 56]
[24 55]
[26 53]
[27 52]
[28 51]
[30 49]
[31 48]
[32 47]
[33 46]
[86 114]
[87 113]
[88 112]
[89 111]
[91 109]
[92 108]
[93 107]
[94 106]
[95 105]
[119 141]
[120 140]
[121 139]
[122 138]
[123 137]
[124 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
