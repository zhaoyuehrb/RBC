%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACGUCAGUGGCCUUCCGGCCGGAAGUCCGCAGCCUCCCGAGCCGCUGAUUGGCUUUCAGGCUGGCGCCUGUCUCGGCCCCCGCGCCAGUUUUGGGCUGGUUGGCGCGGAAUCGGGAGAUUCGGGACC\
) } def
/len { sequence length } bind def

/coor [
[-57.41196823 301.50854492]
[-62.51948166 309.96588135]
[-69.51416779 316.92343140]
[-77.97422028 321.97134399]
[-87.39180756 324.81460571]
[-97.20352936 325.29025269]
[-106.82418060 323.37686157]
[-115.68159485 319.19515991]
[-123.25070190 313.00067139]
[-135.79774475 321.22088623]
[-148.34480286 329.44107056]
[-160.89186096 337.66125488]
[-168.19514465 351.69592285]
[-183.08126831 352.19860840]
[-195.62832642 360.41879272]
[-208.17536926 368.63900757]
[-220.72242737 376.85919189]
[-233.26948547 385.07937622]
[-240.16850281 399.95672607]
[-256.52410889 401.15097046]
[-265.51104736 387.43356323]
[-257.88433838 372.91580200]
[-241.48966980 372.53231812]
[-228.94261169 364.31213379]
[-216.39556885 356.09194946]
[-203.84851074 347.87176514]
[-191.30145264 339.65158081]
[-184.89561462 326.20483398]
[-169.11204529 325.11419678]
[-156.56498718 316.89401245]
[-144.01794434 308.67382812]
[-131.47088623 300.45364380]
[-134.30950928 280.04092407]
[-126.60793304 260.84777832]
[-110.33441162 247.97023010]
[-89.74326324 244.86553955]
[-70.26275635 252.42404175]
[-59.27872467 242.20881653]
[-48.29469299 231.99357605]
[-37.31066513 221.77833557]
[-26.32663536 211.56309509]
[-15.34260464 201.34785461]
[-4.35857487 191.13261414]
[6.50122499 180.78541565]
[6.42383671 165.93516541]
[17.16036415 155.15641785]
[32.73718643 155.17593384]
[43.47117233 144.69825745]
[54.20515442 134.22059631]
[64.93914032 123.74291992]
[75.67312622 113.26525116]
[86.40711212 102.78758240]
[92.72812653 89.18446350]
[93.81464386 74.22386932]
[94.90116882 59.26327133]
[95.98769379 44.30267334]
[83.06541443 30.55804825]
[84.16809845 12.04214573]
[98.14505005 0.33511078]
[98.50750732 -14.66050911]
[98.86995697 -29.65612984]
[99.23241425 -44.65174866]
[99.59487152 -59.64736938]
[91.27014923 -73.77645874]
[99.57835388 -87.91526031]
[115.97270966 -87.51899719]
[123.58811951 -72.99530029]
[114.59049225 -59.28491211]
[114.22803497 -44.28929520]
[113.86557770 -29.29367256]
[113.50312042 -14.29805279]
[113.14067078 0.69756699]
[122.70292664 7.13468122]
[127.98340607 17.51652908]
[127.54520416 29.27647018]
[121.38182068 39.44269180]
[110.94828796 45.38919449]
[109.86176300 60.34979248]
[108.77524567 75.31038666]
[107.68872070 90.27098846]
[108.64832306 91.29233551]
[109.47675323 92.40477753]
[124.43735504 91.31825256]
[139.39794922 90.23172760]
[154.35855103 89.14521027]
[169.31913757 88.05868530]
[184.27973938 86.97216797]
[199.24034119 85.88564301]
[214.20094299 84.79911804]
[229.16152954 83.71260071]
[244.12213135 82.62607574]
[259.08273315 81.53955841]
[268.09298706 68.75874329]
[283.22372437 64.80975342]
[297.33068848 71.55718994]
[303.75299072 85.81510162]
[299.45819092 100.85135651]
[286.47421265 109.56628418]
[270.93164062 107.84496307]
[260.16925049 96.50015259]
[245.20864868 97.58667755]
[230.24806213 98.67319489]
[215.28746033 99.75971985]
[200.32685852 100.84623718]
[185.36625671 101.93276215]
[170.40567017 103.01928711]
[155.44506836 104.10580444]
[140.48446655 105.19232941]
[125.52387238 106.27884674]
[110.56327820 107.36537170]
[96.88478088 113.52156067]
[86.15079498 123.99923706]
[75.41680908 134.47689819]
[64.68282318 144.95457458]
[53.94884109 155.43225098]
[43.21485519 165.90991211]
[42.85797501 181.48266602]
[31.82292938 191.95559692]
[16.97889519 191.51939392]
[12.96913052 199.84216309]
[5.85666323 202.11665344]
[-5.12736702 212.33189392]
[-16.11139679 222.54713440]
[-27.09542656 232.76235962]
[-38.07945633 242.97760010]
[-49.06348801 253.19284058]
[-60.04751587 263.40808105]
[-55.85321808 272.41607666]
[-53.96951675 282.15808105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 32]
[10 31]
[11 30]
[12 29]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[37 127]
[38 126]
[39 125]
[40 124]
[41 123]
[42 122]
[43 121]
[44 119]
[47 116]
[48 115]
[49 114]
[50 113]
[51 112]
[52 111]
[53 80]
[54 79]
[55 78]
[56 77]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
[82 110]
[83 109]
[84 108]
[85 107]
[86 106]
[87 105]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
