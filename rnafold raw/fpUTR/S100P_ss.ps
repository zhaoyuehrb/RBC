%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGGCUGCCUUAUAAAGCACCAAGAGGCUGCCAGUGGGACAUUUUCUCGGCCCUGCCAGCCCCCAGGAGGAAGGUGGGUCUGAAUCUAGCACC\
) } def
/len { sequence length } bind def

/coor [
[-43.74635696 191.67897034]
[-52.09884644 193.28526306]
[-60.28582764 191.36114502]
[-66.89651489 186.31826782]
[-81.00130463 191.42265320]
[-95.10610199 196.52705383]
[-105.44971466 208.49868774]
[-120.05036926 205.55416870]
[-134.15516663 210.65856934]
[-148.25994873 215.76295471]
[-162.36474609 220.86735535]
[-176.46952820 225.97175598]
[-177.96588135 241.16134644]
[-185.91189575 254.19297791]
[-198.72988892 262.47921753]
[-213.87484741 264.37484741]
[-228.33970642 259.50344849]
[-239.25247192 248.83224487]
[-244.44641113 234.48004150]
[-242.89024353 219.29646301]
[-234.89297485 206.29621887]
[-222.04244995 198.06051636]
[-206.89015198 196.22456360]
[-192.44459534 201.15287781]
[-181.57392883 211.86695862]
[-167.46913147 206.76257324]
[-153.36434937 201.65817261]
[-139.25955200 196.55377197]
[-125.15476990 191.44937134]
[-115.82001495 179.84283447]
[-100.21049500 182.42227173]
[-86.10570526 177.31787109]
[-72.00091553 172.21347046]
[-60.20082474 154.16656494]
[-38.11744308 157.24430847]
[-24.80910110 150.32418823]
[-11.50075817 143.40406799]
[-12.95607471 130.28459167]
[-9.79866409 117.43460083]
[-2.39287162 106.43000793]
[8.37454319 98.62829590]
[21.20054245 95.00102234]
[34.52348709 96.01293945]
[46.71325684 101.56250763]
[56.27073288 110.99163818]
[70.00733185 104.96620178]
[83.74393463 98.94077301]
[88.70099640 88.26483154]
[99.55694580 83.71548462]
[110.64419556 87.66781616]
[124.57250977 82.09986115]
[138.50082397 76.53189850]
[152.42912292 70.96394348]
[166.35743713 65.39598083]
[173.33045959 59.18455124]
[180.83946228 59.88259506]
[194.94425964 54.77819824]
[209.04905701 49.67380142]
[215.81039429 35.64091492]
[230.18737793 30.66525650]
[243.52392578 37.19765091]
[257.62872314 32.09325409]
[271.64718628 26.75634766]
[281.36022949 13.54315376]
[297.62771606 15.61700344]
[303.71505737 30.84449768]
[293.36007690 43.56089783]
[277.21514893 40.68465805]
[272.07147217 46.19964981]
[262.73312378 46.19804382]
[248.62832642 51.30244446]
[242.56103516 64.85691071]
[228.32948303 70.23442078]
[214.15344238 63.77859116]
[200.04866028 68.88298798]
[185.94386292 73.98738861]
[171.92539978 79.32429504]
[157.99708557 84.89225006]
[144.06877136 90.46021271]
[130.14047241 96.02816772]
[116.21215820 101.59613037]
[106.29627991 115.02459717]
[89.76936340 112.67737579]
[76.03276825 118.70280457]
[62.29616547 124.72823334]
[62.07081604 141.72480774]
[54.55229187 156.90888977]
[41.25701141 167.32406616]
[24.82093811 170.96517944]
[8.47703552 167.16426086]
[-4.58064032 156.71240234]
[-17.88898277 163.63252258]
[-31.19732475 170.55264282]
[-32.23553848 179.28317261]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 33]
[5 32]
[6 31]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[35 93]
[36 92]
[37 91]
[45 85]
[46 84]
[47 83]
[50 81]
[51 80]
[52 79]
[53 78]
[54 77]
[56 76]
[57 75]
[58 74]
[61 71]
[62 70]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
