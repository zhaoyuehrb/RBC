%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGACACUUCCGGUUGCGACGGAGGUAGGCUUACGAGGCCUGUGUCGGGUAGAAAGGGUCCUUCCUGGACCGGGACCCUCUGCCACGACC\
) } def
/len { sequence length } bind def

/coor [
[117.58884430 128.67872620]
[108.65240479 133.15940857]
[98.61631012 134.86914062]
[88.33555603 133.55380249]
[78.71769714 129.22180176]
[70.64278412 122.15224457]
[64.88306427 112.87918091]
[51.12489700 118.85519409]
[37.36672974 124.83120728]
[23.60855865 130.80722046]
[9.85038948 136.78324890]
[-3.90777969 142.75926208]
[-17.66594887 148.73527527]
[-21.93919182 163.77766418]
[-34.91069031 172.51116943]
[-50.45569611 170.81211853]
[-61.23433685 159.48274231]
[-62.15726471 143.87240601]
[-52.78870010 131.35186768]
[-37.55220032 127.83291626]
[-23.64196587 134.97711182]
[-9.88379574 129.00108337]
[3.87437344 123.02507019]
[17.63254356 117.04905701]
[31.39071274 111.07304382]
[45.14888382 105.09702301]
[58.90705109 99.12100983]
[61.95889282 84.43474579]
[51.72059631 73.47220612]
[41.48229599 62.50966644]
[31.24399948 51.54712677]
[21.00570297 40.58458710]
[10.76740646 29.62204933]
[-4.46252584 22.17318916]
[-1.52083552 5.47639942]
[15.33777809 3.68099618]
[21.72994614 19.38375092]
[31.96824265 30.34629059]
[42.20653915 41.30883026]
[52.44483566 52.27136993]
[62.68313599 63.23390961]
[72.92143250 74.19644928]
[95.40625000 64.77479553]
[117.58884430 71.32127380]
[129.93510437 89.38304901]
[144.85646057 87.84909058]
[159.77781677 86.31512451]
[174.69917297 84.78116608]
[189.59217834 82.99267578]
[204.45246887 80.95017242]
[219.31275940 78.90766907]
[234.17303467 76.86517334]
[249.03332520 74.82266998]
[263.89361572 72.78017426]
[269.62408447 68.83772278]
[275.57019043 68.58815002]
[279.83383179 71.14147186]
[294.79888916 70.11783600]
[309.76391602 69.09420013]
[324.72894287 68.07055664]
[339.69396973 67.04692078]
[354.65899658 66.02328491]
[369.62402344 64.99964905]
[376.96932983 51.43313599]
[390.49417114 44.01144409]
[405.88290405 45.10280609]
[418.22497559 54.35897827]
[423.58209229 68.82634735]
[420.24484253 83.88842010]
[409.27810669 94.73896027]
[394.18133545 97.91558838]
[379.77185059 92.40465546]
[370.64767456 79.96468353]
[355.68264771 80.98831940]
[340.71759033 82.01195526]
[325.75256348 83.03559113]
[310.78753662 84.05922699]
[295.82250977 85.08286285]
[280.85748291 86.10649872]
[265.93612671 87.64046478]
[251.07583618 89.68296051]
[236.21554565 91.72546387]
[221.35525513 93.76795959]
[206.49496460 95.81046295]
[191.63467407 97.85295868]
[185.30480957 101.96893311]
[176.23313904 99.70252228]
[161.31178284 101.23648834]
[146.39042664 102.77044678]
[131.46907043 104.30441284]
[129.42909241 113.52681732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
[45 90]
[46 89]
[47 88]
[48 87]
[49 85]
[50 84]
[51 83]
[52 82]
[53 81]
[54 80]
[57 79]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
