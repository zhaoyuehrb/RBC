%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUCCACGCUUAGCAGCUUUCUCACCGCCGCCAAACCUUGCCUGGGCACUGGGACCGUGGGUGGCCGCCUGUCCCUAGCUGUGGCUGAGCCAAGAUUGCACUUGUGAGAAGGCCUGACAGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[64.20469666 589.42639160]
[49.74389648 594.30981445]
[34.59737778 592.42681885]
[21.77249527 584.15124512]
[13.81563663 571.12622070]
[12.30664539 555.93786621]
[17.54512978 541.60186768]
[28.49098778 530.96466064]
[42.97090912 526.13818359]
[44.82145309 511.25277710]
[46.67199707 496.36737061]
[48.52254105 481.48196411]
[39.19615173 469.92541504]
[40.86082077 454.80310059]
[53.04563522 445.09909058]
[54.89617920 430.21368408]
[56.74672699 415.32827759]
[58.41302490 400.42111206]
[59.89482117 385.49447632]
[61.37661743 370.56784058]
[62.85841370 355.64123535]
[64.34020996 340.71459961]
[65.82200623 325.78796387]
[67.30380249 310.86132812]
[68.78559875 295.93469238]
[70.26739502 281.00805664]
[58.08750534 272.43392944]
[51.79280472 258.82391357]
[53.16471100 243.79113770]
[61.93450928 231.38197327]
[75.82873535 224.98683167]
[77.31053162 210.06019592]
[67.05359650 203.34367371]
[60.62402725 192.81932068]
[59.31409454 180.48313904]
[63.43809128 168.70619202]
[72.25985718 159.77888489]
[84.12335205 155.46549988]
[86.34151459 140.63041687]
[88.55967712 125.79533386]
[90.77783203 110.96025085]
[85.83353424 97.88181305]
[94.38707733 86.82158661]
[96.60523987 71.98650360]
[90.99373627 57.19388199]
[100.52804565 45.75070953]
[102.74620819 30.91562462]
[104.96437073 16.08053970]
[106.99887848 1.21915340]
[108.84941864 -13.66625881]
[98.43603516 -33.44442749]
[111.66365814 -50.52504349]
[112.03467560 -65.52045441]
[112.40569305 -80.51586914]
[112.77671051 -95.51127625]
[113.14772797 -110.50669098]
[103.95013428 -126.40161133]
[113.54801941 -141.03836060]
[113.54801941 -156.03836060]
[113.54801941 -171.03836060]
[113.54801941 -186.03836060]
[104.88432312 -199.96215820]
[112.84844971 -214.29759216]
[129.24758911 -214.29759216]
[137.21173096 -199.96215820]
[128.54801941 -186.03836060]
[128.54801941 -171.03836060]
[128.54801941 -156.03836060]
[128.54801941 -141.03836060]
[136.90954590 -132.20405579]
[136.96835327 -119.63805389]
[128.14314270 -110.13567352]
[127.77211761 -95.14025879]
[127.40110779 -80.14485168]
[127.03009033 -65.14943695]
[126.65907288 -50.15402603]
[133.37371826 -45.59921265]
[137.73786926 -38.64693069]
[138.94888306 -30.43240356]
[136.72657776 -22.33367538]
[131.37319946 -15.74045467]
[123.73483276 -11.81571388]
[121.88429260 3.06969810]
[124.20614624 10.17182636]
[119.79945374 18.29870033]
[117.58129120 33.13378525]
[115.36313629 47.96887207]
[121.13329315 61.70038605]
[111.44032288 74.20466614]
[109.22216797 89.03974915]
[114.16646576 102.11818695]
[105.61292267 113.17841339]
[103.39476013 128.01348877]
[101.17659760 142.84858704]
[98.95844269 157.68367004]
[112.23170471 169.90371704]
[115.56558990 187.47628784]
[107.82637787 203.42820740]
[92.23715973 211.54199219]
[90.75536346 226.46862793]
[103.12107849 235.47064209]
[109.27999115 249.36181641]
[107.66958618 264.37091064]
[98.82192230 276.47772217]
[85.19402313 282.48986816]
[83.71222687 297.41650391]
[82.23043060 312.34313965]
[80.74863434 327.26974487]
[79.26683807 342.19638062]
[77.78504181 357.12301636]
[76.30324554 372.04965210]
[74.82144928 386.97628784]
[73.33965302 401.90289307]
[75.62229919 410.86138916]
[71.63213348 417.17880249]
[69.78159332 432.06423950]
[67.93104553 446.94964600]
[77.36888885 459.34176636]
[75.28012085 474.41134644]
[63.40795517 483.33248901]
[61.55741119 498.21792603]
[59.70686340 513.10333252]
[57.85631943 527.98876953]
[70.71369171 536.21374512]
[78.72177887 549.20733643]
[80.29057312 564.38958740]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 123]
[10 122]
[11 121]
[12 120]
[15 117]
[16 116]
[17 115]
[18 113]
[19 112]
[20 111]
[21 110]
[22 109]
[23 108]
[24 107]
[25 106]
[26 105]
[31 100]
[32 99]
[38 95]
[39 94]
[40 93]
[41 92]
[43 90]
[44 89]
[46 87]
[47 86]
[48 85]
[49 83]
[50 82]
[52 76]
[53 75]
[54 74]
[55 73]
[56 72]
[58 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
