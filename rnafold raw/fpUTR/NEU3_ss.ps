%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUCGUUGCCGUUACCUGUUUCCGGCAGUCGACACGCUCUUCGCUUCUCGGGGCUUGUCUCCGUGUCCUCCGUCUCAGUUGUUUCUCCCUCUCUAUCCUCCUCUGUCUCAGUCUCCCCAGCCUUGGGGCCGGUGCCUCUUCCGGGCUUCGGCGA\
) } def
/len { sequence length } bind def

/coor [
[79.27709198 245.24345398]
[72.52922821 259.21649170]
[58.84104538 266.52493286]
[43.47594452 264.35855103]
[32.34211349 253.55033875]
[29.72073746 238.25628662]
[36.61978912 224.35726929]
[50.38644409 217.19773865]
[52.48064804 202.34465027]
[54.57484818 187.49156189]
[56.66904831 172.63847351]
[58.76325226 157.78536987]
[60.85745239 142.93228149]
[51.14320755 120.88445282]
[51.84437561 98.86186218]
[61.11917496 81.16011810]
[75.59957886 70.55570984]
[91.30349731 67.88005066]
[77.43099213 62.17447662]
[63.55848312 56.46890640]
[52.36566162 64.56732941]
[38.73932648 66.05135345]
[26.26456070 60.63850784]
[18.17013741 49.84676361]
[16.49296379 36.57065964]
[2.73739552 30.58866119]
[-11.01817322 24.60666084]
[-20.19271660 24.04471779]
[-24.98723793 18.36488914]
[-38.62036133 12.10885334]
[-45.31818771 12.34768581]
[-50.34804916 9.55394268]
[-52.66602325 5.32007027]
[-66.03792572 -1.47641218]
[-79.40983582 -8.27289391]
[-92.78173828 -15.06937695]
[-106.15364075 -21.86585808]
[-119.52554321 -28.66234016]
[-131.64970398 -18.14226723]
[-146.84251404 -13.08142471]
[-162.77668762 -14.22399426]
[-177.02323914 -21.36626053]
[-187.42173767 -33.39217758]
[-192.40797424 -48.44765472]
[-191.24916077 -64.22639465]
[-204.75437927 -70.75395966]
[-218.25959778 -77.28152466]
[-231.76481628 -83.80908966]
[-248.07127380 -82.06797791]
[-257.51239014 -95.47683716]
[-250.37596130 -110.24176788]
[-234.00332642 -111.17388916]
[-225.23724365 -97.31430817]
[-211.73202515 -90.78674316]
[-198.22682190 -84.25917816]
[-184.72160339 -77.73161316]
[-174.58383179 -87.47663116]
[-161.69752502 -93.17970276]
[-147.60801697 -94.13451385]
[-134.01260376 -90.20555115]
[-122.55609894 -81.84684753]
[-114.63179779 -70.04962158]
[-111.21206665 -56.22480392]
[-112.72906494 -42.03424454]
[-99.35716248 -35.23776245]
[-85.98525238 -28.44128036]
[-72.61334991 -21.64479828]
[-59.24144745 -14.84831619]
[-45.86954117 -8.05183411]
[-32.36432648 -1.52426875]
[-18.73120308 4.73176670]
[-5.03617239 10.85109138]
[8.71939659 16.83309174]
[22.47496414 22.81509209]
[36.31753159 14.03901386]
[52.83024597 15.23491001]
[65.51546478 26.13004875]
[69.26405334 42.59640121]
[83.13656616 48.30197144]
[97.00907135 54.00754166]
[87.57019806 42.34959793]
[74.31215668 35.33359146]
[63.13353729 25.33166504]
[54.69212723 12.93236732]
[49.48464584 -1.13469028]
[47.81751251 -16.04175758]
[49.78883362 -30.91165733]
[55.28260422 -44.86939621]
[63.97555542 -57.09365845]
[75.35617065 -66.86512756]
[88.75477600 -73.60882568]
[103.38294983 -76.92792511]
[118.37993622 -76.62712097]
[132.86325073 -72.72411346]
[145.98066711 -65.44857788]
[156.96029663 -55.22861481]
[165.15608215 -42.66560745]
[170.08575439 -28.49879837]
[171.45921326 -13.56181145]
[169.19566345 1.26641655]
[163.42829895 15.11334610]
[154.49647522 27.16418076]
[142.92578125 36.70981216]
[129.40231323 43.18677521]
[119.50456238 54.45774078]
[133.59423828 49.31177139]
[147.68391418 44.16580200]
[160.48751831 33.05255890]
[174.71084595 42.27933884]
[169.78205872 58.50103378]
[152.82989502 58.25548172]
[138.74021912 63.40144730]
[124.65053558 68.54741669]
[125.10049438 76.03390503]
[138.51744080 82.74102020]
[126.00040436 91.00688934]
[126.45036316 98.49337769]
[141.05496216 101.91474152]
[155.65956116 105.33611298]
[170.26416016 108.75747681]
[184.86875916 112.17884827]
[200.40164185 106.91941833]
[212.54263306 117.94338989]
[208.80213928 133.91026306]
[193.02804565 138.39466858]
[181.44738770 126.78343964]
[166.84278870 123.36207581]
[152.23818970 119.94071198]
[137.63359070 116.51934052]
[123.02899933 113.09797668]
[115.44252014 126.03804016]
[125.56099701 137.11126709]
[135.67947388 148.18450928]
[145.79794312 159.25773621]
[161.20205688 157.38882446]
[174.74638367 164.96055603]
[181.22282410 179.06144714]
[178.14108276 194.26942444]
[166.68614197 204.73670959]
[151.26264954 206.43840027]
[137.80126953 198.72018433]
[131.47817993 184.54986572]
[134.72471619 169.37620544]
[124.60623932 158.30297852]
[114.48776245 147.22975159]
[104.36928558 136.15652466]
[97.20460510 138.37400818]
[101.63935089 152.70346069]
[87.30982971 157.13796997]
[82.87522888 142.80899048]
[75.71054077 145.02648926]
[73.61634064 159.87957764]
[71.52214050 174.73266602]
[69.42794037 189.58575439]
[67.33374023 204.43884277]
[65.23954010 219.29194641]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 156]
[9 155]
[10 154]
[11 153]
[12 152]
[13 151]
[18 80]
[19 79]
[20 78]
[25 74]
[26 73]
[27 72]
[29 71]
[30 70]
[33 69]
[34 68]
[35 67]
[36 66]
[37 65]
[38 64]
[45 56]
[46 55]
[47 54]
[48 53]
[105 113]
[106 112]
[107 111]
[117 130]
[118 129]
[119 128]
[120 127]
[121 126]
[131 146]
[132 145]
[133 144]
[134 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
