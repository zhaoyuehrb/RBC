%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGUGACCAGAGGGGUUUGUGUGGCUGAAGAGGCAGGAGGAACAGUGUAUCCACAGCGUGGGACC\
) } def
/len { sequence length } bind def

/coor [
[121.01539612 155.54110718]
[110.25554657 165.99220276]
[95.63584900 169.34843445]
[81.39508057 164.63668823]
[71.66217041 153.22308350]
[69.25904083 138.41683960]
[74.88245392 124.51082611]
[86.89969635 115.53779602]
[73.68125153 122.62812042]
[65.50641632 136.84445190]
[49.10905457 136.60241699]
[41.35736847 122.15100861]
[50.22562408 108.35659027]
[66.59092712 109.40967560]
[79.80936432 102.31935120]
[85.30506897 88.36237335]
[80.46960449 74.16313934]
[75.63414001 59.96390152]
[70.79867554 45.76466370]
[59.02573776 35.19543457]
[62.24716949 20.65337181]
[50.47423935 10.08414078]
[53.69566727 -4.45792341]
[41.92273712 -15.02715302]
[45.14416885 -29.56921768]
[40.30870056 -43.76845169]
[35.47323608 -57.96768951]
[21.77036285 -66.31099701]
[19.89284515 -82.24381256]
[31.28095436 -93.54383087]
[47.19870758 -91.54265594]
[55.43536758 -77.77541351]
[49.67247391 -62.80315399]
[54.50793839 -48.60391998]
[59.34340286 -34.40468216]
[70.77046967 -24.85107803]
[67.89490509 -9.29338837]
[79.32197571 0.26021683]
[76.44640350 15.81790638]
[87.87347412 25.37151146]
[84.99790955 40.92919922]
[89.83337402 55.12843704]
[94.66883850 69.32766724]
[99.50430298 83.52690887]
[106.99832916 84.62203217]
[113.38846588 89.02722931]
[117.26108551 95.96934509]
[117.67192841 104.09600830]
[130.16835022 112.39297485]
[139.38948059 114.65380096]
[143.04344177 121.38323975]
[155.13722229 130.25682068]
[167.23100281 139.13040161]
[179.32478333 148.00399780]
[191.41856384 156.87757874]
[207.76573181 161.37269592]
[207.97163391 178.32539368]
[191.73846436 183.21621704]
[182.54496765 168.97135925]
[170.45118713 160.09777832]
[158.35742188 151.22418213]
[146.26364136 142.35060120]
[134.16986084 133.47702026]
[121.87137604 124.88938904]
[109.37496185 116.59242249]
[120.50045776 126.65340424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 15]
[9 14]
[16 44]
[17 43]
[18 42]
[19 41]
[21 39]
[23 37]
[25 35]
[26 34]
[27 33]
[48 65]
[49 64]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
