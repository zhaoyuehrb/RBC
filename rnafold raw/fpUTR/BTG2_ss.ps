%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGGUAACGCUGUCUUGUGGACCCGCACUUCCCACCCGAGACCUCUCACUGAGCCCGAGCCGCGCGCGAC\
) } def
/len { sequence length } bind def

/coor [
[64.16307068 158.27845764]
[49.44016266 146.09086609]
[38.66318512 130.30610657]
[24.56779671 135.43641663]
[10.47240734 140.56671143]
[-3.62298179 145.69702148]
[-9.90677643 157.19447327]
[-21.99665642 161.07534790]
[-33.06816101 155.73439026]
[-47.37391663 160.24497986]
[-61.67967224 164.75556946]
[-68.75404358 178.88810730]
[-83.77577972 183.79965210]
[-97.83273315 176.57624817]
[-102.58517456 161.50343323]
[-95.21356201 147.52362061]
[-80.09133911 142.93081665]
[-66.19025421 150.44981384]
[-51.88450241 145.93922424]
[-37.57875061 141.42863464]
[-26.63733673 127.88259125]
[-8.75328350 131.60162354]
[5.34210539 126.47132111]
[19.43749428 121.34101868]
[33.53288269 116.21071625]
[31.75712967 104.85545349]
[31.90728951 93.36315918]
[33.97912979 82.05816650]
[37.91417694 71.25952148]
[43.60137939 61.27196884]
[50.88023376 52.37738419]
[59.54532242 44.82678223]
[69.35210419 38.83324814]
[80.02381134 34.56593323]
[91.25928497 32.14526749]
[102.74142456 31.63956261]
[114.14620209 33.06309128]
[125.15175629 36.37567902]
[135.44747925 41.48384094]
[144.57890320 29.58354187]
[153.71032715 17.68324089]
[155.31321716 1.36261797]
[170.35845947 -5.16219234]
[183.36877441 4.82097578]
[180.96028137 21.04229546]
[165.61062622 26.81466293]
[156.47920227 38.71496201]
[147.34777832 50.61526489]
[156.90461731 62.01935577]
[163.76997375 75.21986389]
[167.61914062 89.59242249]
[168.27003479 104.45723724]
[165.69189453 119.11123657]
[160.00666809 132.86131287]
[172.29394531 141.46495056]
[188.03631592 143.04238892]
[194.02395630 156.68046570]
[206.31123352 165.28411865]
[222.29666138 163.92550659]
[233.22052002 175.67492676]
[230.70297241 191.51921082]
[216.67526245 199.30400085]
[201.89825439 193.05744934]
[197.70758057 177.57139587]
[185.42030334 168.96775818]
[170.55680847 168.00570679]
[163.69029236 153.75222778]
[151.40301514 145.14859009]
[136.90786743 157.60620117]
[119.53223419 165.56794739]
[100.63222504 168.41246033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 22]
[9 20]
[10 19]
[11 18]
[39 48]
[40 47]
[41 46]
[54 68]
[55 67]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
