%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCAACUACGGCGGCUCCAAGGAGGGGGUGGGGGAAGGAGGGACGGCCGGUCCCGUCAGUCAGGCAGCGGGAGCCGCCGGGAGCGG\
) } def
/len { sequence length } bind def

/coor [
[67.49916077 412.49966431]
[56.78647232 400.88012695]
[57.51118851 385.09246826]
[69.24334717 374.50320435]
[69.77271271 359.51254272]
[59.46262360 348.82437134]
[59.78593445 333.61416626]
[71.06660461 322.87246704]
[68.36480713 318.68731689]
[68.42326355 312.71997070]
[72.19937134 306.85369873]
[73.78485107 291.93774414]
[75.37033081 277.02175903]
[76.95581055 262.10580444]
[78.54128265 247.18981934]
[80.12676239 232.27384949]
[81.71224213 217.35787964]
[83.29772186 202.44189453]
[84.88320160 187.52592468]
[86.46868134 172.60995483]
[73.98416901 162.11019897]
[70.10108948 146.09669495]
[76.51660919 130.74063110]
[90.91995239 122.07904816]
[79.71031189 112.58015442]
[76.18622589 98.31600952]
[81.68258667 84.68974304]
[94.11741638 76.86286926]
[95.17549896 61.90023422]
[88.43092346 47.58865356]
[97.04671478 35.43886948]
[98.10480499 20.47623253]
[99.16288757 5.51359701]
[99.95674133 -9.46538162]
[100.48611450 -24.45603752]
[101.01548004 -39.44669342]
[101.54485321 -54.43734741]
[91.70372772 -61.56864548]
[86.67551422 -72.49963379]
[87.64465332 -84.37085724]
[94.24346924 -94.14049530]
[104.67714691 -99.36381531]
[106.26262665 -114.27978516]
[97.34015656 -127.61279297]
[102.33836365 -142.85737610]
[117.42306519 -148.31919861]
[131.02255249 -139.80842590]
[132.70446777 -123.85378265]
[121.17859650 -112.69431305]
[119.59312439 -97.77833557]
[131.93150330 -84.48009491]
[130.83790588 -66.05876160]
[116.53550720 -53.90797806]
[116.00614166 -38.91732025]
[115.47676849 -23.92666626]
[114.94739532 -8.93600941]
[117.92406464 -1.98666692]
[114.12552643 6.57168150]
[113.06743622 21.53431702]
[112.00935364 36.49695206]
[118.82961273 49.73830032]
[110.13813782 62.95831680]
[109.08004761 77.92095184]
[120.28968811 87.41984558]
[123.81377411 101.68399048]
[118.31741333 115.31025696]
[105.88258362 123.13713074]
[117.15383911 131.28750610]
[122.82767487 143.86755371]
[121.49724579 157.49412537]
[113.62358856 168.56150818]
[101.38465118 174.19543457]
[99.79917145 189.11140442]
[98.21369171 204.02737427]
[96.62821960 218.94335938]
[95.04273987 233.85932922]
[93.45726013 248.77529907]
[91.87178040 263.69128418]
[90.28630066 278.60723877]
[88.70082092 293.52322388]
[87.11534119 308.43917847]
[86.05725861 323.40182495]
[96.55212402 334.91250610]
[95.80171967 350.10760498]
[84.76337433 360.04193115]
[84.23400116 375.03259277]
[95.18997955 386.42303467]
[94.79924011 402.22247314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 86]
[5 85]
[8 82]
[11 81]
[12 80]
[13 79]
[14 78]
[15 77]
[16 76]
[17 75]
[18 74]
[19 73]
[20 72]
[24 67]
[28 63]
[29 62]
[31 60]
[32 59]
[33 58]
[34 56]
[35 55]
[36 54]
[37 53]
[42 50]
[43 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
