%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUCAGAGAGAGAGAGACUAAGACGGAUAACGCGUCAUCUCGCCUUCCCAAAUUUUCCCCCCUCGCUAGACCGGGUCCAAAACCUCCAUCCGGAGCCGGCAGGAGAGGAGAACG\
) } def
/len { sequence length } bind def

/coor [
[-7.33347797 163.48907471]
[-17.11695290 169.52384949]
[-28.01205444 173.15728760]
[-39.43947983 174.20101929]
[-50.79273605 172.60424805]
[-61.47031021 168.45619202]
[-70.90753937 161.98110962]
[-78.60649109 153.52621460]
[-84.16221619 143.54299927]
[-87.28404236 132.56318665]
[-102.28268433 132.76455688]
[-117.28133392 132.96594238]
[-125.95040894 136.24487305]
[-132.68409729 132.96594238]
[-146.58689880 140.51727295]
[-159.20915222 132.60980225]
[-174.20779419 132.40843201]
[-189.20643616 132.20704651]
[-204.20509338 132.00567627]
[-210.17268372 139.60426331]
[-218.87384033 143.47415161]
[-228.23612976 142.83564758]
[-236.09510803 137.96646118]
[-240.69474792 130.10726929]
[-255.62855530 128.69966125]
[-270.56234741 127.29203796]
[-285.49615479 125.88442230]
[-296.49975586 136.99545288]
[-312.07571411 138.38252258]
[-324.86950684 129.39073181]
[-328.84033203 114.26569366]
[-322.11328125 100.14900970]
[-307.86465454 93.70614624]
[-292.82220459 97.97921753]
[-284.08856201 110.95061493]
[-269.15475464 112.35823059]
[-254.22093201 113.76584625]
[-239.28712463 115.17346191]
[-221.51998901 104.81526184]
[-204.00370789 117.00701904]
[-189.00506592 117.20839691]
[-174.00640869 117.40977478]
[-159.00776672 117.61116028]
[-146.17776489 110.04541779]
[-132.48271179 117.96729279]
[-117.48271179 117.96729279]
[-102.48406219 117.76591492]
[-87.48542023 117.56453705]
[-81.45285797 99.69908142]
[-69.16648102 85.35445404]
[-52.38573837 76.62005615]
[-33.52689743 74.77938080]
[-15.31509399 80.12140656]
[-0.39056084 91.89553833]
[9.07413769 108.41698456]
[23.84625435 105.81226349]
[38.61837006 103.20753479]
[53.39048767 100.60281372]
[68.16260529 97.99809265]
[82.93471527 95.39337158]
[88.24649048 86.79772949]
[97.39904022 82.51629639]
[107.40152740 83.94813538]
[114.98535919 90.62536621]
[129.87599182 88.81731415]
[144.76663208 87.00926208]
[153.03425598 82.81990814]
[160.08062744 85.35810852]
[175.01443481 83.95049286]
[183.39155579 79.98461914]
[190.36724854 82.71109009]
[198.84782410 78.97154999]
[205.74780273 81.88432312]
[220.73562622 81.28033447]
[235.72346497 80.67633820]
[250.71130371 80.07234955]
[264.18872070 71.78565216]
[277.21722412 79.00420380]
[292.20507812 78.40020752]
[307.19290161 77.79621887]
[312.78262329 63.63024139]
[323.65542603 52.96714783]
[337.92758179 47.65438461]
[353.12634277 48.61242676]
[366.61840820 55.67528152]
[376.06622314 67.61927032]
[379.83288574 82.37501526]
[377.26577759 97.38600922]
[368.80969238 110.05149841]
[355.92971802 118.17711639]
[340.85733032 120.35504150]
[326.20394897 116.20793915]
[314.50836182 106.45431519]
[307.79687500 92.78405762]
[292.80905151 93.38804626]
[277.82122803 93.99203491]
[265.41583252 102.23553467]
[251.31529236 95.06018829]
[236.32745361 95.66417694]
[221.33961487 96.26816559]
[206.35179138 96.87215424]
[191.37341309 97.67730713]
[176.42204285 98.88430023]
[161.48823547 100.29191589]
[146.57467651 101.89989471]
[131.68405151 103.70794678]
[116.79341125 105.51599884]
[102.60095978 117.48370361]
[85.53944397 110.16548920]
[70.76732635 112.77021027]
[55.99520874 115.37493134]
[41.22309113 117.97965240]
[26.45097733 120.58437347]
[11.67885971 123.18910217]
[10.58642960 134.67224121]
[6.89920378 145.59147644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 48]
[11 47]
[12 46]
[14 45]
[16 43]
[17 42]
[18 41]
[19 40]
[24 38]
[25 37]
[26 36]
[27 35]
[55 114]
[56 113]
[57 112]
[58 111]
[59 110]
[60 109]
[64 107]
[65 106]
[66 105]
[68 104]
[69 103]
[71 102]
[73 101]
[74 100]
[75 99]
[76 98]
[78 96]
[79 95]
[80 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
