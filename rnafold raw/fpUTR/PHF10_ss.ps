%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGGCGGCAGCGGCGGCGGCGGCCGGGACAAGGCGGAGGCGACGGCGGCGGCGGCGGCGCGGGGCGCUCGGGCUG\
) } def
/len { sequence length } bind def

/coor [
[29.90645981 131.45979309]
[16.28431129 137.73968506]
[2.66216397 144.01957703]
[-6.63107204 156.82373047]
[-21.42855263 155.12554932]
[-35.05070114 161.40545654]
[-44.34393692 174.20960999]
[-59.14141846 172.51142883]
[-72.76356506 178.79132080]
[-82.05680084 191.59547424]
[-96.85428619 189.89729309]
[-110.47643280 196.17718506]
[-119.49409485 209.87440491]
[-135.84698486 208.64350891]
[-142.71264648 193.75073242]
[-133.02827454 180.51649475]
[-116.75632477 182.55503845]
[-103.13417816 176.27514648]
[-94.81529236 163.92016602]
[-79.04346466 165.16917419]
[-65.42131805 158.88928223]
[-57.10242462 146.53430176]
[-41.33059692 147.78330994]
[-27.70845032 141.50340271]
[-19.38956070 129.14843750]
[-3.61773205 130.39743042]
[10.00441551 124.11753845]
[23.62656403 117.83763885]
[24.05699348 107.89949799]
[28.24418068 98.81111145]
[35.60486984 91.94541168]
[45.07283783 88.35813141]
[55.25319672 88.62564087]
[64.62788391 92.75283051]
[71.78204346 100.16571808]
[86.21887207 96.09410858]
[96.11190033 86.21384430]
[109.70951843 89.46906281]
[120.89134979 78.27632904]
[135.24099731 82.26844025]
[149.67782593 78.19683075]
[164.11465454 74.12522888]
[178.46876526 69.77095795]
[192.73460388 65.13570404]
[199.95623779 51.33404160]
[214.48986816 46.83645630]
[227.60313416 53.80623245]
[241.86898804 49.17097473]
[256.04107666 44.25652313]
[270.11395264 39.06476593]
[280.38311768 27.02922440]
[295.00177002 29.88316727]
[309.07461548 24.69141006]
[319.13916016 11.74393463]
[335.34506226 14.25407219]
[341.02108765 29.63961029]
[330.32824707 42.07322693]
[314.26638794 38.76428223]
[300.19351196 43.95603561]
[290.93090820 55.62023163]
[275.30569458 53.13763809]
[261.23281860 58.32939529]
[255.90748596 63.74224472]
[246.50424194 63.43682480]
[232.23838806 68.07208252]
[225.72625732 81.41853333]
[211.32469177 86.32256317]
[197.36985779 79.40155029]
[183.10401917 84.03680420]
[177.57026672 89.23641205]
[168.18626404 88.56205750]
[153.74943542 92.63365936]
[139.31260681 96.70526886]
[129.16339111 107.60677338]
[113.78112793 103.90589142]
[103.88809967 113.78615570]
[90.29048157 110.53093719]
[75.85365295 114.60254669]
[67.28632355 133.49819946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[5 24]
[6 23]
[8 21]
[9 20]
[11 18]
[12 17]
[35 78]
[36 77]
[38 75]
[40 73]
[41 72]
[42 71]
[43 69]
[44 68]
[47 65]
[48 64]
[49 62]
[50 61]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
