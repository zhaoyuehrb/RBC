%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACCUAUCUGCUCUCUGGCCUGCCUCAGUGGUCUACAGCAGUUACACACAGGCAGUGGUAUCUGUGAGCAGCUCUGUGGACUCAAAGGUUUUCUCCCUGAGAGGCAUGACCCAGGCCAGCUGAUUCAUCAGAAUCAGG\
) } def
/len { sequence length } bind def

/coor [
[81.32551575 319.92205811]
[76.40514374 334.09210205]
[71.48476410 348.26214600]
[66.56439209 362.43218994]
[73.68027496 376.54385376]
[68.65421295 391.52767944]
[54.46807861 398.49395752]
[39.53825760 393.30975342]
[32.72234344 379.05075073]
[38.06410217 364.17657471]
[52.39435959 357.51181030]
[57.31473160 343.34176636]
[62.23510361 329.17172241]
[67.15547943 315.00170898]
[78.91465759 300.98797607]
[93.18074799 295.38363647]
[105.71686554 297.68798828]
[104.71498108 282.72149658]
[103.71308899 267.75497437]
[102.71119690 252.78848267]
[101.70931244 237.82197571]
[100.70742035 222.85546875]
[99.70552826 207.88897705]
[98.70364380 192.92247009]
[87.35747528 183.34123230]
[86.12821198 168.17733765]
[96.25482941 156.34140015]
[95.25293732 141.37489319]
[94.25104523 126.40839386]
[78.65065765 116.57285309]
[72.99083710 99.02074432]
[79.90688324 81.92459106]
[71.97699738 69.19207764]
[64.04711151 56.45956421]
[56.11722946 43.72705078]
[48.18734360 30.99453545]
[40.25745773 18.26202011]
[32.32757187 5.52950573]
[24.39768791 -7.20300865]
[16.46780205 -19.93552208]
[9.21480179 -25.62326431]
[8.50674248 -33.04122162]
[0.86249334 -45.94724655]
[-6.78175640 -58.85327148]
[-14.42600632 -71.75929260]
[-28.11598969 -79.68992615]
[-27.94483376 -94.58354950]
[-41.63481522 -102.51418304]
[-41.46366119 -117.40780640]
[-49.10791016 -130.31382751]
[-56.75215912 -143.21984863]
[-64.39640808 -156.12586975]
[-72.04065704 -169.03190613]
[-79.68490601 -181.93792725]
[-95.14609528 -183.25375366]
[-106.85897064 -193.43156433]
[-110.31970978 -208.55780029]
[-104.19757843 -222.81610107]
[-90.84666443 -230.72386169]
[-75.40066528 -229.24038696]
[-63.79887772 -218.93611145]
[-60.50243759 -203.77322388]
[-66.77888489 -189.58216858]
[-59.13463593 -176.67614746]
[-51.49038696 -163.77012634]
[-43.84613419 -150.86410522]
[-36.20188522 -137.95808411]
[-28.55763626 -125.05205536]
[-15.41442108 -118.04454803]
[-15.03880978 -102.22779846]
[-1.89559436 -95.22029114]
[-1.51998222 -79.40354156]
[6.12426758 -66.49752045]
[13.76851654 -53.59149551]
[21.41276741 -40.68547440]
[29.20031738 -27.86540794]
[37.13020325 -15.13289356]
[45.06008911 -2.40037918]
[52.98997116 10.33213520]
[60.91985703 23.06464958]
[68.84973907 35.79716492]
[76.77962494 48.52967834]
[84.70951080 61.26219177]
[92.63939667 73.99470520]
[99.14036560 72.98677063]
[105.69227600 73.57933044]
[111.90691376 75.73728943]
[117.41608429 79.33278656]
[121.89337158 84.15279388]
[132.25942993 72.20058441]
[146.85453796 75.17250824]
[160.96888733 70.09458160]
[175.08322144 65.01665497]
[189.19757080 59.93873215]
[203.31190491 54.86080933]
[211.41932678 41.01706314]
[227.31765747 38.86696243]
[238.81105042 50.05988312]
[237.08276367 66.00957489]
[223.45858765 74.48079681]
[208.38983154 68.97515106]
[194.27549744 74.05307770]
[180.16114807 79.13099670]
[166.04679871 84.20892334]
[151.93246460 89.28684998]
[142.57595825 100.87584686]
[126.97129822 98.26713562]
[122.61734772 114.79557800]
[109.21755219 125.40650177]
[110.21944427 140.37300110]
[111.22132874 155.33950806]
[122.83516693 165.72009277]
[123.63802338 180.91253662]
[113.67014313 191.92057800]
[114.67203522 206.88708496]
[115.67392731 221.85357666]
[116.67581177 236.82008362]
[117.67770386 251.78659058]
[118.67958832 266.75308228]
[119.68148041 281.71960449]
[120.68337250 296.68609619]
[124.64630127 311.15313721]
[131.41145325 324.54092407]
[138.17660522 337.92871094]
[144.94175720 351.31649780]
[151.70690918 364.70425415]
[158.47206116 378.09204102]
[165.23721313 391.47982788]
[179.24951172 399.99966431]
[178.60679626 416.38623047]
[163.97024536 423.78240967]
[150.39668274 414.57965088]
[151.84942627 398.24499512]
[145.08427429 384.85720825]
[138.31912231 371.46942139]
[131.55397034 358.08163452]
[124.78882599 344.69384766]
[118.02367401 331.30606079]
[111.25852203 317.91827393]
[103.77526855 318.41921997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[17 121]
[18 120]
[19 119]
[20 118]
[21 117]
[22 116]
[23 115]
[24 114]
[27 111]
[28 110]
[29 109]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[40 76]
[42 75]
[43 74]
[44 73]
[45 72]
[47 70]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[89 107]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[122 139]
[123 138]
[124 137]
[125 136]
[126 135]
[127 134]
[128 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
