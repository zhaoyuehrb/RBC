%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAAUGCGUUUCCGGUGGGGUGGGCGGGGCUUCGCGUCUCCUUCUACGGAUAUCUGUGGACCUU\
) } def
/len { sequence length } bind def

/coor [
[104.33486176 245.58430481]
[98.10363770 259.22879028]
[100.20025635 275.49334717]
[87.00067902 285.22488403]
[72.08348846 278.41244507]
[70.79421997 262.06405640]
[84.45915222 252.99755859]
[90.69037628 239.35307312]
[75.66951752 221.34141541]
[72.38323975 198.02932739]
[81.91168976 176.40335083]
[101.48017120 162.99488831]
[99.34545135 148.14756775]
[97.21073151 133.30024719]
[95.07600403 118.45292664]
[83.53974915 109.68589020]
[81.47767639 95.34384918]
[90.07667542 83.68179321]
[87.94194794 68.83447266]
[85.80722809 53.98715210]
[83.67250061 39.13983154]
[74.04998779 26.58125687]
[79.89725494 12.88239670]
[77.76253510 -1.96492493]
[75.62780762 -16.81224632]
[73.49308777 -31.65956879]
[71.35836792 -46.50688934]
[61.73585129 -59.06546402]
[67.58311462 -72.76432037]
[57.02603531 -85.31343079]
[62.86895370 -100.63636017]
[79.10118103 -102.97020721]
[89.02439117 -89.91410065]
[82.43043518 -74.89904785]
[91.90026093 -63.40245056]
[86.20568848 -48.64161301]
[88.34040833 -33.79429245]
[90.47512817 -18.94696999]
[92.60985565 -4.09964752]
[94.74457550 10.74767399]
[104.21440125 22.24426842]
[98.51982880 37.00510788]
[100.65454865 51.85242844]
[102.78926849 66.69975281]
[104.92399597 81.54707336]
[116.46025085 90.31410980]
[118.52232361 104.65615082]
[109.92332458 116.31820679]
[112.05805206 131.16552734]
[114.19277191 146.01284790]
[116.32749939 160.86016846]
[125.33213043 162.13403320]
[133.86485291 165.25546265]
[141.55137634 170.08374023]
[148.05537415 176.40335083]
[153.09310913 183.93365479]
[156.44586182 192.34127808]
[157.96942139 201.25489807]
[157.60026550 210.28169250]
[155.35821533 219.02455139]
[151.34536743 227.09965515]
[145.74154663 234.15319824]
[138.79611206 239.87704468]
[130.81701660 244.02206421]
[122.15701294 246.40901184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[12 51]
[13 50]
[14 49]
[15 48]
[18 45]
[19 44]
[20 43]
[21 42]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[29 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
