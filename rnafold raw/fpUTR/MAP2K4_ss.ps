%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGUGCGAGAGGCCGAGCUUGCUGCAUUGCAGCCGCCGCGGCGCCGCUCGGCUCUUCACUCCCAACA\
) } def
/len { sequence length } bind def

/coor [
[118.62396240 263.21963501]
[115.94561005 248.46070862]
[103.59408569 240.21597290]
[100.66761017 225.28646851]
[109.39918518 212.38694763]
[106.72083282 197.62800598]
[104.04248047 182.86906433]
[99.60426331 176.64978027]
[101.59066010 167.38888550]
[99.57716370 152.52464294]
[97.56366730 137.66040039]
[95.55016327 122.79615021]
[93.53666687 107.93190002]
[89.29824829 100.73923492]
[91.78182983 92.35730743]
[90.43724060 77.41769409]
[89.09265137 62.47808075]
[87.74806213 47.53846359]
[86.40347290 32.59885025]
[85.05888367 17.65923691]
[74.09301758 3.05847263]
[81.69039917 -12.60294819]
[79.67690277 -27.46719360]
[77.66339874 -42.33143997]
[75.64990234 -57.19568634]
[73.63640594 -72.05993652]
[71.62290192 -86.92417908]
[62.28150558 -93.26218414]
[58.23123169 -103.55910492]
[60.65170670 -114.12660217]
[68.45158386 -121.33023834]
[67.77861786 -136.31513977]
[58.49894714 -149.83622742]
[65.81189728 -164.51454163]
[82.19453430 -165.25027466]
[90.79380035 -151.28659058]
[82.76351166 -136.98811340]
[83.43648529 -122.00321198]
[95.16416931 -106.88312531]
[86.48715210 -88.93767548]
[88.50064850 -74.07343292]
[90.51415253 -59.20918655]
[92.52764893 -44.34494019]
[94.54114532 -29.48069382]
[96.55464935 -14.61644745]
[106.10826111 -6.86787510]
[107.74041748 5.73299265]
[99.99849701 16.31464767]
[101.34308624 31.25426102]
[102.68767548 46.19387436]
[104.03226471 61.13349152]
[105.37685394 76.07310486]
[106.72144318 91.01271820]
[108.40090942 105.91840363]
[110.41441345 120.78264618]
[112.42790985 135.64689636]
[114.44140625 150.51113892]
[116.45491028 165.37538147]
[118.80142212 180.19071960]
[121.47978210 194.94966125]
[124.15813446 209.70860291]
[136.86549377 218.71751404]
[139.37149048 233.72334290]
[130.70455933 245.78234863]
[133.38290405 260.54129028]
[145.69841003 270.82272339]
[145.19461060 286.85787964]
[132.25799561 296.34591675]
[116.81240845 292.00848389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[5 61]
[6 60]
[7 59]
[9 58]
[10 57]
[11 56]
[12 55]
[13 54]
[15 53]
[16 52]
[17 51]
[18 50]
[19 49]
[20 48]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
