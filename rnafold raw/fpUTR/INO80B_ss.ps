%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGUUUUGCUGGCUCCAGUUUUUCCGCGGGGCGGAAAAGGCGUGUCUGCGUGUGUCCCAACCAUUUCUAGUCCCCUUUCCUCGCAGGACCUC\
) } def
/len { sequence length } bind def

/coor [
[171.29811096 155.54017639]
[158.74061584 147.33595276]
[146.18312073 139.13172913]
[133.62562561 130.92750549]
[121.06812286 122.72328186]
[103.63331604 130.77355957]
[84.80309296 127.00495148]
[71.80940247 112.86481476]
[69.64258575 93.78381348]
[56.11272049 87.30750275]
[42.58285141 80.83118439]
[26.79460526 81.85187531]
[18.65533066 69.37784576]
[5.12546158 62.90153122]
[-8.40440750 56.42521286]
[-19.61346054 64.97158051]
[-33.35464478 67.79841614]
[-46.89788818 64.40303040]
[-57.57793427 55.51312637]
[-63.31885147 42.93178177]
[-63.03740311 29.17196083]
[-76.34574890 22.25184441]
[-89.65409088 15.33172607]
[-102.96243286 8.41160870]
[-116.27077484 1.49149144]
[-129.57911682 -5.42862606]
[-142.88745117 -12.34874344]
[-156.19580078 -19.26886177]
[-169.50415039 -26.18897820]
[-186.34640503 -28.13177109]
[-189.14193726 -44.85365295]
[-173.84744263 -52.16901398]
[-162.58403015 -39.49732208]
[-149.27568054 -32.57720184]
[-135.96734619 -25.65708542]
[-122.65899658 -18.73696899]
[-109.35065460 -11.81685066]
[-96.04231262 -4.89673328]
[-82.73397064 2.02338409]
[-69.42562866 8.94350147]
[-56.11728668 15.86361885]
[-42.80414200 6.86864424]
[-26.68256378 5.75160170]
[-12.08872032 12.90658283]
[-2.99482512 26.49015617]
[-1.92809176 42.89534760]
[11.60177708 49.37166214]
[25.13164520 55.84797668]
[39.95214462 54.36405563]
[49.05916595 67.30131531]
[62.58903503 73.77763367]
[76.11890411 80.25394440]
[84.28734589 73.29183960]
[94.34078979 69.53384399]
[105.07315063 69.43079376]
[115.19690704 72.99504852]
[123.49752808 79.79901886]
[128.97920227 89.02644348]
[130.98432922 99.57034302]
[129.27233887 110.16578674]
[141.82984924 118.37001038]
[154.38734436 126.57423401]
[166.94483948 134.77845764]
[179.50233459 142.98268127]
[189.72680664 136.06231689]
[201.67364502 133.08930969]
[213.87927246 134.40299988]
[224.85691833 139.81909180]
[233.27777100 148.65505981]
[238.13175964 159.81607056]
[238.84873962 171.93063354]
[235.36531067 183.51907349]
[247.04847717 192.92672729]
[258.73162842 202.33436584]
[270.41479492 211.74201965]
[284.17529297 205.13815308]
[299.43838501 205.16732788]
[313.17355347 211.82374573]
[322.65368652 223.78576660]
[325.99645996 238.67832947]
[322.53820801 253.54450989]
[312.96554565 265.43261719]
[299.17913818 271.98223877]
[283.91625977 271.89294434]
[270.20742798 265.18249512]
[260.77447510 253.18322754]
[257.49035645 238.27761841]
[261.00714111 223.42517090]
[249.32398987 214.01753235]
[237.64082336 204.60987854]
[225.95767212 195.20223999]
[209.63047791 202.53211975]
[191.74053955 200.73468018]
[177.06303406 190.20652771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[9 52]
[10 51]
[11 50]
[13 48]
[14 47]
[15 46]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[72 91]
[73 90]
[74 89]
[75 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
