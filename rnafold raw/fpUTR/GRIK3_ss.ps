%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGCAGCGGCGCUCGGGAGCCGGGCGGCUGGGCCAGGCGGCGCCUUCGGGGCUGCUGCGCGCCCGCGCCUAGAGCUGCCGCCCCAGGGAGCCCGCCACGGCCGCGCCCCGGGCACGCUCGGCGGCGCCCAACG\
) } def
/len { sequence length } bind def

/coor [
[82.20891571 569.18682861]
[68.30521393 563.04223633]
[57.81490326 552.04125977]
[52.33768082 537.86138916]
[52.70877838 522.66497803]
[58.87161255 508.76937866]
[69.88639832 498.29354858]
[84.07344818 492.83499146]
[84.41991425 477.83898926]
[84.76638794 462.84298706]
[77.32512665 449.94039917]
[85.37911224 436.32263184]
[85.72558594 421.32662964]
[86.07205200 406.33062744]
[83.05462646 399.50979614]
[86.60369873 390.99334717]
[87.29644775 376.00933838]
[87.98920441 361.02536011]
[88.68195343 346.04135132]
[78.51146698 329.65792847]
[89.41198730 312.77145386]
[89.41198730 297.77145386]
[89.41198730 282.77145386]
[81.67468262 270.04418945]
[89.41198730 256.24401855]
[89.41198730 241.24401855]
[86.23781586 234.49470520]
[89.58923340 225.89854431]
[89.93569946 210.90255737]
[90.28216553 195.90655518]
[79.84246063 185.34492493]
[79.98020935 170.13191223]
[91.12900543 159.25340271]
[91.47547150 144.25740051]
[91.82194519 129.26139832]
[92.16841125 114.26540375]
[83.72731781 99.81204224]
[92.50000000 85.55751038]
[92.50000000 70.55751038]
[92.50000000 55.55751038]
[92.50000000 40.55751038]
[92.50000000 25.55751038]
[92.32675171 10.55851173]
[84.27276611 -3.05926371]
[91.71402740 -15.96185493]
[91.36756134 -30.95785332]
[91.02108765 -45.95384979]
[90.67462158 -60.94984818]
[87.32320404 -69.54599762]
[90.49737549 -76.29531860]
[90.49737549 -91.29531860]
[90.49737549 -106.29531860]
[90.49737549 -121.29531860]
[90.49737549 -136.29531860]
[82.76007080 -150.09548950]
[90.49737549 -162.82276917]
[90.49737549 -177.82276917]
[82.76007080 -191.62294006]
[90.49737549 -204.35020447]
[90.49737549 -219.35020447]
[89.63160706 -234.32519531]
[87.90296173 -249.22526550]
[86.17431641 -264.12530518]
[75.96371460 -276.95791626]
[82.22271729 -292.11566162]
[98.51260376 -294.00555420]
[108.07572937 -280.68344116]
[101.07437134 -265.85397339]
[102.80301666 -250.95390320]
[104.53166962 -236.05384827]
[116.08609772 -245.61915588]
[130.81520081 -242.78126526]
[137.98844910 -229.60763550]
[132.37995911 -215.69558716]
[118.07566071 -211.18040466]
[105.49737549 -219.35020447]
[105.49737549 -204.35020447]
[113.23467255 -191.62294006]
[105.49737549 -177.82276917]
[105.49737549 -162.82276917]
[113.23467255 -150.09548950]
[105.49737549 -136.29531860]
[105.49737549 -121.29531860]
[105.49737549 -106.29531860]
[105.49737549 -91.29531860]
[105.49737549 -76.29531860]
[105.67061615 -61.29631805]
[106.01708984 -46.30031967]
[106.36355591 -31.30432129]
[106.71002197 -16.30832291]
[114.73923492 -3.76316261]
[107.32275391 10.21204281]
[110.65196991 16.88624191]
[107.50000000 25.55751038]
[107.50000000 40.55751038]
[107.50000000 55.55751038]
[107.50000000 70.55751038]
[107.50000000 85.55751038]
[115.25199890 94.32444000]
[115.11683655 106.02633667]
[107.16440582 114.61186981]
[106.81793976 129.60786438]
[106.47147369 144.60386658]
[106.12500000 159.59986877]
[116.75949860 170.98165894]
[116.19450378 186.18479919]
[105.27816772 196.25302124]
[104.93170166 211.24902344]
[104.58522797 226.24502563]
[104.41198730 241.24401855]
[104.41198730 256.24401855]
[112.14928436 270.04418945]
[104.41198730 282.77145386]
[104.41198730 297.77145386]
[104.41198730 312.77145386]
[112.61295319 320.08731079]
[115.32826233 330.50854492]
[111.88386536 340.47882080]
[103.66594696 346.73410034]
[102.97319794 361.71810913]
[102.28044891 376.70211792]
[101.58769226 391.68609619]
[101.06804657 406.67709351]
[100.72158051 421.67309570]
[100.37511444 436.66909790]
[107.79159546 450.64428711]
[99.76238251 463.18945312]
[99.41591644 478.18545532]
[99.06945038 493.18145752]
[112.98926544 499.28939819]
[123.50848389 510.26275635]
[129.02299500 524.42816162]
[128.69187927 539.62548828]
[122.56562042 553.53729248]
[111.57843781 564.04205322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 129]
[9 128]
[10 127]
[12 125]
[13 124]
[14 123]
[16 122]
[17 121]
[18 120]
[19 119]
[21 115]
[22 114]
[23 113]
[25 111]
[26 110]
[28 109]
[29 108]
[30 107]
[33 104]
[34 103]
[35 102]
[36 101]
[38 98]
[39 97]
[40 96]
[41 95]
[42 94]
[43 92]
[45 90]
[46 89]
[47 88]
[48 87]
[50 86]
[51 85]
[52 84]
[53 83]
[54 82]
[56 80]
[57 79]
[59 77]
[60 76]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
