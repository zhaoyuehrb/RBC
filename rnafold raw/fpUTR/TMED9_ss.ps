%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCACCGCGGCGGCGGCAGGGCGACGUGGCGCGGCCGGCUGCGGCUGCGCAGGCAGGUGGAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[101.03776550 170.08840942]
[86.12516785 171.70529175]
[71.90270233 166.93858337]
[60.97636032 156.66166687]
[55.34815979 142.75759888]
[56.04935837 127.77399445]
[62.95148087 114.45630646]
[74.78984833 105.24473572]
[89.39609528 101.82709503]
[77.02113342 93.35005188]
[64.64617157 84.87300110]
[52.27121353 76.39595795]
[36.51347351 74.98023224]
[30.38613701 61.40433121]
[18.01117516 52.92728424]
[5.63621330 44.45024109]
[-10.12152386 43.03451157]
[-16.24886131 29.45861435]
[-28.62382317 20.98156929]
[-44.38156128 19.56584167]
[-50.50889969 5.98994398]
[-66.89217377 5.26862860]
[-74.21805573 -9.40323353]
[-64.95029449 -22.93248940]
[-48.62277985 -21.40139961]
[-42.03185272 -6.38501835]
[-27.15925407 -5.57562685]
[-20.14677811 8.60660648]
[-7.77181530 17.08365250]
[7.10078239 17.89304352]
[14.11325932 32.07527924]
[26.48822212 40.55232239]
[38.86318207 49.02936935]
[53.73578262 49.83876038]
[60.74825668 64.02099609]
[73.12322235 72.49803925]
[85.49818420 80.97509003]
[97.87314606 89.45213318]
[112.09555054 94.21900177]
[127.07955170 94.91175842]
[142.06353760 95.60450745]
[156.20632935 88.51280212]
[168.56268311 96.82963562]
[183.54667664 97.52239227]
[197.68945312 90.43068695]
[210.04582214 98.74752045]
[225.02981567 99.44026947]
[240.01380920 100.13301849]
[254.99780273 100.82577515]
[269.30685425 92.81436157]
[283.25918579 101.43205261]
[282.50183105 117.81370544]
[267.81387329 125.10727692]
[254.30505371 115.80976868]
[239.32106018 115.11701965]
[224.33705139 114.42426300]
[209.35305786 113.73151398]
[196.28204346 120.87276459]
[182.85392761 112.50638580]
[167.86993408 111.81362915]
[154.79890442 118.95488739]
[141.37078857 110.58850098]
[126.38679504 109.89575195]
[111.40280151 109.20299530]
[120.99889374 120.73187256]
[124.89522552 135.21699524]
[122.37786865 150.00424194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 38]
[10 37]
[11 36]
[12 35]
[14 33]
[15 32]
[16 31]
[18 29]
[19 28]
[21 26]
[39 64]
[40 63]
[41 62]
[43 60]
[44 59]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
