%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCCCAGACAGCGCACGGCGGGAGGCUGUCGUUGGGCGUGCGCAGCUGCAGCGGCGGUUGAGGUCAAGUAGUAGCGUUGGGCUGCGGCAGCGGAGGAGCUCAAC\
) } def
/len { sequence length } bind def

/coor [
[37.27555847 189.61598206]
[40.09313202 204.34898376]
[33.91939926 218.01957703]
[21.00358391 225.64726257]
[6.05119181 224.45312500]
[-5.49030209 214.87220764]
[-9.41608429 200.39505005]
[-4.29655266 186.29681396]
[-18.02373695 192.34367371]
[-31.75092125 198.39051819]
[-45.47810364 204.43737793]
[-59.20528793 210.48422241]
[-72.93247223 216.53108215]
[-76.32318115 231.55802917]
[-87.77817535 241.58979797]
[-102.76647949 242.93693542]
[-115.52132416 235.29154968]
[-124.77109528 248.83311462]
[-141.10063171 247.32371521]
[-147.71151733 232.31611633]
[-137.80302429 219.24882507]
[-121.56817627 221.56436157]
[-118.59989166 206.99290466]
[-107.48908234 196.84333801]
[-92.35537720 195.16273499]
[-78.97932434 202.80389404]
[-65.25214386 196.75703430]
[-51.52495575 190.71018982]
[-37.79777145 184.66333008]
[-24.07058907 178.61648560]
[-10.34340382 172.56964111]
[2.57225013 164.94166565]
[14.49506664 155.83966064]
[26.41788292 146.73765564]
[38.34069824 137.63566589]
[50.26351547 128.53366089]
[62.18633270 119.43165588]
[74.10914612 110.32965088]
[73.02428436 92.97513580]
[82.43605042 78.35408783]
[98.68218994 72.15576935]
[115.44110870 76.79203033]
[126.80377960 66.99969482]
[138.16644287 57.20736313]
[143.56915283 42.33721542]
[158.26129150 39.88966370]
[169.62396240 30.09733009]
[180.98661804 20.30499840]
[192.34928894 10.51266670]
[203.71195984 0.72033536]
[215.07463074 -9.07199669]
[226.43730164 -18.86432838]
[237.79997253 -28.65666008]
[248.86746216 -38.78140640]
[259.63006592 -49.22967148]
[270.39266968 -59.67793655]
[281.15530396 -70.12619781]
[285.66760254 -85.29029083]
[300.18893433 -88.60391998]
[294.54800415 -102.71945953]
[294.74328613 -117.91914368]
[300.74493408 -131.88511658]
[311.63778687 -142.48768616]
[325.76071167 -148.11003113]
[340.96014404 -147.89477539]
[354.91821289 -141.87475586]
[365.50643921 -130.96797180]
[371.11019897 -116.83763123]
[370.87493896 -101.63851929]
[364.83657837 -87.68837738]
[353.91586304 -77.11450958]
[339.77816772 -71.52934265]
[324.57937622 -71.78458405]
[310.63720703 -77.84130859]
[306.89471436 -63.42454910]
[291.60354614 -59.36359406]
[280.84094238 -48.91532516]
[270.07833862 -38.46706009]
[259.31573486 -28.01879692]
[258.36175537 -23.18829727]
[254.26068115 -18.96364212]
[247.59230042 -17.29399109]
[236.22962952 -7.50165939]
[224.86695862 2.29067230]
[213.50428772 12.08300400]
[202.14161682 21.87533569]
[190.77896118 31.66766739]
[179.41629028 41.45999908]
[168.05361938 51.25233078]
[163.46365356 65.42206573]
[147.95878601 68.57003021]
[136.59611511 78.36236572]
[125.23344421 88.15469360]
[127.87519836 100.10540771]
[125.14313507 112.03579712]
[117.56394958 121.64591217]
[106.59876251 127.08309937]
[94.36145020 127.29917145]
[83.21115112 122.25247192]
[71.28833771 131.35447693]
[59.36552048 140.45648193]
[47.44270325 149.55847168]
[35.51988602 158.66047668]
[23.59706879 167.76248169]
[11.67425251 176.86448669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[17 22]
[32 105]
[33 104]
[34 103]
[35 102]
[36 101]
[37 100]
[38 99]
[42 93]
[43 92]
[44 91]
[46 89]
[47 88]
[48 87]
[49 86]
[50 85]
[51 84]
[52 83]
[53 82]
[54 79]
[55 78]
[56 77]
[57 76]
[59 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
