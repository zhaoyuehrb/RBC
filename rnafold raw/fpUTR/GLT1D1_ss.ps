%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAACCUGCGAGCUGGGGCGCGGCCUCGGGGAGGGGCGGGCGGGACAGACCCAGCCGCCCCGGCUCCCCCGCCGUCCGCGUCUGCGCCGGCCCCGGGGCCUGGUCGGCGGCGGCGGGGCCGGUCGAUGGCCCGGGCGGCGGCGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[106.31585693 199.62539673]
[91.22981262 203.74185181]
[77.04892731 197.15121460]
[70.46898651 182.96536255]
[74.59683990 167.88241577]
[87.48342896 159.02410889]
[88.74700165 144.07742310]
[90.01057434 129.13073730]
[91.27414703 114.18405151]
[81.30001831 102.98062897]
[66.30752563 102.50630188]
[51.31502533 102.03198242]
[36.32252502 101.55765533]
[21.33002663 101.08333588]
[6.33752823 100.60901642]
[-8.65497017 100.13468933]
[-23.64746857 99.66036987]
[-38.63996887 99.18604279]
[-53.63246536 98.71172333]
[-51.05907440 107.93860626]
[-52.88630295 118.83698273]
[-59.70987701 129.56817627]
[-71.42156219 138.13632202]
[-85.72599792 142.65109253]
[-100.03043365 147.16586304]
[-114.33486176 151.68064880]
[-128.63929749 156.19541931]
[-137.28878784 169.70710754]
[-153.25981140 171.22567749]
[-164.30075073 159.58622742]
[-161.94195557 143.71752930]
[-147.99288940 135.79269409]
[-133.15406799 141.89099121]
[-118.84963989 137.37620544]
[-104.54520416 132.86143494]
[-90.24077606 128.34666443]
[-75.93634033 123.83187866]
[-74.98813629 108.86121368]
[-74.04000092 93.89187622]
[-87.66049194 87.60839081]
[-101.28098297 81.32490540]
[-114.96695709 75.18535614]
[-128.71690369 69.19042969]
[-142.46684265 63.19549942]
[-157.86497498 67.69848633]
[-170.90269470 58.34982681]
[-171.57858276 42.32101822]
[-159.37414551 31.90798569]
[-143.65158081 35.09872055]
[-136.47190857 49.44556046]
[-122.72196960 55.44048691]
[-108.97203064 61.43541718]
[-101.53325653 61.22418594]
[-94.99749756 67.70441437]
[-81.37700653 73.98789978]
[-67.75651550 80.27138519]
[-53.15814590 83.71922302]
[-38.16564560 84.19355011]
[-23.17314720 84.66786957]
[-8.18064785 85.14218903]
[6.81185055 85.61651611]
[21.80434990 86.09083557]
[36.79684830 86.56516266]
[51.78934860 87.03948212]
[66.78184509 87.51380157]
[81.77434540 87.98812866]
[98.66719055 81.17183685]
[111.92796326 89.45236206]
[126.36800385 85.39216614]
[140.76445007 81.17997742]
[155.16088867 76.96778107]
[169.55732727 72.75559235]
[183.95376587 68.54339600]
[198.35020447 64.33120728]
[212.74662781 60.11901093]
[227.14306641 55.90681839]
[241.53950500 51.69462585]
[255.93594360 47.48243332]
[267.00811768 36.18119431]
[281.39599609 40.03318405]
[295.79244995 35.82099152]
[310.18887329 31.60879898]
[317.81469727 18.02629089]
[332.47473145 13.95961094]
[345.37658691 21.31337357]
[359.77304077 17.10118103]
[374.12426758 12.73745441]
[388.42868042 8.22267818]
[402.73312378 3.70790195]
[417.03756714 -0.80687404]
[431.34197998 -5.32165003]
[445.64642334 -9.83642578]
[459.95086670 -14.35120201]
[474.25527954 -18.86597824]
[488.55972290 -23.38075447]
[495.89749146 -37.12101746]
[510.46853638 -41.49587250]
[523.52258301 -34.41575241]
[537.82696533 -38.93052673]
[552.13140869 -43.44530487]
[556.92285156 -58.20409393]
[569.49395752 -67.30062103]
[585.01092529 -67.23708344]
[597.50708008 -58.03792191]
[602.17749023 -43.24039078]
[597.22625732 -28.53444672]
[584.55718994 -19.57482719]
[569.04187012 -19.80668640]
[556.64617920 -29.14087105]
[542.34179688 -24.62609482]
[528.03735352 -20.11131859]
[521.41290283 -6.82026291]
[506.97045898 -2.03786612]
[493.07449341 -9.07632160]
[478.77008057 -4.56154585]
[464.46563721 -0.04676959]
[450.16119385 4.46800661]
[435.85678101 8.98278236]
[421.55233765 13.49755859]
[407.24789429 18.01233482]
[392.94348145 22.52711105]
[378.63903809 27.04188728]
[373.16998291 32.08863068]
[363.98522949 31.49761963]
[349.58877563 35.70981216]
[342.68557739 48.85824966]
[328.14553833 53.33509827]
[314.40106201 46.00523758]
[300.00463867 50.21743011]
[285.60818481 54.42962265]
[275.56576538 65.42957306]
[260.14813232 61.87887192]
[245.75170898 66.09106445]
[231.35527039 70.30325317]
[216.95883179 74.51544952]
[202.56239319 78.72764587]
[188.16595459 82.93983459]
[173.76951599 87.15203094]
[159.37307739 91.36421967]
[144.97663879 95.57641602]
[130.58020020 99.78860474]
[125.00597382 104.71892548]
[115.83570099 103.93440247]
[106.22083282 115.44762421]
[104.95726013 130.39431763]
[103.69368744 145.34100342]
[102.43011475 160.28767395]
[113.64671326 171.18363953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 147]
[7 146]
[8 145]
[9 144]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[39 56]
[40 55]
[41 54]
[42 52]
[43 51]
[44 50]
[68 143]
[69 141]
[70 140]
[71 139]
[72 138]
[73 137]
[74 136]
[75 135]
[76 134]
[77 133]
[78 132]
[80 130]
[81 129]
[82 128]
[85 125]
[86 124]
[87 122]
[88 121]
[89 120]
[90 119]
[91 118]
[92 117]
[93 116]
[94 115]
[95 114]
[98 111]
[99 110]
[100 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
