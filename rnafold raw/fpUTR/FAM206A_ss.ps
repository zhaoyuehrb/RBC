%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCGCUGUGCGCCGGAAGAGCACGCCCAGUCCGGGCUGCGCGGAGGAAGCGCUGGGGUCCCGGAGGGCGGGGGUGGCGGCGCCGGAGGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[105.07549286 376.22253418]
[97.58969879 361.63162231]
[106.70903015 348.00189209]
[107.20497894 333.01010132]
[107.70093536 318.01828003]
[107.20497894 303.02648926]
[105.71929932 288.10025024]
[104.23361206 273.17401123]
[100.36193848 266.70233154]
[102.95396423 257.73092651]
[101.96260834 242.76370239]
[100.97124481 227.79650879]
[99.97988892 212.82929993]
[98.98853302 197.86209106]
[97.99716949 182.89488220]
[83.82941437 178.18278503]
[72.51445007 168.37886047]
[65.79690552 154.95352173]
[64.72826385 139.93867493]
[69.50244904 125.62013245]
[79.42147064 114.18964386]
[92.99736023 107.40946198]
[89.30191803 100.05082703]
[92.22901154 91.93251038]
[91.73306274 76.94071198]
[91.23711395 61.94890976]
[90.74115753 46.95711136]
[90.24520874 31.96531296]
[86.92546844 25.87520599]
[87.28265381 19.94984245]
[90.24520874 15.97341156]
[90.74115753 0.98161250]
[91.23711395 -14.01018620]
[91.73306274 -29.00198555]
[92.22901154 -43.99378586]
[92.72496033 -58.98558426]
[92.97296906 -73.98353577]
[92.97296906 -88.98353577]
[85.23567200 -102.78370667]
[92.97296906 -115.51097870]
[92.72496033 -130.50892639]
[92.22901154 -145.50073242]
[91.73306274 -160.49252319]
[79.31735992 -169.99958801]
[75.96787262 -185.27424622]
[83.26613617 -199.10424805]
[97.76612854 -204.95951843]
[112.62139893 -200.07536316]
[120.81774139 -186.75793457]
[118.48509216 -171.29531860]
[106.72486115 -160.98847961]
[107.22080994 -145.99667358]
[107.71675873 -131.00488281]
[111.15225983 -124.29146576]
[107.97296906 -115.51097870]
[115.71027374 -102.78370667]
[107.97296906 -88.98353577]
[107.97296906 -73.98353577]
[111.18462372 -67.16020203]
[107.71675873 -58.48963165]
[107.22080994 -43.49783325]
[106.72486115 -28.50603485]
[106.22891235 -13.51423550]
[105.73296356 1.47756302]
[105.23700714 16.46936226]
[105.23700714 31.46936226]
[105.73296356 46.46116257]
[106.22891235 61.45296097]
[106.72486115 76.44475555]
[107.22080994 91.43655396]
[107.96456909 106.41810608]
[122.31611633 111.34850311]
[133.65608215 121.37088776]
[140.27705383 134.93467712]
[141.19808960 149.95930481]
[136.30992126 164.15333557]
[126.38687134 175.36396790]
[112.96437836 181.90353394]
[113.95573425 196.87074280]
[114.94709015 211.83793640]
[115.93845367 226.80514526]
[116.92980957 241.77235413]
[117.92116547 256.73956299]
[119.15985870 271.68832397]
[120.64554596 286.61456299]
[122.13122559 301.54080200]
[125.10662079 305.31942749]
[126.44962311 309.44741821]
[126.26752472 313.32318115]
[124.86641693 316.45379639]
[122.69273376 318.51425171]
[122.19677734 333.50604248]
[121.70082855 348.49783325]
[129.89942932 362.70046997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 93]
[4 92]
[5 91]
[6 86]
[7 85]
[8 84]
[10 83]
[11 82]
[12 81]
[13 80]
[14 79]
[15 78]
[22 71]
[24 70]
[25 69]
[26 68]
[27 67]
[28 66]
[31 65]
[32 64]
[33 63]
[34 62]
[35 61]
[36 60]
[37 58]
[38 57]
[40 55]
[41 53]
[42 52]
[43 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
