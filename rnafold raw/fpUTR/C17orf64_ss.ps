%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGACGGCUAGGUCACAGAAGCAGUGGGUCAGAAGCCAGAGGGGACGUGGGGAGUGCCACCCUGGAGCCUACCGGCACACCUGCUGAG\
) } def
/len { sequence length } bind def

/coor [
[-30.10672951 306.67993164]
[-44.03302002 314.19012451]
[-59.73252106 315.82162476]
[-74.83213806 311.35711670]
[-84.06706238 323.17727661]
[-93.30198669 334.99743652]
[-91.12740326 350.65139771]
[-100.72528076 363.20751953]
[-116.40136719 365.21646118]
[-128.85531616 355.48638916]
[-130.69842529 339.78994751]
[-120.83720398 327.43954468]
[-105.12214661 325.76251221]
[-95.88722229 313.94235229]
[-86.65230560 302.12219238]
[-94.06669617 290.07678223]
[-96.89507294 276.18734741]
[-94.77252960 262.14227295]
[-87.93727112 249.65615845]
[-77.20410919 240.26040649]
[-63.86732864 235.11552429]
[-49.54467392 234.86773682]
[-35.98110199 239.56790161]
[-26.33928871 228.07722473]
[-16.69747543 216.58656311]
[-7.05566120 205.09590149]
[2.58615303 193.60522461]
[12.22796726 182.11456299]
[21.86978149 170.62390137]
[31.51159477 159.13323975]
[27.79219627 149.16482544]
[28.67056084 138.47920227]
[34.04945755 129.10977173]
[42.96862793 122.86917877]
[53.77553940 120.99871063]
[64.43140411 123.92196655]
[75.22150421 113.50209045]
[86.01159668 103.08221436]
[90.04975128 89.69621277]
[103.56852722 86.12768555]
[108.12075806 70.97553253]
[122.65077209 67.70018005]
[133.44087219 57.28030014]
[144.23097229 46.86042786]
[144.67147827 31.28982162]
[155.76260376 20.87629509]
[170.60408020 21.39220810]
[171.04458618 5.82160425]
[182.13571167 -4.59192228]
[196.97718811 -4.07600927]
[207.76728821 -14.49588490]
[218.55738831 -24.91576004]
[216.26455688 -40.26250458]
[223.46003723 -54.01039505]
[237.37704468 -60.87308884]
[252.66419983 -58.21173859]
[263.44326782 -47.04968643]
[265.56948853 -31.67897415]
[258.22528076 -18.00995064]
[244.23463440 -11.29863358]
[228.97726440 -14.12566376]
[218.18716431 -3.70578790]
[207.39706421 6.71408749]
[207.39469910 21.56452751]
[196.60044861 32.28547287]
[181.02395630 32.18230438]
[181.02159119 47.03274536]
[170.22734070 57.75368881]
[154.65084839 57.65052414]
[143.86074829 68.07039642]
[133.07064819 78.49027252]
[129.29019165 92.89712524]
[113.98840332 96.91778564]
[109.95024872 110.30378723]
[96.43147278 113.87231445]
[85.64138031 124.29219055]
[74.85128021 134.71206665]
[75.79432678 154.56858826]
[62.28906250 168.74943542]
[43.00226212 168.77503967]
[33.36044693 180.26571655]
[23.71863365 191.75637817]
[14.07681942 203.24703979]
[4.43500566 214.73771667]
[-5.20680857 226.22837830]
[-14.84862232 237.71903992]
[-24.49043655 249.20971680]
[-17.00168800 263.32095337]
[-15.46027565 279.18325806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[23 87]
[24 86]
[25 85]
[26 84]
[27 83]
[28 82]
[29 81]
[30 80]
[36 77]
[37 76]
[38 75]
[40 73]
[42 71]
[43 70]
[44 69]
[47 66]
[50 63]
[51 62]
[52 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
