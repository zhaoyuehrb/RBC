%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCGGCGCCUCAGGUCGCGGGGCGCCUAGGCCUGGGUUGUCCUUUGCAUCUGCACGUGUUCGCAGUCGUUUCCGCG\
) } def
/len { sequence length } bind def

/coor [
[80.64317322 108.66938019]
[65.66985321 109.56360626]
[50.71726990 110.75535583]
[35.79133606 112.24416351]
[20.86540604 113.73297119]
[6.05477524 116.10894012]
[-8.58786964 119.36362457]
[-23.23051453 122.61830902]
[-37.87315750 125.87298584]
[-52.51580429 129.12767029]
[-67.15844727 132.38235474]
[-81.80109406 135.63703918]
[-96.44374084 138.89172363]
[-103.49568939 152.84893799]
[-117.88961029 158.96032715]
[-132.82913208 154.34027100]
[-141.26025391 141.17024231]
[-139.20208740 125.66868591]
[-127.62640381 115.15499878]
[-111.99890900 114.59339905]
[-99.69841766 124.24906921]
[-85.05577850 120.99439240]
[-70.41313171 117.73970795]
[-55.77048492 114.48502350]
[-41.12784195 111.23034668]
[-26.48519516 107.97566223]
[-11.84255123 104.72097778]
[2.80009341 101.46630096]
[5.05125284 98.41970062]
[9.02146626 96.44332123]
[14.12262535 96.39638519]
[19.37659836 98.80703735]
[34.30253220 97.31822968]
[49.22846222 95.82942200]
[55.74663925 91.92621613]
[64.77562714 94.59028625]
[79.74894714 93.69606018]
[87.09025574 83.17194366]
[99.15678406 78.80722046]
[111.53193665 82.19946289]
[119.68618774 92.10703278]
[134.68322754 91.80879974]
[140.87617493 79.10279846]
[151.92402649 70.39311218]
[165.59432983 67.36588287]
[179.15658569 70.56638336]
[189.92759705 79.30184937]
[195.80238342 91.79042053]
[210.79942322 92.08865356]
[222.14695740 81.41760254]
[237.35183716 81.93369293]
[247.45510864 92.81758881]
[262.45214844 93.11582184]
[277.44918823 93.41405487]
[292.44622803 93.71228790]
[301.70700073 81.26169586]
[316.52743530 76.66445160]
[331.20874023 81.68830109]
[340.10565186 94.40145874]
[339.79714966 109.91546631]
[330.40182495 122.26486969]
[315.53240967 126.70106506]
[300.90646362 121.51824951]
[292.14797974 108.70932007]
[277.15093994 108.41109467]
[262.15390015 108.11286163]
[247.15687561 107.81462860]
[236.62887573 118.28824615]
[221.41549683 118.19944000]
[210.50119019 107.08568573]
[195.50415039 106.78745270]
[187.59034729 120.73097992]
[173.68400574 128.89509583]
[157.46574402 129.01121521]
[143.28227234 120.95526123]
[134.98146057 106.80583954]
[119.98442078 107.10407257]
[108.96215820 119.22302246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 34]
[4 33]
[5 32]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[41 77]
[42 76]
[48 71]
[49 70]
[52 67]
[53 66]
[54 65]
[55 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
