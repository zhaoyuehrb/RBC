%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUCUAAUCCGUUUCACACACGGUGCUGCUACCUCGUUUGCUUCGUGCGUGCGUGCGCGCGCAG\
) } def
/len { sequence length } bind def

/coor [
[138.36994934 129.09234619]
[125.15150452 122.00201416]
[111.93305969 114.91168976]
[98.03134918 118.99685669]
[85.26274872 112.14782715]
[80.97661591 98.30675507]
[69.19050598 107.86517334]
[54.68188858 112.17134857]
[39.67052078 110.59895325]
[26.44064331 103.41856384]
[16.99343300 91.75173187]
[12.74429417 77.39588928]
[14.31087017 62.54748154]
[1.09242606 55.45715332]
[-13.86814308 59.79525757]
[-27.17251968 52.41635513]
[-31.21604156 38.12700272]
[-44.43448639 31.03667641]
[-57.65292740 23.94634819]
[-73.36553955 27.18568230]
[-85.60211945 16.81043816]
[-84.97580719 0.77961522]
[-71.96705627 -8.60931110]
[-56.55506897 -4.15395927]
[-50.56259918 10.72790527]
[-37.34415817 17.81823349]
[-24.12571335 24.90855980]
[-9.98474121 20.37331009]
[3.52164483 27.37560844]
[8.18275356 42.23871231]
[21.40119743 49.32903671]
[32.90479660 39.81081772]
[47.21489716 35.41008759]
[62.16001511 36.82721329]
[75.45981598 43.87724686]
[85.07302094 55.51339340]
[89.51073456 69.98231506]
[88.06694031 85.08831024]
[101.96865082 81.00314331]
[114.73725128 87.85217285]
[119.02338409 101.69324493]
[132.24183655 108.78356934]
[145.46026611 115.87390137]
[156.34219360 110.13452148]
[168.51643372 110.52733612]
[178.79747009 116.82867432]
[184.55491638 127.28467560]
[184.38621521 139.09768677]
[196.88262939 147.39465332]
[209.37904358 155.69161987]
[221.87545776 163.98858643]
[234.37187195 172.28555298]
[246.86828613 180.58251953]
[259.36468506 188.87948608]
[275.75671387 189.36349487]
[283.29425049 203.92774963]
[274.22338867 217.58978271]
[257.87539673 216.29527283]
[251.06773376 201.37590027]
[238.57131958 193.07893372]
[226.07490540 184.78196716]
[213.57849121 176.48500061]
[201.08207703 168.18803406]
[188.58566284 159.89106750]
[176.08924866 151.59410095]
[158.71247864 156.44833374]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[6 38]
[13 31]
[14 30]
[17 27]
[18 26]
[19 25]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
