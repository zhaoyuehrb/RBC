%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGCAGGGGAGCAGAUGAGGGAGGAGCCUUAGAGCUGGAGCAAAGUGAGGAAGCUGUCUCCAUAGGGAAGAGGCCUG\
) } def
/len { sequence length } bind def

/coor [
[90.51281738 199.41946411]
[93.45802307 180.26284790]
[94.04692078 165.27441406]
[94.63581085 150.28598022]
[95.22470856 135.29754639]
[95.81360626 120.30910492]
[88.67723846 133.50274658]
[74.12308502 137.13272095]
[61.62670135 128.83570862]
[59.32391357 114.01351929]
[68.71396637 102.31621552]
[83.68299866 101.35921478]
[69.82480621 95.61896515]
[55.96660995 89.87871552]
[44.04497528 96.48110199]
[30.70126152 94.94735718]
[20.87981987 86.07527924]
[18.08632469 73.33890533]
[4.46417665 67.05900574]
[-9.15797043 60.77911377]
[-22.78011894 54.49921417]
[-36.40226746 48.21931839]
[-51.14110184 53.92390823]
[-65.56281281 47.45940018]
[-71.11125183 32.66107941]
[-64.49462891 18.30852127]
[-49.63847351 12.91684818]
[-35.35667419 19.68484116]
[-30.12236977 34.59717178]
[-16.50022316 40.87706757]
[-2.87807488 47.15696335]
[10.74407291 53.43685913]
[24.36622047 59.71675491]
[39.73878479 53.20127106]
[55.42555237 59.83173370]
[61.70686340 76.02052307]
[75.56505585 81.76077271]
[89.42324829 87.50102234]
[104.23857117 85.15451050]
[115.64466095 75.41278839]
[127.05075073 65.67106628]
[138.45684814 55.92934418]
[137.98638916 42.30966949]
[145.41087341 31.11664009]
[157.77479553 26.39351082]
[170.39120483 29.68667984]
[182.17095947 20.40027046]
[193.95071411 11.11386108]
[195.55918884 -4.60836458]
[207.86642456 -14.52337837]
[223.57075500 -12.74877739]
[233.35510254 -0.33740154]
[231.41456604 15.34729958]
[218.90043640 24.99987221]
[203.23712158 22.89361572]
[191.45736694 32.18002319]
[179.67762756 41.46643448]
[178.50396729 58.12145615]
[165.47453308 69.08830261]
[148.19856262 67.33543396]
[136.79248047 77.07715607]
[125.38638306 86.81887817]
[113.98029327 96.56060028]
[128.66050720 93.47980499]
[142.87232971 88.68147278]
[157.69200134 91.00041962]
[169.75871277 99.91077423]
[176.33601379 113.39183807]
[175.93229675 128.38639832]
[168.63911438 141.49401855]
[156.11041260 149.74215698]
[141.18743896 151.26029968]
[127.25439453 145.70417786]
[117.47107697 134.33392334]
[110.80204773 120.89800262]
[110.21315002 135.88644409]
[109.62425232 150.87487793]
[109.03535461 165.86331177]
[108.44645691 180.85174561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 79]
[3 78]
[4 77]
[5 76]
[6 75]
[12 38]
[13 37]
[14 36]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[39 63]
[40 62]
[41 61]
[42 60]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
