%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCUCCAAUUCUGUCCCUCCGCCCCCCGGCUCCUGCUCUCUCCGCCUAGCCUUUUCCCCUCCCAGCUGCCUGCCUGCCAGGGGUAGUGAGCCGGCUGAGAGGC\
) } def
/len { sequence length } bind def

/coor [
[-36.00565720 196.15417480]
[-35.94406509 204.05511475]
[-37.00856781 211.88119507]
[-39.17658615 219.47279358]
[-42.40303802 226.67520142]
[-46.62127304 233.34178162]
[-51.74447250 239.33691406]
[-57.66740799 244.53881836]
[-64.26862335 248.84196472]
[-71.41291046 252.15924072]
[-78.95409393 254.42373657]
[-86.73799896 255.59005737]
[-94.60562897 255.63525391]
[-102.39640045 254.55928040]
[-109.95142365 252.38494873]
[-117.11672974 249.15745544]
[-123.74644470 244.94348145]
[-129.70570374 239.82977295]
[-134.87344360 233.92134094]
[-139.14485168 227.33934021]
[-142.43345642 220.21861267]
[-144.67294312 212.70483398]
[-145.81840515 204.95161438]
[-160.79206848 204.06300354]
[-175.76571655 203.17439270]
[-190.17831421 210.99803162]
[-204.01676941 202.19865417]
[-203.04527283 185.82830811]
[-188.26321411 178.72740173]
[-174.87712097 188.20074463]
[-159.90345764 189.08935547]
[-144.92980957 189.97796631]
[-134.62994385 167.09985352]
[-115.19061279 151.16403198]
[-90.64567566 145.53099060]
[-66.11235809 151.41773987]
[-46.72446823 167.63510132]
[-33.58844376 160.39321899]
[-29.17970657 154.31007385]
[-19.95410728 153.13795471]
[-6.60925007 146.28851318]
[6.73560619 139.43907166]
[20.08046341 132.58963013]
[33.42531967 125.74019623]
[41.21514893 113.04500580]
[57.02564621 113.62698364]
[70.37050629 106.77754974]
[83.71536255 99.92810822]
[88.00072479 88.99037170]
[98.53011322 83.78167725]
[109.82437897 87.01245880]
[123.36634827 80.56147766]
[136.81123352 73.91054535]
[137.66899109 58.63927841]
[146.00044250 45.93165588]
[159.48432922 39.14555359]
[174.45436096 40.01403046]
[186.89590454 48.20386505]
[200.24076843 41.35442734]
[213.58561707 34.50498962]
[226.93048096 27.65555000]
[240.27532959 20.80611229]
[245.20523071 6.02998447]
[258.83639526 -0.72621751]
[272.89279175 4.06474113]
[286.23764038 -2.78469729]
[299.58248901 -9.63413620]
[312.82440186 -16.68057060]
[318.64529419 -31.63036919]
[334.00503540 -36.26268005]
[347.12091064 -27.02398682]
[347.93154907 -11.00142670]
[335.81509399 -0.48613653]
[320.06628418 -3.54454613]
[315.65753174 2.53859854]
[306.43194580 3.71072054]
[293.08706665 10.56015873]
[279.74221802 17.40959740]
[275.44021606 31.62326622]
[262.00421143 38.75967407]
[247.12477112 34.15096664]
[233.77992249 41.00040817]
[220.43505859 47.84984589]
[207.09020996 54.69928360]
[193.74534607 61.54872131]
[193.14631653 76.43182373]
[185.12472534 89.10107422]
[171.75027466 96.10040283]
[156.56843567 95.46131134]
[143.66067505 87.25540161]
[139.07360840 93.20522308]
[129.81732178 94.10344696]
[116.27536011 100.55442810]
[107.22061157 114.59648895]
[90.56479645 113.27296448]
[77.21994019 120.12240601]
[63.87508774 126.97183990]
[55.13074112 140.15695190]
[40.27475739 139.08505249]
[26.92990112 145.93449402]
[13.58504486 152.78392029]
[0.24018839 159.63336182]
[-13.10466766 166.48280334]
[-26.34656143 173.52923584]
[-39.48258591 180.77111816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 32]
[24 31]
[25 30]
[37 105]
[38 104]
[40 103]
[41 102]
[42 101]
[43 100]
[44 99]
[46 97]
[47 96]
[48 95]
[51 93]
[52 92]
[53 90]
[58 85]
[59 84]
[60 83]
[61 82]
[62 81]
[65 78]
[66 77]
[67 76]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
