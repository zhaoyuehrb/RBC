%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUGGGCUGGGCCGCGCGGCCGCGCGCACUCGCACCCGCUGCCCCCGAGGCCCUCCUGCACUCUCCCCGGCGCCGCUCUCCGGCCCUCGCCCUGUCCGCCGCCACCGCCGCCGCCGCCAGAGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[112.73194122 142.30352783]
[97.82199860 143.94476318]
[85.97913361 134.73896790]
[83.89140320 119.88496399]
[92.73931885 107.77035522]
[77.74932861 108.31819153]
[62.75933456 108.86602020]
[53.36405563 117.80121613]
[40.80093002 117.89287567]
[31.86789703 109.64078522]
[16.86900902 109.82342529]
[1.87012041 110.00607300]
[-13.12876797 110.18872070]
[-28.12765503 110.37136841]
[-41.83259201 118.27613068]
[-54.65313339 110.69437408]
[-69.65202332 110.87702179]
[-85.19927979 120.65448761]
[-100.17935944 111.59831238]
[-115.16934967 112.14614105]
[-130.15934753 112.69397736]
[-143.66772461 120.93012238]
[-156.66909790 113.66281128]
[-171.65908813 114.21063995]
[-186.64907837 114.75846863]
[-203.11079407 126.27439117]
[-219.86434937 116.74245453]
[-234.80989075 118.01946259]
[-247.94557190 127.83709717]
[-262.90698242 121.12231445]
[-264.30310059 104.78270721]
[-250.69772339 95.62705994]
[-236.08689880 103.07392120]
[-221.14135742 101.79691315]
[-215.20004272 93.32881165]
[-205.35244751 89.50108337]
[-194.82037354 91.82874298]
[-187.19691467 99.76847839]
[-172.20690918 99.22064972]
[-157.21691895 98.67282104]
[-144.78071594 90.47585297]
[-130.70716858 97.70397949]
[-115.71718597 97.15615082]
[-100.72718811 96.60832214]
[-92.20652771 87.93108368]
[-79.65383911 87.41097260]
[-69.83467102 95.87813568]
[-54.83578110 95.69548798]
[-42.20366287 87.80378723]
[-28.31030273 95.37248230]
[-13.31141376 95.18983459]
[1.68747413 95.00718689]
[16.68636131 94.82453918]
[31.68524933 94.64189148]
[46.20663834 84.86711884]
[62.21150208 93.87602997]
[77.20149231 93.32819366]
[92.19149017 92.78036499]
[107.10150146 91.13980103]
[121.85198975 88.41524506]
[136.56820679 85.51128387]
[151.24797058 82.42835236]
[165.92773438 79.34542084]
[180.60749817 76.26248169]
[195.28726196 73.17955017]
[201.34164429 61.07880783]
[213.10437012 54.79573441]
[226.14106750 56.44319534]
[235.68305969 65.19120026]
[250.43354797 62.46664429]
[265.18402100 59.74209213]
[279.93450928 57.01753998]
[294.68499756 54.29298782]
[309.40121460 51.38902664]
[321.31652832 40.98057556]
[335.36233521 45.93687057]
[350.04208374 42.85393524]
[354.99703979 27.13076973]
[367.11523438 16.09250832]
[383.04846191 12.66183949]
[398.45776367 17.67681503]
[409.19512939 29.68857765]
[423.79547119 26.24909019]
[438.39581299 22.80960274]
[452.99615479 19.37011528]
[459.07290649 5.21458149]
[472.16665649 -2.55763602]
[487.14904785 -1.14616597]
[498.29397583 8.69903946]
[507.92349243 -4.13265276]
[523.96319580 -4.46039391]
[534.10882568 7.96723175]
[530.57751465 23.61681366]
[516.07818604 30.48332977]
[501.73348999 23.29937935]
[496.15518188 37.08417892]
[483.37835693 45.03504944]
[468.19213867 43.92490387]
[456.43563843 33.97045517]
[441.83529663 37.40994263]
[427.23495483 40.84943008]
[412.63461304 44.28891754]
[409.54843140 57.64930344]
[400.94833374 68.41439056]
[388.47979736 74.43253326]
[374.56854248 74.46920776]
[361.94857788 68.45982361]
[353.12503052 57.53370285]
[338.44525146 60.61663437]
[327.57992554 70.80457306]
[312.48416138 66.06879425]
[306.52319336 70.56887817]
[297.40954590 69.04347229]
[282.65905762 71.76802826]
[267.90856934 74.49257660]
[253.15809631 77.21713257]
[238.40760803 79.94168091]
[229.52505493 94.16728210]
[212.78326416 97.68528748]
[198.37019348 87.85931396]
[183.69042969 90.94224548]
[169.01066589 94.02518463]
[154.33090210 97.10811615]
[139.65113831 100.19105530]
[133.69018555 104.69113922]
[124.57653809 103.16573334]
[109.82605743 105.89028168]
[121.09558105 115.78967285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 58]
[6 57]
[7 56]
[10 54]
[11 53]
[12 52]
[13 51]
[14 50]
[16 48]
[17 47]
[19 44]
[20 43]
[21 42]
[23 40]
[24 39]
[25 38]
[27 34]
[28 33]
[59 127]
[60 126]
[61 124]
[62 123]
[63 122]
[64 121]
[65 120]
[69 117]
[70 116]
[71 115]
[72 114]
[73 113]
[74 111]
[76 109]
[77 108]
[82 102]
[83 101]
[84 100]
[85 99]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
