%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGGAGCCAAGUAAUGGUGAUACUGAUGCUUCCUUUUCUUUGCCGCGCUCGGAUUCUGAGUUUCACAAGAAUGUACCUGGGUGCCCCUUAGCGGGAU\
) } def
/len { sequence length } bind def

/coor [
[93.35798645 135.13737488]
[84.98992157 131.76037598]
[77.87751007 126.47052002]
[72.43603516 119.67704010]
[58.60071945 125.47222137]
[44.76540375 131.26739502]
[30.93008995 137.06257629]
[17.09477615 142.85774231]
[10.84200382 159.10058594]
[-4.87891340 165.75045776]
[-20.27252388 159.18762207]
[-33.91700363 165.41885376]
[-47.56148148 171.65007019]
[-61.20596313 177.88130188]
[-65.19830322 193.00067139]
[-78.00489044 201.97425842]
[-93.57884216 200.56501770]
[-104.56661987 189.43835449]
[-105.78012848 173.84793091]
[-96.64638519 161.15505981]
[-81.47806549 157.35295105]
[-67.43718719 164.23681641]
[-53.79270935 158.00559998]
[-40.14822769 151.77436829]
[-26.50374794 145.54313660]
[-23.68635368 132.86059570]
[-13.89422798 124.02754211]
[-0.60056591 122.48240662]
[11.29959869 129.02243042]
[25.13491440 123.22725677]
[38.97022629 117.43208313]
[52.80554199 111.63690186]
[66.64085388 105.84172821]
[65.86318970 97.81735992]
[67.00754547 89.75587463]
[70.04698944 82.11563110]
[74.84581757 75.33989716]
[81.16518402 69.83123779]
[88.67484283 65.92761993]
[96.97029114 63.88186264]
[105.59453583 63.84555817]
[114.06324768 65.85849762]
[121.89199066 69.84435272]
[128.62388611 75.61288452]
[133.85624695 82.86875916]
[137.26458740 91.22653961]
[150.01046753 83.31816101]
[162.75634766 75.40977478]
[175.50222778 67.50139618]
[188.24810791 59.59301376]
[200.99398804 51.68463135]
[213.73986816 43.77624893]
[226.48576355 35.86786652]
[238.70439148 27.16701317]
[250.34658813 17.70872307]
[261.98880005 8.25043201]
[273.63098145 -1.20785773]
[285.27319336 -10.66614819]
[282.76727295 -25.81923103]
[288.18862915 -40.18949127]
[300.07894897 -49.91139984]
[315.23983765 -52.36981201]
[329.59301758 -46.90342712]
[339.27761841 -34.98267746]
[341.68847656 -19.81418419]
[336.17715454 -5.47819328]
[324.22610474 4.16898394]
[309.05010986 6.53230524]
[294.73147583 0.97604918]
[283.08926392 10.43433952]
[271.44708252 19.89262962]
[259.80487061 29.35091972]
[248.16268921 38.80920792]
[247.82754517 41.77099228]
[246.18811035 44.76150894]
[243.23385620 47.23867035]
[239.16763306 48.67022324]
[234.39413452 48.61374664]
[221.64825439 56.52212906]
[208.90237427 64.43051147]
[196.15649414 72.33889008]
[183.41061401 80.24727631]
[170.66473389 88.15565491]
[157.91885376 96.06404114]
[145.17297363 103.97241974]
[141.40574646 118.49165344]
[148.69869995 131.59939575]
[155.99165344 144.70713806]
[170.96398926 150.46981812]
[175.65603638 165.81140137]
[166.46846008 178.96313477]
[150.44918823 179.83612061]
[139.88681030 167.76069641]
[142.88391113 152.00009155]
[135.59095764 138.89234924]
[128.29800415 125.78459930]
[120.54533386 131.55313110]
[111.73377991 135.11286926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[11 25]
[12 24]
[13 23]
[14 22]
[46 85]
[47 84]
[48 83]
[49 82]
[50 81]
[51 80]
[52 79]
[53 78]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
