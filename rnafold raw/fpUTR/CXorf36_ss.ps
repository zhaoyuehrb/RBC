%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUUGGCCAAGCCCUGCCUCUGUACAGCCUCGAGUGGACAGCCAGAGGCUGCAGCUGGAGCCCAGAGCCCAAG\
) } def
/len { sequence length } bind def

/coor [
[123.27915955 231.56280518]
[119.59687805 217.02178955]
[115.91459656 202.48078918]
[112.23231506 187.93978882]
[101.87992096 181.34062195]
[98.81575012 169.03479004]
[105.26271820 157.64672852]
[102.18448639 142.96597290]
[99.10625458 128.28521729]
[95.72528076 113.67121887]
[86.11436462 103.51631927]
[89.73371887 90.01106262]
[86.05143738 75.47006226]
[82.36914825 60.92905807]
[66.68846893 54.96942520]
[57.64915085 41.03368378]
[58.58209229 24.61385155]
[68.93283081 12.04544735]
[64.65278625 -2.33096480]
[60.37274170 -16.70737648]
[56.09269714 -31.08378983]
[51.81265259 -45.46020126]
[47.53261185 -59.83661270]
[43.25256729 -74.21302795]
[28.23512077 -76.71055603]
[15.84177208 -85.44508362]
[8.49981213 -98.64037323]
[7.61867142 -113.65319061]
[13.31964874 -127.50267792]
[24.42245674 -137.46224976]
[20.14241409 -151.83866882]
[6.12541580 -159.13929749]
[1.45598590 -174.23803711]
[8.90441322 -188.17707825]
[24.05167770 -192.68661499]
[37.91117859 -185.09123230]
[42.26031494 -169.89712524]
[34.51882553 -156.11871338]
[38.79887009 -141.74229431]
[53.54113770 -139.47712708]
[65.88875580 -131.00094604]
[73.36232758 -117.95078278]
[74.43302917 -102.88845062]
[68.83506012 -88.79768372]
[57.62897873 -78.49307251]
[61.90902328 -64.11665344]
[66.18906403 -49.74024582]
[70.46910858 -35.36383438]
[74.74915314 -20.98742104]
[79.02919769 -6.61100817]
[83.30924225 7.76540422]
[96.40368652 11.08828926]
[106.17315674 20.57649612]
[109.93693542 33.77834702]
[106.58675385 47.20374298]
[96.91015625 57.24677658]
[100.59243774 71.78778076]
[104.27471924 86.32878113]
[113.88563538 96.48368073]
[110.26628113 109.98893738]
[115.54798126 117.80284882]
[113.78701019 125.20698547]
[116.86524200 139.88774109]
[119.94347382 154.56849670]
[132.53865051 167.81498718]
[126.77332306 184.25750732]
[130.45559692 198.79850769]
[134.13787842 213.33950806]
[137.82015991 227.88052368]
[151.97799683 234.52052307]
[158.50848389 248.72921753]
[154.32810974 263.79766846]
[141.41073608 272.61105347]
[125.85553741 271.00790405]
[115.00721741 259.74523926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[7 64]
[8 63]
[9 62]
[10 60]
[12 58]
[13 57]
[14 56]
[18 51]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[30 39]
[31 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
