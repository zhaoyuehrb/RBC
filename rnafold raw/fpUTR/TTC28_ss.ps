%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCGCGCGCGCGGUUUGGGGGCAGUGAGGGGCGCCGCGGCGGCGCGCAGCACGGCGGGAACAUGGCGCGCGGAACCGGCGCGCGCGCCUAGCUGGCGGGACCGUUAGCUCGAGGCGGACGCGGCCCGGGCCCCGUGGGG\
) } def
/len { sequence length } bind def

/coor [
[101.63455200 198.25683594]
[113.20280457 187.91491699]
[111.55842590 173.00532532]
[109.91404724 158.09573364]
[108.26966858 143.18614197]
[106.62528992 128.27653503]
[85.00071716 121.11215210]
[77.37238312 102.38981628]
[62.76970291 98.96027374]
[48.16702271 95.53073120]
[33.56434250 92.10118866]
[18.96166420 88.67164612]
[4.35898447 85.24211121]
[-10.24369526 81.81256866]
[-25.44735336 86.18970490]
[-36.06848145 75.74743652]
[-50.67115784 72.31790161]
[-59.58345032 84.59986877]
[-72.48425293 92.51265717]
[-87.39141083 94.87703705]
[-102.02843475 91.36345673]
[-114.17212677 82.53762054]
[-121.99030304 69.76963043]
[-124.31814575 55.02139282]
[-138.92082214 51.59185028]
[-154.12448120 55.96899033]
[-164.74560547 45.52672195]
[-179.34828186 42.09718323]
[-193.95097351 38.66764069]
[-207.28009033 46.72818375]
[-222.04042053 43.04212189]
[-229.64277649 30.28517151]
[-244.84643555 34.66230774]
[-255.46755981 24.22004128]
[-270.07025146 20.79050064]
[-284.67291260 17.36096001]
[-299.27560425 13.93141937]
[-313.87826538 10.50187874]
[-328.48095703 7.07233810]
[-345.28295898 9.33712578]
[-352.11050415 -6.18128633]
[-339.08859253 -17.03792191]
[-325.05142212 -7.53034115]
[-310.44873047 -4.10080051]
[-295.84606934 -0.67125994]
[-281.24337769 2.75828075]
[-266.64068604 6.18782139]
[-252.03802490 9.61736202]
[-237.87884521 4.99492073]
[-226.21324158 15.68249226]
[-213.72682190 7.64352846]
[-198.86877441 10.91354942]
[-190.52142334 24.06496048]
[-175.91874695 27.49450111]
[-161.31607056 30.92404175]
[-147.15689087 26.30160141]
[-135.49128723 36.98917389]
[-120.88860321 40.41871262]
[-112.23881531 28.24864960]
[-99.55422211 20.29587746]
[-84.75122833 17.79865646]
[-70.08038330 21.16823006]
[-57.78427887 29.92148209]
[-49.75469971 42.74991989]
[-47.24161911 57.71521759]
[-32.63893890 61.14476013]
[-18.47976112 56.52231598]
[-6.81415415 67.20989227]
[7.78852510 70.63942719]
[22.39120483 74.06896973]
[36.99388504 77.49851227]
[51.59656525 80.92805481]
[66.19924164 84.35758972]
[80.80192566 87.78713226]
[91.41711426 77.23878479]
[107.23232269 75.13245392]
[121.96543884 83.50373077]
[129.04232788 99.98476410]
[143.93296814 98.17671204]
[158.82359314 96.36866760]
[173.71423340 94.56061554]
[188.56155396 92.42589569]
[203.35839844 89.96553040]
[218.15524292 87.50516510]
[232.95208740 85.04479980]
[242.14746094 72.47169495]
[257.18859863 70.18732452]
[269.11846924 79.03118896]
[283.91531372 76.57082367]
[298.71215820 74.11045837]
[313.50900269 71.65009308]
[328.30584717 69.18972778]
[343.04507446 66.40490723]
[357.71957397 63.29697800]
[372.39407349 60.18904877]
[387.06857300 57.08111572]
[401.74304199 53.97318649]
[416.41754150 50.86525726]
[431.09204102 47.75732803]
[445.76654053 44.64939880]
[457.59310913 33.28875351]
[473.26757812 38.10982132]
[476.66540527 54.15310287]
[464.29119873 64.91464233]
[448.87448120 59.32389069]
[434.19998169 62.43181992]
[419.52548218 65.53974915]
[404.85098267 68.64768219]
[390.17648315 71.75560760]
[375.50198364 74.86354065]
[360.82751465 77.97147369]
[346.15301514 81.07939911]
[342.80957031 84.58792877]
[337.20004272 85.98461914]
[330.76620483 83.98657227]
[315.96936035 86.44693756]
[301.17251587 88.90730286]
[286.37567139 91.36766815]
[271.57882690 93.82802582]
[263.15283203 106.05659485]
[248.18176270 108.76254272]
[235.41244507 99.84164429]
[220.61560059 102.30200958]
[205.81875610 104.76237488]
[191.02191162 107.22274017]
[187.52758789 110.58101654]
[181.86212158 111.72996521]
[175.52227783 109.45124817]
[160.63165283 111.25930023]
[145.74101257 113.06735229]
[130.85038757 114.87539673]
[121.53488922 126.63216400]
[123.17926788 141.54176331]
[124.82363892 156.45135498]
[126.46801758 171.36094666]
[128.11239624 186.27053833]
[141.65640259 193.84283447]
[148.13226318 207.94400024]
[145.04989624 223.15184021]
[133.59451294 233.61865234]
[118.17095947 235.31971741]
[104.70989990 227.60093689]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 136]
[3 135]
[4 134]
[5 133]
[6 132]
[8 74]
[9 73]
[10 72]
[11 71]
[12 70]
[13 69]
[14 68]
[16 66]
[17 65]
[24 58]
[25 57]
[27 55]
[28 54]
[29 53]
[32 50]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
[78 131]
[79 130]
[80 129]
[81 128]
[82 125]
[83 124]
[84 123]
[85 122]
[88 119]
[89 118]
[90 117]
[91 116]
[92 115]
[93 112]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
