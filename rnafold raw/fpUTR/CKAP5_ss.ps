%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAAGAACGAGGACACUGCGGGGUGUGCGGCGGCCCAAGCGGUUUCAAACGGCUUAGAGCAGGCCGCUUGGUUCUGACCCAGCUGAGGAAAUACUCUUAAUUCUAAGGAAAACCUGGAAGCACA\
) } def
/len { sequence length } bind def

/coor [
[215.72969055 209.65840149]
[205.02584839 202.56021118]
[196.76638794 192.70114136]
[191.63902283 180.88613892]
[190.07518005 168.08364868]
[192.21376038 155.34625244]
[178.92530823 148.38804626]
[165.63684082 141.42982483]
[152.34837341 134.47161865]
[139.05990601 127.51342010]
[124.19565582 128.46394348]
[115.55929565 115.20785522]
[102.27082825 108.24964142]
[99.12533569 116.82769775]
[90.84945679 123.42019653]
[77.73715973 130.70495605]
[64.62487030 137.98971558]
[51.51257324 145.27447510]
[38.40028000 152.55924988]
[30.43628120 166.89474487]
[14.03713322 166.89489746]
[6.07287455 152.55953979]
[14.73645115 138.63565063]
[31.11551857 139.44694519]
[44.22781372 132.16218567]
[57.34010696 124.87742615]
[70.45240021 117.59266663]
[83.56469727 110.30789948]
[86.14911652 95.53221893]
[76.28801727 84.22917938]
[66.42692566 72.92613220]
[56.56583023 61.62308884]
[46.70473480 50.32004547]
[29.18321228 44.82090378]
[26.36514282 27.54628754]
[16.22749138 16.49061012]
[5.95387554 5.56116199]
[-9.19326401 0.99227351]
[-12.45264530 -13.54133224]
[-22.86065102 -24.34287834]
[-33.26865768 -35.14442444]
[-43.67666626 -45.94597244]
[-58.82380295 -50.51485825]
[-62.08318329 -65.04846954]
[-72.49118805 -75.85001373]
[-82.89920044 -86.65155792]
[-98.24343872 -93.86200714]
[-95.56248474 -110.60264587]
[-78.73391724 -112.66072845]
[-72.09764862 -97.05956268]
[-61.68964386 -86.25801849]
[-51.28163910 -75.45647430]
[-36.87894821 -71.66017914]
[-32.87511826 -56.35397720]
[-22.46711159 -45.55243301]
[-12.05910492 -34.75088501]
[-1.65109897 -23.94933891]
[12.75158978 -20.15304947]
[16.75542259 -4.84684420]
[23.73710060 -2.18462801]
[27.28316879 6.35295820]
[37.42082214 17.40863609]
[49.55424118 18.26883888]
[58.09023666 27.49079704]
[58.00777817 40.45895004]
[67.86887360 51.76199341]
[77.72996521 63.06503677]
[87.59106445 74.36808014]
[97.45215607 85.67112732]
[109.22904205 94.96117401]
[122.51750946 101.91938782]
[138.33222961 101.46656036]
[146.01811218 114.22495270]
[159.30657959 121.18315887]
[172.59504700 128.14137268]
[185.88351440 135.09957886]
[199.17198181 142.05778503]
[212.27404785 130.54133606]
[228.73820496 124.88349915]
[246.08227539 125.90928650]
[261.70202637 133.43814087]
[273.26223755 146.31509399]
[279.04580688 162.58781433]
[278.20874023 179.80259705]
[291.97653198 185.75640869]
[305.74432373 191.71022034]
[320.60571289 193.74473572]
[335.46710205 191.71022034]
[350.32846069 189.67570496]
[359.68395996 176.93794250]
[375.31863403 174.62892151]
[387.95678711 184.11854553]
[390.10040283 199.77677917]
[380.47769165 212.31388855]
[364.79763794 214.29182434]
[352.36297607 204.53709412]
[337.50158691 206.57160950]
[322.64019775 208.60610962]
[320.09445190 215.66082764]
[335.08666992 216.14314270]
[339.26080322 230.55065918]
[326.84829712 238.97264099]
[315.00289917 229.77026367]
[312.45712280 236.82498169]
[322.59478760 247.88066101]
[332.73242188 258.93634033]
[342.87008667 269.99203491]
[351.06906128 274.26306152]
[353.11758423 281.44879150]
[362.97869873 292.75183105]
[378.66070557 297.54837036]
[382.08364868 313.58630371]
[369.72628784 324.36718750]
[354.30081177 318.80059814]
[351.67562866 302.61294556]
[341.81454468 291.30987549]
[331.81442261 280.12966919]
[321.67675781 269.07400513]
[311.53909302 258.01831055]
[301.40145874 246.96264648]
[299.79049683 205.47801208]
[286.02270508 199.52420044]
[272.25491333 193.57038879]
[263.87554932 203.18464661]
[253.09596252 210.03367615]
[240.79801941 213.54508972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 77]
[7 76]
[8 75]
[9 74]
[10 73]
[12 71]
[13 70]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[29 69]
[30 68]
[31 67]
[32 66]
[33 65]
[35 62]
[36 61]
[37 59]
[39 57]
[40 56]
[41 55]
[42 54]
[44 52]
[45 51]
[46 50]
[84 123]
[85 122]
[86 121]
[87 98]
[88 97]
[89 96]
[104 120]
[105 119]
[106 118]
[107 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
