%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGCGGUCUCCGCAGCCAGGAUUGGCGCCCGCGCGGGCCUUCGAGCCCCGCCCGCAGAGCCCCGCCCGCAAAGCCCCACCCCGGUGCGCGGGU\
) } def
/len { sequence length } bind def

/coor [
[119.38905334 111.60655212]
[121.67159271 121.23689270]
[120.22052765 132.27658081]
[114.58219910 143.45063782]
[106.17147064 155.87077332]
[97.76074219 168.29089355]
[89.35002136 180.71102905]
[85.47520447 197.21624756]
[68.54235840 198.06196594]
[63.04222488 182.02497864]
[76.92988586 172.30030823]
[85.34061432 159.88017273]
[93.75134277 147.46003723]
[102.16206360 135.03991699]
[94.16622925 122.34792328]
[86.17111206 109.65705109]
[71.33689880 111.88100433]
[56.50267792 114.10496521]
[41.66846085 116.32891846]
[29.18305588 126.96125793]
[13.82526779 121.21057892]
[11.39387035 104.99267578]
[24.39007759 94.99114227]
[39.44450378 101.49469757]
[54.27872086 99.27074432]
[69.11293793 97.04679108]
[83.94715881 94.82283783]
[97.68376160 88.79740143]
[109.36692047 79.38975525]
[121.05007935 69.98210907]
[132.73323059 60.57446671]
[144.41639709 51.16682053]
[156.09954834 41.75917435]
[167.78271484 32.35153198]
[179.46586609 22.94388580]
[187.81274414 -1.10523880]
[189.79112244 -15.97420025]
[191.76950073 -30.84316063]
[193.74787903 -45.71212006]
[195.48014832 -60.61175919]
[196.96583557 -75.53800201]
[190.63342285 -90.03666687]
[199.59326172 -101.93501282]
[201.07894897 -116.86125183]
[194.74653625 -131.35990906]
[203.70637512 -143.25825500]
[205.19204712 -158.18450928]
[200.74423218 -174.54461670]
[215.23371887 -183.34753418]
[227.70370483 -171.86120605]
[220.11830139 -156.69882202]
[218.63261414 -141.77258301]
[225.07128906 -128.34153748]
[216.00518799 -115.37557220]
[214.51950073 -100.44932556]
[220.95817566 -87.01829529]
[211.89207458 -74.05232239]
[210.40640259 -59.12607956]
[212.92643738 -52.01820374]
[208.61685181 -43.73373795]
[206.63845825 -28.86477852]
[204.66007996 -13.99581718]
[202.68170166 0.87314379]
[205.70036316 -13.81997299]
[215.41452026 -25.24954605]
[229.42886353 -30.59727478]
[244.28773499 -28.54451942]
[256.32723999 -19.59744644]
[262.57870483 -5.96222258]
[261.50061035 8.99898434]
[253.35881042 21.59704590]
[240.16091919 28.72553635]
[225.16123962 28.62671661]
[212.05929565 21.32579041]
[224.61679077 29.53001404]
[237.17428589 37.73423386]
[252.08769226 33.03060913]
[266.51562500 39.06130981]
[273.64559937 52.97882462]
[270.11111450 68.21173096]
[257.58102417 77.56751251]
[241.97163391 76.62865448]
[230.65325928 65.83846283]
[228.97006226 50.29173279]
[216.41256714 42.08750916]
[203.85507202 33.88328934]
[188.87351990 34.62704468]
[177.19035339 44.03469086]
[165.50720215 53.44233322]
[153.82403564 62.84997940]
[142.14088440 72.25762939]
[130.45771790 81.66526794]
[118.77456665 91.07291412]
[107.09140015 100.48056030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 14]
[5 13]
[6 12]
[7 11]
[16 27]
[17 26]
[18 25]
[19 24]
[28 94]
[29 93]
[30 92]
[31 91]
[32 90]
[33 89]
[34 88]
[35 87]
[36 63]
[37 62]
[38 61]
[39 60]
[40 58]
[41 57]
[43 55]
[44 54]
[46 52]
[47 51]
[74 86]
[75 85]
[76 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
