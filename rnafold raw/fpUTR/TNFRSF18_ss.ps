%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUACACCCCCUCCUCACACGCACUUCACCUGGGUCGGGAUUCUCAGGUCAUGAACGGUCCCAGCCACCUCCGGGCAGGGCGGGUGAGGACGGGGACGGGGCGUGUCCAACUGGCUGUGGGCUCUUGAAACCCGAGC\
) } def
/len { sequence length } bind def

/coor [
[78.77192688 89.55764771]
[68.10556793 79.01114655]
[57.43920517 68.46464539]
[46.77283859 57.91814804]
[31.55086708 60.28409576]
[18.01275635 53.31467056]
[11.25435257 39.86892700]
[13.68024445 25.19742203]
[3.01388144 14.65092087]
[-7.65248156 4.10441875]
[-18.31884384 -6.44208288]
[-33.57211685 -10.64306259]
[-37.18226624 -25.09353256]
[-47.84863281 -35.64003372]
[-58.51499557 -46.18653488]
[-69.18135834 -56.73303604]
[-79.84771729 -67.27954102]
[-90.51408386 -77.82604218]
[-101.18044281 -88.37254333]
[-116.43372345 -92.57352448]
[-120.04386902 -107.02399445]
[-130.71023560 -117.57049561]
[-141.37660217 -128.11698914]
[-149.75396729 -131.96957397]
[-152.16145325 -139.02442932]
[-162.58674622 -149.80929565]
[-173.01203918 -160.59414673]
[-185.92547607 -161.60832214]
[-194.38909912 -170.87658691]
[-194.23840332 -183.02494812]
[-204.41729736 -194.04266357]
[-214.59619141 -205.06036377]
[-224.77510071 -216.07807922]
[-234.95399475 -227.09579468]
[-245.73886108 -237.52108765]
[-257.09524536 -247.32069397]
[-272.59811401 -250.47857666]
[-277.17901611 -264.65124512]
[-288.53543091 -274.45083618]
[-299.89181519 -284.25042725]
[-311.24822998 -294.05004883]
[-322.60461426 -303.84963989]
[-333.96102905 -313.64923096]
[-352.09204102 -316.63430786]
[-357.29559326 -333.35641479]
[-368.87057495 -342.89685059]
[-380.44552612 -352.43728638]
[-396.48825073 -352.33605957]
[-406.45739746 -364.90570068]
[-402.70547485 -380.50387573]
[-388.11062622 -387.16497803]
[-373.86880493 -379.77917480]
[-370.90509033 -364.01226807]
[-359.33010864 -354.47180176]
[-347.75515747 -344.93136597]
[-335.63467407 -345.76788330]
[-325.90322876 -337.84118652]
[-324.16143799 -325.00564575]
[-312.80502319 -315.20602417]
[-301.44860840 -305.40643311]
[-290.09222412 -295.60684204]
[-278.73580933 -285.80725098]
[-267.37942505 -276.00765991]
[-252.68885803 -273.55068970]
[-247.29565430 -258.67709351]
[-235.93925476 -248.87750244]
[-233.93737793 -263.74331665]
[-221.18702698 -271.64450073]
[-206.98381042 -266.82077026]
[-201.68249512 -252.78880310]
[-209.14797974 -239.77854919]
[-223.93627930 -237.27470398]
[-213.75738525 -226.25698853]
[-203.57847595 -215.23927307]
[-193.39958191 -204.22155762]
[-183.22068787 -193.20384216]
[-166.23143005 -188.95294189]
[-162.22718811 -171.01943970]
[-151.80189514 -160.23458862]
[-141.37660217 -149.44972229]
[-130.83009338 -138.78335571]
[-120.16373444 -128.23686218]
[-109.49736786 -117.69035339]
[-95.00702667 -114.24372864]
[-90.63394165 -99.03890228]
[-79.96758270 -88.49240112]
[-69.30121613 -77.94589996]
[-58.63485718 -67.39939880]
[-47.96849060 -56.85289764]
[-37.30212784 -46.30639648]
[-26.63576698 -35.75989532]
[-12.14542294 -32.31327057]
[-7.77234316 -17.10844612]
[2.89402008 -6.56194448]
[13.56038284 3.98455739]
[24.22674561 14.53105927]
[38.86989975 11.93952751]
[52.39115524 18.54555702]
[59.51312637 32.00404739]
[57.31934357 47.25178146]
[67.98570251 57.79828644]
[78.65206909 68.34478760]
[89.31842804 78.89128876]
[106.04084778 77.12683105]
[119.71136475 86.91812134]
[123.42351532 103.31849670]
[136.84207153 110.02241516]
[150.26062012 116.72634125]
[163.67916870 123.43025970]
[177.09771729 130.13418579]
[190.80476379 122.86119843]
[206.16421509 125.06736755]
[217.27001953 135.90437317]
[219.85179138 151.20515442]
[212.91676331 165.08625793]
[199.13162231 172.21012878]
[183.79701233 169.83746338]
[172.80941772 158.88063049]
[170.39378357 143.55273438]
[156.97523499 136.84881592]
[143.55668640 130.14488220]
[130.13813782 123.44096375]
[116.71959686 116.73704529]
[115.85637665 117.55702209]
[114.95299530 118.33252716]
[120.25988007 132.36238098]
[125.56675720 146.39224243]
[130.87364197 160.42210388]
[144.84745789 168.30323792]
[147.25592041 184.16447449]
[136.25146484 195.83843994]
[120.27576447 194.36987305]
[111.58401489 180.88533020]
[116.84377289 165.72898865]
[111.53689575 151.69912720]
[106.23001862 137.66926575]
[100.92313385 123.63940430]
[85.68353271 118.83380890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 100]
[8 96]
[9 95]
[10 94]
[11 93]
[13 91]
[14 90]
[15 89]
[16 88]
[17 87]
[18 86]
[19 85]
[21 83]
[22 82]
[23 81]
[25 80]
[26 79]
[27 78]
[30 76]
[31 75]
[32 74]
[33 73]
[34 72]
[35 66]
[36 65]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[45 55]
[46 54]
[47 53]
[106 123]
[107 122]
[108 121]
[109 120]
[110 119]
[125 137]
[126 136]
[127 135]
[128 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
