%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGGUGGGGCUGCCGCGGAACUCCAGGUCCGGCCGGGAGCAGAGGGGCGGGGGCGAGAGGGAAGUGGGCGGGAGCCGCGAUCUGAGUAGCCAGCGUCGCCGGCGACCGCGGAGUUCUGGGCUAGUGGGACCCCGCGCGGGCUGGUUCGGGAUGAGCG\
) } def
/len { sequence length } bind def

/coor [
[232.21969604 443.98669434]
[227.86543274 429.63259888]
[223.51115417 415.27847290]
[206.89598083 407.68408203]
[200.95674133 390.07202148]
[209.87974548 373.40588379]
[204.96528625 359.23379517]
[200.05084229 345.06170654]
[195.13638306 330.88961792]
[190.22192383 316.71752930]
[185.30747986 302.54544067]
[180.25413513 288.42227173]
[175.06237793 274.34942627]
[169.18635559 260.54824829]
[162.64021301 247.05201721]
[156.09407043 233.55578613]
[150.31549072 228.88569641]
[149.55482483 219.72970581]
[143.27493286 206.10755920]
[136.99502563 192.48541260]
[130.71513367 178.86326599]
[124.43524170 165.24111938]
[118.15534210 151.61897278]
[111.87545013 137.99682617]
[105.59555054 124.37467957]
[99.31565094 110.75252533]
[90.29588318 114.20940399]
[78.57194519 109.98319244]
[64.20725250 116.61389160]
[52.12627411 107.90187836]
[37.17251205 106.72499084]
[22.21875381 105.54810333]
[7.85406113 112.17880249]
[-4.22691536 103.46678162]
[-19.18067551 102.28989410]
[-34.13443375 101.11300659]
[-42.23459244 114.09938812]
[-55.44785309 121.82392120]
[-70.73790741 122.51155090]
[-84.59120941 116.00428772]
[-93.82437897 103.79743958]
[-96.31569672 88.69604492]
[-91.49267578 74.17031097]
[-80.46360779 63.55813217]
[-65.76290131 59.29811478]
[-50.76866150 62.36917496]
[-38.92646027 72.06561279]
[-32.95755005 86.15924835]
[-18.00378990 87.33613586]
[-3.05002904 88.51302338]
[10.24507046 81.79814148]
[23.39563942 90.59434509]
[38.34939957 91.77122498]
[53.30316162 92.94811249]
[66.59825897 86.23323822]
[79.74883270 95.02943420]
[67.18989563 86.82740784]
[52.53149414 83.64444733]
[40.57185364 74.59088898]
[33.53000259 61.34655762]
[32.71251297 46.36885071]
[38.27106476 32.43678665]
[49.17430878 22.13536263]
[63.39921570 17.37594604]
[78.30644989 19.04161453]
[91.13006592 26.82331276]
[99.49073029 39.27719879]
[101.83717346 54.09253693]
[97.73441315 68.51972198]
[99.04772186 83.46212006]
[105.05895233 69.71930695]
[111.07019043 55.97648239]
[117.08142090 42.23366547]
[111.56154633 27.66765022]
[117.85356140 13.81610966]
[131.77404785 8.64352131]
[137.78527832 -5.09929848]
[143.79650879 -18.84211731]
[149.80775452 -32.58493805]
[155.68377686 -46.38610840]
[161.42402649 -60.24430084]
[167.16427612 -74.10249329]
[172.90452576 -87.96068573]
[178.50845337 -101.87456512]
[183.97550964 -115.84278870]
[189.44256592 -129.81101990]
[182.88018799 -144.18844604]
[188.48446655 -158.96571350]
[202.93048096 -165.37573242]
[217.64767456 -159.61552429]
[223.90458679 -145.10255432]
[217.98910522 -130.44708252]
[203.41079712 -124.34395599]
[197.94374084 -110.37573242]
[192.47666931 -96.40750885]
[192.96983337 -88.99410248]
[186.76272583 -82.22043610]
[181.02247620 -68.36224365]
[175.28221130 -54.50405121]
[169.54196167 -40.64585495]
[169.88948059 -33.22419739]
[163.55056763 -26.57370377]
[157.53933716 -12.83088493]
[151.52810669 0.91193420]
[145.51687622 14.65475368]
[151.16775513 28.38803673]
[145.26728821 42.41084290]
[130.82423401 48.24489594]
[124.81300354 61.98771667]
[118.80177307 75.73053741]
[112.79054260 89.47335815]
[112.93780518 104.47263336]
[119.21769714 118.09477997]
[125.49759674 131.71693420]
[131.77749634 145.33908081]
[138.05738831 158.96122742]
[144.33728027 172.58337402]
[150.61717224 186.20552063]
[156.89707947 199.82766724]
[163.17697144 213.44981384]
[169.59030151 227.00965881]
[176.13642883 240.50587463]
[182.68257141 254.00210571]
[190.24786377 241.04963684]
[205.06101990 238.68940735]
[216.27700806 248.64939880]
[215.68440247 263.63769531]
[203.71705627 272.68106079]
[189.13523865 269.15765381]
[194.32699585 283.23052979]
[200.26339722 290.24264526]
[199.47956848 297.63098145]
[204.39402771 311.80307007]
[209.30847168 325.97515869]
[214.22293091 340.14724731]
[219.13737488 354.31936646]
[224.05183411 368.49145508]
[235.61196899 371.52005005]
[244.17033386 379.68734741]
[247.66412354 390.86386108]
[245.32954407 402.21597290]
[237.86526489 410.92422485]
[242.21952820 425.27832031]
[246.57380676 439.63241577]
[260.29904175 451.87237549]
[255.71290588 468.78860474]
[260.34817505 483.05447388]
[264.98342896 497.32031250]
[269.61868286 511.58615112]
[283.20281982 520.12139893]
[284.85604858 536.07904053]
[273.31011963 547.21777344]
[257.42208862 544.99285889]
[249.37989807 531.11114502]
[255.35282898 516.22143555]
[250.71757507 501.95556641]
[246.08232117 487.68972778]
[241.44706726 473.42385864]
[230.79075623 467.63110352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 144]
[2 143]
[3 142]
[6 137]
[7 136]
[8 135]
[9 134]
[10 133]
[11 132]
[12 130]
[13 129]
[14 123]
[15 122]
[16 121]
[18 120]
[19 119]
[20 118]
[21 117]
[22 116]
[23 115]
[24 114]
[25 113]
[26 112]
[28 56]
[30 54]
[31 53]
[32 52]
[34 50]
[35 49]
[36 48]
[70 111]
[71 110]
[72 109]
[73 108]
[76 105]
[77 104]
[78 103]
[79 102]
[80 100]
[81 99]
[82 98]
[83 97]
[84 95]
[85 94]
[86 93]
[146 158]
[147 157]
[148 156]
[149 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
