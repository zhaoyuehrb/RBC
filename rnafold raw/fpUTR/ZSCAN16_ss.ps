%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCGGCCCGGAAGUGCCCGGCUGAAGCGGCCGGGCGCCGAUUGGUGUCUUUGAGUCUAGUCUUUGUUCGGGGCUGUCCAAAGGACGCUAGCUGUUGCACCUGUUCCUCCCUGCGCGUAAGAUAGAGGAUAAAUCUCCUGGCAAAGCCCAGA\
) } def
/len { sequence length } bind def

/coor [
[96.90528870 315.06491089]
[106.67617798 302.34054565]
[98.42619324 289.93945312]
[105.59416199 275.83517456]
[104.98233795 260.84765625]
[93.44139862 245.37713623]
[102.91248322 227.62705994]
[101.68984222 212.67697144]
[100.46720123 197.72688293]
[91.71825409 185.67262268]
[98.30496979 171.28770447]
[97.08232880 156.33761597]
[95.85968781 141.38752747]
[79.69474792 136.30105591]
[66.90031433 125.18888855]
[53.52135086 131.97146606]
[40.14238739 138.75404358]
[26.76342773 145.53662109]
[13.38446522 152.31919861]
[0.00550267 159.10179138]
[-13.37345982 165.88436890]
[-26.75242233 172.66694641]
[-40.13138199 179.44952393]
[-53.51034546 186.23210144]
[-66.88930511 193.01467896]
[-78.28273010 205.56961060]
[-93.50102234 198.09698486]
[-90.53327942 181.40481567]
[-73.67189026 179.63571167]
[-60.29292297 172.85313416]
[-46.91396332 166.07055664]
[-33.53499985 159.28797913]
[-20.15603828 152.50540161]
[-6.77707577 145.72282410]
[6.60188627 138.94024658]
[19.98084831 132.15766907]
[33.35980988 125.37508392]
[46.73877335 118.59250641]
[60.11773300 111.80992889]
[56.09885788 95.37949371]
[58.96968460 77.71183014]
[69.02031708 61.72339630]
[85.30562592 50.33608246]
[105.70003510 45.95808029]
[100.03053284 32.07079315]
[94.36103821 18.18350601]
[88.69153595 4.29621744]
[83.02203369 -9.59107018]
[77.35253143 -23.47835732]
[71.68303680 -37.36564636]
[66.01353455 -51.25293350]
[60.34403229 -65.14022064]
[54.67453384 -79.02751160]
[40.38019562 -85.21699524]
[34.82834625 -99.38143921]
[40.81716156 -112.97076416]
[28.43781471 -122.82278442]
[30.79067039 -137.53038025]
[24.61308098 -144.34255981]
[25.15035248 -151.75923157]
[19.76531219 -165.75927734]
[14.38027191 -179.75932312]
[8.99523163 -193.75936890]
[3.61019111 -207.75942993]
[-1.77484941 -221.75947571]
[-15.79239941 -229.56254578]
[-18.28928375 -245.41009521]
[-7.35010815 -257.14526367]
[8.63352966 -255.76580811]
[17.40035057 -242.32994080]
[12.22519875 -227.14451599]
[17.61023903 -213.14447021]
[22.99527931 -199.14440918]
[28.38031960 -185.14436340]
[33.76536179 -171.14431763]
[39.15040207 -157.14427185]
[44.67795944 -143.19987488]
[56.65178680 -134.34117126]
[54.70444870 -118.64026642]
[68.49274445 -113.12496948]
[74.44025421 -99.12204742]
[68.56182098 -84.69701385]
[74.23132324 -70.80972290]
[79.90081787 -56.92243576]
[85.57032013 -43.03514481]
[91.23982239 -29.14785957]
[96.90932465 -15.26057053]
[102.57881927 -1.37328303]
[108.24832153 12.51400471]
[113.91782379 26.40129280]
[119.58732605 40.28858185]
[134.33522034 43.02712631]
[144.61235046 32.10098267]
[147.84140015 16.02288246]
[163.46435547 11.03736782]
[175.40965271 22.27310753]
[171.38899231 38.17173767]
[155.53849792 42.37810516]
[145.26136780 53.30425262]
[147.88233948 60.33137512]
[161.93658447 55.08941269]
[175.99092102 49.84768295]
[181.23242188 63.90210342]
[167.17855835 69.14366150]
[153.12431335 74.38562012]
[155.74528503 81.41274261]
[170.66732788 82.94008636]
[185.58937073 84.46743774]
[200.51139832 85.99478149]
[215.43344116 87.52212524]
[233.37303162 78.41508484]
[248.60491943 90.26920319]
[263.57684326 91.18662262]
[274.21035767 79.72093964]
[289.73248291 77.82412720]
[302.81411743 86.39180756]
[307.27850342 101.37857056]
[301.01773071 115.70813751]
[286.98788452 122.61452484]
[271.81350708 118.83673859]
[262.65939331 106.15853882]
[247.68748474 105.24111938]
[240.61573792 112.71848297]
[230.37394714 115.08699036]
[220.32463074 111.31916809]
[213.90609741 102.44416046]
[198.98405457 100.91681671]
[184.06202698 99.38947296]
[169.13998413 97.86212921]
[154.21794128 96.33478546]
[152.08432007 106.75562286]
[148.03782654 116.21136475]
[142.37011719 124.36956024]
[135.42640686 130.97360229]
[127.58743286 135.85043335]
[119.25034332 138.91404724]
[110.80977631 140.16488647]
[112.03241730 155.11497498]
[113.25505829 170.06506348]
[122.09145355 183.18865967]
[115.41728973 196.50424194]
[116.63993073 211.45433044]
[117.86257172 226.40441895]
[126.60480499 233.00265503]
[130.16685486 243.12673950]
[127.58992004 253.31808472]
[119.96984863 260.23583984]
[120.58168030 275.22335815]
[128.87542725 288.69644165]
[121.66369629 301.72872925]
[132.43922424 313.61431885]
[129.72300720 329.42575073]
[115.59869385 337.03387451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[4 148]
[5 147]
[7 143]
[8 142]
[9 141]
[11 139]
[12 138]
[13 137]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[44 91]
[45 90]
[46 89]
[47 88]
[48 87]
[49 86]
[50 85]
[51 84]
[52 83]
[53 82]
[56 79]
[58 77]
[60 76]
[61 75]
[62 74]
[63 73]
[64 72]
[65 71]
[92 99]
[93 98]
[106 130]
[107 129]
[108 128]
[109 127]
[110 126]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
