%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGGGUGGCGGCGGCCCCCAGCACGGCCGGUGCAAGGCCUCGGGUUAAGCGGCGGCCGAGCGGGGCUCGGCCCGGGGUGCUCGGGGAGCUCGCCGCGGCGGGCAGCAGGAGGAAGCGGCGGCGGCGCGUCCCGAGCGGUGCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[88.71308136 175.58532715]
[91.30944824 156.37832642]
[91.62569427 141.38166809]
[91.94193268 126.38499451]
[92.25817871 111.38832855]
[81.64157104 121.98491669]
[67.44537354 117.14053345]
[65.52117920 102.26446533]
[78.01873779 93.96741486]
[63.25898743 91.29350281]
[48.49923706 88.61959839]
[33.54084396 93.77294922]
[22.39667511 83.89080048]
[13.32508087 85.44502258]
[7.35534954 81.00179291]
[-7.34474564 78.01729584]
[-22.04484177 75.03280640]
[-36.74493790 72.04830933]
[-51.44503021 69.06381989]
[-66.14512634 66.07933044]
[-72.63068390 67.84335327]
[-78.17704010 66.25782776]
[-81.39608765 62.64669418]
[-95.95729828 59.04514694]
[-111.21152496 63.24264908]
[-121.70874786 52.67583084]
[-136.26995850 49.07428741]
[-150.83116150 45.47274017]
[-165.39237976 41.87119675]
[-179.95359802 38.26965332]
[-194.51480103 34.66810989]
[-209.76902771 38.86561203]
[-220.26625061 28.29878998]
[-234.82746887 24.69724655]
[-249.38867188 21.09570122]
[-262.81195068 28.99846458]
[-277.52777100 25.13855553]
[-284.97912598 12.29282093]
[-299.54034424 8.69127655]
[-314.10156250 5.08973217]
[-328.66275024 1.48818767]
[-345.49029541 3.55463362]
[-352.13430786 -12.04323101]
[-338.98526001 -22.74551582]
[-325.06121826 -13.07302380]
[-310.50000000 -9.47147942]
[-295.93878174 -5.86993456]
[-281.37759399 -2.26839042]
[-268.79721069 -10.15951347]
[-253.97875977 -6.71446562]
[-245.78712463 6.53449011]
[-231.22592163 10.13603497]
[-216.66470337 13.73757935]
[-202.45199585 9.28247070]
[-190.91325378 20.10689735]
[-176.35205078 23.70844078]
[-161.79083252 27.30998611]
[-147.22962952 30.91152954]
[-132.66841125 34.51307297]
[-118.10720062 38.11462021]
[-103.89448547 33.65951157]
[-92.35575104 44.48393631]
[-77.79454041 48.08548355]
[-63.16063309 51.37923050]
[-48.46054077 54.36372375]
[-33.76044464 57.34821701]
[-19.06034851 60.33271027]
[-4.36025333 63.31720352]
[10.33984184 66.30169678]
[25.07058334 69.13105011]
[38.97326279 63.78644943]
[51.17314529 73.85984802]
[65.93289948 76.53376007]
[80.69264984 79.20766449]
[116.04188538 85.78138733]
[130.97441101 84.36031342]
[143.97950745 75.35041809]
[157.38255310 81.84716034]
[170.38763428 72.83725739]
[183.79067993 79.33399963]
[198.72320557 77.91293335]
[213.65574646 76.49185944]
[228.58827209 75.07078552]
[243.52081299 73.64971924]
[258.45333862 72.22864532]
[273.38589478 70.80757904]
[288.31842041 69.38650513]
[303.25094604 67.96543884]
[316.25604248 58.95553589]
[329.65908813 65.45227814]
[344.59161377 64.03121185]
[359.50833130 62.45279694]
[374.40759277 60.71722412]
[389.30685425 58.98164749]
[404.20608521 57.24607086]
[419.10534668 55.51049423]
[434.00460815 53.77491760]
[448.90386963 52.03934097]
[461.71609497 42.75725555]
[475.25314331 48.96997833]
[490.15237427 47.23440552]
[497.81857300 33.87266922]
[511.72009277 27.65971184]
[526.44030762 30.78681946]
[536.37762451 41.84974289]
[544.82397461 28.68948174]
[559.76885986 24.08675194]
[574.15570068 30.21482277]
[581.19146729 44.18020630]
[577.55407715 59.38887405]
[564.96105957 68.65975952]
[549.35839844 67.61544037]
[538.11315918 56.74900055]
[530.98486328 69.79985809]
[517.37756348 76.22676849]
[502.42013550 73.37551117]
[491.88796997 62.13365936]
[476.98870850 63.86923599]
[465.24215698 73.02717590]
[450.63943481 66.93859100]
[435.74017334 68.67417145]
[420.84091187 70.40974426]
[405.94168091 72.14532471]
[391.04241943 73.88089752]
[376.14315796 75.61647797]
[361.24389648 77.35205078]
[354.92111206 81.27661896]
[346.01269531 78.96374512]
[331.08013916 80.38481140]
[319.14312744 89.29306793]
[304.67202759 82.89797211]
[289.73947144 84.31903839]
[274.80694580 85.74011230]
[259.87442017 87.16117859]
[244.94187927 88.58225250]
[230.00935364 90.00332642]
[215.07681274 91.42439270]
[200.14428711 92.84546661]
[185.21174622 94.26653290]
[173.27473450 103.17478943]
[158.80361938 96.77969360]
[146.86660767 105.68795013]
[132.39549255 99.29284668]
[117.46295166 100.71392059]
[107.25484467 111.70457458]
[106.93859863 126.70124054]
[106.62236023 141.69790649]
[106.30611420 156.69456482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 148]
[3 147]
[4 146]
[5 145]
[9 74]
[10 73]
[11 72]
[13 70]
[15 69]
[16 68]
[17 67]
[18 66]
[19 65]
[20 64]
[23 63]
[24 62]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[31 55]
[33 53]
[34 52]
[35 51]
[38 48]
[39 47]
[40 46]
[41 45]
[75 144]
[76 143]
[78 141]
[80 139]
[81 138]
[82 137]
[83 136]
[84 135]
[85 134]
[86 133]
[87 132]
[88 131]
[90 129]
[91 128]
[92 126]
[93 125]
[94 124]
[95 123]
[96 122]
[97 121]
[98 120]
[100 118]
[101 117]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
