%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCUCCUAUAAAGGGAGCCACCAGCGCUGGAGGCCGCUGCUCGCUGCGCCACCGCCUCCCGCCACCCCUGCCCGCCCGACAGCGCCGCCGCCUGCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[3.49791241 259.95657349]
[-8.78455067 268.63427734]
[-23.55574036 271.10839844]
[-37.87702179 266.94110107]
[-47.82386017 278.16876221]
[-57.77070236 289.39642334]
[-67.71754456 300.62408447]
[-77.66438293 311.85174561]
[-87.61122131 323.07940674]
[-88.08171082 339.11557007]
[-100.99860382 348.63046265]
[-116.45316315 344.32510376]
[-122.58997345 329.50219727]
[-114.70140076 315.53259277]
[-98.83888245 313.13256836]
[-88.89204407 301.90490723]
[-78.94520569 290.67724609]
[-68.99835968 279.44958496]
[-59.05152130 268.22192383]
[-49.10468292 256.99426270]
[-54.96783829 243.27972412]
[-54.29220200 228.31800842]
[-47.15828323 215.07911682]
[-34.93389511 206.21432495]
[-20.01223564 203.52526855]
[-5.34342194 207.59802246]
[4.60341787 196.37036133]
[14.55025768 185.14270020]
[13.39739799 170.33706665]
[23.32496643 158.80892944]
[38.86228180 157.70008850]
[41.51057434 143.04281616]
[56.45323181 137.84400940]
[66.40007019 126.61635590]
[76.34691620 115.38869476]
[86.29375458 104.16103363]
[89.27837372 90.50146484]
[102.47858429 85.89212799]
[112.42542267 74.66446686]
[115.78517914 59.20411301]
[130.01637268 54.80839157]
[139.96321106 43.58073044]
[141.72650146 36.92588425]
[146.01559448 32.88057327]
[150.86569214 31.99885368]
[161.47229004 21.39225197]
[172.07888794 10.78565025]
[182.68548584 0.17904873]
[193.13069153 -10.58653736]
[203.41209412 -21.50865173]
[198.02854919 -35.74869156]
[199.35617065 -50.85247803]
[207.07830811 -63.82895660]
[219.61724854 -72.13171387]
[234.45643616 -74.15859222]
[248.64530945 -69.56064606]
[258.92672729 -80.48275757]
[252.65617371 -94.33009338]
[252.16708374 -109.52315521]
[257.53402710 -123.74512482]
[267.93859863 -134.82723999]
[281.79415894 -141.07957458]
[296.98785400 -141.54867554]
[311.20275879 -136.16302490]
[322.27117920 -125.74389648]
[328.50527954 -111.88011169]
[328.95440674 -96.68581390]
[323.55004883 -82.47801208]
[313.11636353 -71.42330933]
[299.24438477 -65.20745087]
[284.04949951 -64.77832031]
[269.84884644 -70.20134735]
[259.56741333 -59.27923584]
[265.01367188 -45.39385605]
[263.88647461 -30.45937157]
[256.35595703 -17.44198799]
[243.86940002 -8.95045376]
[228.87332153 -6.71330404]
[214.33421326 -11.22724056]
[204.05281067 -0.30512589]
[201.72119141 6.84166241]
[193.29209900 10.78565025]
[182.68548584 21.39225197]
[172.07888794 31.99885368]
[161.47229004 42.60545731]
[151.19087219 53.52756882]
[141.24403381 64.75523376]
[138.59574890 79.41251373]
[123.65308380 84.61130524]
[113.70624542 95.83896637]
[110.72162628 109.49853516]
[97.52141571 114.10787201]
[87.57457733 125.33553314]
[77.62773132 136.56318665]
[67.68089294 147.79084778]
[64.32113647 163.25120544]
[50.08994293 167.64692688]
[50.86200714 183.20462036]
[40.61455536 194.44937134]
[25.77791977 195.08953857]
[15.83107853 206.31719971]
[5.88423920 217.54486084]
[11.69542599 231.61579895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[26 102]
[27 101]
[28 100]
[31 97]
[33 95]
[34 94]
[35 93]
[36 92]
[38 90]
[39 89]
[41 87]
[42 86]
[45 85]
[46 84]
[47 83]
[48 82]
[49 80]
[50 79]
[56 73]
[57 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
