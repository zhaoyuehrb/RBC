%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCCGACGAGCAACGCGUUUGUAGAGGGGUGGGUGCGCACGCUCUGUCCCUGCGUGACCUUCCGACCCCGCUGUCCUCACCGCA\
) } def
/len { sequence length } bind def

/coor [
[112.93833160 227.94380188]
[98.74768829 223.08320618]
[86.42366028 214.53227234]
[76.90304565 202.94097900]
[70.90952301 189.19042969]
[68.89868164 174.32582092]
[71.02336121 159.47706604]
[77.12033844 145.77560425]
[63.39521408 151.82713318]
[49.67009354 157.87866211]
[35.94496918 163.93019104]
[22.21984482 169.98170471]
[8.49472141 176.03323364]
[1.37421572 190.40953064]
[-14.33506203 193.66502380]
[-26.58229828 183.30235291]
[-25.97246170 167.27090454]
[-12.97336578 157.86860657]
[2.44319391 162.30812073]
[16.16831779 156.25659180]
[29.89344025 150.20506287]
[43.61856461 144.15353394]
[57.34368896 138.10200500]
[71.06880951 132.05047607]
[81.77072906 121.54006195]
[88.06906891 107.92642975]
[86.99993896 93.98553467]
[98.31729889 85.77523804]
[104.61563873 72.16160583]
[110.91397095 58.54797363]
[117.21231079 44.93434143]
[123.51065063 31.32071114]
[122.28300476 15.54720497]
[134.64923096 7.24505424]
[140.94757080 -6.36857700]
[131.31906128 -19.67401695]
[129.65612793 -35.91989136]
[136.31298828 -50.73030853]
[149.41545105 -60.16286850]
[165.38751221 -61.75801849]
[171.19024658 -75.59016418]
[176.99299622 -89.42230225]
[182.79574585 -103.25444794]
[188.59849548 -117.08658600]
[179.77267456 -129.73999023]
[179.21170044 -145.15715027]
[187.09457397 -158.41850281]
[200.90589905 -165.29241943]
[216.23854065 -163.58544922]
[228.19989014 -153.84226990]
[232.97314453 -139.17190552]
[229.03517151 -124.25561523]
[217.64254761 -113.85312653]
[202.43063354 -111.28384399]
[196.62788391 -97.45169830]
[190.82513428 -83.61956024]
[185.02239990 -69.78741455]
[179.21965027 -55.95527267]
[188.24682617 -45.54347229]
[191.87661743 -32.18079758]
[189.33346558 -18.50167465]
[181.06475830 -7.22900295]
[168.66340637 -0.63215941]
[154.56120300 -0.07024062]
[148.26286316 13.54339027]
[149.94100952 28.34315872]
[137.12428284 37.61904526]
[130.82594299 51.23267746]
[124.52760315 64.84630585]
[118.22927094 78.45993805]
[111.93093109 92.07357025]
[113.00006104 106.01446533]
[101.68270111 114.22476196]
[95.38436127 127.83839417]
[109.19681549 121.98892975]
[124.08162689 120.13357544]
[138.90736389 122.41334534]
[152.54710388 128.65496826]
[163.96401978 138.38398743]
[172.29031372 150.86087036]
[176.89308167 165.13723755]
[177.42243958 180.12789917]
[173.83815002 194.69335938]
[166.41267395 207.72648621]
[155.71043396 218.23658752]
[142.54495239 225.42475891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[25 74]
[26 73]
[28 71]
[29 70]
[30 69]
[31 68]
[32 67]
[34 65]
[35 64]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
