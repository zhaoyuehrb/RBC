%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUUCUGGACAGUUACUCUUAAGAAAGUUGUCAGAAGAAACGCAUCUGCCUUUUUUUCCAGGUGAACUGCCGUGAGUUGUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[63.27600479 348.01580811]
[47.96993637 351.21865845]
[34.21054077 343.78811646]
[28.49458122 329.23263550]
[33.52096176 314.42489624]
[46.91637802 306.35662842]
[49.07546616 291.51284790]
[51.23455429 276.66903687]
[53.39364624 261.82522583]
[55.55273438 246.98144531]
[57.71182632 232.13764954]
[59.87091446 217.29385376]
[57.86038971 214.12994385]
[57.42520905 209.77079773]
[59.13917160 205.03968811]
[63.15091705 200.99647522]
[66.90225220 186.47312927]
[70.65357971 171.94978333]
[74.40490723 157.42643738]
[66.46279907 148.86448669]
[63.71637344 137.38883972]
[66.98836517 125.92557526]
[75.55107880 117.45796204]
[87.28427887 114.25014496]
[80.94061279 101.22309113]
[85.56713867 87.49205017]
[98.50092316 80.96032715]
[103.29044342 66.74552917]
[108.07997131 52.53073502]
[112.86949158 38.31593704]
[106.10005951 24.28694916]
[111.15981293 9.93935108]
[124.57602692 3.57218647]
[119.52524567 -15.78107834]
[134.10249329 -28.27142334]
[137.85382080 -42.79476929]
[141.60514832 -57.31811142]
[145.35647583 -71.84145355]
[149.10780334 -86.36479950]
[152.85913086 -100.88814545]
[156.61045837 -115.41149139]
[151.21086121 -132.90277100]
[163.73281860 -145.05471802]
[166.95738220 -159.70402527]
[161.48944092 -175.16474915]
[172.34906006 -187.45297241]
[188.36480713 -183.92764282]
[193.06105042 -168.21530151]
[181.60668945 -156.47947693]
[178.38212585 -141.83016968]
[184.66998291 -131.32713318]
[181.93612671 -118.98090363]
[171.13380432 -111.66015625]
[167.38247681 -97.13681793]
[163.63114929 -82.61347198]
[159.87982178 -68.09012604]
[156.12849426 -53.56678391]
[152.37716675 -39.04343796]
[148.62582397 -24.52009392]
[154.71730042 -15.96649075]
[154.97323608 -5.24608612]
[149.05659485 3.96300745]
[138.79081726 8.36170959]
[145.61813354 21.54971123]
[140.96337891 36.03376770]
[127.08428955 43.10546112]
[122.29476929 57.32025909]
[117.50524139 71.53505707]
[112.71572113 85.74985504]
[119.05938721 98.77690887]
[114.43286133 112.50794983]
[101.49907684 119.03967285]
[110.60092163 135.44343567]
[105.14611053 153.06520081]
[88.92825317 161.17776489]
[85.17692566 175.70111084]
[81.42559052 190.22445679]
[77.67426300 204.74780273]
[74.71471405 219.45294189]
[72.55562592 234.29673767]
[70.39653015 249.14053345]
[68.23744202 263.98434448]
[66.07835388 278.82812500]
[63.91926575 293.67193604]
[61.76017380 308.51571655]
[72.30203247 320.06576538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 85]
[7 84]
[8 83]
[9 82]
[10 81]
[11 80]
[12 79]
[16 78]
[17 77]
[18 76]
[19 75]
[24 72]
[27 69]
[28 68]
[29 67]
[30 66]
[33 63]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
