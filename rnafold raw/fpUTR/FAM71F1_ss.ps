%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGACUGGUGGUCCCAGGGCUUGGCCAGCUGCCCAAGGCCAGGAGGGGAGACAGAGAUCCCAGGACAAAUGUGCAGCAGGCCCCUGAGCAUGUGUAGAA\
) } def
/len { sequence length } bind def

/coor [
[106.64725494 291.71801758]
[92.31827545 287.28176880]
[80.28414154 278.32745361]
[71.91831207 265.87704468]
[68.17557526 251.35147095]
[69.48372650 236.40612793]
[59.29743576 247.41700745]
[49.11114120 258.42788696]
[38.92485046 269.43875122]
[38.10916901 285.46105957]
[24.99039268 294.69564819]
[9.63212204 290.05850220]
[3.81590748 275.10687256]
[12.00345230 261.31036377]
[27.91397285 259.25247192]
[38.10026550 248.24159241]
[48.28656006 237.23071289]
[58.47285080 226.21983337]
[59.75892639 218.55767822]
[66.11502838 212.66043091]
[70.25955963 198.24436951]
[74.40408325 183.82830811]
[78.54860687 169.41224670]
[82.01625824 154.81857300]
[84.79946899 140.07904053]
[87.58268738 125.33950806]
[90.36590576 110.59998322]
[85.92478943 97.34222412]
[94.89456940 86.61680603]
[97.67778015 71.87727356]
[100.46099854 57.13774490]
[103.24421692 42.39821625]
[106.02743530 27.65868759]
[100.98507690 12.66251373]
[110.94953918 1.59188652]
[113.73275757 -13.14764214]
[101.27236938 -19.40407753]
[90.89690399 -28.69897079]
[83.32724762 -40.37745285]
[79.08695221 -53.61936188]
[78.46604919 -67.49684906]
[81.50119781 -81.03939819]
[87.97361755 -93.30165863]
[97.42481995 -103.42948914]
[109.18910217 -110.71942902]
[122.44042969 -114.66754150]
[136.25042725 -115.00427246]
[139.94461060 -129.54225159]
[143.63879395 -144.08024597]
[147.33297729 -158.61822510]
[137.30912781 -170.46313477]
[136.19549561 -185.94020081]
[144.42031860 -199.09815979]
[158.82096863 -204.87751770]
[173.86010742 -201.05599976]
[183.75486755 -189.10304260]
[184.70053101 -173.61480713]
[176.33345032 -160.54684448]
[161.87095642 -154.92404175]
[158.17677307 -140.38606262]
[154.48258972 -125.84806824]
[150.78840637 -111.31008911]
[164.60145569 -102.94613647]
[175.21307373 -90.75007629]
[181.60122681 -75.87940216]
[183.14547729 -59.75002289]
[179.68710327 -43.90143204]
[171.54548645 -29.84976578]
[159.48849487 -18.94277573]
[144.66021729 -12.23054790]
[128.47229004 -10.36442566]
[125.68907166 4.37510300]
[130.93049622 18.31700706]
[120.76696014 30.44190407]
[117.98374176 45.18143463]
[115.20053101 59.92096329]
[112.41731262 74.66049194]
[109.63409424 89.40001678]
[114.07521057 102.65777588]
[105.10543060 113.38319397]
[102.32221985 128.12272644]
[99.53900146 142.86225891]
[96.75578308 157.60177612]
[98.62182617 162.86155701]
[98.19967651 167.78164673]
[96.04067230 171.50901794]
[92.96467590 173.55677795]
[88.82014465 187.97283936]
[84.67562103 202.38890076]
[80.53109741 216.80496216]
[92.63672638 207.94755554]
[107.00086212 203.62648010]
[121.98412323 204.33491516]
[135.87648010 209.99200439]
[147.09237671 219.95210266]
[154.35177612 233.07844543]
[156.82614136 247.87295532]
[154.23307800 262.64712524]
[146.86854553 275.71478271]
[135.57304382 285.58450317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 18]
[7 17]
[8 16]
[9 15]
[20 90]
[21 89]
[22 88]
[23 87]
[24 83]
[25 82]
[26 81]
[27 80]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[35 72]
[36 71]
[47 62]
[48 61]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
