%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUCGCCGGCCGGGCGCCCCAAGCAACUACAACUUCCAUCACGCUCUGCGAGGCCUUGAUCUGCAGGCUUUUGCAGGGGAAGGAGUGGGGCGAAC\
) } def
/len { sequence length } bind def

/coor [
[25.45830917 257.84597778]
[20.18494034 243.80235291]
[11.92727852 256.32476807]
[3.66961670 268.84719849]
[-4.58804512 281.36962891]
[-12.84570694 293.89202881]
[-11.04186153 309.83337402]
[-22.48208618 321.08062744]
[-38.39041901 319.00588989]
[-46.56334686 305.20071411]
[-40.73130035 290.25524902]
[-25.36812782 285.63436890]
[-17.11046600 273.11196899]
[-8.85280418 260.58953857]
[-0.59514225 248.06712341]
[7.66251945 235.54469299]
[14.66643524 222.28025818]
[20.35053635 208.39894104]
[26.03463554 194.51762390]
[31.71873665 180.63630676]
[37.40283585 166.75498962]
[43.08693695 152.87367249]
[29.67833900 159.59747314]
[14.68437862 160.02310181]
[0.91594064 154.07078552]
[-9.04583931 142.85638428]
[-13.33344841 128.48222351]
[-11.14309978 113.64300537]
[-2.88541150 101.12060547]
[9.89156628 93.26255798]
[24.79256248 91.54200745]
[39.02412415 96.28148651]
[49.91828918 106.59250641]
[55.43275833 120.54208374]
[54.53378296 135.51496887]
[65.05416107 124.82284546]
[75.57453156 114.13070679]
[86.09490967 103.43857574]
[89.78976440 89.95378113]
[103.21295929 86.04104614]
[113.73332977 75.34891510]
[115.11835480 69.91232300]
[118.23021698 66.04727173]
[122.12278748 64.15942383]
[125.83154297 64.19266510]
[137.33953857 54.57154465]
[148.84753418 44.95042038]
[160.35552979 35.32929993]
[171.86352539 25.70817566]
[183.37152100 16.08705139]
[194.87951660 6.46592855]
[206.38751221 -3.15519476]
[217.89550781 -12.77631855]
[229.24620056 -22.58252907]
[240.43661499 -32.57125854]
[251.62702942 -42.55998611]
[262.81744385 -52.54871368]
[261.12820435 -67.97356415]
[268.85726929 -81.42871094]
[283.03268433 -87.74037170]
[298.20370483 -84.48158264]
[308.53677368 -72.90542603]
[310.05859375 -57.46315384]
[302.18399048 -44.09264374]
[287.94094849 -37.93513107]
[272.80615234 -41.35830307]
[261.61575317 -31.36957550]
[250.42533875 -21.38084602]
[239.23493958 -11.39211845]
[236.28530884 -4.45768452]
[227.51663208 -1.26832151]
[216.00863647 8.35280228]
[204.50064087 17.97392464]
[192.99264526 27.59504890]
[181.48464966 37.21617126]
[169.97665405 46.83729553]
[158.46865845 56.45841980]
[146.96066284 66.07954407]
[135.45266724 75.70066833]
[124.42546844 85.86929321]
[113.90509033 96.56142426]
[110.21023560 110.04621887]
[96.78704071 113.95895386]
[86.26667023 124.65108490]
[75.74629211 135.34321594]
[65.22591400 146.03535461]
[56.96825409 158.55776978]
[51.28415680 172.43908691]
[45.60005569 186.32040405]
[39.91595459 200.20172119]
[34.23185349 214.08303833]
[28.54775429 227.96437073]
[43.11786270 224.39898682]
[56.09370041 231.92411804]
[60.23526382 246.34103394]
[53.23171997 259.60565186]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[17 92]
[18 91]
[19 90]
[20 89]
[21 88]
[22 87]
[35 86]
[36 85]
[37 84]
[38 83]
[40 81]
[41 80]
[45 79]
[46 78]
[47 77]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[53 71]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
