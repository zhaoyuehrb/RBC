%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUCCCCUCAGCUGUUAUAAAGAGGACUAGAGGCUGGAGAGUAAAAAGAACUGGGGGUAAGAGCCCCUCUGCCUAGCACUGCUCCCCCAAGGCUCCCAGAAAUCUCAGGUCAGAGGCACGGACAGCCUCUGGAGCUCUCGUCUGGUGGGACC\
) } def
/len { sequence length } bind def

/coor [
[34.95671082 542.11041260]
[24.07209778 530.65179443]
[24.56152153 514.85504150]
[36.13461304 504.09219360]
[36.44059372 489.09533691]
[36.74657059 474.09844971]
[37.05254745 459.10156250]
[29.57647705 446.21911621]
[37.59366989 432.57965088]
[37.89964676 417.58276367]
[38.20562744 402.58587646]
[38.51160431 387.58901978]
[31.03553200 374.70654297]
[39.05272675 361.06707764]
[39.35870361 346.07019043]
[27.56488419 355.33874512]
[12.65026474 353.74057007]
[3.08798337 342.18365479]
[4.31046391 327.23355103]
[15.62320328 317.38357544]
[30.59932518 318.22958374]
[40.73089981 329.29138184]
[42.86562347 314.44406128]
[45.00034332 299.59674072]
[47.13506699 284.74942017]
[38.03126907 273.01669312]
[39.98467636 257.92898560]
[52.35274887 248.45964050]
[54.48746872 233.61231995]
[56.62219238 218.76499939]
[58.75691605 203.91767883]
[60.89163971 189.07035828]
[63.02635956 174.22303772]
[65.16107941 159.37571716]
[67.29580688 144.52839661]
[69.43052673 129.68107605]
[71.56525421 114.83374786]
[67.92982483 100.28096008]
[59.06360626 88.18177795]
[50.19739151 76.08259583]
[41.20822525 64.07447815]
[32.09704971 52.15867233]
[22.98587036 40.24286652]
[9.23512650 41.60195160]
[-3.28586650 36.01897430]
[-11.33623791 25.05654526]
[-12.89067554 11.65397358]
[-7.64804792 -0.66046858]
[-16.51426506 -12.75965023]
[-31.72996712 -11.20091152]
[-45.59142303 -17.42641068]
[-54.41699600 -29.67286682]
[-55.91769791 -44.59278107]
[-49.79012680 -58.16917419]
[-58.65634537 -70.26835632]
[-67.52256012 -82.36753845]
[-76.38877869 -94.46672058]
[-85.25499725 -106.56590271]
[-94.12121582 -118.66508484]
[-109.33955383 -124.77523804]
[-111.38899994 -141.04582214]
[-98.16124725 -150.73904419]
[-83.26387787 -143.88336182]
[-82.02203369 -127.53130341]
[-73.15581512 -115.43212128]
[-64.28959656 -103.33293915]
[-55.42337799 -91.23375702]
[-46.55716324 -79.13457489]
[-37.69094467 -67.03539276]
[-22.89931679 -68.78847504]
[-9.12456608 -62.86291885]
[-0.10567319 -50.75812912]
[1.65491843 -35.66518021]
[-4.41508293 -21.62586784]
[4.45113373 -9.52668571]
[20.82814217 -10.13136196]
[34.48758698 -0.77968580]
[39.95643997 15.02041435]
[34.90167618 31.13168716]
[44.01285553 43.04749298]
[53.12403107 54.96329880]
[59.72502518 58.38714218]
[62.29657364 67.21637726]
[71.16278839 79.31555939]
[80.02900696 91.41474152]
[89.49412537 82.68022156]
[101.39382935 81.27586365]
[111.06010437 86.70392609]
[124.70458221 80.47270203]
[130.30587769 65.93779755]
[144.23208618 59.81282425]
[158.05436707 65.24236298]
[167.39324951 52.47146988]
[182.18458557 54.22246933]
[195.82905579 47.99124146]
[209.47354126 41.76001740]
[222.92098999 35.11425400]
[236.15881348 28.06017494]
[244.69912720 14.74200726]
[259.56985474 15.58506393]
[272.80767822 8.53098488]
[281.02142334 -5.66289282]
[297.41806030 -5.37592936]
[305.13012695 9.09667206]
[296.22412109 22.86673927]
[279.86175537 21.76880836]
[266.62393188 28.82288742]
[259.03048706 41.63650131]
[243.21289062 41.29800034]
[229.97506714 48.35207748]
[228.60513306 51.66275024]
[225.53015137 54.45531082]
[221.02055359 55.92033768]
[215.70475769 55.40449524]
[202.06028748 61.63572311]
[188.41580200 67.86695099]
[180.05285645 80.19214630]
[164.28559875 78.88684845]
[159.33729553 92.88862610]
[145.58862305 99.40235138]
[130.93580627 94.11717987]
[117.29132843 100.34840393]
[108.27268982 117.67642975]
[86.41257477 116.96847534]
[84.27784729 131.81579590]
[82.14312744 146.66311646]
[80.00840759 161.51043701]
[77.87368011 176.35775757]
[75.73896027 191.20507812]
[73.60424042 206.05239868]
[71.46951294 220.89971924]
[69.33479309 235.74703979]
[67.20006561 250.59436035]
[76.39932251 263.16464233]
[74.02290344 278.19152832]
[61.98238754 286.88412476]
[59.84766769 301.73144531]
[57.71294403 316.57876587]
[55.57822037 331.42608643]
[54.35558319 346.37619019]
[54.04960251 361.37307739]
[61.50379181 375.32818604]
[53.50848389 387.89498901]
[53.20250320 402.89187622]
[52.89652634 417.88873291]
[52.59054947 432.88562012]
[60.04473495 446.84075928]
[52.04942703 459.40756226]
[51.74345016 474.40441895]
[51.43747330 489.40130615]
[51.13149261 504.39819336]
[62.25595474 515.62414551]
[62.10064697 531.42767334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 151]
[5 150]
[6 149]
[7 148]
[9 146]
[10 145]
[11 144]
[12 143]
[14 141]
[15 140]
[22 139]
[23 138]
[24 137]
[25 136]
[28 133]
[29 132]
[30 131]
[31 130]
[32 129]
[33 128]
[34 127]
[35 126]
[36 125]
[37 124]
[38 85]
[39 84]
[40 83]
[41 81]
[42 80]
[43 79]
[48 75]
[49 74]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[88 122]
[89 121]
[92 118]
[94 116]
[95 115]
[96 114]
[97 110]
[98 109]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
