%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUUUCUAAACUUUGUCUGGAUAAGGCGCACGCUUGGCGACGUCGAAGGUCCGUCCGCAGUUAAGGAAGCUUUUGCAGCCGGACAGGUCGCGAAGCACAC\
) } def
/len { sequence length } bind def

/coor [
[-42.10562897 228.77670288]
[-54.34858322 237.44331360]
[-66.59153748 246.10992432]
[-78.83448792 254.77653503]
[-91.07744598 263.44314575]
[-102.90708160 272.66592407]
[-114.29815674 282.42520142]
[-125.68922424 292.18447876]
[-137.08030701 301.94372559]
[-142.52618408 316.79812622]
[-157.22537231 319.20297241]
[-168.61643982 328.96224976]
[-176.71090698 343.85910034]
[-193.26634216 340.20483398]
[-194.33789062 323.28479004]
[-178.37571716 317.57116699]
[-166.98464966 307.81192017]
[-162.35351562 293.65557861]
[-146.83956909 290.55267334]
[-135.44850159 280.79339600]
[-124.05742645 271.03411865]
[-112.66635132 261.27484131]
[-112.08064270 257.62954712]
[-109.58998108 254.12055969]
[-105.29626465 251.69293213]
[-99.74404907 251.20018005]
[-87.50109863 242.53356934]
[-75.25814056 233.86697388]
[-63.01519012 225.20036316]
[-50.77223587 216.53375244]
[-49.11180878 197.27668762]
[-33.76047897 185.04829407]
[-14.02962208 187.81845093]
[-2.63854885 178.05917358]
[8.75252533 168.29989624]
[20.14359856 158.54061890]
[24.77472305 144.38427734]
[40.28866959 141.28138733]
[51.67974472 131.52210999]
[63.07081604 121.76283264]
[74.46189117 112.00355530]
[85.85296631 102.24428558]
[90.68058014 89.12232208]
[104.38776398 86.36464691]
[105.49441528 82.32318115]
[107.55074310 79.08200073]
[110.21958923 76.83055115]
[113.13747406 75.63972473]
[115.95235443 75.46290588]
[118.35859680 76.14834595]
[131.11184692 68.25186157]
[143.86511230 60.35538101]
[156.61836243 52.45890045]
[169.37162781 44.56241608]
[177.03160095 30.71917725]
[191.92570496 30.59751701]
[199.58569336 16.75427628]
[214.47979736 16.63261604]
[227.23304749 8.73613453]
[239.98631287 0.83965206]
[252.73956299 -7.05683041]
[256.34603882 -12.93361568]
[261.62597656 -15.57585621]
[266.53002930 -15.01875591]
[279.74520874 -22.11515999]
[292.96038818 -29.21156311]
[301.12869263 -43.43165207]
[317.52615356 -43.19715881]
[325.28448486 -28.74930954]
[316.42257690 -14.95081425]
[300.05679321 -15.99637985]
[286.84161377 -8.89997673]
[273.62643433 -1.80357337]
[260.63604736 5.69642687]
[247.88279724 13.59290886]
[235.12953186 21.48939133]
[222.37628174 29.38587379]
[215.62849426 42.66430283]
[199.82218933 43.35077286]
[193.07441711 56.62920380]
[177.26811218 57.31567383]
[164.51484680 65.21215820]
[151.76159668 73.10863495]
[139.00833130 81.00511932]
[126.25507355 88.90160370]
[114.14703369 97.75571442]
[109.31941986 110.87767792]
[95.61223602 113.63535309]
[84.22116852 123.39463043]
[72.83009338 133.15390015]
[61.43901825 142.91317749]
[50.04794312 152.67245483]
[44.60205460 167.52684021]
[29.90287399 169.93170166]
[18.51179886 179.69096375]
[7.12072563 189.45024109]
[-4.27034807 199.20951843]
[-2.37454104 210.01606750]
[-5.20772171 220.53091431]
[-12.17097473 228.79702759]
[-21.90349960 233.30632019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 22]
[7 21]
[8 20]
[9 19]
[11 17]
[12 16]
[33 97]
[34 96]
[35 95]
[36 94]
[38 92]
[39 91]
[40 90]
[41 89]
[42 88]
[44 86]
[50 85]
[51 84]
[52 83]
[53 82]
[54 81]
[56 79]
[58 77]
[59 76]
[60 75]
[61 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
