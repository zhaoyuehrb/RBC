%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACAUAAGUCAAAAGCUGCGUCAGAAGGUUCUAACUUUUGUCAUCACUAUUACCAGCAUUGUCAUCGUUAUCGUUAUCUUCGUCAUCAUCAUUACCACCGUUAUACCUGAUACUGCCAUAACAAUCAGAACAUU\
) } def
/len { sequence length } bind def

/coor [
[94.36856079 215.20878601]
[82.90028381 205.54034424]
[74.25888824 193.27958679]
[69.00937653 179.22816467]
[67.49497986 164.30480957]
[69.81472778 149.48526001]
[75.81692505 135.73849487]
[85.10914612 123.96332550]
[97.08381653 114.92964935]
[110.95442200 109.22908783]
[97.87286377 114.16512299]
[86.81804657 105.60459137]
[71.98436737 103.37705994]
[57.15068436 101.14952087]
[46.27766037 108.19393158]
[33.92160034 105.97602081]
[26.65876961 96.23377228]
[11.88006496 93.66669464]
[-2.89863968 91.09962463]
[-17.67734528 88.53254700]
[-26.75821304 90.15388489]
[-32.76383591 85.73344421]
[-47.47979355 82.82817841]
[-62.44431305 81.79708099]
[-77.41967010 82.65653992]
[-92.39502716 83.51599121]
[-107.37038422 84.37545013]
[-122.34574127 85.23490143]
[-137.32110596 86.09435272]
[-146.52420044 98.73701477]
[-161.71311951 102.45602417]
[-175.71609497 95.49537659]
[-181.92135620 81.14167786]
[-177.39898682 66.17230225]
[-164.28428650 57.65534210]
[-148.76962280 59.61223221]
[-138.18055725 71.11899567]
[-123.20520020 70.25954437]
[-108.22984314 69.40008545]
[-93.25448608 68.54063416]
[-78.27912903 67.68118286]
[-63.30376816 66.82172394]
[-75.65034485 58.30338669]
[-82.74881744 45.08931732]
[-83.03460693 30.09204102]
[-76.44472504 16.61712074]
[-64.43164825 7.63458109]
[-49.64319611 5.12426996]
[-35.33890152 9.63948822]
[-24.67159271 20.18503189]
[-19.99245644 34.43654633]
[-22.33283043 49.25284576]
[-31.17686653 61.36824799]
[-44.57452774 68.11222076]
[-29.85857010 71.01748657]
[-15.11026859 73.75383759]
[-0.33156359 76.32091522]
[14.44714165 78.88799286]
[29.22584724 81.45507050]
[45.30068970 74.50882721]
[59.37821960 86.31584167]
[74.21189880 88.54337311]
[89.04557800 90.77091217]
[102.12713623 85.83487701]
[113.18195343 94.39540863]
[117.29808044 91.95828247]
[121.66191864 91.05489349]
[125.75827789 91.58612823]
[129.16021729 93.29446411]
[143.54818726 89.05347443]
[157.93617249 84.81248474]
[172.32415771 80.57150269]
[186.71214294 76.33051300]
[197.76165771 65.00714874]
[212.15722656 68.83033752]
[226.54521179 64.58935547]
[240.83216858 60.01957321]
[255.01058960 55.12340546]
[269.18899536 50.22723770]
[283.36743164 45.33106995]
[281.32015991 30.42150879]
[282.22125244 15.39905071]
[286.03607178 0.84111691]
[292.61798096 -12.69272423]
[301.71395874 -24.68226814]
[312.97442627 -34.66666794]
[325.96655273 -42.26214981]
[340.19091797 -47.17676544]
[355.10079956 -49.22160721]
[370.12310791 -48.31807709]
[384.68041992 -44.50090790]
[398.21319580 -37.91682053]
[410.20126343 -28.81888771]
[420.18386841 -17.55681038]
[427.77722168 -4.56347227]
[432.68954468 9.66169643]
[434.73196411 24.57191849]
[433.82601929 39.59408188]
[430.00650024 54.15078354]
[423.42019653 67.68248749]
[414.32034302 79.66909027]
[403.05664062 89.64984131]
[390.06207275 97.24111938]
[375.83612061 102.15113068]
[360.92556763 104.19114685]
[345.90353394 103.28275299]
[331.34747314 99.46087646]
[317.81683350 92.87240601]
[305.83169556 83.77059174]
[295.85275269 72.50527954]
[288.26358032 59.50948715]
[274.08517456 64.40565491]
[259.90676880 69.30182648]
[245.72833252 74.19799042]
[242.84014893 78.10188293]
[237.43205261 80.18151855]
[230.78619385 78.97733307]
[216.39822388 83.21832275]
[206.37782288 94.23834229]
[190.95312500 90.71849060]
[176.56513977 94.95948029]
[162.17716980 99.20046997]
[147.78918457 103.44145966]
[133.40119934 107.68244171]
[147.92601013 111.42809296]
[161.02606201 118.73484039]
[171.84483337 129.12495422]
[179.67492676 141.91906738]
[184.00440979 156.28067017]
[184.55018616 171.27073669]
[181.27658081 185.90916443]
[174.39761353 199.23883057]
[164.36308289 210.38818359]
[151.82908630 218.62825012]
[137.61512756 223.42025757]
[122.65057373 224.45088196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 65]
[12 63]
[13 62]
[14 61]
[17 59]
[18 58]
[19 57]
[20 56]
[22 55]
[23 54]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[69 124]
[70 123]
[71 122]
[72 121]
[73 120]
[75 118]
[76 117]
[77 114]
[78 113]
[79 112]
[80 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
