%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGAAGGGCUGGACUUCCGGCGGUGGGACUGUCACUUCGCCGCCCGCGUCAGGCCACACCGGUGGUCUGGGCUGGGGACCGCGGGUCGGGUCCGGUUUCCAGGGGGUUCCUGGUGCUCGAGGCUGGCGGCGAGGAAGGACCAG\
) } def
/len { sequence length } bind def

/coor [
[-39.26742935 433.97488403]
[-41.36503220 437.57849121]
[-44.33030701 439.61019897]
[-48.47175980 454.02713013]
[-43.98913956 469.80175781]
[-55.60166931 481.38110352]
[-71.36338043 476.85333252]
[-75.05997467 460.87625122]
[-62.88871002 449.88568115]
[-58.74725342 435.46875000]
[-55.07320786 420.92565918]
[-51.87039185 406.27157593]
[-48.66757965 391.61749268]
[-45.46476364 376.96340942]
[-51.70601273 360.59484863]
[-39.28300476 347.04806519]
[-36.39622879 332.32846069]
[-33.50945663 317.60888672]
[-30.62268257 302.88928223]
[-27.73590851 288.16967773]
[-39.21504211 278.51412964]
[-53.22259903 283.87960815]
[-67.23015594 289.24508667]
[-81.23771667 294.61056519]
[-95.24527740 299.97601318]
[-109.25283051 305.34149170]
[-121.88124084 316.65344238]
[-136.24697876 307.64999390]
[-131.57225037 291.35327148]
[-114.61830902 291.33395386]
[-100.61074829 285.96847534]
[-86.60318756 280.60299683]
[-72.59563446 275.23751831]
[-58.58807373 269.87203979]
[-44.58051300 264.50656128]
[-37.10533524 262.81216431]
[-30.16206360 263.24484253]
[-24.29036331 265.44665527]
[-19.88957405 268.93493652]
[-11.65692997 256.39605713]
[-3.42428517 243.85717773]
[4.80835915 231.31828308]
[13.04100323 218.77940369]
[21.27364731 206.24052429]
[29.50629234 193.70164490]
[37.73893738 181.16276550]
[38.25640488 166.27714539]
[52.29833603 158.98779297]
[60.53098297 146.44891357]
[61.04845047 131.56329346]
[75.09038544 124.27394104]
[83.32302856 111.73506165]
[80.59255219 93.74027252]
[93.32276154 80.73221588]
[93.96809387 65.74610138]
[94.61342621 50.75999069]
[95.25875854 35.77388000]
[84.85326385 24.18235397]
[85.72120667 8.99349880]
[96.83608246 -0.85511500]
[97.48141479 -15.84122658]
[98.12674713 -30.82733917]
[90.99032593 -44.94760895]
[99.26802063 -57.33022308]
[99.91335297 -72.31632996]
[100.55868530 -87.30244446]
[101.20401764 -102.28855896]
[101.84934998 -117.27466583]
[102.49468994 -132.26077271]
[103.14002228 -147.24688721]
[91.48308563 -157.67042542]
[89.30465698 -173.15551758]
[97.63330841 -186.39060974]
[112.53652191 -191.12648010]
[126.97743988 -185.12698364]
[134.13751221 -171.22492981]
[130.63597107 -155.98442078]
[118.12612915 -146.60156250]
[117.48079681 -131.61544800]
[116.83546448 -116.62933350]
[116.19013214 -101.64322662]
[115.54479980 -86.65711212]
[114.89946747 -71.67099762]
[114.25413513 -56.68488693]
[121.43671417 -43.63652420]
[113.11286163 -30.18200493]
[112.46752930 -15.19589329]
[111.82219696 -0.20978150]
[122.04928589 10.55786228]
[121.60831451 25.76510429]
[110.24487305 36.41921234]
[109.59954071 51.40532303]
[108.95420837 66.39143372]
[108.30887604 81.37754822]
[114.10572815 85.27378082]
[118.24774170 90.89764404]
[133.19221497 89.60816956]
[148.13668823 88.31869507]
[157.06098938 78.94094086]
[169.58343506 78.21141052]
[178.91784668 85.97634888]
[193.88659668 85.00872040]
[208.85536194 84.04109192]
[223.82411194 83.07347107]
[238.79287720 82.10584259]
[250.41918945 71.05104828]
[266.29067993 73.39096069]
[274.23211670 87.33058929]
[268.15148926 102.17665100]
[252.71333313 106.54051208]
[239.76049805 97.07460022]
[224.79174805 98.04222107]
[209.82298279 99.00984955]
[194.85423279 99.97747803]
[179.88546753 100.94510651]
[165.87634277 111.46306610]
[149.42616272 103.26316833]
[134.48168945 104.55264282]
[119.53721619 105.84211731]
[110.44827271 117.51190186]
[95.86190796 119.96770477]
[87.62926483 132.50659180]
[86.52294159 148.28906250]
[73.06986237 154.68154907]
[64.83721924 167.22044373]
[63.73089981 183.00291443]
[50.27782059 189.39540100]
[42.04517365 201.93428040]
[33.81253052 214.47317505]
[25.57988548 227.01205444]
[17.34724236 239.55093384]
[9.11459732 252.08981323]
[0.88195270 264.62869263]
[-7.35069180 277.16757202]
[-13.01631165 291.05645752]
[-15.90308475 305.77606201]
[-18.78985786 320.49563599]
[-21.67663193 335.21524048]
[-24.56340599 349.93484497]
[-18.01413918 361.10140991]
[-20.77037239 373.33853149]
[-30.81068802 380.16622925]
[-34.01350021 394.82031250]
[-37.21631622 409.47439575]
[-40.41912842 424.12847900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 10]
[4 9]
[11 145]
[12 144]
[13 143]
[14 142]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
[39 134]
[40 133]
[41 132]
[42 131]
[43 130]
[44 129]
[45 128]
[46 127]
[48 125]
[49 124]
[51 122]
[52 121]
[54 94]
[55 93]
[56 92]
[57 91]
[60 88]
[61 87]
[62 86]
[64 84]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[96 119]
[97 118]
[98 117]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
