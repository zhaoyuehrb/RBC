%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUAUAGCAGCGGUGCCUAGCGCGCCGCGUCUCUCCGCAGGCCCCGGCCGCGGCGUCCUCGACAACCUAUCGAAGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[126.61835480 140.81126404]
[124.76675415 155.69653320]
[116.71452332 168.35203552]
[104.01555634 176.33552551]
[89.12045288 178.10639954]
[74.90362549 173.32290649]
[64.10859680 162.90814209]
[58.81853867 148.87193298]
[60.05432129 133.92291260]
[67.57746887 120.94593048]
[79.93543243 112.44551086]
[64.94644165 113.02005005]
[49.95745087 113.59458923]
[34.96845627 114.16912842]
[19.97946548 114.74367523]
[4.99047232 115.31821442]
[-9.99851990 115.89275360]
[-21.91088867 126.63868713]
[-37.71552658 123.88314056]
[-45.28846359 109.73993683]
[-38.82039642 95.05853271]
[-23.27306938 91.10124207]
[-10.57306099 100.90376282]
[4.41593170 100.32922363]
[19.40492439 99.75467682]
[34.39391708 99.18013763]
[49.38290787 98.60559845]
[64.37190247 98.03105927]
[79.36089325 97.45651245]
[64.44134521 95.90502930]
[52.97145081 86.23851776]
[48.91489029 71.79745483]
[53.67349243 57.57227707]
[65.60282135 48.47881317]
[80.58042908 47.65951538]
[93.43046570 55.39750671]
[99.71231842 69.01875305]
[97.25498199 83.81644440]
[101.78079224 69.51549530]
[101.40264893 60.12570190]
[106.76354980 54.75942230]
[111.83380127 40.64232254]
[116.90406036 26.52522087]
[113.45677948 10.49249458]
[125.79776001 -0.30714676]
[141.23165894 5.23604202]
[143.88139343 21.41970444]
[131.02116394 31.59547424]
[125.95090485 45.71257401]
[120.88065338 59.82967758]
[116.08174133 74.04130554]
[111.55593109 88.34225464]
[117.69196320 102.02980804]
[131.37951660 108.16584015]
[145.06706238 114.30186462]
[158.75462341 120.43789673]
[172.44218445 126.57392883]
[186.12973022 132.70996094]
[201.88752747 131.29486084]
[210.33612061 143.56149292]
[224.02368164 149.69752502]
[237.71122742 155.83355713]
[251.39878845 161.96958923]
[265.39135742 154.98808289]
[280.58581543 158.68444824]
[289.80773926 171.31336975]
[288.70285034 186.91188049]
[277.79284668 198.11480713]
[262.22909546 199.63250732]
[249.36030579 190.74833679]
[245.26275635 175.65715027]
[231.57519531 169.52111816]
[217.88764954 163.38508606]
[204.20008850 157.24905396]
[189.42132568 159.10304260]
[179.99369812 146.39750671]
[166.30615234 140.26147461]
[152.61859131 134.12544250]
[138.93104553 127.98941803]
[125.24348450 121.85339355]
[111.55593109 115.71736145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[38 52]
[39 51]
[41 50]
[42 49]
[43 48]
[53 81]
[54 80]
[55 79]
[56 78]
[57 77]
[58 76]
[60 74]
[61 73]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
