%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUGGUCUCCAUGUCAUCUGCCAGAAAGGCCACCUGCGCCAGCACCUCCUGAGACCGGCCUUCAAAGACACGACGC\
) } def
/len { sequence length } bind def

/coor [
[178.35583496 262.44116211]
[183.96563721 248.42572021]
[193.14964294 236.44421387]
[184.13850403 224.45257568]
[175.12736511 212.46093750]
[166.11624146 200.46928406]
[157.10510254 188.47764587]
[148.09396362 176.48600769]
[139.08283997 164.49436951]
[130.07170105 152.50273132]
[117.51964569 157.91291809]
[104.07350159 160.36763000]
[90.41947937 159.74157715]
[77.25437927 156.06674194]
[65.25005341 149.53063965]
[55.01913452 140.46684265]
[47.08372498 129.33787537]
[41.84880447 116.71172333]
[39.58152008 103.23271179]
[40.39757919 89.58872223]
[44.25533676 76.47605896]
[31.26495552 68.97605896]
[18.27457428 61.47605896]
[2.46839190 64.22271729]
[-9.43793488 53.47009277]
[-8.31089115 37.46667862]
[4.98495150 28.48892212]
[20.25016022 33.42378998]
[25.77457428 48.48567581]
[38.76495743 55.98567581]
[51.75533676 63.48567581]
[59.24581146 55.27931595]
[68.11061096 48.58103561]
[78.05078125 43.61671066]
[88.73113251 40.55375671]
[99.79149628 39.49545670]
[101.59954834 24.60482216]
[103.40760040 9.71418953]
[96.48538971 -5.15238714]
[106.11940002 -18.42333031]
[122.39897919 -16.44663239]
[128.57708740 -1.25574911]
[118.29823303 11.52223969]
[116.49018097 26.41287231]
[114.68212891 41.30350494]
[131.57743835 48.38887405]
[145.57749939 60.20634079]
[155.39865112 75.67240143]
[160.14044189 93.36899567]
[159.36810303 111.67356873]
[153.15243530 128.90782166]
[142.06333923 143.49159241]
[151.07447815 155.48323059]
[160.08561707 167.47486877]
[169.09674072 179.46650696]
[178.10787964 191.45816040]
[187.11901855 203.44979858]
[196.13014221 215.44143677]
[205.14128113 227.43307495]
[219.20489502 221.94514465]
[234.22772217 220.45617676]
[249.09498596 223.07667542]
[262.70343018 229.61218262]
[274.04321289 239.57769775]
[282.27288818 252.23374939]
[286.78167725 266.64114380]
[287.23507690 281.73077393]
[283.59939575 296.38290405]
[276.14443970 309.51019287]
[265.42340088 320.13858032]
[252.23188782 327.47930908]
[237.54876709 330.98770142]
[222.46363831 330.40335083]
[208.09591675 325.76965332]
[195.51177979 317.43048096]
[185.64505005 306.00463867]
[179.22790527 292.33996582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 59]
[4 58]
[5 57]
[6 56]
[7 55]
[8 54]
[9 53]
[10 52]
[21 31]
[22 30]
[23 29]
[36 45]
[37 44]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
