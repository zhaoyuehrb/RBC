%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCGCUGUUUCGUGGGACCAGGAUUGAAACAAGAUGGCGGGUUCGUGGUGAGAAGCCGUCAAGCAGGAGUAGAAAUUGGUAUGCUUAGAAGCAGAUUCUAAAAGCAGUUUCUCUUCAGAACAUCUUUUUUCAUACCACUUGAUAAGCAUCUUGAAACACC\
) } def
/len { sequence length } bind def

/coor [
[92.05770874 543.53228760]
[90.86805725 528.46325684]
[94.17456818 513.71337891]
[101.68321991 500.59426880]
[112.72634888 490.27239990]
[126.32201385 483.66564941]
[124.01834106 468.84359741]
[121.71466064 454.02154541]
[119.26825714 439.22238159]
[116.67935944 424.44747925]
[114.09045410 409.67260742]
[101.78910065 401.35321045]
[98.95310974 386.40625000]
[107.76266479 373.55984497]
[105.17375946 358.78494263]
[102.58485413 344.01007080]
[99.99594879 329.23516846]
[92.53153229 327.54550171]
[85.78007507 323.88424683]
[80.25334930 318.51223755]
[76.37480927 311.82061768]
[74.44709778 304.30239868]
[74.62853241 296.51608276]
[76.92020416 289.04409790]
[81.16475677 282.44949341]
[87.05715942 277.23318481]
[94.16655731 273.79620361]
[93.58849335 258.80734253]
[93.01042938 243.81848145]
[92.43236542 228.82962036]
[91.85430145 213.84075928]
[83.63227081 201.42112732]
[90.83200073 187.33302307]
[90.25393677 172.34416199]
[89.67587280 157.35531616]
[89.09780884 142.36645508]
[88.51974487 127.37759399]
[87.94168091 112.38874054]
[79.14830017 100.23651123]
[65.09176636 95.00070953]
[51.03522110 89.76490021]
[36.97868347 84.52909851]
[21.34576988 86.96273804]
[12.11974144 75.26959229]
[-1.93679905 70.03378296]
[-15.99333954 64.79798126]
[-29.50390816 72.67189789]
[-44.90600586 69.96830750]
[-54.92723465 57.96376801]
[-54.83587265 42.32645035]
[-44.67506409 30.43982124]
[-29.24242783 27.91638184]
[-15.82478428 35.94762421]
[-10.75753403 50.74143982]
[3.29900694 55.97724533]
[17.35554695 61.21305084]
[31.98304176 58.40490723]
[42.21448898 70.47255707]
[56.27102661 75.70835876]
[70.32756805 80.94416809]
[84.38410950 86.17996979]
[71.60529327 78.32492065]
[67.39267731 63.92860794]
[73.92124939 50.42387772]
[87.82028961 44.78325272]
[101.91369629 49.91900253]
[108.92501068 63.17952728]
[105.23308563 77.72006226]
[111.66682434 64.16989136]
[118.10056305 50.61972809]
[124.53430176 37.06956100]
[125.39778900 27.92675781]
[131.22482300 23.32207298]
[137.91851807 9.89841557]
[144.61219788 -3.52524185]
[151.30587769 -16.94889832]
[157.99957275 -30.37255669]
[164.69325256 -43.79621124]
[171.38693237 -57.21987152]
[178.08062744 -70.64352417]
[177.31469727 -86.44618225]
[189.91838074 -94.38321686]
[185.72708130 -102.92457581]
[185.96177673 -112.29788208]
[190.44152832 -120.37724304]
[198.03703308 -125.38929749]
[206.95251465 -126.30204773]
[214.41073608 -139.31645203]
[221.86897278 -152.33085632]
[229.32720947 -165.34526062]
[236.78544617 -178.35968018]
[244.24366760 -191.37408447]
[241.44625854 -207.17135620]
[252.16058350 -219.11216736]
[268.16754150 -218.03652954]
[277.18795776 -204.76959229]
[272.30215454 -189.48861694]
[257.25808716 -183.91584778]
[249.79985046 -170.90144348]
[242.34161377 -157.88703918]
[234.88337708 -144.87263489]
[227.42515564 -131.85823059]
[219.96691895 -118.84381866]
[221.91125488 -98.32251740]
[203.34204102 -87.68952942]
[204.58674622 -72.84702301]
[191.50428772 -63.94984055]
[184.81059265 -50.52618408]
[178.11691284 -37.10252762]
[171.42321777 -23.67886925]
[164.72953796 -10.25521278]
[158.03585815 3.16844416]
[151.34216309 16.59210205]
[144.64848328 30.01575851]
[138.08447266 43.50329590]
[131.65072632 57.05346298]
[125.21699524 70.60363007]
[118.78325653 84.15380096]
[121.13835907 93.57415771]
[119.49256134 102.16394043]
[114.89868164 108.45608521]
[108.85298920 111.67246246]
[102.93053436 111.81067657]
[103.50859833 126.79953003]
[104.08666229 141.78839111]
[104.66472626 156.77725220]
[105.24279022 171.76609802]
[105.82085419 186.75495911]
[114.08423615 200.24670410]
[106.84316254 213.26269531]
[107.42122650 228.25155640]
[107.99929047 243.24041748]
[108.57735443 258.22927856]
[109.15541840 273.21813965]
[127.51744843 287.14550781]
[129.73524475 309.81958008]
[114.77085114 326.64627075]
[117.35975647 341.42114258]
[119.94865417 356.19604492]
[122.53755951 370.97094727]
[135.19012451 380.05667114]
[137.60516357 395.07739258]
[128.86535645 407.08367920]
[131.45425415 421.85858154]
[134.04315186 436.63348389]
[138.62686157 444.59124756]
[136.53671265 451.71786499]
[138.84039307 466.53991699]
[141.14405823 481.36196899]
[156.10362244 483.53060913]
[169.75863647 490.01382446]
[180.89489746 500.23510742]
[188.52220154 513.28564453]
[191.96232605 528.00488281]
[190.90936279 543.08410645]
[185.45695496 557.18243408]
[176.08993530 569.04626465]
[163.64118958 577.62066650]
[149.21765137 582.14318848]
[134.10188293 582.21173096]
[119.63793945 577.82012939]
[107.11195374 569.35900879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 149]
[7 148]
[8 147]
[9 145]
[10 144]
[11 143]
[14 140]
[15 139]
[16 138]
[17 137]
[27 134]
[28 133]
[29 132]
[30 131]
[31 130]
[33 128]
[34 127]
[35 126]
[36 125]
[37 124]
[38 123]
[39 61]
[40 60]
[41 59]
[42 58]
[44 56]
[45 55]
[46 54]
[68 118]
[69 117]
[70 116]
[71 115]
[73 114]
[74 113]
[75 112]
[76 111]
[77 110]
[78 109]
[79 108]
[80 107]
[82 105]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
