%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCGCAGCGGACAGCGCCAAGUGAAGCCUCGCUUCCCCUCCGCGGCGACCAGGGCCCGAGCCGAGAGUAGCAGUUGUAGCUACCCGCCCAGAAACUAGACACA\
) } def
/len { sequence length } bind def

/coor [
[119.01728821 432.39880371]
[111.42806244 419.37954712]
[107.04642487 404.96087646]
[106.10867310 389.92037964]
[108.66537476 375.06909180]
[114.57865143 361.20800781]
[123.52960968 349.08459473]
[135.03553772 339.35266113]
[148.47592163 332.53704834]
[144.95263672 317.95672607]
[141.42935181 303.37637329]
[137.90605164 288.79602051]
[125.10052490 281.27578735]
[121.31970215 266.53942871]
[129.29443359 253.15881348]
[125.77114868 238.57846069]
[122.24785614 223.99812317]
[109.44232941 216.47789001]
[105.66150665 201.74153137]
[113.63624573 188.36090088]
[110.11295319 173.78056335]
[106.58966827 159.20022583]
[96.07937622 148.64640808]
[100.35874176 133.41493225]
[96.83544922 118.83459473]
[84.52492523 111.19277954]
[81.12153625 97.10863495]
[88.58420563 84.68869781]
[85.06092072 70.10835266]
[81.32196045 55.58182144]
[77.36814880 41.11228561]
[73.41434479 26.64275360]
[69.46053314 12.17321968]
[65.29274750 -2.23613667]
[60.91189575 -16.58215141]
[56.53104401 -30.92816544]
[41.16519547 -43.80907440]
[45.92602158 -62.45112991]
[40.70299530 -76.51242828]
[35.47997284 -90.57372284]
[30.25694656 -104.63501740]
[14.15500927 -116.58301544]
[17.80310631 -135.47436523]
[11.75625515 -149.20155334]
[-0.16215156 -161.25924683]
[8.12497711 -176.04977417]
[24.63159561 -172.18093872]
[25.48343849 -155.24839783]
[31.53029060 -141.52122498]
[41.53062820 -138.61221313]
[48.35379791 -130.45265198]
[49.49382401 -119.65460205]
[44.31824112 -109.85803986]
[49.54126740 -95.79674530]
[54.76428986 -81.73545074]
[59.98731613 -67.67415619]
[69.79776001 -64.17783356]
[76.12556458 -55.62839127]
[76.62390900 -44.78176880]
[70.87705994 -35.30901718]
[75.25791168 -20.96300316]
[79.63876343 -6.61698818]
[84.68335724 -1.04979026]
[83.93006897 8.21941185]
[87.88387299 22.68894577]
[91.83768463 37.15847778]
[95.79148865 51.62801361]
[100.66889954 57.34225464]
[99.64125824 66.58506012]
[103.16455078 81.16540527]
[115.47507477 88.80722046]
[118.87846375 102.89136505]
[111.41579437 115.31130219]
[114.93907928 129.89164734]
[125.70138550 141.48834229]
[121.17000580 155.67692566]
[124.69329834 170.25727844]
[128.21658325 184.83761597]
[141.42135620 193.10029602]
[144.78677368 207.93702698]
[136.82820129 220.47483826]
[140.35148621 235.05517578]
[143.87478638 249.63552856]
[157.07955933 257.89819336]
[160.44497681 272.73492432]
[152.48640442 285.27273560]
[156.00968933 299.85308838]
[159.53297424 314.43344116]
[163.05627441 329.01376343]
[178.12582397 328.94006348]
[192.80603027 332.34417725]
[206.30522156 339.04260254]
[217.89538574 348.67404175]
[226.95149231 360.71911621]
[232.98515320 374.52822876]
[235.67098999 389.35668945]
[234.86413574 404.40478516]
[230.60812378 418.86105347]
[223.13247681 431.94580078]
[212.84033203 442.95346069]
[200.28672791 451.29037476]
[186.14869690 456.50692749]
[171.18864441 458.32183838]
[156.21337891 456.63717651]
[142.03048706 451.54382324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 89]
[10 88]
[11 87]
[12 86]
[15 83]
[16 82]
[17 81]
[20 78]
[21 77]
[22 76]
[24 74]
[25 73]
[28 70]
[29 69]
[30 67]
[31 66]
[32 65]
[33 64]
[34 62]
[35 61]
[36 60]
[38 56]
[39 55]
[40 54]
[41 53]
[43 49]
[44 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
