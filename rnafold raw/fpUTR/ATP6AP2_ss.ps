%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGACGAGUCCGAGCGCGUCACCUCCUCACGCUGCGGCUGUCGCCCGUGUCCCGCCGGCCCGUUCCGUGUCGCCCCGCAGUGCUGCGGCCGCCGCGGCACC\
) } def
/len { sequence length } bind def

/coor [
[166.90295410 217.52891541]
[163.19105530 201.59556580]
[168.00039673 185.86083984]
[157.63919067 175.01440430]
[150.62387085 172.30606079]
[147.13365173 163.67561340]
[137.10803223 152.51824951]
[127.08240509 141.36087036]
[112.24163055 140.82514954]
[101.91528320 129.65281677]
[102.57782745 114.09007263]
[89.34549713 109.57376099]
[86.26480103 95.93554688]
[76.23918152 84.77817535]
[66.21356201 73.62080383]
[56.18794250 62.46343231]
[46.16232300 51.30606079]
[31.18343925 46.21256638]
[28.43204880 31.57429123]
[18.40642738 20.41691971]
[8.38080788 9.25954914]
[-5.68293142 14.86638355]
[-20.78803062 15.32240963]
[-35.11082077 10.59187984]
[-46.92868805 1.26406538]
[-54.82724380 -11.52007580]
[-57.86960983 -26.20743370]
[-55.70748901 -41.02142715]
[-48.62093353 -54.17687988]
[-58.64655304 -65.33425140]
[-68.67217255 -76.49162292]
[-78.69779205 -87.64899445]
[-91.62023163 -89.15091705]
[-99.73997498 -98.79396820]
[-99.06335449 -110.97837067]
[-108.74405670 -122.43629456]
[-118.42475891 -133.89422607]
[-134.22660828 -136.66569519]
[-141.78527832 -150.81652832]
[-135.30241394 -165.49140930]
[-119.75109863 -169.43301392]
[-107.06098175 -159.61769104]
[-106.96682739 -143.57492065]
[-97.28613281 -132.11698914]
[-87.60543060 -120.65907288]
[-70.84541321 -115.70896912]
[-67.54042816 -97.67461395]
[-57.51480484 -86.51724243]
[-47.48918152 -75.35987091]
[-37.46356201 -64.20249939]
[-23.62792015 -69.84699249]
[-8.66788578 -70.41837311]
[5.61169624 -65.82837677]
[17.48146439 -56.61262894]
[25.49697876 -43.86815643]
[28.67448044 -29.12285995]
[26.61159325 -14.15233898]
[19.53817940 -0.76607150]
[29.56379890 10.39129925]
[39.58942032 21.54867172]
[53.85120392 25.84411430]
[57.31969452 41.28044128]
[67.34531403 52.43781281]
[77.37093353 63.59518433]
[87.39655304 74.75255585]
[97.42217255 85.90992737]
[110.65450287 90.42623901]
[113.73519897 104.06445312]
[129.27993774 105.06390381]
[139.28839111 116.52188110]
[138.23977661 131.33525085]
[148.26539612 142.49263000]
[158.29101562 153.64999390]
[168.48562622 164.65318298]
[178.84683228 175.49961853]
[192.34020996 171.47650146]
[206.17877197 173.68606567]
[217.63917542 181.63516235]
[224.49133301 193.70684814]
[225.43241882 207.48910522]
[220.33406067 220.25663757]
[230.35968018 231.41400146]
[240.38529968 242.57138062]
[250.41091919 253.72874451]
[260.43655396 264.88610840]
[270.46215820 276.04348755]
[280.48779297 287.20086670]
[290.51339722 298.35824585]
[300.53903198 309.51559448]
[315.62292480 317.25592041]
[312.36071777 333.89306641]
[295.47070312 335.36398315]
[289.38165283 319.54122925]
[279.35601807 308.38385010]
[269.33041382 297.22647095]
[259.30477905 286.06912231]
[249.27917480 274.91174316]
[239.25355530 263.75436401]
[229.22793579 252.59700012]
[219.20231628 241.43962097]
[209.17668152 230.28225708]
[193.53718567 234.02069092]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[6 73]
[7 72]
[8 71]
[11 68]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[19 60]
[20 59]
[21 58]
[29 50]
[30 49]
[31 48]
[32 47]
[35 45]
[36 44]
[37 43]
[81 101]
[82 100]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
