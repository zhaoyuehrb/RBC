%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGAGGUGACACCAGGAGGUAACCAGGUGGAAAUCACCCUCAAGUAGCAGAGACAGGUGUGCAAAGGCUCAGAGGGAGCUUCUCCAGGAUCAGCAGAGCUCGAUUGUAGGGUGUGAGGCUGUCACAGAGGCUGGAGAAAUAAGCAGUUCCUUGCUAAGAAGUCUGAAUUUUAACCUGAAGGGAC\
) } def
/len { sequence length } bind def

/coor [
[-111.80809021 342.61495972]
[-125.97645569 334.84698486]
[-136.44857788 345.58639526]
[-146.92070007 356.32577515]
[-157.39282227 367.06518555]
[-161.15426636 375.41265869]
[-168.13221741 377.89517212]
[-178.78327942 388.45712280]
[-189.43432617 399.01910400]
[-200.08538818 409.58105469]
[-210.73643494 420.14300537]
[-221.02667236 431.05682373]
[-230.94445801 442.31015015]
[-240.86224365 453.56347656]
[-250.78002930 464.81680298]
[-254.09982300 480.28579712]
[-268.31961060 484.71829224]
[-278.23739624 495.97161865]
[-276.99237061 511.72680664]
[-287.31600952 523.69335938]
[-303.08346558 524.77172852]
[-314.94018555 514.32214355]
[-315.85180664 498.54415894]
[-305.27746582 486.79858398]
[-289.49072266 486.05383301]
[-279.57293701 474.80050659]
[-276.96252441 460.13644409]
[-262.03335571 454.89901733]
[-252.11558533 443.64569092]
[-242.19778442 432.39236450]
[-232.27999878 421.13903809]
[-232.33383179 418.31649780]
[-231.26103210 415.30258179]
[-228.98303223 412.53073120]
[-225.58103943 410.45468140]
[-221.29840088 409.49194336]
[-210.64735413 398.92999268]
[-199.99629211 388.36804199]
[-189.34523010 377.80606079]
[-178.69418335 367.24411011]
[-168.13221741 356.59304810]
[-157.66009521 345.85366821]
[-147.18797302 335.11425781]
[-136.71585083 324.37484741]
[-143.89741516 312.59683228]
[-148.04109192 299.42868042]
[-148.89949036 285.64071655]
[-146.41752625 272.04077148]
[-140.73599243 259.42678833]
[-132.18353271 248.53996277]
[-121.25763702 240.02134705]
[-108.59573364 234.37394714]
[-94.93797302 231.93310547]
[-81.08398438 232.84657288]
[-67.84603882 237.06556702]
[-56.00145721 244.34736633]
[-45.17447281 233.96582031]
[-34.34748840 223.58427429]
[-23.52050400 213.20274353]
[-12.69351959 202.82119751]
[-19.10328865 187.47268677]
[-19.13513565 170.80285645]
[-12.75602531 155.36210632]
[-0.91592211 143.52360535]
[14.59356308 137.11857605]
[31.41024590 137.15298462]
[46.96113586 143.64976501]
[57.43325806 132.91035461]
[67.90538025 122.17095947]
[78.37749481 111.43156433]
[88.84961700 100.69216156]
[99.23116302 89.86517334]
[109.33659363 78.78004456]
[119.25437927 67.52671051]
[129.07728577 56.19046783]
[138.80464172 44.77210999]
[148.53198242 33.35375595]
[158.25932312 21.93540192]
[167.98666382 10.51704693]
[177.71400452 -0.90130800]
[187.44134521 -12.31966305]
[197.16868591 -23.73801804]
[206.20820618 -35.70827484]
[214.52865601 -48.18906403]
[222.84910583 -60.66985321]
[231.16955566 -73.15064240]
[239.49002075 -85.63142395]
[247.81047058 -98.11221313]
[256.13092041 -110.59300232]
[263.70355225 -123.54117584]
[270.50216675 -136.91198730]
[271.60699463 -146.00090027]
[277.52899170 -150.44888306]
[284.55126953 -163.70359802]
[291.57354736 -176.95831299]
[298.59585571 -190.21302795]
[290.14038086 -206.23294067]
[292.95324707 -223.96868896]
[305.72528076 -236.36749268]
[323.22521973 -238.61326599]
[329.79827881 -252.09640503]
[336.37133789 -265.57952881]
[342.94436646 -279.06268311]
[336.41647339 -293.27255249]
[340.59960938 -308.34024048]
[353.51858521 -317.15127563]
[369.07348633 -315.54531860]
[379.91973877 -304.28067017]
[380.93612671 -288.67614746]
[371.64266968 -276.09973145]
[356.42752075 -272.48962402]
[349.85446167 -259.00650024]
[343.28140259 -245.52334595]
[336.70837402 -232.04020691]
[343.94714355 -222.26548767]
[346.34924316 -210.26808167]
[343.39712524 -198.31959534]
[335.59301758 -188.70913696]
[324.37457275 -183.30480957]
[311.85055542 -183.19075012]
[304.82827759 -169.93603516]
[297.80596924 -156.68132019]
[290.78369141 -143.42660522]
[283.87298584 -130.11335754]
[277.07437134 -116.74255371]
[291.35742188 -121.32449341]
[305.29705811 -115.78490448]
[312.53903198 -102.64894104]
[309.78222656 -87.90444946]
[298.28326416 -78.27251434]
[283.28384399 -78.14372253]
[271.62118530 -87.57678223]
[268.61169434 -102.27254486]
[260.29125977 -89.79176331]
[251.97080994 -77.31097412]
[243.65034485 -64.83018494]
[235.32989502 -52.34939957]
[227.00944519 -39.86861038]
[218.68899536 -27.38782310]
[233.41099548 -30.26230240]
[246.60438538 -23.12545967]
[252.25512695 -9.23052788]
[247.78739929 5.08867216]
[235.23777771 13.30492401]
[220.32681274 11.67295933]
[209.85148621 0.93668705]
[208.58703613 -14.01067638]
[198.85969543 -2.59232163]
[189.13235474 8.82603359]
[179.40501404 20.24438858]
[169.67767334 31.66274261]
[159.95033264 43.08109665]
[150.22299194 54.49945450]
[140.49565125 65.91780853]
[138.54724121 73.06332397]
[130.50772095 77.44449615]
[120.58992767 88.69783020]
[119.99405670 93.45552826]
[116.38964081 97.88323975]
[110.14496613 100.15540314]
[107.33812714 107.73085785]
[99.58901978 111.16428375]
[89.11689758 121.90367889]
[78.64477539 132.64308167]
[68.17265320 143.38247681]
[57.70053482 154.12187195]
[63.69001389 166.17906189]
[65.66365814 179.47344971]
[63.44279099 192.70565796]
[57.25801849 204.58677673]
[47.72534561 213.96386719]
[35.78488541 219.93194580]
[22.60812569 221.92118835]
[9.48300076 219.75138855]
[-2.31197834 213.64817810]
[-13.13896275 224.02972412]
[-23.96594810 234.41127014]
[-34.79293442 244.79280090]
[-45.61991882 255.17434692]
[-37.98171234 269.55529785]
[-34.68986130 285.48840332]
[-36.00136185 301.69107056]
[-41.80296707 316.86129761]
[-51.62093353 329.78216553]
[-64.65966797 339.41958618]
[-79.86623383 345.00506592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 44]
[3 43]
[4 42]
[5 41]
[7 40]
[8 39]
[9 38]
[10 37]
[11 36]
[12 31]
[13 30]
[14 29]
[15 28]
[17 26]
[18 25]
[56 179]
[57 178]
[58 177]
[59 176]
[60 175]
[67 166]
[68 165]
[69 164]
[70 163]
[71 162]
[72 160]
[73 157]
[74 156]
[75 154]
[76 153]
[77 152]
[78 151]
[79 150]
[80 149]
[81 148]
[82 147]
[83 139]
[84 138]
[85 137]
[86 136]
[87 135]
[88 134]
[89 133]
[90 125]
[91 124]
[93 123]
[94 122]
[95 121]
[96 120]
[100 114]
[101 113]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
