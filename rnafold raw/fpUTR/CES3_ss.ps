%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUAGAGAUCGGUGGUGCUGAAGGGCAGGGAUCUUAUUCCACCUUCUGAAGCUUCUGUCGAACCAGUUGUAAGGAGA\
) } def
/len { sequence length } bind def

/coor [
[89.33693695 105.31163025]
[87.13948822 100.42705536]
[74.66744232 92.09349823]
[62.19539642 83.75994873]
[49.72335434 75.42639160]
[37.25130844 67.09283447]
[24.77926445 58.75928497]
[12.30722046 50.42573166]
[-0.16482385 42.09217834]
[-5.92361689 41.74865723]
[-10.39655113 39.31547546]
[-12.97150993 35.71370316]
[-13.53280067 31.97288322]
[-24.93889046 22.23116302]
[-36.34497833 12.48944283]
[-47.75106812 2.74772167]
[-59.15715790 -6.99399900]
[-72.38597870 -14.06494999]
[-86.82280731 -18.13655663]
[-101.25963593 -22.20816422]
[-115.69646454 -26.27976990]
[-131.44917297 -21.72082710]
[-143.08460999 -33.27716064]
[-138.63320923 -49.06060791]
[-122.67421722 -52.83450699]
[-111.62485504 -40.71659851]
[-97.18802643 -36.64499283]
[-82.75119781 -32.57338715]
[-68.31436920 -28.50177765]
[-75.62441254 -41.59999466]
[-76.24884033 -56.58699036]
[-70.05371094 -70.24789429]
[-58.36793900 -79.65229797]
[-43.69825363 -82.78284454]
[-29.19146347 -78.96800995]
[-17.95942879 -69.02610779]
[-12.41154575 -55.08978653]
[-13.73789597 -40.14854050]
[-21.65396118 -27.40743065]
[-34.46166229 -19.59955978]
[-49.41543961 -18.40008926]
[-38.00934982 -8.65836811]
[-26.60326004 1.08335292]
[-15.19716930 10.82507324]
[-3.79108024 20.56679535]
[8.16872978 29.62013435]
[20.64077377 37.95368576]
[33.11281967 46.28723907]
[45.58486176 54.62079239]
[58.05690765 62.95434570]
[70.52895355 71.28790283]
[83.00099182 79.62145233]
[95.47303772 87.95500946]
[108.41405487 95.53987122]
[121.77915192 102.34972382]
[135.14425659 109.15958405]
[148.50935364 115.96944427]
[161.87445068 122.77929688]
[176.74015808 118.12651062]
[190.19725037 125.22306824]
[194.54136658 139.42391968]
[207.90646362 146.23377991]
[221.27156067 153.04364014]
[236.91233826 149.47351074]
[249.36509705 159.58827209]
[249.07714844 175.62873840]
[236.26937866 185.29003906]
[220.76683044 181.16085815]
[214.46170044 166.40873718]
[201.09660339 159.59887695]
[187.73150635 152.78901672]
[173.68937683 157.62162781]
[160.03825378 150.90585327]
[155.06459045 136.14439392]
[141.69949341 129.33453369]
[128.33439636 122.52468109]
[114.96929169 115.71482086]
[101.60419464 108.90496826]
[97.51816559 109.69036102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 53]
[3 52]
[4 51]
[5 50]
[6 49]
[7 48]
[8 47]
[9 46]
[13 45]
[14 44]
[15 43]
[16 42]
[17 41]
[18 29]
[19 28]
[20 27]
[21 26]
[54 78]
[55 77]
[56 76]
[57 75]
[58 74]
[61 71]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
