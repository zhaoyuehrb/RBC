%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCGCAGGGAGCAGCCGGUGGCUCGGCGGCGGCGGCGGCGGCGGCGGCGGCGUCGGCGUCGUCUACCUCCAGCUUCUCCUCCCUCCUCCUCCGUCUCCUCCUCUCUCUCUCCAUCUGCUGUGGUU\
) } def
/len { sequence length } bind def

/coor [
[250.39735413 267.97631836]
[257.75790405 244.05075073]
[246.16273499 234.53485107]
[234.56758118 225.01895142]
[227.32492065 223.18829346]
[222.80838013 215.12445068]
[215.61283875 213.11660767]
[211.29554749 204.94435120]
[200.18127441 194.87095642]
[189.06700134 184.79757690]
[177.95274353 174.72419739]
[166.83847046 164.65080261]
[155.72421265 154.57742310]
[135.28320312 152.18267822]
[128.65673828 131.87751770]
[116.83154297 122.64904785]
[105.00634766 113.42057800]
[91.18745422 111.29222870]
[85.76517487 98.40461731]
[73.93997955 89.17614746]
[58.30043411 86.78551483]
[53.02716446 72.85562134]
[41.20196915 63.62715149]
[22.59467316 66.71656036]
[7.82292938 55.50350952]
[5.86400175 37.38002014]
[-6.39977026 28.74289703]
[-18.66354179 20.10577393]
[-30.92731476 11.46865082]
[-43.19108582 2.83152795]
[-58.92910004 1.21117496]
[-64.87952423 -12.44319153]
[-77.14329529 -21.08031464]
[-89.40706635 -29.71743774]
[-101.67083740 -38.35456085]
[-113.93460846 -46.99168396]
[-129.67262268 -48.61203766]
[-135.62304688 -62.26640320]
[-147.88682556 -70.90352631]
[-163.62483215 -72.52388000]
[-169.57525635 -86.17824554]
[-181.83901978 -94.81536865]
[-198.21154785 -95.74949646]
[-205.34617615 -110.51530457]
[-195.90341187 -123.92300415]
[-179.59716797 -122.17989349]
[-173.20190430 -107.07913971]
[-160.93812561 -98.44201660]
[-146.07730103 -97.43945312]
[-139.24969482 -83.16729736]
[-126.98592377 -74.53017426]
[-112.12509918 -73.52760315]
[-105.29748535 -59.25545502]
[-93.03371429 -50.61833191]
[-80.76994324 -41.98120880]
[-68.50617218 -33.34408569]
[-56.24240112 -24.70696449]
[-41.38157272 -23.70439529]
[-34.55396271 -9.43224430]
[-22.29019165 -0.79512131]
[-10.02641964 7.84200144]
[2.23735237 16.47912407]
[14.50112438 25.11624718]
[25.17223549 20.74461174]
[36.74206543 22.12940216]
[46.27530670 29.03734589]
[51.29608536 39.81913757]
[50.43044281 51.80195236]
[62.25563812 61.03042603]
[77.04936981 62.76097488]
[83.16845703 77.35095215]
[94.99365234 86.57942200]
[108.81254578 88.70777130]
[114.23482513 101.59538269]
[126.06002045 110.82385254]
[137.88520813 120.05233002]
[147.18896484 117.61829376]
[156.41964722 119.77039337]
[163.47798157 125.88658142]
[166.82083130 134.45880127]
[165.79759216 143.46315002]
[176.91184998 153.53654480]
[188.02612305 163.60992432]
[199.14039612 173.68330383]
[210.25465393 183.75669861]
[221.36892700 193.83007812]
[232.60597229 203.76631165]
[244.08348083 213.42378235]
[255.67863464 222.93968201]
[267.27380371 232.45558167]
[273.18008423 227.82052612]
[279.68472290 224.07788086]
[286.65396118 221.30349731]
[293.94464111 219.55332947]
[301.40716553 218.86230469]
[308.88854980 219.24362183]
[316.23556519 220.68852234]
[323.29785156 223.16645813]
[329.93106079 226.62576294]
[335.99969482 230.99470520]
[341.37994385 236.18298340]
[345.96231079 242.08361816]
[349.65362549 248.57511902]
[352.37911987 255.52401733]
[354.08377075 262.78759766]
[354.73367310 270.21679688]
[354.31640625 277.65930176]
[352.84149170 284.96273804]
[350.34008789 291.97760010]
[346.86434937 298.56048584]
[342.48632812 304.57702637]
[337.29650879 309.90444946]
[331.40191650 314.43429565]
[337.81524658 327.99414062]
[344.22857666 341.55395508]
[350.64190674 355.11380005]
[365.20196533 361.85061646]
[368.87283325 377.46804810]
[358.83856201 389.98574829]
[342.79656982 389.80120850]
[333.05288696 377.05599976]
[337.08206177 361.52713013]
[330.66873169 347.96728516]
[324.25540161 334.40744019]
[317.84210205 320.84762573]
[293.06033325 322.33416748]
[270.36886597 312.13601685]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 90]
[3 89]
[4 88]
[6 87]
[8 86]
[9 85]
[10 84]
[11 83]
[12 82]
[13 81]
[15 76]
[16 75]
[17 74]
[19 72]
[20 71]
[22 69]
[23 68]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[38 51]
[39 50]
[41 48]
[42 47]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
