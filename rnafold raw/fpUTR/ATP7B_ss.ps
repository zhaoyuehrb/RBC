%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCGGACCCCUGUUUGCUUUAGAGCCGAGCCGCGCCGAUGCCCUCACACUCUGCGCCUCCUCUCCCGGGACUUUAACACCCCGCUCUCCUCCACCGACCAGGUGACCUUUUGCUCUGAGCCAGAUCAGAGAAGAAUUCGGUGUCCGUGCGGGACG\
) } def
/len { sequence length } bind def

/coor [
[-91.61914062 130.73567200]
[-100.43599701 114.67063141]
[-115.36193085 116.15943909]
[-130.28785706 117.64824677]
[-145.21379089 119.13705444]
[-160.13972473 120.62586212]
[-175.06565857 122.11466980]
[-161.60984802 128.74348450]
[-151.16654968 139.51091003]
[-144.95195007 153.16297913]
[-143.68981934 168.10978699]
[-147.52713013 182.61065674]
[-156.01699829 194.97682190]
[-168.17070007 203.76814270]
[-182.57284546 207.96081543]
[-197.54615784 207.06654358]
[-211.34689331 201.18946838]
[-222.36781311 191.01405334]
[-229.32545471 177.72528076]
[-231.40953064 162.87077332]
[-228.37733459 148.18043518]
[-220.58198547 135.36511230]
[-208.93133545 125.91723633]
[-194.78247070 120.93715668]
[-209.42510986 117.68247223]
[-224.06774902 114.42778778]
[-237.29953003 122.64714050]
[-252.10289001 119.13784027]
[-259.85723877 106.47270966]
[-274.49990845 103.21802521]
[-289.14254761 99.96334839]
[-295.63879395 101.60234833]
[-301.14166260 99.92814636]
[-304.29714966 96.27720642]
[-318.79882812 92.44295502]
[-333.30050659 88.60871124]
[-347.80215454 84.77445984]
[-363.12164307 88.72715759]
[-373.44833374 77.99359894]
[-387.94998169 74.15935516]
[-402.48907471 70.46945953]
[-417.06411743 66.92429352]
[-430.43203735 75.35484314]
[-445.82720947 71.78215790]
[-454.11596680 58.32584381]
[-450.38070679 42.96929932]
[-436.83749390 34.82329178]
[-421.52130127 38.72069550]
[-413.51895142 52.34925461]
[-398.94390869 55.89442444]
[-391.66152954 54.41142654]
[-384.11575317 59.65768051]
[-369.61407471 63.49192810]
[-355.33184814 59.26497650]
[-343.96792603 70.27278900]
[-329.46624756 74.10703278]
[-314.96456909 77.94128418]
[-300.46289062 81.77553558]
[-285.88784790 85.32070160]
[-271.24520874 88.57538605]
[-256.60256958 91.83006287]
[-244.21316528 83.64236450]
[-229.31707764 86.73448944]
[-220.81307983 99.78514862]
[-206.17042542 103.03982544]
[-191.52778625 106.29450989]
[-176.55445862 107.18873596]
[-161.62852478 105.69992828]
[-146.70260620 104.21112061]
[-131.77667236 102.72231293]
[-116.85073090 101.23350525]
[-101.92480469 99.74470520]
[-99.35630035 88.33428955]
[-93.66697693 78.09323120]
[-85.30847168 69.85693359]
[-74.95064545 64.30076599]
[-63.42790604 61.88469696]
[-51.67201996 62.81525040]
[-40.63674164 67.02785492]
[-31.22044182 74.19124603]
[-24.19297981 83.73345947]
[-20.13275528 94.88748932]
[-5.13572025 94.58925629]
[9.86131477 94.29102325]
[24.85834885 93.99279022]
[39.85538483 93.69455719]
[52.42630768 85.70574188]
[66.37758636 93.16713715]
[70.12770844 81.25131226]
[78.06662750 71.16693878]
[89.35507965 64.37004852]
[102.65548706 61.94760895]
[116.28933716 64.45059204]
[128.44897461 71.79248047]
[139.56950378 61.72600174]
[150.69001770 51.65952301]
[161.81054688 41.59304810]
[164.04058838 25.70574188]
[177.92494202 17.66805840]
[192.81271362 23.64581871]
[197.28329468 39.05339813]
[187.90722656 52.07141876]
[171.87702942 52.71357346]
[160.75650024 62.78004837]
[149.63597107 72.84652710]
[138.51545715 82.91300201]
[142.06062317 97.48804474]
[156.56228638 101.32228851]
[171.06396484 105.15653992]
[185.67353821 108.55663300]
[200.37799072 111.51954651]
[215.08245850 114.48245239]
[229.78691101 117.44536591]
[244.84352112 112.58642578]
[255.79170227 122.68526459]
[270.49615479 125.64817047]
[285.20062256 128.61108398]
[299.90509033 131.57398987]
[314.60952759 134.53691101]
[329.31399536 137.49981689]
[342.33618164 128.54447937]
[357.86123657 131.50227356]
[366.67840576 144.61842346]
[363.55661011 160.11132812]
[350.34799194 168.78932190]
[334.88894653 165.50392151]
[326.35107422 152.20428467]
[311.64663696 149.24136353]
[296.94216919 146.27845764]
[282.23770142 143.31555176]
[267.53323364 140.35263062]
[252.82878113 137.38972473]
[238.82394409 142.46058655]
[226.82400513 132.14982605]
[212.11953735 129.18692017]
[197.41508484 126.22400665]
[182.71061707 123.26109314]
[179.55290222 124.94266510]
[175.41140747 125.14577484]
[171.00526428 123.41950226]
[167.22972107 119.65821075]
[152.72804260 115.82396698]
[138.22636414 111.98971558]
[126.44934082 128.54075623]
[108.53166199 136.78498840]
[89.47576904 135.06556702]
[74.29077911 124.42265320]
[66.67581940 108.16416931]
[53.03220749 116.17431641]
[40.15361786 108.69159698]
[25.15658188 108.98983002]
[10.15954685 109.28806305]
[-4.83748770 109.58629608]
[-19.83452225 109.88452911]
[-26.92477417 127.05622864]
[-40.73585892 139.40611267]
[-58.49328613 144.51208496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[24 66]
[25 65]
[26 64]
[29 61]
[30 60]
[31 59]
[34 58]
[35 57]
[36 56]
[37 55]
[39 53]
[40 52]
[41 50]
[42 49]
[82 154]
[83 153]
[84 152]
[85 151]
[86 150]
[88 148]
[94 106]
[95 105]
[96 104]
[97 103]
[107 143]
[108 142]
[109 141]
[110 137]
[111 136]
[112 135]
[113 134]
[115 132]
[116 131]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
