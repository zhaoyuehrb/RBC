%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGUGUUUGAAAGCGAGGCCAAAGUGGGUGGGAGCGCGUGCUGUUGGGAGUUGCUUGGAGGUUGGCGGCGCGGGGCUGAAGGCUAGCAAACCGAGCGAUC\
) } def
/len { sequence length } bind def

/coor [
[81.70151520 130.74769592]
[71.49892426 141.74346924]
[61.29632950 152.73924255]
[61.71015549 168.31057739]
[51.20663834 179.31652832]
[36.35919952 179.61508179]
[26.15660667 190.61085510]
[15.95401573 201.60664368]
[19.08479691 216.80459595]
[12.65386200 230.92630005]
[-0.86596036 238.54168701]
[-16.27602386 236.72247314]
[-27.65084457 226.16818237]
[-30.61657333 210.93714905]
[-24.03282356 196.88603210]
[-10.43118477 189.41777039]
[4.95823765 191.40405273]
[15.16082859 180.40826416]
[25.36342049 169.41249084]
[24.55159187 154.58425903]
[34.74183273 143.28764343]
[50.30055237 142.53665161]
[60.50314331 131.54087830]
[70.70573425 120.54509735]
[65.55107117 109.67090607]
[64.29316711 97.70276642]
[67.07431793 85.99448395]
[54.80852509 77.36022186]
[42.54273605 68.72596741]
[30.27694511 60.09171295]
[14.53855419 58.47503662]
[8.58493900 44.82206345]
[-3.68085122 36.18780518]
[-15.94664192 27.55355072]
[-32.31938171 26.62324905]
[-39.45745468 11.85910606]
[-30.01782608 -1.55079448]
[-13.71117496 0.18850376]
[-7.31238604 15.28775978]
[4.95340490 23.92201614]
[17.21919632 32.55627060]
[32.08025360 33.55536652]
[38.91120148 47.82592010]
[51.17699051 56.46017838]
[63.44278336 65.09443665]
[75.70857239 73.72869110]
[83.32205200 68.34401703]
[92.06835938 65.10954285]
[101.35340881 64.24494934]
[110.54653168 65.80898285]
[119.02330017 69.69538879]
[126.20792389 75.64020538]
[131.61241150 83.23962402]
[134.86967468 91.97747040]
[149.86799622 91.75308228]
[164.86631775 91.52869415]
[179.86463928 91.30429840]
[194.86296082 91.07991028]
[209.86128235 90.85551453]
[224.85960388 90.63112640]
[239.85792542 90.40673828]
[254.85624695 90.18234253]
[266.72012329 77.43439484]
[283.79632568 77.13423157]
[295.62649536 88.98265839]
[310.61138916 88.30969238]
[325.59628296 87.63671875]
[340.58117676 86.96374512]
[355.56607056 86.29077148]
[370.55096436 85.61779785]
[385.46878052 84.04987335]
[400.26614380 81.59260559]
[415.06350708 79.13533783]
[425.52801514 66.97501373]
[441.55383301 67.71862793]
[450.84732056 80.79573822]
[446.27929688 96.17471313]
[431.35397339 102.05810547]
[417.52078247 93.93269348]
[402.72341919 96.38996124]
[387.92605591 98.84722900]
[386.17022705 101.23178101]
[383.28634644 103.00271606]
[379.52761841 103.69569397]
[375.32180786 102.95658112]
[371.22393799 100.60269165]
[356.23904419 101.27566528]
[341.25415039 101.94863892]
[326.26925659 102.62161255]
[311.28436279 103.29458618]
[296.29946899 103.96755981]
[288.94985962 114.66667938]
[276.57785034 119.19852448]
[263.67889404 115.67522430]
[255.08064270 105.18066406]
[240.08232117 105.40505981]
[225.08399963 105.62944794]
[210.08567810 105.85383606]
[195.08735657 106.07823181]
[180.08903503 106.30261993]
[165.09071350 106.52701569]
[150.09239197 106.75140381]
[135.09407043 106.97579193]
[124.05889893 126.48442078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[6 19]
[7 18]
[8 17]
[27 46]
[28 45]
[29 44]
[30 43]
[32 41]
[33 40]
[34 39]
[54 103]
[55 102]
[56 101]
[57 100]
[58 99]
[59 98]
[60 97]
[61 96]
[62 95]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
[70 86]
[71 81]
[72 80]
[73 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
