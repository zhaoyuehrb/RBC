%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGACGGAGCUCGGCGGUCUGCGCUCGGUUGCUAGCCGUUUGCUCCCGCUUUCAGUUGCUUUGCUGUUAGCCUGUUGGACCUUCGAGCCUAGCUGCUCGCACAGGACUCGGCCACCUGCCCUUCCUGCACCGACUGGCCAGCUCAAGAGGUUUGGAU\
) } def
/len { sequence length } bind def

/coor [
[174.16484070 200.05415344]
[164.52302551 188.56347656]
[154.88121033 177.07281494]
[145.23941040 165.58215332]
[135.59759521 154.09147644]
[125.95577240 142.60081482]
[116.31396484 131.11015320]
[100.20550537 135.12754822]
[84.05113983 131.29888916]
[71.45909882 120.47935486]
[57.68585968 126.42054749]
[43.91261673 132.36174011]
[30.13937759 138.30294800]
[16.36613464 144.24414062]
[10.86782360 155.94720459]
[-0.76549286 160.59883118]
[-12.06818008 156.20310974]
[-25.95403862 161.87611389]
[-39.83989716 167.54911804]
[-53.72575760 173.22210693]
[-67.61161804 178.89511108]
[-74.41310120 185.06768799]
[-81.82216644 184.54060364]
[-95.81541443 189.94326782]
[-109.80867004 195.34593201]
[-116.72856903 201.38546753]
[-124.12602234 200.71479797]
[-138.22140503 205.84509277]
[-144.67260742 220.27276611]
[-159.46578979 225.83486938]
[-173.82444763 219.23149109]
[-179.22984314 204.38032532]
[-172.47503662 190.09228516]
[-157.56753540 184.84420776]
[-143.35171509 191.74971008]
[-129.25631714 186.61940002]
[-115.21134186 181.35267639]
[-101.21808624 175.95001221]
[-87.22483063 170.54734802]
[-73.28461456 165.00924683]
[-59.39875793 159.33625793]
[-45.51289749 153.66325378]
[-31.62703705 147.99024963]
[-17.74117661 142.31726074]
[-7.78469276 127.89159393]
[10.42493916 130.47090149]
[24.19818115 124.52970123]
[37.97142029 118.58850861]
[51.74466324 112.64730835]
[65.51790619 106.70611572]
[65.89889526 91.56784821]
[72.61689758 77.99652863]
[63.19971848 66.32106018]
[53.78253555 54.64558411]
[38.31308746 52.81968307]
[28.92904663 40.84494019]
[30.76509857 26.10843849]
[21.34791565 14.43296528]
[11.93073463 2.75749111]
[2.51355267 -8.91798210]
[-13.22563076 -10.35103798]
[-23.27725983 -22.54695129]
[-21.67787933 -38.27010345]
[-9.37637615 -48.19223022]
[6.32898808 -46.42670441]
[16.12049866 -34.02098465]
[14.18902588 -18.33516502]
[23.60620880 -6.65969086]
[33.02339172 5.01578283]
[42.44057083 16.69125748]
[57.23175430 18.01659584]
[66.94844055 29.72303581]
[65.45800781 45.22840118]
[74.87519073 56.90387726]
[84.29237366 68.57935333]
[93.92130280 65.40178680]
[104.05670166 65.10688019]
[113.85410309 67.71919250]
[122.57648468 55.51591110]
[131.29885864 43.31262970]
[140.02124023 31.10934830]
[148.62489319 18.82206726]
[150.04960632 3.06514001]
[163.62899780 -3.05445290]
[172.11309814 -15.42457771]
[180.59719849 -27.79470253]
[181.20025635 -47.91178513]
[198.91615295 -55.58821106]
[206.91421509 -68.27800751]
[214.91229248 -80.96780396]
[222.91035461 -93.65760040]
[230.90841675 -106.34739685]
[227.16899109 -121.70292664]
[235.45408630 -135.16148376]
[250.84829712 -138.73835754]
[264.21850586 -130.31143188]
[267.63241577 -114.88027954]
[259.06460571 -101.59990692]
[243.59822083 -98.34933472]
[235.60015869 -85.65953827]
[227.60208130 -72.96974182]
[219.60401917 -60.27994156]
[211.60595703 -47.59014511]
[214.76365662 -37.80887604]
[211.93138123 -27.69960213]
[203.81834412 -20.69462776]
[192.96733093 -19.31060028]
[184.48323059 -6.94047499]
[175.99913025 5.42965031]
[175.18124390 20.30178261]
[160.99502563 27.30617142]
[159.79925537 34.63707733]
[152.22453308 39.83172989]
[143.50215149 52.03501129]
[134.77976990 64.23828888]
[126.05738068 76.44157410]
[133.84721375 90.60037231]
[134.47383118 106.74845886]
[127.80462646 121.46833801]
[137.44644165 132.95899963]
[147.08825684 144.44967651]
[156.73007202 155.94033813]
[166.37188721 167.43099976]
[176.01370239 178.92167664]
[185.65551758 190.41233826]
[203.08583069 196.27984619]
[205.50903320 213.63955688]
[215.37185669 224.94110107]
[225.23468018 236.24263000]
[238.71818542 235.60745239]
[249.93345642 242.76306152]
[254.89163208 254.89788818]
[251.98388672 267.48004150]
[261.62570190 278.97070312]
[271.26751709 290.46136475]
[286.64334106 289.51797485]
[299.47640991 297.71343994]
[304.95812988 311.72824097]
[301.18142700 326.11138916]
[310.82324219 337.60205078]
[320.46505737 349.09271240]
[336.25741577 351.91772461]
[343.76809692 366.09411621]
[337.23553467 380.74691772]
[321.67095947 384.63580322]
[309.01416016 374.77752686]
[308.97439575 358.73452759]
[299.33258057 347.24386597]
[289.69076538 335.75320435]
[274.87033081 336.97491455]
[262.02032471 329.14285278]
[256.17779541 315.08160400]
[259.77685547 300.10317993]
[250.13504028 288.61251831]
[240.49322510 277.12185669]
[223.71360779 276.38891602]
[212.41558838 263.50927734]
[213.93313599 246.10545349]
[204.07031250 234.80392456]
[194.20750427 223.50238037]
[182.13426208 222.35789490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 123]
[4 122]
[5 121]
[6 120]
[7 119]
[10 50]
[11 49]
[12 48]
[13 47]
[14 46]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[23 39]
[24 38]
[25 37]
[27 36]
[28 35]
[52 75]
[53 74]
[54 73]
[57 70]
[58 69]
[59 68]
[60 67]
[78 116]
[79 115]
[80 114]
[81 113]
[82 111]
[84 109]
[85 108]
[86 107]
[88 103]
[89 102]
[90 101]
[91 100]
[92 99]
[127 160]
[128 159]
[129 158]
[133 155]
[134 154]
[135 153]
[139 149]
[140 148]
[141 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
