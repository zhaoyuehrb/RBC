%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCCGUGAGCCCUCGGGGAGUGGUCCGACCGCGGGCGGCCGCCGGUGAGGUAGGGGCGGGAGGCGGGGGGAGAC\
) } def
/len { sequence length } bind def

/coor [
[169.02584839 358.98504639]
[166.58871460 344.18435669]
[164.15156555 329.38366699]
[161.71443176 314.58297729]
[159.27728271 299.78228760]
[156.84014893 284.98162842]
[154.40299988 270.18093872]
[151.96585083 255.38023376]
[135.40353394 245.61795044]
[130.85873413 226.63575745]
[141.51954651 209.93652344]
[137.29356384 195.54412842]
[133.06756592 181.15173340]
[128.84158325 166.75933838]
[124.61559296 152.36694336]
[118.10733795 138.85241699]
[109.48976898 126.57489014]
[100.87220001 114.29736328]
[88.27583313 108.22917175]
[86.85027313 94.32019806]
[79.13747406 88.90244293]
[78.14366150 81.36149597]
[70.03404999 68.74269104]
[56.06408310 61.31634903]
[55.69223022 46.42638397]
[47.58261871 33.80758286]
[39.47300720 21.18877792]
[31.36339569 8.56997585]
[23.25378227 -4.04882765]
[8.43763638 -11.07832432]
[7.38716650 -27.44379234]
[21.18300819 -36.30984116]
[35.63317871 -28.55583954]
[35.87258530 -12.15843964]
[43.98219681 0.46036327]
[52.09181213 13.07916641]
[60.20142365 25.69796944]
[68.31103516 38.31677246]
[81.70095062 44.84053421]
[82.65285492 60.63307953]
[90.76246643 73.25188446]
[99.12779999 85.70263672]
[111.72416687 91.77082825]
[113.14972687 105.67980194]
[121.76729584 117.95732117]
[130.38485718 130.23484802]
[134.27751160 115.74874115]
[145.74330139 106.07735443]
[160.67829895 104.68235016]
[173.73683167 112.06304169]
[180.24488831 125.57766724]
[177.87306213 140.38896179]
[167.47027588 151.19554138]
[152.75999451 154.12940979]
[139.00798035 148.14096069]
[143.23397827 162.53335571]
[147.45996094 176.92575073]
[151.68595886 191.31813049]
[155.91194153 205.71052551]
[166.72615051 208.47250366]
[175.25358582 215.54550171]
[179.89744568 225.51350403]
[179.82752991 236.42762756]
[175.12777710 246.18696594]
[166.76654053 252.94309998]
[169.20368958 267.74377441]
[171.64082336 282.54446411]
[174.07797241 297.34515381]
[176.51510620 312.14584351]
[178.95225525 326.94653320]
[181.38940430 341.74722290]
[183.82653809 356.54791260]
[195.97262573 367.02896118]
[195.20721436 383.05374146]
[182.11747742 392.32940674]
[166.74472046 387.74047852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[8 65]
[11 59]
[12 58]
[13 57]
[14 56]
[15 55]
[16 46]
[17 45]
[18 44]
[20 42]
[22 41]
[23 40]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
