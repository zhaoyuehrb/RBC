%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGGUCCCUGGUACGCGGCGGAUGGGCGCCGGCAGGAGCGGGCAGGGCGAGGCGAAGGCCGGGGAGGGAUCGAGAACGGUGUGGGAGAGCUAGGCUCGGGGGGCGAGGCCCCGGCCCGGCGGGGCG\
) } def
/len { sequence length } bind def

/coor [
[66.15098572 124.92647552]
[59.37395096 110.79854584]
[58.24167252 95.17022705]
[43.88756561 90.81595612]
[29.53346252 86.46168518]
[15.17935658 82.10742188]
[0.82525152 77.75315094]
[-13.52885342 73.39888000]
[-27.88295937 69.04460907]
[-42.23706436 64.69033813]
[-50.04139709 70.30964661]
[-59.42808151 71.62382507]
[-68.21465302 68.45772552]
[-74.41860962 61.66299438]
[-76.70455170 52.89372635]
[-92.36462402 55.14596176]
[-101.45446777 43.34663391]
[-115.44935608 37.94820786]
[-129.44424438 32.54978180]
[-143.43913269 27.15135574]
[-153.80819702 39.18288422]
[-167.63766479 46.93995285]
[-183.25782776 49.50693130]
[-198.78991699 46.59355927]
[-212.37202454 38.56764221]
[-222.38237000 26.40872955]
[-227.63287354 11.58858490]
[-227.51023865 -4.10693932]
[-241.63339233 -9.16028690]
[-255.75656128 -14.21363544]
[-269.87973022 -19.26698303]
[-287.85794067 -15.51676083]
[-298.74661255 -29.22160339]
[-312.98953247 -33.92683029]
[-325.50863647 -24.75885963]
[-341.02566528 -24.73402977]
[-353.57406616 -33.86188507]
[-358.32867432 -48.63257980]
[-353.46124268 -63.36647797]
[-340.84341431 -72.39810181]
[-325.32699585 -72.25460052]
[-312.87838745 -62.99115372]
[-308.28430176 -48.16975021]
[-294.04138184 -43.46452713]
[-283.03146362 -48.63264084]
[-271.08212280 -44.74838257]
[-264.82638550 -33.39014435]
[-250.70321655 -28.33679581]
[-236.58004761 -23.28344917]
[-222.45689392 -18.23010063]
[-213.71269226 -29.43053627]
[-201.91041565 -37.38217926]
[-188.20439148 -41.29121399]
[-173.94020081 -40.76000977]
[-160.52250671 -35.82753372]
[-149.27671814 -26.96682167]
[-141.31814575 -15.03964329]
[-137.44132996 -1.21270835]
[-138.04071045 13.15646362]
[-124.04582214 18.55488968]
[-110.05093384 23.95331573]
[-96.05603790 29.35173988]
[-81.39697266 26.71337700]
[-71.30612183 38.89883423]
[-51.37296295 33.77650070]
[-37.88279343 50.33623123]
[-23.52868843 54.69050217]
[-9.17458344 59.04477310]
[5.17952156 63.39904404]
[19.53362656 67.75331116]
[33.88773346 72.10758209]
[48.24183655 76.46185303]
[62.59594345 80.81612396]
[73.80153656 67.12561035]
[89.64754486 59.25799179]
[107.32723236 58.60680771]
[123.70908356 65.28740692]
[135.89146423 78.11649323]
[149.88635254 72.71806335]
[163.81393433 67.14830780]
[177.67213440 61.40805435]
[187.46089172 48.97862625]
[202.18029785 51.25644302]
[216.03848267 45.51618958]
[229.89668274 39.77593994]
[237.33979797 25.56398964]
[253.11854553 22.66384888]
[265.12881470 33.30025482]
[264.15734863 49.31386948]
[250.94938660 58.42041397]
[235.63693237 53.63413239]
[221.77874756 59.37438202]
[207.92054749 65.11463165]
[199.12301636 77.13348389]
[183.41238403 75.26625061]
[169.55418396 81.00650024]
[164.52554321 86.53098297]
[155.28477478 86.71295929]
[141.28988647 92.11138153]
[141.88169861 103.60663605]
[139.33334351 114.83147430]
[152.19927979 122.54301453]
[165.06520081 130.25456238]
[177.93113708 137.96609497]
[190.79705811 145.67764282]
[207.49118042 148.63446045]
[209.27130127 165.49468994]
[193.56275940 171.87263489]
[183.08552551 158.54356384]
[170.21958923 150.83203125]
[157.35366821 143.12048340]
[144.48773193 135.40895081]
[131.62181091 127.69740295]
[127.06455994 132.16511536]
[121.88350677 135.89146423]
[127.28193665 149.88635254]
[132.68035889 163.88124084]
[138.07878113 177.87612915]
[151.17306519 187.74891663]
[148.90184021 203.99002075]
[133.60156250 209.89199829]
[121.01183319 199.38339233]
[124.08389282 183.27455139]
[118.68547058 169.27966309]
[113.28704071 155.28477478]
[107.88861847 141.28988647]
[92.21934509 141.31036377]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[8 68]
[9 67]
[10 66]
[15 64]
[17 62]
[18 61]
[19 60]
[20 59]
[28 50]
[29 49]
[30 48]
[31 47]
[33 44]
[34 43]
[78 99]
[79 98]
[80 96]
[81 95]
[83 93]
[84 92]
[85 91]
[101 113]
[102 112]
[103 111]
[104 110]
[105 109]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
