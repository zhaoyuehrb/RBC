%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAGAGCUGGUUCCGCGCCGCGGCCGCCGCGACAGGUGCAGCAGAGCCGAGCCGGCCGCGCUCCGAACGGCGCCUCCCGCCCCACC\
) } def
/len { sequence length } bind def

/coor [
[142.54418945 275.15179443]
[143.11470032 260.16262817]
[147.62411499 245.85652161]
[155.75212097 233.24955750]
[166.92140198 223.23721313]
[180.33863831 216.53063965]
[195.05079651 213.60621643]
[210.01043701 214.67112732]
[199.12678528 204.34899902]
[188.24313354 194.02688599]
[177.35948181 183.70477295]
[166.47583008 173.38265991]
[155.59217834 163.06053162]
[144.70852661 152.73841858]
[133.82487488 142.41630554]
[119.26589966 139.27214050]
[114.57717133 124.16167450]
[103.69351959 113.83955383]
[90.14310455 110.39311981]
[85.98436737 97.04409790]
[70.64692688 93.16163635]
[66.73666382 78.78946686]
[55.85301208 68.46735382]
[40.51557541 64.58489227]
[36.60531616 50.21272659]
[25.72166252 39.89060593]
[17.14098358 36.14278030]
[14.64420509 29.00695419]
[4.13161516 18.30716705]
[-6.38097477 7.60737991]
[-22.18487167 7.71855450]
[-33.37971115 -3.43721271]
[-33.32379150 -19.24140358]
[-22.05028915 -30.31767082]
[-6.24757290 -30.09466171]
[4.70888472 -18.70468521]
[4.31881285 -2.90520978]
[14.83140278 7.79457760]
[25.34399223 18.49436569]
[36.04378128 29.00695419]
[46.92743301 39.32907104]
[61.48640060 42.47322845]
[66.17513275 57.58369827]
[77.05878448 67.90581512]
[91.61775208 71.04997253]
[96.30648041 86.16044617]
[109.85689545 89.60688019]
[114.01563263 102.95590210]
[124.89928436 113.27802277]
[140.23672485 117.16048431]
[144.14698792 131.53265381]
[155.03063965 141.85476685]
[165.91429138 152.17687988]
[176.79794312 162.49900818]
[187.68159485 172.82112122]
[198.56524658 183.14323425]
[209.44889832 193.46534729]
[220.33255005 203.78747559]
[226.76750183 204.86970520]
[231.47578430 208.57691956]
[246.45475769 209.37077332]
[261.43374634 210.16462708]
[276.41271973 210.95848083]
[291.39169312 211.75233459]
[302.97372437 200.99908447]
[318.76382446 201.66859436]
[329.39401245 213.36366272]
[328.55758667 229.14579773]
[316.75079346 239.65174866]
[300.97839355 238.64852905]
[290.59783936 226.73130798]
[275.61886597 225.93745422]
[260.63989258 225.14360046]
[245.66090393 224.34974670]
[230.68193054 223.55590820]
[241.75056458 233.67939758]
[249.75215149 246.36698914]
[254.11831665 260.71746826]
[254.53897095 275.71157837]
[250.98420715 290.28427124]
[243.70652771 303.40051270]
[233.22286987 314.12863159]
[220.27784729 321.70666504]
[205.79093933 325.59631348]
[190.79112244 325.52133179]
[176.34382629 321.48706055]
[163.47520447 313.77999878]
[153.09930420 302.94763184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[17 49]
[18 48]
[20 46]
[22 44]
[23 43]
[25 41]
[26 40]
[28 39]
[29 38]
[30 37]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
