%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCCUGAGGCAGAGCUCGGGGGCUGUCGGUGGGGACCUUGCAGGAGGGCACCCCAAGCCCGCCCGGCCCGCCCAACCCAGCCCCUGCGCGCAGCCCGGGCCGAGUAGGACCCCGCGCGCCCCUCGCU\
) } def
/len { sequence length } bind def

/coor [
[142.68725586 248.51290894]
[144.45329285 233.61723328]
[156.09542847 224.15887451]
[171.03790283 225.48129272]
[162.81771851 212.93423462]
[154.59753418 200.38717651]
[146.37733459 187.84013367]
[138.15715027 175.29307556]
[131.79568481 171.38255310]
[129.89419556 162.34204102]
[121.97959900 149.60002136]
[114.06499481 136.85800171]
[100.77698517 130.12910461]
[100.06804657 114.32378387]
[87.83226776 107.55789185]
[87.18993378 93.59082031]
[79.27532959 80.84880066]
[65.42121124 73.20851135]
[65.27838135 58.31458664]
[57.36377716 45.57257080]
[49.44917679 32.83055115]
[41.53457260 20.08853149]
[33.61996841 7.34651184]
[25.70536423 -5.39550686]
[17.79076004 -18.13752556]
[9.87615681 -30.87954521]
[1.96155298 -43.62156296]
[-3.81852365 -47.15799713]
[-6.47004271 -52.32917404]
[-6.01034641 -57.17596054]
[-13.30009747 -70.28548431]
[-20.58984947 -83.39500427]
[-34.05865479 -91.69570923]
[-33.48174667 -106.57913971]
[-40.77149963 -119.68865967]
[-48.06124878 -132.79818726]
[-60.67678070 -132.66694641]
[-72.06796265 -137.91900635]
[-80.06729126 -147.48660278]
[-83.18204498 -159.48748779]
[-80.87257385 -171.59515381]
[-73.64461517 -181.48971558]
[-80.29249573 -194.93611145]
[-95.82993317 -204.73097229]
[-94.13611603 -222.15447998]
[-101.10695648 -235.43632507]
[-114.37126160 -244.06005859]
[-113.43487549 -258.92520142]
[-120.40572357 -272.20706177]
[-127.37657166 -285.48889160]
[-134.34742737 -298.77072144]
[-149.66314697 -301.92706299]
[-159.32623291 -314.22174072]
[-158.77406311 -329.84954834]
[-148.26734924 -341.43157959]
[-132.76704407 -343.49908447]
[-119.59191895 -335.07589722]
[-114.96286774 -320.13919067]
[-121.06558228 -305.74157715]
[-114.09473419 -292.45974731]
[-107.12388611 -279.17788696]
[-100.15303802 -265.89605713]
[-87.38734436 -258.22232056]
[-87.82511902 -242.40716553]
[-80.85427094 -229.12533569]
[-69.34834290 -225.19104004]
[-63.45511627 -214.09700012]
[-66.84608459 -201.58398438]
[-60.19821548 -188.13758850]
[-42.74497986 -186.03562927]
[-29.88156700 -173.82609558]
[-26.81933784 -156.19889832]
[-34.95172882 -140.08793640]
[-27.66197777 -126.97840881]
[-20.37222672 -113.86888885]
[-7.42482996 -106.50585938]
[-7.48032808 -90.68475342]
[-0.19057699 -77.57523346]
[7.09917402 -64.46571350]
[14.70357227 -51.53616714]
[22.61817551 -38.79414749]
[30.53277969 -26.05212975]
[38.44738388 -13.31011105]
[46.36198807 -0.56809169]
[54.27658844 12.17392731]
[62.19119263 24.91594696]
[70.10579681 37.65796661]
[78.02040100 50.39998627]
[91.30841064 57.12888336]
[92.01734924 72.93419647]
[99.93195343 85.67621613]
[112.16773224 92.44210815]
[112.81006622 106.40917969]
[126.66418457 114.04946899]
[126.80701447 128.94338989]
[134.72161865 141.68540955]
[142.63621521 154.42742920]
[150.70420837 167.07289124]
[158.92439270 179.61993408]
[167.14457703 192.16699219]
[175.36476135 204.71405029]
[183.58496094 217.26109314]
[192.69239807 229.17976379]
[202.63923645 240.40742493]
[212.58607483 251.63508606]
[222.53291321 262.86273193]
[235.40087891 264.44070435]
[243.45358276 274.08236694]
[242.75859070 286.22247314]
[252.43122864 297.68719482]
[267.93722534 299.17117310]
[277.58331299 310.93582153]
[276.07302856 325.70925903]
[291.67349243 330.76473999]
[294.83047485 346.85714722]
[282.29635620 357.43200684]
[266.96514893 351.61080933]
[264.60830688 335.38189697]
[249.79147339 334.38342285]
[239.81872559 322.89431763]
[240.96649170 307.35983276]
[231.29385376 295.89511108]
[214.51791382 290.89355469]
[211.30525208 272.80960083]
[201.35841370 261.58193970]
[191.41157532 250.35426331]
[181.46473694 239.12660217]
[178.81570435 253.89083862]
[166.63150024 262.63986206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 102]
[5 101]
[6 100]
[7 99]
[8 98]
[10 97]
[11 96]
[12 95]
[14 93]
[16 91]
[17 90]
[19 88]
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[25 82]
[26 81]
[27 80]
[30 79]
[31 78]
[32 77]
[34 75]
[35 74]
[36 73]
[42 69]
[43 68]
[45 65]
[46 64]
[48 62]
[49 61]
[50 60]
[51 59]
[103 127]
[104 126]
[105 125]
[106 124]
[109 122]
[110 121]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
