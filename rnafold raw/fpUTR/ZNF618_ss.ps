%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGGCGGCGGCGGCGGCGGCGGCAUUGUGCGCGCACCAGCAGCCCGGCCCGGGAGGAGCAGGACGCGCCGGGGCCGCCUCCUCCCGCACGGACCC\
) } def
/len { sequence length } bind def

/coor [
[86.59159851 337.45809937]
[70.26522827 335.91479492]
[63.68553162 320.89349365]
[73.62113190 307.84680176]
[75.03275299 292.91339111]
[63.75664520 283.21865845]
[60.31061935 268.56982422]
[66.22023773 254.53665161]
[79.41234589 246.58212280]
[80.82397461 231.64869690]
[82.00085449 216.69494629]
[82.94271851 201.72453308]
[83.88457489 186.75413513]
[84.82643127 171.78373718]
[82.05500793 164.78489685]
[86.04029083 156.36021423]
[87.45191193 141.42677307]
[84.90169525 134.34434509]
[89.14963531 126.04899597]
[91.02963257 111.16727448]
[85.78900146 98.20473480]
[94.08864594 86.95272827]
[95.96864319 72.07100677]
[97.84864044 57.18928909]
[99.72863770 42.30756760]
[101.60863495 27.42584801]
[103.48863983 12.54412746]
[97.54196930 -2.11696768]
[106.81340790 -13.77414036]
[108.69340515 -28.65586090]
[110.57340240 -43.53758240]
[108.52188873 -52.62873840]
[112.75331879 -58.85445404]
[115.09983826 -73.66977692]
[117.44635010 -88.48510742]
[119.79286957 -103.30043030]
[122.13938904 -118.11575317]
[115.16074371 -129.10270691]
[117.53891754 -141.48912048]
[127.43707275 -148.63728333]
[130.24778748 -163.37159729]
[125.23343658 -178.37715149]
[135.21853638 -189.42916870]
[138.02926636 -204.16346741]
[126.78137970 -219.22952271]
[129.87861633 -237.45542908]
[144.95051575 -247.60870361]
[146.83052063 -262.49041748]
[148.71051025 -277.37213135]
[150.59051514 -292.25384521]
[146.57702637 -308.72589111]
[161.29428101 -317.14245605]
[173.45606995 -305.33029175]
[165.47222900 -290.37387085]
[163.59223938 -275.49212646]
[161.71223450 -260.61041260]
[159.83224487 -245.72869873]
[168.75546265 -238.28712463]
[172.94355774 -227.31953430]
[171.21632385 -215.58491516]
[163.89784241 -206.09754944]
[152.76356506 -201.35275269]
[149.95285034 -186.61843872]
[155.16824341 -172.66677856]
[144.98210144 -160.56086731]
[142.17138672 -145.82656860]
[148.87614441 -129.69287109]
[136.95471191 -115.76924133]
[134.60820007 -100.95391083]
[132.26167297 -86.13858795]
[129.91516113 -71.32326508]
[127.56864166 -56.50793839]
[125.45512390 -41.65758133]
[123.57512665 -26.77586174]
[121.69512939 -11.89414215]
[127.77626801 1.70251250]
[118.37035370 14.42412567]
[116.49035645 29.30584526]
[114.61035919 44.18756485]
[112.73036194 59.06928635]
[110.85036469 73.95100403]
[108.97036743 88.83272552]
[114.21099854 101.79526520]
[105.91135406 113.04727173]
[104.03135681 127.92899323]
[102.38534546 142.83840942]
[100.97371674 157.77183533]
[99.79682922 172.72560120]
[98.85497284 187.69599915]
[97.91311646 202.66639709]
[96.97126007 217.63679504]
[99.58956146 226.58119202]
[95.75740051 233.06031799]
[94.34577942 247.99375916]
[105.81369019 258.27932739]
[108.98907471 273.17129517]
[102.85916901 286.91494751]
[89.96618652 294.32501221]
[88.55455780 309.25842285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 99]
[5 98]
[9 94]
[10 93]
[11 91]
[12 90]
[13 89]
[14 88]
[16 87]
[17 86]
[19 85]
[20 84]
[22 82]
[23 81]
[24 80]
[25 79]
[26 78]
[27 77]
[29 75]
[30 74]
[31 73]
[33 72]
[34 71]
[35 70]
[36 69]
[37 68]
[40 66]
[41 65]
[43 63]
[44 62]
[47 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
