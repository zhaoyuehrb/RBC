%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCGGCCGGACUGAGUUCGCUGCUGUCCCGGUUCCUCUCGAGUCGGCUCCAACUGCCAGCCCGGGUUGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[103.56430817 316.37826538]
[103.56430817 301.37826538]
[103.56430817 286.37826538]
[103.25431061 271.38146973]
[102.63442993 256.39425659]
[102.01455688 241.40708923]
[101.39468384 226.41989136]
[100.77481079 211.43270874]
[100.15493011 196.44552612]
[99.22545624 181.47434998]
[97.98676300 166.52558899]
[89.22487640 154.48072815]
[95.79614258 140.08874512]
[94.55745697 125.13997650]
[93.31876373 110.19120789]
[91.46337128 95.30639648]
[88.99445343 80.51097870]
[86.52553558 65.71556091]
[84.05661774 50.92013931]
[79.43822479 42.69675446]
[81.80461121 35.46332550]
[69.61663818 25.76327324]
[67.94705200 10.64153004]
[77.26967621 -0.91806281]
[75.41428375 -15.80287170]
[73.55889893 -30.68767929]
[71.70350647 -45.57249069]
[62.31864548 -58.30963516]
[68.42225647 -71.89621735]
[59.03739548 -84.63336945]
[65.14100647 -98.21994781]
[63.28562164 -113.10475159]
[61.43022919 -127.98956299]
[48.80605316 -137.49775696]
[46.68547821 -153.15913391]
[56.32660675 -165.68208313]
[72.00952911 -167.63694763]
[84.42984009 -157.86396790]
[86.21879578 -142.16125488]
[76.31504059 -129.84495544]
[78.17042542 -114.96014404]
[80.02581787 -100.07533264]
[89.27796936 -88.40284729]
[83.30706787 -73.75160980]
[92.55921936 -62.07912064]
[86.58831787 -47.42787933]
[88.44371033 -32.54306793]
[90.29909515 -17.65826035]
[92.15448761 -2.77345228]
[104.02955627 6.14385033]
[106.12322235 21.21273232]
[96.68942261 33.60793686]
[98.85203552 48.45122147]
[101.32095337 63.24663925]
[103.78987122 78.04206085]
[106.25879669 92.83747864]
[109.95873260 96.99160767]
[110.89771271 102.96790314]
[108.26753235 108.95251465]
[109.50621796 123.90128326]
[110.74491119 138.85005188]
[119.59539032 151.96414185]
[112.93553162 165.28689575]
[114.17421722 180.23565674]
[118.09775543 188.81234741]
[115.14212036 195.82565308]
[115.76199341 210.81283569]
[116.38186646 225.80001831]
[117.00174713 240.78720093]
[117.62162018 255.77439880]
[118.24149323 270.76156616]
[121.80724335 279.49307251]
[118.56430817 286.37826538]
[118.56430817 301.37826538]
[118.56430817 316.37826538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 71]
[5 70]
[6 69]
[7 68]
[8 67]
[9 66]
[10 64]
[11 63]
[13 61]
[14 60]
[15 59]
[16 56]
[17 55]
[18 54]
[19 53]
[21 52]
[24 49]
[25 48]
[26 47]
[27 46]
[29 44]
[31 42]
[32 41]
[33 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
