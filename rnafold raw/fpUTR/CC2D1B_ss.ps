%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGGGGUCACGUGUUGCGCGCGAGCCACCUCCCCUGCUGGCGCUUCCUGUCGCUACCGCUGCGGCCCAGGGCCCGCGGGAGCCCAGGGCGGUGCCGGGUGAGACAAGGCCGGGGUUUGGCUCGGAUUCACCGCGAGGUAUCUAGGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[-44.68150711 157.25756836]
[-59.05791855 161.53761292]
[-73.43433380 165.81765747]
[-87.81074524 170.09768677]
[-102.18715668 174.37773132]
[-116.51856995 178.80612183]
[-130.80345154 183.38237000]
[-145.08834839 187.95860291]
[-155.87008667 199.53723145]
[-170.35110474 196.05168152]
[-184.63600159 200.62792969]
[-198.92088318 205.20417786]
[-209.70262146 216.78280640]
[-224.18365479 213.29724121]
[-227.49116516 224.79466248]
[-235.87373352 233.16123962]
[-247.14616394 236.38067627]
[-258.44863892 233.75747681]
[-266.97210693 226.06326294]
[-281.43389893 230.04527283]
[-295.89569092 234.02729797]
[-310.35751343 238.00930786]
[-321.60852051 249.13249207]
[-335.93313599 245.05148315]
[-350.39492798 249.03349304]
[-364.85671997 253.01550293]
[-368.65188599 267.89813232]
[-379.39138794 278.87805176]
[-394.18637085 283.00173950]
[-409.05700684 279.15991211]
[-420.00320435 268.38604736]
[-424.08050537 253.57824707]
[-420.19210815 238.71971130]
[-409.38397217 227.80732727]
[-394.56344604 223.77648926]
[-379.71719360 227.71144104]
[-368.83874512 238.55371094]
[-354.37695312 234.57170105]
[-339.91516113 230.58969116]
[-329.69854736 219.75132751]
[-314.33950806 223.54751587]
[-299.87771606 219.56549072]
[-285.41592407 215.58348083]
[-270.95413208 211.60147095]
[-262.94351196 195.19209290]
[-245.19787598 189.69374084]
[-228.75990295 199.01235962]
[-218.99990845 187.76104736]
[-203.49713135 190.91928101]
[-189.21224976 186.34303284]
[-174.92735291 181.76679993]
[-165.16737366 170.51548767]
[-149.66458130 173.67372131]
[-135.37969971 169.09747314]
[-121.09481812 164.52122498]
[-115.64997864 159.45343018]
[-106.46720123 160.00132751]
[-92.09078979 155.72128296]
[-77.71437836 151.44123840]
[-63.33796310 147.16119385]
[-48.96155167 142.88114929]
[-34.67666245 138.30490112]
[-20.48940468 133.43441772]
[-6.30214691 128.56391907]
[7.88511181 123.69342804]
[22.07237053 118.82293701]
[36.25962830 113.95244598]
[45.78500366 102.50183868]
[61.34974289 105.33899689]
[75.53700256 100.46850586]
[89.72425842 95.59801483]
[103.86042786 90.58116913]
[117.94400024 85.41851044]
[132.02757263 80.25585175]
[146.05703735 74.94792938]
[160.03089905 69.49531555]
[174.00477600 64.04269409]
[187.97863770 58.59007263]
[201.95249939 53.13745499]
[215.86927795 47.54072189]
[229.72746277 41.80046844]
[243.58566284 36.06021881]
[253.37442017 23.63078690]
[268.09381104 25.90860367]
[281.95202637 20.16835213]
[288.73501587 13.95429897]
[296.15643311 14.45594501]
[310.13027954 9.00332546]
[324.10415649 3.55070567]
[338.07803345 -1.90191376]
[348.12158203 -14.12638664]
[362.79074097 -11.54485130]
[372.83428955 -23.76932335]
[387.50347900 -21.18778801]
[401.47735596 -26.64040756]
[415.45120239 -32.09302902]
[426.58468628 -46.72352600]
[443.80285645 -43.47444916]
[457.66104126 -49.21470261]
[471.51925659 -54.95495224]
[475.01055908 -70.07415771]
[486.74398804 -80.22827911]
[502.20779419 -81.51284790]
[515.45581055 -73.43392944]
[521.39398193 -59.09801865]
[517.73883057 -44.01757431]
[505.89596558 -33.99133682]
[490.41912842 -32.87459564]
[477.25949097 -41.09675980]
[463.40130615 -35.35651016]
[449.54312134 -29.61625671]
[444.59957886 -18.53265762]
[433.04913330 -13.65596199]
[420.90383911 -18.11916161]
[406.92996216 -12.66654205]
[392.95611572 -7.21392250]
[383.91204834 4.62054253]
[368.24337769 2.42901516]
[359.19934082 14.26348019]
[343.53063965 12.07195282]
[329.55676270 17.52457237]
[315.58291626 22.97719193]
[301.60903931 28.42981148]
[287.69226074 34.02654648]
[273.83407593 39.76679611]
[265.03656006 51.78564835]
[249.32591248 49.91841125]
[235.46772766 55.65866089]
[221.60952759 61.39891434]
[216.60177612 66.89903259]
[207.40512085 67.11132050]
[193.43125916 72.56394196]
[179.45739746 78.01656342]
[165.48352051 83.46917725]
[151.50965881 88.92179871]
[146.38931274 94.31724548]
[137.19023132 94.33942413]
[123.10665894 99.50208282]
[109.02308655 104.66474152]
[103.09650421 110.20896912]
[94.59474945 109.78527069]
[80.40749359 114.65576935]
[66.22023773 119.52626038]
[55.68009186 131.32524109]
[41.13011932 128.13970947]
[26.94286156 133.01019287]
[12.75560379 137.88069153]
[-1.43165493 142.75117493]
[-15.61891365 147.62167358]
[-29.80617142 152.49217224]
[-34.50024033 157.29222107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[4 58]
[5 57]
[6 55]
[7 54]
[8 53]
[10 51]
[11 50]
[12 49]
[14 47]
[19 44]
[20 43]
[21 42]
[22 41]
[24 39]
[25 38]
[26 37]
[62 150]
[63 149]
[64 148]
[65 147]
[66 146]
[67 145]
[69 143]
[70 142]
[71 141]
[72 139]
[73 138]
[74 137]
[75 135]
[76 134]
[77 133]
[78 132]
[79 131]
[80 129]
[81 128]
[82 127]
[84 125]
[85 124]
[87 123]
[88 122]
[89 121]
[90 120]
[92 118]
[94 116]
[95 115]
[96 114]
[98 111]
[99 110]
[100 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
