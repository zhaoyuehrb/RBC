%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUGUAGCCUUUUCAUUUUCAUGAAAGUGAAGUGAUUUUUAGAAUUCUUAGUUGUUUUCUUUAGAAGAACAUUUCUAGGGAAUAAUACAAGAAGAUUUAGGAAUCAUUGAAGUUAUAAAUCUUUGGA\
) } def
/len { sequence length } bind def

/coor [
[102.95195770 236.99572754]
[106.32662201 222.17411804]
[115.12047577 209.77505493]
[127.99250793 201.68931580]
[125.44776154 186.90675354]
[122.90302277 172.12417603]
[120.35827637 157.34161377]
[117.81353760 142.55905151]
[115.26879120 127.77648163]
[108.55746460 124.42863464]
[101.86154938 137.85118103]
[88.43911743 131.15504456]
[95.13480377 117.73294830]
[88.42347717 114.38510132]
[75.08334351 121.24373627]
[61.74321365 128.10237122]
[48.40308380 134.96099854]
[35.06295013 141.81964111]
[21.72281837 148.67826843]
[8.38268566 155.53691101]
[-0.03892793 169.60845947]
[-16.42957115 169.08038330]
[-23.92795563 154.49594116]
[-14.82038593 140.85833740]
[1.52405071 142.19677734]
[14.86418247 135.33813477]
[28.20431519 128.47950745]
[41.54444885 121.62087250]
[54.88457870 114.76223755]
[68.22470856 107.90360260]
[81.56484222 101.04496765]
[91.15994263 89.51525879]
[95.48142242 75.15125275]
[99.80290985 60.78724289]
[104.12439728 46.42323303]
[108.44588470 32.05922318]
[112.76737213 17.69521523]
[117.08885956 3.33120632]
[121.41034698 -11.03280258]
[125.73183441 -25.39681244]
[130.05331421 -39.76082230]
[134.37480164 -54.12482834]
[138.69628906 -68.48883820]
[143.01777649 -82.85284424]
[138.34997559 -100.61594391]
[151.47984314 -112.19278717]
[155.45027161 -126.65776825]
[159.42070007 -141.12275696]
[163.39112854 -155.58773804]
[167.36155701 -170.05271912]
[166.61756897 -179.26313782]
[171.60879517 -184.81933594]
[175.93028259 -199.18334961]
[165.52406311 -210.39306641]
[162.14823914 -225.20861816]
[166.61178589 -239.62886047]
[177.62028503 -249.81063843]
[192.14927673 -253.09301758]
[196.47076416 -267.45703125]
[200.79225159 -281.82104492]
[205.11373901 -296.18502808]
[209.43522644 -310.54904175]
[213.75671387 -324.91305542]
[218.07820129 -339.27706909]
[222.39968872 -353.64108276]
[226.72117615 -368.00509644]
[231.04266357 -382.36907959]
[223.34094238 -396.16976929]
[227.73388672 -411.35128784]
[241.61521912 -418.90664673]
[256.74942017 -414.35345459]
[264.15762329 -400.39300537]
[259.44467163 -385.30780029]
[245.40667725 -378.04760742]
[241.08518982 -363.68359375]
[236.76370239 -349.31958008]
[232.44221497 -334.95556641]
[228.12072754 -320.59158325]
[223.79924011 -306.22756958]
[219.47775269 -291.86355591]
[215.15626526 -277.49954224]
[210.83477783 -263.13552856]
[206.51329041 -248.77153015]
[216.81933594 -238.01741028]
[220.38243103 -223.45167542]
[216.14839172 -208.96240234]
[205.15821838 -198.46893311]
[190.29429626 -194.86186218]
[185.97280884 -180.49784851]
[181.82653809 -166.08229065]
[177.85610962 -151.61730957]
[173.88568115 -137.15232849]
[169.91525269 -122.68733978]
[165.94483948 -108.22235870]
[171.66914368 -97.49256134]
[168.40281677 -85.36112976]
[157.38179016 -78.53136444]
[153.06030273 -64.16735077]
[148.73881531 -49.80334473]
[144.41732788 -35.43933487]
[140.09584045 -21.07532501]
[135.77435303 -6.71131611]
[131.45286560 7.65269279]
[127.13137817 22.01670265]
[122.80989075 36.38071060]
[118.48841095 50.74472046]
[114.16692352 65.10872650]
[109.84543610 79.47274017]
[105.52394867 93.83674622]
[114.38461304 92.95494843]
[123.69836426 98.31925201]
[129.96029663 109.72334290]
[130.05136108 125.23174286]
[132.59609985 140.01431274]
[135.14083862 154.79687500]
[137.68559265 169.57943726]
[140.23033142 184.36201477]
[142.77507019 199.14457703]
[157.60987854 202.46072388]
[170.04354858 211.20558167]
[178.18002319 224.04559326]
[180.77856445 239.02278137]
[177.44290161 253.85322571]
[168.68170166 266.27536011]
[155.83097839 274.39495850]
[140.85038757 276.97378540]
[126.02436066 273.61862183]
[113.61374664 264.84106445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 118]
[5 117]
[6 116]
[7 115]
[8 114]
[9 113]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[32 109]
[33 108]
[34 107]
[35 106]
[36 105]
[37 104]
[38 103]
[39 102]
[40 101]
[41 100]
[42 99]
[43 98]
[44 97]
[46 94]
[47 93]
[48 92]
[49 91]
[50 90]
[52 89]
[53 88]
[58 83]
[59 82]
[60 81]
[61 80]
[62 79]
[63 78]
[64 77]
[65 76]
[66 75]
[67 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
