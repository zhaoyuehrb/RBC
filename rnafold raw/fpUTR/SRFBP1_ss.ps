%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCGACGCAGCCGCGGUCUGAGAGACCGGUUCACGUGCAGGCAGCGGCGGAUCAUAUUCCUUCAUCUACC\
) } def
/len { sequence length } bind def

/coor [
[93.82823181 119.94644165]
[86.98963165 133.29685974]
[80.15103149 146.64727783]
[81.51400757 162.98968506]
[67.89009094 172.11770630]
[53.29439926 164.64123535]
[52.74172592 148.25140381]
[66.80061340 139.80867004]
[73.63921356 126.45825958]
[80.47781372 113.10784149]
[82.36104584 99.53743744]
[90.58118439 92.93250275]
[83.74258423 79.58209229]
[76.90397644 66.23168182]
[70.06537628 52.88126373]
[63.22677994 39.53085327]
[50.04877853 30.77580452]
[51.13274002 15.92069530]
[44.29413986 2.57028127]
[37.45553970 -10.78013229]
[30.61693954 -24.13054657]
[23.77833748 -37.48096085]
[13.38545227 -37.68419647]
[3.90811944 -41.80784607]
[-3.24224830 -49.18852997]
[-7.01961851 -58.68161774]
[-6.89622307 -68.83859253]
[-2.93583512 -78.12802887]
[4.22265577 -85.16652679]
[-0.22803663 -99.49102783]
[-13.70086956 -108.20092773]
[-15.14792919 -124.17858124]
[-3.45915508 -135.16731262]
[12.39882565 -132.73748779]
[20.26112747 -118.75308228]
[14.09646511 -103.94171906]
[18.54715729 -89.61721802]
[37.28385925 -82.21601868]
[45.18682480 -63.38513947]
[37.12875366 -44.31956100]
[43.96735382 -30.96914673]
[50.80595398 -17.61873245]
[57.64455414 -4.26831913]
[64.48315430 9.08209419]
[77.17201233 16.88223076]
[76.57719421 32.69225311]
[83.41579437 46.04266357]
[90.25439453 59.39307785]
[97.09299469 72.74349213]
[103.93159485 86.09390259]
[116.10468292 94.85837555]
[130.93484497 97.10920715]
[145.76501465 99.36003876]
[158.34048462 89.78753662]
[173.99003601 91.99372101]
[183.42904663 104.66970825]
[181.05752563 120.29505157]
[168.28245544 129.59951782]
[152.68305969 127.06293488]
[143.51417542 114.19020081]
[128.68402100 111.93937683]
[113.85385132 109.68854523]
[125.78943634 118.77378845]
[139.56782532 124.70302582]
[148.78590393 136.53633118]
[151.16352844 151.34669495]
[146.11259460 165.47071838]
[134.88246155 175.41477966]
[120.25095367 178.71916199]
[105.83722687 174.56652832]
[95.20656586 163.98403931]
[90.98850250 149.58930969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[18 44]
[19 43]
[20 42]
[21 41]
[22 40]
[29 37]
[30 36]
[51 62]
[52 61]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
