%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGCUCGCGCUCGCGAGAGCCGACCGGGGCCGCGGCCAAAGAGCUGGCUGUAAUCCCGCCUCCCGCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[107.51197052 184.54331970]
[117.96728516 173.36544800]
[112.97019196 159.22227478]
[107.97309113 145.07911682]
[102.97599792 130.93595886]
[97.97889709 116.79279327]
[84.88368988 109.47737122]
[70.22035980 112.63755798]
[55.55702972 115.79775238]
[47.54793549 120.80235291]
[40.20475006 118.76689911]
[25.42051125 121.30191040]
[10.63627338 123.83692932]
[-4.14796495 126.37194061]
[-16.40731430 137.26416016]
[-31.88249016 131.83728027]
[-34.65396118 115.67402649]
[-21.87067223 105.40174866]
[-6.68297768 111.58769989]
[8.10126114 109.05268860]
[22.88549995 106.51767731]
[37.66973877 103.98266602]
[52.39683914 101.13442230]
[67.06016541 97.97422791]
[81.72349548 94.81404114]
[87.89283752 89.02648926]
[94.99314880 87.26666260]
[100.93815613 89.01549530]
[108.80276489 76.24255371]
[116.66737366 63.46961975]
[124.53198242 50.69668198]
[121.09213257 35.50440979]
[129.24992371 22.66286850]
[143.75463867 19.47712135]
[151.61924744 6.70418453]
[159.48385620 -6.06875229]
[167.34846497 -18.84169006]
[175.21307373 -31.61462593]
[183.07768250 -44.38756180]
[190.94229126 -57.16049957]
[187.04211426 -72.47599030]
[195.18566895 -86.02065277]
[210.54153442 -89.75868988]
[223.99934387 -81.47238922]
[227.57481384 -66.07785797]
[219.14669800 -52.70840836]
[203.71522522 -49.29589081]
[195.85061646 -36.52295303]
[187.98600769 -23.75001717]
[180.12139893 -10.97708035]
[172.25679016 1.79585695]
[164.39218140 14.56879425]
[156.52757263 27.34173012]
[160.21301270 41.72759628]
[152.41912842 54.79320526]
[137.30491638 58.56129074]
[129.44030762 71.33422852]
[121.57570648 84.10717010]
[113.71109772 96.88010406]
[112.12206268 111.79570007]
[117.11915588 125.93885803]
[122.11625671 140.08201599]
[127.11334991 154.22518921]
[132.11044312 168.36834717]
[147.26722717 170.49688721]
[159.69192505 179.43475342]
[166.52944946 193.12806702]
[166.20858765 208.43020630]
[158.80305481 221.82485962]
[146.01461792 230.23403931]
[130.78193665 231.72535706]
[116.60537720 225.95614624]
[106.74262238 214.25210571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 64]
[3 63]
[4 62]
[5 61]
[6 60]
[7 25]
[8 24]
[9 23]
[11 22]
[12 21]
[13 20]
[14 19]
[28 59]
[29 58]
[30 57]
[31 56]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
