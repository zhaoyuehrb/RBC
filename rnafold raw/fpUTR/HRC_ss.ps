%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCGGAGACAGCCUCAGAGGGGUGUCCAGAGCCAGGCAGCAAGGACCAGAGGAAGGUGGACAGAGACCGAAAGGACAAAGGAGAGACACAGAGAAAAAAAGAGACCAACCCCAAAGGGACAAAGACCCCAACGUUUGUCCACAUUGCCGCAGAGGCAGCUGGAGCCAGUGCUGCCUGUCCGUCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.24330902 193.71641541]
[75.59500122 178.51805115]
[81.60499573 164.30949402]
[94.35554504 155.62460327]
[93.85431671 140.63298035]
[93.35309601 125.64135742]
[92.85186768 110.64973450]
[78.41844940 106.56607056]
[70.13706970 119.07282257]
[61.85569382 131.57957458]
[53.57431793 144.08631897]
[52.40658569 159.86437988]
[38.92873001 166.20445251]
[30.64735413 178.71121216]
[22.36597824 191.21795654]
[21.90241051 207.61054993]
[7.34757662 215.16627502]
[-6.32575893 206.11244202]
[-5.05164099 189.76286316]
[9.85922718 182.93658447]
[18.14060402 170.42984009]
[26.42198181 157.92308044]
[26.99737167 143.03959656]
[41.06756592 135.80494690]
[49.34894180 123.29819489]
[57.63032150 110.79144287]
[65.91169739 98.28469086]
[55.95985031 87.06147003]
[55.18024826 72.08174133]
[63.91329193 59.88608551]
[78.34587860 55.79947662]
[92.17633820 61.60623932]
[99.36588287 74.77098083]
[96.77548981 89.54537201]
[102.63133240 75.73562622]
[108.48716736 61.92587662]
[114.34300995 48.11613083]
[120.19884491 34.30638123]
[126.05468750 20.49663353]
[131.91052246 6.68688488]
[137.76637268 -7.12286329]
[143.62220764 -20.93261147]
[140.94067383 -39.14119339]
[155.33370972 -49.16667557]
[160.95797729 -63.07234573]
[157.97254944 -81.23357391]
[172.19606018 -91.49816132]
[177.58717346 -105.49587250]
[182.97828674 -119.49358368]
[188.36941528 -133.49128723]
[176.86988831 -139.09941101]
[168.77917480 -148.58410645]
[165.24562073 -160.19778442]
[166.60833740 -171.93092346]
[172.38163757 -181.85902405]
[181.37817383 -188.45834351]
[191.94366455 -190.83831787]
[194.93145752 -205.53775024]
[197.91925049 -220.23716736]
[200.90704346 -234.93659973]
[203.89482117 -249.63601685]
[206.88261414 -264.33544922]
[209.87040710 -279.03488159]
[212.85820007 -293.73431396]
[215.84599304 -308.43371582]
[200.47157288 -322.24981689]
[197.83906555 -344.16845703]
[211.07849121 -363.56332397]
[200.83222961 -374.51843262]
[184.99365234 -378.76950073]
[181.01786804 -394.67941284]
[192.99482727 -405.88140869]
[208.60365295 -400.85183716]
[211.78732300 -384.76467896]
[222.03358459 -373.80960083]
[218.29380798 -388.33590698]
[214.55401611 -402.86224365]
[210.81423950 -417.38854980]
[207.07444763 -431.91488647]
[203.33467102 -446.44119263]
[199.59487915 -460.96752930]
[195.85508728 -475.49383545]
[185.78042603 -486.60693359]
[177.85263062 -499.34075928]
[172.32669067 -513.28576660]
[169.38031006 -527.99359131]
[169.10823059 -542.99108887]
[171.51921082 -557.79608154]
[176.53572083 -571.93237305]
[183.99642944 -584.94537354]
[193.66139221 -596.41656494]
[205.21978760 -605.97705078]
[218.29992676 -613.31939697]
[232.48114014 -618.20745850]
[247.30737305 -620.48406982]
[262.30181885 -620.07592773]
[276.98226929 -616.99627686]
[290.87658691 -611.34405518]
[303.53799438 -603.30108643]
[314.55923462 -593.12603760]
[323.58590698 -581.14605713]
[330.32772827 -567.74652100]
[334.56787109 -553.35827637]
[336.16995239 -538.44409180]
[335.08248901 -523.48358154]
[331.34045410 -508.95782471]
[325.06414795 -495.33401489]
[316.45544434 -483.05026245]
[305.79119873 -472.50164795]
[293.41763306 -464.02920532]
[286.41223145 -450.76556396]
[279.40682983 -437.50189209]
[272.40142822 -424.23825073]
[265.39602661 -410.97460938]
[258.39062500 -397.71096802]
[251.38523865 -384.44732666]
[244.37983704 -371.18365479]
[256.88656616 -379.46505737]
[269.39334106 -387.74642944]
[269.93273926 -403.25411987]
[279.51083374 -415.46231079]
[294.44464111 -419.67666626]
[308.99182129 -414.27673340]
[317.55865479 -401.33886719]
[316.85104370 -385.83792114]
[307.14108276 -373.73434448]
[292.16244507 -369.68222046]
[277.67471313 -375.23968506]
[265.16796875 -366.95828247]
[252.66120911 -358.67691040]
[260.06286621 -344.99105835]
[260.53607178 -329.99237061]
[254.47276306 -316.87243652]
[243.60494995 -308.20553589]
[230.54541016 -305.44592285]
[227.55761719 -290.74652100]
[224.56983948 -276.04708862]
[221.58204651 -261.34765625]
[218.59425354 -246.64823914]
[215.60646057 -231.94880676]
[212.61866760 -217.24938965]
[209.63088989 -202.54995728]
[206.64309692 -187.85052490]
[222.28315735 -172.38667297]
[221.46820068 -148.18367004]
[235.46591187 -142.79254150]
[249.46362305 -137.40142822]
[263.46133423 -132.01031494]
[277.45904541 -126.61919403]
[292.64672852 -131.78775024]
[306.07876587 -123.01510620]
[307.45129395 -107.03086853]
[295.71136475 -96.09678650]
[279.86489868 -98.60055542]
[272.06793213 -112.62149048]
[258.07022095 -118.01260376]
[244.07250977 -123.40372467]
[230.07479858 -128.79484558]
[216.07708740 -134.18595886]
[202.36711121 -128.10017395]
[196.97599792 -114.10246277]
[191.58488464 -100.10475922]
[186.19377136 -86.10704803]
[190.81484985 -74.91445923]
[186.42236328 -63.20085907]
[174.86364746 -57.44808197]
[169.23937988 -43.54241180]
[173.67279053 -32.27416992]
[169.08518982 -20.63560104]
[157.43194580 -15.07677269]
[151.57611084 -1.26702428]
[145.72027588 12.54272366]
[139.86444092 26.35247231]
[134.00859070 40.16222000]
[128.15275574 53.97196960]
[122.29692078 67.78171539]
[116.44107819 81.59146881]
[110.58524323 95.40121460]
[107.84349060 110.14851379]
[108.34471893 125.14013672]
[108.84593964 140.13175964]
[109.34716797 155.12338257]
[122.64932251 162.93722534]
[129.59492493 176.71264648]
[127.96766663 192.05393982]
[118.28678894 204.06578064]
[103.64143372 208.91522217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 182]
[5 181]
[6 180]
[7 179]
[8 27]
[9 26]
[10 25]
[11 24]
[13 22]
[14 21]
[15 20]
[34 178]
[35 177]
[36 176]
[37 175]
[38 174]
[39 173]
[40 172]
[41 171]
[42 170]
[44 167]
[45 166]
[47 163]
[48 162]
[49 161]
[50 160]
[57 143]
[58 142]
[59 141]
[60 140]
[61 139]
[62 138]
[63 137]
[64 136]
[65 135]
[68 75]
[69 74]
[117 130]
[118 129]
[119 128]
[145 159]
[146 158]
[147 157]
[148 156]
[149 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
