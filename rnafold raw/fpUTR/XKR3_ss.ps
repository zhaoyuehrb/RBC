%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUGAAAUUCUAAAUUCUGAUGCAGAACGUAUCAGUGAAACUCCCUCCCACUGUCUCUUGUAUUAGCAUCAAGGAAGCGAGAAAAAAUAAGCAGCACCCUGAGA\
) } def
/len { sequence length } bind def

/coor [
[132.34983826 335.68872070]
[123.74281311 326.49801636]
[117.30686188 315.66674805]
[113.34513855 303.69888306]
[112.04558563 291.15200806]
[113.47204590 278.61145020]
[117.56111145 266.66287231]
[124.12495422 255.86508179]
[132.85990906 246.72369385]
[143.36061096 239.66761780]
[138.18434143 225.58903503]
[133.00808716 211.51045227]
[127.83183289 197.43188477]
[113.47460938 193.55784607]
[104.03998566 181.83386230]
[103.30941010 166.62466431]
[111.77239227 153.75282288]
[106.59613037 139.67424011]
[101.41987610 125.59567261]
[96.24361420 111.51708984]
[90.65628815 97.59653473]
[84.66271210 83.84600830]
[78.66914368 70.09548187]
[72.67556763 56.34494781]
[66.68199158 42.59441757]
[60.48720932 28.93335533]
[54.09255219 15.36470318]
[41.21040726 6.17987871]
[42.78362274 -8.63140965]
[36.38896179 -22.20006371]
[29.99430466 -35.76871490]
[12.20821381 -38.52895355]
[-0.33869138 -51.21661758]
[-2.85613441 -68.72518921]
[5.46065807 -84.16062164]
[-1.71929038 -97.33060455]
[-8.89923859 -110.50057983]
[-16.07918739 -123.67056274]
[-23.25913429 -136.84054565]
[-38.56158829 -136.53480530]
[-52.24813461 -143.38586426]
[-61.17370605 -155.81939697]
[-63.28726578 -170.97827148]
[-58.10313797 -185.37908936]
[-46.81259918 -195.71263123]
[-32.01012802 -199.60435486]
[-17.09722710 -196.15994263]
[-5.50077009 -186.17091370]
[0.11446129 -171.93266296]
[-1.54187167 -156.71704102]
[-10.08915615 -144.02049255]
[-2.90920782 -130.85050964]
[4.27074051 -117.68052673]
[11.45068836 -104.51055145]
[18.63063622 -91.34056854]
[30.94542694 -91.55860901]
[42.22482681 -86.43270111]
[50.25324631 -76.90101624]
[53.42426682 -64.77366638]
[51.06177521 -52.38913727]
[43.56295776 -42.16337585]
[49.95761490 -28.59472084]
[56.35227585 -15.02606773]
[68.77703094 -6.81176472]
[67.66120148 8.97004414]
[74.05586243 22.53869820]
[79.84548950 27.32274818]
[80.43252563 36.60084534]
[86.42609406 50.35137558]
[92.41967010 64.10190582]
[98.41324615 77.85243225]
[104.40682220 91.60296631]
[108.87864685 94.66120148]
[111.23706055 100.05327606]
[110.32218933 106.34083557]
[115.49845123 120.41941071]
[120.67470551 134.49798584]
[125.85096741 148.57656860]
[140.63636780 152.90069580]
[149.93188477 164.96083069]
[150.33874512 180.00404358]
[141.91040039 192.25563049]
[147.08666992 206.33419800]
[152.26292419 220.41278076]
[157.43917847 234.49136353]
[175.13343811 233.27032471]
[192.36564636 237.39991760]
[207.55667114 246.49171448]
[219.31739807 259.70303345]
[226.57582092 275.81497192]
[228.67468262 293.34497070]
[225.43103027 310.68313599]
[217.15209961 326.24014282]
[204.60620117 338.59286499]
[211.78614807 351.76284790]
[218.96609497 364.93283081]
[233.23762512 373.01092529]
[233.10697937 389.40954590]
[218.70854187 397.25921631]
[204.85420227 388.48486328]
[205.79611206 372.11279297]
[198.61616516 358.94281006]
[191.43621826 345.77282715]
[179.31723022 349.05078125]
[166.76960754 349.64965820]
[154.37884521 347.53829956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 85]
[11 84]
[12 83]
[13 82]
[17 78]
[18 77]
[19 76]
[20 75]
[21 72]
[22 71]
[23 70]
[24 69]
[25 68]
[26 66]
[27 65]
[29 63]
[30 62]
[31 61]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
