%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACAGGACACAGCUGGGUUCUGAAGCUUCUGAGUUCUGCAGCCUCACCUCUGAGAAAACCUCUUUGCCACCAAUACC\
) } def
/len { sequence length } bind def

/coor [
[114.42206573 122.48365784]
[126.90779114 114.17310333]
[112.32224274 110.67142487]
[96.50658417 115.92208862]
[84.34194946 104.53235626]
[69.63016510 101.60599518]
[54.91838837 98.67964172]
[40.20660782 95.75328827]
[25.49482918 92.82693481]
[10.78304958 89.90058136]
[-4.26142836 94.79692841]
[-15.23467731 84.72533417]
[-29.94645691 81.79897308]
[-44.65823364 78.87261963]
[-51.45210266 80.75100708]
[-57.21151352 78.98527527]
[-60.38903809 75.09599304]
[-74.82586670 71.02438354]
[-89.26269531 66.95277405]
[-103.69952393 62.88116837]
[-118.13635254 58.80956268]
[-133.88906860 63.36850739]
[-145.52449036 51.81217194]
[-141.07310486 36.02872467]
[-125.11410522 32.25482559]
[-114.06474304 44.37273407]
[-99.62791443 48.44434357]
[-85.19108582 52.51594925]
[-70.75425720 56.58755493]
[-56.31742859 60.65916061]
[-41.73188019 64.16084290]
[-27.02010155 67.08719635]
[-12.30832195 70.01354980]
[1.68387115 64.90789032]
[13.70940495 75.18879700]
[28.42118454 78.11515808]
[43.13296127 81.04151154]
[57.84474182 83.96786499]
[72.55651855 86.89421844]
[87.26830292 89.82057190]
[97.48685455 83.89406586]
[109.02519989 86.42565918]
[115.82392120 96.08587646]
[130.40946960 99.58755493]
[144.92346191 95.80017853]
[155.93829346 85.61817169]
[166.95312500 75.43615723]
[177.96797180 65.25415039]
[182.31159973 49.44070816]
[198.24449158 45.55804062]
[209.37625122 57.60030365]
[204.25547791 73.17945099]
[188.14997864 76.26898193]
[177.13514709 86.45099640]
[166.12030029 96.63300323]
[155.10546875 106.81501770]
[170.06129456 107.96541595]
[184.38452148 112.42021179]
[197.35458374 119.95529175]
[208.31898499 130.19158936]
[216.72615051 142.61413574]
[222.15312195 156.59797668]
[224.32687378 171.43963623]
[223.13807678 186.39245605]
[218.64649963 200.70419312]
[211.07812500 213.65486145]
[200.81370544 224.59294128]
[188.36961365 232.96817017]
[174.37187195 238.35919189]
[159.52467346 240.49482727]
[144.57496643 239.26760864]
[130.27481079 234.73930359]
[117.34362793 227.13769531]
[106.43194580 216.84521484]
[98.08870697 204.37963867]
[92.73365021 190.36810303]
[90.63616180 175.51547241]
[91.90176392 160.56895447]
[96.46679688 146.28048706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 44]
[3 43]
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[12 33]
[13 32]
[14 31]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
