%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUGAGUGUAAAGUCCAGCAGGUGGAAGGACUAGGCCUGGGACUCCUGGGUCCCCGGCAGUGUCUGGAGGC\
) } def
/len { sequence length } bind def

/coor [
[96.30303192 232.10148621]
[87.18914795 244.01522827]
[75.35183716 253.22816467]
[61.56507874 259.13790894]
[46.73029327 261.35809326]
[31.81744385 259.74353027]
[17.80158424 254.39976501]
[5.59912825 245.67622375]
[-3.99207997 234.14329529]
[-10.34492970 220.55500793]
[-13.04404831 205.79985046]
[-11.91295528 190.84255981]
[-7.02560806 176.66110229]
[1.29844177 164.18270874]
[12.51493454 154.22326660]
[25.88700867 147.43522644]
[11.54450798 143.04287720]
[-2.79799247 138.65054321]
[-17.14049339 134.25819397]
[-31.92663956 140.48310852]
[-45.94293976 132.67779541]
[-48.43729401 116.82984161]
[-37.49624252 105.09642792]
[-21.51282501 106.47843170]
[-12.74815178 119.91569519]
[1.59434903 124.30803680]
[15.93684959 128.70037842]
[30.27935028 133.09272766]
[34.71531296 131.47528076]
[39.73945999 131.67662048]
[52.16710281 123.27699280]
[64.59474945 114.87737274]
[77.02239227 106.47775269]
[77.58091736 91.79534912]
[86.63158417 80.22078705]
[100.74609375 76.13842010]
[114.57798767 81.09460449]
[127.00563049 72.69498444]
[139.43327332 64.29535675]
[146.53414917 50.15718460]
[161.41151428 49.44065857]
[173.83915710 41.04103851]
[186.26679993 32.64141464]
[198.69445801 24.24179459]
[211.12210083 15.84217262]
[223.54974365 7.44255066]
[230.23429871 -7.53238916]
[246.57104492 -8.96151352]
[255.75415039 4.62533855]
[248.33682251 19.25117874]
[231.94935608 19.87019539]
[219.52171326 28.26981735]
[207.09407043 36.66943741]
[194.66642761 45.06906128]
[182.23878479 53.46868134]
[169.81114197 61.86830521]
[163.59916687 75.40568542]
[147.83290100 76.72300720]
[135.40525818 85.12262726]
[122.97760773 93.52224731]
[122.41908264 108.20465088]
[113.36841583 119.77921295]
[99.25390625 123.86157990]
[85.42201233 118.90539551]
[72.99436951 127.30501556]
[60.56672668 135.70463562]
[48.13908005 144.10426331]
[62.91624069 146.68022156]
[76.55703735 152.91950989]
[88.16957092 162.41418457]
[96.99458313 174.54345703]
[102.45504761 188.51426697]
[104.19395447 203.41313171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 28]
[17 27]
[18 26]
[19 25]
[30 67]
[31 66]
[32 65]
[33 64]
[37 60]
[38 59]
[39 58]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
