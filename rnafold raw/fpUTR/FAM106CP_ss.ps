%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAAUACAUAAAAUAAAUAAAUACAUAAAUAAAAUAGAUAUGUAUUUAUGCAAACCAUAGAAAAAUGUUUGGCAACCAUCGCAAGAUACCUGACAAUGUGAAAUAGUUUUAUUACAACUGGCCUGACCUUCAAAGGCCUUCACAGCUCCUGCCUUC\
) } def
/len { sequence length } bind def

/coor [
[10.28358936 195.03218079]
[2.13319302 207.36332703]
[-7.56431627 218.51687622]
[-18.64085197 228.30010986]
[-30.90450096 236.54402161]
[-44.14284515 243.10624695]
[-58.12664795 247.87359619]
[-72.61381531 250.76391602]
[-87.35359192 251.72756958]
[-102.09090424 250.74826050]
[-116.57076263 247.84330750]
[-130.54269409 243.06335449]
[-143.76502991 236.49143982]
[-156.00918579 228.24165344]
[-167.06346130 218.45703125]
[-176.73684692 207.30717468]
[-184.86222839 194.98527527]
[-191.29934692 181.70474243]
[-195.93711853 167.69554138]
[-210.67364502 170.49461365]
[-225.41017151 173.29368591]
[-240.14669800 176.09275818]
[-254.88322449 178.89183044]
[-269.61975098 181.69090271]
[-284.35629272 184.48997498]
[-299.09280396 187.28904724]
[-313.82934570 190.08813477]
[-328.56585693 192.88720703]
[-343.30236816 195.68627930]
[-352.20697021 208.46696472]
[-367.19177246 211.09568787]
[-379.32135010 202.52775574]
[-394.05786133 205.32682800]
[-408.49050903 214.22262573]
[-421.03399658 202.81661987]
[-413.54614258 187.60583496]
[-396.85693359 190.59030151]
[-382.12042236 187.79122925]
[-373.97705078 175.37263489]
[-359.07199097 172.32405090]
[-346.10144043 180.94975281]
[-331.36492920 178.15068054]
[-316.62841797 175.35160828]
[-301.89187622 172.55253601]
[-287.15536499 169.75344849]
[-272.41882324 166.95437622]
[-257.68231201 164.15530396]
[-242.94577026 161.35623169]
[-228.20924377 158.55715942]
[-213.47273254 155.75808716]
[-198.73620605 152.95901489]
[-199.55235291 137.75524902]
[-198.30215454 122.57946014]
[-195.00819397 107.71121979]
[-189.73075867 93.42450714]
[-182.56665039 79.98262024]
[-173.64747620 67.63336182]
[-163.13719177 56.60445404]
[-151.22909546 47.09934998]
[-138.14225769 39.29345322]
[-124.11756134 33.33091736]
[-109.41315460 29.32195663]
[-94.29980469 27.34081841]
[-79.05583954 27.42441559]
[-63.96206284 29.57162285]
[-49.29656982 33.74330139]
[-35.32961273 39.86301422]
[-22.31863594 47.81841660]
[-10.50352669 57.46332169]
[-0.10218605 68.62039948]
[8.69348431 81.08440399]
[15.72112274 94.62599182]
[20.85090637 108.99592590]
[35.52925491 105.90624237]
[50.20759964 102.81656647]
[64.88594818 99.72689056]
[66.89445496 82.91399384]
[76.92904663 68.06831360]
[93.50589752 58.97712326]
[113.39237976 58.43081284]
[116.33689880 43.72266006]
[119.28141785 29.01450539]
[113.51953888 13.66091347]
[124.14278412 1.16776383]
[140.22285461 4.38693857]
[145.21797180 20.00682640]
[133.98957825 31.95902634]
[131.04505920 46.66717911]
[128.10052490 61.37533569]
[132.47288513 67.46898651]
[142.10839844 55.97304535]
[148.52021790 42.41249466]
[162.85868835 38.00698853]
[175.77851868 45.62786865]
[178.85906982 60.30813217]
[170.09255981 72.47974396]
[155.19393921 74.21010590]
[141.21757507 79.65628815]
[145.58992004 85.74993896]
[160.46638489 87.67109680]
[175.34284973 89.59225464]
[190.21929932 91.51341248]
[205.09576416 93.43457031]
[219.97222900 95.35572815]
[221.04052734 86.47303009]
[227.10162354 77.73259735]
[237.94583130 71.64635468]
[252.62419128 68.55667877]
[267.30252075 65.46700287]
[281.98086548 62.37731934]
[289.18948364 48.50035095]
[303.65124512 42.55134583]
[318.53784180 47.33924103]
[326.82019043 60.60333633]
[324.58770752 76.08073425]
[312.89443970 86.46348572]
[297.26159668 86.84916687]
[285.07055664 77.05566406]
[270.39221191 80.14534760]
[255.71386719 83.23502350]
[241.03552246 86.32470703]
[239.11436462 101.20117188]
[252.52622986 107.91844177]
[265.93811035 114.63571167]
[279.34997559 121.35298157]
[292.76184082 128.07025146]
[305.97860718 120.11283112]
[321.39868164 120.58699799]
[334.10159302 129.34144592]
[340.03384399 143.58264160]
[337.30249023 158.76629639]
[326.77911377 170.04734802]
[311.82168579 173.82606506]
[297.20303345 168.89665222]
[287.58795166 156.83209229]
[286.04458618 141.48211670]
[272.63269043 134.76484680]
[259.22082520 128.04757690]
[245.80895996 121.33030701]
[232.39709473 114.61303711]
[218.05107117 110.23218536]
[203.17460632 108.31103516]
[188.29815674 106.38987732]
[173.42169189 104.46871948]
[158.54522705 102.54756165]
[143.66876221 100.62640381]
[137.75927734 118.94828033]
[124.86420441 132.37417603]
[107.98776245 138.57586670]
[90.73260498 136.81944275]
[76.53393555 128.01112366]
[67.97563171 114.40523529]
[53.29727936 117.49491119]
[38.61893463 120.58459473]
[23.94058609 123.67427063]
[25.03615379 138.42207336]
[24.18655205 153.18464661]
[21.40685272 167.70655823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[32 38]
[33 37]
[73 155]
[74 154]
[75 153]
[76 152]
[80 89]
[81 88]
[82 87]
[99 146]
[100 145]
[101 144]
[102 143]
[103 142]
[104 141]
[107 121]
[108 120]
[109 119]
[110 118]
[122 140]
[123 139]
[124 138]
[125 137]
[126 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
