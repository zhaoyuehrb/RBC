%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCUUCCCCCUCCCGCGCGCCCGCCCGCCGCCUGCCGCCGCCGCCGCCGCCGCCGGAGCUCUGUAGU\
) } def
/len { sequence length } bind def

/coor [
[78.75737762 353.47927856]
[64.04615021 350.09072876]
[50.79522324 342.85778809]
[39.98790741 332.31716919]
[32.42617798 319.25106812]
[28.67116165 304.62908936]
[29.00151253 289.53625488]
[33.39271164 275.09259033]
[41.51890182 262.36987305]
[52.77706909 252.31221008]
[66.33177948 245.66598511]
[81.17718506 242.92436218]
[82.52177429 227.98475647]
[83.86636353 213.04513550]
[85.21095276 198.10552979]
[78.64566803 184.73591614]
[87.58885956 171.68487549]
[88.93344879 156.74525452]
[90.27803802 141.80564880]
[91.28707123 126.83962250]
[91.96004486 111.85472870]
[85.69047546 99.35736084]
[93.05506134 87.47230530]
[85.94469452 73.33889008]
[94.24520874 60.97156906]
[94.91818237 45.98667526]
[86.70931244 35.76301575]
[87.77449036 23.10160828]
[96.97084808 14.93221760]
[98.31543732 -0.00739694]
[91.84632111 -14.44558048]
[100.69333649 -26.42804909]
[102.03792572 -41.36766434]
[92.90147400 -54.55496216]
[97.65305328 -69.87821198]
[112.64765167 -75.58273315]
[126.38270569 -67.29250336]
[128.32185364 -51.36707306]
[116.97753906 -40.02307510]
[115.63294983 -25.08345985]
[122.19824219 -11.71385765]
[113.25505066 1.33719265]
[111.91046143 16.27680779]
[120.20284271 31.58160210]
[109.90307617 46.65964508]
[109.23010254 61.64454269]
[116.38861084 74.70613098]
[108.03995514 88.14527130]
[114.30952454 100.64263916]
[106.94493866 112.52769470]
[106.27196503 127.51259613]
[109.08050537 136.55813599]
[105.21765137 143.15023804]
[103.87306213 158.08984375]
[102.52847290 173.02946472]
[108.99758911 187.46765137]
[100.15056610 199.45011902]
[98.80597687 214.38972473]
[97.46138763 229.32934570]
[96.11679840 244.26895142]
[110.23410034 249.61726379]
[122.38425446 258.57696533]
[131.66563416 270.48321533]
[137.38951111 284.45245361]
[139.13111877 299.44812012]
[136.76123047 314.35736084]
[130.45570374 328.07388306]
[120.68244934 339.57980347]
[108.16671753 348.02130127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 60]
[13 59]
[14 58]
[15 57]
[17 55]
[18 54]
[19 53]
[20 51]
[21 50]
[23 48]
[25 46]
[26 45]
[29 43]
[30 42]
[32 40]
[33 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
