%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCUCGGCCUCUUUGCACCCGGCAGAGUGACGAGCUUCGCCGGUGUCUUCAACGAAGUCCUGUCGGUCCCUACCGGCACAUCACACACUCCUGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[106.01653290 126.92958069]
[100.54676056 140.89674377]
[95.07698059 154.86390686]
[89.60720825 168.83106995]
[89.46146393 185.78437805]
[73.13033295 190.33747864]
[64.23427582 175.90499878]
[75.64005280 163.36129761]
[81.10982513 149.39413452]
[86.57959747 135.42697144]
[92.04936981 121.45980835]
[82.47841644 133.00956726]
[67.49588776 133.73332214]
[56.85622787 123.15988159]
[57.48643875 108.17312622]
[68.97621918 98.53025055]
[83.84471130 100.50906372]
[70.34467316 93.97080231]
[56.84463120 87.43253326]
[43.34458923 80.89426422]
[29.84455109 74.35600281]
[20.57802963 73.39464569]
[16.03113937 67.39870453]
[2.74096823 60.44375229]
[-10.54920197 53.48880005]
[-26.36381531 53.94549942]
[-34.05281830 41.18899155]
[-47.34299088 34.23403931]
[-60.63315964 27.27908516]
[-73.92333221 20.32413292]
[-89.60204315 23.72377586]
[-101.94394684 13.47404861]
[-101.48139191 -2.56233454]
[-88.56921387 -12.08363438]
[-73.11252594 -7.78592300]
[-66.96837616 7.03396225]
[-53.67820740 13.98891544]
[-40.38803482 20.94386864]
[-27.09786606 27.89882088]
[-12.23385429 26.94465637]
[-3.59424901 40.19863129]
[9.69592094 47.15358353]
[22.98609161 54.10853577]
[36.38281631 60.85596085]
[49.88285828 67.39422607]
[63.38289642 73.93249512]
[76.88293457 80.47075653]
[90.38297272 87.00902557]
[105.16400909 89.56268311]
[120.07520294 87.93289948]
[134.98640442 86.30311584]
[149.89759827 84.67333221]
[157.65841675 71.36634827]
[171.60369873 65.25221252]
[186.30136108 68.48372650]
[196.15988159 79.61690521]
[211.07107544 77.98712158]
[219.43330383 73.88032532]
[226.47033691 76.54595947]
[241.42500305 75.38069916]
[254.09632874 56.98984146]
[275.87966919 53.42748260]
[293.33187866 66.51094818]
[307.81066895 62.59111786]
[322.28942871 58.67128754]
[336.76821899 54.75145721]
[351.24697876 50.83163071]
[365.72576904 46.91180038]
[380.20452881 42.99197388]
[391.38049316 30.99072266]
[407.29901123 34.93194962]
[411.58447266 50.76125336]
[399.82836914 62.19480515]
[384.12435913 57.47074890]
[369.64559937 61.39057541]
[355.16680908 65.31040192]
[340.68804932 69.23023224]
[326.20925903 73.15006256]
[311.73049927 77.06989288]
[297.25170898 80.98972321]
[295.95379639 89.44702911]
[292.12304688 97.13616943]
[286.10574341 103.31512451]
[278.46038818 107.38051605]
[269.90567017 108.92650604]
[261.25305176 107.78522491]
[253.32984924 104.04472351]
[246.89991760 98.04254150]
[242.59027100 90.33537292]
[227.63558960 91.50062561]
[212.70085144 92.89831543]
[197.78965759 94.52809906]
[190.56887817 107.52803040]
[176.91629028 113.85820007]
[161.97950745 110.90085602]
[151.52737427 99.58453369]
[136.61618042 101.21430969]
[121.70498657 102.84409332]
[106.79378510 104.47387695]
[109.77456665 110.87326050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[23 43]
[24 42]
[25 41]
[27 39]
[28 38]
[29 37]
[30 36]
[49 99]
[50 98]
[51 97]
[52 96]
[56 92]
[57 91]
[59 90]
[60 89]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
