%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCCGUAGAGGCCAGCUGGUUGCUACGCAGCAACAGGAAACAUUCCGCGCUACCGAGUACUUUCUACUCCCGACCAGGCAUUGCUCUCUCUGGAGACCCUCGGCGGUGGUUGCUGUAUUUUGACUUGGAGUAAGG\
) } def
/len { sequence length } bind def

/coor [
[130.70837402 183.44090271]
[129.34436035 168.50305176]
[127.98033142 153.56518555]
[126.61631012 138.62733459]
[125.25228882 123.68948364]
[118.21437836 121.09761810]
[97.10064697 113.32199860]
[86.37400055 123.80718231]
[75.64736176 134.29237366]
[64.92071533 144.77755737]
[60.46055222 159.95706177]
[45.95068741 163.32057190]
[35.22404861 173.80575562]
[24.49740410 184.29093933]
[13.77076149 194.77612305]
[9.86975384 210.70454407]
[-5.94867706 215.02995300]
[-17.41188431 203.30278015]
[-12.72750473 187.58689880]
[3.28557491 184.04948425]
[14.01221752 173.56430054]
[24.73885918 163.07911682]
[35.46550369 152.59393311]
[39.15842819 138.16438293]
[54.43553162 134.05091858]
[65.16217041 123.56572723]
[75.88881683 113.08054352]
[86.61545563 102.59535217]
[93.81781006 89.43761444]
[96.86965179 74.75135040]
[99.92149353 60.06509018]
[102.97333527 45.37882996]
[106.02516937 30.69256973]
[109.07701111 16.00630760]
[112.12885284 1.32004631]
[115.18069458 -13.36621475]
[98.50846100 -12.62921524]
[90.16139221 -25.40239716]
[76.27075195 -31.06368637]
[62.38011551 -36.72497177]
[48.48947906 -42.38626099]
[31.53976250 -42.76508713]
[27.21163559 -59.15726852]
[41.76506042 -67.85405731]
[54.15076447 -56.27689743]
[68.04140472 -50.61561203]
[81.93204498 -44.95432281]
[95.82267761 -39.29303360]
[110.20386505 -42.78856277]
[121.89295959 -31.59255219]
[129.09532166 -44.75028992]
[136.29766846 -57.90802765]
[143.50003052 -71.06576538]
[143.33924866 -86.88615417]
[156.23736572 -94.33518219]
[163.43971252 -107.49291992]
[170.64207458 -120.65065765]
[177.84442139 -133.80839539]
[185.04676819 -146.96614075]
[178.90481567 -154.29719543]
[175.06166077 -163.02915955]
[173.81048584 -172.46322632]
[175.23757935 -181.84838867]
[179.21658325 -190.44128418]
[185.41954041 -197.56497192]
[193.34385681 -202.66235352]
[202.35304260 -205.33967590]
[211.72785950 -205.39691162]
[220.72363281 -202.84272766]
[229.65055847 -214.89718628]
[238.57746887 -226.95166016]
[247.50439453 -239.00611877]
[249.49931335 -254.70104980]
[263.29159546 -260.32440186]
[272.21853638 -272.37887573]
[267.71734619 -287.11132812]
[272.69604492 -301.50112915]
[285.04718018 -310.09838867]
[299.91445923 -309.77807617]
[308.84136963 -321.83255005]
[317.76828003 -333.88702393]
[322.33557129 -350.21417236]
[339.28900146 -350.34521484]
[344.10809326 -334.09057617]
[329.82275391 -324.96011353]
[320.89584351 -312.90563965]
[311.96890259 -300.85116577]
[316.61126709 -286.72366333]
[311.98992920 -272.40209961]
[299.67773438 -263.44314575]
[284.27297974 -263.45196533]
[275.34606934 -251.39749146]
[273.98965454 -236.56477356]
[259.55886841 -230.07920837]
[250.63194275 -218.02473450]
[241.70501709 -205.97027588]
[232.77810669 -193.91580200]
[240.81643677 -174.65432739]
[235.75770569 -154.26963806]
[219.44360352 -140.83393860]
[198.20451355 -139.76377869]
[191.00216675 -126.60604095]
[183.79980469 -113.44830322]
[176.59745789 -100.29056549]
[169.39509583 -87.13282776]
[170.07102966 -72.25357056]
[156.65776062 -63.86341476]
[149.45541382 -50.70567703]
[142.25305176 -37.54793549]
[135.05070496 -24.39019775]
[129.86695862 -10.31437492]
[126.81511688 4.37188673]
[123.76327515 19.05814743]
[120.71143341 33.74440765]
[117.65959167 48.43067169]
[114.60774994 63.11693192]
[111.55591583 77.80319214]
[108.50407410 92.48945618]
[118.22328186 81.06417847]
[129.46112061 71.12882996]
[143.88208008 67.00138855]
[158.67478943 69.48648071]
[170.95539856 78.09965515]
[178.32978821 91.16175079]
[179.36030579 106.12631226]
[173.84606934 120.07597351]
[162.86206055 130.29124451]
[148.54876709 134.78071594]
[140.19013977 122.32546234]
[141.55416870 137.26332092]
[142.91818237 152.20117188]
[144.28221130 167.13902283]
[145.64624023 182.07687378]
[157.00527954 193.40611267]
[155.08686829 209.33404541]
[141.36260986 217.64213562]
[126.36060333 211.95712280]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 133]
[2 132]
[3 131]
[4 130]
[5 129]
[7 28]
[8 27]
[9 26]
[10 25]
[12 23]
[13 22]
[14 21]
[15 20]
[29 118]
[30 117]
[31 116]
[32 115]
[33 114]
[34 113]
[35 112]
[36 111]
[38 48]
[39 47]
[40 46]
[41 45]
[50 110]
[51 109]
[52 108]
[53 107]
[55 105]
[56 104]
[57 103]
[58 102]
[59 101]
[69 97]
[70 96]
[71 95]
[72 94]
[74 92]
[75 91]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
