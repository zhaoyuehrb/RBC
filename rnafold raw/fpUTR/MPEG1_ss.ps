%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUGUCAUUAAAUUAGCUUAAAGAGGAACUUGUAGCUUUUAGAGAACUCAUGAGUUUUCCGCUUCAUCAUCUGCUUCUGUUUUCUCCAUCUUAGUUUGCCCAAAGCUUGCUGGCCGCUGUGUAGGGCUGGUGAGUGGCUGGGGCUGUCUGAGCC\
) } def
/len { sequence length } bind def

/coor [
[151.80815125 148.61592102]
[154.14016724 163.43353271]
[152.10578918 178.29493713]
[145.87742615 191.94071960]
[135.98287964 203.21449280]
[123.26065826 211.16088867]
[108.78887939 215.10647583]
[93.79393768 214.71691895]
[79.54655457 210.02520752]
[67.25410461 201.42895508]
[57.95829010 189.65661621]
[52.44687271 175.70584106]
[51.18690491 160.75885010]
[54.28516388 146.08230591]
[61.47909164 132.91996765]
[72.15904999 122.38722992]
[85.42366791 115.37538910]
[71.91845703 121.90295410]
[58.41323853 128.43051147]
[44.90802002 134.95808411]
[39.62532806 149.61178589]
[25.83613205 156.03927612]
[11.89862347 150.91273499]
[-1.60659385 157.44030762]
[-15.11181068 163.96786499]
[-21.72546959 178.58425903]
[-37.31135941 182.38684082]
[-49.91331863 172.45858765]
[-49.86420441 156.41561890]
[-37.20169067 146.56471252]
[-21.63937569 150.46264648]
[-8.13415909 143.93508911]
[5.37105751 137.40751648]
[10.01255322 123.30106354]
[23.61577606 116.48879242]
[38.38045502 121.45286560]
[51.88566971 114.92530060]
[65.39089203 108.39773560]
[78.89610291 101.87017059]
[81.18516541 94.72802734]
[66.90096283 90.14966583]
[71.47956085 75.86553192]
[85.76329041 80.44374847]
[88.05235291 73.30160522]
[80.85763550 60.13969040]
[73.66291046 46.97777557]
[66.46819305 33.81586075]
[59.27347183 20.65394592]
[44.37394333 16.11061478]
[37.26496887 2.66007090]
[41.68816376 -11.51635170]
[34.49344254 -24.67826653]
[21.08503723 -33.07619858]
[21.76960373 -47.95506287]
[14.57488251 -61.11697769]
[7.38016129 -74.27889252]
[0.18543990 -87.44080353]
[-14.73577213 -84.86473083]
[-29.68456459 -87.27560425]
[-43.03940582 -94.41191864]
[-53.35165787 -105.49957275]
[-59.50273132 -119.33586884]
[-60.82540131 -134.41993713]
[-57.17618942 -149.11558533]
[-48.95094299 -161.82873535]
[-37.04187012 -171.18034363]
[-22.74077988 -176.15603638]
[-7.59894753 -176.21609497]
[6.74115610 -171.35397339]
[18.72402191 -162.09710693]
[27.04983902 -149.44960022]
[30.81548500 -134.78335571]
[29.61248970 -119.68926239]
[23.57134819 -105.80461884]
[13.34735394 -94.63552856]
[20.54207611 -81.47360992]
[27.73679733 -68.31169891]
[34.93151855 -55.14978409]
[47.82530975 -47.69327927]
[47.65535736 -31.87298775]
[54.85007858 -18.71107292]
[69.17098236 -14.78077030]
[76.65494537 -1.53520906]
[72.43538666 13.45922470]
[79.63010406 26.62113953]
[86.82482910 39.78305435]
[94.01954651 52.94496918]
[101.21427155 66.10688019]
[110.31401062 73.74980164]
[114.71173096 82.98577118]
[114.56936646 91.67213440]
[110.89015961 98.01037598]
[125.56029510 101.13883209]
[140.23042297 104.26729584]
[154.90055847 107.39575958]
[169.57067871 110.52421570]
[181.11299133 100.32219696]
[196.27218628 98.88960266]
[209.21508789 106.56717682]
[215.08505249 120.23033142]
[229.75517273 123.35878754]
[244.42530823 126.48725128]
[259.09542847 129.61570740]
[272.15863037 117.10855865]
[289.95355225 114.92253113]
[305.38372803 123.74071503]
[312.40835571 139.89515686]
[327.19192505 142.43417358]
[341.97546387 144.97317505]
[356.75903320 147.51219177]
[371.54257202 150.05120850]
[386.32614136 152.59020996]
[401.10968018 155.12922668]
[415.89321899 157.66822815]
[430.67678833 160.20724487]
[445.46032715 162.74624634]
[460.24389648 165.28526306]
[469.28884888 163.64918518]
[475.29660034 168.02581787]
[490.02639771 170.86012268]
[505.33639526 164.98342896]
[517.90875244 175.51283264]
[514.81005859 191.61656189]
[499.22802734 196.72850037]
[487.19207764 185.58990479]
[472.46228027 182.75559998]
[457.70489502 180.06881714]
[442.92132568 177.52980042]
[428.13778687 174.99079895]
[413.35421753 172.45178223]
[398.57067871 169.91278076]
[383.78710938 167.37376404]
[369.00357056 164.83474731]
[354.22000122 162.29574585]
[339.43646240 159.75672913]
[324.65289307 157.21772766]
[309.86935425 154.67871094]
[302.48184204 164.39096069]
[291.59155273 170.05455017]
[279.25338745 170.53112793]
[267.82540894 165.66778564]
[259.51812744 156.33810425]
[255.96697998 144.28584290]
[241.29684448 141.15737915]
[226.62670898 138.02891541]
[211.95658875 134.90045166]
[201.02336121 144.98027039]
[186.07435608 146.70977783]
[172.81840515 139.21755981]
[166.44223022 125.19435120]
[151.77209473 122.06588745]
[137.10195923 118.93742371]
[122.43183136 115.80896759]
[107.76170349 112.68050385]
[122.30969238 116.33507538]
[135.18872070 124.02471924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 39]
[18 38]
[19 37]
[20 36]
[23 33]
[24 32]
[25 31]
[44 88]
[45 87]
[46 86]
[47 85]
[48 84]
[51 81]
[52 80]
[54 78]
[55 77]
[56 76]
[57 75]
[92 154]
[93 153]
[94 152]
[95 151]
[96 150]
[100 146]
[101 145]
[102 144]
[103 143]
[107 137]
[108 136]
[109 135]
[110 134]
[111 133]
[112 132]
[113 131]
[114 130]
[115 129]
[116 128]
[117 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
