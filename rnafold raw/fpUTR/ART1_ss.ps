%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAUGGUGGAGAUCAGCAGCAGCUUCCCCACCCAGGACAAGGCCUAGAUGAGGAAACUGAGACCCAAAAAGAGACAGCAACUGGCCCAGGGUCACCAGC\
) } def
/len { sequence length } bind def

/coor [
[70.77140045 111.17656708]
[55.88509369 113.01988983]
[40.99878693 114.86321259]
[26.11247826 116.70653534]
[14.28043938 135.65223694]
[-7.32574892 140.18132019]
[-25.33893585 127.87666321]
[-39.63306427 132.42395020]
[-53.92719650 136.97123718]
[-68.22132874 141.51853943]
[-82.51545715 146.06582642]
[-93.32063293 157.62257385]
[-107.79457092 154.10768127]
[-122.08869934 158.65498352]
[-127.01967621 163.47459412]
[-132.78462219 164.74919128]
[-137.40467834 163.01274109]
[-151.95162964 166.67144775]
[-166.49858093 170.33015442]
[-177.88864136 182.12840271]
[-193.73365784 177.90141296]
[-197.73364258 161.99757385]
[-185.77374268 150.77737427]
[-170.15728760 155.78320312]
[-155.61033630 152.12449646]
[-141.06336975 148.46578979]
[-126.63599396 144.36085510]
[-112.34186554 139.81355286]
[-102.55908966 128.58204651]
[-87.06274414 131.77169800]
[-72.76861572 127.22440338]
[-58.47448730 122.67710876]
[-44.18035507 118.12982178]
[-29.88622665 113.58253479]
[-28.95938683 105.08716583]
[-25.47356606 97.24716187]
[-19.74138069 90.81697845]
[-12.29267025 86.42232513]
[-3.82557845 84.49933624]
[4.85887480 85.25131989]
[12.93256855 88.62751007]
[19.61924934 94.32592010]
[24.26915359 101.82022858]
[39.15546036 99.97690582]
[54.04176712 98.13358307]
[68.92807770 96.29026031]
[70.57197571 89.35961151]
[73.74060822 82.98027802]
[78.26981354 77.48277283]
[83.92491150 73.15194702]
[90.41289520 70.21218109]
[97.39762115 68.81580353]
[104.51717377 69.03515625]
[111.40268707 70.85887146]
[117.69739532 74.19246674]
[123.07515717 78.86321259]
[127.25733948 84.62911224]
[130.02723694 91.19141388]
[131.24136353 98.21010590]
[145.98596191 100.96635437]
[160.73056030 103.72259521]
[177.84912109 97.16064453]
[190.79832458 108.89393616]
[205.62080383 111.19480896]
[220.44329834 113.49568176]
[235.26577759 115.79656219]
[250.08825684 118.09743500]
[258.03353882 105.16885376]
[270.29031372 96.29109192]
[284.97253418 92.79174805]
[299.83569336 95.17378235]
[312.61981201 103.04346466]
[321.39303589 115.17505646]
[324.84378052 129.70164490]
[339.66625977 132.00251770]
[351.31652832 121.57154083]
[366.94763184 121.12126923]
[379.17904663 130.86431885]
[382.23544312 146.20030212]
[374.67373657 159.88803101]
[360.06427002 165.46461487]
[345.30523682 160.29692078]
[337.36538696 146.82499695]
[322.54290771 144.52412415]
[314.85079956 157.32101440]
[302.81265259 166.22207642]
[288.24444580 169.84590149]
[273.35861206 167.61003113]
[260.42810059 159.82440186]
[251.43943787 147.64874268]
[247.78738403 132.91992188]
[232.96490479 130.61903381]
[218.14241028 128.31816101]
[203.31993103 126.01728821]
[188.49745178 123.71641541]
[178.44441223 130.63766479]
[165.98234558 128.72253418]
[157.97431946 118.46719360]
[143.22972107 115.71094513]
[128.48512268 112.95470428]
[111.04668427 129.27793884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[13 28]
[14 27]
[17 26]
[18 25]
[19 24]
[59 100]
[60 99]
[61 98]
[63 95]
[64 94]
[65 93]
[66 92]
[67 91]
[74 84]
[75 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
