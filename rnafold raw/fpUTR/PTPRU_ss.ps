%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCCAGUCCCGCUCCGCGCCGCGCCGCUCCGCUCCGGCUCGGGCUCCGGCUCGCCUCGGGCUGGGCUCGGGCUCCGGGGGCGGCGUCCCCCGCGCCGGGCCCCGGGACGGGCGGCGACGCUCCAACC\
) } def
/len { sequence length } bind def

/coor [
[163.27441406 321.80996704]
[152.22087097 311.82656860]
[155.68901062 296.39016724]
[151.39982605 282.01647949]
[147.11064148 267.64279175]
[142.82145691 253.26910400]
[131.76791382 243.28569031]
[135.23605347 227.84928894]
[130.94686890 213.47560120]
[126.65767670 199.10191345]
[122.36849213 184.72822571]
[118.07930756 170.35453796]
[113.27201843 156.14573669]
[107.95294189 142.12049866]
[102.63387299 128.09524536]
[97.31479645 114.07000732]
[86.60688019 105.07933807]
[88.65995789 91.24906921]
[83.34088135 77.22382355]
[78.02181244 63.19857788]
[72.70273590 49.17333603]
[54.26013947 36.53834534]
[58.00815964 15.25969601]
[51.36028290 1.81329226]
[44.71240997 -11.63311195]
[38.06453705 -25.07951546]
[31.41666412 -38.52592087]
[24.76879120 -51.97232437]
[18.12091827 -65.41873169]
[11.47304535 -78.86513519]
[4.82517242 -92.31153870]
[-1.82270086 -105.75794220]
[-14.42984200 -106.23635864]
[-25.55397606 -112.03263092]
[-33.08171844 -121.97552490]
[-35.61303329 -134.11288452]
[-32.72129440 -146.09483337]
[-25.02374268 -155.62863159]
[-31.01421165 -169.38050842]
[-37.00468063 -183.13238525]
[-42.99514771 -196.88427734]
[-48.98561859 -210.63615417]
[-54.97608566 -224.38804626]
[-60.96655655 -238.13992310]
[-66.95702362 -251.89179993]
[-72.94749451 -265.64367676]
[-79.30752563 -272.34417725]
[-78.91210175 -279.80099487]
[-84.56851959 -293.69360352]
[-90.22494507 -307.58624268]
[-95.88137054 -321.47885132]
[-101.53778839 -335.37145996]
[-107.19421387 -349.26409912]
[-112.85063934 -363.15670776]
[-118.50705719 -377.04934692]
[-130.07987976 -389.43908691]
[-121.37799072 -403.98947144]
[-104.98732758 -399.65560913]
[-104.61444092 -382.70574951]
[-98.95801544 -368.81314087]
[-93.30159760 -354.92050171]
[-87.64517212 -341.02789307]
[-81.98874664 -327.13528442]
[-76.33232880 -313.24264526]
[-70.67590332 -299.35003662]
[-65.01947784 -285.45742798]
[-59.19561005 -271.63415527]
[-53.20514297 -257.88226318]
[-47.21467209 -244.13038635]
[-41.22420502 -230.37850952]
[-35.23373413 -216.62663269]
[-29.24326706 -202.87474060]
[-23.25279808 -189.12286377]
[-17.26232910 -175.37097168]
[-11.27186012 -161.61909485]
[6.05943918 -158.67636108]
[18.31794930 -145.85961914]
[20.52497292 -128.10505676]
[11.62370300 -112.40581512]
[18.27157593 -98.95941162]
[24.91944885 -85.51300812]
[31.56732178 -72.06660461]
[38.21519470 -58.62019730]
[44.86306763 -45.17379379]
[51.51094055 -31.72738838]
[58.15881729 -18.28098488]
[64.80668640 -4.83458090]
[71.45455933 8.61182308]
[79.50374603 9.51800442]
[86.59138489 13.63134766]
[91.48323822 20.32356071]
[93.29236603 28.51029396]
[91.63919067 36.82654953]
[86.72798157 43.85426331]
[92.04705811 57.87950516]
[97.36612701 71.90474701]
[102.68520355 85.92999268]
[113.39311981 94.92066193]
[111.34004211 108.75093079]
[116.65911865 122.77617645]
[121.97818756 136.80142212]
[127.29726410 150.82666016]
[131.50720215 154.24736023]
[133.69477844 158.53125000]
[133.87672424 162.73471069]
[132.45298767 166.06535339]
[136.74217224 180.43904114]
[141.03135681 194.81272888]
[145.32054138 209.18641663]
[149.60974121 223.56010437]
[160.97006226 234.57160950]
[157.19514465 248.97991943]
[161.48432922 263.35360718]
[165.77351379 277.72729492]
[170.06269836 292.10098267]
[181.42303467 303.11248779]
[177.64810181 317.52078247]
[192.75607300 319.43630981]
[205.77542114 327.33670044]
[214.45045471 339.85324097]
[217.27818298 354.81732178]
[213.76869202 369.63635254]
[204.52999878 381.74282837]
[191.16278076 389.03921509]
[175.98298645 390.26138306]
[161.62060547 385.19760132]
[150.56401062 374.72518921]
[144.72882080 360.65856934]
[145.12600708 345.43481445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 117]
[3 115]
[4 114]
[5 113]
[6 112]
[8 110]
[9 109]
[10 108]
[11 107]
[12 106]
[13 102]
[14 101]
[15 100]
[16 99]
[18 97]
[19 96]
[20 95]
[21 94]
[23 88]
[24 87]
[25 86]
[26 85]
[27 84]
[28 83]
[29 82]
[30 81]
[31 80]
[32 79]
[38 75]
[39 74]
[40 73]
[41 72]
[42 71]
[43 70]
[44 69]
[45 68]
[46 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
