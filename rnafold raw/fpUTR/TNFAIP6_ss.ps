%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCACAUUUCAGCCACUGCUCUGAGAAUUUGUGAGCAGCCCCUAACAGGCUGUUACUUCACUACAACUGACGAU\
) } def
/len { sequence length } bind def

/coor [
[90.40335083 199.51512146]
[99.63301849 186.39289856]
[98.39432526 171.44413757]
[97.15563202 156.49536133]
[95.91694641 141.54660034]
[80.45027924 136.88630676]
[67.91065216 126.70327759]
[60.17554855 112.52215576]
[45.29074097 114.37754059]
[30.40593338 116.23293304]
[15.52112389 118.08832550]
[0.63631552 119.94371033]
[-14.24849319 121.79910278]
[-21.62819099 135.44900513]
[-35.63621521 142.12394714]
[-50.88619614 139.25727844]
[-61.51420212 127.95130157]
[-63.43354797 112.55339050]
[-55.90621185 98.98435211]
[-41.82659912 92.46176147]
[-26.60861588 95.49369049]
[-16.10388184 106.91429138]
[-1.21907389 105.05890656]
[13.66573429 103.20351410]
[28.55054283 101.34812164]
[43.43535233 99.49273682]
[58.32015991 97.63734436]
[62.82055283 81.01368713]
[73.64838409 67.62124634]
[88.96090698 59.73923111]
[106.15213013 58.70905304]
[122.29634094 64.70603180]
[132.45556641 53.67017365]
[142.61479187 42.63431549]
[152.77401733 31.59845734]
[161.98721313 19.76134872]
[170.19142151 7.20385170]
[178.39564514 -5.35364532]
[186.59986877 -17.91114235]
[194.80409241 -30.46863937]
[203.00831604 -43.02613831]
[198.30468750 -57.93955231]
[204.33538818 -72.36746216]
[218.25291443 -79.49745941]
[233.48580933 -75.96296692]
[242.84159851 -63.43286514]
[241.90274048 -47.82349014]
[231.11254883 -36.50510788]
[215.56581116 -34.82191467]
[207.36158752 -22.26441765]
[199.15736389 -9.70692062]
[190.95315552 2.85057688]
[182.74893188 15.40807438]
[174.54470825 27.96557045]
[175.21992493 30.97596359]
[174.56175232 34.46643066]
[172.36776733 37.85371017]
[168.68188477 40.48897171]
[163.80987549 41.75767899]
[153.65065002 52.79353714]
[143.49142456 63.82939911]
[133.33219910 74.86525726]
[138.96652222 85.01995087]
[141.58546448 96.33386230]
[140.98637390 107.93146515]
[137.21562195 118.91530609]
[130.56498718 128.43540955]
[121.54911804 135.75509644]
[110.86571503 140.30790710]
[112.10440063 155.25666809]
[113.34309387 170.20544434]
[114.58177948 185.15420532]
[125.84542084 196.57830811]
[123.79347229 212.48959351]
[110.00002289 220.68229675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 69]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[32 62]
[33 61]
[34 60]
[35 59]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
