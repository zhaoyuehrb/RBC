%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGACAACAAAACAGAUUACUUUGAAGGGACUAGAAGGAGGACACAGGGUCCUGGAGGAAGGCAGCUGGCAAGUUACAGAGCAGAAAGACUUUGCACCUCUGGCUCCAGGGAGCUCACAGGCAGGGGCUGGUCCAGCCCAGAGGCG\
) } def
/len { sequence length } bind def

/coor [
[74.23076630 184.96919250]
[73.91021729 169.97262573]
[63.01129913 159.88554382]
[62.47258759 144.68145752]
[73.12673950 133.31805420]
[63.28182220 122.00091553]
[48.47409821 119.60691833]
[33.66637039 117.21292114]
[23.92327881 129.00357056]
[9.68069458 134.29937744]
[-5.20145988 131.77195740]
[-16.74314880 122.19879913]
[-21.90861511 108.22798920]
[-36.71634293 105.83399200]
[-51.52406693 103.43998718]
[-61.26716232 115.23063660]
[-75.50974274 120.52645111]
[-90.39189911 117.99902344]
[-101.93358612 108.42586517]
[-107.09905243 94.45505524]
[-121.90678406 92.06105804]
[-136.71450806 89.66706085]
[-151.52223206 87.27306366]
[-163.32342529 99.34301758]
[-179.82562256 102.00029755]
[-194.52474976 94.39723969]
[-201.74575806 79.69115448]
[-216.60127258 77.61414337]
[-231.45677185 75.53712463]
[-246.31227112 73.46011353]
[-261.16778564 71.38309479]
[-276.02328491 69.30608368]
[-285.51217651 81.30224609]
[-299.63833618 86.90120697]
[-314.57110596 84.69239044]
[-326.31475830 75.36805725]
[-331.77758789 61.51082611]
[-345.39785767 69.98828888]
[-360.46914673 64.48955536]
[-365.43002319 49.23277664]
[-356.47494507 35.92165375]
[-340.47348022 34.76733780]
[-329.70056152 46.65532303]
[-320.64663696 34.82774353]
[-306.79595947 29.08186340]
[-291.83001709 31.05331993]
[-279.78115845 40.31192780]
[-273.94625854 54.45057678]
[-259.09075928 56.52759171]
[-244.23526001 58.60460663]
[-229.37976074 60.68162155]
[-214.52424622 62.75863647]
[-199.66874695 64.83564758]
[-191.30238342 54.38140488]
[-178.75564575 49.40309906]
[-165.28280640 51.30754852]
[-154.43589783 59.70114899]
[-149.12823486 72.46533203]
[-134.32051086 74.85933685]
[-119.51277924 77.25333405]
[-104.70505524 79.64733124]
[-95.40042114 68.01593018]
[-81.43013763 62.56735229]
[-66.50972748 64.85817719]
[-54.66147614 74.37215424]
[-49.13006973 88.63226318]
[-34.32234192 91.02626038]
[-19.51461601 93.42025757]
[-10.20998383 81.78886414]
[3.76030350 76.34027863]
[18.68070984 78.63110352]
[30.52896118 88.14508057]
[36.06036758 102.40518951]
[50.86809540 104.79919434]
[65.67581940 107.19319153]
[66.06642914 94.81237030]
[70.68782806 83.60475922]
[78.77773285 74.93344116]
[89.16562653 69.78172302]
[100.43959808 68.64323425]
[111.13741302 71.47963715]
[119.85013580 59.26945877]
[128.56285095 47.05927658]
[137.27557373 34.84909821]
[145.98829651 22.63891602]
[144.77207947 6.64202881]
[156.61830139 -4.17678070]
[172.43954468 -1.51824868]
[180.09910583 12.57822704]
[173.72123718 27.29903603]
[158.19847107 31.35163498]
[149.48574829 43.56181717]
[140.77304077 55.77199554]
[132.06031799 67.98217773]
[123.34759521 80.19235992]
[126.83692932 85.26120758]
[129.24218750 90.92543030]
[144.22077942 90.12438202]
[159.19937134 89.32334137]
[172.56665039 80.86010742]
[185.68896484 87.90669250]
[200.66755676 87.10564423]
[215.63673401 86.14459229]
[230.59480286 85.02364349]
[245.55285645 83.90269470]
[260.51089478 82.78173828]
[273.74835205 73.10173798]
[288.63885498 79.97230530]
[289.86434937 96.32559967]
[276.16418457 105.33874512]
[261.63186646 97.73979950]
[246.67379761 98.86074829]
[231.71574402 99.98169708]
[216.75769043 101.10265350]
[210.27670288 104.76491547]
[201.46859741 102.08424377]
[186.49000549 102.88529205]
[174.19409180 111.29122162]
[160.00041199 104.30193329]
[145.02182007 105.10298157]
[130.04322815 105.90402222]
[129.10108948 109.51732635]
[127.72611237 112.98906708]
[125.93873596 116.26760864]
[123.76554871 119.30418396]
[132.73721313 131.32539368]
[141.70886230 143.34658813]
[150.68052673 155.36779785]
[159.65217590 167.38900757]
[168.62384033 179.41020203]
[182.94300842 188.48751831]
[178.18438721 204.75994873]
[161.23057556 204.69194031]
[156.60263062 188.38186646]
[147.63098145 176.36065674]
[138.65931702 164.33946228]
[129.68766785 152.31825256]
[120.71600342 140.29704285]
[111.74434662 128.27584839]
[100.79108429 132.83430481]
[88.12331390 132.99751282]
[99.25329590 143.89527893]
[99.36473846 159.10850525]
[88.90679169 169.65206909]
[89.22734070 184.64865112]
[91.82921600 203.85490417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 145]
[2 144]
[5 141]
[6 75]
[7 74]
[8 73]
[13 68]
[14 67]
[15 66]
[20 61]
[21 60]
[22 59]
[23 58]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[32 48]
[37 43]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[97 121]
[98 120]
[99 119]
[101 117]
[102 116]
[103 114]
[104 113]
[105 112]
[106 111]
[125 139]
[126 138]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
