%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGUCUCUCUUCGGUGCCACCGGCGGGCGAGGCCGGAUUAAUCACCGCUGCUUCGGCCGCCCAUGUGUCCUG\
) } def
/len { sequence length } bind def

/coor [
[58.64906693 231.92263794]
[55.72257233 246.86772156]
[46.96506119 259.32669067]
[33.89382553 267.14096069]
[18.77353477 268.95663452]
[4.22387123 264.45916748]
[-7.23434687 254.42776489]
[-13.61591434 240.60041809]
[-13.81518745 225.37280273]
[-7.79763985 211.38320923]
[3.39415169 201.05538940]
[17.82114220 196.17872620]
[32.98376846 197.59812927]
[40.29919052 184.50291443]
[47.61461639 171.40769958]
[48.14174271 163.80589294]
[55.52861786 157.92152405]
[55.61308289 143.02716064]
[69.43714905 135.33264160]
[77.30175781 122.55970001]
[85.16636658 109.78675842]
[84.48545074 91.33305359]
[100.55632782 82.23745728]
[107.30938721 68.84357452]
[114.06244659 55.44968414]
[120.81549835 42.05579758]
[127.56855774 28.66190910]
[126.87261200 12.85601616]
[139.51130676 4.97486734]
[146.26437378 -8.41902065]
[153.01742554 -21.81290817]
[159.77047729 -35.20679474]
[166.52352905 -48.60068512]
[173.27659607 -61.99457169]
[179.45510864 -75.66300201]
[185.04795837 -89.58133698]
[190.64080811 -103.49967194]
[182.27943420 -116.57128906]
[183.23185730 -132.05909729]
[193.13183594 -144.00773621]
[208.17263794 -147.82270813]
[222.57075500 -142.03706360]
[230.78984070 -128.87551880]
[229.66946411 -113.39894104]
[219.64044189 -101.55840302]
[204.55914307 -97.90682220]
[198.96629333 -83.98848724]
[193.37344360 -70.07015228]
[194.52928162 -65.14889526]
[192.38084412 -59.47240829]
[186.67048645 -55.24151611]
[179.91741943 -41.84762955]
[173.16436768 -28.45374107]
[166.41131592 -15.05985260]
[159.65824890 -1.66596437]
[152.90519714 11.72792339]
[154.08416748 26.57579613]
[140.96244812 35.41496277]
[134.20938110 48.80885315]
[127.45632935 62.20273972]
[120.70327759 75.59662628]
[113.95021820 88.99051666]
[117.71535492 98.59157562]
[115.51454926 108.66694641]
[108.08897400 115.82358551]
[97.93930817 117.65136719]
[90.07469177 130.42430115]
[82.21008301 143.19725037]
[81.56309509 159.00521851]
[68.30155182 165.78613281]
[60.70982742 178.72312927]
[53.39440155 191.81834412]
[46.07897949 204.91354370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 73]
[14 72]
[15 71]
[17 70]
[19 68]
[20 67]
[21 66]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[29 56]
[30 55]
[31 54]
[32 53]
[33 52]
[34 51]
[35 48]
[36 47]
[37 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
