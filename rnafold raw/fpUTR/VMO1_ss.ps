%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCCUUCCGCAAUCGGAGCCCUCACAGAGGCCAAACUGAUAUAAAUCUGCUUAGGAGGCCUGAUUCACAGACGCUACAGG\
) } def
/len { sequence length } bind def

/coor [
[215.79936218 237.20837402]
[205.91807556 225.92298889]
[196.03677368 214.63758850]
[186.15548706 203.35220337]
[176.27420044 192.06680298]
[166.18110657 180.97042847]
[155.87983704 170.06704712]
[145.57856750 159.16365051]
[130.72904968 158.99891663]
[120.12677002 148.08807373]
[120.40024567 132.51364136]
[110.09897614 121.61026001]
[99.79770660 110.70687103]
[88.14647675 101.25971222]
[75.34946442 93.43434143]
[62.55245209 85.60897064]
[49.75543976 77.78359222]
[36.95842743 69.95822144]
[16.98082733 70.60544586]
[8.00212288 53.65176392]
[-7.80774355 54.25068283]
[-15.61116886 41.56384659]
[-28.96335411 34.72870636]
[-42.31554031 27.89356804]
[-55.66772842 21.05842781]
[-72.52203369 19.22303963]
[-75.42411041 2.51931953]
[-60.17655182 -4.89339256]
[-48.83258820 7.70624256]
[-35.48040009 14.54138184]
[-22.12821579 21.37652016]
[-8.77602959 28.21166039]
[6.07879877 27.12384605]
[14.83726215 40.29957962]
[24.53813171 36.21916962]
[35.07541656 38.33105469]
[42.76719284 46.15206146]
[44.78379822 57.16120911]
[57.58081055 64.98657990]
[70.37782288 72.81195068]
[83.17483521 80.63732910]
[95.97184753 88.46269989]
[94.21089935 73.56642151]
[102.17124176 60.85292816]
[116.34084320 55.93130112]
[130.46820068 60.97291946]
[138.32043457 73.75347137]
[136.43321228 88.63427734]
[125.63916016 99.05005646]
[110.70109558 100.40560150]
[121.00236511 111.30899048]
[131.30363464 122.21237183]
[146.86849976 122.82311249]
[157.16012573 134.02743530]
[156.48196411 148.86238098]
[166.78323364 159.76577759]
[177.08450317 170.66915894]
[185.47108459 174.89746094]
[187.55958557 182.18551636]
[197.44088745 193.47091675]
[207.32217407 204.75630188]
[217.20346069 216.04168701]
[227.08476257 227.32708740]
[240.78684998 220.96867371]
[255.72547913 218.72950745]
[270.68966675 220.79112244]
[284.46627808 226.98637390]
[295.93856812 236.81303406]
[304.17648315 249.47453308]
[308.51223755 263.94442749]
[308.59436035 279.04971313]
[304.41613770 293.56588745]
[296.31634521 306.31619263]
[284.95156860 316.26699829]
[271.24310303 322.61163330]
[256.30221558 324.83578491]
[241.34011841 322.75915527]
[227.56971741 316.55004883]
[216.10731506 306.71188354]
[207.88212585 294.04211426]
[203.56091309 279.56787109]
[203.49397278 264.46249390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[5 59]
[6 57]
[7 56]
[8 55]
[11 52]
[12 51]
[13 50]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[20 34]
[22 32]
[23 31]
[24 30]
[25 29]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
