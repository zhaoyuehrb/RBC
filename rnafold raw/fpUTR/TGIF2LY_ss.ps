%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACUCUGUUAGCAAAGCUGUUUGUCUUUCUCGGAAACAACAGUAACGAUAAGCCUCUUUGAAU\
) } def
/len { sequence length } bind def

/coor [
[28.99753952 350.09835815]
[16.59757805 358.81710815]
[1.96262467 362.76602173]
[-13.14007664 361.46826172]
[-26.88680267 355.08050537]
[-37.61756897 344.37414551]
[-44.03658295 330.64196777]
[-45.36871719 315.54226685]
[-41.45311356 300.89837646]
[-32.76259232 288.47860718]
[-20.34658432 279.78271484]
[-5.70437956 275.86077881]
[9.39590454 277.18637085]
[15.71692085 263.58325195]
[22.03793716 249.98013306]
[28.35895538 236.37701416]
[34.67996979 222.77391052]
[29.34164429 208.91613770]
[35.55827332 195.03059387]
[50.12977600 189.52522278]
[56.45079041 175.92210388]
[62.77180862 162.31900024]
[69.09282684 148.71588135]
[75.41384125 135.11276245]
[81.73485565 121.50965118]
[88.05587769 107.90653229]
[87.00997925 93.96387482]
[98.34101105 85.77245331]
[104.66202545 72.16933441]
[110.65249634 58.41745377]
[116.30892181 44.52483368]
[116.70020294 35.02233124]
[122.58889008 30.10835648]
[115.79770660 16.02241135]
[119.69971466 0.87947947]
[132.45249939 -8.17040920]
[148.03459167 -6.85417414]
[159.08859253 4.20669889]
[160.39515686 19.78960228]
[151.33735657 32.53676987]
[136.19200134 36.42937088]
[130.20153809 50.18125534]
[124.54511261 64.07387543]
[124.95705414 71.73246765]
[118.26514435 78.49034882]
[111.94412231 92.09346771]
[112.99002075 106.03612518]
[101.65898895 114.22754669]
[95.33797455 127.83066559]
[89.01695251 141.43377686]
[82.69593811 155.03689575]
[76.37492371 168.64001465]
[70.05390930 182.24313354]
[63.73289108 195.84623718]
[68.92137146 210.53356934]
[62.31717682 224.23901367]
[48.28308487 229.09492493]
[41.96207047 242.69804382]
[35.64105225 256.30114746]
[29.32003593 269.90426636]
[22.99901962 283.50738525]
[33.74950027 294.19396973]
[40.19380951 307.91427612]
[41.55376816 323.01150513]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[28 46]
[29 45]
[30 43]
[31 42]
[33 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
