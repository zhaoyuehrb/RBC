%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGACCAGGCCACAGGGAUGCUGGGGCUGUAAACCAAAAGCCACUGGACUCUGUAAACCCACUGGGCACCACAGAGGCAGAAGGGGUG\
) } def
/len { sequence length } bind def

/coor [
[90.60755920 124.29838562]
[78.08616638 114.08593750]
[63.66724396 118.22049713]
[58.27516937 132.65072632]
[45.56855392 141.04092407]
[30.53577805 140.34837341]
[18.93225098 131.04804993]
[4.51332617 135.18260193]
[-9.90559959 139.31716919]
[-21.03848648 150.55857849]
[-35.40541458 146.62911987]
[-49.82434082 150.76368713]
[-57.40636826 156.25042725]
[-64.81896210 154.78147888]
[-79.37339783 158.41030884]
[-93.92783356 162.03913879]
[-103.38985443 174.99481201]
[-119.42395020 175.53085327]
[-129.73013306 163.23605347]
[-126.40237427 147.54193115]
[-111.99345398 140.48767090]
[-97.55666351 147.48469543]
[-83.00222778 143.85586548]
[-68.44779205 140.22705078]
[-53.95890045 136.34475708]
[-39.53997421 132.21020508]
[-29.43842506 121.26451874]
[-14.04015923 124.89824677]
[0.37876576 120.76368713]
[14.79769135 116.62911987]
[19.70961571 102.59306335]
[32.09114075 94.03959656]
[47.31308746 94.42140198]
[59.53268433 103.80156708]
[73.95160675 99.66700745]
[77.54015350 86.80209351]
[87.03246307 77.40636444]
[99.93340302 73.94956970]
[112.85184479 77.34035492]
[122.39207458 86.68742371]
[133.91049194 75.84139252]
[148.13154602 80.26985931]
[162.68597412 76.64102936]
[176.27949524 61.95619583]
[194.65634155 67.53411865]
[208.92218018 62.89886475]
[223.18803406 58.26361084]
[229.82637024 47.03895569]
[241.97158813 43.54812622]
[252.83900452 49.16502380]
[267.25793457 45.03046417]
[281.67684937 40.89590454]
[296.09576416 36.76134491]
[310.51470947 32.62678528]
[324.93362427 28.49222374]
[330.42526245 12.60540390]
[344.12240601 3.14895344]
[360.59484863 3.63473773]
[373.45117188 13.67905331]
[387.71701050 9.04379845]
[401.98284912 4.40854359]
[415.17834473 -6.23642826]
[429.06018066 3.49655390]
[423.55044556 19.53024101]
[406.61810303 18.67439079]
[392.35226440 23.30964661]
[378.08642578 27.94490051]
[375.10577393 41.08206940]
[365.90826416 51.07323837]
[352.85430908 55.19423676]
[339.37448120 52.24833679]
[329.06817627 42.91114807]
[314.64926147 47.04570770]
[300.23034668 51.18026733]
[285.81140137 55.31483078]
[271.39248657 59.44939041]
[256.97357178 63.58395004]
[245.62025452 76.84185791]
[227.82328796 72.52945709]
[213.55743408 77.16471100]
[199.29159546 81.79996490]
[195.35572815 91.51815796]
[186.46878052 97.49044037]
[175.53918457 97.46260071]
[166.31480408 91.19546509]
[151.76036072 94.82429504]
[141.28297424 105.41076660]
[126.02090454 101.24185944]
[120.28328705 116.34680176]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[7 30]
[8 29]
[9 28]
[11 26]
[12 25]
[14 24]
[15 23]
[16 22]
[40 88]
[42 86]
[43 85]
[45 81]
[46 80]
[47 79]
[50 77]
[51 76]
[52 75]
[53 74]
[54 73]
[55 72]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
