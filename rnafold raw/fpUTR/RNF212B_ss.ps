%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCGGCUGCGCCCAGCCUCUUUCCUCACCCGGUGCCAAGCCAGCUGUUUACUUUCCCGCCAUGUCCAGCUCUUCGUGAGGAGAACUGGAUGAUUUCCUGAGAUCUGAGGCUUUCUGGAAUCACAGCGGCCAAGCGGA\
) } def
/len { sequence length } bind def

/coor [
[-23.54111481 153.92234802]
[-36.58723068 161.32496643]
[-38.90023422 172.05941772]
[-46.61420441 179.56118774]
[-56.97526932 181.49276733]
[-66.46813202 177.44718933]
[-79.83322906 184.25704956]
[-93.19832611 191.06690979]
[-106.56343079 197.87677002]
[-119.77236176 204.98478699]
[-132.81848145 212.38742065]
[-145.86459351 219.79003906]
[-158.91070557 227.19265747]
[-171.95683289 234.59529114]
[-168.90444946 249.41210938]
[-170.58212280 264.44674683]
[-176.82550049 278.22628784]
[-187.02290344 289.40072632]
[-200.17530823 296.87530518]
[-214.99417114 299.91775513]
[-230.02769470 298.23001099]
[-243.80303955 291.97741699]
[-254.97064209 281.77252197]
[-262.43640137 268.61511230]
[-265.46893311 253.79420471]
[-263.77111816 238.76182556]
[-257.50927734 224.99067688]
[-247.29690552 213.82991028]
[-234.13449097 206.37295532]
[-219.31156921 203.35035706]
[-204.28031921 205.05825806]
[-190.51336670 211.32931519]
[-179.35945129 221.54916382]
[-166.31333923 214.14654541]
[-153.26721191 206.74392700]
[-140.22109985 199.34129333]
[-127.17498016 191.93867493]
[-125.04904938 187.57810974]
[-120.11849976 184.54777527]
[-113.37328339 184.51165771]
[-100.00818634 177.70181274]
[-86.64308929 170.89195251]
[-73.27799225 164.08209229]
[-64.06144714 147.13876343]
[-43.98985291 148.27885437]
[-30.94373703 140.87622070]
[-32.01506805 133.94085693]
[-31.42842484 126.92937469]
[-29.20795059 120.23360443]
[-25.46933556 114.22977448]
[-20.41381836 109.25735474]
[-14.31737423 105.59983826]
[-7.51564598 103.46865845]
[-0.38547897 102.99090576]
[6.67596436 104.20182037]
[13.27332401 107.04235077]
[19.03517723 111.36194611]
[23.63494682 116.92654419]
[37.90079498 112.29129028]
[52.16664124 107.65603638]
[66.43248749 103.02077484]
[67.59027100 86.29803467]
[76.91065216 71.51048279]
[92.74355316 62.54129791]
[111.65293121 62.11247635]
[117.23733521 48.19075394]
[122.82173920 34.26902771]
[128.40614319 20.34730339]
[133.99055481 6.42557859]
[139.57495117 -7.49614620]
[137.53157043 -23.18484116]
[149.45095825 -32.11666489]
[155.03535461 -46.03839111]
[160.61976624 -59.96011353]
[166.20416260 -73.88183594]
[171.78857422 -87.80356598]
[168.93141174 -103.95189667]
[181.66001892 -114.29183197]
[196.88032532 -108.18653107]
[198.93495178 -91.91661072]
[185.71029663 -82.21916199]
[180.12590027 -68.29743195]
[174.54148865 -54.37570953]
[168.95707703 -40.45398331]
[163.37268066 -26.53226089]
[165.81550598 -11.83934021]
[153.49667358 -1.91174138]
[147.91227722 12.00998306]
[142.32786560 25.93170738]
[136.74346924 39.85343170]
[131.15905762 53.77515793]
[125.57465363 67.69688416]
[135.44374084 78.99295807]
[149.98907471 75.32785034]
[164.53442383 71.66274261]
[179.07975769 67.99763489]
[193.62510681 64.33252716]
[205.00997925 52.52928162]
[220.85685730 56.74928665]
[224.86383057 72.65136719]
[212.90887451 83.87682343]
[197.29020691 78.87787628]
[182.74487305 82.54297638]
[168.19952393 86.20808411]
[153.65419006 89.87319183]
[139.10884094 93.53829956]
[138.15507507 100.02323151]
[136.17327881 106.02194214]
[133.29631042 111.37934875]
[129.67901611 115.97055817]
[140.97508240 125.83964539]
[152.27116394 135.70872498]
[163.56723022 145.57780457]
[176.51905823 145.50120544]
[185.73258972 154.02270508]
[186.60653687 166.13941956]
[197.67831421 176.25947571]
[208.75010681 186.37953186]
[224.52523804 185.42019653]
[236.30276489 195.95895386]
[237.09527588 211.74334717]
[226.43258667 223.40879822]
[210.64068604 224.03437805]
[199.08862305 213.24896240]
[198.63003540 197.45132446]
[187.55825806 187.33126831]
[176.48646545 177.21121216]
[159.19862366 174.40724182]
[153.69815063 156.87387085]
[142.40208435 147.00479126]
[131.10600281 137.13571167]
[119.80993652 127.26663208]
[102.51852417 133.60893250]
[84.47499847 129.91448975]
[71.06774902 117.28662872]
[56.80189896 121.92188263]
[42.53604889 126.55713654]
[28.27020264 131.19239807]
[19.98889160 153.78349304]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[6 43]
[7 42]
[8 41]
[9 40]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[58 138]
[59 137]
[60 136]
[61 135]
[65 92]
[66 91]
[67 90]
[68 89]
[69 88]
[70 87]
[72 85]
[73 84]
[74 83]
[75 82]
[76 81]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
[110 132]
[111 131]
[112 130]
[113 129]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
