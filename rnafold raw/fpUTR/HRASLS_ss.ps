%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGCGGGCGGGCGAAGCUGGGCUCGGGGCCAAGCGAGGUCUAGCCGGAGCGACUGUGCCCCGCCUCCUGGGCGGAGCGGGCGGCUCCCC\
) } def
/len { sequence length } bind def

/coor [
[188.18905640 239.86618042]
[186.92472839 233.02638245]
[177.86119080 221.07431030]
[168.79763794 209.12223816]
[159.73410034 197.17015076]
[153.04403687 193.66993713]
[150.57345581 184.65173340]
[141.92324829 172.39718628]
[133.27304077 160.14263916]
[124.62284088 147.88809204]
[115.97264099 135.63354492]
[107.32243347 123.37899780]
[98.67222595 111.12445068]
[89.81406403 99.01937103]
[80.75051880 87.06729126]
[60.91484451 85.63410187]
[48.45154953 70.51877594]
[50.75398254 51.36205292]
[40.51568604 40.39951324]
[30.27738762 29.43697357]
[12.61458874 24.58951187]
[9.10779667 7.48692560]
[-1.49880469 -3.11967611]
[-12.10540676 -13.72627735]
[-22.71200752 -24.33288002]
[-29.31593132 -26.51677895]
[-33.10764694 -31.10387039]
[-33.64939880 -36.04396439]
[-43.50745392 -47.34966278]
[-53.36550903 -58.65535736]
[-63.22356415 -69.96105194]
[-73.08161926 -81.26674652]
[-88.86418915 -82.09508514]
[-99.37618256 -93.89650726]
[-98.38102722 -109.66943359]
[-86.46913147 -120.05606842]
[-70.70760345 -118.89421082]
[-60.44748688 -106.87316132]
[-61.77592468 -91.12480164]
[-51.91786957 -79.81910706]
[-42.05981445 -68.51341248]
[-32.20175934 -57.20771790]
[-22.34370422 -45.90201950]
[-12.10540676 -34.93947983]
[-1.49880469 -24.33288002]
[9.10779667 -13.72627735]
[19.71439934 -3.11967611]
[31.93726730 -2.76532340]
[40.86713409 6.16867399]
[41.23992920 19.19867516]
[51.47822571 30.16121483]
[61.71652222 41.12375641]
[72.04796600 38.64122772]
[82.53575897 40.79888916]
[91.17945862 47.25621796]
[96.30026245 56.84593201]
[96.86691284 67.78449249]
[92.70259094 78.00374603]
[101.76613617 89.95582581]
[108.90941620 94.07292938]
[110.92677307 102.47424316]
[119.57698059 114.72879028]
[128.22718811 126.98333740]
[136.87739563 139.23788452]
[145.52760315 151.49243164]
[154.17779541 163.74697876]
[162.82800293 176.00154114]
[171.68617249 188.10661316]
[180.74972534 200.05868530]
[189.81326294 212.01075745]
[198.87681580 223.96284485]
[208.34312439 235.59851074]
[218.20118713 246.90420532]
[226.37803650 251.43972778]
[228.19474792 258.76831055]
[237.66107178 270.40396118]
[247.12739563 282.03964233]
[256.59371948 293.67529297]
[266.06002808 305.31097412]
[281.80770874 308.37533569]
[289.10235596 322.66406250]
[282.34817505 337.21603394]
[266.72637939 340.86825562]
[254.22067261 330.81906128]
[254.42436218 314.77728271]
[244.95803833 303.14163208]
[235.49172974 291.50595093]
[226.02540588 279.87026978]
[216.55908203 268.23461914]
[206.89549255 256.76226807]
[197.03742981 245.45655823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 71]
[3 70]
[4 69]
[5 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 59]
[15 58]
[18 52]
[19 51]
[20 50]
[22 47]
[23 46]
[24 45]
[25 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[72 91]
[73 90]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
