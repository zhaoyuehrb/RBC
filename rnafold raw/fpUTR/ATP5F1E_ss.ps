%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCCCCGCCUCUUCCGCUUCUGUGGUCUGAUCUUCCUGCGGCUGAACCGCCCGGCUGAGCCGACAUUGCCGGCGUCUUGGCGAUUCGGCCCGACGAGCUCCGCUUUCGCUACAGC\
) } def
/len { sequence length } bind def

/coor [
[35.94201279 342.20346069]
[36.15234375 357.29049683]
[32.44976044 371.91763306]
[25.08670998 385.08758545]
[14.56521606 395.90243530]
[1.60265183 403.62475586]
[-12.91717339 407.72805786]
[-28.00427246 407.93255615]
[-42.62998581 404.22433472]
[-55.79710388 396.85620117]
[-66.60787201 386.33053589]
[-74.32519531 373.36499023]
[-78.42288971 358.84356689]
[-78.62157440 343.75640869]
[-74.90769196 329.13211060]
[-67.53447723 315.96783447]
[-57.00463104 305.16113281]
[-44.03610611 297.44882202]
[-29.51311874 293.35675049]
[-14.42586422 293.16387939]
[0.19697908 296.88342285]
[7.52190447 283.79351807]
[14.84683037 270.70361328]
[22.17175484 257.61370850]
[29.49668121 244.52380371]
[36.82160568 231.43391418]
[44.14653397 218.34400940]
[50.57691956 204.79225159]
[48.05241394 190.11314392]
[60.31582642 180.11718750]
[65.82271576 166.16461182]
[63.29820633 151.48550415]
[75.56162262 141.48954773]
[81.06850433 127.53697968]
[86.57539368 113.58441162]
[80.90306091 100.25133514]
[86.22253418 86.77359772]
[99.47203827 80.90870667]
[104.97892761 66.95613861]
[105.23600006 57.69124222]
[110.82550812 52.70614243]
[116.70500946 38.90644836]
[122.58450317 25.10675812]
[128.46400452 11.30706596]
[134.34350586 -2.49262571]
[140.22300720 -16.29231834]
[146.10250854 -30.09200859]
[144.39355469 -45.82064819]
[156.50038147 -54.49671173]
[162.37986755 -68.29640198]
[168.25936890 -82.09609222]
[174.13887024 -95.89579010]
[172.42991638 -111.62442780]
[184.53674316 -120.30049133]
[190.41624451 -134.10018921]
[183.84402466 -144.19291687]
[183.03054810 -156.08840942]
[188.06466675 -166.76351929]
[197.56405640 -173.56259155]
[209.05241394 -174.85784912]
[215.66415405 -188.32205200]
[222.27589417 -201.78625488]
[228.88764954 -215.25045776]
[222.40058899 -229.47903442]
[226.62695312 -244.53465271]
[239.57118225 -253.30853271]
[255.12139893 -251.65791321]
[265.93527222 -240.36215210]
[266.90682983 -224.75479126]
[257.57730103 -212.20510864]
[242.35185242 -208.63871765]
[235.74011230 -195.17451477]
[229.12835693 -181.71031189]
[222.51661682 -168.24610901]
[229.50720215 -151.43103027]
[221.97952271 -134.50326538]
[204.21594238 -128.22068787]
[198.33644104 -114.42098999]
[200.46592712 -99.67939758]
[187.93856812 -90.01628876]
[182.05906677 -76.21659851]
[176.17956543 -62.41690445]
[170.30006409 -48.61721420]
[172.42956543 -33.87562180]
[159.90219116 -24.21250916]
[154.02268982 -10.41281796]
[148.14318848 3.38687325]
[142.26370239 17.18656540]
[136.38420105 30.98625755]
[130.50469971 44.78594971]
[124.62519836 58.58563995]
[118.93149567 72.46302032]
[113.42460632 86.41558838]
[119.09693909 99.74866486]
[113.77746582 113.22640228]
[100.52796173 119.09129333]
[95.02107239 133.04386902]
[89.51419067 146.99642944]
[91.64480591 162.67352295]
[79.77528381 171.67150879]
[74.26839447 185.62406921]
[76.39901733 201.30116272]
[64.52948761 210.29913330]
[79.27529144 207.54933167]
[90.79689789 217.15415955]
[90.74589539 232.15406799]
[79.15924835 241.68032837]
[64.43248749 238.83032227]
[57.23643112 225.66893005]
[49.91150665 238.75883484]
[42.58658218 251.84873962]
[35.26165390 264.93862915]
[27.93672943 278.02853394]
[20.61180305 291.11843872]
[13.28687859 304.20834351]
[24.10577202 314.72564697]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 115]
[22 114]
[23 113]
[24 112]
[25 111]
[26 110]
[27 109]
[28 103]
[30 101]
[31 100]
[33 98]
[34 97]
[35 96]
[38 93]
[39 92]
[41 91]
[42 90]
[43 89]
[44 88]
[45 87]
[46 86]
[47 85]
[49 83]
[50 82]
[51 81]
[52 80]
[54 78]
[55 77]
[60 74]
[61 73]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
