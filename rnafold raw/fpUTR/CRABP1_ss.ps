%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCGCGCAGCGCUGGGCGCAAAGCGCCAGUCUCCGCCUUGCGAGCUCAGAGUGUGCCCGCUGCGCCGCCGCUGUCCGUACCUGCCGCCGCCGCCACCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[99.30560303 265.98114014]
[106.19828796 252.36300659]
[118.32228851 243.09092712]
[115.23260498 228.41258240]
[112.14292908 213.73423767]
[109.05324554 199.05587769]
[104.52292633 193.06274414]
[106.09630585 183.89703369]
[103.44295502 169.13357544]
[93.57633209 157.97566223]
[98.75050354 143.02445984]
[96.09715271 128.26100159]
[93.44379425 113.49754333]
[83.82091522 101.99101257]
[69.75962067 96.76799011]
[55.69832611 91.54496765]
[41.63703156 86.32193756]
[27.57573509 81.09891510]
[13.51444054 75.87589264]
[-0.69545442 71.07184601]
[-15.04146957 66.69099426]
[-29.38748360 62.31014252]
[-43.73349762 57.92929077]
[-59.19172668 61.29881668]
[-69.10437012 50.18177032]
[-83.45038605 45.80091858]
[-97.79640198 41.42006683]
[-110.10427094 50.86972809]
[-125.61676788 51.24662399]
[-138.36901855 42.40583420]
[-143.45753479 27.74682045]
[-138.92567444 12.90627480]
[-126.51601410 3.59068823]
[-111.00034332 3.38209414]
[-98.34474182 12.36070156]
[-93.41555023 27.07405281]
[-79.06953430 31.45490265]
[-64.72351837 35.83575439]
[-50.29141617 32.15287781]
[-39.35264587 43.58327484]
[-25.00663185 47.96412659]
[-10.66061783 52.34497833]
[3.68539715 56.72583008]
[8.37620831 55.22913742]
[14.05585384 56.78096008]
[18.73746490 61.81459808]
[32.79875946 67.03762054]
[46.86005402 72.26064301]
[60.92134857 77.48367310]
[74.98264313 82.70669556]
[89.04393768 87.92971802]
[103.84509277 85.49542999]
[115.49295044 76.04410553]
[120.28466797 68.07385254]
[127.62889862 66.49147034]
[139.55171204 57.38946915]
[151.47453308 48.28746796]
[163.39735413 39.18546295]
[165.63574219 23.77029991]
[177.85684204 14.70941925]
[192.53904724 16.93838692]
[204.46186829 7.83638573]
[210.73600769 -6.68758869]
[225.54731750 -8.26047134]
[237.47013855 -17.36247444]
[249.39295959 -26.46447563]
[255.20321655 -41.79982376]
[271.43045044 -44.16824341]
[281.38143921 -31.13331032]
[274.81948853 -16.10424232]
[258.49496460 -14.54165936]
[246.57214355 -5.43965721]
[234.64932251 3.66234517]
[229.22799683 17.53528214]
[213.56387329 19.75920296]
[201.64105225 28.86120415]
[199.92115784 43.61171341]
[187.95938110 53.01228333]
[172.49935913 51.10828018]
[160.57653809 60.21028519]
[148.65371704 69.31228638]
[136.73089600 78.41429138]
[124.94427490 87.69196320]
[113.29641724 97.14328766]
[113.41162872 102.25469208]
[111.63137817 107.04744720]
[108.20725250 110.84418488]
[110.86061096 125.60764313]
[113.51396179 140.37110901]
[123.57036591 152.58500671]
[118.20641327 166.48022461]
[120.85976410 181.24368286]
[123.73159790 195.96620178]
[126.82127380 210.64454651]
[129.91094971 225.32290649]
[133.00064087 240.00125122]
[147.83364868 243.59907532]
[159.63125610 253.28305054]
[166.05101013 267.13040161]
[165.81828308 282.39175415]
[158.97927856 296.03692627]
[146.89189148 305.35668945]
[131.95606995 308.50054932]
[117.13733673 304.84432983]
[105.37796021 295.11398315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 96]
[4 95]
[5 94]
[6 93]
[8 92]
[9 91]
[11 89]
[12 88]
[13 87]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 43]
[21 42]
[22 41]
[23 40]
[25 38]
[26 37]
[27 36]
[52 84]
[53 83]
[55 82]
[56 81]
[57 80]
[58 79]
[61 76]
[62 75]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
