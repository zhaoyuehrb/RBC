%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGUGGUGAAAAGGUGACAGGGAGCUGCCCCCGCUCAAGAGCCGGUGGUUGGGGGUCUGAGAAGAAGUCACCAAU\
) } def
/len { sequence length } bind def

/coor [
[81.06273651 119.46559143]
[91.25827026 108.45986938]
[76.33233643 109.94867706]
[61.40640640 111.43748474]
[46.48047638 112.92629242]
[31.55454254 114.41510010]
[16.62861061 115.90390778]
[1.70267820 117.39271545]
[-13.22325420 118.88152313]
[-28.14918709 120.37032318]
[-33.43709183 134.64616394]
[-44.35438919 145.16754150]
[-58.69853592 149.88619995]
[-73.60771179 147.91708374]
[-86.13178253 139.70384216]
[-93.81603241 126.92035675]
[-106.81118011 136.92326355]
[-121.86629486 130.42131042]
[-123.49397278 114.10314178]
[-110.01979828 104.75549316]
[-95.30484009 111.99442291]
[-90.29708099 97.94494629]
[-79.64210510 87.41969299]
[-65.41563416 82.54439545]
[-50.42204285 84.33671570]
[-37.64157867 92.49433899]
[-29.63799286 105.44439697]
[-14.71206093 103.95558929]
[0.21387127 102.46678162]
[15.13980389 100.97797394]
[30.06573486 99.48916626]
[44.99166870 98.00035858]
[59.91759872 96.51155090]
[74.84352875 95.02274323]
[89.76946259 93.53393555]
[95.26679230 88.91426849]
[102.38610077 88.23432922]
[113.89804077 78.61792755]
[125.40998077 69.00151825]
[136.92192078 59.38511658]
[141.66716003 51.25477219]
[149.08805847 49.62628174]
[160.97320557 40.47515488]
[167.18734741 25.92541122]
[181.99206543 24.29141998]
[193.87721252 15.14029217]
[192.46569824 -0.22236291]
[199.60420227 -13.89881325]
[213.01486206 -21.52495193]
[228.41836548 -20.66730690]
[240.89952087 -11.59955025]
[246.47564697 2.78483200]
[243.36740112 17.89583397]
[232.56663513 28.91159058]
[217.51982117 32.31701279]
[203.02833557 27.02544594]
[191.14318848 36.17657471]
[185.77914429 50.07176590]
[170.12434387 52.36030579]
[158.23918152 61.51143646]
[146.53833008 70.89705658]
[135.02638245 80.51345825]
[123.51444244 90.12986755]
[112.00250244 99.74626923]
[126.99652863 100.16959381]
[140.99397278 105.56141663]
[152.39729309 115.30637360]
[159.90502930 128.29228210]
[162.66035461 143.03704834]
[160.34877014 157.85786438]
[153.23411560 171.06323242]
[142.12837219 181.14601135]
[128.29904175 186.95547485]
[113.32447815 187.82858276]
[98.91371155 183.66567993]
[86.71144104 174.94187927]
[78.11031342 162.65283203]
[74.09197998 148.20109558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[9 28]
[10 27]
[16 21]
[37 64]
[38 63]
[39 62]
[40 61]
[42 60]
[43 59]
[45 57]
[46 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
