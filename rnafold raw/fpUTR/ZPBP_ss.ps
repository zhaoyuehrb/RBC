%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGCAGGUGGGCGCGCGUUGCCUAACGACCUUCCGCGCGGACGGUGGGCAGGCGACGGCGGCGUGUGG\
) } def
/len { sequence length } bind def

/coor [
[78.17139435 278.95977783]
[65.57907867 267.60769653]
[73.00161743 252.36492920]
[74.32732391 237.42361450]
[75.65302277 222.48231506]
[76.97872162 207.54101562]
[78.30442810 192.59971619]
[71.72224426 179.23841858]
[80.64892578 166.17607117]
[81.97462463 151.23477173]
[79.70291901 148.14277649]
[79.01334381 143.69390869]
[80.57513428 138.74729919]
[84.59526825 134.44842529]
[87.88684845 119.81402588]
[91.17842102 105.17962646]
[89.71205902 96.96707153]
[94.95285797 89.97752380]
[98.88854218 75.50305176]
[102.82422638 61.02857590]
[106.75991058 46.55410385]
[110.69559479 32.07962799]
[114.63127899 17.60515594]
[118.56696320 3.13068175]
[122.50264740 -11.34379196]
[114.91088867 -24.94536781]
[119.10842133 -39.56847763]
[132.12223816 -46.72224045]
[128.27688599 -62.06903076]
[139.08247375 -72.32029724]
[143.01815796 -86.79476929]
[146.95384216 -101.26924133]
[143.10848999 -116.61602783]
[153.91409302 -126.86729431]
[157.84977722 -141.34176636]
[161.78546143 -155.81623840]
[157.07859802 -171.52539062]
[168.52502441 -183.26896667]
[184.34962463 -178.96617126]
[188.27340698 -163.04336548]
[176.25993347 -151.88055420]
[172.32424927 -137.40608215]
[168.38856506 -122.93161011]
[172.51541138 -108.62013245]
[161.42831421 -97.33355713]
[157.49263000 -82.85908508]
[153.55694580 -68.38461304]
[157.68380737 -54.07313538]
[146.59671021 -42.78655624]
[154.19622803 -30.02792168]
[150.41108704 -15.29268074]
[136.97712708 -7.40810776]
[133.04144287 7.06636620]
[129.10575867 21.54084015]
[125.17006683 36.01531219]
[121.23438263 50.48978806]
[117.29869843 64.96426392]
[113.36301422 79.43873596]
[109.42733002 93.91320801]
[105.81282043 108.47120667]
[102.52124023 123.10559845]
[99.22966003 137.73999023]
[96.91593170 152.56047058]
[95.59022522 167.50178528]
[102.07759094 181.93177795]
[93.24572754 193.92541504]
[91.92002869 208.86671448]
[90.59432220 223.80801392]
[89.26862335 238.74932861]
[87.94292450 253.69062805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[9 64]
[10 63]
[14 62]
[15 61]
[16 60]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[28 49]
[30 47]
[31 46]
[32 45]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
