%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGAUUGGGAGGGACUGAAGGCCGUUUCCGGCUCUGGUAGUGUAGGGACUUCGGCACGUGUGUCAUUCCCCGGGAUUUCUGUAGUAACCCUGCUUCUGGUGAACUUGUCUGGCCGGCAUUCAUUUAAGGCCUAAGG\
) } def
/len { sequence length } bind def

/coor [
[63.16626358 208.33738708]
[50.05437469 201.05189514]
[40.33610916 189.62580872]
[35.24940872 175.51463318]
[35.44223022 160.51586914]
[40.89001465 146.54011536]
[50.89880371 135.36764526]
[64.19364929 128.42163086]
[79.07865143 126.58676147]
[64.58247375 122.73176575]
[50.08630371 118.87677765]
[35.59012985 115.02178955]
[21.09395599 111.16680145]
[5.76882887 115.09757996]
[-4.54247332 104.34926605]
[-19.03864670 100.49427795]
[-33.53482056 96.63928223]
[-44.40236282 107.40235901]
[-59.10107040 111.25525665]
[-73.65803528 107.26010132]
[-84.19028473 96.58641052]
[-87.94051361 82.17109680]
[-102.47932434 78.48016357]
[-117.05891418 74.95376587]
[-131.63850403 71.42736816]
[-146.21810913 67.90096283]
[-165.19918823 74.52213287]
[-178.72511292 60.77331924]
[-193.44915771 57.90933609]
[-208.17320251 55.04534912]
[-222.89724731 52.18136597]
[-237.92085266 57.14142990]
[-248.93667603 47.11642075]
[-263.66073608 44.25243759]
[-278.68432617 49.21250153]
[-289.70013428 39.18749237]
[-304.42419434 36.32350922]
[-321.12637329 39.23441696]
[-328.54714966 23.99077797]
[-315.95352173 12.64015484]
[-301.56021118 21.59946251]
[-286.83615112 24.46344566]
[-272.86572266 19.29853439]
[-260.79675293 29.52839088]
[-246.07269287 32.39237595]
[-232.10226440 27.22746277]
[-220.03326416 37.45731735]
[-205.30921936 40.32130432]
[-190.58517456 43.18528748]
[-175.86112976 46.04927063]
[-167.84843445 39.54371262]
[-157.35391235 38.54695892]
[-147.87078857 43.63611984]
[-142.69169617 53.32137299]
[-128.11210632 56.84777451]
[-113.53251648 60.37417221]
[-98.95292664 63.90057373]
[-91.65056610 62.40303421]
[-84.08552551 67.67491913]
[-73.67010498 57.02669907]
[-59.22714996 52.99470139]
[-44.60859299 56.75823975]
[-33.76541519 67.40352631]
[-29.67983055 82.14311218]
[-15.18365765 85.99810028]
[-0.68748349 89.85308838]
[13.60078049 85.64657593]
[24.94894600 96.67062378]
[39.44511795 100.52561188]
[53.94129181 104.38060760]
[68.43746948 108.23559570]
[82.93363953 112.09058380]
[83.89344788 90.05809021]
[102.55838013 83.25378418]
[111.15431213 70.96110535]
[119.75023651 58.66842270]
[122.13433838 49.76119232]
[128.68193054 46.19805145]
[137.55348206 34.10277557]
[132.69711304 19.36522675]
[137.46279907 4.59810495]
[150.01802063 -4.52033091]
[165.53506470 -4.48385620]
[178.04727173 4.69350386]
[182.74348450 19.48286819]
[177.81788635 34.19742203]
[165.16447449 43.17912292]
[149.64875793 42.97431946]
[140.77722168 55.06959534]
[132.04292297 67.26435089]
[123.44699097 79.55702972]
[114.85105896 91.84970856]
[117.54267120 107.10754395]
[106.16055298 119.98725891]
[120.00247192 125.76663971]
[133.84439087 131.54602051]
[147.68630981 137.32539368]
[162.15748596 131.56146240]
[176.11283875 137.61976624]
[181.51867676 151.45133972]
[195.36059570 157.23071289]
[209.20251465 163.01010132]
[223.04443359 168.78947449]
[236.88636780 174.56886292]
[250.72828674 180.34823608]
[257.45977783 179.87380981]
[262.60687256 182.52456665]
[265.05563354 186.71424866]
[278.62225342 193.11322021]
[292.18887329 199.51217651]
[305.75552368 205.91113281]
[321.28009033 201.86550903]
[334.03561401 211.59565735]
[334.23715210 227.63745117]
[321.73010254 237.68498230]
[306.10879517 234.03065491]
[299.35656738 219.47775269]
[285.78991699 213.07879639]
[272.22329712 206.67984009]
[258.65667725 200.28088379]
[244.94889832 194.19015503]
[231.10697937 188.41078186]
[217.26506042 182.63139343]
[203.42314148 176.85202026]
[189.58122253 171.07263184]
[175.73930359 165.29325867]
[162.10293579 171.17419434]
[147.98294067 165.51025391]
[141.90693665 151.16731262]
[128.06501770 145.38793945]
[114.22309113 139.60855103]
[100.38117218 133.82917786]
[111.06468964 144.35830688]
[117.37015533 157.96862793]
[118.49436188 172.92643738]
[114.29410553 187.32637024]
[105.30442810 199.33410645]
[92.67045593 207.42005920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 72]
[10 71]
[11 70]
[12 69]
[13 68]
[15 66]
[16 65]
[17 64]
[22 59]
[23 57]
[24 56]
[25 55]
[26 54]
[28 50]
[29 49]
[30 48]
[31 47]
[33 45]
[34 44]
[36 42]
[37 41]
[74 92]
[75 91]
[76 90]
[78 89]
[79 88]
[94 132]
[95 131]
[96 130]
[97 129]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[105 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
