%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCGGGGAGGGCGGGACUUCCUGCGCGGGGGCCCGAGCCGCUCAGUCUCCCUGCUCUCCGUGGUCCCGGCUCGCGUGUAGCGGCGGCGGCGGCGUCUCCGUGAGGAGGCGCGCGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[194.62089539 172.70481873]
[182.17573547 164.33116150]
[169.73057556 155.95750427]
[157.28543091 147.58384705]
[144.84027100 139.21020508]
[132.39511108 130.83654785]
[117.51629639 130.15107727]
[110.38591003 116.02776337]
[96.14600372 118.70569611]
[84.12437439 110.61701202]
[81.24044037 96.41738892]
[68.79528046 88.04373932]
[53.02629852 86.75933838]
[46.78607178 73.23495483]
[34.34091568 64.86129761]
[21.89576149 56.48764420]
[9.45060635 48.11399078]
[-2.99454904 39.74033356]
[-15.43970394 31.36667824]
[-27.88485909 22.99302101]
[-42.60311508 30.40262222]
[-58.95823669 29.41921425]
[-72.52687836 20.40286636]
[-79.68661499 5.87345839]
[-78.58282471 -10.19289017]
[-94.37965393 -11.07084465]
[-100.96603394 -24.43006897]
[-113.62266541 -32.48051071]
[-126.27929688 -40.53095245]
[-138.93592834 -48.58139801]
[-151.59255981 -56.63183975]
[-164.24920654 -64.68228149]
[-177.00843811 -72.56910706]
[-192.82263184 -73.04003143]
[-199.75079346 -86.22524261]
[-215.56500244 -86.69616699]
[-222.49316406 -99.88137817]
[-235.35289001 -107.60327148]
[-248.21260071 -115.32516479]
[-264.90432739 -118.29541779]
[-266.67089844 -135.15707397]
[-250.95721436 -141.52236938]
[-240.49070740 -128.18487549]
[-227.63099670 -120.46298981]
[-214.77127075 -112.74109650]
[-199.87689209 -112.82248688]
[-192.02890015 -99.08496094]
[-177.13452148 -99.16635132]
[-169.28654480 -85.42882538]
[-161.84428406 -84.67400360]
[-156.19876099 -77.33891296]
[-143.54212952 -69.28847504]
[-130.88548279 -61.23802948]
[-118.22885895 -53.18758774]
[-105.57221985 -45.13714600]
[-92.91558838 -37.08670044]
[-78.02404785 -36.78456879]
[-70.53237915 -22.84952354]
[-58.80545807 -29.97175407]
[-45.08559036 -31.32770920]
[-32.06654739 -26.59344292]
[-22.32948494 -16.64645958]
[-17.83123016 -3.40366745]
[-19.51120377 10.54786587]
[-7.06604862 18.92152214]
[5.37910700 27.29517746]
[17.82426262 35.66883469]
[30.26941681 44.04248810]
[42.71457291 52.41614532]
[55.15972900 60.78980255]
[70.03855133 61.47526169]
[77.16893768 75.59857941]
[89.61408997 83.97223663]
[103.85399628 81.29430389]
[115.87562561 89.38298798]
[118.75955963 103.58261108]
[134.52854919 104.86700439]
[140.76876831 118.39138794]
[153.21392822 126.76504517]
[165.65908813 135.13870239]
[178.10423279 143.51235962]
[190.54939270 151.88601685]
[202.99455261 160.25967407]
[215.54647827 168.47239685]
[228.20310974 176.52284241]
[240.85975647 184.57328796]
[253.67559814 182.54322815]
[264.07806396 189.60537720]
[266.74334717 201.48074341]
[282.51232910 202.76515198]
[288.75256348 216.28953552]
[301.19772339 224.66319275]
[313.64285278 233.03683472]
[322.62490845 235.27256775]
[326.29684448 241.78976440]
[338.52227783 250.48107910]
[350.74768066 259.17239380]
[362.97311401 267.86370850]
[375.19854736 276.55502319]
[387.42398071 285.24633789]
[399.64938354 293.93765259]
[416.01760864 294.94424438]
[423.08682251 309.74148560]
[413.58480835 323.10726929]
[397.28643799 321.29199219]
[390.95806885 306.16308594]
[378.73263550 297.47177124]
[366.50723267 288.78045654]
[354.28179932 280.08914185]
[342.05636597 271.39782715]
[329.83096313 262.70651245]
[317.60552979 254.01519775]
[305.26922607 245.48199463]
[292.82406616 237.10833740]
[280.37890625 228.73468018]
[265.50009155 228.04922485]
[258.36968994 213.92590332]
[240.87266541 213.72343445]
[232.80931091 197.22991943]
[220.15267944 189.17947388]
[207.49604797 181.12902832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 83]
[2 82]
[3 81]
[4 80]
[5 79]
[6 78]
[8 76]
[11 73]
[12 72]
[14 70]
[15 69]
[16 68]
[17 67]
[18 66]
[19 65]
[20 64]
[25 58]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[32 51]
[33 49]
[35 47]
[37 45]
[38 44]
[39 43]
[84 121]
[85 120]
[86 119]
[89 117]
[91 115]
[92 114]
[93 113]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
