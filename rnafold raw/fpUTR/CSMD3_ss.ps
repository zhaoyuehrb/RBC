%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGACUUUGUGCCCCCGUUGGAGAGAUGGUUGAGUCCUCGUCAAGGUUGCUGUGGUAUCCCAGAAACACCAUUCACUCCGAGCUGUGACCGCGCACCAACAACAGCAACAACUCCACUGCGCCGGGCUGAGGAGCAGGAAUUAGGAGCUCGCGAAUAAU\
) } def
/len { sequence length } bind def

/coor [
[159.20523071 347.68960571]
[171.27597046 338.78469849]
[185.81101990 335.07901001]
[200.67182922 337.11770630]
[213.67141724 344.60043335]
[206.86155701 331.23535156]
[200.05169678 317.87023926]
[190.02915955 315.57687378]
[182.79212952 307.96682739]
[180.92808533 297.40808105]
[185.29750061 287.37606812]
[179.01760864 273.75390625]
[172.73770142 260.13177490]
[166.45780945 246.50961304]
[151.60736084 237.20069885]
[153.37760925 218.89593506]
[146.83148193 205.39970398]
[140.28533936 191.90348816]
[133.47547913 178.53839111]
[126.40453339 165.30957031]
[119.33358002 152.08074951]
[112.26262665 138.85192871]
[105.19167328 125.62310791]
[89.52291107 123.95261383]
[77.66026306 113.58061981]
[63.14627457 117.36799622]
[48.63228607 121.15536499]
[34.11830139 124.94274139]
[19.60431480 128.73011780]
[14.07441330 143.22837830]
[1.06039453 151.67912292]
[-14.43358612 150.83283997]
[-26.44977760 141.01496887]
[-30.36770821 126.00065613]
[-24.68085480 111.56322479]
[-11.57592678 103.25416565]
[3.90796137 104.26847076]
[15.81694031 114.21612549]
[30.33092690 110.42875671]
[44.84491348 106.64138031]
[59.35889816 102.85401154]
[73.87288666 99.06663513]
[75.20151520 91.72155762]
[78.55160522 85.05130005]
[83.65006256 79.59958649]
[90.08128357 75.81082153]
[88.61103058 60.88304901]
[87.14076996 45.95528030]
[85.67051697 31.02750969]
[84.20025635 16.09973717]
[82.72999573 1.17196703]
[81.25974274 -13.75580406]
[79.78948212 -28.68357468]
[73.91345978 -42.48474503]
[64.17173767 -53.89083481]
[54.43001938 -65.29692841]
[39.51958466 -61.84184265]
[24.71433258 -65.72296143]
[13.41639996 -76.04843140]
[8.22196770 -90.44553375]
[10.32467937 -105.60591125]
[19.24134636 -118.04582977]
[32.92298508 -124.90669250]
[48.22565460 -124.61190796]
[61.63291550 -117.22922516]
[70.06387329 -104.45513153]
[71.58115387 -89.22501373]
[65.83610535 -75.03864288]
[75.57782745 -63.63255692]
[85.31954956 -52.22646713]
[92.38112640 -54.75313950]
[106.50428772 -59.80648804]
[113.56587219 -62.33316422]
[113.86037445 -77.33026886]
[114.15488434 -92.32737732]
[114.44938660 -107.32448578]
[101.99649048 -116.58218384]
[97.39556885 -131.40147400]
[102.41576385 -146.08401489]
[115.12671661 -154.98410034]
[130.64079285 -154.67944336]
[142.99253845 -145.28718567]
[147.43243408 -130.41886902]
[142.25325012 -115.79164886]
[129.44650269 -107.02998352]
[129.15199280 -92.03287506]
[128.85748291 -77.03576660]
[128.56297302 -62.03865814]
[136.01142883 -75.05866241]
[150.97563171 -74.02300262]
[164.56742859 -67.67768097]
[174.96998596 -56.87088776]
[180.79278564 -43.04717636]
[181.25749207 -28.05437660]
[176.30198669 -13.89659023]
[166.58866882 -2.46630168]
[153.41593933 4.70859146]
[138.54460144 6.66901350]
[123.96251678 3.15291381]
[111.61889648 -5.36970806]
[103.16428375 -17.75835991]
[94.71725464 -30.15383148]
[96.18751526 -15.22606087]
[97.65776825 -0.29829004]
[99.12802887 14.62948132]
[100.59828186 29.55725098]
[102.06854248 44.48502350]
[103.53879547 59.41279221]
[105.00905609 74.34056091]
[120.72235107 84.06006622]
[126.08575439 101.74085236]
[118.42049408 118.55216217]
[125.49144745 131.78097534]
[132.56239319 145.00979614]
[139.63334656 158.23861694]
[146.70429993 171.46743774]
[152.17655945 175.32530212]
[154.49195862 180.58682251]
[153.78157043 185.35734558]
[160.32769775 198.85357666]
[166.87384033 212.34979248]
[178.81068420 217.32470703]
[183.97299194 228.74244690]
[180.07995605 240.22972107]
[186.35984802 253.85186768]
[192.63975525 267.47399902]
[198.91964722 281.09616089]
[215.88952637 291.91342163]
[213.41679382 311.06039429]
[220.22665405 324.42547607]
[227.03651428 337.79058838]
[235.61332703 350.09661865]
[245.79534912 361.11145020]
[255.97735596 372.12628174]
[266.15936279 383.14111328]
[280.92266846 379.10333252]
[295.86886597 382.40020752]
[307.56347656 392.27413940]
[313.31912231 406.45620728]
[311.81323242 421.68746948]
[303.39181519 434.46786499]
[289.99008179 441.86056519]
[274.68765259 442.16677856]
[261.00088501 435.31616211]
[252.07490540 422.88290405]
[249.96086121 407.72412109]
[255.14453125 393.32312012]
[244.96250916 382.30828857]
[234.78050232 371.29345703]
[224.59849548 360.27862549]
[227.11933899 375.06527710]
[223.88819885 389.71313477]
[215.38050842 402.06704712]
[202.84796143 410.30935669]
[188.13453674 413.22735596]
[173.40499878 410.39175415]
[160.82652283 402.21969604]
[152.24981689 389.91360474]
[148.93675232 375.28405762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 131]
[6 130]
[7 129]
[11 127]
[12 126]
[13 125]
[14 124]
[16 121]
[17 120]
[18 119]
[19 116]
[20 115]
[21 114]
[22 113]
[23 112]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[46 109]
[47 108]
[48 107]
[49 106]
[50 105]
[51 104]
[52 103]
[53 102]
[54 70]
[55 69]
[56 68]
[73 88]
[74 87]
[75 86]
[76 85]
[132 150]
[133 149]
[134 148]
[135 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
