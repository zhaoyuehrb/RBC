%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGCGAGGAGGCGCCGCCAUCUUGGGGCUGCUGGGACUCGCGUCGGUUGGCGACUCCCGGACGUAGGUAGUUUGUUGGGCCGGGUUCUGAGGCCUUGCUUCUCUUUACUUUUCCACUCUAGGCCACG\
) } def
/len { sequence length } bind def

/coor [
[88.29059601 271.04614258]
[94.33692932 255.20700073]
[94.33692932 240.20700073]
[94.33692932 225.20700073]
[94.15428925 210.20811462]
[83.22533417 200.15357971]
[82.64128876 184.95115662]
[93.26150513 173.55604553]
[92.89624023 158.56048584]
[92.53097534 143.56494141]
[92.16571045 128.56938171]
[79.17533112 121.06938934]
[66.00616455 128.25083923]
[52.92542648 135.59210205]
[39.93504333 143.09210205]
[26.94466400 150.59210205]
[21.00095558 157.66725159]
[13.54537010 158.11215210]
[0.37620819 165.29359436]
[-12.79295349 172.47505188]
[-23.80406189 185.36659241]
[-39.23997498 178.35452271]
[-36.77503967 161.58073425]
[-19.97439957 159.30587769]
[-6.80523872 152.12443542]
[6.36392307 144.94299316]
[19.44466400 137.60171509]
[32.43504333 130.10171509]
[45.42542648 122.60172272]
[49.68910217 116.46945190]
[58.82471848 115.08167267]
[71.99388123 107.90022278]
[74.46692657 89.58758545]
[87.02405548 77.41175079]
[75.49435425 67.81665039]
[63.96464539 58.22155762]
[52.43493652 48.62646103]
[36.87813187 45.74611664]
[32.04469299 31.65757179]
[20.51498604 22.06247711]
[8.98528004 12.46738148]
[-2.54442739 2.87228632]
[-17.55154419 6.81767511]
[-31.99934959 1.15724027]
[-40.33237076 -11.93246555]
[-39.34638596 -27.41818428]
[-29.42053223 -39.34534073]
[-14.37150002 -43.12769699]
[0.01405123 -37.31086349]
[8.20458221 -24.13153076]
[7.05066776 -8.65742111]
[18.58037567 0.93767446]
[30.11008263 10.53277016]
[41.63978958 20.12786484]
[56.37191391 22.32190323]
[62.03003311 37.09675598]
[73.55973816 46.69185257]
[85.08944702 56.28694534]
[96.61915588 65.88204193]
[111.50808716 67.70404053]
[125.01127625 61.17228317]
[138.51446533 54.64052963]
[148.95277405 37.47527313]
[168.12545776 39.46224594]
[181.29461670 32.28079605]
[194.46377563 25.09934998]
[207.63293457 17.91790390]
[220.80209351 10.73645687]
[229.21354675 -2.66347432]
[244.09170532 -1.96390557]
[257.26086426 -9.14535236]
[259.57232666 -22.47729301]
[269.02618408 -31.88279533]
[281.98477173 -34.06104660]
[293.64245605 -28.43299294]
[306.98260498 -35.29162598]
[315.71786499 -48.48275757]
[330.57458496 -47.42109680]
[343.91470337 -54.27973175]
[357.25485229 -61.13836670]
[370.59497070 -67.99700165]
[383.93508911 -74.85563660]
[385.31619263 -90.22106171]
[394.80322266 -102.38656616]
[409.36895752 -107.47019196]
[424.36547852 -103.84976959]
[435.00747681 -92.68056488]
[437.89913940 -77.52662659]
[432.11773682 -63.22351837]
[419.50808716 -54.33531952]
[404.09387207 -53.69821548]
[390.79373169 -61.51550674]
[377.45361328 -54.65687180]
[364.11346436 -47.79823685]
[350.77334595 -40.93960190]
[337.43319702 -34.08096695]
[329.65213013 -21.38041115]
[313.84124756 -21.95149612]
[300.50109863 -15.09286118]
[296.09353638 1.08863711]
[281.07513428 9.28077602]
[264.44232178 4.02380943]
[251.27316284 11.20525646]
[243.80366516 24.09152222]
[227.98355103 23.90561867]
[214.81437683 31.08706474]
[201.64521790 38.26851273]
[188.47605896 45.44995880]
[175.30690002 52.63140488]
[173.27409363 62.77417374]
[165.79829407 70.24002838]
[155.21963501 72.34588623]
[145.04621887 68.14372253]
[131.54302979 74.67547607]
[118.03984070 81.20722961]
[126.66082001 107.03964233]
[107.16126251 128.20411682]
[107.52652740 143.19967651]
[107.89179230 158.19522095]
[108.25705719 173.19078064]
[119.41948700 184.05531311]
[119.57629395 199.26812744]
[109.14984131 209.84284973]
[112.51580048 218.44841003]
[109.33692932 225.20700073]
[109.33692932 240.20700073]
[109.33692932 255.20700073]
[115.38327026 271.04614258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 127]
[3 126]
[4 125]
[5 123]
[8 120]
[9 119]
[10 118]
[11 117]
[12 32]
[13 31]
[14 29]
[15 28]
[16 27]
[18 26]
[19 25]
[20 24]
[34 59]
[35 58]
[36 57]
[37 56]
[39 54]
[40 53]
[41 52]
[42 51]
[60 115]
[61 114]
[62 113]
[64 109]
[65 108]
[66 107]
[67 106]
[68 105]
[70 103]
[71 102]
[75 99]
[76 98]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
