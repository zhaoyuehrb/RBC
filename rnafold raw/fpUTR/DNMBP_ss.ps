%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACUCACACGGGAUCGACCCGCCCGCCGCUUCCAGGGGCGGAGGUGACAGCGGGCUGGGGACUGGCGGCUGCAACUGCCUGCCGCGCCGAGGGACCGCCGGGCGGCGGAAAGCAGGUUAUAAAAC\
) } def
/len { sequence length } bind def

/coor [
[126.08673859 140.20378113]
[119.62628174 153.74122620]
[113.16582489 167.27867126]
[106.87329102 180.89498901]
[100.74965668 194.58808899]
[94.62601471 208.28118896]
[96.85058594 224.52874756]
[83.72801208 234.36389160]
[68.75766754 227.66906738]
[67.33975983 211.33132935]
[80.93291473 202.15754700]
[87.05655670 188.46444702]
[93.18019104 174.77134705]
[93.03727722 167.30068970]
[99.62837982 160.81820679]
[106.08883667 147.28076172]
[112.54929352 133.74331665]
[80.30639648 125.20133209]
[72.20925903 96.87679291]
[58.29841232 91.26534271]
[44.38756561 85.65388489]
[30.40838242 80.21491241]
[16.36299896 74.94925690]
[2.31761360 69.68359375]
[-11.72777081 64.41793823]
[-25.77315521 59.15227890]
[-39.81853867 53.88661957]
[-54.04959869 49.14562607]
[-68.44673157 44.93582153]
[-82.84387207 40.72602081]
[-97.24101257 36.51621628]
[-111.63814545 32.30641174]
[-126.03528595 28.09661102]
[-140.43241882 23.88680840]
[-154.17288208 31.69547462]
[-169.38803101 27.42057037]
[-177.05099487 13.59831905]
[-172.61546326 -1.57078159]
[-158.71296692 -9.08717442]
[-143.59159851 -4.49151611]
[-136.22261047 9.48967075]
[-121.82547760 13.69947338]
[-107.42834473 17.90927696]
[-93.03120422 22.11907959]
[-78.63407135 26.32888222]
[-64.23693085 30.53868484]
[-49.83979416 34.74848557]
[-46.51271057 33.30142212]
[-42.30015182 33.46109009]
[-37.99711609 35.63402176]
[-34.55288315 39.84123611]
[-20.50749588 45.10689163]
[-6.46211195 50.37255096]
[7.58327293 55.63821030]
[21.62865829 60.90386963]
[35.67404175 66.16953278]
[43.12159348 65.56518555]
[49.99901962 71.74304199]
[63.90986633 77.35449219]
[77.82070923 82.96595001]
[85.28555298 74.65702820]
[95.83855438 69.63963318]
[108.02444458 69.03948212]
[119.99164581 73.34024811]
[129.77354431 82.25190735]
[135.60922241 94.70096588]
[144.30549622 82.47907257]
[153.00177002 70.25717163]
[161.69804382 58.03527069]
[170.39431763 45.81336975]
[171.66252136 27.49300194]
[187.80615234 20.73009872]
[196.19746399 8.29684162]
[196.80552673 -8.09102917]
[211.42640686 -15.51813984]
[225.01939392 -6.34411669]
[223.60119629 9.99359226]
[208.63072205 16.68815231]
[200.23941040 29.12141037]
[202.22805786 41.12162781]
[195.24711609 51.57027817]
[182.61621094 54.50964355]
[173.91993713 66.73154449]
[165.22366333 78.95344543]
[156.52738953 91.17534637]
[147.83111572 103.39723969]
[152.21865845 117.74121094]
[166.26405334 123.00686646]
[180.30943298 128.27252197]
[190.71672058 117.22879028]
[204.52210999 111.02766418]
[219.60914612 110.58567810]
[233.67785645 115.93907166]
[244.59548950 126.24296570]
[250.71972656 139.90455627]
[251.14576721 154.82929993]
[265.19116211 160.09495544]
[279.23654175 165.36061096]
[293.28192139 170.62626648]
[307.32730103 175.89193726]
[323.40631104 172.66746521]
[334.03366089 185.15711975]
[328.27685547 200.51260376]
[312.05798340 202.93751526]
[302.06164551 189.93731689]
[288.01626587 184.67166138]
[273.97088623 179.40599060]
[259.92547607 174.14033508]
[245.88011169 168.87467957]
[235.74745178 179.84092712]
[222.15139771 186.10931396]
[207.15072632 186.69636536]
[193.03009033 181.48147583]
[181.95202637 171.23011780]
[175.62582397 157.48158264]
[175.04377747 142.31791687]
[160.99839783 137.05226135]
[146.95300293 131.78659058]
[156.75450134 143.14135742]
[168.94346619 151.88372803]
[173.92204285 166.03341675]
[169.89288330 180.48214722]
[158.31056213 190.01368713]
[143.35652161 191.18696594]
[130.42941284 183.57841492]
[124.19615936 169.93486023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 13]
[5 12]
[6 11]
[19 60]
[20 59]
[21 58]
[22 56]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[66 86]
[67 85]
[68 84]
[69 83]
[70 82]
[72 79]
[73 78]
[87 118]
[88 117]
[89 116]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
