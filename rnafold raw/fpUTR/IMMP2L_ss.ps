%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGGAGGGCGGGGUCUGCGCGGGGACUUCCCCCGGGCUGAGCUGCGCAGCGGGGUUUUGGCCAAAUUGGGCGAGGGCACAAAAUAACCACUUACCCCUUCUCACCGAGGAAGAGCGGGAGAAAGGGU\
) } def
/len { sequence length } bind def

/coor [
[110.01679230 126.80069733]
[96.74347687 127.21098328]
[85.29585266 121.68340302]
[78.04435730 111.94071960]
[63.32380295 114.82262421]
[54.49122238 127.65318298]
[39.52143478 130.36613464]
[27.34388924 121.86655426]
[15.28735542 132.11108398]
[1.31064844 126.96318054]
[-13.40990353 129.84507751]
[-28.13045502 132.72698975]
[-42.85100555 135.60888672]
[-50.73470306 145.90071106]
[-63.12791824 147.95396423]
[-73.23999023 141.20036316]
[-88.02587891 143.72572327]
[-100.32643890 153.67593384]
[-114.17467499 148.19180298]
[-128.96055603 150.71716309]
[-141.26112366 160.66737366]
[-155.10935974 155.18324280]
[-169.89524841 157.70858765]
[-184.68113708 160.23394775]
[-199.46702576 162.75930786]
[-214.25292969 165.28466797]
[-224.66134644 177.49302673]
[-240.69041443 176.82318115]
[-250.04399109 163.78898621]
[-245.54679871 148.38916016]
[-230.64872742 142.43711853]
[-216.77827454 150.49876404]
[-201.99238586 147.97341919]
[-187.20649719 145.44805908]
[-172.42060852 142.92269897]
[-157.63471985 140.39735413]
[-146.39173889 130.62776184]
[-131.48591614 135.93125916]
[-116.70002747 133.40591431]
[-105.45705414 123.63632965]
[-90.55123138 128.93983459]
[-75.76534271 126.41447449]
[-62.94943237 114.48970032]
[-45.73290634 120.88832855]
[-31.01235580 118.00643158]
[-16.29180336 115.12452698]
[-1.57125223 112.24263000]
[9.43237019 102.20422363]
[24.46198845 107.14599609]
[32.53537369 94.68180847]
[47.42304993 91.54945374]
[60.44190216 100.10206604]
[75.16245270 97.22016907]
[80.90348816 80.90840912]
[96.76551056 71.16735077]
[116.53460693 73.74942780]
[118.34265900 58.85879517]
[120.15070343 43.96816254]
[121.95875549 29.07752991]
[123.76680756 14.18689632]
[117.74934387 -0.44528526]
[126.96434021 -12.14713287]
[128.77238464 -27.03776550]
[130.58044434 -41.92839813]
[120.63756561 -54.21313858]
[122.37657928 -69.92146301]
[134.76576233 -79.73389435]
[150.45481873 -77.82889557]
[160.13571167 -65.33666992]
[158.06495667 -49.66863251]
[145.47106934 -40.12034988]
[143.66302490 -25.22971535]
[141.85496521 -10.33908272]
[148.00175476 3.22802186]
[138.65744019 15.99494743]
[136.84939575 30.88558006]
[135.04133606 45.77621460]
[133.23329163 60.66684723]
[131.42523193 75.55747986]
[140.15090942 63.35654449]
[144.86137390 49.11535645]
[154.47857666 37.60408020]
[167.65487671 30.43573952]
[182.54394531 28.61481094]
[197.05941772 32.39645004]
[209.16732788 41.25075150]
[217.17102051 53.93700027]
[219.94897461 68.67752075]
[217.11193848 83.40678406]
[209.05743408 96.06083679]
[196.91412354 104.86652374]
[182.38360596 108.58992767]
[167.50195312 106.70931244]
[154.35601807 99.48945618]
[139.65745544 96.49740601]
[151.12219238 106.17003632]
[162.58692932 115.84267426]
[174.05166626 125.51530457]
[189.58869934 128.50050354]
[194.32701111 142.62132263]
[205.79174805 152.29396057]
[217.25648499 161.96658325]
[228.72122192 171.63922119]
[240.18595886 181.31185913]
[248.85685730 184.49963379]
[251.80718994 191.35937500]
[263.03485107 201.30621338]
[274.26251221 211.25306702]
[289.38439941 207.77336121]
[303.65036011 213.87759399]
[311.57485962 227.21858215]
[310.11074829 242.66642761]
[299.82104492 254.28112793]
[284.66229248 257.59658813]
[270.46337891 251.33795166]
[262.68408203 237.91177368]
[264.31567383 222.48072815]
[253.08801270 212.53387451]
[241.86035156 202.58703613]
[230.51332092 192.77659607]
[219.04858398 183.10395813]
[207.58384705 173.43132019]
[196.11911011 163.75869751]
[184.65437317 154.08605957]
[169.93739319 151.79270935]
[164.37904358 136.98004150]
[152.91430664 127.30741119]
[141.44956970 117.63477325]
[129.98483276 107.96214294]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 53]
[5 52]
[8 49]
[10 47]
[11 46]
[12 45]
[13 44]
[16 42]
[17 41]
[19 39]
[20 38]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[62 73]
[63 72]
[64 71]
[95 129]
[96 128]
[97 127]
[98 126]
[100 124]
[101 123]
[102 122]
[103 121]
[104 120]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
