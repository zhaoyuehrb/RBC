%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAAUUGACGAACACGUGACGCGGUCGGGCGGACCACUGCAGACUGAGCGGUGGACCGAAUUGGGACCGCUGGCUUAUAAGCGAUC\
) } def
/len { sequence length } bind def

/coor [
[102.70250702 171.49217224]
[88.76804352 177.04470825]
[74.00102234 174.41125488]
[62.84491348 164.38423157]
[58.65665054 149.98081970]
[62.69649887 135.53506470]
[73.74962616 125.39340210]
[81.25048828 112.40351868]
[73.49010468 126.19072723]
[58.59550476 126.20413971]
[45.78519821 134.00773621]
[32.97489166 141.81132507]
[25.59087944 156.45401001]
[9.20487118 157.11035156]
[0.67338765 143.10513306]
[8.77288818 128.84574890]
[25.17130089 129.00102234]
[37.98160553 121.19742584]
[50.79191208 113.39383698]
[57.63601685 100.16479492]
[73.44689178 99.59320831]
[85.11799622 88.44992065]
[97.07562256 89.27120209]
[100.22881317 74.60636902]
[103.38201141 59.94153595]
[106.53520203 45.27669907]
[109.68840027 30.61186600]
[112.84159088 15.94703197]
[99.52270508 2.54623652]
[96.72808075 -15.99234486]
[105.36925507 -32.46584320]
[121.94821167 -40.57659149]
[123.53369141 -55.49256516]
[125.11917114 -70.40853882]
[118.88387299 -84.94922638]
[127.92308044 -96.78737640]
[129.50856018 -111.70335388]
[131.09403992 -126.61932373]
[132.67951965 -141.53529358]
[134.26499939 -156.45127869]
[135.85047913 -171.36724854]
[137.43595886 -186.28321838]
[126.45684814 -197.41844177]
[125.25548553 -213.00981140]
[134.39910889 -225.69555664]
[149.57038879 -229.48585510]
[163.60589600 -222.59104919]
[169.87850952 -208.26664734]
[165.42648315 -193.27619934]
[152.35192871 -184.69773865]
[150.76644897 -169.78176880]
[149.18096924 -154.86579895]
[147.59548950 -139.94981384]
[146.01000977 -125.03385162]
[144.42453003 -110.11787415]
[142.83905029 -95.20190430]
[149.18775940 -81.72810364]
[140.03514099 -68.82305908]
[138.44966125 -53.90708542]
[136.86418152 -38.99111176]
[146.71032715 -32.99470901]
[153.55134583 -23.65084839]
[156.31834412 -12.35215473]
[154.55329895 -0.80156100]
[148.48440552 9.24435139]
[138.99737549 16.24249077]
[127.50642395 19.10022545]
[124.35323334 33.76506042]
[121.20003510 48.42989349]
[118.04684448 63.09473038]
[114.89364624 77.75956726]
[111.74045563 92.42440033]
[115.15196991 107.03129578]
[129.79042053 113.03350830]
[131.63922119 127.81292725]
[140.96195984 139.56393433]
[150.28471375 151.31495667]
[165.72573853 156.83824158]
[168.39634705 173.01847839]
[155.54924011 183.21081543]
[140.40042114 176.93026733]
[138.53369141 160.63771057]
[129.21095276 148.88668823]
[119.88819885 137.13568115]
[105.91658020 131.97398376]
[103.40095520 116.35404968]
[105.94869995 131.13609314]
[112.81415558 144.47271729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 21]
[10 19]
[11 18]
[12 17]
[23 72]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[32 60]
[33 59]
[34 58]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[73 86]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
