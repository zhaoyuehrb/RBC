%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGAGCAGCGAGCGGGCUUCAGCGAGCCGCAGGAGGCACAGGCCUGUCCUGGGUCCCCGCAGGUCUGCGCGUCUGUUGUUCCCAGCGCUCUUGGAGGCCUGCAAAGGAAGAGCAACCUGUCCAGACUCCCCGCAGGACAGGAAAAAGAGAAAUCUCGAC\
) } def
/len { sequence length } bind def

/coor [
[59.34035873 123.90954590]
[55.83597946 112.79673767]
[55.23095322 101.45472717]
[40.36894608 99.42475891]
[25.50694084 97.39479065]
[10.64493561 95.36482239]
[-4.21707058 93.33485413]
[-19.07907677 91.30488586]
[-33.94108200 89.27490997]
[-48.80308914 87.24494171]
[-63.66509628 85.21497345]
[-61.69610977 100.51998901]
[-71.47072601 111.25212860]
[-85.06397247 110.77376556]
[-96.73944855 120.19094849]
[-108.41492462 129.60812378]
[-120.09039307 139.02531433]
[-124.83582306 146.88926697]
[-132.08480835 148.50926208]
[-143.94068909 157.69827271]
[-155.79658508 166.88728333]
[-161.49446106 182.26473999]
[-177.70391846 184.75184631]
[-187.75004578 171.79006958]
[-181.29824829 156.71339417]
[-164.98559570 155.03138733]
[-153.12969971 145.84237671]
[-141.27381897 136.65336609]
[-129.50758362 127.34983826]
[-117.83209991 117.93265533]
[-106.15663147 108.51547241]
[-94.48115540 99.09828949]
[-93.63061523 86.93176270]
[-83.72858429 77.91246033]
[-96.41838074 69.91439819]
[-109.10817719 61.91632843]
[-124.90849304 61.10366821]
[-131.55003357 47.77177811]
[-144.23982239 39.77371216]
[-160.04014587 38.96104813]
[-166.68168640 25.62915993]
[-179.37147522 17.63109398]
[-192.06127930 9.63302803]
[-204.75106812 1.63496125]
[-217.44087219 -6.36310530]
[-230.13066101 -14.36117172]
[-242.82046509 -22.35923767]
[-255.51025391 -30.35730553]
[-268.20004272 -38.35536957]
[-273.51486206 -38.55460739]
[-277.77444458 -40.59574890]
[-280.44833374 -43.75577927]
[-281.37619019 -47.20565033]
[-293.57946777 -55.92802811]
[-309.94506836 -56.97623825]
[-316.97662354 -71.79141235]
[-307.44064331 -85.13297272]
[-291.14694214 -83.27626801]
[-284.85708618 -68.13130951]
[-272.65380859 -59.40892792]
[-260.20199585 -51.04516602]
[-247.51219177 -43.04710007]
[-234.82240295 -35.04903412]
[-222.13259888 -27.05096817]
[-209.44281006 -19.05290222]
[-196.75300598 -11.05483532]
[-184.06321716 -3.05676866]
[-171.37341309 4.94129801]
[-158.68362427 12.93936443]
[-143.79095459 13.17995071]
[-136.24176025 27.08391571]
[-123.55196381 35.08198166]
[-108.65930176 35.32256699]
[-101.11010742 49.22653198]
[-88.42031097 57.22459793]
[-75.73051453 65.22266388]
[-61.63512421 70.35296631]
[-46.77312088 72.38293457]
[-31.91111374 74.41291046]
[-17.04910660 76.44287872]
[-2.18710089 78.47284698]
[12.67490482 80.50281525]
[27.53691101 82.53278351]
[42.39891815 84.56275177]
[57.26092148 86.59272003]
[68.22714233 68.42676544]
[86.32363129 57.34627151]
[107.48928833 55.83786392]
[126.97424316 64.24005127]
[137.88484192 53.94642258]
[148.79545593 43.65279770]
[159.70605469 33.35917282]
[170.61665344 23.06554985]
[181.52726746 12.77192593]
[166.89845276 9.45562172]
[160.19189453 -3.96160841]
[166.31950378 -17.65293694]
[180.79338074 -21.59078407]
[193.01281738 -12.89105415]
[194.02851868 2.07386422]
[205.88441467 -7.11514378]
[217.74029541 -16.30415154]
[223.43818665 -31.68160820]
[239.64762878 -34.16871262]
[249.69375610 -21.20694923]
[243.24197388 -6.13026428]
[226.92930603 -4.44826221]
[215.07341003 4.74074602]
[203.21752930 13.92975426]
[191.82089233 23.68252945]
[180.91027832 33.97615433]
[169.99967957 44.26977921]
[159.08908081 54.56340408]
[148.17846680 64.85702515]
[137.26786804 75.15065002]
[145.20825195 85.21491241]
[150.28750610 97.78188324]
[151.73481750 111.99986267]
[165.83020020 117.13016510]
[179.92559814 122.26046753]
[194.02098083 127.39076996]
[208.11637878 132.52107239]
[222.21176147 137.65136719]
[236.30715942 142.78167725]
[251.92138672 140.23092651]
[261.23480225 151.85459900]
[274.02325439 143.06623840]
[289.53405762 143.50683594]
[301.80303955 153.00694275]
[306.11245728 167.91360474]
[300.80529785 182.49488831]
[287.92227173 191.14399719]
[272.41714478 190.53517151]
[260.25198364 180.90251160]
[256.10449219 165.94998169]
[241.49845886 168.86769104]
[231.17684937 156.87705994]
[217.08146667 151.74676514]
[202.98606873 146.61645508]
[188.89068604 141.48616028]
[174.79528809 136.35585022]
[160.69990540 131.22555542]
[146.60450745 126.09525299]
[141.25004578 131.34687805]
[154.54840088 138.28617859]
[152.05796814 153.07798767]
[137.22050476 155.28019714]
[130.54109192 141.85014343]
[125.18662262 147.10177612]
[130.04263306 161.29399109]
[134.89863586 175.48622131]
[147.60339355 185.85546875]
[144.70901489 201.99716187]
[129.19299316 207.30612183]
[117.01687622 196.32093811]
[120.70642090 180.34222412]
[115.85041046 166.15000916]
[110.99440002 151.95777893]
[97.87071991 151.87664795]
[85.46522522 148.60571289]
[74.52235413 142.49165344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 85]
[4 84]
[5 83]
[6 82]
[7 81]
[8 80]
[9 79]
[10 78]
[11 77]
[14 32]
[15 31]
[16 30]
[17 29]
[19 28]
[20 27]
[21 26]
[34 76]
[35 75]
[36 74]
[38 72]
[39 71]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[53 60]
[54 59]
[89 115]
[90 114]
[91 113]
[92 112]
[93 111]
[94 110]
[100 109]
[101 108]
[102 107]
[118 143]
[119 142]
[120 141]
[121 140]
[122 139]
[123 138]
[124 137]
[126 135]
[149 158]
[150 157]
[151 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
