%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUUCUGGGAGCCUGGGCACCCCGGAAGCGGAAGUCCAGGAGUUAAACUCGUCAUUUCCUCCAGCUAGAGGAGCUCAACUGAUCUGUUUUCUUUCGCCCAGCCAAAAUCACAGA\
) } def
/len { sequence length } bind def

/coor [
[105.06044006 584.28735352]
[103.03543854 569.42462158]
[101.01043701 554.56195068]
[98.98543549 539.69927979]
[96.96044159 524.83660889]
[92.88538361 518.55035400]
[95.08749390 509.54464722]
[93.46570587 494.63256836]
[91.84392548 479.72048950]
[89.59764862 477.83764648]
[88.01490021 474.89245605]
[87.52751160 471.15365601]
[88.45383453 467.04953003]
[90.94390869 463.12072754]
[90.94390869 448.12072754]
[90.94390869 433.12072754]
[90.94390869 418.12072754]
[90.94390869 403.12072754]
[90.94390869 388.12072754]
[78.63425446 382.04360962]
[70.12554932 371.18591309]
[67.13881683 357.65063477]
[70.31842041 344.09112549]
[79.09412384 333.19100952]
[91.78234100 327.13311768]
[92.18852997 312.13864136]
[92.59472656 297.14413452]
[93.00091553 282.14962769]
[93.40710449 267.15512085]
[93.81329346 252.16062927]
[94.21949005 237.16613770]
[94.62567902 222.17163086]
[95.03186798 207.17713928]
[95.03186798 192.17713928]
[94.62567902 177.18263245]
[94.21949005 162.18812561]
[83.26313782 152.16346741]
[82.63759613 136.96269226]
[93.22667694 125.53863525]
[92.82048798 110.54413605]
[87.83892059 96.39550018]
[78.76130676 84.45410156]
[69.68369293 72.51271057]
[60.60608292 60.57131195]
[46.20719910 51.62097549]
[50.82174301 35.30710983]
[67.77548981 35.22518539]
[72.54747772 51.49369812]
[81.62509155 63.43509293]
[90.70270538 75.37648773]
[99.78031921 87.31788635]
[107.22468567 86.40610504]
[100.88967133 72.80950165]
[111.86331177 62.58310318]
[124.98014832 69.85968781]
[122.11342621 84.58255005]
[129.55780029 83.67076874]
[135.48518372 69.89157104]
[141.41255188 56.11237717]
[147.33993530 42.33318329]
[153.26731873 28.55398941]
[159.19468689 14.77479649]
[153.11282349 0.18759468]
[159.20417786 -14.39564610]
[173.85487366 -20.32294846]
[188.37289429 -14.07774830]
[194.14497375 0.63478673]
[187.74662781 15.08597183]
[172.97389221 20.70217323]
[167.04650879 34.48136902]
[161.11912537 48.26056290]
[155.19175720 62.03975677]
[149.26437378 75.81894684]
[143.33699036 89.59814453]
[107.81498718 110.13794708]
[108.22117615 125.13244629]
[119.41321564 135.96647644]
[119.61154175 151.17881775]
[109.21398926 161.78193665]
[109.62017822 176.77644348]
[110.02636719 191.77093506]
[113.25811005 197.78607178]
[112.91523743 203.62805176]
[110.02636719 207.58332825]
[109.62017822 222.57781982]
[109.21398926 237.57232666]
[108.80779266 252.56681824]
[108.40160370 267.56130981]
[107.99541473 282.55581665]
[107.58922577 297.55032349]
[107.18302917 312.54483032]
[106.77684021 327.53930664]
[120.91207886 335.99481201]
[128.84335327 350.32400513]
[128.50703430 366.60485840]
[120.08792877 380.43466187]
[105.94390869 388.12072754]
[105.94390869 403.12072754]
[105.94390869 418.12072754]
[105.94390869 433.12072754]
[105.94390869 448.12072754]
[105.94390869 463.12072754]
[106.75598907 478.09872437]
[108.37777710 493.01077271]
[109.99956512 507.92285156]
[111.82312012 522.81158447]
[113.84812164 537.67425537]
[115.87312317 552.53698730]
[117.89812469 567.39965820]
[119.92312622 582.26232910]
[132.65490723 591.62597656]
[134.95391846 607.26214600]
[125.45622253 619.89422607]
[109.79661560 622.02777100]
[97.26566315 612.39703369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[2 109]
[3 108]
[4 107]
[5 106]
[7 105]
[8 104]
[9 103]
[14 102]
[15 101]
[16 100]
[17 99]
[18 98]
[19 97]
[25 92]
[26 91]
[27 90]
[28 89]
[29 88]
[30 87]
[31 86]
[32 85]
[33 84]
[34 81]
[35 80]
[36 79]
[39 76]
[40 75]
[41 51]
[42 50]
[43 49]
[44 48]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
