%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUUUGAAACUCCGGCGCGCCGGCGGCCAUCAAGGGCUAGAAGCGCGACGGCGGUAGCAGCUAGGCUUGGCCCCCGGCGUGGAGCAGACGCGGACCCCUCCUUCCUGGCGGCGGCGGCGCGGGCUCAGAGCCCGGCAACGGGCGGGCGGGCAGA\
) } def
/len { sequence length } bind def

/coor [
[-118.04387665 42.45968628]
[-132.36470032 37.99713898]
[-146.68550110 33.53459167]
[-161.00631714 29.07204628]
[-175.32713318 24.60950089]
[-189.64794922 20.14695549]
[-203.96876526 15.68441010]
[-209.17163086 16.86428452]
[-213.82550049 15.98145962]
[-217.22647095 13.60312176]
[-219.00477600 10.49579811]
[-233.03002930 5.17672539]
[-247.05526733 -0.14234808]
[-261.08050537 -5.46142149]
[-266.34515381 -4.59784126]
[-270.93722534 -5.76004887]
[-274.18838501 -8.33939362]
[-275.77581787 -11.54841900]
[-289.45431519 -17.70461082]
[-303.13281250 -23.86080360]
[-316.81130981 -30.01699448]
[-330.48980713 -36.17318726]
[-344.16830444 -42.32938004]
[-357.84680176 -48.48557281]
[-373.60665894 -47.09369659]
[-382.03717041 -59.37277603]
[-395.71566772 -65.52896881]
[-409.39416504 -71.68515778]
[-423.07266235 -77.84134674]
[-436.75115967 -83.99754333]
[-448.45614624 -74.26332855]
[-463.16683960 -70.59143829]
[-477.95248413 -73.65819550]
[-489.89129639 -82.80288696]
[-496.64788818 -96.16918182]
[-496.92990112 -111.08179474]
[-510.60842896 -117.23798370]
[-524.28692627 -123.39418030]
[-537.96539307 -129.55036926]
[-551.40203857 -122.01618195]
[-566.52178955 -123.81748962]
[-577.55126953 -134.05540466]
[-580.40319824 -148.65007019]
[-596.16308594 -147.25819397]
[-604.59356689 -159.53727722]
[-618.27209473 -165.69346619]
[-631.95056152 -171.84965515]
[-648.20336914 -169.66374207]
[-658.00726318 -182.80967712]
[-651.27685547 -197.76405334]
[-634.93579102 -199.14309692]
[-625.79437256 -185.52816772]
[-612.11590576 -179.37196350]
[-598.43737793 -173.21577454]
[-583.65588379 -175.04798889]
[-574.24700928 -162.32856750]
[-561.43157959 -169.87193298]
[-546.45446777 -168.40525818]
[-535.07989502 -158.28239441]
[-531.80920410 -143.22886658]
[-518.13073730 -137.07267761]
[-504.45220947 -130.91648865]
[-490.77371216 -124.76029205]
[-479.42446899 -134.43809509]
[-464.93920898 -138.24420166]
[-450.17739868 -135.37191772]
[-438.07720947 -126.33833313]
[-431.07064819 -112.89231873]
[-430.59497070 -97.67604065]
[-416.91647339 -91.51985168]
[-403.23797607 -85.36365509]
[-389.55947876 -79.20746613]
[-375.88098145 -73.05126953]
[-361.09951782 -74.88347626]
[-351.69061279 -62.16407013]
[-338.01211548 -56.00787735]
[-324.33361816 -49.85168457]
[-310.65512085 -43.69549179]
[-296.97662354 -37.53929901]
[-283.29812622 -31.38310814]
[-269.61962891 -25.22691727]
[-255.76144409 -19.48666573]
[-241.73619080 -14.16759205]
[-227.71095276 -8.84851837]
[-213.68571472 -3.52944517]
[-199.50621033 1.36359668]
[-185.18539429 5.82614231]
[-170.86459351 10.28868866]
[-156.54377747 14.75123405]
[-142.22296143 19.21377945]
[-127.90214539 23.67632484]
[-113.58133698 28.13887215]
[-102.00141907 16.90652275]
[-86.25038910 13.00818729]
[-70.58837128 17.59540367]
[-59.30044556 29.51140976]
[-55.52432251 45.58106613]
[-41.11655045 49.75432968]
[-26.70878029 53.92759323]
[-12.33135319 50.03672409]
[-1.22868979 61.30799103]
[13.17908192 65.48125458]
[27.58685303 69.65451050]
[41.96427917 65.76364899]
[53.06694412 77.03491211]
[67.47471619 81.20817566]
[81.88248444 85.38143921]
[96.29026031 89.55469513]
[111.27125549 90.30957031]
[126.02555084 87.60574341]
[138.15960693 76.57411957]
[153.69580078 81.82376099]
[156.65182495 97.95428467]
[143.98678589 108.37199402]
[128.72937012 102.36004639]
[113.97507477 105.06386566]
[113.07105255 112.50918579]
[110.35897827 134.84513855]
[124.03747559 141.00132751]
[133.20556641 141.67997742]
[137.92749023 147.42167664]
[151.47924805 153.85206604]
[165.03100586 160.28245544]
[178.58276367 166.71284485]
[192.13452148 173.14323425]
[205.68627930 179.57362366]
[222.58816528 180.90116882]
[225.99140930 197.51002502]
[210.97373962 205.37806702]
[199.25588989 193.12538147]
[185.70413208 186.69499207]
[172.15237427 180.26460266]
[158.60061646 173.83421326]
[145.04885864 167.40382385]
[131.49710083 160.97343445]
[117.88128662 154.67982483]
[104.20278931 148.52363586]
[89.17247772 133.71519470]
[85.61892700 116.80318451]
[92.11699677 103.96247101]
[77.70922852 99.78920746]
[63.30145264 95.61594391]
[48.89368057 91.44268036]
[33.48571396 95.03504944]
[23.41359138 84.06228638]
[9.00582027 79.88902283]
[-5.40195179 75.71575928]
[-20.80991936 79.30812836]
[-30.88204193 68.33536530]
[-45.28981400 64.16210175]
[-59.69758606 59.98883820]
[-69.29429626 70.20834351]
[-82.30043030 75.26023865]
[-96.14705658 74.20807648]
[-108.12560272 67.31504059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 88]
[6 87]
[7 86]
[11 85]
[12 84]
[13 83]
[14 82]
[18 81]
[19 80]
[20 79]
[21 78]
[22 77]
[23 76]
[24 75]
[26 73]
[27 72]
[28 71]
[29 70]
[30 69]
[36 63]
[37 62]
[38 61]
[39 60]
[43 56]
[45 54]
[46 53]
[47 52]
[97 151]
[98 150]
[99 149]
[101 147]
[102 146]
[103 145]
[105 143]
[106 142]
[107 141]
[108 140]
[109 116]
[110 115]
[118 137]
[119 136]
[121 135]
[122 134]
[123 133]
[124 132]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
