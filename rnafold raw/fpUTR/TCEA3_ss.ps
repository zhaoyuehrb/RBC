%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGAGCCCCGCCCCCGCCGGGCGUGUGUGUCGUGUGUGUUUGGGGCCCGCGCGGGUUGCGCGCCCUCCGCCUUCGCGCCUCCUGCCCCCGAGGCCCUACUGCUGCCCCUGUGCCCCUCGCCCCGCCGGGCGUCGCGGGCCAAC\
) } def
/len { sequence length } bind def

/coor [
[179.27012634 198.55635071]
[169.06753540 187.56056213]
[158.86494446 176.56478882]
[148.66235352 165.56901550]
[136.54660034 164.78825378]
[127.95641327 155.64894104]
[127.92389679 142.70455933]
[117.95861053 131.49325562]
[107.99333191 120.28196716]
[95.81604767 123.47534180]
[82.76988220 119.32434845]
[73.23781586 108.01042938]
[62.35168839 118.32993317]
[51.46555710 128.64944458]
[40.57942581 138.96894836]
[29.69329643 149.28845215]
[27.82913780 165.22282410]
[14.13326359 173.57762146]
[-0.88802236 167.94375610]
[-5.71167469 152.64303589]
[3.36259913 139.41287231]
[19.37379265 138.40231323]
[30.25992393 128.08280945]
[41.14605331 117.76331329]
[52.03218460 107.44380951]
[62.91831589 97.12430573]
[48.41740417 100.96142578]
[35.65187073 108.83805084]
[21.00819016 112.08807373]
[6.10906887 110.35135651]
[-7.39448357 103.82034302]
[-18.00610352 93.21876526]
[-24.54988861 79.72139740]
[-26.30070877 64.82392883]
[-23.06454659 50.17717743]
[-15.20001221 37.40419769]
[-3.57859397 27.92038536]
[10.51190758 22.77667618]
[25.51008797 22.54305077]
[39.75395966 27.24540329]
[51.66512299 36.36265182]
[59.92367172 48.88448715]
[63.61452484 63.42424393]
[71.36182404 76.26867676]
[70.72087860 61.28237534]
[70.07993317 46.29607391]
[69.43898773 31.30977440]
[68.79804230 16.32347488]
[68.15708923 1.33717501]
[67.51614380 -13.64912510]
[66.71510315 -28.62771988]
[65.75405121 -43.59690094]
[53.80168533 -59.77168274]
[62.94797516 -76.76091003]
[61.34816742 -91.67535400]
[59.74836349 -106.58979797]
[58.14855957 -121.50424194]
[56.54875565 -136.41868591]
[44.52895355 -146.32637024]
[43.11898422 -161.47451782]
[52.63851929 -172.87251282]
[51.03871536 -187.78695679]
[49.43890762 -202.70140076]
[47.83910370 -217.61584473]
[46.23929977 -232.53028870]
[31.98231125 -238.09776306]
[21.95446968 -249.66067505]
[18.46010208 -264.56195068]
[22.30218887 -279.37738037]
[32.59784317 -290.70248413]
[46.98120117 -295.93484497]
[62.14707184 -293.87210083]
[74.61045074 -284.98825073]
[81.50734711 -271.32473755]
[81.25289154 -256.02136230]
[73.90557098 -242.59468079]
[61.15374374 -234.13008118]
[62.75354767 -219.21563721]
[64.35335541 -204.30119324]
[65.95315552 -189.38674927]
[67.55296326 -174.47230530]
[79.27333069 -165.35263062]
[81.10822296 -150.25006104]
[71.46319580 -138.01849365]
[73.06300354 -123.10404968]
[74.66281128 -108.18960571]
[76.26261139 -93.27516174]
[77.86241913 -78.36071777]
[86.42706299 -72.63060760]
[90.47325134 -62.91423035]
[88.42334747 -52.36590958]
[80.72322845 -44.55795670]
[81.68428040 -29.58877373]
[85.27708435 -23.06902504]
[82.50244904 -14.29007149]
[83.14339447 0.69622880]
[83.78433990 15.68252850]
[84.42528534 30.66882896]
[85.06623077 45.65512848]
[85.70717621 60.64142990]
[86.34812164 75.62773132]
[108.81745148 75.65744781]
[122.27310944 91.48496246]
[119.20462036 110.31668091]
[129.16990662 121.52797699]
[139.13519287 132.73927307]
[156.71868896 138.09602356]
[159.65812683 155.36642456]
[169.86071777 166.36219788]
[180.06330872 177.35797119]
[190.26589966 188.35375977]
[200.81568909 199.01687622]
[211.70181274 209.33638000]
[220.14639282 213.00485229]
[222.70733643 219.99462891]
[233.37045288 230.54440308]
[244.03356934 241.09419250]
[254.69668579 251.64396667]
[265.47192383 262.07922363]
[283.44857788 265.91510010]
[287.85186768 282.87145996]
[298.95602417 292.95596313]
[310.06021118 303.04046631]
[321.16436768 313.12500000]
[332.26855469 323.20950317]
[348.40063477 326.15695190]
[353.65856934 341.69033813]
[342.63339233 353.83026123]
[326.66690063 350.08822632]
[322.18402100 334.31369019]
[311.07986450 324.22915649]
[299.97570801 314.14465332]
[288.87152100 304.06015015]
[277.76736450 293.97561646]
[265.62918091 294.23217773]
[256.29003906 285.85968018]
[255.15243530 272.96533203]
[248.08416748 270.62976074]
[244.14691162 262.30709839]
[233.48379517 251.75730896]
[222.82067871 241.20753479]
[212.15754700 230.65774536]
[201.38230896 220.22250366]
[190.49618530 209.90299988]
[186.91159058 209.65701294]
[183.27688599 207.61801147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[3 109]
[4 108]
[7 106]
[8 105]
[9 104]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[44 101]
[45 100]
[46 99]
[47 98]
[48 97]
[49 96]
[50 95]
[51 93]
[52 92]
[54 88]
[55 87]
[56 86]
[57 85]
[58 84]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[112 144]
[113 143]
[115 142]
[116 141]
[117 140]
[118 139]
[119 137]
[121 134]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
