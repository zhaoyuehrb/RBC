%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCACGUCAUGGCGCGCCUCGGUGGCGUCAGAGCGGCGUCGGGCCUGGCGGGAAAGUCGAAAACUACGGGCGGCGACGGCUUCUCGGAAGUAAUUUAAGUGCACAAGACAUUGGUCAAA\
) } def
/len { sequence length } bind def

/coor [
[69.35684967 339.31567383]
[61.87724304 326.15002441]
[59.08022690 311.26864624]
[61.26920700 296.28573608]
[68.20673370 282.82656860]
[79.14028168 272.35107422]
[92.88385773 265.99551392]
[91.32884216 251.07633972]
[89.77382660 236.15716553]
[80.75881195 224.30058289]
[87.02378845 209.77265930]
[85.46877289 194.85346985]
[83.72021484 179.95573425]
[81.77841187 165.08195496]
[79.83660889 150.20817566]
[77.89480591 135.33439636]
[66.81739044 125.22048950]
[51.82876587 124.63645935]
[36.84014130 124.05242920]
[28.02111435 126.87101746]
[21.47144318 123.25365448]
[6.50303030 122.28070831]
[-8.46538162 121.30775452]
[-23.43379402 120.33480835]
[-38.40220642 119.36185455]
[-52.67518616 126.18773651]
[-64.87378693 117.64119720]
[-79.84220123 116.66824341]
[-94.81061554 115.69529724]
[-109.26705170 123.43760681]
[-123.05571747 114.56040192]
[-121.99201202 98.19579315]
[-107.17018890 91.17827606]
[-93.83766174 100.72688293]
[-78.86924744 101.69982910]
[-63.90083694 102.67278290]
[-50.69850159 95.77731323]
[-37.42925644 104.39344025]
[-22.46084404 105.36639404]
[-7.49243164 106.33934021]
[7.47598076 107.31229401]
[22.44439316 108.28524780]
[37.42417526 109.06380463]
[52.41279984 109.64783478]
[67.40142822 110.23186493]
[69.79794312 89.88345337]
[82.83301544 75.96513367]
[77.49993896 61.94520569]
[72.16687012 47.92528152]
[66.83379364 33.90535736]
[52.31457138 27.66293716]
[46.53967667 12.95150757]
[52.93525314 -1.50090230]
[67.70691681 -7.11993408]
[82.09090424 -0.57191592]
[87.55344391 14.25832939]
[80.85371399 28.57228088]
[86.18679047 42.59220505]
[91.51986694 56.61212921]
[96.85294342 70.63205719]
[102.44670105 70.56542969]
[107.95268250 71.55470276]
[113.17338562 73.56437683]
[117.92152405 76.52236938]
[129.75233459 67.30109406]
[141.58314514 58.07981873]
[148.03477478 40.89288712]
[165.43138123 39.01946259]
[177.01881409 29.49415588]
[188.60624695 19.96885300]
[200.19367981 10.44354916]
[205.94091797 -4.29686975]
[220.68601990 -6.40191603]
[232.27345276 -15.92722034]
[243.86088562 -25.45252419]
[249.11532593 -40.98709106]
[265.24676514 -43.93812943]
[275.66055298 -31.26986313]
[269.64389038 -16.01431847]
[253.38618469 -13.86509228]
[241.79875183 -4.33978796]
[230.21131897 5.18551636]
[225.29290771 19.24462128]
[209.71899414 22.03098106]
[198.13156128 31.55628395]
[186.54412842 41.08158875]
[174.95669556 50.60689163]
[173.43856812 62.68409729]
[163.75701904 70.70845795]
[150.80442810 69.91062927]
[138.97361755 79.13190460]
[127.14280701 88.35317993]
[129.85426331 96.04654694]
[130.38471985 104.34433746]
[128.60931396 112.62849426]
[124.57812500 120.25893402]
[118.51856232 126.62290192]
[110.82378387 131.18395996]
[102.02780151 133.52653503]
[92.76859283 133.39259338]
[94.71039581 148.26637268]
[96.65219879 163.14015198]
[98.59400177 178.01393127]
[102.85381317 186.23425293]
[100.38795471 193.29846191]
[101.94297028 208.21763611]
[111.06921387 221.14134216]
[104.69300842 234.60215759]
[106.24802399 249.52133179]
[107.80303955 264.44052124]
[122.56184387 267.82525635]
[135.42062378 275.82092285]
[144.98457336 287.56015015]
[150.21624756 301.76959229]
[150.54815674 316.90789795]
[145.94430542 331.33300781]
[136.90409851 343.48016357]
[124.40811920 352.03170776]
[109.81185913 356.06008911]
[94.69860077 355.12832642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 110]
[8 109]
[9 108]
[11 106]
[12 105]
[13 103]
[14 102]
[15 101]
[16 100]
[17 45]
[18 44]
[19 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[27 36]
[28 35]
[29 34]
[47 60]
[48 59]
[49 58]
[50 57]
[64 92]
[65 91]
[66 90]
[68 87]
[69 86]
[70 85]
[71 84]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
