%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGGGGCGGGGGCGGGGCCUCACUCUGCGAUAUAACUCGGGUCGCGCGGCUCGCGCAGGCCGCCACCGUCGUCCGCAAAGCCUGAGUCCUGUCCUUUCUCUCUCCCCGGACAGC\
) } def
/len { sequence length } bind def

/coor [
[117.19998932 282.39007568]
[115.57820129 267.47799683]
[113.95641327 252.56593323]
[112.33463287 237.65385437]
[110.71284485 222.74179077]
[109.09105682 207.82972717]
[107.46927643 192.91764832]
[98.40126801 181.10153198]
[104.60115051 166.54571533]
[102.97937012 151.63363647]
[101.35758209 136.72157288]
[99.73579407 121.80950165]
[86.67823792 114.42707825]
[73.06460571 120.72541809]
[59.45097733 127.02375031]
[45.83734512 133.32208252]
[32.22371292 139.62042236]
[18.61008263 145.91876221]
[11.75028992 160.42126465]
[-3.89765191 163.95983887]
[-16.32998085 153.81997681]
[-16.00967789 137.78012085]
[-3.18245220 128.14468384]
[12.31174660 132.30513000]
[25.92537880 126.00679016]
[39.53900909 119.70845795]
[53.15264130 113.41011810]
[66.76627350 107.11178589]
[80.37990570 100.81344604]
[89.77754974 89.12224579]
[93.00211334 74.47293854]
[96.22666931 59.82363129]
[99.45122528 45.17432022]
[91.20467377 31.95947647]
[94.68351746 17.14892960]
[107.33267212 9.36854172]
[110.55722809 -5.28076696]
[113.78178406 -19.93007469]
[117.00634003 -34.57938385]
[120.23089600 -49.22869110]
[123.45545197 -63.87800217]
[126.68000793 -78.52730560]
[129.90457153 -93.17662048]
[119.77842712 -104.78555298]
[118.44522858 -119.95381165]
[126.20748138 -132.84611511]
[139.90881348 -138.62637329]
[143.13337708 -153.27568054]
[146.35792542 -167.92498779]
[149.58248901 -182.57429504]
[143.27975464 -193.92721558]
[146.35856628 -206.12721252]
[156.61601257 -212.69488525]
[160.23608398 -227.25149536]
[163.65870667 -241.85580444]
[166.88325500 -256.50509644]
[158.63670349 -269.71994019]
[162.11555481 -284.53048706]
[174.76470947 -292.31088257]
[177.98925781 -306.96020508]
[175.48922729 -323.72879028]
[190.91043091 -330.77313232]
[201.94850159 -317.90466309]
[192.63858032 -303.73562622]
[189.41401672 -289.08633423]
[197.62718201 -276.71380615]
[194.56570435 -261.81137085]
[181.53256226 -253.28054810]
[178.30801392 -238.63124084]
[179.96531677 -231.32534790]
[174.79269409 -223.63142395]
[171.17262268 -209.07481384]
[176.96211243 -192.56878662]
[164.23179626 -179.34974670]
[161.00723267 -164.70043945]
[157.78268433 -150.05113220]
[154.55812073 -135.40182495]
[164.56604004 -124.40275574]
[166.19754028 -109.44273376]
[158.61857605 -96.23619080]
[144.55387878 -89.95205688]
[141.32931519 -75.30274963]
[138.10476685 -60.65344238]
[134.88020325 -46.00413513]
[131.65565491 -31.35482788]
[128.43109131 -16.70551872]
[125.20653534 -2.05621028]
[121.98197937 12.59309769]
[130.19514465 24.96562958]
[127.13366699 39.86804581]
[114.10053253 48.39888000]
[110.87597656 63.04818726]
[107.65142059 77.69749451]
[104.42686462 92.34680176]
[108.70374298 92.44587708]
[113.17760468 94.68740082]
[116.86913300 99.12810516]
[118.81307220 105.40859985]
[118.22473145 112.77899170]
[114.64786530 120.18772125]
[116.26965332 135.09979248]
[117.89143372 150.01185608]
[119.51322174 164.92391968]
[128.69721985 177.80665588]
[122.38134003 191.29586792]
[124.00312805 206.20793152]
[125.62491608 221.12001038]
[127.24669647 236.03207397]
[128.86848450 250.94413757]
[130.49026489 265.85620117]
[132.11206055 280.76828003]
[143.66506958 291.89965820]
[142.02198792 307.85833740]
[128.44325256 316.40222168]
[113.34530640 310.97714233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[3 109]
[4 108]
[5 107]
[6 106]
[7 105]
[9 103]
[10 102]
[11 101]
[12 100]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[30 94]
[31 93]
[32 92]
[33 91]
[36 88]
[37 87]
[38 86]
[39 85]
[40 84]
[41 83]
[42 82]
[43 81]
[47 77]
[48 76]
[49 75]
[50 74]
[53 72]
[54 71]
[55 69]
[56 68]
[59 65]
[60 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
