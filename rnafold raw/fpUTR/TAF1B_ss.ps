%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUCGCGUUUCCGGCCGGAAGCUUCUCCAGCCUUUCCCGGAAGCUGCGCUCGCUACCCGGGUAACGGGUCCCGGCUGUGGAAGCUCCCGCGGCGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[63.90570450 421.42883301]
[48.72243118 426.61032104]
[35.28290939 417.84912109]
[33.89679337 401.86605835]
[45.62738419 390.92199707]
[47.48886871 376.03793335]
[49.35034943 361.15390015]
[51.21183014 346.26983643]
[40.23331451 336.23937988]
[37.23077393 321.49322510]
[43.56103897 307.64474487]
[56.98711014 300.09179688]
[58.84859085 285.20776367]
[60.71007538 270.32369995]
[58.42216110 265.94692993]
[58.98754501 260.06558228]
[63.17806625 254.58300781]
[65.96128082 239.84349060]
[68.74449921 225.10395813]
[63.50307083 211.16204834]
[73.66660309 199.03715515]
[76.44982147 184.29762268]
[79.23303986 169.55809021]
[82.01625824 154.81857300]
[84.79946899 140.07904053]
[87.58268738 125.33950806]
[90.36590576 110.59998322]
[85.92478943 97.34222412]
[94.89456940 86.61680603]
[97.67778015 71.87727356]
[100.46099854 57.13774490]
[103.24421692 42.39821625]
[106.02743530 27.65868759]
[94.29264832 15.59548473]
[92.01762390 -0.91274601]
[99.89448547 -15.41027641]
[114.68367767 -22.34452057]
[117.00714874 -37.16347885]
[119.33061981 -51.98243332]
[121.65409851 -66.80139160]
[112.61553955 -79.48768616]
[115.18296814 -94.48312378]
[127.33312225 -103.02182770]
[121.82682800 -117.85392761]
[131.44216919 -129.22909546]
[133.76564026 -144.04804993]
[136.08911133 -158.86700439]
[134.31025696 -168.01185608]
[138.72219849 -174.10778809]
[127.98134613 -185.30661011]
[125.90766907 -200.68449402]
[133.29855347 -214.32833862]
[147.31204224 -220.99180603]
[162.55967712 -218.11264038]
[173.17840576 -206.79795837]
[175.08512878 -191.39848328]
[167.54667664 -177.83561707]
[153.46173096 -171.32456970]
[150.90806580 -156.54353333]
[148.58459473 -141.72457886]
[146.26112366 -126.90562439]
[151.93360901 -113.13346863]
[142.15206909 -100.69834900]
[151.10585022 -88.85075378]
[148.96061707 -73.78912354]
[136.47305298 -64.47792053]
[134.14958191 -49.65896225]
[131.82611084 -34.84000397]
[129.50263977 -20.02104759]
[139.85369873 -11.43546581]
[144.60659790 1.26120472]
[142.40281677 14.74829578]
[133.71852112 25.44071579]
[120.76696014 30.44190407]
[117.98374176 45.18143463]
[115.20053101 59.92096329]
[112.41731262 74.66049194]
[109.63409424 89.40001678]
[114.07521057 102.65777588]
[105.10543060 113.38319397]
[102.32221985 128.12272644]
[99.53900146 142.86225891]
[96.75578308 157.60177612]
[93.97256470 172.34130859]
[91.18935394 187.08084106]
[88.40613556 201.82037354]
[93.44848633 216.81654358]
[83.48402405 227.88717651]
[80.70081329 242.62669373]
[77.91759491 257.36624146]
[75.59412384 272.18518066]
[73.73264313 287.06924438]
[71.87116241 301.95327759]
[83.02356720 312.58013916]
[85.74826050 327.56109619]
[79.20653534 341.11358643]
[66.09587860 348.13131714]
[64.23439789 363.01538086]
[62.37291336 377.89941406]
[60.51143265 392.78347778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 100]
[6 99]
[7 98]
[8 97]
[12 93]
[13 92]
[14 91]
[17 90]
[18 89]
[19 88]
[21 86]
[22 85]
[23 84]
[24 83]
[25 82]
[26 81]
[27 80]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[37 69]
[38 68]
[39 67]
[40 66]
[43 63]
[45 61]
[46 60]
[47 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
