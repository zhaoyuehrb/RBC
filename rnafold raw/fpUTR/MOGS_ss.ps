%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGGCGGGAGGCGGAGGCGGAGGCGCAGGCGCUGGCUGGCAGGUGUCGCUAACCGGACGGUGGUCGCCAGGGCGAGAGGCGGGAGCCGGAGAGGUGAGGCAGGACCCGGGCUCCACUGCCGCCUCUCCGAGCUCUUGUGACGCGGACCUCAGUGCCAGG\
) } def
/len { sequence length } bind def

/coor [
[106.51677704 307.16989136]
[91.72335815 309.65081787]
[78.71521759 302.18167114]
[73.40041351 288.15579224]
[67.00332642 301.72329712]
[60.60623932 315.29080200]
[54.20915222 328.85830688]
[55.32214737 344.64031982]
[42.89592361 352.85238647]
[44.79412842 369.14132690]
[31.47690201 378.71124268]
[16.64386559 371.71746826]
[15.55397511 355.35455322]
[29.32841682 346.45532227]
[27.75785637 331.64373779]
[40.64164352 322.46121216]
[47.03873062 308.89370728]
[53.43581772 295.32620239]
[59.83290482 281.75869751]
[65.30664825 267.79309082]
[69.83245850 253.49214172]
[74.35826874 239.19120789]
[78.88407898 224.89025879]
[83.13512421 210.50524902]
[87.10984802 196.04144287]
[91.08456421 181.57763672]
[95.05928802 167.11383057]
[98.75623322 152.57655334]
[102.17403412 137.97111511]
[105.59183502 123.36569214]
[90.98938751 120.56927490]
[81.77220917 110.19905090]
[80.86473846 97.34928131]
[67.97119904 89.68400574]
[52.15508270 89.28260803]
[45.16901016 76.12798309]
[32.27546692 68.46269989]
[19.38192177 60.79742432]
[6.48837805 53.13214111]
[-6.40516615 45.46686172]
[-15.42686939 43.75772858]
[-19.47027016 37.52924728]
[-32.21461868 29.61840057]
[-44.95897293 21.70755196]
[-60.76449585 21.00327301]
[-67.49730682 7.71724653]
[-83.30283356 7.01296663]
[-90.03564453 -6.27305937]
[-102.77999878 -14.18390751]
[-115.52434540 -22.09475517]
[-128.26869202 -30.00560379]
[-142.58714294 -24.02547073]
[-157.67822266 -27.63636017]
[-167.73915100 -39.44981003]
[-168.90126038 -54.92330551]
[-160.71771240 -68.10697937]
[-146.33523560 -73.93142700]
[-131.28421021 -70.15704346]
[-121.35203552 -58.23514938]
[-120.35784912 -42.74995422]
[-107.61350250 -34.83910751]
[-94.86914825 -26.92825890]
[-82.12480164 -19.01741028]
[-67.23083496 -18.87896729]
[-59.58646011 -5.02710438]
[-44.69249725 -4.88866138]
[-37.04812241 8.96320057]
[-24.30377197 16.87404823]
[-11.55942154 24.78489685]
[1.26011431 32.57331848]
[14.15365791 40.23859787]
[27.04720306 47.90387726]
[39.94074631 55.56916046]
[52.83428955 63.23443985]
[67.72817230 63.08756638]
[75.63647461 76.79045868]
[88.53002167 84.45574188]
[102.51343536 79.26462555]
[117.26437378 85.63936615]
[123.97858429 101.50051880]
[129.95759583 87.11687469]
[144.03903198 81.35771942]
[157.71478271 87.14643860]
[171.51736450 81.27371216]
[185.31994629 75.40099335]
[199.12252808 69.52827454]
[212.92509460 63.65555573]
[226.72767639 57.78283310]
[240.53025818 51.91011429]
[254.33283997 46.03739548]
[268.07852173 40.03274536]
[281.76608276 33.89671326]
[295.45364380 27.76068497]
[309.14120483 21.62465477]
[322.82873535 15.48862553]
[336.51629639 9.35259628]
[350.20385742 3.21656632]
[363.89141846 -2.91946340]
[377.57897949 -9.05549240]
[381.80187988 -14.24027348]
[387.20397949 -16.18605232]
[391.91030884 -15.15319538]
[405.82284546 -20.76045227]
[419.73538208 -26.36770821]
[433.64791870 -31.97496414]
[447.56045532 -37.58221817]
[448.06271362 -52.80285263]
[454.71820068 -66.50046539]
[466.37377930 -76.30186462]
[481.01004028 -80.50890350]
[496.09121704 -78.39267731]
[509.00436401 -70.31984711]
[517.51220703 -57.68907166]
[520.14068604 -42.68870926]
[516.43444824 -27.91766739]
[507.03561401 -15.93511391]
[493.57257080 -8.81710148]
[478.37786865 -7.79686880]
[464.08410645 -13.05117607]
[453.16772461 -23.66968346]
[439.25518799 -18.06242752]
[425.34265137 -12.45517063]
[411.43011475 -6.84791517]
[397.51757812 -1.24065888]
[383.71499634 4.63206148]
[370.02743530 10.76809120]
[356.33987427 16.90412140]
[342.65234375 23.04014969]
[328.96478271 29.17617989]
[315.27722168 35.31221008]
[301.58966064 41.44823837]
[287.90213013 47.58426666]
[274.21456909 53.72029877]
[269.37475586 59.35229874]
[260.20556641 59.83997345]
[246.40298462 65.71269226]
[232.60040283 71.58541107]
[218.79782104 77.45812988]
[204.99523926 83.33085632]
[191.19267273 89.20357513]
[177.39009094 95.07629395]
[163.58750916 100.94901276]
[158.27519226 114.81677246]
[144.36106873 120.96916962]
[129.85130310 115.30309296]
[120.19726562 126.78349304]
[116.77946472 141.38891602]
[113.36166382 155.99435425]
[114.92504120 162.49595642]
[113.19761658 167.97178650]
[109.52309418 171.08856201]
[105.54837036 185.55236816]
[101.57364655 200.01615906]
[97.59892273 214.47996521]
[98.91213226 221.03668213]
[96.97623444 226.44232178]
[93.18502045 229.41606140]
[88.65921783 243.71701050]
[84.13340759 258.01794434]
[79.60759735 272.31890869]
[93.03852844 265.63983154]
[107.65740967 268.99966431]
[116.82460785 280.87240601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 19]
[5 18]
[6 17]
[7 16]
[9 14]
[20 160]
[21 159]
[22 158]
[23 157]
[24 154]
[25 153]
[26 152]
[27 151]
[28 148]
[29 147]
[30 146]
[33 77]
[34 76]
[36 74]
[37 73]
[38 72]
[39 71]
[40 70]
[42 69]
[43 68]
[44 67]
[46 65]
[48 63]
[49 62]
[50 61]
[51 60]
[80 145]
[83 142]
[84 141]
[85 140]
[86 139]
[87 138]
[88 137]
[89 136]
[90 135]
[91 133]
[92 132]
[93 131]
[94 130]
[95 129]
[96 128]
[97 127]
[98 126]
[99 125]
[102 124]
[103 123]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
