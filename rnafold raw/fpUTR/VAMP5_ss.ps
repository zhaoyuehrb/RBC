%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUUCCUCCGGGGCCGCUGGCACUGCGGCCGCUCCGCAGGCAGAGAAGCCGGGAGCGGGCGAGGCGGCGGCGGCAGCAGCG\
) } def
/len { sequence length } bind def

/coor [
[129.83305359 182.33316040]
[129.27218628 167.34365845]
[128.71131897 152.35414124]
[127.87026978 137.37774658]
[126.74931335 122.41968536]
[119.71775055 119.81065369]
[98.62303925 111.98355865]
[88.01644135 122.59016418]
[84.29698944 138.56193542]
[68.52881622 143.06713867]
[56.93286514 131.47119141]
[61.43806076 115.70301056]
[77.40983582 111.98355865]
[88.01644135 101.37696075]
[95.51644135 88.38657379]
[99.39872742 73.89768982]
[103.28101349 59.40880203]
[107.16329956 44.91991425]
[111.04558563 30.43102646]
[114.92787170 15.94213963]
[118.81015778 1.45325243]
[114.90824127 -13.87925148]
[125.67596436 -24.17029190]
[121.77404785 -39.50279617]
[132.54176331 -49.79383469]
[136.42405701 -64.28272247]
[132.52214050 -79.61522675]
[143.28985596 -89.90626526]
[147.17214966 -104.39514923]
[143.27023315 -119.72765350]
[154.03796387 -130.01869202]
[157.92024231 -144.50758362]
[161.80252075 -158.99647522]
[165.68481445 -173.48535156]
[169.56709290 -187.97424316]
[173.44938660 -202.46313477]
[177.33166504 -216.95202637]
[176.53414917 -226.30520630]
[181.63949585 -231.90481567]
[181.19226074 -241.28128052]
[186.50341797 -246.68609619]
[191.45761108 -260.84432983]
[196.41178894 -275.00259399]
[189.32962036 -289.13122559]
[194.39143372 -304.10299683]
[208.59416199 -311.03540039]
[223.51156616 -305.81555176]
[230.29341125 -291.54034424]
[224.91616821 -276.67895508]
[210.57003784 -270.04840088]
[205.61585999 -255.89015198]
[200.66166687 -241.73190308]
[195.97308350 -227.48348999]
[191.82055664 -213.06973267]
[187.93827820 -198.58084106]
[184.05598450 -184.09196472]
[180.17370605 -169.60307312]
[176.29141235 -155.11418152]
[172.40913391 -140.62530518]
[168.52684021 -126.13641357]
[172.70643616 -111.84024811]
[161.66104126 -100.51287079]
[157.77874756 -86.02397919]
[161.95834351 -71.72782135]
[150.91294861 -60.40043640]
[147.03065491 -45.91154861]
[151.21025085 -31.61538696]
[140.16485596 -20.28800583]
[144.34445190 -5.99184418]
[133.29904175 5.33553791]
[129.41676331 19.82442474]
[125.53446960 34.31331253]
[121.65218353 48.80220032]
[117.76989746 63.29108810]
[113.88761139 77.77997589]
[110.00532532 92.26885986]
[141.70736694 121.29873657]
[142.82832336 136.25679016]
[146.67024231 144.82170105]
[143.70083618 151.79327393]
[144.26170349 166.78279114]
[144.82257080 181.77229309]
[147.73194885 200.93438721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[4 78]
[5 77]
[7 14]
[8 13]
[15 76]
[16 75]
[17 74]
[18 73]
[19 72]
[20 71]
[21 70]
[23 68]
[25 66]
[26 65]
[28 63]
[29 62]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[39 53]
[41 52]
[42 51]
[43 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
