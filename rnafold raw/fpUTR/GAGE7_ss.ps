%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGGAGCUGUGAGGCAGUGCUGUGUGGUUCCUGCCGUCCGGACUCUUUUUCCUCUACUGAGAUUCAUCUGUGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[67.96134949 108.34880066]
[67.57433319 93.31017303]
[53.95218277 87.03027344]
[40.33003616 80.75038147]
[26.70788765 74.47048187]
[13.08573914 68.19058990]
[-0.53640819 61.91069031]
[-14.27922726 55.89945984]
[-28.13742065 50.15920639]
[-41.99561310 44.41895676]
[-51.39383698 43.98566437]
[-56.27807617 38.17167664]
[-69.90022278 31.89178085]
[-83.64304352 25.88054848]
[-97.50123596 20.14029694]
[-111.35942841 14.40004539]
[-125.21762085 8.65979385]
[-139.07582092 2.91954279]
[-157.13073730 5.83867693]
[-167.43998718 -8.22051620]
[-181.51284790 -13.41227245]
[-195.58572388 -18.60402870]
[-211.64756775 -15.29508305]
[-222.34042358 -27.72869873]
[-216.66439819 -43.11423492]
[-200.45849609 -45.62437439]
[-190.39396667 -32.67689896]
[-176.32109070 -27.48514175]
[-162.24822998 -22.29338646]
[-150.96380615 -27.09326553]
[-139.09230042 -22.67443085]
[-133.33557129 -10.93865013]
[-119.47737122 -5.19839859]
[-105.61917877 0.54185283]
[-91.76098633 6.28210449]
[-77.90279388 12.02235603]
[-70.31802368 11.66242695]
[-63.62033081 18.26963425]
[-49.99818039 24.54953003]
[-36.25536346 30.56076241]
[-22.39716911 36.30101395]
[-8.53897572 42.04126358]
[-0.95420897 41.68133545]
[5.74348783 48.28854370]
[19.36563492 54.56843948]
[32.98778152 60.84833527]
[46.60993195 67.12823486]
[60.23207855 73.40812683]
[73.85422516 79.68802643]
[87.22126007 69.45688629]
[103.89149475 67.12091827]
[119.55581665 73.28393555]
[130.16510010 86.35285187]
[144.87687683 83.42649841]
[159.58865356 80.50014496]
[171.55471802 69.28651428]
[187.16842651 74.30091095]
[190.36773682 90.38494873]
[177.86148071 100.99275970]
[162.51501465 95.21192169]
[147.80323792 98.13828278]
[133.09146118 101.06463623]
[131.48812866 110.23110962]
[127.39732361 118.58936310]
[137.57933044 129.60420227]
[147.76135254 140.61903381]
[157.94335938 151.63388062]
[168.12536621 162.64871216]
[183.93881226 166.99234009]
[187.82147217 182.92523193]
[175.77920532 194.05699158]
[160.20007324 188.93621826]
[157.11053467 172.83071899]
[146.92852783 161.81588745]
[136.74650574 150.80105591]
[126.56449890 139.78620911]
[116.38249207 128.77137756]
[101.96030426 133.05049133]
[87.13340759 130.50621033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 44]
[8 42]
[9 41]
[10 40]
[12 39]
[13 38]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[20 29]
[21 28]
[22 27]
[53 62]
[54 61]
[55 60]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
