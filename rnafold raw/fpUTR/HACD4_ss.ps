%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGCGCCCAGCCGCGGGGCCGCCCCUGCCUCCUCCCCGGUACUCCUUCCUGGACCGCGCUGGAAGCCCUGGCGGCGGCGGCCC\
) } def
/len { sequence length } bind def

/coor [
[-5.81895256 265.88351440]
[-9.00535107 267.28381348]
[-12.03748226 267.33291626]
[-22.44859505 278.13146973]
[-32.85970688 288.93002319]
[-43.27082062 299.72857666]
[-53.68193436 310.52713013]
[-53.14272690 326.32223511]
[-63.99117279 337.81512451]
[-79.79107666 338.18731689]
[-91.16864014 327.21795654]
[-91.37375641 311.41500854]
[-80.28472900 300.15405273]
[-64.48048401 300.11602783]
[-54.06937408 289.31747437]
[-43.65826035 278.51892090]
[-33.24714661 267.72036743]
[-22.83603477 256.92181396]
[-13.24093914 245.39210510]
[-4.51305532 233.19276428]
[4.21482849 220.99340820]
[12.94271183 208.79406738]
[21.67059517 196.59472656]
[30.39847946 184.39537048]
[39.12636185 172.19602966]
[40.23917389 157.34304810]
[54.56159210 150.62153625]
[63.28947830 138.42218018]
[72.01736450 126.22283936]
[80.74524689 114.02349091]
[89.47312927 101.82415009]
[96.81439972 88.74340820]
[102.68096924 74.93821716]
[108.54753876 61.13302231]
[102.87499237 46.62578201]
[109.02119446 32.70892334]
[122.88658905 27.39042473]
[121.16290283 11.66339397]
[133.26159668 2.97599268]
[139.12815857 -10.82919979]
[144.99473572 -24.63439178]
[144.27217102 -30.29391479]
[145.79792786 -35.09735489]
[148.80516052 -38.29145432]
[152.33303833 -39.57226181]
[159.67430115 -52.65300369]
[167.01556396 -65.73374176]
[164.07664490 -81.50531006]
[174.68350220 -93.54168701]
[190.69944763 -92.60958862]
[199.83843994 -79.42404938]
[195.08981323 -64.09988403]
[180.09631348 -58.39247894]
[172.75503540 -45.31173706]
[165.41377258 -32.23099518]
[158.79992676 -18.76782227]
[152.93336487 -4.96262932]
[147.06678772 8.84256363]
[149.21008301 23.58215523]
[136.69177246 33.25699615]
[142.48658752 46.93017578]
[136.73370361 61.01417542]
[122.35272980 66.99959564]
[116.48616028 80.80478668]
[110.61959076 94.60997772]
[125.29977417 91.52902985]
[138.03910828 99.44795990]
[141.77352905 113.97566223]
[134.43228149 127.05641174]
[120.08613586 131.43684387]
[106.69013977 124.68797302]
[101.67247772 110.55203247]
[92.94458771 122.75138092]
[84.21670532 134.95072937]
[75.48882294 147.15007019]
[66.76094055 159.34941101]
[65.02384949 175.07496643]
[51.32571030 180.92391968]
[42.59782410 193.12326050]
[33.86994171 205.32260132]
[25.14205933 217.52195740]
[16.41417503 229.72129822]
[7.68629074 241.92063904]
[-1.04159284 254.11999512]
[-1.29380178 259.01617432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[19 84]
[20 83]
[21 82]
[22 81]
[23 80]
[24 79]
[25 78]
[27 76]
[28 75]
[29 74]
[30 73]
[31 72]
[32 65]
[33 64]
[34 63]
[37 60]
[39 58]
[40 57]
[41 56]
[45 55]
[46 54]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
