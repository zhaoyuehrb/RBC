%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUACUGGCGGGAGGAGUAAAGAUGGCGGCGCGAGGGUCUCCGCCCUCUGCUCCGGGCUGAAGCGCUCUGAGAGAGGCGGCAGCGGCAACUCGAGCCCCAACAGUAAUUUAGUGUUGGUAGUUUUGGCAGCAGCUGCCGAGGCCGGAGCA\
) } def
/len { sequence length } bind def

/coor [
[89.65528107 253.97679138]
[98.02744293 239.87576294]
[97.71538544 224.87901306]
[94.41043854 218.21395874]
[97.55610657 209.56776428]
[97.55610657 194.56776428]
[97.55610657 179.56776428]
[97.55610657 164.56776428]
[97.55610657 149.56776428]
[86.14410400 146.64889526]
[75.96154785 141.19818115]
[67.54610443 133.62699890]
[61.31204605 124.45461273]
[57.53036499 114.27349091]
[42.71260452 116.60459137]
[27.89484787 118.93569946]
[13.07708931 121.26679993]
[-1.74066925 123.59790802]
[-7.19939423 127.51068115]
[-12.94641304 127.96131897]
[-17.22212982 125.70438385]
[-32.12403107 127.41707611]
[-47.02593613 129.12976074]
[-59.85241699 138.39215088]
[-73.37989044 132.15864563]
[-88.28179932 133.87133789]
[-103.18370056 135.58403015]
[-118.08560181 137.29672241]
[-132.98750305 139.00941467]
[-145.81398010 148.27180481]
[-159.34146118 142.03829956]
[-174.22474670 143.90591431]
[-186.85336304 154.36775208]
[-202.13165283 148.40907288]
[-204.34262085 132.15965271]
[-191.21180725 122.33549500]
[-176.24707031 129.04286194]
[-170.00297546 124.99851227]
[-161.05415344 127.13639069]
[-149.29354858 117.99649811]
[-134.70019531 124.10750580]
[-119.79829407 122.39481354]
[-104.89638519 120.68212891]
[-89.99448395 118.96943665]
[-75.09258270 117.25674438]
[-63.33198547 108.11685944]
[-48.73862457 114.22785950]
[-33.83672333 112.51517487]
[-18.93482018 110.80248260]
[-4.07177305 108.78015137]
[10.74598503 106.44904327]
[25.56374359 104.11794281]
[40.38150024 101.78683472]
[55.19926071 99.45573425]
[58.30479813 75.76557159]
[73.89241028 55.43530273]
[99.14173889 44.93521881]
[96.04341888 30.25869179]
[92.94509888 15.58216667]
[89.84677887 0.90564090]
[76.88756561 -7.73707628]
[73.95449829 -22.66529655]
[82.27387238 -34.96666336]
[79.17555237 -49.64318848]
[74.31180573 -57.45317078]
[76.16878510 -64.65715027]
[73.37646484 -79.39495087]
[70.58413696 -94.13275909]
[67.79180908 -108.87056732]
[58.90262604 -123.30728149]
[70.31437683 -135.84555054]
[85.52173615 -128.35072327]
[82.52961731 -111.66288757]
[85.32194519 -96.92508698]
[88.11426544 -82.18727875]
[90.90659332 -67.44947052]
[93.85207367 -52.74151230]
[96.95039368 -38.06498718]
[109.53210449 -30.17598915]
[112.88331604 -15.33604240]
[104.52330017 -2.19268084]
[107.62162018 12.48384476]
[110.71994781 27.16036987]
[113.81826782 41.83689499]
[128.46176147 45.08772278]
[137.47929382 33.10088730]
[146.49682617 21.11405563]
[142.79078674 5.92197752]
[149.76338196 -8.07505417]
[164.12237549 -14.26806927]
[179.08787537 -9.73291397]
[187.59364319 3.38904953]
[185.62351990 18.90203094]
[174.10771179 29.48127556]
[158.48365784 30.13158607]
[149.46612549 42.11841965]
[140.44860840 54.10525131]
[148.57014465 66.71637726]
[163.21363831 63.46555328]
[177.85714722 60.21472931]
[192.50064087 56.96390152]
[207.14414978 53.71307755]
[221.78764343 50.46224976]
[233.58299255 39.91804123]
[247.68463135 44.71317673]
[262.32812500 41.46235275]
[276.48043823 32.12702942]
[289.36868286 43.14199448]
[282.35202026 58.57580948]
[265.57894897 56.10585403]
[250.93545532 59.35667801]
[240.18750000 69.66836548]
[225.03848267 65.10575104]
[210.39497375 68.35657501]
[195.75148010 71.60740662]
[181.10797119 74.85823059]
[166.46447754 78.10905457]
[151.82096863 81.35987854]
[153.52693176 92.99947357]
[152.70220947 104.50101471]
[149.48477173 115.33144379]
[144.12115479 125.01007843]
[136.95060730 133.12986755]
[147.61224365 143.68115234]
[158.27386475 154.23243713]
[168.93548584 164.78373718]
[179.59712219 175.33502197]
[190.25874329 185.88630676]
[200.92036438 196.43760681]
[211.58200073 206.98889160]
[227.09317017 213.83285522]
[224.81059265 230.63244629]
[208.03565979 233.08966064]
[201.03070068 217.65051270]
[190.36907959 207.09922791]
[179.70745850 196.54794312]
[169.04582214 185.99664307]
[158.38420105 175.44535828]
[147.72257996 164.89407349]
[137.06094360 154.34277344]
[126.39932251 143.79148865]
[112.55610657 149.56776428]
[112.55610657 164.56776428]
[112.55610657 179.56776428]
[112.55610657 194.56776428]
[112.55610657 209.56776428]
[112.71214294 224.56695557]
[113.02420044 239.56370544]
[121.97569275 253.30426025]
[114.31151581 267.80227661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 148]
[3 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[14 54]
[15 53]
[16 52]
[17 51]
[18 50]
[21 49]
[22 48]
[23 47]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[31 39]
[32 37]
[57 84]
[58 83]
[59 82]
[60 81]
[63 78]
[64 77]
[66 76]
[67 75]
[68 74]
[69 73]
[85 97]
[86 96]
[87 95]
[98 118]
[99 117]
[100 116]
[101 115]
[102 114]
[103 113]
[105 111]
[106 110]
[123 141]
[124 140]
[125 139]
[126 138]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
