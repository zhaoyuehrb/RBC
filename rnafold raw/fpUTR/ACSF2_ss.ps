%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGGCAGAGGCCACCCUCCCCGCCUCCCCGCCCGCUGCGCGCCCGCCCCGCCCCGGCUCACUUUAAAAGUUUACUCGGGCCGGGACGCAGGGCAAAGCGAGCC\
) } def
/len { sequence length } bind def

/coor [
[63.18195343 148.76879883]
[55.13265991 151.27005005]
[46.85593796 150.29692078]
[39.77014542 146.09399414]
[26.35448456 152.80369568]
[12.93882370 159.51339722]
[2.80163598 176.81019592]
[-16.37178802 175.22943115]
[-29.36216927 182.72943115]
[-42.35255051 190.22943115]
[-55.34293365 197.72943115]
[-68.33331299 205.22943115]
[-68.25307465 220.58811951]
[-75.87686157 233.92129517]
[-89.15391541 241.64239502]
[-104.51277924 241.67448425]
[-117.82198334 234.00894165]
[-125.50143433 220.70774841]
[-125.48538208 205.34886169]
[-117.77816010 192.06375122]
[-104.45296478 184.42604065]
[-89.09420013 184.49023438]
[-75.83331299 192.23905945]
[-62.84293365 184.73905945]
[-49.85255051 177.23905945]
[-36.86217117 169.73905945]
[-23.87178802 162.23905945]
[-22.06338120 151.97859192]
[-14.68771267 144.30953979]
[-4.07239628 142.00825500]
[6.22912693 146.09773254]
[19.64478874 139.38803101]
[33.06044769 132.67832947]
[42.76442719 113.40460968]
[65.07230377 114.09400940]
[77.59090424 105.83055115]
[90.10949707 97.56710052]
[94.65844727 90.73957062]
[103.12850952 89.25023651]
[115.88871002 81.36498260]
[128.64891052 73.47972107]
[128.67002869 59.60340118]
[135.52801514 47.66549683]
[147.31674194 40.76710510]
[160.86610413 40.63806152]
[172.59422302 47.20439911]
[185.58460999 39.70439911]
[198.57498169 32.20439911]
[211.56536865 24.70439911]
[219.64801025 11.10361481]
[234.53880310 11.44067764]
[247.52919006 3.94067740]
[260.28939819 -3.94457912]
[272.80798340 -12.20803356]
[285.32659912 -20.47148895]
[297.84518433 -28.73494339]
[310.36376953 -36.99839783]
[322.88238525 -45.26185226]
[335.40097046 -53.52530670]
[347.91958618 -61.78876114]
[344.11260986 -76.44433594]
[345.27307129 -91.54175568]
[351.27508545 -105.44336700]
[361.46755981 -116.64122009]
[374.74490356 -123.92066956]
[389.66693115 -126.49208832]
[404.61495972 -124.07654572]
[417.96759033 -116.93606567]
[428.27636719 -105.84519196]
[434.42312622 -92.00698090]
[435.74108887 -76.92249298]
[432.08728027 -62.22798538]
[423.85809326 -49.51741028]
[411.94607544 -40.16951370]
[397.64343262 -35.19828415]
[382.50158691 -35.14296341]
[368.16302490 -40.00955200]
[356.18304443 -49.27016449]
[343.66442871 -41.00671005]
[331.14584351 -32.74325562]
[318.62722778 -24.47979927]
[306.10864258 -16.21634483]
[293.59002686 -7.95288992]
[281.07144165 0.31056502]
[268.55285645 8.57401943]
[266.71649170 13.14564991]
[261.89706421 16.53481674]
[255.02919006 16.93105888]
[242.03880310 24.43105888]
[234.88531494 37.49539185]
[219.06536865 37.69478226]
[206.07498169 45.19478226]
[193.08460999 52.69478226]
[180.09422302 60.19478226]
[178.94267273 76.49429321]
[168.24073792 89.05983734]
[152.01075745 92.86653900]
[136.53416443 86.23992920]
[123.77397156 94.12518311]
[111.01377106 102.01043701]
[98.37295532 110.08570099]
[85.85435486 118.34915161]
[73.33575439 126.61260986]
[73.20859528 135.32633972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 33]
[5 32]
[6 31]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[35 103]
[36 102]
[37 101]
[39 100]
[40 99]
[41 98]
[46 94]
[47 93]
[48 92]
[49 91]
[51 89]
[52 88]
[53 85]
[54 84]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[60 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
