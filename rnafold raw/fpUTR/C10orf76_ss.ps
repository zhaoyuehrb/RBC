%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUGAGCCCGGAGCAGCGGCAGCGUCGGUGGCGUCGAGAGCGAGCGGGCCCGGGAACGGCGCGGGUGGUAGAGGAGGAGCCGCGGGCUCGAUUCUCUAACC\
) } def
/len { sequence length } bind def

/coor [
[87.73561859 107.28979492]
[72.77920532 108.43247223]
[57.82279205 109.57514954]
[42.86637878 110.71782684]
[32.59553528 122.42882538]
[17.41132736 123.37460327]
[6.30997515 113.51074982]
[-8.64643764 114.65342712]
[-23.58368683 116.02404785]
[-38.47218704 117.84957123]
[-53.33111954 119.90192413]
[-68.19004822 121.95426941]
[-80.80179596 131.50698853]
[-94.46801758 125.58385468]
[-109.32695007 127.63619995]
[-124.15285492 129.91491699]
[-136.46740723 139.84780884]
[-150.30790710 134.34417725]
[-165.09733582 136.84872437]
[-179.88676453 139.35325623]
[-194.67620850 141.85780334]
[-209.28343201 150.46391296]
[-221.59689331 138.80993652]
[-213.80708313 123.75154877]
[-197.18074036 127.06836700]
[-182.39131165 124.56382751]
[-167.60188293 122.05928802]
[-152.81245422 119.55474854]
[-141.55572510 109.80100250]
[-126.65739441 115.12548065]
[-120.48333740 110.83237457]
[-111.37930298 112.77727509]
[-96.52037048 110.72492218]
[-84.97143555 101.31899261]
[-70.24240112 107.09534454]
[-55.38347244 105.04299164]
[-40.52453995 102.99063873]
[-34.22243500 98.88780975]
[-25.18194389 101.10944366]
[-18.75764847 97.20071411]
[-9.78911304 99.69701385]
[5.16729975 98.55433655]
[14.64134884 87.11851501]
[29.79300117 85.74662018]
[41.72370529 95.76141357]
[56.68011856 94.61873627]
[71.63652802 93.47605896]
[86.59294128 92.33338928]
[98.75503540 83.55365753]
[104.54808044 69.71745300]
[110.34112549 55.88124847]
[116.13417053 42.04504013]
[121.92721558 28.20883369]
[120.11988831 12.49119568]
[132.17219543 3.73955297]
[127.44432831 -11.59103107]
[136.60116577 -24.76418114]
[152.61836243 -25.67458344]
[163.20890808 -13.62385654]
[160.24862671 2.14371490]
[146.00840759 9.53259850]
[148.23008728 24.26057816]
[135.76342773 34.00188065]
[129.97038269 47.83808517]
[124.17733002 61.67429352]
[118.38428497 75.51049805]
[112.59123993 89.34671021]
[117.74542236 103.43338013]
[131.10011292 110.26361084]
[144.45481873 117.09384918]
[157.91212463 123.71962738]
[171.46890259 130.13941956]
[185.02568054 136.55920410]
[198.58245850 142.97898865]
[212.13923645 149.39877319]
[225.69602966 155.81857300]
[243.92288208 153.83299255]
[253.45532227 168.47998047]
[267.20156860 174.48335266]
[280.94781494 180.48672485]
[294.69409180 186.49009705]
[308.44033813 192.49346924]
[325.37548828 193.29171753]
[329.29653931 209.78601074]
[314.53231812 218.11990356]
[302.43695068 206.23973083]
[288.69070435 200.23635864]
[274.94445801 194.23298645]
[261.19821167 188.22961426]
[247.45195007 182.22624207]
[235.96879578 186.35598755]
[224.40776062 181.32995605]
[219.27622986 169.37535095]
[205.71945190 162.95556641]
[192.16267395 156.53576660]
[178.60589600 150.11598206]
[165.04911804 143.69619751]
[151.49232483 137.27641296]
[143.97239685 137.25819397]
[137.62458801 130.44854736]
[124.26988220 123.61830902]
[110.91519165 116.78807831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[4 45]
[7 42]
[8 41]
[9 39]
[10 37]
[11 36]
[12 35]
[14 33]
[15 32]
[16 30]
[18 28]
[19 27]
[20 26]
[21 25]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[55 61]
[68 102]
[69 101]
[70 100]
[71 98]
[72 97]
[73 96]
[74 95]
[75 94]
[76 93]
[78 90]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
