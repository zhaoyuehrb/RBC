%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGGUGCGGUUCCGCCGGGCGCGAGGAGCCGCCGAGACCUCCGCCUGCGAACAAAGAGGAGGCCGUGCGGGGCGCGGCGCCCGCGGAGC\
) } def
/len { sequence length } bind def

/coor [
[16.81082916 427.79574585]
[12.16098785 442.43386841]
[0.80423701 452.77407837]
[-14.20451450 456.03491211]
[-28.82798767 451.33920288]
[-39.13254166 439.95010376]
[-42.34630203 424.93118286]
[-37.60478592 410.32250977]
[-26.18343544 400.05371094]
[-11.15453625 396.88705444]
[-6.56855917 382.60528564]
[-1.98258150 368.32351685]
[2.60339594 354.04174805]
[7.18937349 339.75997925]
[11.77535057 325.47821045]
[16.36132812 311.19644165]
[15.38765812 303.70593262]
[21.35993576 296.50573730]
[26.43613052 282.39077759]
[31.51232719 268.27581787]
[36.58852386 254.16085815]
[41.66471863 240.04589844]
[46.74091721 225.93092346]
[38.22583389 213.73948669]
[38.52589798 198.69375610]
[47.73557663 186.56794739]
[62.48991013 182.13897705]
[55.93087387 168.81552124]
[60.87778473 154.42861938]
[74.89713287 147.63923645]
[79.97332764 133.52427673]
[85.04952240 119.40930939]
[90.12571716 105.29434204]
[94.95752716 91.09386444]
[99.54350281 76.81209564]
[99.20201874 67.46361542]
[104.54210663 62.12139893]
[104.52349854 52.76670074]
[110.04480743 47.61198807]
[115.60517120 33.68064499]
[121.16553497 19.74930000]
[126.72589874 5.81795597]
[132.28627014 -8.11338711]
[127.90322876 -20.39257240]
[132.98393250 -31.96025276]
[144.24822998 -36.72491074]
[150.28614807 -50.45603180]
[142.34980774 -63.78998566]
[143.80020142 -79.23912811]
[154.07962036 -90.86294556]
[169.23541260 -94.19184875]
[183.43988037 -87.94580078]
[191.23109436 -74.52654266]
[189.61318970 -59.09404373]
[179.20826721 -47.58242035]
[164.01725769 -44.41812515]
[157.97935486 -30.68700409]
[160.91534424 -13.47905254]
[146.21760559 -2.55302191]
[140.65724182 11.37832165]
[135.09687805 25.30966568]
[129.53651428 39.24100876]
[123.97615051 53.17235184]
[118.65707397 67.19759369]
[113.82527161 81.39807892]
[109.23928833 95.67984009]
[109.96735382 103.89607239]
[104.24068451 110.37054443]
[99.16448975 124.48550415]
[94.08829498 138.60046387]
[89.01209259 152.71543884]
[95.49624634 166.87854004]
[90.14719391 181.12080383]
[76.60487366 187.21517944]
[85.15901184 200.02661133]
[84.53640747 215.24061584]
[75.18524170 227.03128052]
[60.85588074 231.00712585]
[55.77968597 245.12208557]
[50.70348740 259.23706055]
[45.62729263 273.35202026]
[40.55109406 287.46697998]
[35.47489929 301.58193970]
[30.64309311 315.78244019]
[26.05711555 330.06420898]
[21.47113800 344.34594727]
[16.88516045 358.62771606]
[12.29918385 372.90948486]
[7.71320581 387.19125366]
[3.12722874 401.47302246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 90]
[11 89]
[12 88]
[13 87]
[14 86]
[15 85]
[16 84]
[18 83]
[19 82]
[20 81]
[21 80]
[22 79]
[23 78]
[27 74]
[30 71]
[31 70]
[32 69]
[33 68]
[34 66]
[35 65]
[37 64]
[39 63]
[40 62]
[41 61]
[42 60]
[43 59]
[46 57]
[47 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
