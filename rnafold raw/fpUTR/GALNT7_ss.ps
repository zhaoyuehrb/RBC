%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCCGGAGGAGGGGGAAGGAGGGAGGGGAGAGCGGUGGCGGCGGCUGCGCCGGGCUGUGAGUCUCUCGCCGCCGGAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[84.81926727 249.41607666]
[78.36385345 235.53852844]
[79.10867310 220.25115967]
[86.88256073 207.06687927]
[99.89914703 199.01535034]
[98.77819061 184.05729675]
[97.65724182 169.09922791]
[96.53629303 154.14117432]
[87.86951447 142.02769470]
[94.55389404 127.68791199]
[93.43293762 112.72985077]
[85.71611023 101.07042694]
[91.60900116 88.39109802]
[90.48805237 73.43304443]
[89.36710358 58.47498703]
[88.24614716 43.51692963]
[87.12519836 28.55887222]
[86.00424957 13.60081482]
[77.77750397 11.83539009]
[70.07893372 8.46127701]
[63.21923828 3.61837459]
[57.47448730 -2.49422002]
[53.07506180 -9.62639332]
[50.19637299 -17.48725128]
[48.95190430 -25.75698280]
[49.38871384 -34.09986496]
[51.48568726 -42.17790222]
[55.15451050 -49.66451645]
[60.24340439 -56.25774002]
[66.54338837 -61.69240952]
[73.79685211 -65.75082397]
[81.70811462 -68.27145386]
[89.95546722 -69.15538025]
[98.20422363 -68.37018585]
[103.68434143 -82.33329010]
[109.16445923 -96.29640198]
[114.64456940 -110.25950623]
[120.12468719 -124.22261047]
[115.66818237 -136.49703979]
[120.70614624 -148.10519409]
[131.97248840 -152.91506958]
[137.97087097 -166.66349792]
[143.96925354 -180.41192627]
[149.96763611 -194.16036987]
[155.96600342 -207.90879822]
[153.59320068 -224.13537598]
[166.62545776 -234.08990479]
[181.65629578 -227.53201294]
[183.22328186 -211.20790100]
[169.71444702 -201.91041565]
[163.71606445 -188.16198730]
[157.71768188 -174.41355896]
[151.71929932 -160.66511536]
[145.72091675 -146.91668701]
[148.71852112 -129.73330688]
[134.08779907 -118.74249268]
[128.60768127 -104.77938843]
[123.12756348 -90.81628418]
[117.64744568 -76.85317993]
[112.16733551 -62.89007187]
[127.93380737 -45.24289703]
[131.41114807 -21.73697281]
[121.34729767 -0.10426807]
[100.96230316 12.47986317]
[102.08325195 27.43791962]
[103.20420837 42.39597702]
[104.32515717 57.35403442]
[105.44610596 72.31208801]
[106.56706238 87.27014923]
[114.28388977 98.92957306]
[108.39099884 111.60890198]
[109.51194763 126.56695557]
[118.25890350 139.75033569]
[111.49434662 153.02021790]
[112.61529541 167.97828674]
[113.73625183 182.93634033]
[114.85720062 197.89439392]
[128.92842102 203.91596985]
[138.58049011 215.79435730]
[141.59545898 230.79997253]
[137.28048706 245.48464966]
[126.62713623 256.47393799]
[112.08346558 261.24261475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 77]
[6 76]
[7 75]
[8 74]
[10 72]
[11 71]
[13 69]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[34 60]
[35 59]
[36 58]
[37 57]
[38 56]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
