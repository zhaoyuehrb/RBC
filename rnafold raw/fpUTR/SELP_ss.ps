%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGUGAGACUGUAAGCAGUCUGGGUUGGGCAGAAGGCAGAAAACCAGCAGAGUCACAGAGGAG\
) } def
/len { sequence length } bind def

/coor [
[124.32967377 205.90109253]
[118.09844971 192.25662231]
[111.86722565 178.61213684]
[97.86544037 173.66383362]
[91.35172272 159.91516113]
[96.63688660 145.26235962]
[90.40566254 131.61787415]
[77.41528320 124.11787415]
[62.48320389 125.54371643]
[47.55112457 126.96955872]
[32.61904907 128.39540100]
[17.68696785 129.82124329]
[2.75488973 131.24708557]
[-10.28232765 141.19509888]
[-25.30988884 134.62969971]
[-26.86872673 118.30480194]
[-13.35524368 109.01406860]
[1.32904911 116.31500244]
[16.26112747 114.88916016]
[31.19320679 113.46331787]
[46.12528610 112.03747559]
[61.05736542 110.61164093]
[75.98944092 109.18579865]
[80.56811523 88.00849915]
[98.01522827 80.13851166]
[102.24121857 65.74611664]
[106.46720886 51.35372162]
[110.69319916 36.96132660]
[100.93835449 21.06000900]
[105.46766663 3.28246474]
[121.10533905 -5.70404673]
[123.94410706 -20.43297768]
[116.17881775 -34.47148895]
[122.44587708 -49.23981476]
[137.93774414 -53.40896225]
[150.77037048 -43.78071594]
[151.09967041 -27.74104500]
[138.67303467 -17.59420776]
[135.83427429 -2.86527801]
[144.38496399 5.30005026]
[147.80680847 16.74476814]
[145.08644104 28.50163460]
[136.81956482 37.45967865]
[125.08559418 41.18731689]
[120.85960388 55.57971191]
[116.63361359 69.97210693]
[112.40762329 84.36450195]
[121.69402313 97.18286896]
[119.05883026 114.24139404]
[104.05014801 125.38665009]
[110.28137207 139.03112793]
[124.81626892 144.63241577]
[130.94125366 158.55862427]
[125.51170349 172.38092041]
[131.74293518 186.02539062]
[137.97415161 199.66987610]
[153.27091980 201.04994202]
[165.81903076 209.90660095]
[172.24310303 223.85746765]
[170.81510925 239.14984131]
[161.91914368 251.67012024]
[147.94821167 258.05044556]
[132.66040039 256.57449341]
[120.16805267 247.63934326]
[113.83156586 233.64848328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[6 51]
[7 50]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[25 47]
[26 46]
[27 45]
[28 44]
[31 39]
[32 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
