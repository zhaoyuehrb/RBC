%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUCCAGCAUCCUCCACCUGUCUACCACCGAGCAUGGGCCUAUAUUUGAAGCCUUAGAUCUCUCCAGCACAGUAAGCACCAGGAGUCCAUGAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[80.40664673 393.99896240]
[77.04776001 378.31146240]
[87.32952881 365.99624634]
[87.32952881 350.99624634]
[87.32952881 335.99624634]
[79.59223175 323.26895142]
[87.32952881 309.46878052]
[87.32952881 294.46878052]
[74.99944305 288.37637329]
[66.48693848 277.48965454]
[63.51940155 263.92428589]
[66.73951721 250.34823608]
[75.56712341 239.45730591]
[88.30278778 233.43971252]
[88.77394867 218.44711304]
[89.24510956 203.45451355]
[89.71627045 188.46191406]
[77.85367584 179.49436951]
[73.49464417 165.09080505]
[78.51144409 150.71426392]
[91.17805481 141.94709778]
[91.64921570 126.95449829]
[92.12037659 111.96189880]
[85.68312073 99.55007172]
[92.88702393 87.56694031]
[93.35818481 72.57434082]
[93.82934570 57.58174515]
[83.42569733 52.07860947]
[75.92892456 43.07312775]
[72.43468475 31.94318008]
[73.43010712 20.37229919]
[78.72633362 10.09503269]
[87.49276733 2.63692760]
[98.38709259 -0.91189718]
[100.26708984 -15.79361725]
[98.21557617 -24.88477325]
[102.44700623 -31.11049080]
[104.79351807 -45.92581558]
[107.14003754 -60.74114227]
[109.48655701 -75.55646515]
[99.40959167 -83.29592133]
[93.67824554 -94.55422211]
[93.35282135 -107.11033630]
[98.43398285 -118.51728821]
[107.87487793 -126.57903290]
[119.79609680 -129.77320862]
[123.06824493 -144.41195679]
[126.34039307 -159.05070496]
[129.61253357 -173.68945312]
[132.88468933 -188.32821655]
[136.15682983 -202.96696472]
[130.73916626 -218.44535828]
[141.63867188 -230.69822693]
[157.64286804 -227.12086487]
[162.28802490 -211.39335632]
[150.79559326 -199.69480896]
[147.52343750 -185.05606079]
[144.25129700 -170.41731262]
[140.97914124 -155.77856445]
[137.70700073 -141.13981628]
[134.43484497 -126.50106049]
[146.67855835 -113.97624207]
[149.10931396 -96.47422028]
[140.59423828 -80.81469727]
[124.30187988 -73.20994568]
[121.95536041 -58.39462280]
[119.60884857 -43.57929993]
[117.26232910 -28.76397324]
[115.14881134 -13.91361904]
[113.26881409 0.96810132]
[127.55825806 12.72207069]
[132.11837769 30.80505562]
[125.00042725 48.20079041]
[108.82194519 58.05290604]
[108.35078430 73.04550171]
[107.87962341 88.03810120]
[114.31687927 100.44992828]
[107.11297607 112.43305969]
[106.64181519 127.42565918]
[106.17065430 142.41825867]
[118.26177979 151.96345520]
[122.36597443 166.62664795]
[117.11112976 180.72808838]
[104.70886993 188.93307495]
[104.23770905 203.92567444]
[103.76654816 218.91827393]
[103.29538727 233.91087341]
[117.37831879 242.40936279]
[125.25530243 256.74279785]
[124.88396454 273.00051880]
[116.45795441 286.80017090]
[102.32952881 294.46878052]
[102.32952881 309.46878052]
[110.06683350 323.26895142]
[102.32952881 335.99624634]
[102.32952881 350.99624634]
[102.32952881 365.99624634]
[112.61130524 378.31146240]
[109.25241852 393.99896240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[7 93]
[8 92]
[14 87]
[15 86]
[16 85]
[17 84]
[21 80]
[22 79]
[23 78]
[25 76]
[26 75]
[27 74]
[34 70]
[35 69]
[37 68]
[38 67]
[39 66]
[40 65]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
