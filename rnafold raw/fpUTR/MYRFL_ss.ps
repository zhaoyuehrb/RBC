%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUAUAAUCACAUUUGAAAACUCAACCAUCUUUCUGGGCACAAUUUGAUGGCUGAAGAUAUGCUUCACUCCAAUAAAAAGAAAAUGAAGAUUUUUCAAGAGCAUUCGUAGGCUUCGAAUCAAAAGGACAGUACUUAUUUCCUGAGGUCUGAUAACCGUUGUUUUAUGAGGAAAUAGUACUAGGAUCACAGUACC\
) } def
/len { sequence length } bind def

/coor [
[59.70929718 186.98278809]
[57.26917648 201.78298950]
[54.82905579 216.58317566]
[57.38088989 231.36453247]
[55.22431946 246.20869446]
[48.57186508 259.65283203]
[38.07911301 270.37207031]
[24.78008270 277.31005859]
[9.98534966 279.78311157]
[-4.84711218 277.54745483]
[-18.25561333 270.82345581]
[-28.91879082 260.27374268]
[-35.78582382 246.93794250]
[-38.17998886 232.13023376]
[-35.86534882 217.30990601]
[-29.07000542 203.93742371]
[-18.46361542 193.33059692]
[-5.09116077 186.53465271]
[5.31045723 175.72694397]
[15.71207523 164.91925049]
[26.11369324 154.11155701]
[36.51531219 143.30384827]
[46.91692734 132.49615479]
[32.60716248 136.99400330]
[18.29739952 141.49185181]
[7.45232964 153.01118469]
[-7.00936794 149.44627380]
[-21.31913376 153.94412231]
[-35.62889862 158.44197083]
[-49.93866348 162.93981934]
[-64.24842834 167.43765259]
[-67.67239380 182.34483337]
[-78.02987671 193.46325684]
[-92.46598053 197.87519836]
[-107.07443237 194.49153137]
[-117.95451355 184.31855774]
[-132.26428223 188.81640625]
[-142.94949341 201.25657654]
[-159.01338196 197.95750427]
[-163.93077087 182.31297302]
[-152.64308167 170.41674805]
[-136.76211548 174.50663757]
[-122.45235443 170.00878906]
[-119.34894562 155.44052124]
[-109.30335236 144.30760193]
[-94.93910980 139.66702271]
[-80.08315277 142.86035156]
[-68.74627686 153.12789917]
[-54.43650818 148.63005066]
[-40.12674332 144.13220215]
[-25.81697845 139.63435364]
[-11.50721455 135.13650513]
[-1.68567514 123.93888855]
[13.79955196 127.18208313]
[28.10931778 122.68423462]
[42.41908264 118.18639374]
[44.61059189 111.01371765]
[29.89620972 108.10047913]
[14.93263149 107.05581665]
[10.46139050 92.73771667]
[22.17136192 83.36346436]
[35.16370773 90.86029053]
[48.99361420 96.66836548]
[51.18512344 89.49568939]
[41.83277893 77.76821899]
[32.48043060 66.04074097]
[23.12808228 54.31327057]
[13.77573586 42.58580017]
[-5.29884291 36.09000397]
[-7.37761879 16.87314606]
[-17.10104370 5.45145655]
[-32.37590790 7.61527109]
[-46.38623428 1.15661359]
[-54.66138458 -11.86358166]
[-54.56078339 -27.29061699]
[-46.11653137 -40.20178223]
[-32.02316284 -46.47717285]
[-16.77781868 -44.11433029]
[-5.24523258 -33.86723328]
[-1.10541058 -19.00569153]
[-5.67935514 -4.27196932]
[4.04407072 7.14972019]
[14.27705765 7.05024099]
[23.05619621 12.72439384]
[27.34510040 22.49765205]
[25.50320816 33.23345184]
[34.85555649 44.96092224]
[44.20790100 56.68839645]
[53.56024933 68.41587067]
[62.91259766 80.14334106]
[95.87074280 64.54124451]
[121.98271942 80.58599091]
[135.39120483 73.86196136]
[148.79968262 67.13793182]
[162.20817566 60.41390228]
[175.61665344 53.68987274]
[189.02513123 46.96584320]
[202.43362427 40.24181747]
[215.78778076 33.41054535]
[229.08677673 26.47247124]
[242.38577271 19.53439522]
[255.68475342 12.59632206]
[268.98373413 5.65824747]
[282.28274536 -1.27982700]
[286.89224243 -13.33492184]
[298.12197876 -18.83727264]
[309.70532227 -15.32424736]
[323.11383057 -22.04827690]
[336.24215698 -29.30405998]
[349.06930542 -37.07994843]
[361.89645386 -44.85583878]
[374.72360229 -52.63172531]
[387.55072021 -60.40761566]
[400.37786865 -68.18350220]
[413.20501709 -75.95938873]
[426.03216553 -83.73528290]
[438.85928345 -91.51116943]
[436.62283325 -106.52029419]
[440.29324341 -121.20263672]
[449.28100586 -133.32838440]
[462.19149780 -141.06831360]
[477.04138184 -143.26969910]
[491.56317139 -139.62786865]
[503.55154419 -130.72799683]
[516.37872314 -138.50387573]
[529.20581055 -146.27976990]
[531.41259766 -161.76086426]
[543.08856201 -172.16305542]
[558.72070312 -172.57475281]
[570.92803955 -162.80155945]
[573.94659424 -147.45806885]
[566.35113525 -133.78903198]
[551.72796631 -128.24853516]
[536.98175049 -133.45263672]
[524.15460205 -125.67674255]
[511.32745361 -117.90084839]
[513.67297363 -103.15541840]
[510.18493652 -88.59592438]
[501.36456299 -76.44825745]
[488.53073120 -68.58182526]
[473.62286377 -66.22190857]
[458.90780640 -69.75888062]
[446.63519287 -78.68402863]
[433.80804443 -70.90813446]
[420.98089600 -63.13224792]
[408.15374756 -55.35636139]
[395.32662964 -47.58047104]
[382.49948120 -39.80458450]
[369.67233276 -32.02869415]
[356.84518433 -24.25280762]
[344.01806641 -16.47691917]
[357.71356201 -10.35865784]
[361.62817383 4.12153006]
[352.88095093 16.30701256]
[337.90936279 17.22993279]
[327.73168945 6.21107435]
[329.83782959 -8.63979244]
[316.42935181 -1.91576397]
[307.58886719 13.23767185]
[289.22079468 12.01916218]
[275.92181396 18.95723724]
[262.62283325 25.89531136]
[249.32383728 32.83338547]
[236.02485657 39.77146149]
[222.72586060 46.70953369]
[218.24409485 52.59802628]
[209.15765381 53.65029907]
[195.74916077 60.37432861]
[182.34068298 67.09835815]
[168.93220520 73.82238770]
[155.52371216 80.54641724]
[142.11523438 87.27044678]
[128.70674133 93.99447632]
[130.49804688 111.26866913]
[121.79434204 128.27331543]
[103.74840546 138.70236206]
[81.18790436 137.62802124]
[86.14208984 151.78627014]
[91.09627533 165.94451904]
[96.05046082 180.10276794]
[101.00464630 194.26101685]
[106.79984283 201.33819580]
[105.92279816 208.68608093]
[119.56139374 217.13404846]
[121.31688690 233.08076477]
[109.84260559 244.29327393]
[93.94064331 242.17030334]
[85.80961609 228.34040833]
[91.68695831 213.41270447]
[86.84639740 199.21519470]
[81.89221191 185.05694580]
[76.93802643 170.89869690]
[71.98384094 156.74044800]
[67.02965546 142.58219910]
[64.58953857 157.38240051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 56]
[24 55]
[25 54]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[36 43]
[37 42]
[64 90]
[65 89]
[66 88]
[67 87]
[68 86]
[70 82]
[71 81]
[92 173]
[93 172]
[94 171]
[95 170]
[96 169]
[97 168]
[98 167]
[99 165]
[100 164]
[101 163]
[102 162]
[103 161]
[104 160]
[107 158]
[108 157]
[109 151]
[110 150]
[111 149]
[112 148]
[113 147]
[114 146]
[115 145]
[116 144]
[117 143]
[124 136]
[125 135]
[126 134]
[177 194]
[178 193]
[179 192]
[180 191]
[181 190]
[183 189]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
