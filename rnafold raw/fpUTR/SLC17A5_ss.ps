%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCCGCGGGGCGGUGUCAUCGCCCCCGCCCCGCCCGGUCCAGCCAGCUCGGCCCGGGGGCUUCGGGCUGUCGGGCCGGCGCUCCCUUCUCUGCCAGGUGGCGAGUACACCUGCUCACGUAGGCGUC\
) } def
/len { sequence length } bind def

/coor [
[88.13095093 76.89492035]
[82.18724060 83.97006989]
[74.73165894 84.41497040]
[61.56249237 91.59641266]
[48.39333344 98.77786255]
[35.22417068 105.95931244]
[22.23378944 113.45931244]
[9.42989349 121.27341461]
[-3.37400293 129.08752441]
[-16.17789841 136.90162659]
[-28.98179626 144.71572876]
[-41.78569031 152.52983093]
[-54.58958817 160.34393311]
[-67.39348602 168.15805054]
[-80.19738007 175.97215271]
[-85.96704102 183.18994141]
[-93.40958405 183.81625366]
[-94.89756775 199.26182556]
[-105.20523834 210.86059570]
[-120.36908722 214.15260315]
[-134.55830383 207.87200928]
[-142.31683350 194.43383789]
[-140.66139221 179.00531006]
[-130.22850037 167.51904297]
[-115.02983093 164.39172363]
[-100.90958405 170.82586670]
[-88.01148987 163.16825867]
[-75.20758820 155.35414124]
[-62.40369415 147.54003906]
[-49.59979630 139.72593689]
[-36.79590225 131.91183472]
[-23.99200439 124.09772491]
[-11.18810844 116.28362274]
[1.61578822 108.46952057]
[14.41968441 100.65541077]
[16.40869522 96.20964813]
[21.26703644 93.01613617]
[28.04272461 92.79014587]
[41.21188736 85.60870361]
[54.38104630 78.42725372]
[67.55020905 71.24580383]
[80.63095093 63.90453720]
[87.81239319 50.73537827]
[87.08208466 35.75316620]
[86.35176849 20.77095604]
[83.01494598 14.86954784]
[83.20999146 9.05887318]
[85.96871185 5.04508877]
[85.96871185 -9.95491123]
[82.81330872 -18.63988876]
[86.15580750 -25.31906509]
[86.52107239 -40.31461716]
[86.88633728 -55.31016922]
[87.25160217 -70.30571747]
[87.61686707 -85.30126953]
[87.98213196 -100.29682159]
[88.34739685 -115.29237366]
[88.71266937 -130.28793335]
[81.31370544 -144.27241516]
[89.35863495 -156.80751038]
[89.72389984 -171.80305481]
[90.08916473 -186.79861450]
[90.45442963 -201.79415894]
[84.79558563 -217.77583313]
[98.58615875 -227.63769531]
[111.88023376 -217.11610413]
[105.44998169 -201.42889404]
[105.08471680 -186.43334961]
[104.71945190 -171.43778992]
[104.35418701 -156.44224548]
[111.77927399 -143.53033447]
[103.70822144 -129.92266846]
[103.34294891 -114.92710876]
[102.97768402 -99.93155670]
[102.61241913 -84.93600464]
[102.24715424 -69.94045258]
[101.88188934 -54.94490433]
[101.51662445 -39.94935226]
[101.15135956 -24.95379829]
[100.96871185 -9.95491123]
[100.96871185 5.04508877]
[101.33397675 20.04064178]
[102.06429291 35.02285004]
[102.79460907 50.00506210]
[107.02535248 35.61406326]
[120.50373840 29.03128624]
[134.45460510 34.54247284]
[139.79518127 48.55954361]
[133.04844666 61.95661926]
[118.60735321 66.01153564]
[133.57955933 66.92422485]
[148.55177307 67.83691406]
[157.41264343 65.21579742]
[163.87606812 68.95851135]
[178.82160950 70.23551941]
[193.76715088 71.51251984]
[208.37797546 64.06565857]
[221.98335266 73.22130585]
[220.58723450 89.56092072]
[205.62582397 96.27570343]
[192.49014282 86.45806885]
[177.54460144 85.18106079]
[162.59906006 83.90405273]
[147.63908386 82.80912018]
[132.66687012 81.89643097]
[117.69466400 80.98374176]
[123.53173828 97.98039246]
[116.92369080 112.86953735]
[124.89311981 125.57733154]
[138.78002930 133.15786743]
[138.98703003 148.05102539]
[146.95646667 160.75883484]
[154.92588806 173.46662903]
[162.89532471 186.17442322]
[170.86476135 198.88223267]
[185.60218811 206.07530212]
[186.47143555 222.45140076]
[172.57829285 231.16418457]
[158.21484375 223.25070190]
[158.15695190 206.85165405]
[150.18753052 194.14385986]
[142.21809387 181.43606567]
[134.24865723 168.72825623]
[126.27923584 156.02046204]
[112.96235657 149.34887695]
[112.18532562 133.54676819]
[104.21588898 120.83896637]
[84.33750153 116.61358643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[3 41]
[4 40]
[5 39]
[6 38]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[17 26]
[43 84]
[44 83]
[45 82]
[48 81]
[49 80]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[57 73]
[58 72]
[60 70]
[61 69]
[62 68]
[63 67]
[90 106]
[91 105]
[92 104]
[94 103]
[95 102]
[96 101]
[108 127]
[109 126]
[111 124]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
