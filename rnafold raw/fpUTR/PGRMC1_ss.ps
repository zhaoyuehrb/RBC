%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCGGCUAGUCUUUGGCCGCCGCCGAACCCCGCGCGCCACUCGCUCGCUCAGAGGGAGGAGAAAGUGGCGAGUUCCGGAUCCCUGCCUAGCGCGGCCCAACCUUUACUCCAGAGAUC\
) } def
/len { sequence length } bind def

/coor [
[148.02459717 263.68771362]
[148.16357422 249.44230652]
[153.18637085 236.07899475]
[162.50395203 225.22331238]
[155.34657288 212.04106140]
[148.18917847 198.85881042]
[140.85986328 185.77136230]
[133.35986328 172.78097534]
[125.85986328 159.79060364]
[118.35986328 146.80021667]
[110.85986328 133.80984497]
[96.55677032 135.34382629]
[82.81869507 131.07803345]
[71.89999390 121.71247864]
[58.36121750 128.17015076]
[44.82243729 134.62780762]
[31.28365898 141.08547974]
[17.74487877 147.54313660]
[4.20609999 154.00080872]
[-4.63149977 167.81489563]
[-20.99909782 166.79815674]
[-28.05911255 151.99652100]
[-18.54880714 138.63665771]
[-2.25156665 140.46203613]
[11.28721237 134.00436401]
[24.82599258 127.54669952]
[38.36477280 121.08903503]
[51.90354919 114.63136292]
[65.44232941 108.17369843]
[67.94815826 84.71205139]
[84.60430908 67.99977112]
[81.10263062 53.41422272]
[66.55448151 39.57899857]
[72.53414154 21.26724625]
[68.27391052 6.88495064]
[56.93577576 -4.14941502]
[60.73971176 -18.55008698]
[56.47948074 -32.93238068]
[52.21925354 -47.31467819]
[47.95902252 -61.69697571]
[43.69879150 -76.07926941]
[39.43856049 -90.46156311]
[35.17833328 -104.84386444]
[21.57044029 -112.42430115]
[17.45484352 -127.07068634]
[24.76549339 -139.99700928]
[20.50526428 -154.37930298]
[16.24503326 -168.76161194]
[10.74242020 -176.21049500]
[12.06683636 -183.57637024]
[8.18455029 -198.06526184]
[4.30226469 -212.55415344]
[-8.81657696 -221.78863525]
[-9.63236809 -237.81092834]
[2.48069668 -248.33010864]
[18.23051071 -245.27676392]
[25.53516388 -230.99314880]
[18.79115105 -216.43643188]
[22.67343712 -201.94755554]
[26.55572319 -187.45866394]
[30.62733078 -173.02183533]
[34.88756180 -158.63954163]
[39.14778900 -144.25724792]
[52.31920242 -137.39797974]
[56.84456253 -122.87297058]
[49.56062698 -109.10409546]
[53.82085800 -94.72179413]
[58.08108902 -80.33950043]
[62.34132004 -65.95720673]
[66.60154724 -51.57490921]
[70.86177826 -37.19261169]
[75.12200928 -22.81031609]
[86.15542603 -12.80466938]
[82.65621185 2.62472057]
[86.91644287 17.00701714]
[96.42837524 21.13438034]
[102.16168213 30.03807831]
[101.97589111 40.84754562]
[95.68817902 49.91254044]
[99.18985748 64.49809265]
[108.68105316 65.56627655]
[117.54426575 69.12540436]
[125.13832092 74.91799927]
[130.91386414 82.52502441]
[134.45310974 91.39619446]
[135.50000000 100.88976288]
[133.97883606 110.31896973]
[129.99961853 119.00169373]
[123.85025024 126.30983734]
[131.35025024 139.30021667]
[138.85025024 152.29060364]
[146.35025024 165.28097534]
[153.85025024 178.27136230]
[160.93972778 184.22987366]
[161.37144470 191.70141602]
[168.52882385 204.88368225]
[175.68620300 218.06593323]
[191.60615540 216.27537537]
[206.96455383 220.69606018]
[219.43649292 230.62826538]
[227.14570618 244.54026794]
[228.94674683 260.30456543]
[224.59519958 275.52313232]
[214.78028870 287.89224243]
[222.28028870 300.88262939]
[229.78028870 313.87298584]
[237.28028870 326.86337280]
[252.34217834 332.38778687]
[257.27703857 347.65301514]
[248.29928589 360.94885254]
[232.29586792 362.07589722]
[221.54324341 350.16955566]
[224.28991699 334.36337280]
[216.78991699 321.37298584]
[209.28991699 308.38262939]
[201.78991699 295.39224243]
[187.89289856 297.75363159]
[173.99864197 295.20431519]
[161.79342651 288.03286743]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 97]
[5 96]
[6 95]
[7 93]
[8 92]
[9 91]
[10 90]
[11 89]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[31 80]
[32 79]
[34 75]
[35 74]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[46 63]
[47 62]
[48 61]
[50 60]
[51 59]
[52 58]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
