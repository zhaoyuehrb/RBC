%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCUCUCUCUGGUCGGAGGCGGCGGUAAUGGCGGAUGGUGGGUUGUGGCGCCGGCGGCGGCUGCUGUGAGGGACG\
) } def
/len { sequence length } bind def

/coor [
[102.40162659 345.85742188]
[101.79763794 330.86956787]
[101.19364929 315.88174438]
[100.58966064 300.89392090]
[99.98567200 285.90606689]
[99.38168335 270.91824341]
[98.77769470 255.93040466]
[90.53419495 243.52500916]
[97.70954132 229.42448425]
[86.62187958 219.54524231]
[85.79583740 204.35404968]
[96.23327637 192.79127502]
[95.62928009 177.80343628]
[95.02529144 162.81559753]
[94.42130280 147.82775879]
[93.81731415 132.83993530]
[93.21332550 117.85209656]
[82.63489532 107.95043182]
[82.05146027 93.47266388]
[91.79883575 82.75189209]
[83.51213837 69.27445984]
[90.73068237 56.24596405]
[90.12669373 41.25812912]
[89.52270508 26.27029228]
[88.91871643 11.28245735]
[88.31472778 -3.70537734]
[80.02802277 -17.18280792]
[87.24657440 -30.21130753]
[86.64258575 -45.19914246]
[83.08945465 -53.92287064]
[86.32836914 -60.80009079]
[86.32836914 -75.80008698]
[86.32836914 -90.80008698]
[86.32836914 -105.80008698]
[73.29473877 -114.05406189]
[66.81331635 -128.05387878]
[68.95229340 -143.33222961]
[79.02914429 -155.01387024]
[93.82836914 -159.37123108]
[108.62759399 -155.01387024]
[118.70443726 -143.33222961]
[120.84341431 -128.05387878]
[114.36199188 -114.05406189]
[101.32836914 -105.80008698]
[101.32836914 -90.80008698]
[101.32836914 -75.80008698]
[101.32836914 -60.80009079]
[101.63042450 -45.80313110]
[102.23441315 -30.81529617]
[110.47791290 -18.40989685]
[103.30256653 -4.30936670]
[103.90655518 10.67846870]
[104.51054382 25.66630363]
[105.11453247 40.65413666]
[105.71852112 55.64197159]
[113.96202087 68.04737091]
[106.78667450 82.14790344]
[117.36510468 92.04956818]
[117.94853973 106.52733612]
[108.20116425 117.24810791]
[108.80515289 132.23594666]
[109.40914154 147.22377014]
[110.01313019 162.21160889]
[110.61711884 177.19944763]
[111.22110748 192.18728638]
[122.55511475 202.87269592]
[122.95413208 218.08110046]
[112.69737244 228.82048035]
[120.98407745 242.29791260]
[113.76552582 255.32641602]
[114.36951447 270.31423950]
[114.97350311 285.30209351]
[115.57749176 300.28991699]
[116.18148804 315.27777100]
[116.78547668 330.26559448]
[117.38946533 345.25341797]
[120.35395050 364.40707397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[7 70]
[9 68]
[12 65]
[13 64]
[14 63]
[15 62]
[16 61]
[17 60]
[20 57]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[28 49]
[29 48]
[31 47]
[32 46]
[33 45]
[34 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
