%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGGCGGUUCCUCUGGCCACUUUCUCACAGUGUCUUUGGGCGUCUUCUUGACUGAAUCUGACUCCAUUGGAGGCUGUGAUCC\
) } def
/len { sequence length } bind def

/coor [
[3.93851423 229.33889771]
[-10.07617378 228.42991638]
[-22.62704086 222.22590637]
[-33.99661636 232.01022339]
[-45.36619186 241.79454041]
[-56.73576736 251.57884216]
[-62.14896393 266.44519043]
[-76.84281921 268.88235474]
[-77.77379608 284.65921021]
[-89.64334106 295.09420776]
[-105.40946198 293.99649048]
[-115.71839905 282.01730347]
[-114.45404816 266.26367188]
[-102.36651611 256.08193970]
[-86.62713623 257.51278687]
[-82.02716064 243.34629822]
[-66.52008057 240.20927429]
[-55.15050507 230.42495728]
[-43.78092957 220.64064026]
[-32.41135406 210.85633850]
[-36.84233093 195.62197876]
[-34.23434448 179.91368103]
[-25.05191612 166.83410645]
[-11.06311321 158.98857117]
[5.00072527 157.96618652]
[19.97823715 164.01814270]
[30.97401619 153.81555176]
[41.96979523 143.61296082]
[52.96557236 133.41036987]
[63.96134949 123.20777893]
[74.95713043 113.00518799]
[85.95290375 102.80259705]
[90.25724030 89.49980164]
[103.84450531 86.20162201]
[114.84027863 75.99903107]
[125.83605957 65.79644012]
[130.72190857 48.16167831]
[147.81260681 44.67427826]
[158.41921997 34.06767654]
[169.02581787 23.46107674]
[179.63241577 12.85447502]
[183.61833191 4.35562038]
[190.83950806 2.05888271]
[201.83528137 -8.14370823]
[212.83106995 -18.34630013]
[223.23747253 -29.14937782]
[233.02178955 -40.51895523]
[242.80610657 -51.88853073]
[241.37525940 -67.62791443]
[251.55697632 -79.71543884]
[267.31060791 -80.97979736]
[279.28982544 -70.67085266]
[280.38754272 -54.90473557]
[269.95251465 -43.03519440]
[254.17567444 -42.10421753]
[244.39137268 -30.73464203]
[234.60705566 -19.36506653]
[234.61363220 -15.60254478]
[232.63305664 -11.67369652]
[228.62252808 -8.59428501]
[223.03366089 -7.35052156]
[212.03787231 2.85206962]
[201.04209900 13.05466080]
[190.23901367 23.46107674]
[179.63241577 34.06767654]
[169.02581787 44.67427826]
[158.41921997 55.28087997]
[158.05789185 67.52567291]
[149.09274292 76.45631409]
[136.03865051 76.79222107]
[125.04286957 86.99481201]
[114.04709625 97.19740295]
[109.74275970 110.50019836]
[96.15549469 113.79837799]
[85.15972137 124.00096893]
[74.16394043 134.20355225]
[63.16816330 144.40614319]
[52.17238617 154.60873413]
[41.17660522 164.81132507]
[30.18082809 175.01391602]
[34.88356781 188.47859192]
[34.05513763 202.67311096]
[27.85615349 215.42082214]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 17]
[8 15]
[26 80]
[27 79]
[28 78]
[29 77]
[30 76]
[31 75]
[32 74]
[34 72]
[35 71]
[36 70]
[38 67]
[39 66]
[40 65]
[41 64]
[43 63]
[44 62]
[45 61]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
