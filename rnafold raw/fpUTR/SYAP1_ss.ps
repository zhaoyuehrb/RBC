%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGAGGCGGGGCUGCGGCGGCUGCGGUGUUCCUCCGACUUCCGGACAUCUCCCUGGGAGUCGCGCAGAGUGGAGUCAAAGGCAACCAGUGCUCGCUGCGGUCUCUGGGGAUCGGGACCGCGGCGGCGGCCCGCGAGCGGG\
) } def
/len { sequence length } bind def

/coor [
[128.61703491 143.32276917]
[113.92315674 146.33770752]
[100.80406952 139.06518555]
[95.57511902 125.00782013]
[84.17980957 134.76214600]
[72.78450775 144.51647949]
[61.38919830 154.27081299]
[56.85780334 162.29518127]
[49.63221741 164.11149597]
[38.02391434 173.61135864]
[32.24435806 188.33912659]
[17.49467087 190.41181946]
[5.88636684 199.91166687]
[-5.72193718 209.41152954]
[-17.33024025 218.91137695]
[-28.93854523 228.41123962]
[-40.54684830 237.91110229]
[-52.15515137 247.41094971]
[-60.58355713 262.12142944]
[-77.05236816 258.09469604]
[-77.74199677 241.15476990]
[-61.65501022 235.80265808]
[-50.04670715 226.30279541]
[-38.43840027 216.80293274]
[-26.83009720 207.30308533]
[-15.22179413 197.80322266]
[-3.61349034 188.30335999]
[7.99481344 178.80351257]
[12.94406605 164.75523376]
[28.52405548 162.00305176]
[40.13235855 152.50318909]
[51.63486862 142.87550354]
[63.03017426 133.12117004]
[74.42548370 123.36684418]
[85.82078552 113.61251068]
[85.15728760 98.62718964]
[72.94448090 89.91815186]
[60.73168182 81.20910645]
[48.51887512 72.50006104]
[36.30607224 63.79101944]
[24.09326935 55.08197403]
[11.88046646 46.37293243]
[-0.33233643 37.66388702]
[-12.54513931 28.95484543]
[-24.75794220 20.24580193]
[-39.42924881 25.29876709]
[-54.25876617 20.73093796]
[-63.54424286 8.29874134]
[-63.71522522 -7.21739197]
[-54.70596695 -19.85119057]
[-39.98070908 -24.74470329]
[-25.20161819 -20.01627159]
[-16.05155182 -7.48407602]
[-16.04890060 8.03299904]
[-3.83609653 16.74204254]
[8.37670708 25.45108604]
[20.58950996 34.16012955]
[32.80231476 42.86917114]
[45.01511765 51.57821655]
[57.22792053 60.28725815]
[69.44071960 68.99629974]
[81.65352631 77.70534515]
[93.86633301 86.41439056]
[108.56996155 89.38141632]
[123.20435333 86.08983612]
[137.83874512 82.79826355]
[143.71139526 70.62442780]
[155.36575317 64.17224121]
[168.41244507 65.61434937]
[178.08438110 74.19724274]
[192.78800964 71.23021698]
[207.49163818 68.26318359]
[222.19526672 65.29615784]
[230.06181335 60.49600983]
[237.25682068 62.42992020]
[252.02249146 59.78889084]
[266.78814697 57.14786148]
[270.09548950 43.94078827]
[279.88241577 33.40917206]
[294.25704956 28.65766525]
[309.89395142 31.55225563]
[319.64828491 20.15695000]
[329.40261841 8.76164341]
[339.15695190 -2.63366318]
[339.35446167 -18.67550087]
[352.10757446 -28.40884399]
[367.63314819 -24.36710358]
[374.02133179 -9.65075970]
[366.37164307 4.45107079]
[350.55224609 7.12066889]
[340.79791260 18.51597595]
[331.04357910 29.91128159]
[321.28924561 41.30658722]
[326.64410400 55.31820679]
[341.51214600 57.30351639]
[356.38018799 59.28882217]
[371.24822998 61.27413177]
[386.11627197 63.25943756]
[400.98431396 65.24474335]
[415.85235596 67.23005676]
[430.72036743 69.21536255]
[445.58840942 71.20066833]
[460.45645142 73.18597412]
[475.32449341 75.17128754]
[490.19253540 77.15659332]
[500.79660034 65.82816315]
[516.04046631 62.92925262]
[530.06262207 69.57454681]
[537.47113037 83.20880890]
[535.41741943 98.58937073]
[524.69104004 109.80210114]
[509.41662598 112.53547668]
[495.46743774 105.73845673]
[488.20721436 92.02462769]
[473.33917236 90.03932190]
[458.47116089 88.05401611]
[443.60311890 86.06871033]
[428.73507690 84.08339691]
[413.86703491 82.09809113]
[398.99899292 80.11278534]
[384.13095093 78.12747955]
[369.26290894 76.14216614]
[354.39486694 74.15686035]
[339.52685547 72.17155457]
[324.65881348 70.18624878]
[307.26196289 87.55250549]
[284.27172852 87.33263397]
[269.42919922 71.91352844]
[254.66351318 74.55455780]
[239.89784241 77.19558716]
[225.16229248 79.99978638]
[210.45866394 82.96681976]
[195.75503540 85.93384552]
[181.05140686 88.90087128]
[172.39234924 103.27652740]
[155.69534302 107.05326080]
[141.13032532 97.43265533]
[126.49593353 100.72423553]
[111.86153412 104.01581573]
[126.77888489 105.58829498]
[137.08247375 116.48949432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 35]
[5 34]
[6 33]
[7 32]
[9 31]
[10 30]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[64 139]
[65 138]
[66 137]
[70 134]
[71 133]
[72 132]
[73 131]
[75 130]
[76 129]
[77 128]
[81 93]
[82 92]
[83 91]
[84 90]
[94 125]
[95 124]
[96 123]
[97 122]
[98 121]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
[104 115]
[105 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
