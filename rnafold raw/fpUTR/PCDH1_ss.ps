%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACACUCGGGGAGCGGGAGCGCGGCGCGGACGCAAAGCCGCCGGGCUGCUGCGCCCAGAGCCAGCCGGAGCCGGAGCCGGAGCCCGAACUGCAGCUCCAGCCCCAGCCGUGCGGAGCCGCAGCCCAGGCCGGGGCCGGCGGCGGCUC\
) } def
/len { sequence length } bind def

/coor [
[-76.46450043 174.39476013]
[-84.82943726 177.63581848]
[-93.75129700 177.94416809]
[-102.23657990 175.31420898]
[-109.34983063 170.06596375]
[-114.31678009 162.80638123]
[-129.12962341 165.16851807]
[-143.94247437 167.53065491]
[-156.35202026 177.34460449]
[-170.13893127 171.70806885]
[-184.95176697 174.07020569]
[-199.76461792 176.43234253]
[-212.17416382 186.24629211]
[-225.96107483 180.60977173]
[-240.77391052 182.97190857]
[-255.58676147 185.33404541]
[-270.39959717 187.69616699]
[-282.80914307 197.51013184]
[-296.59606934 191.87359619]
[-311.40890503 194.23573303]
[-326.22174072 196.59786987]
[-338.63128662 206.41181946]
[-352.41821289 200.77529907]
[-367.23104858 203.13742065]
[-382.04388428 205.49955750]
[-396.85671997 207.86169434]
[-411.66958618 210.22383118]
[-426.45669556 212.74198914]
[-432.25509644 227.03822327]
[-444.87527466 235.91145325]
[-460.29022217 236.53025818]
[-473.58108521 228.69717407]
[-480.50674438 214.91174316]
[-478.85729980 199.57279968]
[-469.15905762 187.57498169]
[-454.50671387 182.74673462]
[-439.57574463 186.62872314]
[-429.13061523 197.98223877]
[-423.06851196 193.66584778]
[-414.03170776 195.41098022]
[-399.21887207 193.04885864]
[-384.40603638 190.68672180]
[-369.59317017 188.32458496]
[-354.78033447 185.96244812]
[-343.43029785 176.31745911]
[-328.58389282 181.78501892]
[-313.77102661 179.42289734]
[-298.95819092 177.06076050]
[-287.60815430 167.41575623]
[-272.76174927 172.88333130]
[-257.94888306 170.52119446]
[-243.13604736 168.15905762]
[-228.32321167 165.79692078]
[-216.97317505 156.15193176]
[-202.12675476 161.61950684]
[-187.31390381 159.25737000]
[-172.50106812 156.89523315]
[-161.15103149 147.25022888]
[-146.30459595 152.71780396]
[-131.49176025 150.35566711]
[-116.67891693 147.99353027]
[-106.01315308 129.68090820]
[-85.05926514 124.99365234]
[-67.14722443 137.33364868]
[-52.66518402 133.42590332]
[-38.18313980 129.51817322]
[-23.70109749 125.61042786]
[-9.21905327 121.70269775]
[-2.04018140 108.70272064]
[12.59100342 104.53341675]
[26.17790031 112.15142059]
[40.65994263 108.24368286]
[55.14198685 104.33594513]
[69.62403107 100.42820740]
[84.10607147 96.52046967]
[90.54061127 86.76202393]
[101.85736847 83.83602142]
[112.21549225 89.25263977]
[126.77670288 85.65109253]
[138.31542969 74.82666779]
[152.52815247 79.28177643]
[160.16891479 74.15067291]
[167.43431091 75.76123810]
[182.06822205 72.46749115]
[196.70211792 69.17373657]
[208.46650696 58.59498978]
[222.58213806 63.34875488]
[231.05128479 50.27544785]
[245.93905640 47.14358139]
[258.35028076 55.29818344]
[272.98416138 52.00443268]
[287.61807251 48.71068192]
[302.25198364 45.41693115]
[314.01635742 34.83818054]
[328.13198853 39.59194565]
[342.76589966 36.29819489]
[357.39981079 33.00444412]
[372.03372192 29.71069145]
[386.66763306 26.41694069]
[394.41485596 21.44806862]
[401.64468384 23.21145630]
[416.34478760 20.22696304]
[431.01260376 17.08766747]
[439.24838257 3.59887743]
[454.62939453 -0.03430215]
[468.03036499 8.34362984]
[471.50073242 23.76219559]
[462.98156738 37.07383347]
[447.52719116 40.38098145]
[434.30636597 31.72157288]
[428.43164062 36.28968048]
[419.32928467 34.92705917]
[404.62918091 37.91155243]
[389.96136475 41.05084610]
[375.32745361 44.34459686]
[360.69354248 47.63834763]
[346.05966187 50.93209839]
[331.42575073 54.22584915]
[320.70806885 64.56900787]
[305.54574585 60.05083466]
[290.91183472 63.34458542]
[276.27792358 66.63833618]
[261.64401245 69.93209076]
[253.92349243 82.61787415]
[239.12954712 86.16667175]
[225.87588501 77.98265839]
[215.15821838 88.32582092]
[199.99588013 83.80764771]
[185.36196899 87.10139465]
[170.72805786 90.39514923]
[156.12969971 93.84298706]
[145.63247681 104.40980530]
[130.37825012 100.21230316]
[115.81703186 103.81385040]
[104.07284546 115.75233459]
[88.01380920 111.00251007]
[73.53176880 114.91024780]
[59.04972458 118.81798553]
[44.56768036 122.72572327]
[30.08563614 126.63346100]
[22.17514801 140.05216980]
[7.43262815 143.80886841]
[-5.31131554 136.18473816]
[-19.79335976 140.09246826]
[-34.27540207 144.00021362]
[-48.75744629 147.90794373]
[-63.23949051 151.81568909]
[-65.01074982 160.74360657]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 61]
[7 60]
[8 59]
[10 57]
[11 56]
[12 55]
[14 53]
[15 52]
[16 51]
[17 50]
[19 48]
[20 47]
[21 46]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[28 38]
[64 147]
[65 146]
[66 145]
[67 144]
[68 143]
[71 140]
[72 139]
[73 138]
[74 137]
[75 136]
[78 134]
[79 133]
[81 131]
[83 130]
[84 129]
[85 128]
[87 126]
[90 123]
[91 122]
[92 121]
[93 120]
[95 118]
[96 117]
[97 116]
[98 115]
[99 114]
[101 113]
[102 112]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
