%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCGUCCCGGCUCUUUCUAGCUAUAAACACUGCUUGCCGCGCUGCACUCCACCACGCCUCCUCCAAGUCCCAGCGAACCCGCGUGCAACCUGUCCCGACUCUAGCCGCCUCUUCAGCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[82.00406647 455.19619751]
[71.26650238 444.60583496]
[63.50068665 431.67745972]
[59.19480133 417.22372437]
[58.61950684 402.15322876]
[61.81097412 387.41329956]
[68.56858063 373.93054199]
[78.46753693 362.55242920]
[90.88558960 353.99420166]
[105.04212952 348.79391479]
[103.52460480 333.87088013]
[102.00708008 318.94781494]
[92.42506409 314.75115967]
[85.44094849 306.85443115]
[82.40003204 296.67541504]
[83.93127441 286.08059692]
[89.81869507 277.04275513]
[99.02877045 271.27374268]
[98.64878082 256.27856445]
[98.26879120 241.28338623]
[97.88879395 226.28819275]
[83.05829620 220.85510254]
[71.40419769 210.13790894]
[64.71775055 195.74400330]
[64.04189301 179.84884644]
[69.50868225 164.86718750]
[80.31475830 153.08627319]
[94.83927155 146.31657410]
[94.07953644 131.33583069]
[93.31979370 116.35507965]
[82.38426208 101.34149170]
[90.92021942 84.84508514]
[89.40269470 69.92205048]
[87.88516998 54.99900818]
[78.79142761 42.05241013]
[85.20143127 28.60766792]
[83.68390656 13.68462849]
[82.16638184 -1.23841155]
[65.95831299 -12.92754459]
[63.42663193 -32.44702148]
[75.73493958 -47.41991806]
[73.08864594 -62.18464279]
[70.44235229 -76.94937134]
[67.79605103 -91.71409607]
[65.14975739 -106.47882080]
[52.94897079 -120.20007324]
[59.40585327 -136.46549988]
[56.38637543 -151.15844727]
[53.36689758 -165.85139465]
[38.34614563 -167.76341248]
[24.76119232 -174.45127869]
[14.08562660 -185.18957520]
[7.47745800 -198.81349182]
[5.65348911 -213.84518433]
[8.81157112 -228.65414429]
[16.60913849 -241.63400269]
[28.20036888 -251.37680054]
[42.32793427 -256.82571411]
[57.45938110 -257.38967896]
[71.95336151 -253.00752258]
[84.23767853 -244.15460205]
[92.97982025 -231.79119873]
[97.23150635 -217.25842285]
[96.53154755 -202.13264465]
[90.95586395 -188.05464172]
[81.10926819 -176.55145264]
[68.05984497 -168.87088013]
[71.07932281 -154.17791748]
[74.09880066 -139.48497009]
[84.07017517 -132.51138306]
[86.65431213 -120.20956421]
[79.91448212 -109.12511444]
[82.56077576 -94.36038971]
[85.20707703 -79.59566498]
[87.85337067 -64.83094025]
[90.49966431 -50.06621552]
[100.37268066 -46.60926437]
[107.93625641 -39.26564407]
[111.74132538 -29.34694481]
[111.01899719 -18.66643143]
[105.83485413 -9.20762634]
[97.08942413 -2.75593638]
[98.60694885 12.16710377]
[100.12447357 27.09014320]
[109.10967255 38.96934509]
[102.80820465 53.48148346]
[104.32572937 68.40452576]
[105.84325409 83.32756042]
[114.01216125 89.24020386]
[117.61573792 98.65850830]
[115.47990417 108.51388550]
[108.30054474 115.59534454]
[109.06027985 130.57609558]
[109.82002258 145.55683899]
[123.42491150 149.96531677]
[134.67263794 158.74938965]
[142.21458435 170.82977295]
[145.15539551 184.73358154]
[143.15925598 198.77383423]
[136.48805237 211.25419617]
[125.96730804 220.67388916]
[112.88397980 225.90820312]
[113.26397705 240.90339661]
[113.64396667 255.89857483]
[114.02395630 270.89376831]
[129.29763794 283.77987671]
[130.33982849 303.43524170]
[116.93012238 317.43029785]
[118.44764709 332.35333252]
[119.96517181 347.27636719]
[134.87873840 349.52053833]
[148.76535034 355.40383911]
[160.75207520 364.55639648]
[170.08541870 376.40289307]
[176.17868042 390.19863892]
[178.64881897 405.07644653]
[177.34059143 420.10107422]
[172.33621216 434.32806396]
[163.95025635 446.86306763]
[152.70988464 456.91815186]
[139.32167053 463.86126709]
[124.62722015 467.25592041]
[109.55021667 466.88873291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 110]
[11 109]
[12 108]
[18 105]
[19 104]
[20 103]
[21 102]
[28 94]
[29 93]
[30 92]
[32 88]
[33 87]
[34 86]
[36 84]
[37 83]
[38 82]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[47 69]
[48 68]
[49 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
