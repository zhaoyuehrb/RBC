%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGCGUGAGUCACGGCGGGGCUAGCCUUUAUAACGGCCCGGAGGCUCGCGGGAGCCGCCGCGCCCGUCCGCCCGCCGCUCCGCGCUCCACCCAGCGCACCCGGGCCCCGCGCCCCCAACUGCCUCCGGCGGCCGCCCAGUCCCGAGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[208.39526367 389.16537476]
[202.47991943 375.38101196]
[196.56459045 361.59664917]
[190.64924622 347.81228638]
[178.51992798 339.16769409]
[180.18798828 323.43469238]
[174.27265930 309.65029907]
[168.71208191 304.71475220]
[168.38026428 295.52612305]
[162.74549866 281.62469482]
[157.11074829 267.72326660]
[147.31500244 264.57241821]
[140.75811768 256.35815430]
[139.81759644 245.66880798]
[145.04962158 236.04853821]
[139.98284912 221.93017578]
[134.91609192 207.81182861]
[119.27630615 196.49986267]
[123.00849152 176.72927856]
[117.37373352 162.82785034]
[111.73898315 148.92643738]
[106.10422516 135.02500916]
[100.46946716 121.12358856]
[93.68793488 120.16394043]
[87.56967163 117.08547974]
[82.75757599 112.21169281]
[68.23641968 115.97148132]
[53.71526337 119.73126221]
[48.15782166 134.21899414]
[35.12776947 142.64498901]
[19.63542557 141.76927185]
[7.63791132 131.92858887]
[3.74851680 116.90685272]
[9.46279335 102.48026276]
[22.58348656 94.19611359]
[38.06541824 95.23984528]
[49.95547485 105.21010590]
[64.47663116 101.45031738]
[78.99778748 97.69053650]
[82.90643311 87.58079529]
[91.31352234 80.73937225]
[90.40201569 65.76709747]
[89.49050140 50.79481506]
[85.82706451 42.36152267]
[88.71536255 35.51043701]
[88.10748291 20.52276039]
[87.49959564 5.53508329]
[86.89170837 -9.45259380]
[86.28382874 -24.44027138]
[85.67594147 -39.42794800]
[77.38574219 -52.90322495]
[84.60090637 -65.93360138]
[81.43268585 -80.59519958]
[75.79792786 -94.49662018]
[70.16316986 -108.39804077]
[64.52841949 -122.29946136]
[58.89366150 -136.20088196]
[46.53899002 -146.08383179]
[48.92861557 -160.78549194]
[43.29386139 -174.68692017]
[28.51860428 -185.63095093]
[31.54761124 -202.89111328]
[25.63227272 -216.67547607]
[19.71693420 -230.45985413]
[4.94910812 -236.08895874]
[-1.43660855 -250.54573059]
[4.34831762 -265.25320435]
[18.87179184 -271.48571777]
[33.51729584 -265.54562378]
[39.59590912 -250.95706177]
[33.50130081 -236.37518311]
[39.41664124 -222.59082031]
[45.33197784 -208.80645752]
[56.47510529 -204.00550842]
[61.49900055 -192.52137756]
[57.19528198 -180.32167053]
[62.83003616 -166.42025757]
[74.78167725 -157.53163147]
[72.79508209 -141.83563232]
[78.42984009 -127.93421936]
[84.06459045 -114.03279877]
[89.69934845 -100.13137054]
[95.33410645 -86.22994995]
[110.27175903 -84.86373901]
[118.33481598 -97.51233673]
[126.39786530 -110.16094208]
[134.46092224 -122.80953979]
[142.52397156 -135.45814514]
[138.86337280 -150.83265686]
[147.21739197 -164.24853516]
[162.62973022 -167.74639893]
[175.95654297 -159.25100708]
[179.29125977 -143.80253601]
[170.65544128 -130.56628418]
[155.17257690 -127.39508820]
[147.10952759 -114.74649048]
[139.04646301 -102.09788513]
[130.98341370 -89.44927979]
[122.92035675 -76.80068207]
[111.46054077 -67.37083435]
[99.58858490 -66.54148865]
[107.83530426 -54.13822556]
[100.66362000 -40.03583145]
[101.27150726 -25.04815483]
[101.87938690 -10.06047821]
[102.48727417 4.92719984]
[103.09515381 19.91487694]
[103.70304108 34.90255356]
[104.46277618 49.88330078]
[105.37429047 64.85558319]
[106.28580475 79.82785797]
[120.60585022 95.32822418]
[114.37088776 115.48883820]
[120.00564575 129.39025879]
[125.64040375 143.29168701]
[131.27516174 157.19309998]
[136.90991211 171.09452820]
[147.22290039 174.77774048]
[153.64753723 183.37255859]
[154.23579407 193.86640930]
[149.03443909 202.74505615]
[154.10121155 216.86341858]
[159.16796875 230.98176575]
[175.12934875 243.23085022]
[171.01217651 262.08853149]
[176.64692688 275.98995972]
[182.28167725 289.89135742]
[188.05702209 303.73498535]
[193.97236633 317.51934814]
[206.52479553 327.14987183]
[204.43360901 341.89694214]
[210.34895325 355.68130493]
[216.26429749 369.46566772]
[222.17962646 383.25003052]
[228.51124573 396.84823608]
[235.25329590 410.24765015]
[241.99534607 423.64709473]
[248.73739624 437.04653931]
[255.47944641 450.44595337]
[270.81414795 452.81799316]
[281.80218506 463.77438354]
[284.21844482 479.10220337]
[277.13378906 492.90753174]
[263.27246094 499.88198853]
[247.96440125 497.34375000]
[237.09585571 486.26879883]
[234.84602356 470.91567993]
[242.08000183 457.18801880]
[235.33796692 443.78857422]
[228.59591675 430.38912964]
[221.85386658 416.98971558]
[215.11181641 403.59027100]
[211.83564758 402.14312744]
[209.11700439 399.00509644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 134]
[2 133]
[3 132]
[4 131]
[6 129]
[7 128]
[9 127]
[10 126]
[11 125]
[15 123]
[16 122]
[17 121]
[19 117]
[20 116]
[21 115]
[22 114]
[23 113]
[26 39]
[27 38]
[28 37]
[41 111]
[42 110]
[43 109]
[45 108]
[46 107]
[47 106]
[48 105]
[49 104]
[50 103]
[52 101]
[53 83]
[54 82]
[55 81]
[56 80]
[57 79]
[59 77]
[60 76]
[62 73]
[63 72]
[64 71]
[84 99]
[85 98]
[86 97]
[87 96]
[88 95]
[135 152]
[136 151]
[137 150]
[138 149]
[139 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
