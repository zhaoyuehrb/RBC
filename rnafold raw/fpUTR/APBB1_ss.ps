%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGGGCGCGGCCCCGCGGCCCGCGCGCUCCUGGGCGGGGGAUGUUGUGAUGGAGAAGCCGCGGCGGAGCCCGAACCCCGCAGCCUGAGCCACCUCCGUCAUCUGGGCCCGGGGCCUCACCGCGCAGGAGCUGCCAAGGCC\
) } def
/len { sequence length } bind def

/coor [
[-6.53510618 431.85122681]
[-17.65385437 436.73992920]
[-23.47066689 450.56616211]
[-29.28747940 464.39239502]
[-35.10429382 478.21862793]
[-40.92110443 492.04486084]
[-46.73791885 505.87109375]
[-47.30693054 522.81549072]
[-63.74665070 526.95941162]
[-72.27957153 512.30932617]
[-60.56414795 500.05429077]
[-54.74733734 486.22805786]
[-48.93052292 472.40182495]
[-43.11371231 458.57559204]
[-37.29689789 444.74935913]
[-31.48008728 430.92312622]
[-34.64000702 413.69528198]
[-19.96607018 402.63143921]
[-14.45654678 388.67990112]
[-8.94702339 374.72836304]
[-3.43749905 360.77685547]
[-7.74241590 341.97344971]
[8.06400299 329.54690552]
[12.95101166 315.36532593]
[17.83802032 301.18374634]
[17.03707695 293.77655029]
[22.99318314 286.74456787]
[28.19272232 272.67456055]
[33.39226151 258.60458374]
[38.59180069 244.53457642]
[43.79133987 230.46458435]
[48.99087906 216.39459229]
[54.19041443 202.32458496]
[51.34455872 187.70439148]
[63.38578033 177.44184875]
[68.58531952 163.37185669]
[73.78485870 149.30186462]
[78.98439789 135.23187256]
[69.89617157 127.86932373]
[63.25502014 118.24134064]
[59.60080338 107.13055420]
[59.23055649 95.44013977]
[62.17437744 84.12038422]
[68.19297028 74.09145355]
[76.79708862 66.16857910]
[87.28733826 60.99579239]
[98.81096649 58.99358368]
[101.12470245 44.17310333]
[103.43843079 29.35262299]
[105.75216675 14.53214264]
[108.06590271 -0.28833747]
[110.37963867 -15.10881805]
[112.69336700 -29.92929840]
[115.00710297 -44.74977875]
[117.32083893 -59.57025909]
[106.75542450 -73.46513367]
[109.41644287 -90.37586212]
[123.18614960 -99.96929169]
[125.17146301 -114.83732605]
[126.99217987 -129.72642517]
[128.31788635 -144.66772461]
[129.31272888 -159.63468933]
[122.50772858 -173.91764832]
[131.07209778 -186.10372925]
[132.06695557 -201.07070923]
[133.06179810 -216.03767395]
[134.05664062 -231.00465393]
[127.25164032 -245.28759766]
[135.81600952 -257.47369385]
[125.21920013 -269.19900513]
[126.10060883 -284.97869873]
[137.93730164 -295.45095825]
[153.70680237 -294.40277100]
[164.05331421 -282.45599365]
[162.83847046 -266.69848633]
[150.78298950 -256.47885132]
[157.65914917 -243.26643372]
[149.02360535 -230.00981140]
[148.02876282 -215.04283142]
[147.03392029 -200.07586670]
[146.03907776 -185.10888672]
[152.91523743 -171.89646912]
[144.27969360 -158.63984680]
[143.28485107 -143.67288208]
[145.75448608 -139.50102234]
[145.57424927 -133.72088623]
[141.90049744 -128.07051086]
[144.30734253 -121.01960754]
[140.03950500 -112.85202026]
[138.05418396 -97.98398590]
[147.25965881 -88.90258789]
[149.56388855 -75.98027802]
[143.89884949 -63.92364883]
[132.14131165 -57.25652313]
[129.82759094 -42.43604279]
[127.51384735 -27.61556435]
[125.20011902 -12.79508400]
[122.88638306 2.02539659]
[120.57264709 16.84587669]
[118.25891113 31.66635704]
[115.94518280 46.48683548]
[113.63144684 61.30731583]
[128.09811401 70.10960388]
[137.77700806 84.00505829]
[141.01887512 100.62598419]
[155.72250366 103.59300995]
[170.42613220 106.56003571]
[185.12976074 109.52706909]
[199.83338928 112.49409485]
[216.55555725 109.70023346]
[223.86938477 124.99546051]
[211.19657898 136.25761414]
[196.86636353 127.19772339]
[182.16273499 124.23069763]
[167.45910645 121.26367188]
[152.75547791 118.29663849]
[138.05184937 115.32961273]
[127.51525879 130.42779541]
[111.43659210 139.39726257]
[93.05438995 140.43141174]
[87.85485840 154.50140381]
[82.65531921 168.57139587]
[77.45578003 182.64138794]
[79.92972565 198.26797485]
[68.26041412 207.52412415]
[63.06087494 221.59413147]
[57.86133575 235.66412354]
[52.66179657 249.73411560]
[47.46225739 263.80410767]
[42.26271820 277.87411499]
[37.06317902 291.94412231]
[32.01959610 306.07077026]
[27.13258934 320.25234985]
[22.24558067 334.43392944]
[27.61000443 344.01022339]
[26.79001236 354.73483276]
[20.30343246 363.03646851]
[10.51402950 366.28637695]
[5.00450563 380.23788452]
[-0.50501847 394.18942261]
[-6.01454258 408.14096069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[7 11]
[18 141]
[19 140]
[20 139]
[21 138]
[23 134]
[24 133]
[25 132]
[27 131]
[28 130]
[29 129]
[30 128]
[31 127]
[32 126]
[33 125]
[35 123]
[36 122]
[37 121]
[38 120]
[47 102]
[48 101]
[49 100]
[50 99]
[51 98]
[52 97]
[53 96]
[54 95]
[55 94]
[58 90]
[59 89]
[60 87]
[61 84]
[62 83]
[64 81]
[65 80]
[66 79]
[67 78]
[69 76]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
