%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUUAACUCCAUCUUCAGUGAUUUGGCCAGAACCUGCUGCCAGUCUGAAAGAGUUGGGGGA\
) } def
/len { sequence length } bind def

/coor [
[94.35821533 253.20021057]
[93.62220001 238.21827698]
[92.88618469 223.23634338]
[89.27700043 216.46171570]
[92.50000000 207.50485229]
[92.50000000 192.50485229]
[92.50000000 177.50485229]
[92.50000000 162.50485229]
[92.50000000 147.50485229]
[92.50000000 132.50485229]
[92.50000000 117.50485229]
[85.07476044 111.82823944]
[81.24464417 103.30249786]
[81.93222046 93.98126984]
[86.97187042 86.10979462]
[95.14967346 81.58412933]
[97.35063171 66.74648285]
[99.55158234 51.90883636]
[101.75254059 37.07118988]
[103.95349884 22.23354149]
[96.92435455 14.98668098]
[94.28853607 5.38747692]
[96.56578064 -4.15782785]
[103.06153107 -11.32374001]
[112.07098389 -14.43198586]
[116.42525482 -28.78609085]
[120.77951813 -43.14019775]
[125.13378906 -57.49430084]
[129.48806763 -71.84840393]
[129.00389099 -81.35518646]
[134.42422485 -86.79040527]
[139.47758484 -100.91356659]
[132.49465942 -115.09152222]
[137.66133118 -130.02742004]
[151.91232300 -136.86004639]
[166.79275513 -131.53575134]
[173.47434998 -117.21331787]
[167.99301147 -102.39000702]
[153.60073853 -95.86022186]
[148.54739380 -81.73706055]
[143.84216309 -67.49413300]
[139.48789978 -53.14002991]
[135.13362122 -38.78592682]
[130.77935791 -24.43182182]
[126.42508698 -10.07771587]
[133.37612915 9.10971642]
[118.79114532 24.43449974]
[116.59018707 39.27214813]
[114.38923645 54.10979462]
[112.18827820 68.94744110]
[109.98731995 83.78508759]
[118.99229431 101.40095520]
[107.50000000 117.50485229]
[107.50000000 132.50485229]
[107.50000000 147.50485229]
[107.50000000 162.50485229]
[107.50000000 177.50485229]
[107.50000000 192.50485229]
[107.50000000 207.50485229]
[107.86811829 222.50033569]
[108.60413361 237.48226929]
[109.34014893 252.46420288]
[112.47327423 271.59097290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[5 59]
[6 58]
[7 57]
[8 56]
[9 55]
[10 54]
[11 53]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[31 40]
[32 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
