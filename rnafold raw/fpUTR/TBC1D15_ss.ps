%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGCCGGAUGUUGUUGUAUGUCCGAGAGACACGUGAGGUUCUGCUACGUCAUUACCAGGCACGCGCAGGAAACAUGGCGGCGGCGGGUGUUGUGAGCGGGAAGGUUUUUGGUUUCUUCUUGAUUCAAUCUUGAUAAGUAGU\
) } def
/len { sequence length } bind def

/coor [
[64.45156860 186.05038452]
[62.99068069 171.12170410]
[70.12892151 157.93168640]
[73.40160370 143.29304504]
[76.67429352 128.65441895]
[79.94698334 114.01578522]
[72.44742584 114.09760284]
[62.55724335 125.37519836]
[52.66705322 136.65278625]
[42.77686691 147.93038940]
[32.88668060 159.20799255]
[22.99649239 170.48558044]
[13.10630608 181.76318359]
[14.38992214 197.51525879]
[4.09563923 209.50706482]
[-11.66912651 210.62406921]
[-23.55142021 200.20356750]
[-24.50168800 184.42787170]
[-13.95615101 172.65641785]
[1.82870853 171.87300110]
[11.71889591 160.59539795]
[21.60908318 149.31779480]
[31.49926949 138.04020691]
[41.38945770 126.76260376]
[51.27964401 115.48500824]
[61.16983032 104.20741272]
[93.22462463 89.27069092]
[93.55184937 74.27426147]
[93.87906647 59.27783203]
[94.20629120 44.28139877]
[94.53351593 29.28496933]
[94.86074066 14.28853893]
[91.90190125 5.56467533]
[95.36223602 -1.03049719]
[96.01652527 -16.01622009]
[88.88854218 -30.14075470]
[97.17363739 -42.51841736]
[97.82792664 -57.50413895]
[98.48221588 -72.48986053]
[88.33602142 -89.85092926]
[99.24473572 -105.76246643]
[99.24473572 -120.76246643]
[99.24473572 -135.76246643]
[99.24473572 -150.76246643]
[99.24473572 -165.76246643]
[99.24473572 -180.76246643]
[99.24473572 -195.76246643]
[96.09629059 -204.41970825]
[99.41192627 -211.08880615]
[99.73915100 -226.08523560]
[96.78031158 -234.80909729]
[100.24064636 -241.40426636]
[100.89493561 -256.38998413]
[93.76695251 -270.51452637]
[102.05204773 -282.89218140]
[102.70633698 -297.87789917]
[103.36062622 -312.86361694]
[104.01492310 -327.84936523]
[95.86921692 -337.91354370]
[96.76741028 -350.42712402]
[105.67801666 -358.67794800]
[106.65906525 -373.64584351]
[104.08357239 -382.49044800]
[107.82829285 -388.92840576]
[109.13562775 -403.87133789]
[110.44296265 -418.81423950]
[111.58721924 -433.77053833]
[112.56826782 -448.73843384]
[99.75341034 -457.20452881]
[92.90283966 -470.95098877]
[93.85931396 -486.28009033]
[102.36555481 -499.06832886]
[116.13341522 -505.87579346]
[131.45942688 -504.87127686]
[144.22096252 -496.32498169]
[150.98521423 -482.53585815]
[149.93266296 -467.21307373]
[141.34642029 -454.47839355]
[127.53615570 -447.75738525]
[126.55510712 -432.78948975]
[129.27687073 -425.85681152]
[125.38587952 -417.50692749]
[124.07854462 -402.56399536]
[122.77120972 -387.62106323]
[121.62695312 -372.66479492]
[120.64590454 -357.69689941]
[129.25964355 -342.44445801]
[119.00064087 -327.19506836]
[118.34635162 -312.20935059]
[117.69206238 -297.22363281]
[117.03777313 -282.23788452]
[124.21254730 -269.18524170]
[115.88066101 -255.73570251]
[115.22637177 -240.74996948]
[114.73558044 -225.75801086]
[114.40835571 -210.76158142]
[114.24473572 -195.76246643]
[114.24473572 -180.76246643]
[114.24473572 -165.76246643]
[114.24473572 -150.76246643]
[114.24473572 -135.76246643]
[114.24473572 -120.76246643]
[114.24473572 -105.76246643]
[122.15341949 -99.14714050]
[125.13855743 -89.04789734]
[121.96748352 -78.77445221]
[113.46794128 -71.83557129]
[112.81365204 -56.84984970]
[112.15935516 -41.86412430]
[119.33413696 -28.81147194]
[111.00225067 -15.36192989]
[110.34795380 -0.37620637]
[109.85717010 14.61576271]
[109.52994537 29.61219215]
[109.20272064 44.60862350]
[108.87550354 59.60505295]
[108.54827881 74.60148621]
[108.22105408 89.59791565]
[113.50480652 103.63650513]
[123.63865662 114.69566345]
[139.19239807 115.54360962]
[149.31202698 126.90353394]
[148.40777588 141.72642517]
[158.54162598 152.78558350]
[168.67549133 163.84474182]
[183.83407593 171.43772888]
[180.73414612 188.10586548]
[163.85925293 189.74127197]
[157.61633301 173.97859192]
[147.48246765 162.91943359]
[137.34861755 151.86027527]
[122.50333405 151.46917725]
[112.06861877 140.39796448]
[112.57949829 124.82951355]
[102.44564056 113.77035522]
[94.94609070 113.85216522]
[98.53733826 128.41592407]
[102.12858582 142.97967529]
[105.71984100 157.54342651]
[113.14464569 170.57693481]
[112.00836945 185.53382874]
[102.69982910 197.29611206]
[88.40426636 201.83888245]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[27 118]
[28 117]
[29 116]
[30 115]
[31 114]
[32 113]
[34 112]
[35 111]
[37 109]
[38 108]
[39 107]
[41 103]
[42 102]
[43 101]
[44 100]
[45 99]
[46 98]
[47 97]
[49 96]
[50 95]
[52 94]
[53 93]
[55 91]
[56 90]
[57 89]
[58 88]
[61 86]
[62 85]
[64 84]
[65 83]
[66 82]
[67 80]
[68 79]
[119 135]
[120 134]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
