%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUAGCUCAGGAACCCAAACCUGUCGGGCAGGUUUUGAGAGCUGUGGAGAGAGGGACAGAGGCUGGAGAAGGAUGUAUGGCCUGCCCUGGGCUUGUCUGUUCCCUCCUGAGCCUGAGCCCCUUACCUUCCUGACCCC\
) } def
/len { sequence length } bind def

/coor [
[138.65884399 261.76077271]
[135.29742432 247.14227295]
[131.93600464 232.52375793]
[128.57458496 217.90524292]
[125.21317291 203.28674316]
[121.19461823 188.83505249]
[116.52713013 174.57971191]
[111.85964203 160.32438660]
[107.19216156 146.06904602]
[102.52467346 131.81370544]
[97.85718536 117.55838013]
[91.11046600 114.28244781]
[84.55839539 127.77579498]
[71.06514740 121.22352600]
[77.61701202 107.73059082]
[70.87029266 104.45466614]
[60.56374359 116.45823669]
[45.95405579 113.55887604]
[31.86511993 118.70687103]
[17.77618408 123.85486603]
[3.68724799 129.00286865]
[-10.40168858 134.15086365]
[-24.49062538 139.29885864]
[-38.57956314 144.44685364]
[-52.66849899 149.59484863]
[-65.47049713 160.70994568]
[-79.69514465 151.48521423]
[-74.76869965 135.26280212]
[-57.81649399 135.50592041]
[-43.72755814 130.35792542]
[-29.63862228 125.20992279]
[-15.54968548 120.06192780]
[-1.46074879 114.91393280]
[12.62818813 109.76593018]
[26.71712494 104.61793518]
[40.80606079 99.46994019]
[50.10486984 87.83458710]
[65.72229004 90.36573029]
[75.55525208 85.15554810]
[85.22986603 84.24999237]
[93.24473572 87.07346344]
[98.42165375 92.58784485]
[103.72853088 78.55798340]
[109.03540802 64.52812195]
[102.78427887 50.26063538]
[108.36607361 36.10795593]
[122.00646210 30.23638725]
[127.31333923 16.20652580]
[132.62022400 2.17666292]
[137.92710876 -11.85319901]
[137.04716492 -17.17045975]
[138.23037720 -21.80331612]
[140.85069275 -25.06655312]
[144.09826660 -26.63348007]
[150.34350586 -40.27154922]
[156.58874512 -53.90962219]
[162.83398438 -67.54769135]
[169.07922363 -81.18576813]
[175.32446289 -94.82383728]
[181.56970215 -108.46190643]
[187.81494141 -122.09997559]
[193.75038147 -135.87570190]
[199.37297058 -149.78205872]
[204.99555969 -163.68840027]
[210.61814880 -177.59474182]
[215.92503357 -191.62460327]
[220.91348267 -205.77081299]
[220.82415771 -214.99116516]
[226.17784119 -220.17817688]
[223.82334900 -235.82321167]
[235.56303406 -244.98992920]
[240.86991882 -259.01980591]
[246.17678833 -273.04965210]
[237.54969788 -285.94744873]
[238.18501282 -301.45150757]
[247.83842468 -313.60021973]
[262.79800415 -317.72216797]
[277.31152344 -312.23233032]
[285.79818726 -299.24172974]
[284.99472046 -283.74545288]
[275.21008301 -271.70217896]
[260.20666504 -267.74276733]
[254.89978027 -253.71292114]
[249.59289551 -239.68305969]
[252.32696533 -225.04153442]
[240.20770264 -214.87129211]
[235.05970764 -200.78236389]
[230.07124329 -186.63615417]
[231.32876587 -181.94909668]
[229.59477234 -176.42527771]
[224.52450562 -171.97215271]
[218.90190125 -158.06581116]
[213.27931213 -144.15945435]
[207.65672302 -130.25311279]
[208.70117188 -125.51402283]
[206.71932983 -120.07421112]
[201.45301819 -115.85473633]
[195.20777893 -102.21666718]
[188.96253967 -88.57859802]
[182.71730042 -74.94052124]
[176.47206116 -61.30245209]
[170.22682190 -47.66438293]
[163.98158264 -34.02630997]
[157.73634338 -20.38824081]
[151.95697021 -6.54631996]
[146.65008545 7.48354244]
[141.34320068 21.51340485]
[136.03633118 35.54326630]
[142.37608337 48.97245026]
[137.19401550 63.27632523]
[123.06526947 69.83499908]
[117.75839233 83.86486053]
[112.45151520 97.89472198]
[112.11251831 112.89089203]
[116.78000641 127.14622498]
[121.44749451 141.40156555]
[126.11498260 155.65689087]
[130.78247070 169.91223145]
[135.44995117 184.16757202]
[138.94355774 187.06044006]
[141.06817627 190.57807922]
[141.79779053 194.19522095]
[141.28570557 197.43504333]
[139.83168030 199.92532349]
[143.19309998 214.54383850]
[146.55451965 229.16233826]
[149.91593933 243.78085327]
[153.27735901 258.39935303]
[168.09509277 262.23257446]
[179.42636108 272.52142334]
[184.66734314 286.90164185]
[182.61369324 302.06875610]
[173.73731995 314.53744507]
[160.07794189 321.44253540]
[144.77439880 321.19726562]
[131.34333801 313.85800171]
[122.87109375 301.11123657]
[121.30454254 285.88610840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 128]
[2 127]
[3 126]
[4 125]
[5 124]
[6 119]
[7 118]
[8 117]
[9 116]
[10 115]
[11 114]
[16 38]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[42 113]
[43 112]
[44 111]
[47 108]
[48 107]
[49 106]
[50 105]
[54 104]
[55 103]
[56 102]
[57 101]
[58 100]
[59 99]
[60 98]
[61 97]
[62 94]
[63 93]
[64 92]
[65 91]
[66 88]
[67 87]
[69 86]
[71 84]
[72 83]
[73 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
