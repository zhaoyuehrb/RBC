%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCGCGUGCGCCGCCGCAAGCAUGGCUGGUGAUGAUUGGACGACUGGUAACAGGGGGCGGAGGGCUCCGAAGUCUGGUUUUGGGCGGGAAUUGAAACCGCCGCUGAAGCCAACAAGAAUUUGAGAACUGUAAAUACCAAGCCUUGAAAGGGACC\
) } def
/len { sequence length } bind def

/coor [
[85.94880676 149.59544373]
[78.51216125 148.62269592]
[69.55032349 160.65121460]
[60.58848572 172.67974854]
[51.62664795 184.70828247]
[48.98688889 193.51280212]
[42.36319351 196.88542175]
[33.16247559 208.73222351]
[23.96175385 220.57902527]
[14.76103592 232.42582703]
[5.56031656 244.27264404]
[-3.40152025 256.30117798]
[-12.12088680 268.50659180]
[-13.16505146 284.87246704]
[-27.97848892 291.90768433]
[-41.32240295 282.37500000]
[-39.46972275 266.08084106]
[-24.32632256 259.78723145]
[-15.60695553 247.58180237]
[-15.50721169 242.75595093]
[-12.33701229 237.95446777]
[-6.28648758 235.07191467]
[2.91423154 223.22511292]
[12.11495113 211.37831116]
[21.31567001 199.53150940]
[30.51638985 187.68470764]
[39.59812164 175.74644470]
[48.55995941 163.71791077]
[57.52179337 151.68937683]
[66.48363495 139.66085815]
[60.67193604 133.15795898]
[56.08176422 125.83841705]
[52.82100296 117.92586517]
[50.95745850 109.65682983]
[50.51762390 101.27359772]
[51.48669052 93.01717377]
[53.80972290 85.12033081]
[57.39402390 77.80104828]
[62.11249542 71.25652313]
[67.80799103 65.65783691]
[74.29841614 61.14554214]
[81.38249969 57.82618332]
[88.84596252 55.76988602]
[96.46800232 55.00905228]
[104.02778625 55.53817749]
[111.31088257 57.31478119]
[118.11531067 60.26137161]
[126.58871460 47.88391495]
[135.06211853 35.50645828]
[143.53552246 23.12900352]
[152.00892639 10.75154686]
[160.10705566 -1.87462723]
[167.82261658 -14.73814487]
[175.53819275 -27.60166168]
[183.25375366 -40.46517944]
[182.65361023 -55.45317078]
[173.93423462 -67.65860748]
[165.21487427 -79.86403656]
[156.49551392 -92.06947327]
[147.77613831 -104.27490997]
[132.25117493 -108.31905365]
[125.86528778 -123.03639221]
[133.51718140 -137.13703918]
[149.33697510 -139.80418396]
[161.18907166 -128.99182129]
[159.98158264 -112.99427795]
[168.70094299 -100.78884125]
[177.42030334 -88.58340454]
[186.13967896 -76.37796783]
[194.85903931 -64.17253876]
[202.35867310 -64.09749603]
[209.98823547 -77.01220703]
[217.35791016 -63.94742584]
[224.85754395 -63.87238693]
[233.81938171 -75.90091705]
[236.45913696 -84.70544434]
[243.08283997 -88.07806396]
[252.28355408 -99.92486572]
[261.48428345 -111.77166748]
[270.68499756 -123.61847687]
[279.88571167 -135.46527100]
[289.08642578 -147.31208801]
[298.28713989 -159.15888977]
[307.36886597 -171.09715271]
[316.20993042 -183.21473694]
[324.92929077 -195.42016602]
[333.64865112 -207.62561035]
[342.36801147 -219.83103943]
[351.08740234 -232.03648376]
[345.27993774 -246.32904053]
[348.14401245 -261.48822021]
[358.76565552 -272.67678833]
[373.75558472 -276.32449341]
[388.33053589 -271.26739502]
[397.83969116 -259.11917114]
[399.24874878 -243.75630188]
[392.10806274 -230.08099365]
[378.69619751 -222.45700073]
[363.29281616 -223.31710815]
[354.57345581 -211.11167908]
[345.85409546 -198.90625000]
[337.13473511 -186.70080566]
[328.41537476 -174.49537659]
[327.07870483 -167.18365479]
[319.39739990 -162.13531494]
[317.91473389 -154.85180664]
[310.13394165 -149.95816040]
[300.93322754 -138.11135864]
[291.73251343 -126.26455688]
[282.53179932 -114.41775513]
[273.33108521 -102.57095337]
[264.13037109 -90.72414398]
[254.92964172 -78.87734222]
[245.84790039 -66.93907928]
[236.88606262 -54.91055298]
[251.30935669 -50.79122162]
[263.32180786 -41.80786133]
[271.35003662 -29.13712120]
[274.34246826 -14.43863964]
[271.90716553 0.36234879]
[264.36309814 13.32718563]
[252.69839478 22.75771141]
[238.44093323 27.41870117]
[223.45817566 26.69964981]
[209.71258545 20.69473839]
[199.00460815 10.19050217]
[192.73675537 -3.43719578]
[191.73004150 -18.40337372]
[196.11726379 -32.74961472]
[188.40170288 -19.88609886]
[180.68614197 -7.02258110]
[172.97058105 5.84093618]
[173.49853516 9.38064861]
[172.30252075 13.35275078]
[169.19822693 16.92755699]
[164.38638306 19.22495079]
[155.91297913 31.60240746]
[147.43957520 43.97986221]
[138.96617126 56.35731888]
[130.49276733 68.73477173]
[145.86384583 92.80997467]
[143.46037292 123.00840759]
[122.18766022 146.94718933]
[127.75415039 160.87608337]
[133.32063293 174.80497742]
[146.53280640 184.51943970]
[144.45724487 200.78669739]
[129.22911072 206.87242126]
[116.51380157 196.51611328]
[119.39174652 180.37147522]
[113.82524872 166.44258118]
[108.25875854 152.51367188]
[100.82211304 151.54092407]
[99.02929688 166.43341064]
[96.93157196 181.28599548]
[82.05820465 179.34098816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[5 27]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[12 19]
[13 18]
[47 140]
[48 139]
[49 138]
[50 137]
[51 136]
[52 132]
[53 131]
[54 130]
[55 129]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[74 115]
[75 114]
[77 113]
[78 112]
[79 111]
[80 110]
[81 109]
[82 108]
[83 107]
[84 105]
[85 103]
[86 102]
[87 101]
[88 100]
[89 99]
[143 152]
[144 151]
[145 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
