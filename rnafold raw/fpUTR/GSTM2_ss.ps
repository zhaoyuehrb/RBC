%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAGGCUUCCCCUCUACCCUCUCUGGGCCUCUCACAAACGCUGAGCCCCGCCCCGCUGAGGCCUGUCUGCAGAAUCCACAGCAACCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[211.74946594 251.03953552]
[220.47793579 234.23323059]
[210.87841797 222.70721436]
[201.27888489 211.18119812]
[191.11965942 200.14533997]
[180.42573547 189.62678528]
[169.73181152 179.10823059]
[159.03788757 168.58967590]
[148.34394836 158.07112122]
[137.65002441 147.55258179]
[126.95610046 137.03402710]
[119.12265015 141.62300110]
[110.53800964 144.57690430]
[101.53940582 145.77969360]
[92.48032379 145.18412781]
[83.71664429 142.81358337]
[75.59261322 138.76118469]
[68.42738342 133.18614197]
[62.50242233 126.30744934]
[58.05047607 118.39532471]
[55.24643326 109.76056671]
[54.20044708 100.74239349]
[54.95360184 91.69504547]
[57.47631073 82.97395325]
[61.66948318 74.92168427]
[67.36839294 67.85457611]
[74.34916687 62.05022812]
[68.09743500 48.41513062]
[61.84571075 34.78003311]
[55.59398270 21.14493561]
[37.70529175 15.40534878]
[29.64189148 -1.21493125]
[35.98671722 -18.22952652]
[28.84750748 -31.42163277]
[21.70829582 -44.61373901]
[14.56908512 -57.80584717]
[7.21273232 -70.87811279]
[-7.29452085 -78.52478790]
[-7.65546846 -94.91996002]
[6.50120211 -103.19768524]
[20.61232185 -94.84254456]
[20.16157913 -78.44959259]
[26.37823868 -74.18044281]
[27.76119041 -64.94506073]
[34.90040207 -51.75295258]
[42.03961182 -38.56084442]
[49.17882538 -25.36873817]
[60.78718185 -24.51216507]
[70.59063721 -18.01486778]
[76.01294708 -7.44200373]
[75.55992126 4.55279970]
[69.22908020 14.89320755]
[75.48080444 28.52830505]
[81.73253632 42.16340256]
[87.98426056 55.79850006]
[110.19046021 55.34235764]
[130.00064087 65.38625336]
[142.75698853 83.56863403]
[145.46018982 105.61440277]
[137.47465515 126.34009552]
[148.16857910 136.85864258]
[158.86250305 147.37719727]
[169.55642700 157.89575195]
[180.25036621 168.41430664]
[190.94429016 178.93286133]
[201.63821411 189.45141602]
[207.09037781 190.83848572]
[210.96324158 193.96098328]
[212.84872437 197.86576843]
[212.80490112 201.58166504]
[222.40443420 213.10768127]
[232.00395203 224.63369751]
[242.85426331 220.27191162]
[254.45782471 218.95233154]
[265.97918701 220.76150513]
[276.59097290 225.56100464]
[285.53350830 232.99798584]
[292.16894531 242.53108215]
[296.02700806 253.46986389]
[296.83810425 265.02481079]
[294.55236816 276.36425781]
[289.34237671 286.67437744]
[281.59039307 295.21737671]
[289.16186523 308.16622925]
[304.25396729 313.60754395]
[309.27288818 328.84530640]
[300.36856079 342.19042969]
[284.37161255 343.40567017]
[273.55352783 331.55877686]
[276.21301270 315.73770142]
[268.64154053 302.78884888]
[250.12289429 305.40563965]
[232.19776917 299.90664673]
[218.26263428 287.29208374]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 66]
[6 65]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[27 55]
[28 54]
[29 53]
[30 52]
[33 47]
[34 46]
[35 45]
[36 44]
[37 42]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
