%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCGGCCCGCGGGCGCAGCGCCCAGCAGCACCCGGAGUCGCUUGGACGCCGGUUCGGGGCUAUUGCGGGGUGGCGUCGCUGGGCCCGGGAAAGUUCGGGACUGGAGAGUGGCGACGCCGGGCGGCGGGACCC\
) } def
/len { sequence length } bind def

/coor [
[82.35021973 257.14239502]
[84.98857880 237.94113159]
[85.33760834 222.94519043]
[85.68664551 207.94924927]
[77.92126465 201.13685608]
[75.17797089 190.94897461]
[78.61317444 180.73992920]
[87.30623627 174.01235962]
[88.35258484 159.04890442]
[89.39893341 144.08544922]
[90.44528198 129.12197876]
[91.49162292 114.15852356]
[78.16637421 107.27102661]
[66.56430054 116.77848816]
[54.96222305 126.28595734]
[43.36014938 135.79341125]
[31.75807571 145.30088806]
[23.33931541 160.01689148]
[6.86787176 156.00093079]
[6.16713524 139.06146240]
[22.25061226 133.69880676]
[33.85268402 124.19134521]
[45.45475769 114.68388367]
[57.05683517 105.17641449]
[68.65890503 95.66895294]
[73.80687714 91.62833405]
[79.29653931 89.18514252]
[84.74106598 88.31768799]
[89.77433014 88.92068481]
[94.06776428 90.81219482]
[97.34543610 93.74387360]
[96.99259186 77.92659760]
[109.79931641 70.32152557]
[116.84138489 57.07731247]
[123.88346100 43.83309937]
[130.92553711 30.58888435]
[137.96760559 17.34467125]
[137.61476135 1.52739978]
[150.42149353 -6.07767200]
[157.46356201 -19.32188606]
[164.50563049 -32.56610107]
[171.54771423 -45.81031418]
[178.58978271 -59.05452728]
[185.63185120 -72.29874420]
[176.81439209 -83.40573120]
[172.92462158 -96.99809265]
[174.52148438 -111.00189972]
[181.32942200 -123.29360199]
[192.28521729 -132.02206421]
[205.70387268 -135.88734436]
[219.53778076 -134.33415222]
[226.88612366 -147.41091919]
[234.23446655 -160.48768616]
[241.58280945 -173.56443787]
[248.93116760 -186.64120483]
[256.27951050 -199.71797180]
[263.62783813 -212.79473877]
[263.64315796 -228.61593628]
[276.62338257 -235.92095947]
[283.97171021 -248.99772644]
[291.32006836 -262.07449341]
[298.66842651 -275.15124512]
[306.01675415 -288.22802734]
[306.03207397 -304.04922485]
[319.01226807 -311.35424805]
[326.36062622 -324.43099976]
[326.37591553 -340.25219727]
[339.35614014 -347.55722046]
[346.70449829 -360.63397217]
[354.05282593 -373.71075439]
[361.40118408 -386.78750610]
[360.72204590 -405.14663696]
[376.07043457 -413.57409668]
[383.11251831 -426.81829834]
[390.15460205 -440.06253052]
[397.19665527 -453.30673218]
[399.29409790 -470.13043213]
[416.04095459 -472.77224731]
[423.21551514 -457.41119385]
[410.44088745 -446.26464844]
[403.39880371 -433.02044678]
[396.35671997 -419.77624512]
[389.31466675 -406.53201294]
[392.55004883 -394.81671143]
[386.71588135 -383.69854736]
[374.47796631 -379.43917847]
[367.12960815 -366.36239624]
[359.78125000 -353.28564453]
[352.43292236 -340.20886230]
[352.94320679 -325.32299805]
[339.43737793 -317.08264160]
[332.08905029 -304.00588989]
[332.59933472 -289.12002563]
[319.09353638 -280.87966919]
[311.74517822 -267.80291748]
[304.39682007 -254.72615051]
[297.04849243 -241.64938354]
[289.70013428 -228.57261658]
[290.21044922 -213.68675232]
[276.70462036 -205.44639587]
[269.35626221 -192.36962891]
[262.00793457 -179.29286194]
[254.65957642 -166.21609497]
[247.31123352 -153.13932800]
[239.96289062 -140.06256104]
[232.61454773 -126.98580170]
[242.00361633 -114.10758209]
[244.86856079 -98.37076569]
[240.58961487 -82.89805603]
[229.96969604 -70.78208160]
[215.08432007 -64.46723938]
[198.87606812 -65.25666809]
[191.83399963 -52.01245499]
[184.79191589 -38.76824188]
[177.74984741 -25.52402687]
[170.70777893 -12.27981186]
[163.66569519 0.96440160]
[164.52224731 15.83435822]
[151.21182251 24.38674545]
[144.16975403 37.63095856]
[137.12767029 50.87517166]
[130.08560181 64.11938477]
[123.04352570 77.36360168]
[123.90006256 92.23355865]
[110.58964539 100.78594208]
[106.45508575 115.20487213]
[105.40873718 130.16833496]
[104.36238861 145.13179016]
[103.31604767 160.09524536]
[102.26969910 175.05871582]
[111.96675110 192.66242981]
[100.68258667 208.29829407]
[100.33354950 223.29421997]
[99.98451233 238.29016113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 134]
[3 133]
[4 132]
[8 130]
[9 129]
[10 128]
[11 127]
[12 126]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[31 125]
[33 123]
[34 122]
[35 121]
[36 120]
[37 119]
[39 117]
[40 116]
[41 115]
[42 114]
[43 113]
[44 112]
[51 106]
[52 105]
[53 104]
[54 103]
[55 102]
[56 101]
[57 100]
[59 98]
[60 97]
[61 96]
[62 95]
[63 94]
[65 92]
[66 91]
[68 89]
[69 88]
[70 87]
[71 86]
[73 83]
[74 82]
[75 81]
[76 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
