%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGCGGGAGGGAGGAGGGCCAGGCGGGAGGGCGGGGACGGCGCGGCGAGGGGCGGGGUCAGCGCCGAGGCCGCGGGGGCAGCAACGACGCCGGGCAGCGGGAGCGGCGGCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[175.00813293 256.16275024]
[169.44830322 248.61390686]
[168.04013062 239.20451355]
[171.23829651 230.09666443]
[163.00791931 217.55628967]
[154.77754211 205.01593018]
[146.54716492 192.47555542]
[133.61692810 191.62646484]
[123.40921783 183.33094788]
[119.82886505 170.47125244]
[124.41312408 157.72648621]
[112.85888672 157.56153870]
[102.74369812 151.72937012]
[96.68827057 141.60536194]
[96.32717133 129.69338989]
[101.86931610 119.00688934]
[87.98915100 114.84909821]
[81.02218628 102.14447021]
[84.97845459 88.20552826]
[71.55876923 79.82564545]
[72.22332001 64.94586945]
[65.01090240 51.79364777]
[50.10527420 47.27036285]
[42.97821045 33.82939529]
[47.38233185 19.64703369]
[40.16991043 6.49481010]
[32.95748901 -6.65741348]
[25.74506950 -19.80963707]
[8.99577236 -21.68649864]
[-3.24498034 -33.03012085]
[-6.32708359 -49.26346588]
[0.76099837 -64.00597382]
[-6.79608631 -76.96322632]
[-14.35317135 -89.92048645]
[-21.91025543 -102.87773895]
[-36.93008804 -107.00598907]
[-44.40946579 -120.25414276]
[-40.38125229 -134.54780579]
[-47.93833542 -147.50506592]
[-55.49542236 -160.46232605]
[-70.51525116 -164.59057617]
[-77.99462891 -177.83871460]
[-73.96641541 -192.13240051]
[-81.52349854 -205.08964539]
[-89.08058929 -218.04690552]
[-104.53255463 -219.46691895]
[-116.17656708 -229.72344971]
[-119.53526306 -244.87268066]
[-113.31716919 -259.08938599]
[-99.91325378 -266.90698242]
[-84.47760010 -265.31942749]
[-72.94554138 -254.93716431]
[-69.75137329 -239.75241089]
[-76.12332916 -225.60398865]
[-68.56624603 -212.64672852]
[-61.00916290 -199.68948364]
[-46.58473587 -196.15797424]
[-38.73619843 -183.12512207]
[-42.53816605 -168.01940918]
[-34.98108292 -155.06214905]
[-27.42399597 -142.10490417]
[-12.99957085 -138.57339478]
[-5.15103102 -125.54054260]
[-8.95300007 -110.43482208]
[-1.39591563 -97.47756958]
[6.16116905 -84.52031708]
[13.71825409 -71.56305695]
[27.13783264 -71.44937134]
[38.82644272 -64.63742065]
[45.64915466 -52.82942200]
[45.71444321 -39.08353424]
[38.89729309 -27.02205849]
[46.10971451 -13.86983395]
[53.32213211 -0.71761018]
[60.53455353 12.43461323]
[74.86073303 16.34564781]
[82.36251068 29.58112907]
[78.16312408 44.58122635]
[85.37554169 57.73344803]
[98.27935028 65.17259979]
[98.13068390 80.99311066]
[112.01084900 85.15090179]
[118.97781372 97.85552979]
[115.02154541 111.79447174]
[133.32141113 116.29772186]
[142.47734070 132.40753174]
[137.16638184 149.83000183]
[154.21397400 153.47549438]
[163.22726440 168.00360107]
[159.08753967 184.24517822]
[167.31791687 196.78555298]
[175.54829407 209.32591248]
[183.77867126 221.86628723]
[203.47378540 230.09483337]
[204.26773071 250.64848328]
[213.46447754 262.49838257]
[222.66120911 274.34829712]
[230.49700928 279.28897095]
[231.93936157 286.63455200]
[240.82008362 298.72308350]
[249.70082092 310.81161499]
[258.58154297 322.90014648]
[273.97213745 321.83551025]
[287.48410034 329.28067017]
[294.80581665 342.85989380]
[293.60095215 358.24014282]
[284.25399780 370.51361084]
[269.74749756 375.76388550]
[254.71046448 372.31558228]
[243.94111633 361.26910400]
[240.87593079 346.14932251]
[246.49301147 331.78088379]
[237.61228943 319.69235229]
[228.73155212 307.60382080]
[219.85083008 295.51528931]
[210.81130981 283.54501343]
[201.61457825 271.69512939]
[192.41783142 259.84521484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 93]
[5 92]
[6 91]
[7 90]
[11 87]
[16 84]
[19 81]
[21 79]
[22 78]
[25 75]
[26 74]
[27 73]
[28 72]
[32 67]
[33 66]
[34 65]
[35 64]
[38 61]
[39 60]
[40 59]
[43 56]
[44 55]
[45 54]
[95 118]
[96 117]
[97 116]
[99 115]
[100 114]
[101 113]
[102 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
