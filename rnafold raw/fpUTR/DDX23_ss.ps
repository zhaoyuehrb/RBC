%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGUGUUCAUCUCCGCGACCAGGAAACGGGAAAGAUGGCGACGGCUCCGCGACGUUGAGGCCGCGUUGGGCGGUUCAGACUCAGGGUG\
) } def
/len { sequence length } bind def

/coor [
[159.76922607 135.03227234]
[153.80130005 120.83050537]
[139.22779846 117.27903748]
[124.65428925 113.72757721]
[110.08078766 110.17610931]
[96.60859680 113.91667175]
[86.36775208 104.39739990]
[71.79424286 100.84593201]
[57.22073746 97.29446411]
[42.64722824 93.74299622]
[27.96096802 90.69116211]
[13.17907524 88.14250183]
[-1.60281742 85.59384918]
[-16.38471031 83.04518890]
[-31.24499893 81.00269318]
[-46.16635895 79.46872711]
[-61.08771896 77.93476868]
[-70.15938568 80.20117950]
[-76.48925018 76.08520508]
[-91.34954071 74.04270935]
[-101.30137634 85.83102417]
[-116.05335236 90.34577179]
[-130.89814758 86.14630890]
[-141.09886169 74.57266998]
[-143.40046692 59.31795883]
[-137.06852722 45.24990463]
[-124.12356567 36.85756302]
[-108.69625092 36.81890869]
[-95.70938873 45.14626694]
[-89.30703735 59.18241882]
[-74.44674683 61.22491837]
[-59.55375671 63.01340866]
[-44.63239670 64.54737091]
[-29.71103668 66.08133698]
[-25.36271095 63.67507172]
[-19.42858696 64.12750244]
[-13.83605480 68.26329803]
[0.94583839 70.81195831]
[15.72773075 73.36061096]
[30.50962448 75.90926361]
[35.01202011 73.80535126]
[40.90143585 74.66168976]
[46.19869614 79.16949463]
[60.77220154 82.72096252]
[75.34571075 86.27242279]
[89.91921234 89.82389069]
[103.39140320 86.08332825]
[113.63224792 95.60260010]
[128.20576477 99.15406799]
[142.77926636 102.70553589]
[157.35276794 106.25700378]
[169.18533325 96.39309692]
[184.37962341 95.39955902]
[197.09504700 103.44828033]
[202.56735229 117.27548981]
[217.14085388 120.82695770]
[232.38056946 116.57704163]
[242.91404724 127.10771179]
[257.48754883 130.65917969]
[272.06106567 134.21064758]
[286.63458252 137.76211548]
[301.20806885 141.31358337]
[316.03134155 143.60949707]
[330.99636841 144.63313293]
[345.96139526 145.65676880]
[360.92642212 146.68040466]
[375.89144897 147.70404053]
[388.87960815 138.28665161]
[404.30133057 142.70826721]
[410.32635498 157.57698059]
[402.33282471 171.48678589]
[386.45266724 173.76728821]
[374.86782837 162.66906738]
[359.90280151 161.64543152]
[344.93774414 160.62179565]
[329.97271729 159.59815979]
[315.00769043 158.57452393]
[313.19549561 160.35160828]
[310.58609009 161.54280090]
[307.38909912 161.85383606]
[303.91162109 161.06735229]
[300.53073120 159.07287598]
[297.65661621 155.88708496]
[283.08309937 152.33561707]
[268.50961304 148.78414917]
[253.93609619 145.23268127]
[239.36257935 141.68121338]
[225.16526794 146.18516541]
[213.58938599 135.40046692]
[199.01588440 131.84899902]
[187.79568481 141.60835266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 51]
[3 50]
[4 49]
[5 48]
[7 46]
[8 45]
[9 44]
[10 43]
[11 40]
[12 39]
[13 38]
[14 37]
[15 34]
[16 33]
[17 32]
[19 31]
[20 30]
[55 90]
[56 89]
[58 87]
[59 86]
[60 85]
[61 84]
[62 83]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
