%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAGUCCCCAGGCGCUAGCUGACUGGGGUGGUUGGGACCGUUAGCUCGGCAGGCUGGCAGGCUCCGGGGCGCUACUCCAUUGGCGGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[154.57548523 163.22364807]
[152.00862122 159.70295715]
[150.69123840 155.05764771]
[139.47650146 145.09623718]
[128.26177979 135.13481140]
[117.04705048 125.17340088]
[105.83232117 115.21197510]
[89.38801575 112.36148071]
[84.08026886 96.53845215]
[72.53549957 86.96147919]
[60.99072647 77.38451385]
[49.44596100 67.80754852]
[33.88464737 64.95164490]
[29.02907944 50.87071228]
[17.32420731 41.49009705]
[5.46257114 32.30850601]
[-6.39906502 23.12691689]
[-18.41408157 14.14697361]
[-30.57905006 5.37123823]
[-42.74401855 -3.40449643]
[-54.90898895 -12.18023109]
[-67.07395935 -20.95596695]
[-79.23892975 -29.73170090]
[-91.40390015 -38.50743484]
[-100.39236450 -41.06904984]
[-103.82476807 -47.79071426]
[-115.68640137 -56.97230148]
[-129.57989502 -50.55127716]
[-144.86537170 -51.33395386]
[-158.03036499 -59.14047241]
[-166.04963684 -72.17695618]
[-167.08041382 -87.44771576]
[-160.88584900 -101.44364166]
[-148.88940430 -110.94857025]
[-133.84776306 -113.77834320]
[-119.21739197 -109.28269958]
[-108.36023712 -98.49469757]
[-103.77120209 -83.89335632]
[-106.50481415 -68.83393860]
[-94.64318085 -59.65234756]
[-82.62815857 -50.67240524]
[-70.46319580 -41.89667130]
[-58.29822159 -33.12093735]
[-46.13325500 -24.34520149]
[-33.96828461 -15.56946564]
[-21.80331612 -6.79373074]
[-9.63834667 1.98200417]
[-2.21979809 3.37026954]
[2.78252506 11.26528072]
[14.64416122 20.44687080]
[26.50579643 29.62845993]
[33.87322617 31.26648903]
[38.60604858 39.32594299]
[53.34159851 41.49683380]
[59.02292633 56.26277542]
[70.56769562 65.83974457]
[82.11246490 75.41670990]
[93.65723419 84.99368286]
[105.42737579 84.63888550]
[114.36212158 92.30911255]
[115.79373932 103.99725342]
[127.00846863 113.95867157]
[138.22320557 123.92008972]
[149.43792725 133.88150024]
[160.65264893 143.84292603]
[172.51429749 153.02452087]
[188.28468323 154.29144287]
[194.53988647 167.80891418]
[206.99430847 176.16877747]
[222.76470947 177.43571472]
[229.01991272 190.95317078]
[241.47433472 199.31303406]
[253.92875671 207.67289734]
[266.38317871 216.03277588]
[278.83758545 224.39263916]
[294.29437256 221.09657288]
[307.50897217 229.76545715]
[310.64144897 245.25621033]
[301.83331299 258.37841797]
[286.31033325 261.34692383]
[273.28195190 252.40057373]
[270.47772217 236.84706116]
[258.02331543 228.48719788]
[245.56889343 220.12731934]
[233.11447144 211.76745605]
[220.66004944 203.40759277]
[205.78047180 202.73861694]
[198.63444519 188.62319946]
[186.18002319 180.26333618]
[171.30044556 179.59434509]
[164.15441895 165.47894287]
[161.20552063 166.04490662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 65]
[4 64]
[5 63]
[6 62]
[7 61]
[9 58]
[10 57]
[11 56]
[12 55]
[14 53]
[15 51]
[16 50]
[17 49]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[26 40]
[27 39]
[66 91]
[68 89]
[69 88]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
