%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGUUGAGCCGAGAUUAGCAGGAGUCGGGAGGGAGGCUCCUAGACCUGCAGAGAAAGGGGUGCGAUAGGCAAAGGCACC\
) } def
/len { sequence length } bind def

/coor [
[144.40785217 236.26599121]
[132.10198975 244.84303284]
[117.17993164 246.37017822]
[103.39179230 240.46362305]
[94.20272827 228.60778809]
[91.92206573 213.78218079]
[97.12297058 199.71269226]
[108.49839020 189.93516541]
[123.18951416 186.90682983]
[137.50451660 191.38890076]
[130.77253723 177.98442078]
[115.89526367 177.25471497]
[103.29694366 169.12217712]
[96.41533661 155.68676758]
[97.18771362 140.51112366]
[105.50666046 127.67592621]
[98.77467346 114.27143860]
[87.19965363 106.42857361]
[87.82083130 92.46054840]
[81.08884430 79.05606079]
[74.35685730 65.65156555]
[67.62487030 52.24707794]
[60.89288330 38.84259033]
[46.16061783 33.78313446]
[39.52437592 20.09317398]
[44.43858719 6.07939053]
[37.61464310 -0.38940224]
[37.71684265 -7.97794771]
[31.50967979 -21.63339233]
[25.30251884 -35.28883743]
[19.09535789 -48.94427872]
[12.88819790 -62.59972382]
[-1.56811619 -69.55634308]
[-5.00196743 -85.22760010]
[5.22080088 -97.59184265]
[21.25815582 -97.16429138]
[30.80761147 -84.27291870]
[26.54364204 -68.80688477]
[32.75080109 -55.15143967]
[38.95796204 -41.49599838]
[45.16512299 -27.84055328]
[51.37228394 -14.18510818]
[57.84307480 -0.65259701]
[72.01841736 3.77405334]
[79.03656769 17.27221298]
[74.29737091 32.11060333]
[81.02935791 45.51509094]
[87.76135254 58.91958237]
[94.49333954 72.32407379]
[101.22532654 85.72856140]
[112.80034637 93.57142639]
[112.17916870 107.53945160]
[118.91115570 120.94393921]
[134.17430115 121.93576813]
[146.80827332 130.37849426]
[153.47569275 143.92144775]
[152.47579956 158.88327026]
[144.17701721 171.25242615]
[150.90901184 184.65692139]
[160.09802246 196.51280212]
[171.39955139 206.37562561]
[182.70109558 216.23844910]
[194.00263977 226.10127258]
[205.30416870 235.96409607]
[219.55101013 230.37066650]
[234.76406860 232.05030823]
[247.44752502 240.61703491]
[254.68678284 254.10227966]
[254.81834412 269.40722656]
[247.81195068 283.01489258]
[235.27763367 291.79837036]
[220.09568787 293.73928833]
[205.75480652 288.39157104]
[195.55043030 276.98416138]
[191.82743835 262.13836670]
[195.44136047 247.26562500]
[184.13981628 237.40280151]
[172.83827209 227.53999329]
[161.53674316 217.67716980]
[150.23519897 207.81434631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 59]
[11 58]
[16 53]
[17 52]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[26 43]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[60 80]
[61 79]
[62 78]
[63 77]
[64 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
