%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGUUCCGGUGAGUCCGUGGGUGGGGUCCCCACCUGGUUGGAAGGCUGUGGGUCCGGGAACCCGAGCCCAAGGAGUGGGGGCGGCCCCGGAGCGAGGCUCACACUCCCUGCCCUGCAG\
) } def
/len { sequence length } bind def

/coor [
[142.88072205 495.77014160]
[154.47590637 485.59393311]
[152.14862061 470.77557373]
[149.82133484 455.95721436]
[147.49404907 441.13885498]
[133.18478394 436.93051147]
[122.07600403 426.88537598]
[116.40701294 412.95614624]
[117.35183716 397.88540649]
[124.77652740 384.66567993]
[137.25514221 375.94528198]
[134.92785645 361.12692261]
[132.60058594 346.30856323]
[130.27330017 331.49020386]
[127.94601440 316.67184448]
[125.61873627 301.85348511]
[123.29145050 287.03512573]
[120.77200317 272.24822998]
[118.06080627 257.49526978]
[115.34961700 242.74234009]
[103.76739502 236.93778992]
[97.58428955 225.33137512]
[99.27777100 212.09324646]
[108.44791412 202.12951660]
[106.12062836 187.31115723]
[103.79335022 172.49279785]
[101.46606445 157.67443848]
[99.13878632 142.85607910]
[96.81150055 128.03771973]
[94.48422241 113.21936035]
[85.84951019 102.22238922]
[90.69741821 89.10791779]
[88.37014008 74.28955841]
[83.89835358 66.18260193]
[86.17999268 59.05675888]
[84.23818970 44.18297577]
[82.29638672 29.30919456]
[80.35458374 14.43541241]
[70.89590454 1.75298321]
[76.92050934 -11.86881638]
[74.97870636 -26.74259758]
[60.89371490 -32.70584106]
[51.74508667 -44.83841705]
[49.90984344 -59.82168198]
[55.78146744 -73.61950684]
[67.69091034 -82.56549835]
[65.74910736 -97.43927765]
[63.80730438 -112.31306458]
[61.86550140 -127.18684387]
[57.60568619 -135.40716553]
[60.07154846 -142.47137451]
[58.51653290 -157.39054871]
[56.96151733 -172.30972290]
[55.40650177 -187.22891235]
[53.85148621 -202.14808655]
[41.42150497 -211.90878296]
[39.61700821 -227.60971069]
[49.50857544 -239.93580627]
[65.22770691 -241.57420349]
[77.44853210 -231.55287170]
[78.92063904 -215.81729126]
[68.77066803 -203.70310974]
[70.32568359 -188.78392029]
[71.88069916 -173.86474609]
[73.43571472 -158.94555664]
[74.99073029 -144.02638245]
[76.73928070 -129.12864685]
[78.68109131 -114.25486755]
[80.62289429 -99.38108063]
[82.56469727 -84.50730133]
[96.37166595 -78.91864014]
[105.58879089 -67.09068298]
[107.66168976 -52.13844681]
[101.93447113 -38.06379700]
[89.85249329 -28.68440247]
[91.79429626 -13.81061935]
[101.11408234 -2.19206214]
[95.22836304 12.49360943]
[97.17016602 27.36739159]
[99.11196899 42.24117279]
[101.05377197 57.11495590]
[103.18849945 71.96228027]
[105.51577759 86.78063965]
[114.15048981 97.77761078]
[109.30258179 110.89208221]
[111.62985992 125.71044159]
[113.95714569 140.52879333]
[116.28442383 155.34715271]
[118.61170959 170.16551208]
[120.93898773 184.98387146]
[123.26627350 199.80223083]
[137.56346130 209.78125000]
[140.22781372 226.67156982]
[130.10256958 240.03114319]
[132.81375122 254.78408813]
[135.52494812 269.53704834]
[140.20568848 277.52517700]
[138.10980225 284.70785522]
[140.43708801 299.52621460]
[142.76437378 314.34457397]
[145.09165955 329.16293335]
[147.41894531 343.98129272]
[149.74621582 358.79965210]
[152.07350159 373.61801147]
[166.62455750 378.09329224]
[177.74424744 388.40054321]
[183.26347351 402.45608521]
[182.13737488 417.45251465]
[174.64271545 430.41937256]
[162.31240845 438.81158447]
[164.63969421 453.62994385]
[166.96697998 468.44830322]
[169.29425049 483.26666260]
[183.45068359 489.39846802]
[192.02571106 502.22314453]
[192.28311157 517.64837646]
[184.14071655 530.75201416]
[170.19676208 537.35272217]
[154.90069580 535.34423828]
[143.13343811 525.36749268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 113]
[3 112]
[4 111]
[5 110]
[11 104]
[12 103]
[13 102]
[14 101]
[15 100]
[16 99]
[17 98]
[18 96]
[19 95]
[20 94]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[29 86]
[30 85]
[32 83]
[33 82]
[35 81]
[36 80]
[37 79]
[38 78]
[40 76]
[41 75]
[46 70]
[47 69]
[48 68]
[49 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
