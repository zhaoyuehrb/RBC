%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCAGACGAGGCAGGCGGAAGAGGCGGGACUUCGCGGGUGACGUCAUCGGGGCGCCGGAGGCCCGGGGCGCCUGGGAAUUUGAAGCAAACAGGCAGCGCGCGACA\
) } def
/len { sequence length } bind def

/coor [
[92.33953857 119.95292664]
[85.54930878 133.32800293]
[78.75907898 146.70309448]
[71.96884918 160.07817078]
[78.26609802 174.39175415]
[73.83986664 189.38983154]
[60.78009415 197.99078369]
[45.25320053 196.13349915]
[34.59050751 184.69491577]
[33.82661819 169.07600403]
[43.32221222 156.65151978]
[58.59376526 153.28793335]
[65.38399506 139.91285706]
[72.17422485 126.53778076]
[78.96445465 113.16269684]
[66.59310913 121.64502716]
[52.08256531 125.44555664]
[37.63706207 121.40483093]
[27.20437241 110.62712860]
[23.63560677 96.05784607]
[27.90606689 81.67858124]
[38.84869003 71.41900635]
[53.47300339 68.08291626]
[67.78237152 72.58202362]
[77.86495972 83.68429565]
[89.98195648 92.52614594]
[83.58730316 78.95749664]
[77.19264221 65.38883972]
[70.79798126 51.82018661]
[64.20538330 45.26539230]
[64.42132568 37.75804138]
[58.42774963 24.00750923]
[52.43417358 10.25697994]
[46.44060135 -3.49354935]
[40.04327011 -10.23905373]
[40.47950363 -17.73683167]
[34.89217758 -31.65738487]
[29.30485344 -45.57793808]
[23.51378059 -59.41497040]
[17.52020645 -73.16550446]
[3.08466673 -79.01810455]
[-2.79778862 -93.04847717]
[2.87073541 -106.77449036]
[-3.12283897 -120.52501678]
[-16.62842941 -129.82722473]
[-15.05572987 -146.15078735]
[-0.02259858 -152.70343018]
[13.00616741 -142.74433899]
[10.62769032 -126.51859283]
[16.62126541 -112.76806641]
[30.53509521 -107.57759857]
[36.80931473 -93.71798706]
[31.27073479 -79.15907288]
[37.26430893 -65.40854645]
[42.91100311 -60.45659256]
[43.22540665 -51.16526413]
[48.81273270 -37.24470901]
[54.40005493 -23.32415581]
[60.19112778 -9.48712349]
[66.18470764 4.26340580]
[72.17827606 18.01393509]
[78.17185211 31.76446533]
[84.36663818 45.42552948]
[90.76129150 58.99418259]
[97.15595245 72.56283569]
[103.55061340 86.13148499]
[115.39483643 95.33553314]
[130.41212463 90.35643005]
[141.44065857 100.36746979]
[156.16831970 103.21279144]
[170.93617249 105.84160614]
[185.74101257 108.25334930]
[200.54586792 110.66508484]
[215.35070801 113.07682800]
[230.15556335 115.48857117]
[237.81729126 102.38657379]
[249.69706726 92.94012451]
[264.18823242 88.42678070]
[279.33099365 89.45692444]
[293.07742310 95.89125061]
[303.56838989 106.85955811]
[309.38513184 120.87847900]
[309.74093628 136.05206299]
[304.58767700 150.32821655]
[294.62234497 161.77621460]
[281.19262695 168.84777832]
[266.11480713 170.58657837]
[251.42800903 166.75741577]
[239.11851501 157.87818909]
[230.85108948 145.14970398]
[227.74382019 130.29342651]
[212.93896484 127.88167572]
[198.13412476 125.46993256]
[183.32926941 123.05819702]
[168.52442932 120.64645386]
[161.30299377 122.70989227]
[153.32299805 117.94045258]
[138.59533691 115.09513855]
[124.63146210 120.27774811]
[112.54951477 110.06319427]
[126.47474670 115.63884735]
[134.07322693 128.57186890]
[132.16510010 143.45001221]
[121.54889679 154.04701233]
[106.66732788 155.92819214]
[93.74807739 148.30630493]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[26 66]
[27 65]
[28 64]
[29 63]
[31 62]
[32 61]
[33 60]
[34 59]
[36 58]
[37 57]
[38 56]
[39 54]
[40 53]
[43 50]
[44 49]
[67 100]
[69 98]
[70 97]
[71 95]
[72 94]
[73 93]
[74 92]
[75 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
