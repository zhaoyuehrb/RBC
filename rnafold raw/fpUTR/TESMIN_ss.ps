%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUUCCCCCUUCUCCAACCGCCAACGGCCGCCUGCGCCUGAGGCCCGGCCCACGCCCCAUCCCGCUCGCUCCACGCUGCGGCAGCCCCGGCGGCCCCAGGUGCGCGGCCCCCGCCAUCCCGCCCCGCCGCCCUGCGCC\
) } def
/len { sequence length } bind def

/coor [
[93.66920471 522.15362549]
[83.26856232 518.94195557]
[73.37462616 514.39923096]
[64.15695953 508.60272217]
[55.77359009 501.65130615]
[48.36832047 493.66357422]
[42.06824875 484.77597046]
[36.98159409 475.14035034]
[33.19584274 464.92147827]
[30.77623177 454.29409790]
[29.76462364 443.44003296]
[30.17879868 432.54501343]
[32.01212692 421.79556274]
[35.23368073 411.37579346]
[39.78875351 401.46420288]
[45.59979248 392.23062134]
[52.56771469 383.83337402]
[60.57360077 376.41650391]
[69.48071289 370.10729980]
[79.13685608 365.01416016]
[89.37695312 361.22463989]
[100.02586365 358.80404663]
[99.02397156 343.83755493]
[87.07656097 337.78005981]
[79.63991547 326.50845337]
[78.75748444 312.92477417]
[84.76837921 300.59066772]
[96.19008636 292.79351807]
[95.52188873 277.80841064]
[94.85368347 262.82330322]
[94.18547821 247.83819580]
[93.51728058 232.85308838]
[92.84907532 217.86798096]
[89.93148041 213.99418640]
[89.47119904 208.22740173]
[92.50000000 202.20350647]
[92.50000000 187.20350647]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[89.47119904 36.77260590]
[89.93148041 31.00581932]
[92.84907532 27.13202095]
[93.51728058 12.14691162]
[94.18547821 -2.83819795]
[82.22087860 -12.54152107]
[78.30979156 -27.25738907]
[83.74954224 -41.28853607]
[96.25859070 -49.32978821]
[96.92679596 -64.31489563]
[88.43224335 -69.36770630]
[82.43422699 -77.14997864]
[79.74359894 -86.53926849]
[80.69808197 -96.20118713]
[85.12048340 -104.77894592]
[92.34967804 -111.08395386]
[101.33911896 -114.26043701]
[103.33842468 -129.12660217]
[105.33773041 -143.99276733]
[107.33703613 -158.85891724]
[100.12814331 -169.61801147]
[102.15130615 -182.00285339]
[111.77321625 -189.41709900]
[114.10322571 -204.23503113]
[105.85923004 -217.99787903]
[111.61414337 -232.97320557]
[126.95329285 -237.67323303]
[140.10978699 -228.49247742]
[140.99110413 -212.47364807]
[128.92115784 -201.90501404]
[126.59114075 -187.08708191]
[133.79220581 -171.12142944]
[122.20320129 -156.85961914]
[120.20389557 -141.99345398]
[118.20458984 -127.12729645]
[116.20528412 -112.26113129]
[129.97300720 -97.24771118]
[128.33418274 -76.65313721]
[111.91190338 -63.64669418]
[111.24369812 -48.66158295]
[122.98738861 -39.53887558]
[127.15670776 -25.07925034]
[121.95135498 -10.76989555]
[109.17059326 -2.16999507]
[108.50238800 12.81511402]
[107.83418274 27.80022430]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[107.50000000 187.20350647]
[107.50000000 202.20350647]
[107.83418274 217.19978333]
[108.50238800 232.18489075]
[109.17059326 247.16999817]
[109.83879089 262.15509033]
[110.50699615 277.14022827]
[111.17520142 292.12533569]
[125.39044952 301.22027588]
[131.35263062 316.83047485]
[126.90875244 332.76687622]
[113.99047089 342.83566284]
[114.99236298 357.80215454]
[134.83442688 360.70104980]
[153.40544128 368.24639893]
[169.63465881 379.99932861]
[182.58723450 395.27856445]
[191.51809692 413.19973755]
[195.91484070 432.72668457]
[195.52705383 452.73138428]
[190.38064575 472.05905151]
[180.77612305 489.59475708]
[167.27104187 504.32791138]
[150.64761353 515.41033936]
[156.19433594 529.34710693]
[161.74104309 543.28393555]
[176.35397339 549.30371094]
[182.35302734 563.92517090]
[176.17907715 578.47363281]
[161.49501038 584.31774902]
[147.01263428 577.99035645]
[141.32408142 563.24530029]
[147.80426025 548.83062744]
[142.25755310 534.89385986]
[136.71083069 520.95709229]
[126.10496521 523.37573242]
[115.27235413 524.38916016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 116]
[23 115]
[28 111]
[29 110]
[30 109]
[31 108]
[32 107]
[33 106]
[36 105]
[37 104]
[38 103]
[39 102]
[40 101]
[41 100]
[42 99]
[44 97]
[45 96]
[46 95]
[47 94]
[50 93]
[51 92]
[52 91]
[56 87]
[57 86]
[64 83]
[65 82]
[66 81]
[67 80]
[70 78]
[71 77]
[127 138]
[128 137]
[129 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
