%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUCCGGCUGGCCCCGCUCAGUCACCCGCAGCAGGCGUGCAGUUUCCCGGCUCUCCGCGCGGCCGGGGAAGGUCAGCGCCGUA\
) } def
/len { sequence length } bind def

/coor [
[139.41732788 126.36705017]
[130.24258423 136.52851868]
[118.54738617 143.64562988]
[105.30640411 147.12524414]
[91.62318420 146.67735291]
[78.63809967 142.33929443]
[67.43334961 134.47259521]
[58.94276810 123.73290253]
[44.93252945 129.09136963]
[30.92228508 134.44982910]
[16.91204453 139.80828857]
[2.90180278 145.16674805]
[-11.00823498 150.78021240]
[-24.81342697 156.64677429]
[-37.02616119 168.40626526]
[-51.70690155 159.92616272]
[-47.62223434 143.47161865]
[-30.67999840 142.84158325]
[-16.87480545 136.97502136]
[-11.83240795 131.32841492]
[-2.45666051 131.15650940]
[11.55358124 125.79804993]
[25.56382179 120.43958282]
[39.57406616 115.08112335]
[53.58430481 109.72265625]
[53.02373886 93.50556946]
[57.96318436 78.04885864]
[67.82432556 65.16219330]
[81.45261383 56.35436630]
[97.25244904 52.65659714]
[113.37396240 54.50182724]
[127.92964935 61.67401123]
[139.21531677 73.33342743]
[152.79702759 66.96657562]
[159.42825317 60.33625412]
[166.99305725 60.62537766]
[180.79824829 54.75880432]
[194.60343933 48.89223480]
[208.40863037 43.02566528]
[222.21382141 37.15909195]
[224.00308228 20.83522224]
[233.66921997 7.67513990]
[248.53999329 1.15963876]
[264.58236694 2.95401239]
[277.49633789 12.48353100]
[291.07806396 6.11668062]
[304.65979004 -0.25016966]
[318.24151611 -6.61702013]
[331.82324219 -12.98387051]
[345.40493774 -19.35072136]
[358.98666382 -25.71757126]
[372.56838989 -32.08442307]
[386.15011597 -38.45127106]
[399.73184204 -44.81812286]
[402.52935791 -60.08093643]
[413.78707886 -70.76007080]
[429.17611694 -72.74917603]
[442.77914429 -65.28340149]
[449.36544800 -51.23348999]
[446.40252686 -36.00192261]
[435.02963257 -25.44554520]
[419.61990356 -23.62349892]
[406.09869385 -31.23639870]
[392.51696777 -24.86954880]
[378.93524170 -18.50269890]
[365.35351562 -12.13584805]
[351.77178955 -5.76899767]
[338.19006348 0.59785295]
[324.60836792 6.96470356]
[311.02664185 13.33155346]
[297.44491577 19.69840431]
[283.86318970 26.06525421]
[283.57424927 39.84491348]
[277.30096436 52.19196701]
[266.23602295 60.63123322]
[252.53901672 63.44283295]
[238.91502380 60.01241684]
[228.08039856 50.96428680]
[214.27520752 56.83085632]
[200.47001648 62.69742584]
[186.66482544 68.56399536]
[172.85963440 74.43057251]
[159.16387939 80.54830170]
[145.58216858 86.91515350]
[147.42060852 100.48169708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 19]
[14 18]
[33 84]
[34 83]
[36 82]
[37 81]
[38 80]
[39 79]
[40 78]
[45 72]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
