%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGGAGGCCCGUCCGAUUGCUGCUCCGCGCUCCGAGCGGCUGUCGGCGUGCGCUAUCGCCCCGCCCUGGUUAGUGUCUAGCCGGCCGGCGAGGCCUGCGCAGUUGCAGCGGCCGGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[103.67321777 288.78628540]
[115.09724426 278.28527832]
[113.24669647 263.39987183]
[111.39615631 248.51446533]
[109.54560852 233.62904358]
[107.69506836 218.74363708]
[105.84452057 203.85823059]
[103.99397278 188.97280884]
[90.88848114 181.94543457]
[84.35671234 168.38815308]
[87.09241486 153.40919495]
[98.25262451 142.79054260]
[96.40208435 127.90512848]
[94.55153656 113.01971436]
[90.46677399 109.33241272]
[88.30580139 104.60377502]
[73.49928284 102.20230103]
[64.41684723 103.92692566]
[58.35810471 99.55394745]
[43.61552048 96.78697968]
[28.87293243 94.02001190]
[14.13034439 91.25304413]
[-0.61224252 88.48606873]
[-15.60285091 93.54495239]
[-26.68445396 83.59269714]
[-41.42704010 80.82572937]
[-56.16962814 78.05875397]
[-70.91221619 75.29178619]
[-85.65480042 72.52481842]
[-100.39739227 69.75785065]
[-115.13997650 66.99088287]
[-126.32695770 77.74407196]
[-141.70254517 79.83468628]
[-155.35453796 72.45884705]
[-162.03343201 58.45270920]
[-159.17108154 43.20191956]
[-147.86811829 32.57072067]
[-132.47073364 30.64702034]
[-118.89957428 38.17052460]
[-112.37300873 52.24829102]
[-97.63041687 55.01526260]
[-82.88783264 57.78223038]
[-68.14524841 60.54920197]
[-53.40265656 63.31616974]
[-38.66007233 66.08313751]
[-23.91748428 68.85011292]
[-9.98136425 63.59331894]
[2.15472698 73.74348450]
[16.89731407 76.51045227]
[31.63990211 79.27742767]
[46.38248825 82.04439545]
[61.12507629 84.81136322]
[75.90075684 87.39578247]
[90.70727539 89.79725647]
[105.15538025 85.76583862]
[116.57952118 76.04529572]
[128.00366211 66.32475281]
[139.42781067 56.60421371]
[150.85194397 46.88367081]
[149.48005676 34.94569016]
[154.04226685 23.95929718]
[163.27801514 16.65439034]
[174.78184509 14.78405666]
[185.62927246 18.70498085]
[197.52015686 9.56129837]
[209.41104126 0.41761568]
[215.63429260 -14.12823200]
[230.44001770 -15.75295258]
[242.33090210 -24.89663506]
[254.22177124 -34.04031754]
[266.11267090 -43.18399811]
[277.77374268 -52.61899948]
[289.19787598 -62.33954239]
[300.62203979 -72.06008148]
[312.04617310 -81.78062439]
[323.47030640 -91.50116730]
[334.89447021 -101.22171021]
[346.31860352 -110.94225311]
[357.74273682 -120.66279602]
[365.88772583 -135.53207397]
[382.43066406 -131.82162476]
[383.44476318 -114.89803314]
[367.46328735 -109.23865509]
[356.03915405 -99.51811218]
[344.61499023 -89.79756927]
[333.19085693 -80.07702637]
[321.76672363 -70.35648346]
[310.34255981 -60.63594055]
[298.91842651 -50.91539764]
[287.49429321 -41.19485474]
[286.22512817 -36.48870087]
[281.92102051 -32.57224274]
[275.25634766 -31.29311752]
[263.36544800 -22.14943504]
[251.47457886 -13.00575256]
[239.58369446 -3.86207056]
[234.21095276 10.02975941]
[218.55471802 12.30849743]
[206.66383362 21.45218086]
[194.77294922 30.59586143]
[193.57708740 48.78407669]
[179.29200745 60.60832977]
[160.57249451 58.30781555]
[149.14834595 68.02835846]
[137.72421265 77.74890137]
[126.30006409 87.46944427]
[114.87592316 97.18998718]
[109.43695068 111.16916656]
[111.28749084 126.05458069]
[113.13803864 140.93998718]
[126.55855560 148.50279236]
[132.87864685 162.35594177]
[129.86526489 177.09986877]
[118.87938690 187.12226868]
[120.72993469 202.00767517]
[122.58047485 216.89309692]
[124.43102264 231.77850342]
[126.28156281 246.66390991]
[128.13211060 261.54931641]
[129.98265076 276.43475342]
[143.63014221 283.81887817]
[150.30053711 297.82907104]
[147.42890930 313.07812500]
[136.11947632 323.70245361]
[120.72093964 325.61679077]
[107.15435028 318.08502197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 120]
[3 119]
[4 118]
[5 117]
[6 116]
[7 115]
[8 114]
[12 110]
[13 109]
[14 108]
[16 54]
[17 53]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[55 107]
[56 106]
[57 105]
[58 104]
[59 103]
[64 100]
[65 99]
[66 98]
[68 96]
[69 95]
[70 94]
[71 93]
[72 90]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
