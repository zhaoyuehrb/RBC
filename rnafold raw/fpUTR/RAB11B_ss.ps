%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCAACCGCCGCUCUGCGCGGCGCCGGCUCCGCCCCCGUCGGGUGUUUGUGGUGGGGCUGCGGAGUCGCCGAUCCCGCCGGAAGCGCCAGGACA\
) } def
/len { sequence length } bind def

/coor [
[138.57377625 124.01070404]
[131.64125061 132.60800171]
[122.83926392 139.27873230]
[112.68786621 143.62875366]
[101.78684235 145.40107727]
[90.78024292 144.49096680]
[80.31836700 140.95220947]
[71.01934052 134.99388123]
[63.43257904 126.96802521]
[50.05646896 133.75622559]
[36.68036270 140.54443359]
[23.30425262 147.33264160]
[9.92814541 154.12084961]
[-3.44796300 160.90904236]
[-9.77696514 175.65093994]
[-25.28619194 179.75502014]
[-38.07829285 170.07298279]
[-38.34025955 154.03207397]
[-25.87113762 143.93748474]
[-10.23616886 147.53294373]
[3.13993955 140.74473572]
[16.51604843 133.95652771]
[29.89215469 127.16832733]
[43.26826477 120.38011932]
[56.64437103 113.59191132]
[54.74958801 104.10495758]
[54.90624237 94.43190002]
[57.10724258 85.01127625]
[43.95796204 77.79348755]
[30.80868340 70.57569885]
[14.01439285 68.25446320]
[11.59579086 51.47391891]
[27.05101013 44.50452042]
[38.02647400 57.42641830]
[51.17575073 64.64421082]
[64.32502747 71.86199951]
[81.84713745 58.34757614]
[103.67490387 54.71263123]
[124.63101959 61.81932831]
[139.74493408 77.98204803]
[153.88591003 72.97875977]
[168.02688599 67.97547150]
[179.54205322 53.72043991]
[196.62443542 57.36471558]
[210.59597778 51.90613937]
[224.56752014 46.44756699]
[238.53906250 40.98899460]
[252.51060486 35.53041840]
[266.48214722 30.07184410]
[280.45367432 24.61326981]
[290.49203491 12.38451958]
[305.16229248 14.95980263]
[319.13385010 9.50122833]
[333.10537720 4.04265451]
[347.07693481 -1.41591930]
[361.04846191 -6.87449360]
[375.02001953 -12.33306789]
[388.99154663 -17.79164124]
[402.96310425 -23.25021553]
[416.84442139 -28.93431664]
[426.48150635 -41.48171616]
[441.22747803 -39.38283157]
[455.01492310 -45.29096985]
[468.80239868 -51.19910431]
[478.18823242 -64.64671326]
[494.50170898 -62.97275543]
[500.96093750 -47.89925766]
[490.92120361 -34.93253708]
[474.71051025 -37.41165161]
[460.92306519 -31.50351334]
[447.13562012 -25.59537697]
[438.48471069 -13.47056866]
[422.75256348 -15.14686108]
[417.74945068 -9.51165104]
[408.42166138 -9.27867413]
[394.45013428 -3.82010007]
[380.47857666 1.63847399]
[366.50704956 7.09704781]
[352.53549194 12.55562210]
[338.56396484 18.01419640]
[324.59240723 23.47277069]
[310.62088013 28.93134499]
[301.58187866 40.76966095]
[285.91226196 38.58481216]
[271.94070435 44.04338455]
[257.96917725 49.50196075]
[243.99763489 54.96053314]
[230.02609253 60.41910934]
[216.05455017 65.87768555]
[202.08300781 71.33625793]
[196.86155701 82.38015747]
[185.11053467 86.98049927]
[173.03016663 82.11644745]
[158.88920593 87.11972809]
[144.74822998 92.12301636]
[145.32676697 103.15201569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[28 36]
[29 35]
[30 34]
[40 95]
[41 94]
[42 93]
[44 90]
[45 89]
[46 88]
[47 87]
[48 86]
[49 85]
[50 84]
[52 82]
[53 81]
[54 80]
[55 79]
[56 78]
[57 77]
[58 76]
[59 75]
[60 73]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
