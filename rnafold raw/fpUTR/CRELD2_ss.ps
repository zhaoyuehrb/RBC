%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGGCCUCGCCGGCGCCGUCAAGUAGCCUGGGGGACAGGCCGGCGCGGCUGGGAGCGGGUGGGCGGCCGGGAGGCCGGAGCAGCACGGCCGCAGGACCUGGAGCUCCGGCUGCGUCUUCCCGCAGCGCUACCCGCC\
) } def
/len { sequence length } bind def

/coor [
[3.66862988 325.77664185]
[-5.07956743 324.56762695]
[-13.29115105 337.12030029]
[-21.50273514 349.67297363]
[-29.71431923 362.22567749]
[-37.92590332 374.77835083]
[-39.00572968 390.56268311]
[-52.44805908 396.97772217]
[-60.65964127 409.53042603]
[-68.87122345 422.08309937]
[-67.00880432 438.01770020]
[-78.40761566 449.30691528]
[-94.32346344 447.29064941]
[-102.54707336 433.51562500]
[-96.76999664 418.54882812]
[-81.42391205 413.87152100]
[-73.21232605 401.31884766]
[-65.00074005 388.76614380]
[-64.50826263 373.87969971]
[-50.47858810 366.56677246]
[-42.26700211 354.01409912]
[-34.05541992 341.46139526]
[-25.84383583 328.90872192]
[-17.63225174 316.35604858]
[-24.03850937 296.16638184]
[-13.48064423 277.48291016]
[7.66144609 272.42471313]
[14.42659760 259.03692627]
[21.19174957 245.64913940]
[27.95690155 232.26135254]
[34.72205353 218.87356567]
[41.33764267 205.41125488]
[47.80284882 191.87606812]
[54.26805496 178.34089661]
[52.77196884 163.52162170]
[65.70175171 154.40397644]
[72.16695404 140.86880493]
[78.63216400 127.33361816]
[85.09737396 113.79843903]
[81.21765137 107.72713470]
[79.70176697 100.68333435]
[80.74050140 93.55353546]
[84.20312500 87.23504639]
[89.65385437 82.52308655]
[96.40668488 80.01066589]
[103.61175537 80.01399231]
[111.54164124 67.28147888]
[119.47152710 54.54896545]
[127.40141296 41.81644821]
[135.33129883 29.08393478]
[143.26118469 16.35142136]
[151.19107056 3.61890626]
[159.12095642 -9.11360836]
[167.05084229 -21.84612274]
[174.98072815 -34.57863617]
[182.91059875 -47.31114960]
[184.81642151 -56.32914734]
[191.16166687 -60.23623276]
[199.37326050 -72.78891754]
[207.58483887 -85.34160614]
[215.37239075 -98.16166687]
[222.72720337 -111.23479462]
[230.08203125 -124.30792236]
[237.43684387 -137.38104248]
[232.40301514 -154.09413147]
[240.81324768 -169.00367737]
[257.06851196 -173.17245483]
[264.13024902 -186.40620422]
[271.19198608 -199.63993835]
[278.25372314 -212.87367249]
[285.31546021 -226.10742188]
[292.37719727 -239.34115601]
[299.43893433 -252.57489014]
[299.10958862 -268.39266968]
[311.92761230 -275.97872925]
[307.55715942 -290.92987061]
[314.90728760 -304.25015259]
[329.18786621 -308.32455444]
[336.24960327 -321.55831909]
[335.16116333 -337.92129517]
[348.93637085 -346.81933594]
[363.40451050 -339.09890747]
[363.68197632 -322.70211792]
[349.48336792 -314.49658203]
[342.42160034 -301.26281738]
[346.98742676 -287.13168335]
[340.01434326 -273.61019897]
[325.16134644 -268.91696167]
[325.99578857 -254.04576111]
[312.67269897 -245.51315308]
[305.61093140 -232.27941895]
[298.54919434 -219.04568481]
[291.48745728 -205.81193542]
[284.42572021 -192.57820129]
[277.36398315 -179.34446716]
[270.30224609 -166.11071777]
[275.74877930 -154.38156128]
[273.38528442 -141.46893311]
[263.85836792 -132.15660095]
[250.50997925 -130.02622986]
[243.15515137 -116.95310211]
[235.80033875 -103.87997437]
[228.44551086 -90.80684662]
[229.08668518 -87.26187897]
[227.99079895 -83.22757721]
[224.94619751 -79.54817200]
[220.13752747 -77.13002014]
[211.92593384 -64.57733154]
[203.71435547 -52.02465057]
[195.64312744 -39.38126755]
[187.71324158 -26.64875221]
[179.78335571 -13.91623783]
[171.85346985 -1.18372309]
[163.92358398 11.54879093]
[155.99369812 24.28130531]
[148.06381226 37.01382065]
[140.13392639 49.74633408]
[132.20404053 62.47884750]
[124.27415466 75.21136475]
[116.34426880 87.94387817]
[117.81061554 109.76049042]
[98.63255310 120.26364899]
[92.16734314 133.79882812]
[85.70214081 147.33399963]
[79.23693085 160.86918640]
[80.27058411 176.65658569]
[67.80323792 184.80610657]
[61.33803177 198.34127808]
[54.87282181 211.87646484]
[53.98138046 221.05043030]
[48.10983658 225.63871765]
[41.34468460 239.02650452]
[34.57953262 252.41429138]
[27.81438065 265.80206299]
[21.04922867 279.18984985]
[26.53194427 286.49966431]
[29.28512955 295.16659546]
[29.02844429 304.21298218]
[25.81940079 312.62814331]
[20.04372597 319.48150635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[8 18]
[9 17]
[10 16]
[27 135]
[28 134]
[29 133]
[30 132]
[31 131]
[32 129]
[33 128]
[34 127]
[36 125]
[37 124]
[38 123]
[39 122]
[46 120]
[47 119]
[48 118]
[49 117]
[50 116]
[51 115]
[52 114]
[53 113]
[54 112]
[55 111]
[56 110]
[58 109]
[59 108]
[60 107]
[61 103]
[62 102]
[63 101]
[64 100]
[67 96]
[68 95]
[69 94]
[70 93]
[71 92]
[72 91]
[73 90]
[75 88]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
