%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUAAAAAGCAAUUUGGGACUUCCUCUUUGAACAGUUGCCUUUUCCUCUCACAGAAGGAAGAUUUCAUUUUGUUUGAGACGAGAAACCAAACCACACACCAAAGAGAGGGGU\
) } def
/len { sequence length } bind def

/coor [
[-9.09158802 390.37628174]
[-6.22201395 405.20672607]
[-7.64827156 420.24478149]
[-13.25473976 434.27133179]
[-22.58692932 446.14932251]
[-34.88832092 454.91589355]
[-49.16169357 459.86032104]
[-64.24996948 460.58181763]
[-78.93001556 457.02191162]
[-92.01177216 449.46914673]
[-102.43477631 438.53582764]
[-109.35407257 425.10824585]
[-112.20874786 410.27490234]
[-110.76738739 395.23831177]
[-105.14682770 381.21740723]
[-95.80271149 369.34878540]
[-83.49251556 360.59457397]
[-69.21418762 355.66448975]
[-54.12519073 354.95812988]
[-39.44873428 358.53280640]
[-31.94873238 345.54241943]
[-24.44873238 332.55203247]
[-16.94873238 319.56167603]
[-9.44873333 306.57128906]
[-2.12843251 293.47879028]
[5.01077843 280.28668213]
[12.14998913 267.09457397]
[19.28919983 253.90248108]
[26.42841148 240.71037292]
[33.56762314 227.51826477]
[40.70683289 214.32615662]
[29.32492447 200.11924744]
[25.15105820 182.34913635]
[29.03897095 164.46334839]
[40.27407074 149.95082092]
[56.70432663 141.66128540]
[75.15238190 141.24575806]
[80.79702759 127.34835052]
[86.44166565 113.45094299]
[80.90151215 100.06240845]
[86.35404968 86.63795471]
[99.66091919 80.90441895]
[105.30556488 67.00700378]
[110.95020294 53.10959625]
[116.59484100 39.21218491]
[122.23948669 25.31477356]
[120.26405334 9.61737633]
[132.22201538 0.73725331]
[137.86665344 -13.16015816]
[143.51129150 -27.05756950]
[149.15592957 -40.95497894]
[154.41549683 -55.00264740]
[159.28599548 -69.18990326]
[164.15647888 -83.37716675]
[169.02697754 -97.56442261]
[173.89746094 -111.75168610]
[178.76795959 -125.93894196]
[175.93078613 -141.50367737]
[187.38140869 -151.02905273]
[192.25189209 -165.21630859]
[197.12239075 -179.40357971]
[196.54661560 -196.34774780]
[212.66920471 -201.59162903]
[222.17134094 -187.55076599]
[211.30964661 -174.53308105]
[206.43914795 -160.34582520]
[201.56866455 -146.15856934]
[204.75419617 -131.60859680]
[192.95521545 -121.06845093]
[188.08471680 -106.88118744]
[183.21423340 -92.69393158]
[178.34373474 -78.50667572]
[173.47325134 -64.31941223]
[168.60275269 -50.13215637]
[169.92617798 -45.41141891]
[168.19761658 -39.81354523]
[163.05334473 -35.31034088]
[157.40870667 -21.41292763]
[151.76406860 -7.51551723]
[146.11941528 6.38189411]
[148.49859619 21.08525467]
[136.13690186 30.95941353]
[130.49224854 44.85682297]
[124.84761810 58.75423431]
[119.20297241 72.65164948]
[113.55833435 86.54905701]
[119.09848785 99.93759155]
[113.64595032 113.36204529]
[100.33908081 119.09558105]
[94.69443512 132.99299622]
[89.04979706 146.89041138]
[98.14241791 154.79814148]
[104.59496307 164.95211792]
[107.88200378 176.50485229]
[107.74180603 188.49581909]
[104.19707489 199.93130493]
[97.55220795 209.86686707]
[88.36715698 217.48519897]
[77.41026306 222.16345215]
[65.59398651 223.52407837]
[53.89893723 221.46536255]
[46.75972748 234.65747070]
[39.62051773 247.84957886]
[32.48130798 261.04168701]
[25.34209633 274.23379517]
[18.20288467 287.42590332]
[11.06367397 300.61801147]
[9.69621181 309.79306030]
[3.54164815 314.07128906]
[-3.95835185 327.06167603]
[-11.45835209 340.05203247]
[-18.95835114 353.04241943]
[-26.45835114 366.03280640]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 113]
[21 112]
[22 111]
[23 110]
[24 109]
[25 107]
[26 106]
[27 105]
[28 104]
[29 103]
[30 102]
[31 101]
[37 91]
[38 90]
[39 89]
[42 86]
[43 85]
[44 84]
[45 83]
[46 82]
[48 80]
[49 79]
[50 78]
[51 77]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[57 69]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
