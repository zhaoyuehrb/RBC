%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCCUUUUUGGUGUAAAUCUGGACUCUAAUUCUGUAAUAUAUCAAGGAAUCUCGUAAAACCGACACUAAAACGUCCCUGCCUACAAAUCAUCCGGCCAAAUU\
) } def
/len { sequence length } bind def

/coor [
[138.31475830 151.64447021]
[128.03334045 140.72236633]
[113.18413544 140.53059387]
[102.60173798 129.60047913]
[102.90355682 114.02657318]
[89.57015228 109.81802368]
[86.17433167 96.25483704]
[75.89292145 85.33272552]
[65.61150360 74.41060638]
[55.33009720 63.48849487]
[45.04868317 52.56637955]
[34.76727295 41.64426804]
[24.48586082 30.72215271]
[14.20445061 19.80003738]
[3.92303896 8.87792397]
[-9.18704700 14.86583233]
[-23.48692131 16.48511696]
[-37.56176376 13.58903503]
[-50.02320099 6.47693157]
[-59.64624786 -4.13665247]
[-65.48974609 -17.19374084]
[-66.98836517 -31.39838409]
[-64.00731659 -45.34527206]
[-56.85430527 -57.65877533]
[-66.80114746 -68.88643646]
[-80.47938538 -66.53961182]
[-93.41364288 -71.26178741]
[-102.22196960 -81.70319366]
[-104.65861511 -95.03404236]
[-100.18579865 -107.71102905]
[-109.78899384 -119.23398590]
[-119.39218903 -130.75695801]
[-128.99537659 -142.27992249]
[-138.59857178 -153.80288696]
[-153.38964844 -150.03631592]
[-168.34848022 -153.06877136]
[-180.50500488 -162.29815674]
[-187.44552612 -175.89198303]
[-187.79200745 -191.15116882]
[-181.47563171 -205.04598999]
[-169.75054932 -214.81764221]
[-154.94476318 -218.52592468]
[-139.99797058 -215.43458557]
[-127.87789154 -206.15739441]
[-120.99095154 -192.53634644]
[-120.70457458 -177.27592468]
[-127.07560730 -163.40606689]
[-117.47241974 -151.88310242]
[-107.86922455 -140.36013794]
[-98.26602936 -128.83718872]
[-88.66284180 -117.31421661]
[-72.40690613 -118.95651245]
[-58.20236206 -110.55374146]
[-51.68446732 -95.21195221]
[-55.57348633 -78.83327484]
[-45.62664413 -67.60561371]
[-31.13319206 -73.55597687]
[-15.45295143 -74.21453857]
[-0.46070808 -69.48437500]
[12.04481125 -59.91393280]
[20.55674744 -46.63352203]
[24.04166794 -31.22183609]
[22.06500244 -15.51828957]
[14.84515381 -1.40348780]
[25.12656403 9.51862621]
[35.40797424 20.44074059]
[45.68938828 31.36285591]
[55.97079849 42.28496933]
[66.25221252 53.20708466]
[76.53362274 64.12919617]
[86.81503296 75.05131531]
[97.09644318 85.97342682]
[110.42984772 90.18197632]
[113.82566833 103.74516296]
[129.38938904 104.38422394]
[139.66061401 115.60726166]
[138.95545959 130.44094849]
[149.23686218 141.36306763]
[172.73786926 145.43620300]
[178.86447144 167.77583313]
[190.94624329 176.66577148]
[203.02801514 185.55569458]
[216.48788452 178.35884094]
[231.73776245 177.72329712]
[245.74977112 183.77525330]
[255.74183655 195.31307983]
[259.73001099 210.04594421]
[256.92242432 225.04862976]
[247.87655640 237.34231567]
[234.38844299 244.48611450]
[219.13618469 245.06159973]
[205.14810181 238.95451355]
[195.20156860 227.37742615]
[191.27143860 212.62896729]
[194.13807678 197.63746643]
[182.05630493 188.74752808]
[169.97454834 179.85760498]
[163.64421082 182.80000305]
[156.65129089 183.55049133]
[149.73864746 181.99540710]
[143.65155029 178.26786804]
[139.05735779 172.73699951]
[136.47239685 165.97163391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[5 74]
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[24 56]
[25 55]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[80 97]
[81 96]
[82 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
