%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUUGGAGGACGCGGCCGCCCGAAGCUGAUAAAUCAGGGGCCGGGUCGCGGCUGCGGGCCAAGUUGGACGCCCCGACCCGUGCGAGGGCCAGGUCCGCGCCUGCCCCGCCAGGCGAAGCGAGGCGACCCGCGUGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[112.87656403 125.11495972]
[108.30448151 139.40118408]
[103.73239136 153.68739319]
[112.23010254 166.81457520]
[110.25044250 182.32635498]
[98.72814941 192.89851379]
[83.10369873 193.53923035]
[70.75447083 183.94596863]
[67.51140594 168.64837646]
[74.90576935 154.86949158]
[89.44617462 149.11531067]
[94.01825714 134.82908630]
[98.59034729 120.54287720]
[88.96266174 109.04036713]
[74.09462738 111.02567291]
[59.22658920 113.01097870]
[44.35855103 114.99629211]
[29.49051285 116.98159790]
[14.62247372 118.96690369]
[-0.19800624 121.28063965]
[-14.96367455 123.92166901]
[-29.72934341 126.56269836]
[-44.49501419 129.20372009]
[-47.83702087 132.25242615]
[-51.60546494 133.86546326]
[-55.28013992 134.08956909]
[-58.41294479 133.14077759]
[-60.67837524 131.36466980]
[-75.61968231 132.69036865]
[-90.56098175 134.01606750]
[-105.50228119 135.34176636]
[-118.60590363 145.20214844]
[-133.58911133 138.53616333]
[-135.03846741 122.20118713]
[-121.46299744 113.00125122]
[-106.82798767 120.40046692]
[-91.88668060 119.07476807]
[-76.94538116 117.74906158]
[-62.00407791 116.42336273]
[-47.13603973 114.43805695]
[-32.37037277 111.79702759]
[-17.60470200 109.15599823]
[-2.83903408 106.51496887]
[0.61478609 103.11283112]
[6.26802969 101.89492035]
[12.63716602 104.09886932]
[27.50520325 102.11355591]
[42.37324142 100.12825012]
[57.24127960 98.14294434]
[72.10932159 96.15763855]
[86.97735596 94.17232513]
[101.36122131 89.91740417]
[114.91662598 83.49470520]
[128.47203064 77.07199860]
[142.02743530 70.64929962]
[155.58282471 64.22660065]
[169.13822937 57.80390167]
[182.69363403 51.38120270]
[191.85180664 38.48009872]
[206.66632080 40.02268219]
[220.22171021 33.59998322]
[223.27981567 20.43418503]
[233.23425293 11.58184433]
[246.27940369 10.12586021]
[257.59899902 16.37716103]
[271.29318237 10.25590801]
[284.98736572 4.13465357]
[298.68151855 -1.98660064]
[304.59252930 -18.41084099]
[320.22949219 -25.37783051]
[335.77008057 -19.04307747]
[349.32546997 -25.46577835]
[362.88085938 -31.88847733]
[368.27697754 -46.50079346]
[382.11557007 -52.82122421]
[396.01293945 -47.58681488]
[409.56832886 -54.00951385]
[416.04638672 -60.56380081]
[423.49539185 -60.42063904]
[437.18957520 -66.54189301]
[446.63088989 -79.23724365]
[461.40765381 -77.36730957]
[468.02911377 -83.77668762]
[475.47314453 -83.46877289]
[489.29937744 -89.28558350]
[503.12561035 -95.10239410]
[509.88723755 -101.36372375]
[517.32263184 -100.89121246]
[531.27416992 -106.40073395]
[545.22564697 -111.91025543]
[559.17718506 -117.41978455]
[566.07568359 -123.52999115]
[573.49877930 -122.89310455]
[587.56878662 -128.09265137]
[601.63879395 -133.29219055]
[615.70880127 -138.49172974]
[625.76617432 -151.44476318]
[641.97344971 -148.94358826]
[647.65802002 -133.56118774]
[636.97198486 -121.12166595]
[620.90832520 -124.42173004]
[606.83831787 -119.22219086]
[592.76837158 -114.02265167]
[578.69836426 -108.82311249]
[564.68670654 -103.46825409]
[550.73516846 -97.95872498]
[536.78369141 -92.44920349]
[522.83215332 -86.93968201]
[508.94241333 -81.27616882]
[495.11618042 -75.45935059]
[481.28994751 -69.64253998]
[467.52890015 -63.67314148]
[459.06707764 -51.41562653]
[443.31082153 -52.84772491]
[429.61663818 -46.72647095]
[415.99102783 -40.45411301]
[402.43563843 -34.03141022]
[397.68493652 -19.96135330]
[384.02932739 -13.25471973]
[369.30355835 -18.33307457]
[355.74816895 -11.91037560]
[342.19277954 -5.48767567]
[339.58078003 7.17684078]
[329.99157715 16.14025497]
[316.79330444 17.94593620]
[304.80276489 11.70756817]
[291.10861206 17.82882118]
[277.41442871 23.95007706]
[263.72027588 30.07133102]
[258.42681885 45.99672699]
[242.96556091 53.34537125]
[226.64440918 47.15538406]
[213.08901978 53.57808304]
[204.90042114 66.01979828]
[189.11633301 64.93660736]
[175.56092834 71.35930634]
[162.00552368 77.78200531]
[148.45013428 84.20470428]
[134.89472961 90.62740326]
[121.33932495 97.05010223]
[107.78392029 103.47280121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 43]
[21 42]
[22 41]
[23 40]
[28 39]
[29 38]
[30 37]
[31 36]
[52 141]
[53 140]
[54 139]
[55 138]
[56 137]
[57 136]
[58 135]
[60 133]
[61 132]
[65 129]
[66 128]
[67 127]
[68 126]
[71 122]
[72 121]
[73 120]
[76 117]
[77 116]
[79 115]
[80 114]
[82 112]
[84 111]
[85 110]
[86 109]
[88 108]
[89 107]
[90 106]
[91 105]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
