%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGGCCUCCUCCCGCUUUCUCUCUCCGCUUCCCCUGGAGCCUCCGAGGAGUCCGCAGCCGCUGGGCGCCCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[115.80873871 294.89767456]
[114.02346039 280.00430298]
[112.23818970 265.11090088]
[110.45291901 250.21752930]
[108.66764832 235.32414246]
[106.88237000 220.43077087]
[105.09709930 205.53738403]
[95.90001678 193.82145691]
[101.93984985 179.19850159]
[100.15457916 164.30511475]
[98.36930084 149.41174316]
[86.53636169 140.43861389]
[84.51367950 125.36003876]
[94.00574493 113.00939178]
[85.77787018 101.70481110]
[91.10086823 88.77587891]
[89.31559753 73.88249969]
[87.53032684 58.98911667]
[71.15023041 47.82312012]
[67.87752533 28.56921005]
[79.29958344 13.09117603]
[75.75441742 -1.48386407]
[72.20925140 -16.05890465]
[67.00962830 -23.90643883]
[68.82514954 -31.28380394]
[65.86223602 -45.98826599]
[62.89933014 -60.69272614]
[47.59983063 -75.42185974]
[53.95333481 -94.88908386]
[49.26138306 -109.13638306]
[44.56943512 -123.38368225]
[39.87748718 -137.63098145]
[35.18553543 -151.87828064]
[22.60125923 -162.39341736]
[25.68167496 -178.50065613]
[41.25791550 -183.63024902]
[53.30648041 -172.50532532]
[49.43283844 -156.57023621]
[54.12478638 -142.32293701]
[58.81673813 -128.07563782]
[63.50868607 -113.82833099]
[68.20063782 -99.58103180]
[77.11523438 -96.75272369]
[83.70916748 -89.92384338]
[86.29931641 -80.64546204]
[84.13381195 -71.11494446]
[77.60379028 -63.65563583]
[80.56669617 -48.95117569]
[83.52960968 -34.24671555]
[86.78429413 -19.60407066]
[90.32946014 -5.02903080]
[93.87462616 9.54600906]
[104.19405365 12.48730469]
[112.32678986 19.61279869]
[116.66461945 29.60695648]
[116.30995941 40.57844925]
[111.26061249 50.41798401]
[102.42370605 57.20384216]
[104.20897675 72.09722137]
[105.99425507 86.99060822]
[114.22212982 98.29518890]
[108.89913177 111.22412109]
[121.04129028 120.98146057]
[122.63964844 136.11090088]
[113.26268768 147.62646484]
[115.04795837 162.51985168]
[116.83322906 177.41322327]
[126.15800476 190.19442749]
[119.99047852 203.75212097]
[121.77574921 218.64549255]
[123.56102753 233.53887939]
[125.34629822 248.43225098]
[127.13156891 263.32565308]
[128.91683960 278.21902466]
[130.70211792 293.11239624]
[140.96142578 305.90609741]
[134.76008606 321.08752441]
[118.47750092 323.03930664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[9 67]
[10 66]
[11 65]
[14 62]
[16 60]
[17 59]
[18 58]
[21 52]
[22 51]
[23 50]
[25 49]
[26 48]
[27 47]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
