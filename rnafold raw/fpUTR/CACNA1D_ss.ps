%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUAAGGGCAGGGACCGCGGCUCCUACCUCUUGGUGAUCCCCUUCCCCAUUCCGCCCCCGCCUCAACGCCCAGCACAGUGCCCUGCACACAGUAGUCGCUCAAUAAAUGUUCGUGG\
) } def
/len { sequence length } bind def

/coor [
[192.78817749 146.86949158]
[186.48556519 160.48114014]
[173.48605347 167.96531677]
[158.55003357 166.58132935]
[147.14703369 156.83599854]
[143.45278931 142.29803467]
[148.82011414 128.29118347]
[161.28366089 119.94468689]
[146.57673645 116.99406433]
[131.86981201 114.04343414]
[117.16287231 111.09281158]
[97.31033325 120.25785065]
[80.53715515 106.22994995]
[65.56980896 105.24066925]
[50.60247040 104.25139618]
[35.63512802 103.26211548]
[23.80772400 113.39869690]
[8.64280415 112.18221283]
[-0.94798982 100.84412384]
[-9.84488201 103.42398834]
[-16.29571533 99.62603760]
[-31.23172951 98.24201202]
[-45.68693924 104.67298889]
[-57.64601135 95.79436493]
[-72.58202362 94.41033936]
[-78.92810822 96.89753723]
[-84.67906189 95.86740112]
[-88.26262665 92.53868103]
[-103.10478210 90.36833191]
[-117.94693756 88.19797516]
[-132.97776794 94.75587463]
[-146.01002502 84.80136108]
[-143.63722229 68.57478333]
[-128.30032349 62.76865387]
[-115.77658081 73.35581970]
[-100.93442535 75.52617645]
[-86.09226990 77.69652557]
[-71.19799805 79.47432709]
[-56.26198578 80.85835266]
[-42.87509918 74.32838440]
[-29.84770393 83.30599976]
[-14.91169071 84.69002533]
[0.04128926 85.87677765]
[11.04093170 75.89963531]
[26.23403740 76.68968964]
[36.62440491 88.29476929]
[51.59174728 89.28404999]
[66.55908966 90.27333069]
[81.52643585 91.26261139]
[85.79283142 85.31085205]
[91.88356781 81.24531555]
[99.01652527 79.58805847]
[106.27576447 80.55187988]
[112.72914886 84.01302338]
[117.54798126 89.52703857]
[120.11350250 96.38587952]
[134.82043457 99.33650208]
[149.52735901 102.28713226]
[164.23429871 105.23775482]
[179.17030334 106.62178040]
[194.16899109 106.42378998]
[209.16769409 106.22579193]
[224.16638184 106.02780151]
[231.40597534 97.69926453]
[241.84010315 94.85803223]
[251.88337708 98.22584534]
[258.22454834 106.43329620]
[273.21279907 107.02714539]
[288.20101929 107.62098694]
[303.18927002 108.21482849]
[308.34201050 94.77697754]
[317.39382935 83.61580658]
[329.44213867 75.82304382]
[343.29208374 72.15560913]
[357.57510376 72.96208191]
[370.88406372 78.14965057]
[381.91198730 87.19453430]
[389.58029175 99.19486237]
[393.14440918 112.96059418]
[408.11175537 113.94987488]
[423.07907104 114.93915558]
[438.04641724 115.92843628]
[448.32028198 107.99527740]
[460.83984375 109.20353699]
[468.87484741 118.35091400]
[483.81085205 119.73493958]
[498.74688721 121.11896515]
[513.68286133 122.50299072]
[526.89428711 113.40139008]
[542.20489502 118.19340515]
[547.86981201 133.20301819]
[539.54339600 146.91612244]
[523.61285400 148.81321716]
[512.29888916 137.43901062]
[497.36285400 136.05497742]
[482.42684937 134.67095947]
[467.49081421 133.28692627]
[452.04187012 141.49722290]
[437.05715942 130.89576721]
[422.08981323 129.90649414]
[407.12246704 128.91722107]
[392.15512085 127.92794037]
[386.02233887 142.36605835]
[375.31448364 153.86613464]
[361.30249023 161.03651428]
[345.65856934 163.00097656]
[330.25665283 159.50584412]
[316.94799805 150.95252991]
[307.33859253 138.35153198]
[302.59542847 123.20307159]
[287.60717773 122.60922241]
[272.61895752 122.01538086]
[257.63070679 121.42153931]
[241.35350037 131.72071838]
[224.36437988 121.02649689]
[209.36567688 121.22448730]
[194.36698914 121.42247772]
[179.36830139 121.62047577]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 59]
[9 58]
[10 57]
[11 56]
[13 49]
[14 48]
[15 47]
[16 46]
[19 43]
[21 42]
[22 41]
[24 39]
[25 38]
[28 37]
[29 36]
[30 35]
[60 118]
[61 117]
[62 116]
[63 115]
[67 113]
[68 112]
[69 111]
[70 110]
[79 102]
[80 101]
[81 100]
[82 99]
[85 97]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
