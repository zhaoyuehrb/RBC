%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGGGGCCGGGUCGUCAUGGCGACGCGCCACGCUAACGCAUGGUGUCGGAGGGAGGCCCACUUGCUGAACAGCAGGGAGCG\
) } def
/len { sequence length } bind def

/coor [
[104.46279907 218.45396423]
[102.58400726 203.57209778]
[107.57535553 189.42691040]
[118.37776184 179.01979065]
[132.69912720 174.55899048]
[147.50047302 176.99093628]
[138.59317017 164.92196655]
[129.68586731 152.85299683]
[120.77855682 140.78404236]
[111.87125397 128.71507263]
[91.39902496 131.75048828]
[72.35550690 121.00199127]
[63.46078110 99.74895477]
[48.55509567 101.42842102]
[33.64941406 103.10788727]
[18.74373055 104.78736115]
[3.83804774 106.46682739]
[-9.02817822 116.63502502]
[-24.16517448 110.32603455]
[-26.00129700 94.02999878]
[-12.64769936 84.51088715]
[2.15858078 91.56114197]
[17.06426430 89.88167572]
[31.96994781 88.20220947]
[46.87562943 86.52274323]
[61.78131485 84.84327698]
[69.76179504 72.14241028]
[64.80760956 57.98416138]
[59.85342407 43.82590866]
[54.89923477 29.66765976]
[49.94504929 15.50941086]
[44.99086380 1.35116053]
[33.12984848 -9.11912346]
[36.22940445 -23.68765259]
[31.27521896 -37.84590149]
[18.49895477 -48.12690735]
[21.28146935 -64.28826904]
[36.76034927 -69.70456696]
[49.01225281 -58.80397415]
[45.43346786 -42.80008698]
[50.38765717 -28.64183807]
[61.89431381 -19.18424606]
[59.14911652 -3.60302544]
[64.10330200 10.55522442]
[69.05748749 24.71347427]
[74.01167297 38.87172318]
[78.96585846 53.02997589]
[83.92004395 67.18822479]
[94.49872589 64.49108124]
[105.21812439 65.06253052]
[115.10792542 68.74216461]
[123.30522919 75.09312439]
[129.12974548 83.45106506]
[132.13973999 92.99234772]
[132.16436768 102.81470490]
[129.30987549 112.02236176]
[123.94022369 119.80776215]
[132.84753418 131.87673950]
[141.75483704 143.94569397]
[150.66213989 156.01466370]
[159.56942749 168.08363342]
[168.34117126 171.89222717]
[171.97460938 179.59396362]
[184.67547607 187.57443237]
[197.37634277 195.55491638]
[210.07720947 203.53540039]
[222.77807617 211.51588440]
[235.47892761 219.49636841]
[251.87791443 219.56851196]
[259.77890015 233.93884277]
[251.05403137 247.82440186]
[234.67871094 246.94090271]
[227.49844360 232.19723511]
[214.79759216 224.21675110]
[202.09672546 216.23626709]
[189.39585876 208.25578308]
[176.69499207 200.27529907]
[163.99414062 192.29481506]
[167.52539062 206.87324524]
[164.14720154 221.48788452]
[154.57638550 233.03775024]
[140.84371948 239.07214355]
[125.86306000 238.31062317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 61]
[7 60]
[8 59]
[9 58]
[10 57]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[34 41]
[35 40]
[63 78]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
