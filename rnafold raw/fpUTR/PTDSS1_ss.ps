%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCGCGCCUGUCCUUCCCUCUGCUCCCAGCCUUUGCUGGGCGCCAGACCCGGCUUUGCCGUCCGGCUAUUAGCCUACUGUGGCUAGUCACCCCCGGGGUCCCGGCCUUCUCGGGCUGGGGCCGCCGCCACCGCGGCAGGACGGGGAGGCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[125.41200256 371.38180542]
[112.02216339 379.22344971]
[96.58368683 377.66366577]
[85.03297424 367.30215454]
[81.81152344 352.12313843]
[88.15804291 337.96328735]
[101.63216400 330.26733398]
[103.13999176 315.34332275]
[104.64782715 300.41931152]
[106.15565491 285.49526978]
[107.66348267 270.57125854]
[105.19268036 263.55993652]
[109.35489655 255.36296082]
[111.16294861 240.47232056]
[112.97100067 225.58169556]
[114.77904510 210.69105530]
[116.58709717 195.80041504]
[118.39514923 180.90979004]
[120.20320129 166.01914978]
[109.17811584 155.84823608]
[94.48125458 158.84863281]
[79.78439331 161.84901428]
[65.08753204 164.84939575]
[50.42163086 167.99761963]
[38.65868378 178.57795715]
[24.54240990 173.82609558]
[9.90894985 177.12182617]
[-4.72451115 180.41755676]
[-19.35797119 183.71328735]
[-33.99143219 187.00901794]
[-48.62489319 190.30473328]
[-60.30490875 201.81600952]
[-76.03988647 197.19619751]
[-79.64302826 181.19778442]
[-67.40773010 170.27854919]
[-51.92061996 175.67127991]
[-37.28716278 172.37554932]
[-22.65369987 169.07981873]
[-8.02023983 165.78408813]
[6.61322117 162.48837280]
[21.24668121 159.19264221]
[31.96294785 148.84802246]
[47.12590408 153.36415100]
[52.99398041 148.80023193]
[62.08715057 150.15254211]
[76.78401184 147.15214539]
[91.48087311 144.15176392]
[106.17772675 141.15138245]
[79.13432312 132.27946472]
[66.05638123 109.54403687]
[71.09316254 86.08065033]
[59.47408676 76.59397125]
[47.85501099 67.10729218]
[36.23593521 57.62060928]
[20.14288712 52.28674698]
[20.81329918 35.34605789]
[37.27752686 31.30062294]
[45.72261810 46.00153351]
[57.34169006 55.48821640]
[68.96076965 64.97489166]
[80.57984161 74.46157837]
[117.04327393 67.33039093]
[141.57746887 101.70717621]
[142.78446960 86.75581360]
[143.99147034 71.80445099]
[145.19847107 56.85309219]
[131.37924194 42.34264374]
[132.57510376 22.64370537]
[147.58050537 10.29650879]
[147.88256836 -4.70044994]
[148.18461609 -19.69740868]
[148.48667908 -34.69436646]
[148.78872681 -49.69132614]
[149.09078979 -64.68828583]
[149.39285278 -79.68524170]
[138.26545715 -90.90827942]
[138.41662598 -106.71184540]
[149.75668335 -117.71996307]
[165.55776978 -117.40171051]
[176.44537354 -105.94590759]
[175.96008301 -90.14907074]
[164.38980103 -79.38318634]
[164.08775330 -64.38623047]
[163.78569031 -49.38927078]
[163.48364258 -34.39231110]
[163.18157959 -19.39535332]
[162.87953186 -4.39839411]
[162.57746887 10.59856415]
[171.50048828 15.86925220]
[177.45201111 24.45218468]
[179.28805542 34.81638336]
[176.60615540 45.07836914]
[169.83123779 53.34444046]
[160.14982605 58.06009293]
[158.94282532 73.01145172]
[157.73582458 87.96281433]
[156.52882385 102.91416931]
[168.05178833 112.51736450]
[182.54067993 108.63507843]
[197.02957153 104.75279236]
[211.51846313 100.87050629]
[226.00733948 96.98822021]
[240.49623108 93.10593414]
[254.98512268 89.22364807]
[269.47399902 85.34136200]
[283.96289062 81.45907593]
[298.45178223 77.57678986]
[312.94067383 73.69450378]
[324.14770508 61.72226715]
[340.05593872 65.70474243]
[344.30035400 81.54510498]
[332.51464844 92.94814301]
[316.82296753 88.18339539]
[302.33407593 92.06568146]
[287.84518433 95.94796753]
[273.35629272 99.83025360]
[258.86740112 103.71253967]
[244.37850952 107.59482574]
[229.88963318 111.47711182]
[215.40074158 115.35939789]
[200.91184998 119.24167633]
[186.42297363 123.12396240]
[171.93408203 127.00624847]
[169.82653809 141.85745239]
[182.66326904 149.61752319]
[195.49998474 157.37759399]
[208.33670044 165.13766479]
[221.17341614 172.89772034]
[237.57121277 172.68679810]
[245.71905518 186.91860962]
[237.23516846 200.95269775]
[220.84701538 200.35198975]
[213.41334534 185.73445129]
[200.57662964 177.97438049]
[187.73991394 170.21430969]
[174.90319824 162.45423889]
[162.06648254 154.69416809]
[155.32331848 157.97743225]
[165.73580933 168.77465820]
[158.68452454 182.01396179]
[143.91424561 179.39877319]
[141.83699036 164.54394531]
[135.09382629 167.82720947]
[133.28578186 182.71783447]
[131.47773743 197.60847473]
[129.66967773 212.49909973]
[127.86163330 227.38973999]
[126.05358124 242.28036499]
[124.24552917 257.17098999]
[122.58750916 272.07910156]
[121.07967377 287.00311279]
[119.57184601 301.92712402]
[118.06401825 316.85116577]
[116.55618286 331.77517700]
[128.21861267 342.01077271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 154]
[8 153]
[9 152]
[10 151]
[11 150]
[13 149]
[14 148]
[15 147]
[16 146]
[17 145]
[18 144]
[19 143]
[20 48]
[21 47]
[22 46]
[23 45]
[24 43]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[51 61]
[52 60]
[53 59]
[54 58]
[63 97]
[64 96]
[65 95]
[66 94]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
[98 123]
[99 122]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
[124 137]
[125 136]
[126 135]
[127 134]
[128 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
