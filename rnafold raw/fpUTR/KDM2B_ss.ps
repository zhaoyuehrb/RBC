%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUGUCCACAUCUUUGAGUGCCGGGAGUUUAAAAGUUAGGCAGUCCUUAUAGGUAUGGAAGCCGAGCUAAUUUCCUUCUGAGCCCCCCAAAUGCCUCCUCCAC\
) } def
/len { sequence length } bind def

/coor [
[91.38493347 301.00079346]
[86.53678894 315.19570923]
[81.68863678 329.39062500]
[85.38703156 345.36727905]
[73.21701050 356.35922241]
[57.69804382 351.05886841]
[54.79472351 334.91876221]
[67.49372864 324.54248047]
[72.34187317 310.34756470]
[77.19001770 296.15264893]
[61.68759155 279.31521606]
[58.65715790 256.51782227]
[69.32478333 236.01881409]
[89.93113708 225.31765747]
[90.37986755 210.32437134]
[90.82860565 195.33108521]
[91.27733612 180.33779907]
[83.92424011 167.38475037]
[92.07091522 153.82221985]
[82.90536499 138.93966675]
[92.50000000 123.31233978]
[92.50000000 108.31233978]
[92.27561188 93.31401825]
[91.82687378 78.32073212]
[91.37814331 63.32744598]
[90.92941284 48.33415604]
[90.48068237 33.34086990]
[90.03195190 18.34758568]
[75.86834717 12.90073872]
[64.89874268 2.47429562]
[58.77326584 -11.32034779]
[58.39688492 -26.36846924]
[63.79582596 -40.37619019]
[74.11831665 -51.22015381]
[87.76882172 -57.26938248]
[87.32008362 -72.26266479]
[86.87135315 -87.25595093]
[86.42262268 -102.24923706]
[78.27594757 -115.81177521]
[85.62904358 -128.76481628]
[85.18031311 -143.75810242]
[84.73157501 -158.75138855]
[75.83763885 -168.24009705]
[75.86252594 -180.84231567]
[84.24104309 -189.70918274]
[84.24104309 -204.70918274]
[84.24104309 -219.70918274]
[70.89990997 -227.31904602]
[63.16494370 -240.58801270]
[63.11679840 -255.94683838]
[70.76843262 -269.26403809]
[84.06159210 -276.95739746]
[99.42048645 -276.95739746]
[112.71364594 -269.26403809]
[120.36528015 -255.94683838]
[120.31713867 -240.58801270]
[112.58216858 -227.31904602]
[99.24104309 -219.70918274]
[99.24104309 -204.70918274]
[99.24104309 -189.70918274]
[108.84770203 -175.10748291]
[99.72486115 -159.20011902]
[100.17359924 -144.20683289]
[100.62232971 -129.21354675]
[108.73690796 -116.72343445]
[101.41590881 -102.69797516]
[101.86463928 -87.70468903]
[102.31337738 -72.71140289]
[102.76210785 -57.71811295]
[116.74993896 -52.49607086]
[127.70246887 -42.28884506]
[133.92947388 -28.62907410]
[134.45370483 -13.58537769]
[129.16416931 0.55090445]
[118.83773804 11.61471367]
[105.02523804 17.89885330]
[105.47396851 32.89213943]
[105.92269897 47.88542557]
[106.37142944 62.87871170]
[106.82015991 77.87200165]
[107.26889801 92.86528778]
[110.68563080 100.32411194]
[107.50000000 108.31233978]
[107.50000000 123.31233978]
[116.10610199 133.06286621]
[115.70422363 145.65870667]
[107.06420135 154.27096558]
[114.38520050 168.29641724]
[106.27062225 180.78652954]
[105.82189178 195.77981567]
[105.37315369 210.77310181]
[104.92442322 225.76638794]
[112.82737732 228.56475830]
[119.93019104 232.99720764]
[125.90049744 238.85050964]
[130.46017456 245.84512329]
[133.39831543 253.64848328]
[134.58096313 261.89083862]
[133.95719910 270.18276978]
[131.56137085 278.13360596]
[127.51115417 285.36981201]
[122.00188446 291.55249023]
[115.29703522 296.39334106]
[107.71571350 299.66809082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[14 92]
[15 91]
[16 90]
[17 89]
[19 87]
[21 84]
[22 83]
[23 81]
[24 80]
[25 79]
[26 78]
[27 77]
[28 76]
[35 69]
[36 68]
[37 67]
[38 66]
[40 64]
[41 63]
[42 62]
[45 60]
[46 59]
[47 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
