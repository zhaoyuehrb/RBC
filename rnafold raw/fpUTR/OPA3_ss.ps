%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGACGCACGCAUGGCCACGAGAGGGCGGGGGAGGAGUGAAGAGGUUGAGGCGCCCCGCCCAGUCAGCAAGGUUGCGCGUGCCCUGUGAGACCGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[129.05697632 263.98513794]
[140.48271179 253.80126953]
[136.78852844 239.26327515]
[126.15508270 228.83355713]
[130.25537109 213.55291748]
[126.56119537 199.01492310]
[122.19297028 184.66505432]
[117.16022491 170.53454590]
[112.12747192 156.40403748]
[107.09471893 142.27351379]
[102.06197357 128.14300537]
[97.02922058 114.01248932]
[86.50635529 104.80592346]
[88.84026337 91.02026367]
[83.80751801 76.88974762]
[78.77476501 62.75923157]
[73.74201202 48.62871933]
[68.70926666 34.49820328]
[52.76917267 22.35332870]
[56.63125992 3.51461577]
[50.51600647 -10.18223286]
[44.18848038 -23.78232193]
[29.61434746 -29.28071785]
[23.39107513 -43.16328049]
[28.72277069 -57.02360535]
[22.39524460 -70.62369537]
[16.06771851 -84.22378540]
[9.74019337 -97.82387543]
[3.41266775 -111.42395782]
[-2.91485763 -125.02404785]
[-9.24238300 -138.62414551]
[-15.56990814 -152.22422791]
[-30.42957497 -149.60646057]
[-45.46035385 -150.92481995]
[-59.63742447 -156.08943176]
[-71.99416351 -164.74813843]
[-81.68807220 -176.31060791]
[-88.05821228 -189.98846436]
[-90.67024231 -204.84913635]
[-89.34607697 -219.87940979]
[-84.17599487 -234.05448914]
[-75.51251221 -246.40788269]
[-63.94630432 -256.09732056]
[-50.26598740 -262.46218872]
[-35.40430450 -265.06848145]
[-20.37454796 -263.73849487]
[-6.20147228 -258.56295776]
[6.14857912 -249.89469910]
[15.83355808 -238.32475281]
[22.19312859 -224.64198303]
[24.79368210 -209.77928162]
[23.45790863 -194.75004578]
[18.27688599 -180.57896423]
[9.60386276 -168.23226929]
[-1.96981955 -158.55175781]
[4.35770607 -144.95166016]
[10.68523121 -131.35157776]
[17.01275635 -117.75148773]
[23.34028244 -104.15139771]
[29.66780853 -90.55130768]
[35.99533463 -76.95121765]
[42.32285690 -63.35113144]
[56.35927200 -58.50193787]
[62.97002029 -44.79965210]
[57.78857040 -30.10984802]
[64.11609650 -16.50975800]
[69.89344025 -11.68816376]
[70.42155457 -2.38688803]
[80.40849304 0.63591826]
[87.14847565 8.88982296]
[88.15523529 19.72113228]
[82.83977509 29.46545410]
[87.87252808 43.59597015]
[92.90528107 57.72648239]
[97.93802643 71.85699463]
[102.97077942 85.98751068]
[113.49364471 95.19407654]
[111.15973663 108.97973633]
[116.19248199 123.11025238]
[121.22523499 137.24076843]
[126.25798798 151.37127686]
[131.29074097 165.50180054]
[136.32348633 179.63230896]
[140.58813477 183.23233032]
[142.70573425 187.69340515]
[142.72200012 192.00088501]
[141.09918213 195.32073975]
[144.79336548 209.85873413]
[155.69104004 221.32830811]
[151.32650757 235.56909180]
[155.02069092 250.10708618]
[169.92205811 253.60110474]
[181.48519897 263.62866211]
[187.05302429 277.88552856]
[185.34606934 293.09555054]
[176.75657654 305.76358032]
[163.25836182 312.97863770]
[147.95320129 313.08270264]
[134.35812378 306.05187988]
[125.59716797 293.50180054]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 91]
[3 90]
[5 88]
[6 87]
[7 83]
[8 82]
[9 81]
[10 80]
[11 79]
[12 78]
[14 76]
[15 75]
[16 74]
[17 73]
[18 72]
[20 68]
[21 66]
[22 65]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
