%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAGAACUGCAGGGGAGGAGGACGCUGCCACCCACAGCCUCUAGAGCUCAUUGCAGCUGGGACAGCCCGGAGUGUGGUUAGCAGCUCGGCAAGCGCUGCCCAGGUCCUGGGGUGGUGGCAGCCAGCGGGAGCAGGAAAGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[84.38208008 629.46435547]
[74.72378540 617.82080078]
[69.13813782 603.76177979]
[68.17237854 588.66467285]
[71.92110443 574.00854492]
[80.01705933 561.22924805]
[91.66709137 551.57873535]
[105.72984314 546.00256348]
[104.76221466 531.03381348]
[103.79458618 516.06500244]
[102.82696533 501.09628296]
[90.89364624 496.71331787]
[81.48673248 488.09246826]
[76.04183197 476.50103760]
[75.40824127 463.66320801]
[79.71661377 451.50357056]
[88.35407257 441.85861206]
[100.05110168 436.19931030]
[89.15070343 426.11383057]
[88.60977173 410.90982056]
[99.26226044 399.54486084]
[98.93951416 384.54833984]
[88.03912354 374.46286011]
[87.49818420 359.25885010]
[98.15067291 347.89389038]
[97.82793427 332.89736938]
[97.50518799 317.90081787]
[97.18244934 302.90429688]
[96.85971069 287.90777588]
[96.53696442 272.91125488]
[96.21422577 257.91473389]
[95.89147949 242.91819763]
[95.56874084 227.92166138]
[95.24600220 212.92514038]
[91.93352509 206.25724792]
[95.08114624 197.60327148]
[95.08114624 182.60327148]
[95.08114624 167.60327148]
[94.75840759 152.60673523]
[94.11307526 137.62062073]
[93.46774292 122.63451385]
[80.05915070 115.66302490]
[72.86837006 101.13499451]
[75.81616974 84.07923126]
[89.03499603 71.26879883]
[84.89353943 56.85185242]
[80.75208282 42.43490601]
[76.61063385 28.01795959]
[72.46917725 13.60101318]
[68.17285156 -0.77054292]
[63.41498566 -14.99596691]
[58.35214233 -29.11572647]
[53.28929901 -43.23548508]
[48.22645569 -57.35524750]
[43.16361237 -71.47500610]
[38.10076904 -85.59476471]
[23.78564835 -97.12403870]
[27.50003815 -114.24380493]
[22.13456345 -128.25135803]
[16.76909065 -142.25892639]
[11.40361691 -156.26647949]
[6.03814316 -170.27403259]
[-7.03286457 -180.17761230]
[-4.72342443 -196.41333008]
[10.59070969 -202.27928162]
[23.15567017 -191.74107361]
[20.04570198 -175.63951111]
[25.41117477 -161.63195801]
[30.77664948 -147.62438965]
[36.14212418 -133.61683655]
[41.50759506 -119.60927582]
[52.45876312 -114.36547852]
[57.02003479 -102.68050385]
[52.22052765 -90.65760803]
[57.28337097 -76.53784943]
[62.34621429 -62.41809082]
[67.40905762 -48.29832840]
[72.47190094 -34.17856979]
[77.53474426 -20.05880928]
[81.45857239 -17.22189331]
[83.60011292 -11.85914421]
[82.49735260 -5.22123528]
[87.52206421 0.27291518]
[86.88612366 9.45955849]
[91.02758026 23.87650490]
[95.16902924 38.29345322]
[99.31048584 52.71039963]
[103.45194244 67.12734222]
[117.62535095 72.03798676]
[129.79844666 63.27351379]
[141.97152710 54.50904083]
[154.14460754 45.74456787]
[158.13128662 30.20474625]
[172.82487488 23.76443672]
[186.95375061 31.36409378]
[189.67941284 47.17390823]
[178.91099548 59.06594849]
[162.90908813 57.91765594]
[150.73599243 66.68212891]
[138.56291199 75.44660187]
[126.38982391 84.21107483]
[125.66982269 108.85852051]
[108.45384979 121.98918152]
[109.09918213 136.97529602]
[109.74451447 151.96141052]
[113.02301025 157.83758545]
[112.81719208 163.60844421]
[110.08114624 167.60327148]
[110.08114624 182.60327148]
[110.08114624 197.60327148]
[110.24253082 212.60240173]
[110.56526947 227.59892273]
[110.88800812 242.59545898]
[111.21075439 257.59197998]
[111.53349304 272.58850098]
[111.85623169 287.58502197]
[112.17897797 302.58157349]
[112.50171661 317.57809448]
[112.82446289 332.57461548]
[113.14720154 347.57113647]
[124.27877045 358.46728516]
[124.39244843 373.68048096]
[113.93604279 384.22558594]
[114.25878906 399.22213745]
[125.39035797 410.11825562]
[125.50403595 425.33148193]
[115.04763031 435.87658691]
[130.60351562 443.91870117]
[139.93376160 458.63311768]
[140.56738281 475.95620728]
[132.42065430 491.15682983]
[117.79572296 500.12863159]
[118.76334381 515.09741211]
[119.73097229 530.06616211]
[120.69860077 545.03491211]
[135.36224365 548.75415039]
[148.15779114 556.82440186]
[157.83168030 568.45501709]
[163.43615723 582.50653076]
[164.42216492 597.60235596]
[160.69306946 612.26348877]
[152.61425781 625.05364990]
[140.97715759 634.71972656]
[126.92189789 640.31475830]
[111.82544708 641.29064941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 135]
[9 134]
[10 133]
[11 132]
[18 127]
[21 124]
[22 123]
[25 120]
[26 119]
[27 118]
[28 117]
[29 116]
[30 115]
[31 114]
[32 113]
[33 112]
[34 111]
[36 110]
[37 109]
[38 108]
[39 105]
[40 104]
[41 103]
[45 88]
[46 87]
[47 86]
[48 85]
[49 84]
[50 82]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[89 101]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
