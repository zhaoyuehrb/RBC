%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGUGCGGCUGGCCCGGUUUCCUGGCGACGCGGCCCUGCAGGCGGUUGCGUUCCCCGUCGUUACCCUCUUUCUCUUCCCGACGCGUGAGUUAGGCCGUA\
) } def
/len { sequence length } bind def

/coor [
[113.79010773 103.87404633]
[103.91993713 113.77713776]
[90.31483459 110.55333710]
[75.88745117 114.65828705]
[61.46006393 118.76322937]
[53.90706635 124.21125031]
[46.52493668 122.76508331]
[31.97798347 126.42378998]
[20.48185349 137.29345703]
[6.25174999 132.89419556]
[-8.29520416 136.55290222]
[-22.78409195 140.43518066]
[-33.94003677 151.65371704]
[-48.29886627 147.69476318]
[-62.72625351 151.79971313]
[-77.15364075 155.90466309]
[-88.30958557 167.12318420]
[-102.66841125 163.16423035]
[-117.09579468 167.26918030]
[-130.67562866 177.41929626]
[-144.18832397 167.18000793]
[-138.08988953 151.36085510]
[-121.20074463 152.84179688]
[-106.77336121 148.73684692]
[-96.64935303 137.81193542]
[-81.25858307 141.47727966]
[-66.83119965 137.37232971]
[-52.40381241 133.26737976]
[-42.27980804 122.34246826]
[-26.88903618 126.00780487]
[-21.21900940 121.06431580]
[-11.95390987 122.00595093]
[2.59304404 118.34724426]
[13.04867935 107.73927307]
[28.31927872 111.87683868]
[42.86623383 108.21813202]
[57.35511780 104.33584595]
[71.78250122 100.23089600]
[86.20989227 96.12595367]
[96.08006287 86.22286224]
[109.68516541 89.44666290]
[117.41185760 75.92127991]
[132.10174561 71.96380615]
[144.94851685 79.41336823]
[159.37590027 75.30842590]
[173.80328369 71.20348358]
[188.23068237 67.09853363]
[202.65806580 62.99359131]
[217.08544922 58.88864899]
[222.50714111 44.46951294]
[235.23095703 36.10543060]
[250.26228333 36.82883835]
[261.84667969 46.15297699]
[276.27407837 42.04803085]
[290.70144653 37.94308853]
[305.06390381 33.61645889]
[315.86907959 22.05970001]
[330.34301758 25.57459068]
[344.63714600 21.02730179]
[358.93127441 16.48001099]
[373.22540283 11.93272114]
[387.51956177 7.38543129]
[387.59448242 -7.74234343]
[392.34243774 -22.10591888]
[401.29821777 -34.29809570]
[413.58444214 -43.12440872]
[427.99743652 -47.72014999]
[443.12515259 -47.63507462]
[457.48553467 -42.87751007]
[469.67172241 -33.91356277]
[478.48977661 -21.62142563]
[483.07586670 -7.20535755]
[482.98065186 7.92230320]
[478.21347046 22.27950287]
[469.24136353 34.45966721]
[456.94332886 43.26950836]
[442.52416992 47.84592819]
[427.39657593 47.74057770]
[413.04257202 42.96377563]
[400.86843872 33.98350525]
[392.06683350 21.67956161]
[377.77270508 26.22685051]
[363.47857666 30.77414131]
[349.18444824 35.32143021]
[334.89031982 39.86872101]
[325.10754395 51.10022736]
[309.61120605 47.91058731]
[304.09609985 53.02633667]
[294.80639648 52.37047195]
[280.37899780 56.47541809]
[265.95162964 60.58036041]
[261.01089478 74.60630798]
[248.61183167 83.13433075]
[233.39070129 82.72127533]
[221.19038391 73.31603241]
[206.76300049 77.42097473]
[192.33561707 81.52592468]
[177.90823364 85.63086700]
[163.48085022 89.73580933]
[149.05346680 93.84075928]
[142.05261230 106.93746185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[3 39]
[4 38]
[5 37]
[7 36]
[8 35]
[10 33]
[11 32]
[12 30]
[14 28]
[15 27]
[16 26]
[18 24]
[19 23]
[44 100]
[45 99]
[46 98]
[47 97]
[48 96]
[49 95]
[53 91]
[54 90]
[55 89]
[56 87]
[58 85]
[59 84]
[60 83]
[61 82]
[62 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
