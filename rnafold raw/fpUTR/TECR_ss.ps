%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCUGGAGGGGCGGGGCGGACGCAGAGCCGCGUUUAGUCUAUCGCUGCGGUUGCGAGCGCUGUAGGGAGCCUGUGCUGUGCCGCGCAGUUAGGCAGCAGCAGCCGCGGAGCAGUAGCCGCCGUGGGAGGGAGCCAUGAAGCAUUACGAGCAGAGAG\
) } def
/len { sequence length } bind def

/coor [
[47.09260941 85.04392242]
[33.34978867 79.03269196]
[17.60552406 80.59111023]
[9.04566479 68.40184784]
[-4.69715452 62.39061737]
[-18.43997383 56.37938690]
[-32.18279266 50.36815262]
[-45.92561340 44.35692215]
[-59.66843033 38.34568787]
[-74.23444366 43.86555862]
[-88.08598328 37.57354355]
[-93.25857544 23.65305901]
[-109.00283813 25.21147728]
[-117.56269836 13.02221584]
[-131.30552673 7.01098347]
[-145.04833984 0.99975097]
[-158.79115295 -5.01148176]
[-174.53543091 -3.45306325]
[-183.09527588 -15.64232349]
[-196.83810425 -21.65355682]
[-210.58091736 -27.66478920]
[-224.32374573 -33.67602158]
[-233.49290466 -34.25677109]
[-238.27554321 -39.94255447]
[-251.89768982 -46.22245026]
[-265.51983643 -52.50234604]
[-279.14199829 -58.78224182]
[-292.76412964 -65.06214142]
[-301.92013550 -65.82279968]
[-306.59020996 -71.60138702]
[-320.08645630 -78.14752960]
[-334.85794067 -73.20376587]
[-348.45178223 -80.03474426]
[-353.07385254 -94.14757538]
[-368.86715698 -93.20847321]
[-376.94189453 -105.72439575]
[-392.73519897 -104.78529358]
[-400.80990601 -117.30121613]
[-414.30612183 -123.84735107]
[-427.80236816 -130.39349365]
[-441.29858398 -136.93963623]
[-453.46215820 -131.08314514]
[-466.58367920 -133.28599548]
[-475.89111328 -142.51907349]
[-478.13137817 -155.23860168]
[-491.49649048 -162.04846191]
[-504.86157227 -168.85832214]
[-518.22668457 -175.66818237]
[-532.54949951 -169.39195251]
[-547.54107666 -173.84019470]
[-556.12280273 -186.91258240]
[-554.24273682 -202.43672180]
[-542.78851318 -213.08261108]
[-527.16851807 -213.82357788]
[-514.75799561 -204.30975342]
[-511.41683960 -189.03327942]
[-498.05172729 -182.22341919]
[-484.68661499 -175.41355896]
[-471.32153320 -168.60369873]
[-455.59085083 -174.48567200]
[-440.15866089 -167.04682922]
[-434.75244141 -150.43585205]
[-421.25622559 -143.88970947]
[-407.75997925 -137.34358215]
[-394.26376343 -130.79743958]
[-379.43579102 -132.20475769]
[-370.39575195 -119.22061920]
[-355.56777954 -120.62794495]
[-346.52770996 -107.64379883]
[-332.58316040 -112.75115967]
[-318.80282593 -106.30470276]
[-313.54031372 -91.64375305]
[-300.04406738 -85.09761047]
[-286.48425293 -78.68428802]
[-272.86209106 -72.40438843]
[-259.23995972 -66.12449646]
[-245.61779785 -59.84459686]
[-231.99565125 -53.56470108]
[-218.31251526 -47.41884232]
[-204.56968689 -41.40760803]
[-190.82687378 -35.39637756]
[-177.08404541 -29.38514328]
[-162.32276917 -31.37352562]
[-152.77992249 -18.75430107]
[-139.03710938 -12.74306870]
[-125.29428864 -6.73183584]
[-111.55146790 -0.72060341]
[-96.79018402 -2.70898533]
[-87.24734497 9.91023922]
[-73.51406097 4.25935125]
[-59.49125290 10.15982437]
[-53.65719986 24.60286903]
[-39.91437912 30.61410141]
[-26.17156029 36.62533569]
[-12.42874146 42.63656616]
[1.31407809 48.64780045]
[15.05689716 54.65903091]
[29.81818390 52.67065048]
[39.36102295 65.28987122]
[53.10384369 71.30110931]
[63.14814758 58.50403214]
[76.61058807 49.10263062]
[92.37311554 43.98567963]
[109.09469604 43.68161392]
[125.32534790 48.30535889]
[139.63188171 57.54070282]
[150.72444153 70.66038513]
[157.57254028 86.58277130]
[172.33894348 83.94582367]
[187.10533142 81.30888367]
[201.87173462 78.67193604]
[208.52210999 64.65222931]
[222.15904236 57.24861526]
[237.53886414 59.30792618]
[248.74771118 70.03832245]
[251.47555542 85.31374359]
[244.67349243 99.26048279]
[230.95704651 106.51572418]
[215.60046387 104.28969574]
[204.50868225 93.43833923]
[189.74227905 96.07527924]
[174.97589111 98.71222687]
[160.20948792 101.34916687]
[158.00852966 116.18681335]
[171.37362671 122.99667358]
[184.73872375 129.80653381]
[198.10382080 136.61639404]
[211.46891785 143.42625427]
[225.79173279 137.15002441]
[240.78329468 141.59825134]
[249.36506653 154.67063904]
[247.48498535 170.19479370]
[236.03076172 180.84068298]
[220.41075134 181.58164978]
[208.00022888 172.06782532]
[204.65905762 156.79135132]
[191.29396057 149.98149109]
[177.92886353 143.17163086]
[164.56376648 136.36177063]
[151.19866943 129.55191040]
[145.25926208 135.84928894]
[138.60108948 141.06434631]
[131.40992737 145.12528992]
[138.21978760 158.49038696]
[153.49626160 161.83155823]
[163.01008606 174.24208069]
[162.26913452 189.86209106]
[151.62324524 201.31631470]
[136.09909058 203.19639587]
[123.02670288 194.61463928]
[118.57846069 179.62306213]
[124.85469055 165.30024719]
[118.04483795 151.93515015]
[103.39641571 154.87568665]
[88.49719238 153.76394653]
[74.44738770 148.68203735]
[62.28450775 140.00521851]
[52.90670395 128.37423706]
[47.00648499 114.64797974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[4 97]
[5 96]
[6 95]
[7 94]
[8 93]
[9 92]
[12 89]
[14 87]
[15 86]
[16 85]
[17 84]
[19 82]
[20 81]
[21 80]
[22 79]
[24 78]
[25 77]
[26 76]
[27 75]
[28 74]
[30 73]
[31 72]
[34 69]
[36 67]
[38 65]
[39 64]
[40 63]
[41 62]
[45 59]
[46 58]
[47 57]
[48 56]
[108 123]
[109 122]
[110 121]
[111 120]
[124 140]
[125 139]
[126 138]
[127 137]
[128 136]
[143 153]
[144 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
