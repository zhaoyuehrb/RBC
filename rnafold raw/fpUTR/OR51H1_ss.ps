%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAUAAAGCCAUUGUUCUGUCCAUAUGAGAAUAUAUAUUCAAUUUAGGAGCUGUGAGCCAAGUGGAGGAGUCCAGCCCCACCCGAUGGUGAGAACAAC\
) } def
/len { sequence length } bind def

/coor [
[51.38977051 347.69509888]
[46.25945663 362.00411987]
[36.04013443 373.25729370]
[22.29017830 379.73858643]
[7.10635328 380.45962524]
[-7.19591475 375.31051636]
[-18.43563461 365.07638550]
[-24.89883041 351.31790161]
[-25.59991074 336.13314819]
[-20.43196869 321.83767700]
[-10.18307495 310.61141968]
[3.58388686 304.16632080]
[18.76955605 303.48522949]
[23.85062408 289.37200928]
[28.93169403 275.25881958]
[34.01276016 261.14559937]
[39.09383011 247.03237915]
[44.17490005 232.91917419]
[49.25597000 218.80595398]
[42.70153046 205.48023987]
[47.65340805 191.09504700]
[61.67509460 184.31050110]
[66.75616455 170.19729614]
[71.83723450 156.08407593]
[76.91830444 141.97087097]
[65.08021545 132.78608704]
[56.65904999 120.39315033]
[52.47882843 106.00473785]
[52.94858932 91.02875519]
[58.02236176 76.93061829]
[46.17003632 67.73700714]
[34.31771088 58.54340363]
[22.46538734 49.34979630]
[6.15337896 47.66146851]
[-0.29256564 32.58228302]
[9.75858784 19.62441444]
[25.96707344 22.11780739]
[31.65899277 37.49747086]
[43.51131821 46.69107819]
[55.36364365 55.88468552]
[67.21596527 65.07829285]
[75.25261688 58.98920059]
[84.38585663 54.71736145]
[94.21099091 52.45206833]
[104.29264069 52.29368973]
[114.18407440 54.24925613]
[123.44699097 58.23210144]
[131.67094421 64.06575012]
[143.22863770 54.50439072]
[148.92991638 39.74613571]
[163.66838074 37.59516144]
[175.22608948 28.03380013]
[186.78378296 18.47244072]
[198.34147644 8.91108131]
[203.06932068 0.87955606]
[210.41569519 -0.76218522]
[222.26802063 -9.95579147]
[228.72619629 -27.11039162]
[246.09429932 -29.00742149]
[257.65200806 -38.56878281]
[257.58023071 -54.20619965]
[267.61648560 -66.19817352]
[283.02197266 -68.88246155]
[296.52267456 -60.99161911]
[301.74395752 -46.25146866]
[296.22052002 -31.62185097]
[282.56033325 -24.01042938]
[267.21334839 -27.01108360]
[255.65565491 -17.44972420]
[254.16015625 -5.33225012]
[244.45153809 2.71896052]
[231.46162415 1.89653420]
[219.60929871 11.09014034]
[207.90283203 20.46878052]
[196.34513855 30.03013992]
[184.78744507 39.59149933]
[173.22973633 49.15285873]
[168.35514832 63.22721863]
[152.78999329 66.06208801]
[141.23229980 75.62345123]
[147.34861755 92.75938416]
[146.63296509 110.94007111]
[139.18859863 127.54220581]
[126.08965302 140.17024231]
[109.22621155 147.00207520]
[91.03151703 147.05194092]
[85.95044708 161.16514587]
[80.86937714 175.27836609]
[75.78830719 189.39157104]
[82.26757050 203.55691528]
[76.91359711 217.79733276]
[63.36917877 223.88702393]
[58.28811264 238.00024414]
[53.20704269 252.11344910]
[48.12597275 266.22665405]
[43.04490662 280.33987427]
[37.96383667 294.45309448]
[32.88276672 308.56628418]
[44.14937210 318.77081299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 98]
[14 97]
[15 96]
[16 95]
[17 94]
[18 93]
[19 92]
[22 89]
[23 88]
[24 87]
[25 86]
[30 41]
[31 40]
[32 39]
[33 38]
[48 80]
[49 79]
[51 77]
[52 76]
[53 75]
[54 74]
[56 73]
[57 72]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
