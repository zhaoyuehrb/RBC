%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAUUAGUAGCAGAGUAUGCCACAACUUCUAGGAUCAGGAAAGACCUCUCCUAGCUUCCUACUGGAUAUCUUUAUUAGCAUUUUUGUAGAUUCUGUGAAAAAGAAGAAAUAAAACGAAAUCACCCACAUUUUCAAA\
) } def
/len { sequence length } bind def

/coor [
[163.46014404 339.58331299]
[157.51802063 325.81045532]
[154.62110901 311.09286499]
[154.90029907 296.09545898]
[158.34298706 281.49588013]
[164.79360962 267.95373535]
[173.96073914 256.08093262]
[185.43017578 246.41384888]
[198.68368530 239.38931274]
[213.12248230 235.32469177]
[228.09417725 234.40362549]
[242.92376709 236.66812134]
[231.56735229 226.86851501]
[220.21095276 217.06892395]
[208.85455322 207.26931763]
[197.49815369 197.46972656]
[186.14175415 187.67012024]
[178.96218872 185.66488647]
[174.64266968 177.51844788]
[163.51063538 167.46470642]
[152.37858582 157.41096497]
[141.24655151 147.35722351]
[126.27961731 157.03828430]
[109.19556427 162.12428284]
[91.37070465 162.20545959]
[74.24102783 157.27529907]
[59.18652725 147.73097229]
[47.42001343 134.34136963]
[39.88940430 118.18518829]
[37.20137787 100.56398773]
[39.57248688 82.89734650]
[25.73056793 77.11796570]
[11.88864803 71.33858490]
[-1.95327270 65.55920410]
[-15.79519367 59.77982712]
[-29.63711357 54.00044632]
[-41.89788055 58.17884064]
[-53.33811951 53.01604843]
[-58.00677109 41.79958344]
[-71.71454620 35.70886230]
[-85.42231750 29.61813736]
[-100.85150146 34.01357269]
[-113.82367706 24.57417107]
[-114.38769531 8.54103661]
[-102.11090088 -1.78658533]
[-86.41098785 1.51377451]
[-79.33159637 15.91036224]
[-65.62381744 22.00108719]
[-51.91604614 28.09181023]
[-34.63135529 25.27318954]
[-23.85773277 40.15852356]
[-10.01581287 45.93790436]
[3.82610750 51.71728516]
[17.66802788 57.49666595]
[31.50994873 63.27604675]
[45.35186768 69.05542755]
[53.48718643 57.80351639]
[63.89613342 48.61424637]
[76.06990051 41.93680191]
[72.05134583 27.48511505]
[68.03278351 13.03343010]
[55.95553970 1.93964112]
[59.78802872 -14.00539207]
[75.58771515 -18.39878464]
[87.10123444 -6.72099352]
[82.48447418 9.01487350]
[86.50302887 23.46655846]
[90.52158356 37.91824341]
[102.71562195 37.25758743]
[114.80697632 38.96936417]
[126.33844757 42.98884964]
[136.87399292 49.16405487]
[146.01525879 57.26148605]
[153.41658020 66.97495270]
[158.79809570 77.93717194]
[161.95632935 89.73364258]
[162.77185059 101.91830444]
[161.21382141 114.03042603]
[157.34115601 125.61203003]
[151.30030823 136.22518921]
[162.43234253 146.27893066]
[173.56437683 156.33267212]
[184.69641113 166.38641357]
[195.94134521 176.31372070]
[207.29774475 186.11331177]
[218.65415955 195.91291809]
[230.01055908 205.71250916]
[241.36695862 215.51211548]
[252.72335815 225.31170654]
[260.19982910 226.40185547]
[265.34524536 230.91993713]
[280.22949219 232.77975464]
[295.11373901 234.63957214]
[309.99801636 236.49938965]
[324.65103149 230.53285217]
[336.32077026 239.78846741]
[351.20501709 241.64828491]
[366.08926392 243.50810242]
[372.72454834 229.89738464]
[383.42147827 219.18035889]
[397.01974487 212.51954651]
[412.04425049 210.63746643]
[426.86532593 213.73823547]
[439.87524414 221.48554993]
[449.66281128 233.03901672]
[455.16632080 247.14540100]
[455.78878784 262.27453613]
[451.46273804 276.78536987]
[442.65737915 289.10382080]
[430.32788086 297.89373779]
[415.81167603 302.20159912]
[400.68328857 301.56015015]
[386.58383179 296.03894043]
[375.04263306 286.23690796]
[367.31164551 273.21728516]
[364.22946167 258.39236450]
[349.34521484 256.53253174]
[334.46093750 254.67272949]
[320.87255859 260.77230835]
[308.13818359 251.38365173]
[293.25393677 249.52383423]
[278.36968994 247.66401672]
[263.48541260 245.80419922]
[275.10446167 255.29093933]
[284.45593262 267.01910400]
[291.11727905 280.45883179]
[294.78759766 295.00286865]
[295.30102539 309.99407959]
[292.63436890 324.75512695]
[286.90808105 338.61911011]
[278.38092041 350.95959473]
[267.43817139 361.21902466]
[254.57421875 368.93386841]
[240.37028503 373.75552368]
[225.46815491 375.46615601]
[210.54110718 373.98849487]
[196.26359558 369.38928223]
[183.28071594 361.87634277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 89]
[13 88]
[14 87]
[15 86]
[16 85]
[17 84]
[19 83]
[20 82]
[21 81]
[22 80]
[31 56]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[39 49]
[40 48]
[41 47]
[59 68]
[60 67]
[61 66]
[91 123]
[92 122]
[93 121]
[94 120]
[96 118]
[97 117]
[98 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
