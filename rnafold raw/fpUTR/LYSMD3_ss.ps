%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGACGUUGGCGGCAGAGGCGGAGGCGGACGGGGUCAGCCCAAAGCAGAGGCUCGGCCAUGAACUUACCCGGGACAGCGGCGGCGGCGGACCUUUUGGCCAUCUUCUCGCAGAGUGCUCCCUGCUAACGGGGACAGAUUUUAACAUU\
) } def
/len { sequence length } bind def

/coor [
[76.23994446 311.38278198]
[77.57635498 296.36685181]
[82.46813965 282.10733032]
[90.63089752 269.43322754]
[101.59004974 259.08142090]
[114.70845032 251.65370178]
[110.64826202 237.21365356]
[106.58807373 222.77360535]
[102.52787781 208.33357239]
[98.46768951 193.89352417]
[94.40750122 179.45347595]
[90.34730530 165.01344299]
[86.28711700 150.57339478]
[82.22692871 136.13334656]
[73.27458954 114.79221344]
[79.28548431 97.86647034]
[91.58620453 92.75657654]
[84.59382629 79.48606110]
[77.60144806 66.21554565]
[70.60906982 52.94502640]
[57.33079910 44.34280777]
[58.24306870 29.47616577]
[51.25069046 16.20564842]
[37.97241974 7.60343075]
[38.88469315 -7.26321077]
[31.89231110 -20.53372765]
[24.89993095 -33.80424500]
[11.62166309 -42.40646362]
[12.53393364 -57.27310562]
[5.54155302 -70.54362488]
[-1.27402115 -76.72887421]
[-1.45501006 -84.16844940]
[-8.16605377 -97.58343506]
[-14.87709808 -110.99842834]
[-21.58814240 -124.41341400]
[-28.29918671 -137.82839966]
[-35.01023102 -151.24339294]
[-48.10418701 -160.12364197]
[-46.87868881 -174.96774292]
[-53.58973312 -188.38273621]
[-60.30077744 -201.79771423]
[-74.06620789 -203.04656982]
[-85.31770325 -210.88645935]
[-91.16352844 -223.17153931]
[-90.16632080 -236.63121033]
[-82.69493866 -247.74063110]
[-89.12165833 -261.29412842]
[-102.02548218 -270.44845581]
[-100.48729706 -285.26342773]
[-115.10121918 -290.65518188]
[-121.42575836 -304.49191284]
[-116.19547272 -318.39083862]
[-122.76472473 -331.87582397]
[-129.47576904 -345.29080200]
[-136.18681335 -358.70578003]
[-142.89785767 -372.12078857]
[-149.60890198 -385.53576660]
[-164.86943054 -385.25439453]
[-178.73718262 -391.62997437]
[-188.45870972 -403.39666748]
[-192.10380554 -418.21813965]
[-188.94873047 -433.15158081]
[-179.61991882 -445.23199463]
[-165.96960449 -452.06076050]
[-150.70809937 -452.28201294]
[-136.86555481 -445.85186768]
[-127.19043732 -434.04699707]
[-123.60373688 -419.21130371]
[-126.81760406 -404.29037476]
[-136.19390869 -392.24682617]
[-129.48286438 -378.83181763]
[-122.77182770 -365.41683960]
[-116.06078339 -352.00186157]
[-109.34973907 -338.58685303]
[-103.50472260 -333.98080444]
[-102.64198303 -324.81756592]
[-88.57051086 -320.07104492]
[-81.85982513 -306.41741943]
[-86.93380737 -291.69015503]
[-74.48966217 -283.50524902]
[-75.56816864 -267.72085571]
[-69.14144135 -254.16735840]
[-52.94716644 -251.67642212]
[-41.29461670 -239.92324829]
[-38.89535522 -223.38006592]
[-46.88578796 -208.50875854]
[-40.17474365 -195.09378052]
[-33.46369934 -181.67878723]
[-20.84976196 -173.75807190]
[-21.59524345 -157.95443726]
[-14.88419914 -144.53944397]
[-8.17315483 -131.12445068]
[-1.46211088 -117.70947266]
[5.24893332 -104.29447937]
[11.95997715 -90.87949371]
[18.81207085 -77.53600311]
[25.80445099 -64.26548767]
[38.58257675 -56.61246109]
[38.17044830 -40.79662323]
[45.16282654 -27.52610779]
[52.15520859 -14.25559044]
[64.93333435 -6.60256863]
[64.52120972 9.21326923]
[71.51358795 22.48378563]
[84.29170990 30.13680840]
[83.87958527 45.95264435]
[90.87196350 59.22316360]
[97.86434174 72.49368286]
[104.85672760 85.76419830]
[117.31777954 94.11418152]
[132.25030518 95.53524780]
[147.18284607 96.95632172]
[163.52355957 92.43774414]
[172.38909912 106.88898468]
[160.95684814 119.40856934]
[145.76177979 111.88885498]
[130.82923889 110.46778107]
[115.89670563 109.04671478]
[111.08927155 114.80332184]
[116.25260925 128.88664246]
[101.47440338 126.31654358]
[96.66696930 132.07316589]
[100.72715759 146.51319885]
[104.78735352 160.95324707]
[108.84754181 175.39329529]
[112.90773010 189.83332825]
[116.96792603 204.27337646]
[121.02811432 218.71342468]
[125.08830261 233.15345764]
[129.14849854 247.59350586]
[144.21554565 247.09614563]
[158.96365356 250.21972656]
[172.53538513 256.78262329]
[184.14170837 266.40325928]
[193.10781860 278.52233887]
[198.91246033 292.43527222]
[201.21813965 307.33316040]
[199.89083862 322.34988403]
[195.00770569 336.61236572]
[186.85263062 349.29141235]
[175.89974976 359.64990234]
[162.78585815 367.08554077]
[148.27336121 371.16610718]
[133.20600891 371.65432739]
[118.45980072 368.52182007]
[104.89204407 361.95071411]
[93.29157257 352.32302856]
[84.33280182 340.19848633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 130]
[7 129]
[8 128]
[9 127]
[10 126]
[11 125]
[12 124]
[13 123]
[14 122]
[17 109]
[18 108]
[19 107]
[20 106]
[22 104]
[23 103]
[25 101]
[26 100]
[27 99]
[29 97]
[30 96]
[32 95]
[33 94]
[34 93]
[35 92]
[36 91]
[37 90]
[39 88]
[40 87]
[41 86]
[46 82]
[47 81]
[49 79]
[52 76]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
