%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCCGCCCUCUCCCCGCCUCCUUUUCGGGCGUCCCGAGGCCGCUCCCCAACCGACAACCAAGACCCCGCAGGCCACGCAGCCCUGGAGCCGAGGCCCCCCGACGGCGGAGGCGCCCGCGGGUCCCCUACAGCCAAGGUCCCUGAGUGCCAGAGGUGGUGGUGUUGCUUAUCUUCUGGAACCCC\
) } def
/len { sequence length } bind def

/coor [
[-118.01671600 413.57220459]
[-126.61595917 416.63507080]
[-135.66874695 417.71212769]
[-144.72314453 416.75485229]
[-153.32827759 413.81619263]
[-161.05682373 409.04760742]
[-172.27154541 419.00903320]
[-177.45092773 433.95843506]
[-192.10475159 436.62576294]
[-203.31947327 446.58718872]
[-214.53421021 456.54861450]
[-225.74893188 466.51000977]
[-222.77066040 481.51260376]
[-227.66928101 495.89660645]
[-239.03445435 505.83139038]
[-253.74797058 508.72415161]
[-267.83901978 503.89630127]
[-279.05374146 513.85772705]
[-290.26846313 523.81915283]
[-301.48318481 533.78057861]
[-312.69793701 543.74194336]
[-312.07693481 559.36724854]
[-321.68582153 571.70428467]
[-336.98748779 574.92803955]
[-350.75701904 567.51629639]
[-356.49282837 552.96862793]
[-351.48666382 538.15405273]
[-338.10226440 530.06750488]
[-322.65933228 532.52722168]
[-311.44461060 522.56579590]
[-300.22988892 512.60443115]
[-289.01516724 502.64297485]
[-277.80044556 492.68157959]
[-280.93243408 478.11941528]
[-276.32431030 463.84982300]
[-265.11831665 453.73590088]
[-250.25688171 450.56814575]
[-235.71035767 455.29528809]
[-224.49562073 445.33386230]
[-213.28089905 435.37246704]
[-202.06617737 425.41104126]
[-197.68894958 411.17413330]
[-182.23297119 407.79431152]
[-171.01823425 397.83288574]
[-176.95013428 377.44189453]
[-171.78984070 356.76831055]
[-156.87136841 341.45425415]
[-136.20196533 335.71652222]
[-115.38582611 341.18560791]
[-105.61523438 329.80422974]
[-95.84465027 318.42285156]
[-99.45915222 303.99810791]
[-93.81998444 290.04589844]
[-80.89544678 281.99545288]
[-65.53121185 283.11193848]
[-55.76062775 271.73056030]
[-53.34117126 257.03375244]
[-38.48138046 251.60264587]
[-28.71079254 240.22126770]
[-26.29133797 225.52447510]
[-11.43154526 220.09335327]
[-1.66095841 208.71197510]
[8.10962868 197.33061218]
[10.52908421 182.63381958]
[25.38887596 177.20269775]
[35.15946198 165.82131958]
[44.93004990 154.43995667]
[54.60417175 142.97647095]
[64.18114471 131.43170166]
[73.75811005 119.88693237]
[83.33507538 108.34217072]
[85.35973358 88.46856689]
[104.20599365 81.84452820]
[113.18593597 69.82951355]
[122.16587830 57.81449890]
[124.80538177 49.04636383]
[131.40034485 45.67409897]
[140.58193970 33.81246567]
[142.91064453 18.16357613]
[156.81954956 12.83520508]
[166.00114441 0.97356915]
[175.18272400 -10.88806725]
[176.97084045 -30.95268822]
[195.13710022 -37.53939056]
[203.91282654 -49.70436096]
[212.68856812 -61.86932755]
[214.48741150 -77.58793640]
[228.20841980 -83.38303375]
[230.69946289 -92.19449615]
[237.23652649 -95.67766571]
[246.21647644 -107.69268036]
[248.28053284 -123.37866974]
[262.09747314 -128.94119263]
[270.97561646 -141.03161621]
[279.75137329 -153.19657898]
[288.52709961 -165.36155701]
[283.84237671 -180.03668213]
[288.64102173 -194.48751831]
[300.88388062 -203.23829651]
[315.75396729 -203.10360718]
[324.52972412 -215.26856995]
[333.30545044 -227.43354797]
[342.08117676 -239.59851074]
[339.75915527 -255.00129700]
[348.83227539 -267.21328735]
[363.53079224 -269.33209229]
[372.30654907 -281.49703979]
[381.08227539 -293.66201782]
[389.85800171 -305.82699585]
[390.97787476 -322.18786621]
[405.82369995 -329.15444946]
[419.12338257 -319.56015015]
[417.19534302 -303.27474976]
[402.02297974 -297.05123901]
[393.24725342 -284.88629150]
[384.47149658 -272.72131348]
[375.69577026 -260.55633545]
[378.32159424 -245.93989563]
[369.59503174 -233.47787476]
[354.24615479 -230.82278442]
[345.47042847 -218.65780640]
[336.69467163 -206.49284363]
[327.91894531 -194.32786560]
[332.73730469 -180.25941467]
[328.29513550 -165.88127136]
[316.09570312 -156.76931763]
[300.69207764 -156.58581543]
[291.91632080 -144.42085266]
[283.14059448 -132.25587463]
[281.77413940 -124.97587585]
[274.11248779 -119.96125031]
[272.69073486 -105.13465881]
[258.23147583 -98.71273804]
[249.25154114 -86.69772339]
[240.37339783 -74.60729980]
[239.20225525 -59.75880432]
[224.85353088 -53.09359360]
[216.07780457 -40.92862320]
[207.30206299 -28.76365471]
[209.83836365 -18.83759880]
[206.40937805 -8.95051956]
[197.92288208 -2.45887709]
[187.04435730 -1.70647717]
[177.86277771 10.15515900]
[168.68118286 22.01679420]
[167.00921631 36.81726074]
[152.44357300 42.99405289]
[143.26199341 54.85569000]
[134.18089294 66.79444122]
[125.20095062 78.80945587]
[116.22100830 90.82447815]
[118.61985779 99.21743011]
[116.93371582 107.78207397]
[111.53251648 114.63941193]
[103.60121155 118.28504181]
[94.87984467 117.91913605]
[85.30287933 129.46389771]
[75.72590637 141.00866699]
[66.14894104 152.55343628]
[63.06872559 161.17663574]
[56.31142044 164.21054077]
[46.54083633 175.59191895]
[36.77024841 186.97328186]
[33.65193558 202.48414612]
[19.49100113 207.10119629]
[9.72041321 218.48257446]
[-0.05017386 229.86393738]
[-3.16848683 245.37480164]
[-17.32942200 249.99185181]
[-27.10000801 261.37322998]
[-30.21832085 276.88409424]
[-44.37925720 281.50112915]
[-54.14984131 292.88250732]
[-50.71967316 307.90051270]
[-56.72015762 321.89505005]
[-69.65753174 329.58193970]
[-84.46327972 328.19345093]
[-94.23386383 339.57479858]
[-104.00444794 350.95617676]
[-99.09472656 358.76339722]
[-96.04362488 367.45431519]
[-94.99832916 376.59387207]
[-96.00575256 385.72583008]
[-99.01048279 394.39544678]
[-103.85776520 402.17227173]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 44]
[7 43]
[9 41]
[10 40]
[11 39]
[12 38]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[49 179]
[50 178]
[51 177]
[55 173]
[56 172]
[58 170]
[59 169]
[61 167]
[62 166]
[63 165]
[65 163]
[66 162]
[67 161]
[68 159]
[69 158]
[70 157]
[71 156]
[73 151]
[74 150]
[75 149]
[77 148]
[78 147]
[80 145]
[81 144]
[82 143]
[84 139]
[85 138]
[86 137]
[88 135]
[90 134]
[91 133]
[93 131]
[94 129]
[95 128]
[96 127]
[100 123]
[101 122]
[102 121]
[103 120]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
