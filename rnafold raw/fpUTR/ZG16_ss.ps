%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCUUGGACCUGGUAUAAAACAUCUGGAAGUUUCCAGGGGGCUGCUUUGCAUCUGAAACUGUCAGCCCCAGA\
) } def
/len { sequence length } bind def

/coor [
[96.42539215 117.29986572]
[88.12451935 129.79368591]
[79.82364655 142.28750610]
[84.41205597 157.23677063]
[78.27021027 171.61770630]
[64.29809570 178.64010620]
[49.09291458 174.98817444]
[39.83409500 162.38626099]
[40.89336395 146.78459167]
[51.77056885 135.54980469]
[67.32982635 133.98663330]
[75.63069916 121.49280548]
[83.93157196 108.99899292]
[75.11642456 121.13542938]
[62.02335358 128.45469666]
[47.06764984 129.60659790]
[33.00818253 124.37864685]
[22.43850517 113.73525238]
[17.30840302 99.63978577]
[18.56422424 84.69245148]
[25.97430992 71.65057373]
[38.17172241 62.91998291]
[52.90640259 60.11122131]
[67.46025085 63.74241257]
[79.14851379 73.14371490]
[85.81432343 86.57790375]
[79.71327209 72.87471771]
[73.61222839 59.17153549]
[67.51117706 45.46835327]
[61.41012573 31.76517296]
[47.83211899 22.56899071]
[49.27696609 6.23361731]
[64.25833130 -0.43651697]
[77.36466980 9.42025089]
[75.11330414 25.66412354]
[81.21435547 39.36730576]
[87.31540680 53.07048798]
[93.41645813 66.77366638]
[99.51750946 80.47685242]
[112.34796906 88.24725342]
[127.31837463 87.30539703]
[142.28877258 86.36354065]
[157.25917053 85.42168427]
[172.22956848 84.47982788]
[187.19998169 83.53796387]
[202.17037964 82.59610748]
[206.23550415 79.60029602]
[210.61695862 78.39595032]
[214.63967896 78.83218384]
[217.76855469 80.53088379]
[219.67686462 82.96282196]
[234.59469604 84.53074646]
[249.51252747 86.09867096]
[259.79501343 74.47756195]
[274.95169067 71.15265656]
[289.15447998 77.40245056]
[296.94216919 90.82376862]
[295.32019043 106.25583649]
[284.91223145 117.76471710]
[269.72039795 120.92500305]
[255.58622742 114.52150726]
[247.94459534 101.01650238]
[233.02677917 99.44857025]
[218.10894775 97.88064575]
[203.11222839 97.56651306]
[188.14183044 98.50836945]
[173.17143250 99.45022583]
[158.20103455 100.39208221]
[143.23063660 101.33393860]
[128.26022339 102.27580261]
[113.28982544 103.21765900]
[112.37590027 107.50192261]
[110.05124664 111.49598694]
[106.42054749 114.73023987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[51 64]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
