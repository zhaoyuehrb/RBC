%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUAACCAAACAAAGAGAAGCAGAGUGGAUCCUGUGCUAAUAUUGGGAAAACCAGGCAACAGGACUCAUUUGGGGCCUUUAUUGUGAAAAC\
) } def
/len { sequence length } bind def

/coor [
[84.47465515 352.98852539]
[69.33965302 353.44735718]
[54.87646866 348.96463013]
[42.65394592 340.02658081]
[33.99790192 327.60275269]
[29.84727478 313.04077148]
[30.65229797 297.92022705]
[36.32564545 283.88128662]
[46.25191498 272.44680786]
[59.35437775 264.85705566]
[74.21178436 261.93536377]
[76.23245239 247.07208252]
[78.25312805 232.20881653]
[80.27379608 217.34553528]
[82.04315186 202.45025635]
[83.56067657 187.52722168]
[85.07820129 172.60418701]
[86.59572601 157.68113708]
[75.38867188 147.90669250]
[72.04664612 133.23374939]
[78.05566406 119.24285889]
[91.30387115 111.38212585]
[85.74954987 98.55087280]
[93.77308655 87.10034943]
[95.29061127 72.17730713]
[96.80813599 57.25427246]
[98.32566071 42.33123016]
[99.84318542 27.40819168]
[101.36071014 12.48515129]
[95.05924988 -2.02698660]
[104.04444885 -13.90618896]
[105.56197357 -28.82922935]
[107.07949829 -43.75226974]
[108.59702301 -58.67530823]
[110.11454773 -73.59835052]
[111.63207245 -88.52138519]
[112.89733887 -103.46793365]
[113.90998840 -118.43370819]
[114.92263031 -133.39949036]
[112.75954437 -137.09211731]
[111.87934113 -140.90766907]
[112.17488861 -144.45251465]
[113.42879486 -147.40249634]
[115.34338379 -149.53132629]
[117.57723999 -150.72785950]
[121.09123993 -165.31045532]
[124.60523224 -179.89303589]
[117.49462891 -194.27423096]
[124.43509674 -208.73831177]
[140.10250854 -212.18966675]
[152.47816467 -201.98071289]
[152.06851196 -185.94288635]
[139.18782043 -176.37904358]
[135.67382812 -161.79644775]
[132.15982056 -147.21386719]
[129.88841248 -132.38684082]
[128.87576294 -117.42106628]
[127.86312103 -102.45528412]
[130.60911560 -95.42523193]
[126.55511475 -87.00386047]
[125.03759003 -72.08082581]
[123.52006531 -57.15778351]
[122.00254059 -42.23474503]
[120.48501587 -27.31170464]
[118.96749115 -12.38866425]
[125.37749481 1.05607760]
[116.28375244 14.00267601]
[114.76622772 28.92571640]
[113.24870300 43.84875488]
[111.73117828 58.77179718]
[110.21365356 73.69483185]
[108.69612885 88.61787415]
[114.25045013 101.44912720]
[106.22691345 112.89965057]
[117.62157440 123.26631927]
[120.69123840 138.18041992]
[114.46398926 151.88026428]
[101.51876068 159.19866943]
[100.00123596 174.12170410]
[98.48371124 189.04475403]
[96.96618652 203.96778870]
[99.24199677 213.03283691]
[95.13706970 219.36621094]
[93.11640167 234.22949219]
[91.09572601 249.09275818]
[89.07505798 263.95602417]
[102.61322021 270.73812866]
[113.21392822 281.55032349]
[119.72729492 295.21981812]
[121.44680023 310.26382446]
[118.18591309 325.05047607]
[110.29836273 337.97586060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 86]
[12 85]
[13 84]
[14 83]
[15 81]
[16 80]
[17 79]
[18 78]
[22 74]
[24 72]
[25 71]
[26 70]
[27 69]
[28 68]
[29 67]
[31 65]
[32 64]
[33 63]
[34 62]
[35 61]
[36 60]
[37 58]
[38 57]
[39 56]
[45 55]
[46 54]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
