%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCUCUCCAGGAAUCCGCGGAGGGAGCGCAGGCUCGAAGAGCUCCUGGACGCAGAGGCCCUGCCCUUGCCAGACGGCGCAGAC\
) } def
/len { sequence length } bind def

/coor [
[141.71166992 179.10723877]
[135.50247192 172.02677917]
[132.04418945 163.21978760]
[131.77409363 153.71771240]
[134.75411987 144.64436340]
[124.05220032 134.13394165]
[113.35028076 123.62351990]
[102.64836121 113.11310577]
[91.21592712 103.40230560]
[79.11259460 94.54177094]
[67.00925446 85.68122864]
[54.90591431 76.82068634]
[42.80257797 67.96014404]
[30.69923973 59.09959793]
[18.59590149 50.23905563]
[13.71418762 49.93309402]
[9.68736076 48.13482285]
[6.90689135 45.34791183]
[5.53776407 42.15471268]
[5.51359272 39.12684631]
[-5.18832731 28.61642647]
[-19.53919029 33.69718552]
[-34.61147308 32.04998016]
[-47.42149734 24.05476761]
[-55.45683289 11.34278965]
[-57.16898727 -3.53598642]
[-52.27157211 -17.62430954]
[-62.97349548 -28.13472748]
[-73.67541504 -38.64514542]
[-84.37733459 -49.15556717]
[-100.38204193 -52.73068237]
[-105.02939606 -68.45754242]
[-93.53859711 -80.15769958]
[-77.73040009 -75.79503632]
[-73.86691284 -59.85748672]
[-63.16499329 -49.34706879]
[-52.46307373 -38.83664703]
[-41.76115417 -28.32622910]
[-27.76354599 -33.47719574]
[-12.85628510 -32.03394318]
[-0.00130646 -24.22942352]
[8.22387791 -11.56583309]
[10.14293194 3.47425389]
[5.32209158 17.91450500]
[16.02401161 28.42492485]
[27.45644188 38.13571930]
[39.55978012 46.99626160]
[51.66312027 55.85680389]
[63.76645660 64.71734619]
[75.86979675 73.57788849]
[87.97313690 82.43843079]
[100.07646942 91.29897308]
[103.37161255 90.97239685]
[106.85970306 91.95568848]
[110.00863647 94.32158661]
[112.26859283 97.92658234]
[113.15878296 102.41118622]
[123.86070251 112.92160034]
[134.56262207 123.43202209]
[145.26454163 133.94244385]
[166.72154236 131.65664673]
[183.08186340 145.31251526]
[184.62884521 166.29841614]
[197.04417419 174.71621704]
[209.45951843 183.13401794]
[221.87484741 191.55183411]
[226.76441956 191.68135071]
[230.85354614 193.33306885]
[233.73281860 196.01777649]
[235.21633911 199.15946960]
[235.34980774 202.18449402]
[246.42419434 212.30169678]
[257.49859619 222.41889954]
[273.62194824 225.41387939]
[278.83404541 240.96270752]
[267.77313232 253.07008362]
[251.81774902 249.28097534]
[247.38139343 233.49328613]
[236.30699158 223.37608337]
[225.23260498 213.25888062]
[213.45704651 203.96716309]
[201.04170227 195.54936218]
[188.62637329 187.13154602]
[176.21104431 178.71374512]
[168.24864197 183.40232849]
[159.12493896 185.12309265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 60]
[6 59]
[7 58]
[8 57]
[9 52]
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[15 46]
[20 45]
[21 44]
[27 38]
[28 37]
[29 36]
[30 35]
[63 84]
[64 83]
[65 82]
[66 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
