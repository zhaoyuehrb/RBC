%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGUGACGUCACCCCCAGCGGGGAUAAAGCGCCCCCGCCCGGGUCGGGGCCAGGACGCCGCCCGGCGCGGAGUGGCUGCCCUGCGCGGGGACACUUAGAGCCCGGUGGGCGGGAGGAAGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[107.29051208 409.28817749]
[106.53684998 394.30712891]
[98.16984558 381.98468018]
[105.20399475 367.81317139]
[94.01820374 358.04519653]
[93.04047394 342.86300659]
[103.36189270 331.19653320]
[94.99488831 318.87411499]
[102.02903748 304.70260620]
[101.27536774 289.72155762]
[97.75772858 283.12561035]
[100.69580841 274.35549927]
[100.31885529 259.36022949]
[99.75350952 244.37089539]
[98.99983978 229.38984680]
[98.24617767 214.40878296]
[97.49250793 199.42773438]
[89.12551117 187.10528564]
[96.15966034 172.93379211]
[95.40599060 157.95274353]
[94.65232849 142.97167969]
[93.89866638 127.99063110]
[80.74694824 121.21371460]
[72.73033142 108.77877045]
[71.98696136 94.00238800]
[78.71511841 80.82566071]
[91.12028503 72.76303864]
[90.36661530 57.78198242]
[89.61295319 42.80092621]
[81.19204712 29.40694046]
[88.28009796 16.30698776]
[79.85919189 2.91300201]
[86.94724274 -10.18695068]
[86.19358063 -25.16800499]
[85.43991852 -40.14905930]
[84.68624878 -55.13011169]
[83.93258667 -70.11116791]
[83.17892456 -85.09222412]
[74.75801086 -98.48620605]
[81.84606934 -111.58615875]
[81.09240723 -126.56721497]
[80.33873749 -141.54826355]
[79.58507538 -156.52932739]
[76.23213196 -162.43760681]
[76.42419434 -168.25924683]
[79.18917847 -172.27824402]
[71.45187378 -186.07843018]
[79.18917847 -198.80569458]
[79.18917847 -213.80569458]
[79.18917847 -228.80569458]
[79.18917847 -243.80569458]
[79.18917847 -258.80569458]
[64.25666046 -268.92483521]
[58.35697174 -285.80606079]
[63.64289474 -302.72622681]
[77.85110474 -313.06362915]
[77.09744263 -328.04467773]
[76.34377289 -343.02572632]
[75.59011078 -358.00680542]
[66.23775482 -371.47772217]
[73.47154999 -386.19519043]
[89.84999084 -387.01916504]
[98.52433014 -373.10198975]
[90.57116699 -358.76046753]
[91.32482910 -343.77941895]
[92.07849121 -328.79833984]
[92.83216095 -313.81729126]
[103.97772217 -308.69760132]
[111.90170288 -299.24078369]
[115.02822876 -287.23065186]
[112.69412994 -274.96780396]
[105.28845215 -264.82879639]
[94.18917847 -258.80569458]
[94.18917847 -243.80569458]
[94.18917847 -228.80569458]
[94.18917847 -213.80569458]
[94.18917847 -198.80569458]
[101.92647552 -186.07843018]
[94.18917847 -172.27824402]
[94.56613159 -157.28298950]
[95.31979370 -142.30194092]
[96.07345581 -127.32087708]
[96.82712555 -112.33982849]
[105.19412231 -100.01738739]
[98.15997314 -85.84588623]
[98.91364288 -70.86483002]
[99.66730499 -55.88377762]
[100.42096710 -40.90272522]
[101.17463684 -25.92166901]
[101.92829895 -10.94061470]
[110.29530334 1.38182640]
[103.26115417 15.55332375]
[111.62815094 27.87576485]
[104.59400940 42.04726410]
[105.34767151 57.02831650]
[106.10133362 72.00936890]
[119.25305176 78.78628540]
[127.26966858 91.22122955]
[128.01303101 105.99761200]
[121.28488159 119.17433929]
[108.87971497 127.23696136]
[109.63338470 142.21801758]
[110.38704681 157.19906616]
[111.14070892 172.18013000]
[119.56162262 185.57411194]
[112.47356415 198.67407227]
[113.22723389 213.65512085]
[113.98089600 228.63616943]
[114.73455811 243.61723328]
[118.32491302 252.14109802]
[115.31412506 258.98327637]
[115.69107056 273.97854614]
[116.25642395 288.96789551]
[117.01009369 303.94894409]
[125.43099976 317.34292603]
[118.34294128 330.44287109]
[129.78311157 341.01455688]
[130.33403015 356.21820068]
[120.18505096 367.05950928]
[128.60595703 380.45349121]
[121.51789856 393.55346680]
[122.27156830 408.53451538]
[129.10609436 424.04983521]
[116.08909607 434.91235352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[4 119]
[7 116]
[9 114]
[10 113]
[12 112]
[13 111]
[14 109]
[15 108]
[16 107]
[17 106]
[19 104]
[20 103]
[21 102]
[22 101]
[27 96]
[28 95]
[29 94]
[31 92]
[33 90]
[34 89]
[35 88]
[36 87]
[37 86]
[38 85]
[40 83]
[41 82]
[42 81]
[43 80]
[46 79]
[48 77]
[49 76]
[50 75]
[51 74]
[52 73]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
