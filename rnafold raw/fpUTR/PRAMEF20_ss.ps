%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAAAGUCUUCAAGCCUGGAGUUUCUGCUUGGUUUUUCCUGAGGUCUGAGCACCCUGCAAACUGAGUCCAGAUCUGGUAAGUCCCUAAUCUCUGAAG\
) } def
/len { sequence length } bind def

/coor [
[91.36570740 214.69331360]
[87.12696838 229.45571899]
[76.06376648 240.10942078]
[61.15205765 243.78860474]
[46.40301132 239.50361633]
[35.78404617 228.40707397]
[32.15161514 213.48390198]
[36.48281860 198.74836731]
[47.61258698 188.16423035]
[62.54706955 184.57859802]
[66.73193359 170.17419434]
[70.91680145 155.76977539]
[75.10166931 141.36537170]
[79.28653717 126.96096802]
[70.46975708 114.82571411]
[55.47716141 114.35455322]
[40.48456192 113.88339233]
[25.49196243 113.41223145]
[19.22762108 116.31991577]
[13.35918045 115.59680939]
[9.58109856 112.41120911]
[-5.35233068 110.99958038]
[-20.28576088 109.58795929]
[-35.21918869 108.17633057]
[-49.89652634 115.49124146]
[-63.41884613 106.21337128]
[-61.87555313 89.88700104]
[-46.85424805 83.30730438]
[-33.80756378 93.24290466]
[-18.87413597 94.65452576]
[-3.94070625 96.06615448]
[10.99272346 97.47777557]
[25.96312332 98.41963196]
[40.95572281 98.89079285]
[55.94832230 99.36195374]
[70.94091797 99.83311462]
[72.89968109 92.22902679]
[76.74406433 85.65294647]
[82.07144165 80.54214478]
[88.38721466 77.19532776]
[95.14890289 75.75646973]
[101.81192017 76.21187592]
[107.87315369 78.40021515]
[112.90896606 82.03394318]
[122.10256958 70.18161774]
[131.29617310 58.32929611]
[140.48977661 46.47697067]
[149.68339539 34.62464523]
[158.87699890 22.77231979]
[168.07060242 10.91999531]
[170.93255615 2.05054998]
[177.74386597 -1.15421498]
[180.88299561 -9.92938805]
[187.79162598 -12.91862297]
[197.71130371 -24.17028809]
[201.03367615 -39.63871765]
[215.25421143 -44.06881714]
[211.73797607 -59.18224716]
[217.80772400 -73.46292114]
[231.12951660 -81.41963959]
[246.58085632 -79.99287415]
[258.22039795 -69.73124695]
[261.57247925 -54.58056641]
[255.34815979 -40.36657333]
[241.94082642 -32.55484009]
[226.50587463 -34.14913940]
[223.89302063 -19.48550415]
[208.96296692 -14.25061035]
[199.04328918 -2.99894452]
[189.30155945 8.40714455]
[179.92292786 20.11360168]
[170.72932434 31.96592522]
[161.53570557 43.81825256]
[152.34210205 55.67057800]
[143.14849854 67.52290344]
[133.95489502 79.37522888]
[124.76129150 91.22755432]
[128.03343201 105.86630249]
[141.39852905 112.67616272]
[156.34997559 107.55461884]
[170.50675964 114.58032990]
[175.46995544 129.58506775]
[168.29495239 143.66679382]
[153.23857117 148.47106934]
[139.23348999 141.14758301]
[134.58868408 126.04125977]
[121.22357941 119.23139954]
[114.34042358 122.21001434]
[127.58120728 129.25852966]
[130.32611084 144.00524902]
[120.50822449 155.34584045]
[105.52043152 154.74082947]
[96.64857483 142.64578247]
[100.57410431 128.16723633]
[93.69094086 131.14584351]
[89.50607300 145.55024719]
[85.32120514 159.95465088]
[81.13634491 174.35905457]
[76.95147705 188.76345825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 99]
[11 98]
[12 97]
[13 96]
[14 95]
[15 36]
[16 35]
[17 34]
[18 33]
[21 32]
[22 31]
[23 30]
[24 29]
[44 77]
[45 76]
[46 75]
[47 74]
[48 73]
[49 72]
[50 71]
[52 70]
[54 69]
[55 68]
[57 66]
[78 87]
[79 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
