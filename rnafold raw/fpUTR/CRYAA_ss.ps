%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGAGGGCUCGGCCUUGGCUCCACACUGCGCUGCCCAGAGGCCCCGCUGACUCCUGCCAGCCUCCAGGUCCCCGUGGUACCAAAGCUGAAC\
) } def
/len { sequence length } bind def

/coor [
[77.24806976 108.59026337]
[75.74871826 98.17839813]
[61.86641312 92.49671173]
[47.98410416 86.81502533]
[34.10179520 81.13334656]
[20.21948814 75.45166016]
[6.15320683 70.24208069]
[-8.08099937 65.51055145]
[-22.31520462 60.77902222]
[-36.31647873 67.60559845]
[-50.68458557 62.60438156]
[-57.10639572 49.21423721]
[-71.34059906 44.48270416]
[-85.57480621 39.75117493]
[-99.80901337 35.01964569]
[-114.04322052 30.28811646]
[-128.27742004 25.55658531]
[-142.66331482 21.30850220]
[-157.18446350 17.54871559]
[-171.70562744 13.78892708]
[-181.15614319 25.73076439]
[-194.64982605 32.79055023]
[-209.84880066 33.74513626]
[-224.11975098 28.42912865]
[-234.99014282 17.76356316]
[-240.57662964 3.59631014]
[-239.91131592 -11.61806583]
[-233.10946655 -25.24358368]
[-221.34954834 -34.91954041]
[-206.66902161 -38.96951294]
[-191.61140442 -36.69182587]
[-178.78549194 -28.48110199]
[-170.41346741 -15.75989342]
[-167.94584656 -0.73222995]
[-153.42468262 3.02755809]
[-138.90351868 6.78734589]
[-134.24601746 5.06446028]
[-128.45204163 6.40115261]
[-123.54589844 11.32237911]
[-109.31169128 16.05390930]
[-95.07748413 20.78543854]
[-80.84327698 25.51696968]
[-66.60906982 30.24849892]
[-52.37486267 34.98003006]
[-39.21480560 28.09900856]
[-24.71189499 32.69468307]
[-17.58367538 46.54481506]
[-3.34946895 51.27634811]
[10.88473701 56.00787735]
[15.64793682 54.60334778]
[21.33844566 56.32814026]
[25.90117264 61.56935501]
[39.78348160 67.25103760]
[53.66578674 72.93271637]
[67.54809570 78.61440277]
[81.43040466 84.29608917]
[98.43486023 75.73081970]
[116.39864349 82.04095459]
[124.31114197 99.35879517]
[138.69703674 103.60688019]
[153.08291626 107.85496521]
[167.46881104 112.10304260]
[176.47273254 103.09654236]
[188.41130066 98.87691498]
[200.92991638 100.20967102]
[211.58822632 106.77171326]
[218.33583069 117.22679901]
[219.90661621 129.49711609]
[233.97290039 134.70669556]
[248.03918457 139.91627502]
[262.19143677 144.88754272]
[276.42565918 149.61906433]
[292.37142944 145.78973389]
[303.46286011 157.86917114]
[298.28997803 173.43109131]
[282.17422485 176.46673584]
[271.69412231 163.85327148]
[257.45993042 159.12174988]
[249.96598816 160.01799011]
[242.82960510 153.98255920]
[228.76332092 148.77297974]
[214.69703674 143.56340027]
[200.66496277 154.01031494]
[183.01669312 154.09931946]
[168.63014221 143.61241150]
[163.22071838 126.48893738]
[148.83483887 122.24085236]
[134.44894409 117.99276733]
[120.06305695 113.74468994]
[112.38175964 120.93167114]
[102.38391876 124.20247650]
[91.94005585 122.94515228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 56]
[3 55]
[4 54]
[5 53]
[6 52]
[7 49]
[8 48]
[9 47]
[12 44]
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[18 36]
[19 35]
[20 34]
[59 89]
[60 88]
[61 87]
[62 86]
[68 82]
[69 81]
[70 80]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
