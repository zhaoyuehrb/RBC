%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCCUGCCGCUCCCCGCGCUCGUAGCGCGGGCCUGGGGACUGGGGAUCCCGCCGCCGGGCCGCAGC\
) } def
/len { sequence length } bind def

/coor [
[92.22552490 119.97955322]
[82.23941803 131.17230225]
[72.25331879 142.36506653]
[62.26721573 153.55781555]
[52.28111649 164.75057983]
[51.75446320 180.78497314]
[38.80432510 190.25459290]
[23.36494064 185.89512634]
[17.28008080 171.05079651]
[25.21753120 157.10890198]
[41.08835983 154.76446533]
[51.07446289 143.57171631]
[61.06056213 132.37896729]
[71.04666138 121.18620300]
[81.03276825 109.99344635]
[77.33698273 93.00708771]
[87.82781982 77.02997589]
[75.57327271 68.37976837]
[63.31872177 59.72956085]
[51.06417084 51.07935715]
[38.80962372 42.42915344]
[26.55507660 33.77894974]
[10.12817669 29.58450890]
[9.61127663 12.63844395]
[25.75199127 7.45060635]
[35.20528030 21.52440071]
[47.45982742 30.17460442]
[59.71437836 38.82481003]
[71.96892548 47.47501373]
[84.22347260 56.12521744]
[96.47801971 64.77542114]
[111.38095856 66.47912598]
[125.27159119 60.81784058]
[139.16223145 55.15655136]
[153.05287170 49.49526215]
[166.94351196 43.83397675]
[180.83413696 38.17268753]
[194.72477722 32.51139832]
[208.48295593 26.53538322]
[222.10151672 20.24773407]
[228.85092163 13.59230137]
[236.48605347 13.99965191]
[243.53137207 7.65831184]
[251.14006042 8.41275024]
[265.27395630 3.38955641]
[279.40786743 -1.63363791]
[292.30767822 -12.63506985]
[306.45019531 -3.28489900]
[301.38046265 12.89330292]
[284.43106079 12.50027561]
[270.29714966 17.52346992]
[256.16323853 22.54666519]
[242.14733887 27.89028931]
[228.38917542 33.86630630]
[214.77059937 40.15395355]
[209.85691833 46.01202393]
[200.38606262 46.40203857]
[186.49543762 52.06332397]
[172.60479736 57.72461319]
[158.71415710 63.38590240]
[144.82351685 69.04718781]
[130.93287659 74.70847321]
[117.04224396 80.36976624]
[122.75319672 88.83516693]
[124.65445709 98.60561371]
[122.64089966 108.09002686]
[117.22900391 115.82215118]
[109.44404602 120.68711853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[32 63]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 55]
[40 54]
[42 53]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
