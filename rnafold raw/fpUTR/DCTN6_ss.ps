%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCCUGCCAGGCUCUCCAAUCGCAUGUGGAAUUAUCGCUCUACCCAGGCGGUGGUGUCGAUCUACGUUCCAAUUGGGGCCGUACC\
) } def
/len { sequence length } bind def

/coor [
[72.39274597 326.17456055]
[57.84925842 330.38949585]
[42.72531128 329.65130615]
[28.66143227 324.04006958]
[17.18316650 314.16442871]
[9.53559017 301.09564209]
[6.54825544 286.25131226]
[8.54520607 271.24160767]
[15.30982780 257.69470215]
[26.10834503 247.08006287]
[39.76941681 240.54905701]
[54.81118774 238.81016541]
[57.99966812 224.15295410]
[61.18814850 209.49575806]
[59.49476242 202.12437439]
[64.76087952 194.37667847]
[63.33167267 186.94955444]
[68.87097168 179.39476013]
[73.09695435 165.00236511]
[77.32294464 150.60997009]
[81.54893494 136.21757507]
[85.77492523 121.82517242]
[75.64328003 109.24345398]
[74.87654877 93.10771942]
[83.76953125 79.62199402]
[98.90296173 73.97140503]
[102.61256409 59.43734741]
[106.32215881 44.90328598]
[110.03175354 30.36922836]
[113.74135590 15.83516884]
[117.45095062 1.30110896]
[121.16054535 -13.23295021]
[119.62896729 -17.86657524]
[119.79399872 -22.26421165]
[121.33626556 -25.87791252]
[123.78000641 -28.33906746]
[126.57341003 -29.49599266]
[132.31365967 -43.35418701]
[138.05390930 -57.21237946]
[143.54589844 -71.17082214]
[141.11909485 -86.80480194]
[152.81628418 -96.02570343]
[158.05824280 -110.07994843]
[163.30021667 -124.13419342]
[168.54217529 -138.18844604]
[173.78413391 -152.24269104]
[168.45436096 -167.37454224]
[177.08367920 -180.89912415]
[193.05242920 -182.44154358]
[204.11073303 -170.81855774]
[201.77561951 -154.94636536]
[187.83837891 -147.00073242]
[182.59642029 -132.94647217]
[177.35446167 -118.89223480]
[172.11248779 -104.83798981]
[166.87052917 -90.78374481]
[169.67227173 -76.15502167]
[157.60014343 -65.92886353]
[158.22723389 -58.39152145]
[151.91210938 -51.47212601]
[146.17185974 -37.61393356]
[140.43159485 -23.75574112]
[135.69461060 -9.52335262]
[131.98501587 5.01070642]
[128.27540588 19.54476547]
[124.56581879 34.07882690]
[120.85621643 48.61288452]
[117.14662170 63.14694595]
[113.43701935 77.68100739]
[122.73361206 87.27703094]
[126.05077362 100.21946716]
[122.51602936 113.10418701]
[113.05908203 122.54222107]
[100.16731262 126.05116272]
[95.94132996 140.44355774]
[91.71533966 154.83595276]
[87.48934937 169.22834778]
[83.26336670 183.62074280]
[79.29493713 198.08627319]
[75.84535217 212.68423462]
[72.65686798 227.34143066]
[69.46839142 241.99864197]
[82.42849731 249.82897949]
[92.14197540 261.44479370]
[97.55516815 275.58609009]
[98.08089447 290.71890259]
[93.66213226 305.20178223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 82]
[13 81]
[14 80]
[16 79]
[18 78]
[19 77]
[20 76]
[21 75]
[22 74]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[31 64]
[32 63]
[37 62]
[38 61]
[39 60]
[40 58]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
