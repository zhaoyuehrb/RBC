%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAAAGGCAGAACCAGAGUAGAGAUUGACAGUGAGCUGAGCCAAUCAGGCUGUGAAUCUGCAGCAGUGAUCCCAGGUCCUCCAAUUAAUACUAAGAGAGUGGACCAGGGCCCCUGAGGAAGACAG\
) } def
/len { sequence length } bind def

/coor [
[27.13328552 209.16087341]
[15.83696461 199.29206848]
[7.86157179 186.58801270]
[3.88296938 172.12527466]
[4.23831844 157.12948608]
[8.89750481 142.87142944]
[17.46569443 130.55940247]
[29.21678734 121.23675537]
[43.15876007 115.69261932]
[28.44697952 112.76626587]
[13.73520088 109.83990479]
[-0.97657830 106.91355133]
[-15.68835735 103.98719788]
[-28.73298454 112.50045013]
[-43.61113358 109.32313538]
[-51.64682770 96.83460999]
[-66.35860443 93.90825653]
[-81.40308380 98.80461121]
[-92.37633514 88.73300934]
[-107.08811188 85.80665588]
[-121.79989624 82.88030243]
[-132.11911011 91.63420105]
[-145.40531921 92.79533386]
[-156.74945068 86.16115570]
[-162.09057617 74.36791229]
[-176.72610474 71.08139038]
[-191.36163330 67.79487610]
[-205.99716187 64.50835419]
[-220.63269043 61.22183609]
[-239.48178101 68.16877747]
[-253.25926208 54.69018173]
[-268.03842163 52.12575531]
[-282.81759644 49.56132507]
[-298.01757812 55.71704102]
[-310.78039551 45.41934967]
[-307.97674561 29.26163483]
[-292.49081421 23.86557007]
[-280.25317383 34.78216171]
[-265.47399902 37.34659195]
[-250.69483948 39.91101837]
[-242.79376221 33.23017502]
[-232.29389954 32.03289032]
[-222.69853210 36.96516037]
[-217.34617615 46.58630371]
[-202.71064758 49.87282181]
[-188.07511902 53.15933990]
[-173.43957520 56.44585800]
[-158.80404663 59.73237610]
[-145.05000305 50.13748932]
[-128.27218628 53.47441101]
[-118.87353516 68.16852570]
[-104.16175842 71.09487915]
[-89.44998169 74.02123260]
[-75.45778656 68.91557312]
[-63.43225479 79.19647980]
[-48.72047424 82.12283325]
[-36.51730728 73.66007233]
[-21.55578613 76.41823578]
[-12.76200294 89.27542114]
[1.94977653 92.20177460]
[16.66155624 95.12812805]
[31.37333488 98.05448151]
[46.08511353 100.98083496]
[50.71923447 98.45926666]
[56.53621674 98.22309875]
[62.37054825 100.78097534]
[77.00608063 97.49446106]
[91.64160919 94.20793915]
[98.27136993 89.46331024]
[106.67653656 91.02502441]
[115.47031403 78.16783905]
[130.43183899 75.40967560]
[142.63500977 83.87243652]
[157.34678650 80.94608307]
[172.05856323 78.01972961]
[184.08409119 67.73881531]
[198.07629395 72.84448242]
[212.78807068 69.91812134]
[227.49984741 66.99176788]
[242.21162415 64.06541443]
[256.92340088 61.13906097]
[268.94894409 50.85815048]
[282.94113159 55.96381378]
[297.61590576 52.85713959]
[306.09149170 39.78802109]
[320.98083496 36.66351318]
[333.38800049 44.82424545]
[348.02352905 41.53772736]
[362.65905762 38.25120926]
[374.34631348 26.74729347]
[390.07839966 31.37699890]
[393.67144775 47.37768173]
[381.42929077 58.28921127]
[365.94558716 52.88674164]
[351.31005859 56.17325974]
[336.67453003 59.45977783]
[328.94772339 72.14174652]
[314.15203857 75.68322754]
[300.90240479 67.49267578]
[295.00332642 72.07611847]
[285.86749268 70.67559052]
[274.89422607 80.74719238]
[259.84976196 75.85083771]
[245.13798523 78.77719116]
[230.42620850 81.70355225]
[215.71443176 84.62990570]
[201.00263977 87.55625916]
[190.02940369 97.62785339]
[174.98492432 92.73150635]
[160.27314758 95.65785980]
[145.56135559 98.58421326]
[137.52566528 111.07273865]
[122.64751434 114.25005341]
[109.60289001 105.73680115]
[94.92813110 108.84346771]
[80.29259491 112.12998962]
[65.65706635 115.41651154]
[79.72747040 120.61494446]
[91.70449829 129.64549255]
[100.57317352 141.74287415]
[105.58193970 155.88191223]
[106.30633545 170.86441040]
[102.68496704 185.42070007]
[95.02472687 198.31723022]
[83.97476959 208.46112061]
[70.47151184 214.99273682]
[55.65925217 217.35855103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[16 56]
[17 55]
[19 53]
[20 52]
[21 51]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[31 40]
[32 39]
[33 38]
[66 117]
[67 116]
[68 115]
[70 114]
[73 111]
[74 110]
[75 109]
[77 107]
[78 106]
[79 105]
[80 104]
[81 103]
[83 101]
[84 99]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
