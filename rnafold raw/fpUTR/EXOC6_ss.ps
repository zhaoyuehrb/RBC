%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGGACUGAGAGGAGCAGAAGACAGUGGGGUGGGAGUAGAGGGAGGGUGGGGAGAGCUGAGGAGCAGAGGGAAGCAACUGGGCCACCAGGACAGAAGACCUUGAAUCUCCAGGCUGAGCCGGCUGUACCGGAAGAGGAUGA\
) } def
/len { sequence length } bind def

/coor [
[97.48379517 202.06114197]
[82.55606079 200.59048462]
[76.16720581 187.01910400]
[84.54466248 174.57734680]
[86.20423889 159.66943359]
[87.86381531 144.76152039]
[89.52338409 129.85360718]
[82.05950165 129.11848450]
[73.45585632 141.40576172]
[64.85221100 153.69303894]
[69.07400513 168.74995422]
[62.58263397 182.97654724]
[48.44311523 189.65547180]
[33.33170319 185.63314819]
[24.38353729 172.80877686]
[25.82367516 157.23765564]
[36.97212219 146.27197266]
[52.56492615 145.08940125]
[61.16857529 132.80212402]
[69.77221680 120.51483917]
[66.89853668 103.07112122]
[72.54214478 88.02540588]
[83.73857117 78.86466980]
[96.45907593 76.89081573]
[99.06379700 62.11869812]
[101.66851807 47.34658051]
[104.27323914 32.57446289]
[106.87796783 17.80234909]
[101.65458679 2.86826348]
[111.48440552 -8.32208443]
[114.08912659 -23.09420013]
[108.86575317 -38.02828598]
[118.69557190 -49.21863174]
[113.47219086 -64.15271759]
[123.30201721 -75.34306335]
[125.90673828 -90.11518097]
[117.11094666 -102.97099304]
[119.96293640 -117.91490936]
[132.27319336 -126.22113037]
[127.04981232 -141.15521240]
[136.87963867 -152.34556580]
[139.48435974 -167.11767578]
[142.08908081 -181.88980103]
[144.69380188 -196.66191101]
[136.90048218 -215.19879150]
[149.79273987 -229.55033875]
[151.75064087 -244.42201233]
[153.70852661 -259.29367065]
[155.66642761 -274.16534424]
[157.62431335 -289.03701782]
[141.30136108 -306.04052734]
[142.51072693 -329.32580566]
[160.12007141 -344.21923828]
[159.46578979 -359.20495605]
[151.13389587 -372.65447998]
[158.30867004 -385.70715332]
[154.78559875 -394.21881104]
[157.80717468 -401.02618408]
[157.47994995 -416.02261353]
[157.15274048 -431.01904297]
[149.11622620 -444.64715576]
[156.57403564 -457.54016113]
[156.24681091 -472.53659058]
[145.11198425 -483.42941284]
[144.99377441 -498.64257812]
[155.44702148 -509.19082642]
[155.11979675 -524.18725586]
[142.29396057 -532.92095947]
[137.08288574 -547.53686523]
[141.49032593 -562.41479492]
[153.82154846 -571.83398438]
[169.33493042 -572.17248535]
[182.06526184 -563.30017090]
[187.11747742 -548.62860107]
[182.54888916 -533.79931641]
[170.11622620 -524.51446533]
[170.44345093 -509.51803589]
[181.34686279 -499.43582153]
[181.89233398 -484.23196411]
[171.24324036 -472.86383057]
[171.57046509 -457.86740112]
[179.58357239 -445.31195068]
[172.14916992 -431.34625244]
[172.47639465 -416.34982300]
[172.80360413 -401.35339355]
[173.29440308 -386.36145020]
[181.57948303 -373.98376465]
[174.45150757 -359.85925293]
[175.10580444 -344.87350464]
[182.03898621 -342.46322632]
[188.16033936 -338.37268066]
[193.06930542 -332.85620117]
[196.44128418 -326.26177979]
[198.04910278 -319.00924683]
[197.77832031 -311.56344604]
[195.63525391 -304.40451050]
[191.74732971 -297.99688721]
[186.35551453 -292.75912476]
[179.79942322 -289.03671265]
[172.49598694 -287.07913208]
[170.53810120 -272.20745850]
[168.58020020 -257.33578491]
[166.62231445 -242.46411133]
[164.66441345 -227.59243774]
[171.64196777 -220.00141907]
[173.28334045 -209.59893799]
[168.79844666 -199.82728577]
[159.46591187 -194.05718994]
[156.86119080 -179.28506470]
[154.25646973 -164.51295471]
[151.65174866 -149.74084473]
[157.06143188 -135.86335754]
[147.04530334 -123.61640930]
[155.77226257 -111.60076141]
[153.34114075 -96.58262634]
[140.67884827 -87.51045990]
[138.07412720 -72.73834229]
[143.48381042 -58.86085892]
[133.46768188 -46.61391068]
[138.87738037 -32.73642731]
[128.86125183 -20.48947716]
[126.25652313 -5.71736193]
[131.66621399 8.16012192]
[121.65007782 20.40707016]
[119.04535675 35.17918777]
[116.44063568 49.95130539]
[113.83591461 64.72341919]
[111.23119354 79.49553680]
[129.66839600 95.86342621]
[125.64471436 126.01779938]
[131.68591309 139.74746704]
[146.50462341 145.24122620]
[153.02233887 159.63897705]
[147.37220764 174.39877319]
[132.90635681 180.76390076]
[118.20712280 174.95803833]
[111.99529266 160.42570496]
[117.95624542 145.78866577]
[111.91503906 132.05900574]
[104.45115662 131.32386780]
[103.17045593 146.26908875]
[101.88974762 161.21432495]
[100.60904694 176.15954590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 20]
[9 19]
[10 18]
[24 128]
[25 127]
[26 126]
[27 125]
[28 124]
[30 122]
[31 121]
[33 119]
[35 117]
[36 116]
[39 113]
[41 111]
[42 110]
[43 109]
[44 108]
[46 104]
[47 103]
[48 102]
[49 101]
[50 100]
[53 89]
[54 88]
[56 86]
[58 85]
[59 84]
[60 83]
[62 81]
[63 80]
[66 77]
[67 76]
[130 139]
[131 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
