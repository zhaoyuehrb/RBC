%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUCAGCCGCGCGCGGACCGGGGCGGGGCGGGCGGUGCCCCGGGCUGGGCGAGGGGCCGGGUGCGGGGCCGCUGGCCGAGAGGCUGAGGCGGCGUC\
) } def
/len { sequence length } bind def

/coor [
[80.94815826 114.53040314]
[66.77314758 119.43642426]
[52.59813690 124.34244537]
[38.42312241 129.24845886]
[24.24811172 134.15447998]
[10.07309914 139.06050110]
[-0.43745190 150.88584900]
[-14.99535751 147.73678589]
[-29.17037010 152.64280701]
[-43.34538269 157.54881287]
[-53.85593414 169.37417603]
[-68.41384125 166.22509766]
[-82.58885193 171.13111877]
[-96.76386261 176.03713989]
[-107.27441406 187.86248779]
[-121.83232117 184.71340942]
[-128.51161194 199.03691101]
[-143.39118958 204.36360168]
[-157.64326477 197.53324890]
[-162.81234741 182.59819031]
[-155.83169556 168.41911316]
[-140.84281921 163.40823364]
[-126.73834229 170.53840637]
[-117.24167633 159.06396484]
[-101.66988373 161.86212158]
[-87.49487305 156.95610046]
[-73.31985474 152.05007935]
[-63.82320023 140.57565308]
[-48.25139999 143.37380981]
[-34.07638931 138.46778870]
[-19.90137672 133.56176758]
[-10.40471745 122.08733368]
[5.16707993 124.88549042]
[19.34209251 119.97946930]
[33.51710510 115.07345581]
[47.69211578 110.16743469]
[61.86713028 105.26141357]
[76.04214478 100.35539246]
[80.50545502 83.10941315]
[96.47179413 72.59875488]
[116.65265656 75.69699097]
[121.78295898 61.60160446]
[126.91326141 47.50621414]
[132.04356384 33.41082382]
[129.49281311 17.79659081]
[141.11648560 8.48318005]
[146.24678040 -5.61220884]
[151.37709045 -19.70759773]
[148.82633972 -35.32183075]
[160.45001221 -44.63524246]
[165.58030701 -58.73063278]
[170.71061707 -72.82601929]
[165.26095581 -87.91511536]
[173.78271484 -101.50773621]
[189.73870850 -103.17678070]
[200.88888550 -91.64189911]
[198.67976379 -75.75167084]
[184.80599976 -67.69571686]
[179.67568970 -53.60033035]
[174.54539490 -39.50494003]
[177.46308899 -24.89890289]
[165.47247314 -14.57729626]
[160.34217834 -0.48190680]
[155.21186829 13.61348248]
[158.12957764 28.21951866]
[146.13894653 38.54112625]
[141.00865173 52.63651657]
[135.87834167 66.73190308]
[130.74804688 80.82729340]
[135.87834167 94.92268372]
[148.86872864 102.42268372]
[161.85910034 109.92268372]
[174.84948730 117.42268372]
[187.83987427 124.92268372]
[200.83024597 132.42268372]
[214.05204773 139.50674438]
[227.49195862 146.16775513]
[240.93186951 152.82875061]
[254.37176514 159.48974609]
[270.69467163 157.91021729]
[280.00253296 171.41191101]
[272.72021484 186.10545349]
[256.33914185 186.87536621]
[247.71076965 172.92965698]
[234.27085876 166.26866150]
[220.83096313 159.60765076]
[207.39105225 152.94665527]
[202.49880981 153.66767883]
[197.12516785 151.19012451]
[193.33024597 145.41307068]
[180.33987427 137.91307068]
[167.34948730 130.41307068]
[154.35910034 122.91306305]
[141.36872864 115.41306305]
[128.37834167 107.91306305]
[121.40480804 118.60570526]
[110.90700531 124.98372650]
[99.16316223 126.14728546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[8 31]
[9 30]
[10 29]
[12 27]
[13 26]
[14 25]
[16 23]
[41 69]
[42 68]
[43 67]
[44 66]
[46 64]
[47 63]
[48 62]
[50 60]
[51 59]
[52 58]
[70 95]
[71 94]
[72 93]
[73 92]
[74 91]
[75 90]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
