%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCAGGAAAGGUAGGACCUGAUGGCUCCAGGCCCUCGGAGGCUCAGAGGCGCAGGGCUGAGCC\
) } def
/len { sequence length } bind def

/coor [
[35.95832825 155.18563843]
[26.59631920 161.19473267]
[15.63994789 162.56594849]
[5.24279976 159.10168457]
[-2.58242083 151.54780579]
[-16.97481537 155.77380371]
[-31.36721039 159.99978638]
[-45.75960541 164.22576904]
[-49.30257416 179.17044067]
[-59.85487747 190.33038330]
[-74.57798767 194.70365906]
[-89.51147461 191.11386108]
[-100.63829041 180.52664185]
[-104.96539307 165.78988647]
[-101.32880402 150.86772156]
[-90.70674896 139.77415466]
[-75.95651245 135.49325562]
[-61.04582596 139.17660522]
[-49.98559189 149.83337402]
[-35.59319687 145.60739136]
[-21.20080376 141.38140869]
[-6.80840921 137.15541077]
[0.75561488 119.56049347]
[18.89819145 112.57148743]
[36.83958817 120.78597260]
[50.48406601 114.55474854]
[64.12854767 108.32352448]
[77.77302551 102.09229279]
[91.41750336 95.86106873]
[94.50311279 91.13991547]
[100.12302399 88.67556763]
[106.66822815 89.75559998]
[120.84324646 84.84957886]
[135.01824951 79.94356537]
[149.19326782 75.03754425]
[163.36828613 70.13152313]
[177.54328918 65.22550201]
[191.59753418 59.98354340]
[205.52305603 54.40860367]
[206.50874329 39.17734909]
[214.01287842 25.88635254]
[226.54553223 17.17455292]
[241.61831665 14.77168465]
[256.23852539 19.15483856]
[267.50332642 29.45373917]
[273.17605591 43.62352753]
[272.13040161 58.85078430]
[264.57397461 72.11212921]
[252.00711060 80.77450562]
[236.92497253 83.11799622]
[222.32214355 78.67729950]
[211.09799194 68.33412170]
[197.17247009 73.90905762]
[191.95085144 79.51829529]
[182.44931030 79.40052032]
[168.27429199 84.30653381]
[154.09928894 89.21255493]
[139.92427063 94.11857605]
[125.74925995 99.02459717]
[111.57424927 103.93061066]
[97.64873505 109.50555420]
[84.00424957 115.73677826]
[70.35977173 121.96800232]
[56.71529007 128.19923401]
[43.07081223 134.43045044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 22]
[6 21]
[7 20]
[8 19]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[38 53]
[39 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
