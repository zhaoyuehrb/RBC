%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACAAACCAGCCAGCCUCUCCAGAGCAGGCGUGUGAUCUCUGUACCCCCGCAGUGGUCAGAAU\
) } def
/len { sequence length } bind def

/coor [
[96.27230835 123.24116516]
[89.30146027 136.52301025]
[92.68234253 152.20578003]
[82.41786194 164.53541565]
[66.38204193 164.05366516]
[56.87619400 151.13011169]
[61.19239426 135.67857361]
[76.01962280 129.55215454]
[82.99046326 116.27031708]
[77.61383057 107.27370453]
[76.67554474 96.83499146]
[63.22914124 90.18711853]
[49.78273773 83.53924561]
[33.98278427 84.35904694]
[26.00282097 71.78250122]
[12.55641747 65.13462830]
[-1.04669774 58.81361389]
[-14.79858017 52.82314682]
[-31.02379036 55.20528793]
[-40.98581314 42.17877197]
[-34.43657684 27.14415932]
[-18.11336899 25.56777382]
[-8.80811214 39.07126236]
[4.94377089 45.06172943]
[12.61008263 44.83497238]
[19.20429039 51.68822479]
[32.65069580 58.33610153]
[47.48886871 57.04079437]
[56.43061066 70.09284210]
[69.87701416 76.74071503]
[83.32341766 83.38858795]
[103.96282196 76.79776764]
[121.24467468 89.86534119]
[134.01159668 80.52103424]
[147.57870483 86.66781616]
[162.46934509 84.85976410]
[177.35997009 83.05171204]
[192.25061035 81.24365997]
[207.14123535 79.43561554]
[219.90815735 70.09130096]
[233.47526550 76.23808289]
[248.36590576 74.43003082]
[263.25653076 72.62198639]
[278.14715576 70.81393433]
[287.69543457 58.22005081]
[303.36349487 56.14928818]
[315.85571289 65.83018494]
[317.76071167 81.51924896]
[307.94827271 93.90842438]
[292.23995972 95.64743805]
[279.95523071 85.70456696]
[265.06457520 87.51261902]
[250.17395020 89.32066345]
[235.28330994 91.12871552]
[223.58146667 100.34370422]
[208.94927979 94.32624817]
[194.05865479 96.13430023]
[179.16801453 97.94234467]
[164.27738953 99.75039673]
[149.38674927 101.55844879]
[137.68490601 110.77343750]
[123.05272675 104.75597382]
[119.62345886 112.99874878]
[113.37123108 119.37156677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[11 31]
[12 30]
[13 29]
[15 27]
[16 26]
[17 24]
[18 23]
[33 62]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[41 54]
[42 53]
[43 52]
[44 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
