%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUACAACUGCAGUGGGGCUGCUUGUGGUUUCCAAACGUCGGCAGAGGCUGGAGACGGCUCUCUAGUGCUGGGUGUGGAGUGAGGCACCACCCUUGCCCUGAAGCCUGGGGCACUCAGUCACC\
) } def
/len { sequence length } bind def

/coor [
[90.24635315 266.63250732]
[75.59185791 262.21612549]
[64.67646790 251.48704529]
[60.00846481 236.91075134]
[62.66051483 221.83676147]
[72.02320099 209.72895813]
[85.94503784 203.36964417]
[86.70478058 188.38890076]
[87.46451569 173.40814209]
[88.22425079 158.42739868]
[85.38847351 151.50903320]
[89.19774628 143.07821655]
[90.33674622 128.12152100]
[91.47574615 113.16483307]
[89.01668549 98.36776733]
[83.10134888 84.58340454]
[77.18601227 70.79903412]
[71.09654236 57.09070587]
[58.30416870 47.78125381]
[60.02109146 32.98593903]
[53.75845718 19.35584641]
[47.49582291 5.72575378]
[41.23318863 -7.90433788]
[34.97055435 -21.53442955]
[24.16107178 -22.65779686]
[14.89510822 -28.17923546]
[8.85444546 -37.01696777]
[7.10183048 -47.49491882]
[9.89452267 -57.66041565]
[16.64911270 -65.64805603]
[11.43953419 -79.71434021]
[6.22995520 -93.78062439]
[1.02037644 -107.84690094]
[-4.18920231 -121.91318512]
[-16.23774529 -132.16711426]
[-13.40232277 -146.78935242]
[-18.61190224 -160.85563660]
[-24.59348679 -167.91323853]
[-23.77033806 -175.34478760]
[-28.62190819 -189.53852844]
[-33.47347641 -203.73226929]
[-38.32504654 -217.92601013]
[-43.17661667 -232.11975098]
[-48.02818680 -246.31349182]
[-53.41553116 -260.31265259]
[-59.33086777 -274.09701538]
[-65.24620819 -287.88137817]
[-71.33567810 -301.58972168]
[-77.59832001 -315.21981812]
[-83.86095428 -328.84991455]
[-90.12358856 -342.47998047]
[-103.80937195 -351.51501465]
[-102.55775452 -367.86630249]
[-87.65629578 -374.71310425]
[-74.43433380 -365.01199341]
[-76.49349213 -348.74261475]
[-70.23085785 -335.11254883]
[-63.96822357 -321.48245239]
[-57.70558929 -307.85235596]
[-51.98888779 -303.03314209]
[-51.46183777 -293.79672241]
[-45.54650116 -280.01235962]
[-39.63116455 -266.22799683]
[-36.39063263 -264.58239746]
[-33.82815170 -261.22424316]
[-32.76827240 -256.51040649]
[-33.83444595 -251.16505432]
[-28.98287773 -236.97131348]
[-24.13130760 -222.77757263]
[-19.27973747 -208.58383179]
[-14.42816734 -194.39010620]
[-9.57659817 -180.19636536]
[-4.54561996 -166.06521606]
[0.66395897 -151.99893188]
[12.33987713 -142.75111389]
[9.87707996 -127.12276459]
[15.08665848 -113.05648041]
[20.29623795 -98.99019623]
[25.50581551 -84.92391968]
[30.71539497 -70.85763550]
[48.91804123 -64.19836426]
[56.63845444 -46.09271622]
[48.60064316 -27.79706573]
[54.86328125 -14.16697311]
[61.12591553 -0.53688109]
[67.38854980 13.09321117]
[73.65118408 26.72330284]
[85.99560547 35.05783463]
[84.72663116 50.82806778]
[90.44333649 55.64727783]
[90.97038269 64.88369751]
[96.88571930 78.66806030]
[102.80105591 92.45243073]
[109.50592804 88.68524933]
[118.56917572 89.15285492]
[127.74920654 94.79818726]
[140.47886658 102.73265076]
[153.20852661 110.66710663]
[165.93820190 118.60157013]
[178.66786194 126.53602600]
[191.39752197 134.47048950]
[207.28746033 132.25923157]
[218.82382202 143.40785217]
[217.15692139 159.36407471]
[203.56546021 167.88764954]
[188.47561646 162.44003296]
[183.46305847 147.20014954]
[170.73339844 139.26568604]
[158.00373840 131.33123779]
[145.27407837 123.39677429]
[132.54440308 115.46231079]
[119.81474304 107.52785492]
[106.43243408 114.30382538]
[105.29344177 129.26051331]
[104.15444183 144.21720886]
[103.20500183 159.18713379]
[102.44525909 174.16787720]
[101.68552399 189.14863586]
[100.92578888 204.12937927]
[114.13283539 211.86451721]
[122.22255707 224.85740662]
[123.33599091 240.12236023]
[117.21727753 254.15161133]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 119]
[8 118]
[9 117]
[10 116]
[12 115]
[13 114]
[14 113]
[15 93]
[16 92]
[17 91]
[18 89]
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[30 80]
[31 79]
[32 78]
[33 77]
[34 76]
[36 74]
[37 73]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 63]
[46 62]
[47 61]
[48 59]
[49 58]
[50 57]
[51 56]
[96 112]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
