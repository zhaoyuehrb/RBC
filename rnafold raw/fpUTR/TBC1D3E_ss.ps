%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACACACAGGCAGUGGUAUCUGUGAGCAGCUCUGUGGACUCAAAGGUUUUCUCCCUGAGAGGCAUGACCCAGGCCAGCUGAUUCAUCAGAAUCAGG\
) } def
/len { sequence length } bind def

/coor [
[29.68993187 321.64279175]
[21.12474823 309.32867432]
[20.35257149 294.34799194]
[10.35103607 305.52697754]
[0.34950083 316.70593262]
[-3.12859774 325.35620117]
[-10.15109634 328.07446289]
[-20.50228119 338.93048096]
[-30.85346603 349.78649902]
[-31.91067886 365.79467773]
[-45.16722870 374.83035278]
[-60.45382309 369.96212769]
[-66.04389191 354.92446899]
[-57.64922333 341.25302124]
[-41.70947647 339.43530273]
[-31.35829163 328.57928467]
[-21.00710678 317.72326660]
[-10.82946587 306.70440674]
[-0.82793093 295.52545166]
[9.17360401 284.34646606]
[17.48240471 271.85791016]
[23.92932892 258.31402588]
[30.37625313 244.77012634]
[36.82317734 231.22622681]
[43.05440140 217.58174133]
[49.06835938 203.84011841]
[55.08231735 190.09849548]
[61.09627533 176.35687256]
[66.89144897 162.52156067]
[72.46639252 148.59603882]
[78.04132843 134.67051697]
[83.61626434 120.74499512]
[89.19120026 106.81948090]
[94.09722137 92.64446259]
[98.32320404 78.25206757]
[102.54919434 63.85967636]
[101.97181702 54.55424881]
[107.14433289 49.08163071]
[111.82482910 34.83056259]
[110.80108643 27.99479485]
[113.15390778 22.56538010]
[117.28067780 19.84073830]
[122.85562134 5.91521883]
[128.43055725 -8.01030064]
[124.06306458 -20.27399254]
[129.13262939 -31.82536888]
[140.37326050 -36.59724808]
[138.81796265 -52.34182358]
[151.00891113 -60.89926529]
[157.02287292 -74.64089203]
[163.03683472 -88.38251495]
[169.05079651 -102.12414551]
[175.06475830 -115.86576843]
[170.58308411 -131.27012634]
[179.94978333 -144.29489136]
[195.97950745 -144.94859314]
[206.37564087 -132.72975159]
[203.16314697 -117.01161957]
[188.80638123 -109.85181427]
[182.79241943 -96.11018372]
[176.77845764 -82.36856079]
[170.76451111 -68.62693024]
[164.75054932 -54.88530731]
[166.73599243 -40.12362671]
[154.11488342 -30.58329010]
[157.06906128 -13.36498356]
[142.35607910 -2.43536353]
[136.78114319 11.49015522]
[131.20620728 25.41567421]
[126.07589722 39.51106262]
[121.39539337 53.76213074]
[116.94158936 68.08566284]
[112.71559906 82.47805786]
[108.48961639 96.87045288]
[109.95924377 100.66055298]
[109.65227509 105.09439087]
[107.31750488 109.31723022]
[103.11672211 112.39441681]
[97.54177856 126.31993103]
[91.96684265 140.24545288]
[86.39190674 154.17097473]
[80.81697083 168.09649658]
[80.50719452 177.41467285]
[74.83790588 182.37081909]
[68.82394409 196.11245728]
[62.80998611 209.85408020]
[56.79602814 223.59570312]
[56.19076157 232.89936829]
[50.36707306 237.67315674]
[43.92015076 251.21705627]
[37.47322845 264.76095581]
[31.02630234 278.30484009]
[45.14153671 273.22940063]
[59.80870438 276.37173462]
[70.60572815 286.78442383]
[74.27735901 301.32812500]
[69.71661377 315.61795044]
[58.29854202 325.34564209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[7 17]
[8 16]
[9 15]
[21 92]
[22 91]
[23 90]
[24 89]
[25 87]
[26 86]
[27 85]
[28 84]
[29 82]
[30 81]
[31 80]
[32 79]
[33 78]
[34 74]
[35 73]
[36 72]
[38 71]
[39 70]
[42 69]
[43 68]
[44 67]
[47 65]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
