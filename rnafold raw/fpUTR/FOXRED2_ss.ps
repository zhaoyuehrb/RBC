%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAGACCACGGGUUGCAGCCGGAGCGGCUGGGAGGUUCGCGCGUUUCUCAGGGUUCGGUCGGAGGCGGGGAGGCCGGAGCUGCGGGCGUAGGGACCUGGCGGCUCCUGAAGCGCACGCGGGCGGGCGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[111.52209473 153.06086731]
[103.34578705 140.48516846]
[110.06637573 127.07628632]
[109.59986877 112.08354187]
[102.10811615 112.43508911]
[95.32960510 125.81610870]
[88.55110168 139.19714355]
[81.77259827 152.57817078]
[80.00863647 169.44009399]
[63.31736374 172.41291809]
[55.84011459 157.19691467]
[68.39157104 145.79966736]
[75.17007446 132.41864014]
[81.94857788 119.03760529]
[88.72708893 105.65657806]
[91.35104370 90.88787079]
[89.59671783 75.99081421]
[77.47485352 66.20826721]
[75.90792847 51.07554245]
[85.30879211 39.57948303]
[76.01058960 26.77893829]
[82.20626831 13.23409271]
[80.45193481 -1.66296482]
[78.69760895 -16.56002235]
[76.94327545 -31.45708084]
[75.18894958 -46.35413742]
[65.89073944 -59.15468216]
[72.08641815 -72.69953156]
[70.33209229 -87.59658813]
[68.57775879 -102.49364471]
[66.82343292 -117.39070129]
[65.06909943 -132.28776550]
[63.31476974 -147.18481445]
[49.94339752 -154.83416748]
[43.71294403 -168.72785950]
[46.82152176 -183.45202637]
[57.87192917 -193.40322876]
[56.11759949 -208.30027771]
[54.18876648 -223.17575073]
[52.08569336 -238.02758789]
[49.98262024 -252.87942505]
[40.38689423 -265.45849609]
[46.26334381 -279.14483643]
[44.16027069 -293.99667358]
[42.05719757 -308.84851074]
[29.70933533 -318.34420776]
[27.78808975 -333.43603516]
[36.91687393 -345.14932251]
[34.81380081 -360.00115967]
[32.71072769 -374.85299683]
[23.11499977 -387.43206787]
[28.99145126 -401.11840820]
[26.88837814 -415.97024536]
[17.29265022 -428.54931641]
[23.16909981 -442.23568726]
[21.06602669 -457.08752441]
[18.96295357 -471.93936157]
[9.10357666 -480.34970093]
[7.70175695 -492.82830811]
[14.96939754 -502.57135010]
[13.21506786 -517.46838379]
[11.46073818 -532.36547852]
[1.22803009 -545.18041992]
[7.46089745 -560.34893799]
[23.74749947 -562.26690674]
[33.33358002 -548.96130371]
[26.35779572 -534.11981201]
[28.11212540 -519.22271729]
[29.86645508 -504.32568359]
[41.10913849 -490.90298462]
[33.81479263 -474.04241943]
[35.91786575 -459.19058228]
[38.02093887 -444.33874512]
[47.46623993 -432.82199097]
[41.74021530 -418.07333374]
[43.84328842 -403.22149658]
[53.28858948 -391.70474243]
[47.56256485 -376.95608521]
[49.66563797 -362.10424805]
[51.76871109 -347.25241089]
[63.79067230 -338.53414917]
[66.13505554 -323.50222778]
[56.90903473 -310.95159912]
[59.01210785 -296.09976196]
[61.11518097 -281.24792480]
[70.56047821 -269.73117065]
[64.83445740 -254.98249817]
[66.93753052 -240.13066101]
[69.04060364 -225.27882385]
[73.13134003 -219.03886414]
[71.01465607 -210.05461121]
[72.76898956 -195.15754700]
[85.82880402 -188.04565430]
[92.27284241 -174.44644165]
[89.44041443 -159.48547363]
[78.21183014 -148.93914795]
[79.96615601 -134.04208374]
[81.72048950 -119.14503479]
[83.47481537 -104.24797058]
[85.22914886 -89.35091400]
[86.98347473 -74.45385742]
[96.15620422 -62.71884918]
[90.08600616 -48.10846710]
[91.84033203 -33.21141052]
[93.59466553 -18.31435204]
[95.34899139 -3.41729474]
[97.10332489 11.47976303]
[106.27604675 23.21477127]
[100.20584869 37.82515335]
[112.02012634 46.82284164]
[114.01148224 61.90558624]
[104.49377441 74.23648071]
[106.24810791 89.13353729]
[144.76261902 103.02717590]
[152.76435852 115.71466064]
[160.05888367 121.37036896]
[160.80091858 128.79469299]
[168.50303650 141.66627502]
[176.20513916 154.53784180]
[191.59213257 158.14564514]
[199.85015869 171.62081909]
[196.07987976 186.96881104]
[182.51814270 195.08390808]
[167.21087646 191.15156555]
[159.23962402 177.50479126]
[163.33357239 162.23995972]
[155.63145447 149.36837769]
[147.92933655 136.49681091]
[140.07687378 123.71640015]
[132.07513428 111.02891541]
[124.58338165 111.38046265]
[125.52286530 126.35101318]
[133.46960449 139.07301331]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 15]
[6 14]
[7 13]
[8 12]
[16 113]
[17 112]
[20 109]
[22 107]
[23 106]
[24 105]
[25 104]
[26 103]
[28 101]
[29 100]
[30 99]
[31 98]
[32 97]
[33 96]
[37 92]
[38 91]
[39 89]
[40 88]
[41 87]
[43 85]
[44 84]
[45 83]
[48 80]
[49 79]
[50 78]
[52 76]
[53 75]
[55 73]
[56 72]
[57 71]
[60 69]
[61 68]
[62 67]
[114 130]
[115 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
