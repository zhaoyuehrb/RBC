%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGGUGCCGAGGCCGGGCCGGAGCGGGGCGAAGGGGGCCGAGCGGCGGGCCGGGCCGGGCCGGGCAGGGCCGGGGCGUGGGCCGGCAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[128.12217712 205.42619324]
[130.32740784 190.58918762]
[138.94940186 178.31477356]
[152.15869141 171.20739746]
[167.15226746 170.77510071]
[155.87467957 160.88491821]
[144.59707642 150.99473572]
[133.31947327 141.10453796]
[126.07463074 139.02096558]
[121.84151459 130.70152283]
[110.89355469 120.44763947]
[99.94559479 110.19375610]
[92.22306824 107.34526825]
[88.81415558 99.42075348]
[73.58486176 95.13365936]
[70.05641937 80.66301727]
[59.44981384 70.05641937]
[48.84321213 59.44981384]
[38.23661041 48.84321213]
[23.00731850 44.55611420]
[19.47887611 30.08547783]
[8.87227345 19.47887611]
[-1.73432791 8.87227345]
[-17.31024742 8.70357800]
[-27.91575623 -2.20411921]
[-27.65894127 -17.05233955]
[-38.26554108 -27.65894127]
[-53.84146500 -27.82763672]
[-64.44696808 -38.73533249]
[-64.19015503 -53.58355331]
[-74.79676056 -64.19015503]
[-85.40335846 -74.79676056]
[-100.96462250 -73.25370026]
[-113.84787750 -82.11687469]
[-117.97003174 -97.20137024]
[-111.38473511 -111.38473511]
[-97.20137024 -117.97003174]
[-82.11687469 -113.84787750]
[-73.25370026 -100.96462250]
[-74.79676056 -85.40335846]
[-64.19015503 -74.79676056]
[-53.58355331 -64.19015503]
[-38.73533249 -64.44696808]
[-27.82763672 -53.84146500]
[-27.65894127 -38.26554108]
[-17.05233955 -27.65894127]
[-2.20411921 -27.91575623]
[8.70357800 -17.31024742]
[8.87227345 -1.73432791]
[19.47887611 8.87227345]
[30.08547783 19.47887611]
[44.55611420 23.00731850]
[48.84321213 38.23661041]
[59.44981384 48.84321213]
[70.05641937 59.44981384]
[80.66301727 70.05641937]
[95.13365936 73.58486176]
[99.42075348 88.81415558]
[110.19947815 99.24578857]
[121.14743805 109.49967957]
[132.09539795 119.75356293]
[143.20967102 129.82695007]
[154.48725891 139.71713257]
[165.76486206 149.60731506]
[177.04246521 159.49751282]
[186.86210632 161.51939392]
[191.99957275 168.79843140]
[205.85775757 174.53869629]
[218.17970276 170.31655884]
[229.67375183 175.53152466]
[234.30467224 186.83825684]
[247.96762085 193.02885437]
[261.63058472 199.21946716]
[275.29354858 205.41006470]
[288.71514893 197.62287903]
[304.14715576 199.24540710]
[315.65567017 209.65376282]
[318.81539917 224.84573364]
[312.41137695 238.97967529]
[298.90609741 246.62080383]
[283.49261475 244.83096313]
[272.09768677 234.29837036]
[269.10293579 219.07302856]
[255.43997192 212.88241577]
[241.77702332 206.69181824]
[228.11405945 200.50120544]
[210.86454773 203.23744202]
[200.11750793 188.39688110]
[186.25932312 182.65663147]
[192.50314331 196.29534912]
[191.97096252 211.28590393]
[184.77569580 224.44752502]
[172.44409180 232.98751831]
[157.59271240 235.09382629]
[143.37280273 230.31950378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 65]
[6 64]
[7 63]
[8 62]
[10 61]
[11 60]
[12 59]
[14 58]
[16 56]
[17 55]
[18 54]
[19 53]
[21 51]
[22 50]
[23 49]
[26 46]
[27 45]
[30 42]
[31 41]
[32 40]
[67 89]
[68 88]
[71 86]
[72 85]
[73 84]
[74 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
