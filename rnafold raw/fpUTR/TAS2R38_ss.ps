%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUCUGCACUGGGUGGCAACCAGGUCUUUAGAUUAGCCAACUAGAGAAGAGAAGUAGAAUAGCCAAUUAGAGAAGUGACAUC\
) } def
/len { sequence length } bind def

/coor [
[146.90354919 222.51089478]
[149.62881470 207.69917297]
[155.47486877 193.81977844]
[164.16827393 181.52186584]
[154.06283569 170.43672180]
[143.95739746 159.35159302]
[133.85195923 148.26646423]
[123.74652863 137.18133545]
[113.64109802 126.09619141]
[91.41961670 128.16856384]
[74.12702942 114.05987549]
[59.55781174 117.62890625]
[44.98859406 121.19792938]
[30.41938019 124.76696014]
[23.66940880 138.87269592]
[9.41033554 145.29241943]
[-5.62514162 140.99493408]
[-14.33773041 128.00936890]
[-12.61361313 112.46712494]
[-1.26686430 101.70676422]
[14.34492779 100.80900574]
[26.85035133 110.19774628]
[41.41956711 106.62871552]
[55.98878479 103.05969238]
[70.55799866 99.49066162]
[74.14366150 85.90955353]
[83.61284637 75.53467560]
[78.71475983 61.35691833]
[73.81668091 47.17916107]
[68.91860199 33.00140381]
[64.02052307 18.82364845]
[59.12244034 4.64589024]
[54.22436142 -9.53186703]
[39.20994186 -13.07740402]
[28.51232719 -24.19336319]
[25.54508209 -39.33268356]
[31.25504494 -53.66446304]
[43.82018661 -62.61547852]
[59.23101807 -63.32950211]
[72.56999969 -55.57868195]
[79.58070374 -41.83628464]
[78.02605438 -26.48745346]
[68.40211487 -14.42994785]
[73.30020142 -0.25219026]
[78.19828033 13.92556763]
[83.09635925 28.10332489]
[87.99443817 42.28108215]
[92.89251709 56.45883942]
[97.79060364 70.63659668]
[107.05768585 71.41188812]
[115.62086487 75.03844452]
[122.62609100 81.15454865]
[127.37467957 89.15022278]
[129.39303589 98.22800446]
[128.47987366 107.48252106]
[124.72623444 115.99076080]
[134.83166504 127.07588959]
[144.93710327 138.16102600]
[155.04254150 149.24615479]
[165.14796448 160.33129883]
[175.25340271 171.41642761]
[188.30097961 163.89482117]
[202.66058350 159.35432434]
[217.66056824 158.00733948]
[232.59938049 159.91683960]
[246.77828979 164.99353027]
[259.53411865 172.99995422]
[270.27026367 183.56164551]
[278.48455811 196.18461609]
[283.79284668 210.27845764]
[285.94680786 225.18397522]
[284.84570312 240.20401001]
[280.54104614 254.63606262]
[273.23419189 267.80511475]
[263.26684570 279.09521484]
[251.10523987 287.97830200]
[237.31819153 294.03890991]
[222.55052185 296.99359131]
[207.49295044 296.70410156]
[192.84976196 293.18402100]
[179.30583191 286.59796143]
[167.49462891 277.25399780]
[157.96859741 265.58914185]
[151.17329407 252.14900208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 61]
[5 60]
[6 59]
[7 58]
[8 57]
[9 56]
[11 25]
[12 24]
[13 23]
[14 22]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
