%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAGAGGCGCCUGGUCGGGAAGGGCCUGGUCAGCUGCGUCCGGCGGAGGCAGCUGCUGACCCAGCUGUGGACUGUGCCGGGGGCGGGGGACGGAGGGGCAGGAGCCCUGGGCUCCCCGUGGCGGGGGCUGUAUC\
) } def
/len { sequence length } bind def

/coor [
[91.87248993 472.32510376]
[78.28143311 465.37918091]
[69.05688477 453.21896362]
[66.03038025 438.25894165]
[69.80283356 423.46936035]
[79.62522125 411.78674316]
[93.54730988 405.53070068]
[93.89377594 390.53469849]
[94.24024200 375.53869629]
[86.79898071 362.63610840]
[94.85297394 349.01831055]
[95.19944000 334.02233887]
[95.54590607 319.02633667]
[95.89237976 304.03033447]
[88.45111847 291.12774658]
[96.50510406 277.50994873]
[96.67835236 262.51095581]
[96.67835236 247.51095581]
[96.67835236 232.51095581]
[96.67835236 217.51095581]
[93.92967224 213.50556946]
[93.72985077 207.71250916]
[97.04082489 201.82221985]
[97.73357391 186.83821106]
[98.42633057 171.85421753]
[99.11907959 156.87022400]
[99.81183624 141.88623047]
[100.50458527 126.90223694]
[78.06909943 108.33325958]
[86.99179077 84.78916931]
[82.22492218 70.56676483]
[77.45804596 56.34435272]
[63.59025192 49.25055695]
[58.95856857 34.75910568]
[65.80688477 21.58199692]
[61.04001236 7.35958624]
[56.27313995 -6.86282349]
[51.50626755 -21.08523369]
[39.78448868 -31.71116638]
[43.07607269 -46.23751068]
[38.30920410 -60.45992279]
[33.54233170 -74.68233490]
[28.77545929 -88.90473938]
[24.00858879 -103.12715149]
[19.24171829 -117.34956360]
[14.47484589 -131.57197571]
[2.75306630 -142.19790649]
[6.04465199 -156.72424316]
[1.27778089 -170.94665527]
[-3.97893572 -184.99539185]
[-9.71918774 -198.85359192]
[-15.45943928 -212.71177673]
[-21.19968987 -226.56997681]
[-26.93994141 -240.42816162]
[-32.68019485 -254.28636169]
[-38.42044449 -268.14456177]
[-53.11577988 -273.96026611]
[-59.31785583 -288.49676514]
[-53.34708786 -303.12979126]
[-38.74583054 -309.17782593]
[-24.17674637 -303.05270386]
[-18.28341866 -288.38830566]
[-24.56225204 -273.88479614]
[-18.82200050 -260.02661133]
[-13.08174896 -246.16841125]
[-7.34149742 -232.31022644]
[-1.60124588 -218.45202637]
[4.13900566 -204.59384155]
[9.87925720 -190.73564148]
[13.07284641 -189.05024719]
[15.57539845 -185.68698120]
[16.58549690 -181.00402832]
[15.50019073 -175.71353149]
[20.26706123 -161.49111938]
[31.64788246 -151.88247681]
[28.69725609 -136.33883667]
[33.46412659 -122.11643219]
[38.23099899 -107.89402008]
[42.99787140 -93.67161560]
[47.76473999 -79.44920349]
[52.53161240 -65.22679138]
[57.29848480 -51.00438309]
[68.67930603 -41.39573288]
[65.72867584 -25.85210419]
[70.49555206 -11.62969494]
[75.26242065 2.59271526]
[80.02928925 16.81512451]
[93.43534851 23.20365524]
[98.47223663 37.55929565]
[91.68045807 51.57748032]
[96.44733429 65.79988861]
[101.21420288 80.02230072]
[109.65506744 80.52422333]
[117.77614594 84.68934631]
[123.97202301 92.28189087]
[126.80272675 102.36620331]
[141.79872131 102.71266937]
[156.79472351 103.05914307]
[171.79072571 103.40560913]
[186.78671265 103.75207520]
[200.90692139 95.41229248]
[215.05458069 103.70542145]
[214.67579651 120.10018921]
[200.16023254 127.73107910]
[186.44024658 118.74807739]
[171.44425964 118.40160370]
[156.44825745 118.05513763]
[141.45225525 117.70867157]
[126.45626068 117.36219788]
[115.48857880 127.59499359]
[114.79582977 142.57897949]
[114.10307312 157.56298828]
[113.41032410 172.54698181]
[112.71757507 187.53097534]
[112.02481842 202.51496887]
[111.67835236 217.51095581]
[111.67835236 232.51095581]
[111.67835236 247.51095581]
[111.67835236 262.51095581]
[114.83032227 271.18222046]
[111.50110626 277.85644531]
[118.91758728 291.83163452]
[110.88837433 304.37680054]
[110.54190826 319.37280273]
[110.19544220 334.36880493]
[109.84896851 349.36480713]
[117.26544952 363.33999634]
[109.23624420 375.88516235]
[108.88977814 390.88116455]
[108.54330444 405.87716675]
[122.16160583 412.76950073]
[131.43397522 424.89328003]
[134.51936340 439.84130859]
[130.80519104 454.64559937]
[121.02887726 466.36682129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 130]
[8 129]
[9 128]
[11 126]
[12 125]
[13 124]
[14 123]
[16 121]
[17 119]
[18 118]
[19 117]
[20 116]
[23 115]
[24 114]
[25 113]
[26 112]
[27 111]
[28 110]
[30 92]
[31 91]
[32 90]
[35 87]
[36 86]
[37 85]
[38 84]
[40 82]
[41 81]
[42 80]
[43 79]
[44 78]
[45 77]
[46 76]
[48 74]
[49 73]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
