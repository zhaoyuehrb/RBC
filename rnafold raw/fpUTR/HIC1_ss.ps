%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGAGACGCGACCAGGACGCGGGGAGGACGGACCAGCAGGACAGACCGACCGGGGGCCCGGCGGGCGGAGGGCAGCGCAGCCACGUCCCCCCUGGAUCCGCCGUCAGCCGGGCCCGGGGCUUUCGACAUGCCCCCCAGGAGAGUGUGCUGGGCAGACG\
) } def
/len { sequence length } bind def

/coor [
[100.83270264 360.34823608]
[112.11756134 349.52301025]
[110.94797516 334.56866455]
[109.77838135 319.61434937]
[101.07225800 307.52911377]
[107.70996094 293.16766357]
[106.54037476 278.21331787]
[105.22493744 263.27111816]
[103.76378632 248.34245300]
[102.30262756 233.41378784]
[100.84147644 218.48512268]
[87.41246033 208.39878845]
[85.36885834 191.38897705]
[96.45420837 177.88752747]
[94.70204926 162.99021912]
[85.53103638 151.25387573]
[91.60335541 136.64437866]
[89.85119629 121.74706268]
[87.05371094 117.08296967]
[85.69470978 112.30627441]
[85.67877197 107.79677582]
[86.81896973 103.88576508]
[73.57897949 112.54678345]
[60.35336304 105.69606018]
[45.38833237 106.71969604]
[35.02463150 118.34860229]
[19.83337975 119.17353058]
[8.81086254 109.22166443]
[-6.15416861 110.24530029]
[-19.39415741 118.90631866]
[-32.61977005 112.05559540]
[-40.91394043 125.03684998]
[-55.09573364 130.58032227]
[-69.65023041 126.75533295]
[-79.04907227 115.23144531]
[-94.01409912 116.25508118]
[-107.31420898 125.84878540]
[-122.15972137 118.88150787]
[-123.27883911 102.52059174]
[-109.52030945 93.59674072]
[-95.03773499 101.29005432]
[-80.07270813 100.26641846]
[-72.33058167 87.57006073]
[-58.43247986 81.79885864]
[-43.62793732 85.35961151]
[-33.64340591 97.09056854]
[-21.47381783 88.50276184]
[-7.17780495 95.28026581]
[7.78722668 94.25662994]
[17.35196686 82.89655304]
[32.51405334 81.64526367]
[44.36469650 91.75466919]
[59.32972717 90.73102570]
[71.49932098 82.14322662]
[85.79533386 88.92073059]
[97.24407959 79.22918701]
[100.72441101 64.63852692]
[104.20474243 50.04786682]
[107.68507385 35.45721054]
[111.16540527 20.86655235]
[114.64573669 6.27589417]
[118.12606812 -8.31476402]
[121.60639954 -22.90542221]
[125.08673096 -37.49607849]
[117.66484833 -57.56390381]
[132.31646729 -72.06130981]
[134.93721008 -86.83059692]
[137.55793762 -101.59987640]
[140.17868042 -116.36916351]
[142.79940796 -131.13844299]
[145.42015076 -145.90773010]
[147.31756592 -160.78724670]
[148.48716736 -175.74157715]
[149.65675354 -190.69590759]
[139.66345215 -202.64460754]
[141.06260681 -217.79377747]
[152.51545715 -227.24722290]
[153.68505859 -242.20155334]
[154.85464478 -257.15588379]
[144.39550781 -269.00418091]
[145.46116638 -284.77249146]
[157.41937256 -295.10577393]
[173.17553711 -293.87347412]
[183.38182068 -281.80670166]
[181.98300171 -266.06442261]
[169.80897522 -255.98629761]
[168.63938904 -241.03196716]
[167.46980286 -226.07763672]
[177.31364441 -214.95854187]
[176.34054565 -199.77606201]
[164.61108398 -189.52630615]
[163.44149780 -174.57197571]
[162.27189636 -159.61764526]
[175.34097290 -166.97967529]
[189.31913757 -161.53810120]
[193.97070312 -147.27755737]
[185.88952637 -134.64053345]
[170.99311829 -132.88064575]
[160.18943787 -143.28700256]
[157.56869507 -128.51771545]
[154.94796753 -113.74842834]
[152.32722473 -98.97914124]
[149.70649719 -84.20986176]
[147.08575439 -69.44057465]
[153.34533691 -63.02043915]
[155.96025085 -54.29931641]
[154.21366882 -45.22304535]
[148.37718201 -37.87891769]
[139.67738342 -34.01574707]
[136.19705200 -19.42509079]
[132.71672058 -4.83443260]
[129.23638916 9.75622559]
[125.75606537 24.34688377]
[122.27573395 38.93754196]
[118.79540253 53.52819824]
[115.31507111 68.11885834]
[111.83473969 82.70951080]
[119.62849426 95.52580261]
[134.18450928 99.14832306]
[148.74050903 102.77083588]
[163.29652405 106.39335632]
[177.85252380 110.01587677]
[189.00982666 99.36137390]
[204.16052246 96.45277405]
[218.47007751 102.21817780]
[227.37239075 114.81788635]
[228.02673340 130.23136902]
[220.22431946 143.54023743]
[206.45487976 150.49768066]
[191.11218262 148.88360596]
[179.09204102 139.21305847]
[174.23001099 124.57188416]
[159.67401123 120.94936371]
[145.11799622 117.32685089]
[130.56198120 113.70433044]
[116.00598145 110.08181000]
[104.74851227 119.99490356]
[106.50067139 134.89221191]
[115.79701233 147.69412231]
[109.59935760 161.23805237]
[111.35151672 176.13537598]
[122.83602142 183.23016357]
[128.04632568 195.47183228]
[125.27982330 208.28604126]
[115.77014160 217.02397156]
[117.23129272 231.95263672]
[118.69244385 246.88130188]
[120.15360260 261.80996704]
[124.12162781 270.09490967]
[121.49470520 277.04373169]
[122.66429901 291.99807739]
[131.45407104 305.15292358]
[124.73271179 318.44473267]
[125.90230560 333.39907837]
[127.07189941 348.35342407]
[139.90255737 357.29254150]
[143.93550110 372.40112305]
[137.26652527 386.54534912]
[123.04449463 393.04672241]
[107.98462677 388.83551025]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 155]
[3 154]
[4 153]
[6 151]
[7 150]
[8 148]
[9 147]
[10 146]
[11 145]
[14 141]
[15 140]
[17 138]
[18 137]
[22 55]
[24 53]
[25 52]
[28 49]
[29 48]
[31 46]
[35 42]
[36 41]
[56 117]
[57 116]
[58 115]
[59 114]
[60 113]
[61 112]
[62 111]
[63 110]
[64 109]
[66 104]
[67 103]
[68 102]
[69 101]
[70 100]
[71 99]
[72 93]
[73 92]
[74 91]
[77 88]
[78 87]
[79 86]
[118 136]
[119 135]
[120 134]
[121 133]
[122 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
