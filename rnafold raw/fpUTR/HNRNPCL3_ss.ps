%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUAGAACCCGGCAGUAGGAGACUUAGAAUCGAAUCUCUUCUCCCUCCCGCCUCCUGUUUUUGGCUUUUUGAGAAACCUUAUCAUCCAACACA\
) } def
/len { sequence length } bind def

/coor [
[189.88356018 216.27861023]
[177.83088684 214.79940796]
[166.29121399 211.00131226]
[155.70645142 205.02749634]
[146.48234558 197.10447693]
[138.97297668 187.53356934]
[133.46716309 176.67938232]
[130.17733765 164.95593262]
[129.23135376 152.81089783]
[130.66752625 140.70846558]
[134.43309021 129.11161804]
[121.52706909 121.46736145]
[108.62104034 113.82311249]
[91.93315125 114.15367889]
[83.71315002 99.62693024]
[68.71423340 103.83052826]
[55.47664261 96.33246613]
[51.56158447 82.00739288]
[38.40733719 74.79866028]
[25.25308609 67.58993530]
[12.09883785 60.38121033]
[-1.05541110 53.17248535]
[-13.58460426 58.43587112]
[-26.65295410 55.50025940]
[-35.46569824 45.67541885]
[-36.92480469 32.75519562]
[-49.83082962 25.11094666]
[-62.73685455 17.46669769]
[-77.98315430 21.62913895]
[-91.66558075 13.71922684]
[-95.66659546 -1.57022774]
[-87.61246490 -15.16826248]
[-72.28156281 -19.00740623]
[-58.76944351 -10.80996037]
[-55.09260178 4.56067371]
[-42.18658066 12.20492363]
[-29.28055573 19.84917259]
[-13.28700924 14.95453835]
[1.63877964 23.21841049]
[6.15331507 40.01823425]
[19.30756378 47.22696304]
[32.46181488 54.43568802]
[45.61606216 61.64441299]
[58.77030945 68.85314178]
[72.95143127 64.44503784]
[86.39440155 71.56832886]
[90.92187500 86.47267914]
[102.40763855 83.88776398]
[112.63601685 89.71740723]
[116.26528931 100.91708374]
[129.17131042 108.56134033]
[142.07734680 116.20558929]
[155.35322571 103.46770477]
[171.75567627 95.16611481]
[189.85231018 92.01603699]
[208.06565857 94.28328705]
[224.81060791 101.76181793]
[238.63243103 113.79241943]
[248.33306885 129.32083130]
[253.07505798 146.99014282]
[252.45382690 165.25930786]
[266.78036499 169.70344543]
[281.10690308 174.14758301]
[295.43344116 178.59170532]
[305.28515625 168.50781250]
[318.47293091 163.71702576]
[332.36740112 165.11311340]
[344.22485352 172.36238098]
[351.72897339 183.98101807]
[353.44332886 197.63858032]
[367.61337280 202.55894470]
[381.78338623 207.47932434]
[395.95343018 212.39968872]
[411.94873047 208.78271484]
[422.87854004 221.00856018]
[417.49920654 236.50033569]
[401.34454346 239.32141113]
[391.03305054 226.56973267]
[376.86303711 221.64935303]
[362.69299316 216.72898865]
[348.52294922 211.80860901]
[336.65417480 222.63560486]
[320.86633301 226.07633972]
[305.39117432 221.11299133]
[294.42468262 208.99325562]
[290.98928833 192.91824341]
[276.66275024 188.47412109]
[262.33621216 184.02998352]
[248.00968933 179.58584595]
[242.01545715 190.10818481]
[234.08456421 199.26705933]
[224.51861572 206.71089172]
[213.68202209 212.15338135]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 52]
[12 51]
[13 50]
[15 47]
[18 44]
[19 43]
[20 42]
[21 41]
[22 40]
[26 37]
[27 36]
[28 35]
[61 89]
[62 88]
[63 87]
[64 86]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
