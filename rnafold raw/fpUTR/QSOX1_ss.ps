%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGCAGGCGGUGCCGCGGCGCCGGGACCCGACUCAUCCGGUGCUUGCGUGUGGUGGUGAGCGCAGCGCCGAGG\
) } def
/len { sequence length } bind def

/coor [
[109.81990051 256.63317871]
[107.35097504 241.83776855]
[97.57889557 234.40623474]
[95.54139709 221.88940430]
[102.90676880 211.07261658]
[101.05137634 196.18780518]
[91.59474945 188.35879517]
[90.07624817 175.76846313]
[97.88233185 165.26528931]
[96.64363861 150.31652832]
[95.40495300 135.36775208]
[86.64306641 123.32289886]
[93.21433258 108.93091583]
[91.66696167 94.01094055]
[89.81156921 79.12612915]
[87.95618439 64.24132538]
[86.10079193 49.35651398]
[84.24540710 34.47170639]
[74.86054230 21.73455811]
[80.96415710 8.14797783]
[79.10876465 -6.73683071]
[77.25337982 -21.62163925]
[75.39798737 -36.50644684]
[73.23537445 -51.34973145]
[70.76644897 -66.14514923]
[68.29753113 -80.94057465]
[65.82861328 -95.73599243]
[53.25019455 -104.92408752]
[50.95712662 -119.96392059]
[59.79409409 -131.89889526]
[57.32517242 -146.69432068]
[54.85625458 -161.48973083]
[41.29510498 -169.27621460]
[35.96027756 -183.97564697]
[41.37071228 -198.64743042]
[54.97177124 -206.36398315]
[70.34144592 -203.48179626]
[80.22264862 -191.36174011]
[79.94978333 -175.72653198]
[69.65167236 -163.95864868]
[72.12059021 -149.16323853]
[74.58951569 -134.36781311]
[86.82294464 -125.94886780]
[89.53754425 -110.97937775]
[80.62403107 -98.20491028]
[83.09294891 -83.40949249]
[85.56187439 -68.61407471]
[88.03079224 -53.81865311]
[92.36275482 -47.56114960]
[90.28279877 -38.36183929]
[92.13818359 -23.47702980]
[93.99357605 -8.59222031]
[95.84896088 6.29258871]
[105.10111237 17.96507454]
[99.13021088 32.61631775]
[100.98560333 47.50112534]
[102.84099579 62.38593292]
[104.69638062 77.27074432]
[106.55177307 92.15555573]
[110.69944000 99.36132812]
[108.16310120 107.69222260]
[117.01358032 120.80632019]
[110.35372162 134.12905884]
[111.59240723 149.07783508]
[112.83110046 164.02659607]
[123.69106293 178.72930908]
[115.93618774 194.33242798]
[117.79157257 209.21722412]
[129.24984741 223.45858765]
[122.14640045 239.36885071]
[124.61531830 254.16426086]
[136.78387451 264.61920166]
[136.05288696 280.64559937]
[122.98308563 289.94937134]
[107.60052490 285.39346313]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[5 68]
[6 67]
[9 65]
[10 64]
[11 63]
[13 61]
[14 59]
[15 58]
[16 57]
[17 56]
[18 55]
[20 53]
[21 52]
[22 51]
[23 50]
[24 48]
[25 47]
[26 46]
[27 45]
[30 42]
[31 41]
[32 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
