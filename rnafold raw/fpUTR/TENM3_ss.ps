%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCUGGAGCUUGGAGGAGAAGUCUGAACUAAGGAUAAACUAAAGAGAGGCCAAUGAGACUUGAACCCUGAGCCUAAGUUGUCACCAGCAGGACUGAUGUGCACACAGAAGGAAUGAAGU\
) } def
/len { sequence length } bind def

/coor [
[83.65182495 215.76063538]
[87.51573181 201.08294678]
[96.42407990 188.79450989]
[109.17208862 180.55723572]
[106.10380554 165.87438965]
[103.03552246 151.19155884]
[99.96723938 136.50872803]
[77.82841492 129.00532532]
[64.77902222 109.61095428]
[66.16875458 86.27648926]
[53.72359848 77.90283203]
[41.27844238 69.52918243]
[28.83328819 61.15552139]
[16.38813400 52.78186798]
[3.94297862 44.40821075]
[-5.03905964 42.17248917]
[-8.71099472 35.65528870]
[-20.93642044 26.96397209]
[-38.06694412 30.21583366]
[-52.00978470 20.31552696]
[-54.48655319 3.73541546]
[-66.93170929 -4.63824034]
[-79.37686157 -13.01189613]
[-91.82202148 -21.38555145]
[-104.26717377 -29.75920868]
[-116.71233368 -38.13286209]
[-127.31974030 -27.46143913]
[-139.75520325 -18.99054909]
[-153.56915283 -13.02641201]
[-168.26226807 -9.78462601]
[-183.30335999 -9.38238144]
[-198.14872742 -11.83421803]
[-212.26171875 -17.05150414]
[-225.13215637 -24.84563637]
[-236.29476929 -34.93486404]
[-245.34605408 -46.95446777]
[-251.95878601 -60.46994400]
[-255.89395142 -74.99272156]
[-257.00927734 -89.99780273]
[-255.26445007 -104.94277191]
[-250.72254944 -119.28737640]
[-243.54776001 -132.51306152]
[-233.99943542 -144.14172363]
[-222.42274475 -153.75302124]
[-209.23619080 -160.99948120]
[-194.91644287 -165.61915588]
[-179.98115540 -167.44505310]
[-164.97024536 -166.41116333]
[-150.42633057 -162.55487061]
[-136.87516785 -156.01556396]
[-124.80662537 -147.02964783]
[-114.65697479 -135.92195129]
[-106.79311371 -123.09400177]
[-101.49932098 -109.00952911]
[-98.96696472 -94.17768097]
[-99.28758240 -79.13462067]
[-102.44958496 -64.42414093]
[-108.33867645 -50.57801819]
[-95.89351654 -42.20436478]
[-83.44836426 -33.83070755]
[-71.00321198 -25.45705223]
[-58.55805206 -17.08339500]
[-46.11289978 -8.70973969]
[-33.86728668 -12.93475342]
[-21.24634552 -9.24475956]
[-12.96279621 1.21763766]
[-12.24510288 14.73854637]
[-0.01967826 23.42986298]
[12.31663418 31.96305656]
[24.76178932 40.33671188]
[37.20694351 48.71036911]
[49.65209961 57.08402252]
[62.09725571 65.45767975]
[74.54241180 73.83133698]
[85.22580719 66.61420441]
[97.75167084 63.56055832]
[110.55791473 65.05120087]
[122.04750061 70.90024567]
[130.78758240 80.37826538]
[144.82333374 75.08698273]
[158.85908508 69.79570770]
[172.89483643 64.50442505]
[182.86744690 51.48600006]
[199.09071350 53.88131714]
[204.87554932 69.22627258]
[194.27099609 81.73529816]
[178.18612671 78.54017639]
[164.15037537 83.83145905]
[150.11462402 89.12274170]
[136.07887268 94.41401672]
[136.49662781 99.05997467]
[136.31858826 103.72127533]
[151.81814575 100.54728699]
[161.58956909 111.78866577]
[175.87910461 116.35038757]
[191.77816772 112.33147430]
[203.01260376 124.27800751]
[198.02537537 139.90040588]
[181.94692993 143.12770081]
[171.31738281 130.63992310]
[157.02784729 126.07820129]
[142.55036926 129.57847595]
[131.75686646 118.01081085]
[128.47052002 122.85426331]
[124.45239258 127.11029816]
[119.80577087 130.66952515]
[114.65007782 133.44044495]
[117.71836090 148.12327576]
[120.78663635 162.80610657]
[123.85491943 177.48895264]
[138.83477783 179.93191528]
[151.91860962 187.62463379]
[161.33691406 199.52673340]
[165.81594849 214.02854919]
[164.74995422 229.16883850]
[158.28311157 242.89997864]
[147.29000854 253.36497498]
[133.25735474 259.14849854]
[118.08296967 259.46838379]
[103.81905365 254.28137207]
[92.39468384 244.28895569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 110]
[5 109]
[6 108]
[7 107]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[17 68]
[18 67]
[21 63]
[22 62]
[23 61]
[24 60]
[25 59]
[26 58]
[79 90]
[80 89]
[81 88]
[82 87]
[92 103]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
