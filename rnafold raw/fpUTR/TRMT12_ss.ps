%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUUGCACGUCAUUUCCGGCACCGGCAUGGCCGGGUGAGCUGCAGGCUACCUUAUUUAAGACCGGGAAUUUAGUCAGCCUGGUGAGCCGACUCUGAGGAGAUGGAGUAUCGCUGAGGUG\
) } def
/len { sequence length } bind def

/coor [
[120.09295654 487.34536743]
[128.39527893 473.20312500]
[128.00906372 458.20809937]
[127.62284088 443.21307373]
[127.23661804 428.21804810]
[119.17418671 415.69421387]
[126.55359650 401.69940186]
[126.16737366 386.70434570]
[125.20238495 371.73544312]
[123.66007233 356.81494141]
[114.65515137 344.95068359]
[120.93249512 330.42810059]
[119.39018250 315.50759888]
[117.84786224 300.58709717]
[116.30554962 285.66659546]
[114.76323700 270.74609375]
[113.22091675 255.82559204]
[111.67860413 240.90510559]
[110.13629150 225.98460388]
[94.16638947 220.78599548]
[81.99489594 209.13424683]
[76.06627655 193.30354309]
[77.59974670 176.41374207]
[86.33888245 161.81553650]
[100.59304047 152.42572021]
[98.28468323 137.60440063]
[95.97631836 122.78308105]
[93.66796112 107.96176147]
[89.36849976 101.02142334]
[91.49610138 92.72956848]
[82.05092621 80.03707886]
[88.09001923 66.42169952]
[86.16403961 51.54586029]
[84.23806763 36.67002106]
[82.31209564 21.79417992]
[80.38611603 6.91833973]
[78.46014404 -7.95750046]
[76.53416443 -22.83334160]
[64.30031586 -32.47547150]
[62.55901718 -47.58912277]
[71.82670593 -59.19281006]
[69.90073395 -74.06864929]
[67.97475433 -88.94448853]
[66.04878235 -103.82032776]
[56.60360336 -116.51281738]
[62.64270020 -130.12820435]
[50.40884781 -139.77032471]
[48.66754913 -154.88398743]
[57.93523788 -166.48767090]
[56.00926208 -181.36351013]
[40.60508347 -192.23042297]
[37.95745087 -210.57572937]
[49.26802063 -224.85902405]
[46.57880783 -239.61598206]
[43.88959503 -254.37295532]
[32.86999512 -266.51794434]
[38.13502121 -282.04891968]
[54.26846695 -284.98898315]
[64.67362976 -272.31359863]
[58.64656448 -257.06216431]
[61.33577728 -242.30519104]
[64.02498627 -227.54823303]
[74.71244812 -223.17608643]
[81.99466705 -214.05978394]
[83.93744659 -202.43252563]
[79.93344116 -191.21673584]
[70.88510132 -183.28947449]
[72.81108093 -168.41363525]
[84.72831726 -159.55276489]
[86.89344025 -144.49398804]
[77.51853943 -132.05416870]
[86.82595825 -120.42570496]
[80.92462158 -105.74630737]
[82.85059357 -90.87046814]
[84.77657318 -75.99462128]
[86.70254517 -61.11878586]
[98.61978149 -52.25791168]
[100.78490448 -37.19913101]
[91.41000366 -24.75931549]
[93.33598328 -9.88347626]
[95.26195526 4.99236441]
[97.18793488 19.86820412]
[99.11390686 34.74404526]
[101.03988647 49.61988449]
[102.96585846 64.49572754]
[112.27327728 76.12419128]
[106.37194061 90.80358887]
[108.48928070 105.65340424]
[110.79763794 120.47472382]
[113.10599518 135.29603577]
[115.41436005 150.11735535]
[128.42303467 153.07559204]
[139.60504150 160.29246521]
[147.62001038 170.87670898]
[151.51620483 183.53504944]
[150.84349060 196.73016357]
[145.70518494 208.86741638]
[136.74296570 218.48759460]
[125.05678558 224.44229126]
[126.59910583 239.36279297]
[128.14141846 254.28327942]
[129.68373108 269.20379639]
[131.22604370 284.12426758]
[132.76835632 299.04476929]
[134.31068420 313.96527100]
[135.85299683 328.88577271]
[144.96823120 341.81726074]
[138.58056641 355.27261353]
[140.12287903 370.19311523]
[143.33663940 374.60705566]
[144.34863281 379.33920288]
[143.42306519 383.46682739]
[141.16239929 386.31814575]
[141.54861450 401.31317139]
[149.63868713 414.90954590]
[142.23164368 427.83181763]
[142.61785889 442.82684326]
[143.00408936 457.82186890]
[143.39030457 472.81689453]
[152.40963745 486.51300049]
[144.81726074 501.04876709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 119]
[3 118]
[4 117]
[5 116]
[7 114]
[8 113]
[9 109]
[10 108]
[12 106]
[13 105]
[14 104]
[15 103]
[16 102]
[17 101]
[18 100]
[19 99]
[25 91]
[26 90]
[27 89]
[28 88]
[30 87]
[32 85]
[33 84]
[34 83]
[35 82]
[36 81]
[37 80]
[38 79]
[41 76]
[42 75]
[43 74]
[44 73]
[46 71]
[49 68]
[50 67]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
