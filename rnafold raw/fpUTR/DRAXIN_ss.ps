%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCACAUCCUCCGGCUGCCCGCGCACCUCUCCACGCCGGCCCCGUUCCGCGGCUCGCCCUCGGCUGCGCUCGGCUCCCGCGGGCGCUCGGCCCCGAGCCCCUCCUCCCCCUACCCGCCGGCCGGACAGGGAGGAGCCA\
) } def
/len { sequence length } bind def

/coor [
[-34.83489609 360.41696167]
[-42.47914505 373.32299805]
[-50.12339401 386.22900391]
[-57.76764297 399.13504028]
[-65.41189575 412.04104614]
[-73.05614471 424.94708252]
[-69.73081207 435.41000366]
[-72.69658661 445.75112915]
[-80.72579193 452.57531738]
[-90.97166443 453.78338623]
[-99.18325043 466.33609009]
[-102.79434967 482.90100098]
[-119.71155548 484.01663208]
[-125.46674347 468.06939697]
[-111.73593140 458.12451172]
[-103.52434540 445.57180786]
[-103.94798279 426.28759766]
[-85.96216583 417.30282593]
[-78.31791687 404.39682007]
[-70.67366791 391.49078369]
[-63.02941895 378.58474731]
[-55.38516998 365.67874146]
[-47.74091721 352.77270508]
[-49.02318954 333.52648926]
[-31.45546532 323.74945068]
[-24.39372826 310.51571655]
[-25.22817802 295.64450073]
[-11.90506935 287.11187744]
[-4.84333086 273.87814331]
[2.21840763 260.64440918]
[9.28014565 247.41067505]
[16.34188461 234.17694092]
[23.40362358 220.94319153]
[16.46460152 209.48527527]
[16.11095619 195.98609924]
[22.54305840 183.98930359]
[34.16584778 176.69740295]
[47.98300934 176.11712646]
[55.33782959 163.04399109]
[62.69264984 149.97087097]
[70.04747009 136.89773560]
[77.40229034 123.82461548]
[84.75711060 110.75148773]
[81.44257355 96.12227631]
[69.17128754 87.49582672]
[56.90000153 78.86938477]
[44.62871552 70.24293518]
[28.19372177 66.08033752]
[27.64398956 49.13529968]
[43.77462387 43.91620255]
[53.25516129 57.97165298]
[65.52645111 66.59809875]
[77.79772949 75.22454834]
[90.06901550 83.85099030]
[96.83660889 80.61838531]
[98.00513458 65.66397095]
[110.37178802 74.15318298]
[117.13937378 70.92057800]
[118.14126587 55.95407486]
[119.14315796 40.98757172]
[120.14504242 26.02106857]
[113.34677124 11.73491859]
[121.91688538 -0.44713727]
[122.91876984 -15.41364002]
[123.92066193 -30.38014412]
[113.79405212 -42.21608353]
[115.02330780 -57.37997437]
[126.36947632 -66.96121216]
[127.37136841 -81.92771149]
[117.93512726 -94.90218353]
[122.33431244 -110.33029938]
[137.19425964 -116.37692261]
[151.11567688 -108.40361023]
[153.41925049 -92.52680206]
[142.33787537 -80.92582703]
[141.33598328 -65.95932007]
[151.30384827 -54.95127487]
[150.50100708 -39.75884247]
[138.88716125 -29.37825394]
[137.88526917 -14.41175079]
[136.88339233 0.55475223]
[143.75332642 13.77039719]
[135.11154175 27.02295685]
[134.10966492 41.98945999]
[133.10777283 56.95596313]
[132.10588074 71.92247009]
[144.92594910 79.71001434]
[157.74600220 71.92247009]
[170.56607056 64.13491821]
[183.38613892 56.34736633]
[196.20620728 48.55981445]
[203.60853577 33.92638016]
[219.99536133 33.29056168]
[228.50930786 47.30643463]
[220.39195251 61.55567551]
[203.99375916 61.37987900]
[191.17369080 69.16742706]
[178.35362244 76.95497894]
[165.53355408 84.74253082]
[152.71350098 92.53008270]
[167.37159729 95.71440887]
[180.79185486 102.41490936]
[192.14546204 112.21775055]
[200.73121643 124.51753998]
[206.01887512 138.55465698]
[207.68190002 153.46218872]
[205.61756897 168.31945801]
[199.95338440 182.20890808]
[191.03913879 194.27275085]
[179.42538452 203.76593018]
[165.82934570 210.10217285]
[151.09072876 212.89016724]
[136.11973572 211.95770264]
[121.84096527 207.36239624]
[109.13626862 199.38801575]
[98.79025269 188.52708435]
[91.44187164 175.45033264]
[87.54496765 160.96537781]
[87.34018707 145.96676636]
[90.84019470 131.38082886]
[97.83023071 118.10630798]
[90.47541046 131.17942810]
[83.12059784 144.25256348]
[75.76577759 157.32568359]
[68.41095734 170.39881897]
[61.05613708 183.47193909]
[68.31440735 198.70704651]
[65.12282562 215.10951233]
[52.92579269 226.28758240]
[36.63736343 228.00492859]
[29.57562447 241.23867798]
[22.51388550 254.47241211]
[15.45214653 267.70614624]
[8.39040852 280.93988037]
[1.32866979 294.17361450]
[1.65801692 309.99139404]
[-11.15998840 317.57745361]
[-18.22172737 330.81118774]
[-14.43360615 341.11557007]
[-16.93577385 351.57858276]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[10 16]
[11 15]
[25 138]
[26 137]
[28 135]
[29 134]
[30 133]
[31 132]
[32 131]
[33 130]
[38 126]
[39 125]
[40 124]
[41 123]
[42 122]
[43 121]
[44 54]
[45 53]
[46 52]
[47 51]
[58 86]
[59 85]
[60 84]
[61 83]
[63 81]
[64 80]
[65 79]
[68 76]
[69 75]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
