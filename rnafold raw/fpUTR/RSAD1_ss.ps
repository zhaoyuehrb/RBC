%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCCUUCCGCCGGCUGCGCACUCACAGUGAUCCCUGCGCGCGUCUCCUGCUCGGGUCAGUGCGCCGCGCUGCGCUGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[76.02577209 338.66995239]
[64.94565582 349.11749268]
[50.57192993 354.14898682]
[35.39492035 352.89266968]
[22.04414177 345.56625366]
[12.83269405 333.43902588]
[9.35651588 318.61218262]
[12.21787834 303.65447998]
[20.92103195 291.15747070]
[33.95810318 283.28634644]
[49.07033920 281.40481567]
[53.39182663 267.04080200]
[57.71331406 252.67678833]
[62.03479767 238.31278992]
[66.09322357 223.87223816]
[69.88722229 209.35998535]
[73.68122101 194.84773254]
[67.02565765 176.84503174]
[80.84854126 162.39311218]
[83.57309723 147.64262390]
[86.29764557 132.89213562]
[89.02220154 118.14165497]
[80.57709503 108.50778198]
[79.22202301 95.76828003]
[85.45163727 84.57350159]
[96.99190521 79.00993347]
[92.44029236 63.85759354]
[102.75977325 53.11713028]
[106.02122498 38.47599411]
[101.46961212 23.32365608]
[111.78909302 12.58319473]
[115.05054474 -2.05794311]
[118.31200409 -16.69908142]
[121.57345581 -31.34021950]
[124.83490753 -45.98135757]
[128.09635925 -60.62249756]
[119.88312531 -73.85807800]
[123.39926910 -88.65981293]
[136.06799316 -96.40830994]
[139.32943726 -111.04944611]
[142.59089661 -125.69058228]
[131.66374207 -136.58099365]
[128.38136292 -151.65512085]
[133.79115295 -166.10289001]
[146.16685486 -175.31404114]
[161.55944824 -176.34934998]
[175.05718994 -168.87844849]
[182.35301208 -155.28526306]
[181.11885071 -139.90734863]
[171.74850464 -127.65173340]
[157.23202515 -122.42913055]
[153.97058105 -107.78799438]
[150.70912170 -93.14685059]
[158.89109802 -80.75366974]
[155.79208374 -65.85901642]
[142.73750305 -57.36104202]
[139.47604370 -42.71990585]
[136.21458435 -28.07876778]
[132.95314026 -13.43762875]
[129.69168091 1.20350945]
[126.43023682 15.84464741]
[131.21513367 29.94975281]
[120.66236877 41.73744583]
[117.40091705 56.37858582]
[122.18581390 70.48368835]
[111.63304901 82.27138519]
[120.79816437 95.86865997]
[117.52572632 111.93652344]
[103.77268219 120.86620331]
[101.04813385 135.61668396]
[98.32357788 150.36717224]
[95.59902954 165.11766052]
[102.43503571 173.95690918]
[103.12607574 184.88673401]
[97.68332672 194.13282776]
[88.19347382 198.64173889]
[84.39947510 213.15399170]
[80.60547638 227.66624451]
[81.46004486 237.00454712]
[76.39881134 242.63427734]
[72.07732391 256.99829102]
[67.75583649 271.36230469]
[63.43434906 285.72628784]
[74.99974823 295.63394165]
[81.52960205 309.39187622]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 83]
[12 82]
[13 81]
[14 80]
[15 78]
[16 77]
[17 76]
[19 72]
[20 71]
[21 70]
[22 69]
[26 66]
[28 64]
[29 63]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[39 53]
[40 52]
[41 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
