%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAGCCAGAGAGAGCUGCGGAGAGCUGCCAGCUGCAGCGGGCGUGUUCCGCAGCUGUAGGCACCUGUCGUCCUGCCUUCG\
) } def
/len { sequence length } bind def

/coor [
[82.89688873 165.78288269]
[82.32926941 150.79362488]
[81.76164246 135.80436707]
[81.19402313 120.81510925]
[74.50592804 134.24154663]
[60.24783325 138.90060425]
[45.47240829 136.31469727]
[33.64413834 127.09015656]
[27.53645897 113.38993073]
[28.58147240 98.42637634]
[36.53414917 85.70808411]
[49.52978134 78.21718597]
[64.52120972 77.71011353]
[77.99552155 84.30763245]
[89.89634705 93.43836212]
[83.82989502 79.71983337]
[77.76344299 66.00129700]
[71.69699097 52.28276443]
[65.63053894 38.56423187]
[59.56408691 24.84569740]
[53.49763489 11.12716484]
[47.43118286 -2.59136868]
[41.36473083 -16.30990219]
[35.29827881 -30.02843475]
[22.64077950 -39.52044678]
[24.56978226 -54.28961182]
[18.50333023 -68.00814056]
[12.01135826 -74.79547119]
[12.47783756 -82.36249542]
[6.93486071 -96.30076599]
[1.39188313 -110.23903656]
[-10.89735889 -120.20323181]
[-8.41085148 -134.88882446]
[-13.95382977 -148.82708740]
[-27.14958763 -158.56382751]
[-25.04657364 -174.82757568]
[-9.80818939 -180.88757324]
[2.88962221 -170.50982666]
[-0.01555832 -154.37007141]
[5.52741909 -140.43179321]
[17.42019081 -131.46456909]
[15.33015442 -115.78202057]
[20.87313080 -101.84375000]
[26.41610909 -87.90547180]
[32.22186279 -74.07459259]
[38.28831482 -60.35606384]
[50.51190186 -51.84529495]
[49.01681519 -36.09488678]
[55.08326721 -22.37635422]
[61.14971924 -8.65782070]
[67.21617126 5.06071281]
[73.28262329 18.77924538]
[79.34907532 32.49777985]
[85.41552734 46.21631241]
[91.48197937 59.93484497]
[97.54843140 73.65338135]
[103.61488342 87.37191010]
[114.32137299 97.87767792]
[128.15225220 103.68342590]
[141.98313904 109.48918152]
[155.81401062 115.29493713]
[169.64489746 121.10069275]
[179.02505493 121.57598114]
[183.88264465 127.39675140]
[197.48391724 133.72172546]
[212.98623657 129.59161377]
[225.79457092 139.25215149]
[226.08346558 155.29260254]
[213.63131714 165.40811157]
[197.99032593 161.83891296]
[191.15895081 147.32299805]
[177.55766296 140.99803162]
[163.83914185 134.93157959]
[150.00825500 129.12582397]
[136.17738342 123.32006073]
[122.34649658 117.51430511]
[108.51561737 111.70855713]
[96.18328094 120.24748993]
[96.75090027 135.23674011]
[97.31852722 150.22599792]
[97.88614655 165.21525574]
[100.80415344 184.37602234]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[4 78]
[15 57]
[16 56]
[17 55]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[26 46]
[27 45]
[29 44]
[30 43]
[31 42]
[33 40]
[34 39]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[64 72]
[65 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
