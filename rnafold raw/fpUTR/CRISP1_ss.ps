%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUCUUUGCAGCUACCAGGACAGAGCUUGGUGAGAUAAUUCUUUUAUUCUUCAACUUUUAUUUUAACUUCAAUGGUACAUGUGCAGGG\
) } def
/len { sequence length } bind def

/coor [
[82.06609344 378.02874756]
[69.18562317 387.18673706]
[53.61620331 384.47222900]
[44.59489441 371.49563599]
[47.47388077 355.95578003]
[60.54511261 347.07217407]
[63.12149811 332.29510498]
[65.69788361 317.51800537]
[68.27426910 302.74093628]
[70.85065460 287.96383667]
[73.42704010 273.18676758]
[76.00342560 258.40966797]
[64.57939911 244.30982971]
[66.91394043 225.99755859]
[82.01425171 214.84222412]
[83.56501007 199.92260742]
[85.11576843 185.00299072]
[86.66652679 170.08335876]
[88.21728516 155.16374207]
[80.16086578 139.67736816]
[90.81439972 124.78093719]
[91.84926605 109.81668091]
[87.40200043 101.19562531]
[90.30989075 92.02503204]
[86.72015381 77.46089935]
[83.13041687 62.89677429]
[79.54067993 48.33264923]
[74.34479523 40.55360794]
[76.08764648 33.20389175]
[73.00274658 18.52453995]
[69.91784668 3.84518743]
[66.83294678 -10.83416557]
[56.42290115 -22.74808693]
[61.37731552 -36.79454803]
[58.29241562 -51.47389984]
[55.20751953 -66.15325165]
[50.28322601 -74.10700226]
[52.27872467 -81.39218140]
[49.70233536 -96.16926575]
[47.12594986 -110.94635010]
[34.88172913 -121.31256866]
[35.49622345 -137.34385681]
[48.49805450 -146.74235535]
[63.91332245 -142.29837036]
[69.91675568 -127.42092896]
[61.90303802 -113.52273560]
[64.47942352 -98.74565125]
[67.05580902 -83.96856689]
[69.88687134 -69.23815155]
[72.97177124 -54.55879974]
[76.05667114 -39.87944412]
[86.24606323 -29.01548958]
[81.51229858 -13.91906452]
[84.59719849 0.76028883]
[87.68209839 15.43964195]
[90.76699829 30.11899376]
[94.10481262 44.74291229]
[97.69454193 59.30704117]
[101.28427887 73.87117004]
[104.87401581 88.43529510]
[112.66596222 75.61789703]
[125.66264343 68.12883759]
[140.65936279 67.81474304]
[153.95820618 74.75308228]
[162.27998352 87.23299408]
[163.57267761 102.17718506]
[157.51756287 115.90073395]
[145.60769653 125.01967621]
[130.77981567 127.28547668]
[116.69017029 122.13943481]
[106.81352234 110.85154724]
[105.77865601 125.81580353]
[113.70596313 136.16700745]
[112.40514374 148.73413086]
[103.13690948 156.71449280]
[101.58615112 171.63412476]
[100.03539276 186.55374146]
[98.48463440 201.47335815]
[96.93387604 216.39299011]
[106.25859070 224.17175293]
[110.53063202 235.40916443]
[108.76435852 247.17816162]
[101.53070831 256.47503662]
[90.78050995 260.98605347]
[88.20412445 275.76315308]
[85.62773895 290.54022217]
[83.05135345 305.31732178]
[80.47496796 320.09439087]
[77.89858246 334.87149048]
[75.32219696 349.64855957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 90]
[7 89]
[8 88]
[9 87]
[10 86]
[11 85]
[12 84]
[15 79]
[16 78]
[17 77]
[18 76]
[19 75]
[21 72]
[22 71]
[24 60]
[25 59]
[26 58]
[27 57]
[29 56]
[30 55]
[31 54]
[32 53]
[34 51]
[35 50]
[36 49]
[38 48]
[39 47]
[40 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
