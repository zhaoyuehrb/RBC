%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGGCUGCGUCGGCCGCGUAGCCCGCGCGCGGAGCGUACCCUGCUGCGGCCGUUGGCCGUUAGCGCGGCUUCGGCGGUUGUCUUGGAGAAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[93.98152161 152.61062622]
[84.93391418 140.64646912]
[85.10305023 125.64743042]
[94.41921234 113.88965607]
[82.60569763 123.13308716]
[70.79218292 132.37651062]
[58.97867203 141.61993408]
[47.16516113 150.86337280]
[35.35165024 160.10679626]
[23.53813934 169.35021973]
[11.72462654 178.59364319]
[8.36147499 194.28022766]
[-6.06332302 201.30195618]
[-20.48429680 194.27236938]
[-23.83890915 178.58396912]
[-13.55378914 166.27154541]
[2.48119998 166.78013611]
[14.29471207 157.53671265]
[26.10822296 148.29327393]
[37.92173386 139.04985046]
[49.73524475 129.80642700]
[61.54875946 120.56300354]
[73.36226654 111.31957245]
[85.17578125 102.07614899]
[90.85987854 88.19482422]
[88.92205811 73.32052612]
[86.98423767 58.44622421]
[85.04641724 43.57192230]
[83.10859680 28.69762230]
[76.97797394 15.00764561]
[67.17176056 3.65695310]
[57.36554718 -7.69373941]
[47.55933762 -19.04443169]
[32.10915375 -17.60518074]
[18.78092957 -25.55112648]
[12.69963932 -39.82689667]
[16.20366478 -54.94315720]
[27.94563293 -65.08740997]
[43.41052246 -66.35897064]
[56.65176392 -58.26890182]
[62.57783127 -43.92800522]
[58.91002655 -28.85064316]
[68.71623993 -17.49995041]
[78.52245331 -6.14925861]
[88.32866669 5.20143366]
[95.69149017 -4.04293919]
[105.99295044 -6.79570293]
[111.22456360 -20.85380363]
[116.45618439 -34.91190338]
[121.68779755 -48.97000504]
[126.91941833 -63.02810669]
[132.15103149 -77.08620453]
[132.00865173 -94.03955841]
[148.26004028 -98.86952972]
[157.40008545 -84.59032440]
[146.20913696 -71.85459137]
[140.97750854 -57.79648972]
[135.74589539 -43.73838806]
[130.51428223 -29.68028831]
[125.28266907 -15.62218666]
[120.05104828 -1.56408656]
[125.15103912 12.94776058]
[115.68027496 26.50828171]
[97.98289490 26.75979996]
[99.92071533 41.63410187]
[101.85853577 56.50840378]
[103.79636383 71.38270569]
[105.73418427 86.25700378]
[124.51182556 99.52458191]
[137.42048645 107.16438293]
[150.32913208 114.80418396]
[163.23779297 122.44398499]
[176.14645386 130.08378601]
[191.27618408 126.37850952]
[204.25856018 134.31024170]
[207.69773865 148.75695801]
[220.60639954 156.39677429]
[233.51504517 164.03657532]
[249.34996033 161.46070862]
[261.13952637 172.34124756]
[259.83978271 188.33155823]
[246.44778442 197.16525269]
[231.23674011 192.06587219]
[225.87524414 176.94522095]
[212.96659851 169.30541992]
[200.05793762 161.66561890]
[185.73878479 165.60232544]
[172.53874207 158.03837585]
[168.50665283 142.99244690]
[155.59799194 135.35264587]
[142.68933105 127.71284485]
[129.78068542 120.07303619]
[116.87202454 112.43323517]
[127.62850189 122.88780975]
[129.73472595 137.73921204]
[122.30928040 150.77233887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[30 45]
[31 44]
[32 43]
[33 42]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
[69 93]
[70 92]
[71 91]
[72 90]
[73 89]
[76 86]
[77 85]
[78 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
