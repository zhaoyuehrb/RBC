%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUCUGAGUUUCUUCCUAGCGAGGCCGAGAGGGUCUUUGAGGAAAAUCCCGCAUCCGGACACGCCUUGAGGGAUGGCGUCAAACCCAGAGGCUUGGAAAAGACAACAAGGGAGGUGUCACAGUUUUCCAUUUAGAUCAACAACUUCAAGUUCUUACC\
) } def
/len { sequence length } bind def

/coor [
[115.54102325 262.01187134]
[120.71984100 247.86994934]
[128.81806946 235.17219543]
[139.45690918 224.51251221]
[152.13879395 216.38945007]
[146.94703674 202.31658936]
[141.75527954 188.24371338]
[136.56352234 174.17085266]
[131.37176514 160.09797668]
[126.18001556 146.02510071]
[120.98825836 131.95223999]
[105.06386566 141.91265869]
[84.55990601 143.54991150]
[63.93467712 134.91101074]
[48.36984634 116.43544769]
[34.40162277 121.90250397]
[20.43339920 127.36956024]
[6.46517563 132.83662415]
[-7.50304842 138.30368042]
[-11.45915794 151.21105957]
[-21.98364830 159.35119629]
[-35.08159637 159.91842651]
[-45.94253540 152.92948914]
[-60.01540756 158.12124634]
[-74.08827972 163.31298828]
[-88.16114807 168.50474548]
[-102.23401642 173.69650269]
[-116.30688477 178.88825989]
[-124.30223083 192.79704285]
[-140.18266296 195.07546997]
[-151.76608276 183.97575378]
[-150.16668701 168.01261902]
[-136.61137390 159.43164062]
[-121.49864197 164.81539917]
[-107.42577362 159.62364197]
[-93.35290527 154.43188477]
[-79.28002930 149.24012756]
[-65.20716095 144.04837036]
[-51.13429260 138.85661316]
[-44.77554703 123.31252289]
[-28.83766747 117.02982330]
[-12.97010612 124.33545685]
[0.99811828 118.86840057]
[14.96634197 113.40133667]
[28.93456650 107.93428040]
[42.90279007 102.46722412]
[43.78432083 95.01921082]
[28.88832283 93.25590515]
[30.65187836 78.35993195]
[45.54738235 80.12318420]
[46.42891312 72.67517090]
[34.12289047 64.09835052]
[21.81686974 55.52153397]
[5.43996000 54.66778183]
[-1.76705825 39.93717194]
[7.60977697 26.48328781]
[23.92438126 28.14633369]
[30.39368820 43.21551132]
[42.69971085 51.79233170]
[55.00573349 60.36914825]
[61.62014008 56.83367538]
[54.54939270 43.60474396]
[67.77843475 36.53420258]
[74.84896088 49.76272202]
[81.46337128 46.22724915]
[81.16886139 31.23013878]
[80.87435913 16.23303032]
[80.57985687 1.23592162]
[80.28534698 -13.76118660]
[69.17430878 -24.67826462]
[69.08927917 -39.89166260]
[79.56552124 -50.41706085]
[79.27101135 -65.41416931]
[68.15997314 -76.33124542]
[68.07494354 -91.54463959]
[78.55118561 -102.07003784]
[78.25667572 -117.06714630]
[69.32127380 -130.81816101]
[77.00241089 -145.30720520]
[93.39839172 -145.62918091]
[101.64244843 -131.45288086]
[93.25379181 -117.36165619]
[93.54829407 -102.36454773]
[104.42967987 -92.25856018]
[104.94199371 -77.05355072]
[94.26811981 -65.70867157]
[94.56262970 -50.71156311]
[105.44401550 -40.60557556]
[105.95632172 -25.40057182]
[95.28245544 -14.05569267]
[95.57696533 0.94141626]
[95.87146759 15.93852520]
[96.16596985 30.93563271]
[96.46047974 45.93274307]
[122.16735840 56.45239258]
[136.80903625 76.73130035]
[138.21449280 98.94889832]
[152.72848511 95.16152191]
[167.24246216 91.37414551]
[181.75645447 87.58677673]
[196.27044678 83.79940033]
[210.78442383 80.01202393]
[225.13853455 75.65775299]
[239.31062317 70.74330139]
[253.48271179 65.82884979]
[267.65481567 60.91439819]
[278.15832520 49.08279800]
[292.71807861 52.22320557]
[299.38885498 37.89573288]
[314.26525879 32.56019211]
[328.52142334 39.38206100]
[333.69937134 54.31404877]
[326.72717285 68.49726868]
[311.74127197 73.51707458]
[297.63253784 66.39529419]
[288.14273071 77.87538147]
[272.56924438 75.08648682]
[258.39715576 80.00093842]
[244.22508240 84.91539764]
[230.05297852 89.82984924]
[228.71243286 92.34783936]
[226.26777649 94.47186279]
[222.86938477 95.76885986]
[218.82498169 95.87029266]
[214.57179260 94.52601624]
[200.05781555 98.31338501]
[185.54382324 102.10076141]
[171.02984619 105.88813019]
[156.51585388 109.67550659]
[142.00186157 113.46288300]
[135.06112671 126.76048279]
[140.25288391 140.83334351]
[145.44464111 154.90621948]
[150.63639832 168.97909546]
[155.82815552 183.05195618]
[161.01991272 197.12483215]
[166.21166992 211.19769287]
[181.13053894 209.13829041]
[196.14329529 210.33460999]
[210.54776001 214.73068237]
[223.67021179 222.12089539]
[234.89688110 232.15962219]
[243.70268250 244.37731934]
[249.67575073 258.20251465]
[252.53672791 272.98861694]
[252.15177917 288.04406738]
[248.53890991 302.66464233]
[241.86712646 316.16653442]
[232.44845581 327.91824341]
[220.72343445 337.37011719]
[207.24044800 344.08007812]
[192.63015747 347.73428345]
[177.57588196 348.16180420]
[162.78173828 345.34268188]
[148.93968201 339.40872192]
[136.69714355 330.63751221]
[126.62670135 319.43930054]
[119.19939423 306.33779907]
[114.76258850 291.94583130]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 137]
[6 136]
[7 135]
[8 134]
[9 133]
[10 132]
[11 131]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[51 60]
[52 59]
[53 58]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[72 87]
[73 86]
[76 83]
[77 82]
[97 130]
[98 129]
[99 128]
[100 127]
[101 126]
[102 125]
[103 120]
[104 119]
[105 118]
[106 117]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
