%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUGGGUAGGCGGCGGCGGCGGCGGCUACGCGGAGCGGCAGGCGGUGGAGCGAGGCCGCGCGCGCCGAAG\
) } def
/len { sequence length } bind def

/coor [
[126.85046387 108.67945862]
[111.86473846 108.02516937]
[99.37519836 114.31031036]
[87.48097229 106.96055603]
[72.49524689 106.30625916]
[58.37071228 113.43424225]
[45.99304962 105.14914703]
[31.00732803 104.49485779]
[16.02160454 103.84056854]
[1.03588092 103.18627930]
[-13.08865261 110.31426239]
[-25.46631432 102.02916718]
[-40.45203781 101.37487793]
[-54.57657242 108.50286102]
[-66.95423126 100.21776581]
[-81.93995667 99.56347656]
[-96.22841644 107.61158752]
[-110.20281219 99.02973175]
[-109.48749542 82.64619446]
[-94.81831360 75.31494904]
[-81.28566742 84.57775116]
[-66.29994202 85.23204041]
[-53.24728775 78.05725861]
[-39.79774857 86.38915253]
[-24.81202507 87.04344177]
[-11.75936985 79.86866760]
[1.69017172 88.20055389]
[16.67589569 88.85484314]
[31.66161919 89.50914001]
[46.64734268 90.16342926]
[59.69999695 82.98864746]
[73.14953613 91.32054138]
[88.13526154 91.97483063]
[100.62480164 85.68968964]
[112.51902771 93.03944397]
[127.50475311 93.69374084]
[142.49047852 93.03944397]
[157.36215210 91.08155823]
[172.23382568 89.12366486]
[187.10549927 87.16577148]
[201.25158691 75.60900879]
[217.21160889 82.57231903]
[231.92338562 79.64596558]
[246.56782532 76.39936829]
[261.21228027 73.15277863]
[275.85671997 69.90618134]
[290.50115967 66.65958405]
[296.56484985 52.37633514]
[309.88327026 44.41396713]
[325.33520508 45.83417511]
[336.97909546 56.09086227]
[340.33758545 71.24011993]
[334.11932373 85.45674896]
[320.71530151 93.27416992]
[305.27966309 91.68642426]
[293.74774170 81.30403137]
[279.10330200 84.55062103]
[264.45886230 87.79721832]
[249.81442261 91.04380798]
[235.16998291 94.29040527]
[229.13494873 98.95894623]
[219.81632996 97.34443665]
[212.46195984 107.19416809]
[199.94612122 109.33427429]
[189.06338501 102.03744507]
[174.19171143 103.99533844]
[159.32003784 105.95322418]
[144.44836426 107.91111755]
[142.60379028 110.41582489]
[139.49955750 112.21225739]
[135.45521545 112.74986267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[4 33]
[5 32]
[7 30]
[8 29]
[9 28]
[10 27]
[12 25]
[13 24]
[15 22]
[16 21]
[37 68]
[38 67]
[39 66]
[40 65]
[42 62]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
