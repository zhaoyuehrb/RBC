%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUUGGAGGAGCUUGAAGUUAAAGACUCCUGCUAAAAACCAGUACGUUUCAUUUUGCAGUUACUGGGAGGGGGCUUGCUGUGGCCCUGUCAGGAAGAGUAGAGCUCUGGUCCAGCUCCGCGCAGGGAGGGAGGCUGUCACC\
) } def
/len { sequence length } bind def

/coor [
[103.48486328 171.94361877]
[101.20301819 157.11819458]
[98.92116547 142.29277039]
[84.23731232 139.26040649]
[71.53330994 131.29679871]
[59.63300705 140.42822266]
[47.73270798 149.55964661]
[35.83240891 158.69107056]
[24.03242111 167.95175171]
[12.33415508 177.34060669]
[0.63588744 186.72946167]
[-11.06237984 196.11831665]
[-22.76064682 205.50717163]
[-34.35580444 215.02307129]
[-45.84646988 224.66487122]
[-57.33713531 234.30668640]
[-57.15620422 249.94322205]
[-67.10850525 262.00497437]
[-82.49486542 264.79675293]
[-96.05031586 257.00033569]
[-101.37438965 242.29701233]
[-95.95321655 227.62918091]
[-82.34651184 219.92259216]
[-66.97895050 222.81602478]
[-55.48828506 213.17420959]
[-43.99761963 203.53239441]
[-40.87183380 196.77224731]
[-32.14949799 193.80889893]
[-20.45123100 184.42004395]
[-8.75296497 175.03118896]
[2.94530249 165.64233398]
[14.64356995 156.25349426]
[17.91608238 149.56312561]
[26.70098686 146.79077148]
[38.60128784 137.65934753]
[50.50158691 128.52792358]
[62.40188599 119.39650726]
[56.89248276 105.40467834]
[56.55853271 89.97375488]
[61.71475220 75.00525665]
[71.98272705 62.43761826]
[61.61003113 51.60215759]
[51.23733521 40.76670074]
[40.86463928 29.93124008]
[30.49194336 19.09577942]
[20.11924744 8.26032066]
[9.62897491 -2.46134782]
[-1.09269345 -12.95162106]
[-11.92815304 -23.32431602]
[-27.17304802 -20.43074036]
[-41.19283295 -27.08094788]
[-48.59661484 -40.71779633]
[-46.53748703 -56.09764099]
[-35.80722809 -67.30661774]
[-20.53183746 -70.03464508]
[-6.58502007 -63.23274231]
[0.67039150 -49.51637650]
[-1.55545712 -34.15977478]
[9.28000259 -23.78708076]
[16.34027100 -21.41583061]
[20.23557663 -13.06794930]
[27.24243546 -10.54324532]
[30.95470810 -2.11237526]
[41.32740402 8.72308445]
[51.70009995 19.55854416]
[62.07279587 30.39400291]
[72.44548798 41.22946167]
[82.81818390 52.06492233]
[97.52996826 49.13856888]
[102.96653748 35.15844727]
[100.75701904 19.49228859]
[112.58109283 10.43466187]
[118.01766205 -3.54545569]
[123.45423126 -17.52557373]
[128.89080811 -31.50569153]
[134.32737732 -45.48580933]
[139.76394653 -59.46592712]
[133.17021179 -73.82901764]
[138.74223328 -88.61847687]
[153.17424011 -95.05998230]
[167.90396118 -89.33190918]
[174.19252014 -74.83261108]
[168.30903625 -60.16427612]
[153.74406433 -54.02935791]
[148.30749512 -40.04924011]
[142.87092590 -26.06912041]
[137.43435669 -12.08900356]
[131.99777222 1.89111483]
[126.56121063 15.87123299]
[129.15959167 30.53744316]
[116.94665527 40.59502029]
[111.51008606 54.57513809]
[129.83435059 66.86997986]
[139.70152283 85.38385010]
[154.47363281 82.77912903]
[169.24575806 80.17440796]
[183.95753479 77.24805450]
[198.60197449 74.00145721]
[213.24641418 70.75485992]
[227.89085388 67.50827026]
[242.53529358 64.26167297]
[256.69030762 54.93044281]
[269.57537842 65.94912720]
[262.55422974 81.38091278]
[245.78189087 78.90611267]
[231.13745117 82.15270996]
[216.49301147 85.39929962]
[201.84857178 88.64589691]
[187.20413208 91.89249420]
[183.89474487 95.43107605]
[178.30088806 96.88086700]
[171.85047913 94.94652557]
[157.07835388 97.55124664]
[142.30624390 100.15596771]
[141.70742798 107.09452820]
[139.97840881 113.84084320]
[137.16603088 120.21208954]
[148.86430359 129.60093689]
[160.56256104 138.98979187]
[172.26083374 148.37864685]
[187.94192505 146.40914917]
[200.37135315 156.17056274]
[202.17494202 171.87159729]
[192.28265381 184.19711304]
[176.56343079 185.83460999]
[164.34318542 175.81257629]
[162.87197876 160.07690430]
[151.17372131 150.68806458]
[139.47544861 141.29920959]
[127.77718353 131.91035461]
[124.57917786 134.43408203]
[121.15326691 136.63853455]
[117.53120422 138.50323486]
[113.74658966 140.01092529]
[116.02843475 154.83634949]
[118.31028748 169.66177368]
[132.16636658 176.64663696]
[139.24063110 190.45730591]
[136.81285095 205.78329468]
[125.81658173 216.73141479]
[110.48010254 219.09193420]
[96.70060730 211.95715332]
[89.77658844 198.07055664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[5 37]
[6 36]
[7 35]
[8 34]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[14 26]
[15 25]
[16 24]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 61]
[48 59]
[49 58]
[69 92]
[70 91]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
[94 114]
[95 113]
[96 112]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
