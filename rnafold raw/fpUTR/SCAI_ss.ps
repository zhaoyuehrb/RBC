%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCUGGCAGAGGCGCGAGGCCCUCCUCCCGCCUCUCCGCCUACUCCAGCCUCCGCCGCCUCAGCUUCCCGAGCGAGCCCUGCGGCCGCCGGAGCAGCUCCCGCGGCGGAGCAGGAGCCGG\
) } def
/len { sequence length } bind def

/coor [
[0.61555624 200.98721313]
[-4.22487593 215.18475342]
[-17.58109283 222.01202393]
[-31.92376900 217.62025452]
[-39.16748428 204.48524475]
[-35.22811127 190.01078796]
[-49.06790543 195.79525757]
[-62.90770340 201.57972717]
[-69.71483612 207.84829712]
[-77.17557526 207.33020020]
[-91.15858459 212.75932312]
[-105.14159393 218.18846130]
[-119.12460327 223.61758423]
[-133.10760498 229.04672241]
[-147.09062195 234.47584534]
[-161.07362366 239.90498352]
[-171.13771057 252.11256409]
[-185.80252075 249.50637817]
[-199.78553772 254.93551636]
[-213.76853943 260.36465454]
[-227.75155640 265.79376221]
[-237.59558105 278.90969849]
[-253.84162903 276.67413330]
[-259.77716064 261.38684082]
[-249.29621887 248.77406311]
[-233.18067932 251.81076050]
[-219.19767761 246.38163757]
[-205.21466064 240.95249939]
[-191.23165894 235.52337646]
[-182.16773987 223.70411682]
[-166.50276184 225.92196655]
[-152.51974487 220.49284363]
[-138.53674316 215.06370544]
[-124.55373383 209.63458252]
[-110.57072449 204.20544434]
[-96.58771515 198.77632141]
[-82.60470581 193.34718323]
[-68.69216919 187.73992920]
[-54.85237503 181.95545959]
[-41.01257706 176.17100525]
[-27.65618706 169.34408569]
[-14.86158371 161.51477051]
[-11.63579750 147.01890564]
[1.22821939 138.89660645]
[16.41093636 142.37840271]
[29.20554161 134.54908752]
[42.00014496 126.71977997]
[54.79475021 118.89047241]
[61.61226273 105.64770508]
[77.42195892 105.04436493]
[90.21656799 97.21504974]
[94.96909332 90.57920837]
[103.43942261 89.35399628]
[116.42980194 81.85399628]
[129.42018127 74.35399628]
[142.41056824 66.85399628]
[155.40093994 59.35399628]
[168.39132690 51.85399628]
[181.38169861 44.35399628]
[194.37208557 36.85399628]
[196.11300659 21.54793930]
[206.41239929 10.33296394]
[221.16618347 7.36817789]
[234.67498779 13.58510303]
[247.66537476 6.08510256]
[260.65576172 -1.41489744]
[273.64614868 -8.91489697]
[281.72879028 -22.51568222]
[296.61956787 -22.17861938]
[309.51312256 -29.84389877]
[322.30773926 -37.67321014]
[335.10232544 -45.50252151]
[340.87280273 -52.73672104]
[348.32519531 -53.36357880]
[361.31555176 -60.86357880]
[374.30593872 -68.36357880]
[380.25927734 -75.44805145]
[387.72525024 -75.88437653]
[400.90292358 -83.05017090]
[414.08062744 -90.21597290]
[422.17401123 -104.47881317]
[438.57250977 -104.33055115]
[446.40670776 -89.92369843]
[437.61746216 -76.07879639]
[421.24639893 -77.03828430]
[408.06872559 -69.87248993]
[394.89105225 -62.70669174]
[381.80593872 -55.37319565]
[368.81555176 -47.87319565]
[355.82519531 -40.37319565]
[342.93164062 -32.70791626]
[330.13702393 -24.87860489]
[317.34243774 -17.04929543]
[313.23156738 -10.80174160]
[304.11956787 -9.18823814]
[296.96609497 3.87609601]
[281.14614868 4.07548380]
[268.15576172 11.57548332]
[255.16537476 19.07548332]
[242.17498779 26.57548332]
[240.80461121 41.38291550]
[230.86013794 52.67766953]
[215.99798584 55.98973083]
[201.87208557 49.84437943]
[188.88169861 57.34437943]
[175.89132690 64.84437561]
[162.90093994 72.34437561]
[149.91056824 79.84437561]
[136.92018127 87.34437561]
[123.92980194 94.84437561]
[110.93942261 102.34437561]
[98.04587555 110.00965881]
[85.25127411 117.83896637]
[77.51860046 131.64173889]
[62.62406158 131.68507385]
[49.82945633 139.51438904]
[37.03485107 147.34368896]
[24.24024773 155.17300415]
[20.43044090 170.27674866]
[7.34336138 178.03451538]
[-7.03227329 174.30937195]
[-19.82687759 182.13868713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 40]
[7 39]
[8 38]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[18 29]
[19 28]
[20 27]
[21 26]
[41 122]
[42 121]
[45 118]
[46 117]
[47 116]
[48 115]
[50 113]
[51 112]
[53 111]
[54 110]
[55 109]
[56 108]
[57 107]
[58 106]
[59 105]
[60 104]
[64 100]
[65 99]
[66 98]
[67 97]
[69 95]
[70 93]
[71 92]
[72 91]
[74 90]
[75 89]
[76 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
