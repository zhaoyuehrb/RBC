%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGCGGGGCGGGCGCAGCGGGGGUCGGGGCGCUGGGAGCCCGUUGGGCCGCGAACGCAGCCGCCACGCUGGGGCCGCCGAGAUCGGGUGCCCGGG\
) } def
/len { sequence length } bind def

/coor [
[164.69340515 153.03363037]
[152.28720093 144.60238647]
[139.88099670 136.17114258]
[127.47478485 127.73988342]
[115.06857300 119.30863190]
[102.66236877 110.87738037]
[90.12525940 102.64204407]
[77.46033478 94.60463715]
[64.79541779 86.56723785]
[47.89247894 90.72370911]
[33.44827652 81.62487030]
[30.03507805 65.24081421]
[17.12394714 57.60519028]
[4.21281672 49.96957016]
[-8.69831371 42.33395004]
[-17.85651779 40.60620117]
[-21.88969612 34.25025940]
[-37.68741989 33.38857651]
[-44.28755951 20.03614235]
[-56.95247650 11.99874115]
[-69.61739349 3.96133900]
[-82.28231812 -4.07606316]
[-94.94723511 -12.11346531]
[-107.61215210 -20.15086746]
[-120.27706909 -28.18826866]
[-137.18000793 -24.03179741]
[-151.62422180 -33.13063431]
[-155.03741455 -49.51469421]
[-167.94854736 -57.15031433]
[-180.85968018 -64.78593445]
[-193.77079773 -72.42155457]
[-210.16578674 -72.05213928]
[-218.45083618 -86.20452881]
[-210.10298157 -100.31996155]
[-193.70980835 -99.87769318]
[-186.13517761 -85.33268738]
[-173.22406006 -77.69706726]
[-160.31292725 -70.06144714]
[-147.40179443 -62.42582321]
[-135.38632202 -67.36155701]
[-122.54333496 -64.37613678]
[-113.67742920 -54.35366058]
[-112.23966980 -40.85318756]
[-99.57475281 -32.81578445]
[-86.90983582 -24.77838326]
[-74.24491119 -16.74098206]
[-61.57999420 -8.70357990]
[-48.91507721 -0.66617799]
[-36.25015640 7.37122393]
[-21.35831261 7.65801859]
[-13.85229492 21.58533859]
[-1.06269228 29.42281723]
[11.84843826 37.05843735]
[24.75956917 44.69406128]
[37.67070007 52.32968140]
[49.68616486 47.39394760]
[62.52915955 50.37936783]
[71.39505768 60.40184784]
[72.83282471 73.90232086]
[85.49774170 81.93972015]
[98.16265869 89.97711945]
[106.26817322 91.33538818]
[111.09362030 98.47117615]
[123.49982452 106.90242767]
[135.90603638 115.33367920]
[148.31224060 123.76492310]
[160.71844482 132.19618225]
[173.12466431 140.62742615]
[183.89823914 137.93844604]
[194.12947083 141.64582825]
[200.41763306 150.25410461]
[200.82041931 160.68484497]
[212.67274475 169.87844849]
[228.31925964 172.22300720]
[233.63352966 186.13731384]
[245.48585510 195.33091736]
[257.33819580 204.52452087]
[269.19052124 213.71812439]
[284.66476440 211.93330383]
[296.55374146 221.42578125]
[298.15991211 236.18910217]
[310.01223755 245.38270569]
[321.86456299 254.57630920]
[338.17657471 256.26464844]
[344.62252808 271.34381104]
[334.57135010 284.30169678]
[318.36288452 281.80828857]
[312.67095947 266.42864990]
[300.81863403 257.23501587]
[288.96630859 248.04142761]
[274.26736450 250.15719604]
[262.11645508 241.00241089]
[259.99688721 225.57044983]
[248.14457703 216.37684631]
[236.29225159 207.18324280]
[224.43992615 197.98963928]
[209.64115906 196.30265808]
[203.47912598 181.73077393]
[191.62681580 172.53717041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[7 61]
[8 60]
[9 59]
[12 55]
[13 54]
[14 53]
[15 52]
[17 51]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[28 39]
[29 38]
[30 37]
[31 36]
[72 99]
[73 98]
[75 96]
[76 95]
[77 94]
[78 93]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
