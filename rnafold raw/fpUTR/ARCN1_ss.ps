%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGACGUGGCUUGGGGCCGCCAUCUUGGCAAGAGGCGAAGCGGCAGCGGUUCCUGUCAAGGGGGCAGCAGGUCCAGAGCUGCUGGUGCUCCCGUUCCCCAGACCCUACCCCUAUCCCCAGUGGAGCCGGAGUGCGGGCGCGCCCCACCACCGCCCUCACC\
) } def
/len { sequence length } bind def

/coor [
[79.16966248 393.41577148]
[72.03864288 380.05810547]
[69.63368988 365.10836792]
[72.21568298 350.18817139]
[79.50453949 336.91595459]
[90.70961761 326.73141479]
[104.61547089 320.73928833]
[103.45308685 305.78439331]
[102.29070282 290.82949829]
[101.12831879 275.87460327]
[98.10886383 272.11666870]
[97.45081329 266.40936279]
[100.22232056 260.31921387]
[99.64068604 245.33050537]
[99.05905914 230.34178162]
[98.47742462 215.35305786]
[97.89579773 200.36434937]
[97.31416321 185.37562561]
[96.58722687 170.39324951]
[95.71505737 155.41862488]
[94.84288788 140.44400024]
[93.97071075 125.46938324]
[81.13727570 118.14495850]
[74.31598663 105.03717041]
[59.38644028 103.58500671]
[44.45690155 102.13284302]
[29.52735901 100.68067932]
[14.59781647 99.22851562]
[-0.33172560 97.77635193]
[-15.26126766 96.32418823]
[-30.19080925 94.87202454]
[-44.67521286 101.23697662]
[-56.59364700 92.30387878]
[-71.52319336 90.85172272]
[-86.45273590 89.39955902]
[-100.93714142 95.76450348]
[-112.85557556 86.83141327]
[-127.78511047 85.37924957]
[-137.26211548 97.55258179]
[-151.82363892 102.64822388]
[-166.82315063 99.04017639]
[-177.47438049 87.87975311]
[-180.37854004 72.72821045]
[-174.60891724 58.42033768]
[-162.00660706 49.52173615]
[-146.59294128 48.87191391]
[-133.28636169 56.67822647]
[-126.33295441 70.44970703]
[-111.40341187 71.90187073]
[-97.98686218 65.43305206]
[-85.00057220 74.47001648]
[-70.07102966 75.92218018]
[-55.14148712 77.37434387]
[-41.72494125 70.90552521]
[-28.73864555 79.94248199]
[-13.80910492 81.39464569]
[1.12043750 82.84680939]
[16.04998016 84.29897308]
[30.97952080 85.75113678]
[45.90906143 87.20330048]
[60.83860397 88.65546417]
[75.76815033 90.10762787]
[77.77641296 83.39574432]
[81.68355560 77.11851501]
[87.38227844 71.81788635]
[94.61072540 68.00474548]
[91.43517303 53.34473801]
[88.25961304 38.68473053]
[85.08405304 24.02472305]
[81.90849304 9.36471462]
[78.73294067 -5.29529333]
[64.47924805 -11.42815876]
[56.58154297 -24.78502464]
[58.07664871 -40.22990417]
[68.38966370 -51.82392502]
[83.55503082 -55.10895157]
[97.74134827 -48.82181931]
[105.49369049 -35.38006592]
[103.83113098 -19.95231247]
[93.39294434 -8.47085094]
[96.56850433 6.18915653]
[99.74406433 20.84916496]
[102.91961670 35.50917053]
[106.09517670 50.16918182]
[109.27073669 64.82918549]
[122.67522430 71.56117249]
[136.33067322 65.35401154]
[149.98611450 59.14685440]
[163.64155579 52.93969345]
[177.29699707 46.73253250]
[190.95243835 40.52537155]
[204.60789490 34.31821060]
[213.96928406 21.56379890]
[228.75749207 23.34086990]
[242.41293335 17.13370895]
[256.06838989 10.92654800]
[269.72381592 4.71938705]
[283.37927246 -1.48777390]
[292.74066162 -14.24218464]
[307.52886963 -12.46511459]
[305.39184570 -27.41870117]
[307.55563354 -42.36843872]
[313.84487915 -56.10241699]
[323.74972534 -67.50727844]
[336.46719360 -75.65849304]
[350.96640015 -79.89527130]
[366.07189941 -79.87416077]
[380.55917358 -75.59687042]
[393.25381470 -67.41014099]
[403.12673950 -55.97763062]
[409.37756348 -42.22612762]
[411.49957275 -27.27040100]
[409.32073975 -12.32284546]
[403.01770020 1.40480685]
[393.10144043 12.79971695]
[380.37576294 20.93815041]
[365.87231445 25.16036224]
[350.76684570 25.12407494]
[336.28387451 20.83223152]
[323.59744263 12.63275051]
[313.73602295 1.19032931]
[305.35137939 13.50076199]
[289.58642578 12.16767025]
[275.93099976 18.37483025]
[262.27554321 24.58199120]
[248.62010193 30.78915215]
[234.96464539 36.99631500]
[226.57998657 49.30674744]
[210.81504822 47.97365570]
[197.15960693 54.18081665]
[183.50416565 60.38797760]
[169.84872437 66.59513855]
[156.19326782 72.80229950]
[142.53782654 79.00946045]
[128.88238525 85.21662140]
[127.27867126 110.72048187]
[108.94533539 124.59720612]
[109.81750488 139.57183838]
[110.68968201 154.54644775]
[111.56185150 169.52107239]
[115.20015717 177.95455933]
[112.30288696 184.79399109]
[112.88451385 199.78271484]
[113.46614838 214.77143860]
[114.04777527 229.76014709]
[114.62940979 244.74887085]
[115.21103668 259.73757935]
[116.08320618 274.71221924]
[117.24559784 289.66711426]
[118.40798187 304.62200928]
[119.57036591 319.57690430]
[134.23512268 323.34835815]
[146.87931824 331.67919922]
[156.13143921 343.66571045]
[160.98786926 358.00775146]
[160.92182922 373.14956665]
[155.94046021 387.44866943]
[146.58412170 399.35403442]
[133.86772156 407.57424927]
[119.17063141 411.21762085]
[104.08708191 409.88897705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 151]
[8 150]
[9 149]
[10 148]
[13 147]
[14 146]
[15 145]
[16 144]
[17 143]
[18 142]
[19 140]
[20 139]
[21 138]
[22 137]
[24 62]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[31 55]
[33 53]
[34 52]
[35 51]
[37 49]
[38 48]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[86 135]
[87 134]
[88 133]
[89 132]
[90 131]
[91 130]
[92 129]
[94 127]
[95 126]
[96 125]
[97 124]
[98 123]
[100 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
