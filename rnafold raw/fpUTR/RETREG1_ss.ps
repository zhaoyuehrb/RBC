%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCCGCCCCGCCCUCGGCGGCACCCACACCCAGGCGCGCCCGCGCGCGCGCCCGGCCCCGUCCCUGUCUGGAAGCACAGCUGAAG\
) } def
/len { sequence length } bind def

/coor [
[96.57305145 155.21722412]
[85.75909424 144.82211304]
[83.52977753 129.98869324]
[90.80961609 116.87489319]
[78.48830414 125.42973328]
[66.16699219 133.98457336]
[53.84568405 142.53941345]
[41.52437210 151.09425354]
[29.20306015 159.64909363]
[29.00535774 175.16490173]
[19.69848442 187.58108521]
[4.86112261 192.12338257]
[-9.80145836 187.04515076]
[-18.65119743 174.29910278]
[-18.28519058 158.78634644]
[-8.84417248 146.47184753]
[6.04159069 142.09078979]
[20.64822006 147.32777405]
[32.96953201 138.77293396]
[45.29084396 130.21809387]
[57.61215591 121.66326141]
[69.93346405 113.10842133]
[82.25477600 104.55358124]
[68.99057770 111.55793762]
[53.99390030 111.87349701]
[40.44680405 105.43329620]
[31.22378540 93.60384369]
[28.28182411 78.89517975]
[32.24516296 64.42825317]
[42.27283859 53.27273178]
[56.23713303 47.79564285]
[71.17503357 49.15914917]
[83.91694641 57.07393265]
[91.75921631 69.86059570]
[93.03787994 84.80580139]
[93.57326508 69.81536102]
[94.10865021 54.82491684]
[94.64403534 39.83447647]
[95.17942047 24.84403229]
[95.71480560 9.85359001]
[96.25019073 -5.13685274]
[85.29878235 -16.53168488]
[85.69585419 -32.33098602]
[97.20583344 -43.16130829]
[113.00005341 -42.59721756]
[123.70808411 -30.97337532]
[122.97703552 -15.18600273]
[111.24063110 -4.60146761]
[110.70524597 10.38897514]
[110.16986084 25.37941742]
[109.63447571 40.36985779]
[109.09909058 55.36030197]
[108.56370544 70.35074615]
[108.02832031 85.34118652]
[117.01748657 97.34930420]
[131.55154419 101.05890656]
[146.08560181 104.76850128]
[160.61965942 108.47809601]
[172.40487671 95.70906067]
[188.90963745 90.56109619]
[205.69372559 94.32764435]
[218.28735352 105.91608429]
[223.38153076 122.16280365]
[238.14318848 124.82610321]
[252.90486145 127.48940277]
[265.74224854 118.27111816]
[281.32424927 120.91262817]
[290.40628052 133.84677124]
[287.60018921 149.39994812]
[274.57073975 158.34472656]
[259.04809570 155.37434387]
[250.24156189 142.25106812]
[235.47990417 139.58776855]
[220.71823120 136.92446899]
[213.48052979 147.57868958]
[202.66754150 154.66358948]
[189.91668701 157.06294250]
[177.17555237 154.37329102]
[166.40449524 146.97138977]
[159.27491760 135.96176147]
[156.91006470 123.01215363]
[142.37600708 119.30255890]
[127.84194946 115.59296417]
[113.30789185 111.88336182]
[125.45127106 120.68894958]
[129.70359802 135.07357788]
[124.29980469 149.06639099]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[55 84]
[56 83]
[57 82]
[58 81]
[63 74]
[64 73]
[65 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
