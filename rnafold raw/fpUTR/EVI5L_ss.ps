%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAGGGGGCCGGGCCGGGGCUGCGGGGCGAACGGCGCGGCUAGGAUCCGGCGGCUCAGCCCGGGGCGGCGAGGCUCGGCACGGAGAUGGCGGCGCGCUCGGCGCAGACAGAGCUGUGAACCAACCCCGCUCACGGCUAACAAGCCCACCCACC\
) } def
/len { sequence length } bind def

/coor [
[99.79530334 468.96640015]
[108.17503357 454.86987305]
[107.87102509 439.87295532]
[104.57173920 433.21005249]
[107.71593475 424.56973267]
[107.71593475 409.56973267]
[107.56392670 394.57049561]
[107.25992584 379.57357788]
[106.95591736 364.57666016]
[106.65191650 349.57974243]
[91.64484406 337.23648071]
[90.44261932 317.53921509]
[104.25450134 303.02365112]
[103.03973389 288.07290649]
[101.82496643 273.12216187]
[100.61019897 258.17144775]
[99.39543152 243.22071838]
[88.14915466 238.47714233]
[79.95575714 229.33268738]
[76.42940521 217.49626160]
[78.30424500 205.21560669]
[85.28254700 194.85040283]
[96.08000946 188.41899109]
[95.47212982 173.43130493]
[94.86424255 158.44363403]
[94.25636292 143.45594788]
[93.64847565 128.46827698]
[93.04058838 113.48059845]
[88.98727417 99.03862000]
[81.70774841 85.92342377]
[74.42821503 72.80822754]
[60.96588516 64.49701691]
[61.55439758 49.61404419]
[54.27486801 36.49884415]
[47.33258438 30.47008705]
[46.98377991 23.04324722]
[39.97155380 9.78320789]
[32.95932388 -3.47683144]
[19.66819763 -12.05917168]
[20.55822182 -26.92716217]
[13.54599285 -40.18720245]
[6.53376341 -53.44723892]
[-0.47846571 -66.70728302]
[-13.75446510 -69.17928314]
[-23.03370285 -78.72031403]
[-25.07466125 -91.67480469]
[-19.35106468 -103.25709534]
[-26.09311295 -116.65652466]
[-32.83515930 -130.05595398]
[-39.57720947 -143.45538330]
[-50.15460205 -146.29130554]
[-57.25418091 -154.33760071]
[-58.69034958 -164.74934387]
[-54.22512054 -174.02006531]
[-60.41860962 -187.68171692]
[-66.61209869 -201.34336853]
[-79.35713196 -210.71751404]
[-77.56526184 -225.50393677]
[-83.75875092 -239.16558838]
[-89.95223999 -252.82723999]
[-96.14573669 -266.48889160]
[-102.47734833 -280.08706665]
[-108.94644928 -293.62039185]
[-123.93026733 -298.64639282]
[-130.89660645 -312.83251953]
[-125.71246338 -327.76235962]
[-111.45349884 -334.57830811]
[-96.57929993 -329.23663330]
[-89.91446686 -314.90637207]
[-95.41313171 -300.08950806]
[-88.94403076 -286.55618286]
[-83.18801117 -281.85003662]
[-82.48408508 -272.68237305]
[-76.29059601 -259.02072144]
[-70.09709930 -245.35908508]
[-63.90361404 -231.69743347]
[-51.60157776 -223.30046082]
[-52.95045090 -207.53684998]
[-46.75695801 -193.87519836]
[-40.56346893 -180.21356201]
[-24.05896187 -170.20533752]
[-26.17777634 -150.19743347]
[-19.43572807 -136.79800415]
[-12.69367981 -123.39857483]
[-5.95163202 -109.99913788]
[10.20670223 -105.43237305]
[18.24595451 -90.30794525]
[12.78157330 -73.71950531]
[19.79380226 -60.45946884]
[26.80603218 -47.19942856]
[33.81826019 -33.93939209]
[46.60782623 -26.30549812]
[46.21936035 -10.48906040]
[53.23159027 2.77097869]
[60.24382019 16.03101730]
[67.39006805 29.21931458]
[74.66959381 42.33451462]
[87.61125183 49.70763397]
[87.54341888 65.52869415]
[94.82294464 78.64389038]
[102.10247803 91.75909424]
[108.41819000 84.50968933]
[118.15492249 80.34722900]
[132.74929810 76.88251495]
[147.34367371 73.41780090]
[161.93804932 69.95307922]
[176.53240967 66.48836517]
[184.60983276 52.90415573]
[199.94729614 49.09129333]
[213.44534302 57.31188583]
[217.09584045 72.68879700]
[208.73300171 86.09918213]
[193.31834412 89.58689880]
[179.99713135 81.08274078]
[165.40275574 84.54745483]
[150.80838013 88.01216888]
[136.21400452 91.47689056]
[121.61963654 94.94160461]
[136.61807251 95.15782166]
[147.59967041 105.37568665]
[148.89457703 120.31969452]
[139.83425903 132.27421570]
[125.09655762 135.06709290]
[112.29058838 127.25638580]
[108.02826691 112.87271118]
[108.63615417 127.86038971]
[109.24403381 142.84806824]
[109.85192108 157.83573914]
[110.45980072 172.82342529]
[111.06768799 187.81109619]
[126.42275238 197.36161804]
[132.95651245 214.05488586]
[128.24700928 231.18936157]
[114.34616089 242.00595093]
[115.56092834 256.95666504]
[116.77569580 271.90740967]
[117.99046326 286.85812378]
[119.20523071 301.80886841]
[128.89126587 306.52066040]
[135.67135620 314.78570557]
[138.35762024 325.04907227]
[136.52418518 335.41622925]
[130.57316589 344.00247192]
[121.64883423 349.27572632]
[121.95283508 364.27264404]
[122.25684357 379.26956177]
[122.56084442 394.26647949]
[125.87950897 402.84130859]
[122.71593475 409.56973267]
[122.71593475 424.56973267]
[122.86795044 439.56893921]
[123.17195129 454.56585693]
[132.11607361 468.31121826]
[124.44410706 482.80511475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[5 150]
[6 149]
[7 147]
[8 146]
[9 145]
[10 144]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[23 130]
[24 129]
[25 128]
[26 127]
[27 126]
[28 125]
[29 101]
[30 100]
[31 99]
[33 97]
[34 96]
[36 95]
[37 94]
[38 93]
[40 91]
[41 90]
[42 89]
[43 88]
[47 85]
[48 84]
[49 83]
[50 82]
[54 80]
[55 79]
[56 78]
[58 76]
[59 75]
[60 74]
[61 73]
[62 71]
[63 70]
[103 118]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
