%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCGGCGUGGGCGGCGUCACUGAGCCGCGCCAGCUGAGCCAGGUAGGGCCCUACCCUCUUCUGUUGCUUUCUCCCUGUGGCUCGCGCCGUCCCCCGCCGCCCGUCGACCCCGCUUCCAUGUCCCUGGCGGACACAGCUCCCAGGAACCUCCACGCCC\
) } def
/len { sequence length } bind def

/coor [
[174.12078857 193.14221191]
[162.65724182 177.81974792]
[157.84257507 159.26686096]
[160.41703796 140.24148560]
[147.14050293 133.26054382]
[133.86395264 126.27960968]
[120.58741760 119.29866791]
[107.31088257 112.31772614]
[93.33369446 112.67816162]
[85.70818329 100.95880890]
[72.43164062 93.97787476]
[59.15510178 86.99693298]
[45.81024551 80.14749146]
[32.39837646 73.43022156]
[18.98650360 66.71295166]
[5.57463312 59.99568558]
[-7.83723783 53.27841568]
[-21.24910927 46.56114578]
[-25.69175720 46.99396133]
[-29.62948418 46.05418015]
[-32.68584442 44.07789230]
[-34.63606262 41.49029541]
[-35.42305374 38.74705887]
[-48.26271820 30.99186897]
[-61.10238647 23.23668098]
[-73.94205475 15.48149109]
[-86.78172302 7.72630215]
[-99.62138367 -0.02888707]
[-112.46105194 -7.78407621]
[-125.30072021 -15.53926563]
[-137.55894470 -6.59433365]
[-152.26826477 -3.03363752]
[-167.17991638 -5.36950493]
[-180.02641296 -13.21522141]
[-188.86636353 -25.34864616]
[-192.37788391 -39.90250015]
[-190.05615234 -54.65169525]
[-202.89581299 -62.40688324]
[-215.73547363 -70.16207123]
[-228.57514954 -77.91725922]
[-241.56552124 -85.41725922]
[-254.70155334 -92.65914917]
[-267.83758545 -99.90103149]
[-280.97360229 -107.14291382]
[-299.34518433 -106.33026123]
[-307.86706543 -121.64524841]
[-321.14361572 -128.62619019]
[-334.42013550 -135.60713196]
[-347.69668579 -142.58807373]
[-363.38201904 -139.21910095]
[-375.70385742 -149.49295044]
[-375.20993042 -165.52839661]
[-362.27914429 -175.02442932]
[-346.83090210 -170.69648743]
[-340.71575928 -155.86460876]
[-327.43920898 -148.88366699]
[-314.16265869 -141.90272522]
[-300.88613892 -134.92178345]
[-289.21078491 -138.21116638]
[-278.07705688 -132.46002197]
[-273.73171997 -120.27893829]
[-260.59570312 -113.03705597]
[-247.45967102 -105.79516602]
[-234.32363892 -98.55328369]
[-229.52134705 -99.01409912]
[-224.38659668 -96.42588806]
[-220.81996155 -90.75692749]
[-207.98028564 -83.00173950]
[-195.14062500 -75.24655151]
[-182.30094910 -67.49136353]
[-170.32693481 -76.41056061]
[-155.81103516 -80.07580566]
[-140.95762634 -77.89838409]
[-128.03465271 -70.17929077]
[-119.02735901 -58.06805038]
[-115.33327484 -43.39164734]
[-117.54553223 -28.37893105]
[-104.70586395 -20.62374306]
[-91.86619568 -12.86855412]
[-79.02652740 -5.11336470]
[-66.18686676 2.64182425]
[-53.34719849 10.39701366]
[-40.50753021 18.15220261]
[-27.66786385 25.90739250]
[-14.53183937 33.14927292]
[-1.11996830 39.86654282]
[12.29190254 46.58381271]
[25.70377350 53.30108261]
[39.11564636 60.01835251]
[52.52751541 66.73562622]
[59.95603943 66.92012024]
[66.13603973 73.72039032]
[79.41258240 80.70133209]
[92.68911743 87.68227386]
[106.66630554 87.32183838]
[114.29181671 99.04119110]
[127.56835938 106.02212524]
[140.84489441 113.00306702]
[154.12142944 119.98400879]
[167.39797974 126.96494293]
[175.11730957 118.72600555]
[184.48698425 112.44480896]
[195.02217102 108.44100189]
[206.17892456 106.91651154]
[217.38229370 107.94539642]
[228.05592346 111.47023773]
[237.65174866 117.30532837]
[245.67810059 125.14646149]
[251.72488403 134.58676147]
[255.48460388 145.13784790]
[256.76788330 156.25503540]
[255.51315308 167.36550903]
[251.78939819 177.89778137]
[264.14709473 186.39997864]
[276.91369629 178.19694519]
[291.80813599 175.51388550]
[306.55520630 178.72903442]
[318.91436768 187.32200623]
[327.01998901 199.95780945]
[329.66317749 214.69412231]
[326.47174072 229.27987671]
[338.82943726 237.78207397]
[354.58425903 239.22984314]
[360.68399048 252.81817627]
[373.04168701 261.32037354]
[385.39938354 269.82257080]
[397.75704956 278.32476807]
[410.11474609 286.82696533]
[425.86959839 288.27474976]
[431.96929932 301.86306763]
[444.32699585 310.36526489]
[459.82055664 307.24676514]
[472.93484497 316.06668091]
[475.88937378 331.59234619]
[466.93130493 344.61264038]
[451.37527466 347.40286255]
[438.45040894 338.30764771]
[435.82479858 322.72296143]
[423.46710205 314.22076416]
[408.59616089 313.38113403]
[401.61254883 299.18466187]
[389.25485229 290.68246460]
[376.89715576 282.18026733]
[364.53948975 273.67807007]
[352.18179321 265.17587280]
[337.31085205 264.33624268]
[330.32723999 250.13977051]
[317.96954346 241.63757324]
[305.48818970 249.83175659]
[290.78063965 252.63063049]
[276.08230591 249.57710266]
[263.63931274 241.10600281]
[255.36531067 228.48243713]
[252.54716492 213.61297607]
[255.64489746 198.75767517]
[243.28720093 190.25547791]
[227.87193298 201.38111877]
[209.36099243 205.84735107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[10 94]
[11 93]
[12 92]
[13 90]
[14 89]
[15 88]
[16 87]
[17 86]
[18 85]
[23 84]
[24 83]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[30 77]
[37 70]
[38 69]
[39 68]
[40 67]
[41 64]
[42 63]
[43 62]
[44 61]
[46 58]
[47 57]
[48 56]
[49 55]
[113 156]
[114 155]
[121 148]
[122 147]
[124 145]
[125 144]
[126 143]
[127 142]
[128 141]
[130 139]
[131 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
