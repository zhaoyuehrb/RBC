%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCCUCUCCUGACUAAGUUUCUCUGGCUUCCCUGAGGCUGCAGGUGUUAAUCUGGGGGGCCCUGGGCCCUGAGCCGGCAGCAGAAAU\
) } def
/len { sequence length } bind def

/coor [
[4.45883131 338.78582764]
[5.14947701 353.88598633]
[1.35698199 368.51843262]
[-6.58142853 381.38204956]
[-17.95987511 391.33303833]
[-31.76659584 397.48657227]
[-46.77390671 399.29547119]
[-61.64736557 396.59887695]
[-75.06443787 389.63656616]
[-85.83207703 379.02764893]
[-92.99284363 365.71542358]
[-95.91000366 350.88366699]
[-94.32416534 335.85113525]
[-88.37634277 321.95455933]
[-78.59540558 310.42962646]
[-65.85106659 302.30105591]
[-51.27655411 298.29171753]
[-36.16781616 298.75805664]
[-21.86831474 303.65863037]
[-13.05153561 291.52337646]
[-4.23475695 279.38812256]
[4.58202171 267.25286865]
[13.39880085 255.11761475]
[22.21557999 242.98234558]
[30.16436768 230.26162720]
[37.20643997 217.01741028]
[44.24851608 203.77320862]
[51.29058838 190.52899170]
[58.33266068 177.28477478]
[65.37473297 164.04055786]
[72.41680908 150.79634094]
[78.51786041 137.09317017]
[83.64816284 122.99777985]
[88.77846527 108.90238953]
[86.53989410 95.10092163]
[97.12614441 85.96730804]
[97.14388275 76.60829163]
[102.68930054 71.47480774]
[108.30839539 57.56705093]
[113.92749786 43.65929031]
[119.54659271 29.75153351]
[115.65638733 10.12261486]
[130.97065735 -1.46593928]
[135.60591125 -15.73178673]
[140.24116516 -29.99763489]
[144.87641907 -44.26348114]
[149.51167297 -58.52933121]
[145.57470703 -74.44888306]
[157.57893372 -85.62164307]
[173.17544556 -80.55402374]
[176.31988525 -64.45916748]
[163.77752686 -53.89407349]
[159.14227295 -39.62822723]
[154.50701904 -25.36237907]
[149.87176514 -11.09653187]
[145.23651123 3.16931558]
[150.78524780 12.06570721]
[150.39331055 22.76581764]
[143.94653320 31.59167480]
[133.45434570 35.37063217]
[127.83525085 49.27838898]
[122.21615601 63.18614960]
[116.59705353 77.09390259]
[111.22153473 91.09761047]
[113.46010590 104.89907837]
[102.87385559 114.03269196]
[97.74355316 128.12808228]
[92.61325073 142.22346497]
[93.67200470 146.96548462]
[93.07872009 151.30776978]
[91.20099640 154.74220276]
[88.54251862 156.95150757]
[85.66102600 157.83842468]
[78.61894989 171.08264160]
[71.57687378 184.32684326]
[64.53480530 197.57106018]
[57.49272919 210.81527710]
[50.45065689 224.05949402]
[43.40858078 237.30371094]
[43.79707336 242.14691162]
[42.60523605 246.36437988]
[40.26780701 249.50405884]
[37.32772446 251.32186890]
[34.35083389 251.79913330]
[25.53405571 263.93438721]
[16.71727562 276.06964111]
[7.90049791 288.20489502]
[-0.91628104 300.34014893]
[-9.73305988 312.47540283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 89]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[25 79]
[26 78]
[27 77]
[28 76]
[29 75]
[30 74]
[31 73]
[32 68]
[33 67]
[34 66]
[36 64]
[38 63]
[39 62]
[40 61]
[41 60]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
