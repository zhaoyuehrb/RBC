%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUGCUGUGGCUGCUUGGGCCACGGGAGAGGGAACCUUGUGAGCCGGGCAGAAUCCACCCUGUAGAGACUGCCUCUGGAGCUUGAGGAAGAG\
) } def
/len { sequence length } bind def

/coor [
[-4.82787323 173.26513672]
[-13.21152782 186.68246460]
[-28.09111404 186.01374817]
[-41.24536133 193.22247314]
[-49.62901688 206.63980103]
[-64.50860596 205.97106934]
[-77.66284943 213.17979431]
[-90.81710052 220.38851929]
[-103.97135162 227.59725952]
[-117.12559509 234.80598450]
[-130.27984619 242.01470947]
[-143.43409729 249.22343445]
[-156.58834839 256.43215942]
[-162.44694519 271.36721802]
[-177.81831360 275.96078491]
[-190.91084290 266.68902588]
[-191.68106079 250.66447449]
[-179.53813171 240.17977905]
[-163.79707336 243.27790833]
[-150.64282227 236.06918335]
[-137.48857117 228.86045837]
[-124.33432770 221.65173340]
[-111.18007660 214.44300842]
[-98.02582550 207.23428345]
[-84.87158203 200.02555847]
[-71.71733093 192.81681824]
[-64.27455139 179.91510010]
[-48.45409012 180.06822205]
[-35.29983902 172.85949707]
[-27.85706520 159.95777893]
[-12.03660011 160.11088562]
[-12.35091400 143.06584167]
[-4.05252075 128.07369995]
[10.70859718 119.19972229]
[28.01680756 118.90016937]
[43.22937775 127.34307861]
[55.87276077 119.27184296]
[68.51614380 111.20060730]
[81.15953064 103.12937164]
[84.38491058 89.00339508]
[96.59801483 81.20684052]
[110.76923370 84.22724152]
[114.29109192 69.05377197]
[127.22825623 61.04850006]
[141.67214966 64.49956512]
[154.31552124 56.42832565]
[166.68214417 47.93912125]
[178.75819397 39.04142380]
[190.83425903 30.14372826]
[202.91030884 21.24603271]
[214.98635864 12.34833622]
[227.06240845 3.45063996]
[229.56292725 -11.92418289]
[241.93650818 -20.77568436]
[256.57864380 -18.29707336]
[268.65469360 -27.19476891]
[275.17517090 -41.60982132]
[290.01113892 -42.93031311]
[302.08718872 -51.82800674]
[311.25222778 -66.09118652]
[327.49514771 -61.23275757]
[327.32305908 -44.27968216]
[310.98489380 -39.75195694]
[298.90884399 -30.85426140]
[293.25210571 -17.07563210]
[277.55239868 -15.11871815]
[265.47634888 -6.22102261]
[263.50555420 8.49806786]
[251.38546753 17.69362450]
[235.96009827 15.52669048]
[223.88404846 24.42438698]
[211.80799866 33.32208252]
[199.73194885 42.21977997]
[187.65589905 51.11747360]
[175.57984924 60.01517105]
[173.97962952 64.71236420]
[169.29307556 68.36377716]
[162.38676453 69.07170868]
[149.74337769 77.14294434]
[146.79386902 91.69753265]
[134.08665466 100.06302643]
[118.84046936 96.87062836]
[115.61508942 110.99660492]
[103.40198517 118.79315948]
[89.23076630 115.77275848]
[76.58737946 123.84399414]
[63.94399643 131.91522217]
[51.30061340 139.98646545]
[53.10594177 152.99844360]
[49.79784775 165.66293335]
[41.91666794 176.05455017]
[30.69510269 182.60784912]
[17.86551094 184.35304260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[3 29]
[4 28]
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[36 88]
[37 87]
[38 86]
[39 85]
[42 82]
[45 79]
[46 78]
[47 75]
[48 74]
[49 73]
[50 72]
[51 71]
[52 70]
[55 67]
[56 66]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
