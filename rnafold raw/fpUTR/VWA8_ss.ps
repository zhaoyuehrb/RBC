%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGGUGCCUGCACGGGACGCCGCUCGAUCCCCGAGCCCCCUCGCCGUCCCCGACAGCCCCCCCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[103.50605011 257.80633545]
[87.25117493 255.63586426]
[81.25446320 240.37245178]
[91.68481445 227.71781921]
[93.67012024 212.84977722]
[95.65543365 197.98175049]
[97.64073944 183.11370850]
[99.62604523 168.24566650]
[101.61135101 153.37762451]
[100.94785309 138.39231873]
[97.65628052 123.75791931]
[84.18767548 117.88580322]
[76.70863342 105.23870850]
[78.05216217 90.60723877]
[87.70932770 79.53366089]
[84.41774750 64.89926910]
[81.12617493 50.26486969]
[77.83459473 35.63047409]
[74.54301453 20.99608040]
[71.25144196 6.36168575]
[60.67443466 -5.40426397]
[65.43029785 -19.51918793]
[60.23075867 -33.58918381]
[53.21474457 -46.84722137]
[46.19873047 -60.10525894]
[39.18271637 -73.36329651]
[32.16670227 -86.62133026]
[17.31871033 -92.69724274]
[12.94994354 -108.13400269]
[22.41174698 -121.08984375]
[38.44583130 -121.62615967]
[48.75222397 -109.33152771]
[45.42473984 -93.63734436]
[52.44075394 -80.37931061]
[59.45676804 -67.12126923]
[66.47277832 -53.86323547]
[73.48879242 -40.60519791]
[80.84318542 -53.67856598]
[95.17333984 -58.11103058]
[108.62464142 -51.47307968]
[113.82420349 -37.40309143]
[107.92205048 -23.61307335]
[94.15325928 -17.66157722]
[80.06468964 -22.81076431]
[90.40625763 -12.09156513]
[85.88583374 3.07010818]
[89.17741394 17.70450401]
[92.46898651 32.33889771]
[95.76056671 46.97329330]
[99.05214691 61.60768890]
[102.34371948 76.24208069]
[115.81232452 82.11419678]
[123.29136658 94.76129150]
[121.94783783 109.39276123]
[112.29067230 120.46633911]
[115.58225250 135.10073853]
[124.94257355 123.37962341]
[139.31169128 119.07518005]
[153.57453918 123.71967316]
[162.65383911 135.65977478]
[163.31759644 150.64508057]
[155.32949829 163.34115601]
[141.53314209 169.22848511]
[126.83972168 166.21131897]
[116.47939301 155.36294556]
[114.49408722 170.23097229]
[112.50877380 185.09901428]
[110.52346802 199.96705627]
[108.53816223 214.83508301]
[106.55285645 229.70312500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 56]
[11 55]
[15 51]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[22 44]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
