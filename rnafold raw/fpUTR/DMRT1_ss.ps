%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGCCACUCCAGCUGCGCCUCCGGCUGCAGCGCACACGUCUCCUGCGCCUCCUCCUCCGGAGCGUCGCUGUCCGUCGGGUUCAUCCCUCGCAGCAGUCUCCAGGCGAGAGAGGGGGCCAGAGUGCUCGCACUUCUCCUAGGGGCACC\
) } def
/len { sequence length } bind def

/coor [
[122.98224640 162.45179749]
[125.15644836 177.29339600]
[121.00889587 191.70858765]
[111.27961731 203.12528992]
[97.70461273 209.50643921]
[82.70603943 209.71345520]
[68.96008301 203.70939636]
[58.91941833 192.56556702]
[54.37558746 178.27033997]
[56.13934326 163.37438965]
[63.89598083 150.53559875]
[76.25901031 142.04579163]
[83.24372101 128.77122498]
[90.22842407 115.49667358]
[77.73460388 123.79754639]
[65.24079132 132.09841919]
[52.74697113 140.39929199]
[40.25315094 148.70016479]
[27.84694290 157.13140869]
[15.52970409 165.69212341]
[3.21246600 174.25282288]
[-6.34309721 188.25737000]
[-22.44559097 182.95210266]
[-21.80525589 166.01023865]
[-5.34823751 161.93557739]
[6.96900082 153.37487793]
[19.28623962 144.81417847]
[23.00842285 138.37150574]
[31.95227814 136.20634460]
[44.44609451 127.90547180]
[56.93991470 119.60459900]
[69.43373108 111.30372620]
[81.92755127 103.00285339]
[67.66764832 107.65636444]
[52.83467102 105.42415619]
[40.57595062 96.77986145]
[33.49260712 83.55767822]
[33.08761215 68.56314087]
[39.44690323 54.97787857]
[51.22113800 45.68447113]
[65.91199493 42.65483856]
[80.40230560 46.53182220]
[91.61743164 56.49279022]
[97.17770386 70.42417145]
[95.90337372 85.36975098]
[101.13195801 71.31052399]
[106.36054230 57.25128937]
[106.42614746 48.04932785]
[111.84864044 42.95429611]
[117.37050629 29.00764847]
[122.89237976 15.06100178]
[128.41424561 1.11435461]
[133.93611145 -12.83229256]
[139.45797729 -26.77894020]
[144.97984314 -40.72558594]
[150.50172424 -54.67223358]
[155.87724304 -68.67594147]
[161.10581970 -82.73516846]
[166.33439636 -96.79440308]
[171.41546631 -110.90761566]
[176.05072021 -125.17346191]
[180.38619995 -139.53324890]
[184.72167969 -153.89305115]
[189.05715942 -168.25283813]
[181.84541321 -182.05966187]
[186.44676208 -196.56077576]
[199.65391541 -203.35098267]
[199.14160156 -212.53890991]
[204.23345947 -217.96437073]
[208.86871338 -232.23020935]
[213.50398254 -246.49606323]
[218.13923645 -260.76190186]
[222.77449036 -275.02777100]
[215.64128113 -283.11572266]
[212.56684875 -293.36764526]
[214.04956055 -303.88552856]
[219.75057983 -312.75152588]
[228.56819153 -318.37768555]
[238.85011292 -319.79025269]
[244.37197876 -333.73690796]
[249.89384460 -347.68353271]
[244.86764526 -362.91891479]
[253.76560974 -376.26831055]
[269.76199341 -377.49118042]
[280.58572388 -365.64947510]
[277.93377686 -349.82711792]
[263.84048462 -342.16168213]
[258.31863403 -328.21502686]
[252.79676819 -314.26837158]
[261.86392212 -297.08972168]
[255.37306213 -278.46093750]
[237.04032898 -270.39251709]
[232.40507507 -256.12664795]
[227.76982117 -241.86080933]
[223.13456726 -227.59495544]
[218.49931335 -213.32911682]
[214.01370239 -199.01550293]
[221.25657654 -186.05107117]
[217.06434631 -171.42645264]
[203.41694641 -163.91735840]
[199.08146667 -149.55757141]
[194.74598694 -135.19776917]
[190.41052246 -120.83798218]
[191.87188721 -116.22785187]
[190.40534973 -110.65087128]
[185.58111572 -105.97460938]
[186.35671997 -98.57453156]
[180.39363098 -91.56581879]
[175.16505432 -77.50659180]
[169.93646240 -63.44736099]
[170.55691528 -56.03266144]
[164.44836426 -49.15036774]
[158.92649841 -35.20372009]
[153.40463257 -21.25707245]
[147.88276672 -7.31042433]
[142.36088562 6.63622284]
[136.83901978 20.58287048]
[131.31715393 34.52951813]
[125.79528809 48.47616577]
[120.41976929 62.47986984]
[115.19118500 76.53910065]
[109.96260834 90.59832764]
[120.28022003 96.75664520]
[124.77834320 111.64308929]
[133.07922363 124.13690948]
[141.38009644 136.63072205]
[149.68096924 149.12454224]
[157.98184204 161.61836243]
[166.28271484 174.11218262]
[181.29125977 171.53086853]
[196.05058289 175.28355408]
[208.00350952 184.72004700]
[215.07913208 198.20542908]
[216.05155945 213.40325928]
[210.75231934 227.68045044]
[200.09951782 238.56335449]
[185.93884277 244.16648865]
[170.72369385 243.51902771]
[157.09019470 236.73318481]
[147.40043640 224.98463440]
[143.33322144 210.30888367]
[145.59323120 195.24859619]
[153.78889465 182.41305542]
[145.48802185 169.91923523]
[137.18714905 157.42541504]
[128.88627625 144.93159485]
[120.58540344 132.43777466]
[112.28452301 119.94396210]
[113.57937622 134.88796997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 27]
[20 26]
[21 25]
[45 122]
[46 121]
[47 120]
[49 119]
[50 118]
[51 117]
[52 116]
[53 115]
[54 114]
[55 113]
[56 112]
[57 110]
[58 109]
[59 108]
[60 106]
[61 103]
[62 102]
[63 101]
[64 100]
[67 97]
[69 96]
[70 95]
[71 94]
[72 93]
[73 92]
[79 89]
[80 88]
[81 87]
[124 148]
[125 147]
[126 146]
[127 145]
[128 144]
[129 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
