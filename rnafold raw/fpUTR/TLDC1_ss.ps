%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCAACAGGGAAGGGGCGGCUCUCGAGAGGAGCCCGUGGGCUGCUGGACCGGACCGGACAGCACCAGGAAGCCCGGCAGGAGAAUUCUGCCAGAUAUCAGGACAG\
) } def
/len { sequence length } bind def

/coor [
[92.11863708 121.46171570]
[87.40046692 135.70034790]
[82.68229675 149.93899536]
[86.52658844 165.88117981]
[74.45756531 176.98391724]
[58.89079285 171.82565308]
[55.84003830 155.71276855]
[68.44365692 145.22082520]
[73.16182709 130.98217773]
[77.87999725 116.74354553]
[62.90546036 115.86988831]
[53.06287384 104.55072021]
[54.27727127 89.59996033]
[65.81761169 80.01765442]
[80.73684692 81.57216644]
[90.05428314 93.32908630]
[83.32228851 79.92459106]
[76.59030151 66.52010345]
[69.85831451 53.11561584]
[57.32600021 44.87298203]
[42.35137558 44.00080872]
[27.37675476 43.12863541]
[12.40213299 42.25646210]
[-2.57248974 41.38429260]
[-17.54711151 40.51211929]
[-30.43933487 50.06042480]
[-45.90498734 45.79507828]
[-52.08014297 30.98808861]
[-44.22775269 16.99810791]
[-28.37149811 14.55705547]
[-16.67494011 25.53749657]
[-1.70031738 26.40966797]
[13.27430534 27.28184128]
[28.24892807 28.15401268]
[43.22354889 29.02618599]
[58.19817352 29.89835739]
[68.95791626 19.44713974]
[60.82251358 5.87784243]
[68.18637085 -7.06908226]
[67.75009918 -22.06273651]
[67.31382751 -37.05639267]
[66.65953827 -52.04211426]
[65.78736877 -67.01673889]
[64.91519165 -81.99135590]
[64.04302216 -96.96598053]
[62.95315170 -111.92633820]
[61.64581299 -126.86925507]
[60.33847809 -141.81217957]
[59.03114319 -156.75509644]
[46.76477432 -166.72062683]
[45.22095871 -182.44932556]
[55.31561661 -194.60964966]
[71.05976868 -195.98709106]
[83.11267853 -185.76441956]
[84.32358551 -170.00659180]
[73.97406006 -158.06243896]
[75.28140259 -143.11950684]
[76.58873749 -128.17658997]
[77.89607239 -113.23367310]
[81.67266846 -106.74443054]
[79.01763916 -97.83815002]
[79.88981628 -82.86353302]
[80.76198578 -67.88890839]
[81.63416290 -52.91428757]
[85.22042084 -46.31794739]
[82.30747986 -37.49266052]
[82.74375153 -22.49900818]
[83.18002319 -7.50535297]
[91.28421783 4.99149752]
[83.95156860 19.01086807]
[88.46034241 28.19034958]
[88.10370636 38.09624863]
[83.26280975 46.38362885]
[89.99479675 59.78811646]
[96.72678375 73.19260406]
[103.45877075 86.59709930]
[115.22500610 95.90062714]
[129.82067871 99.35986328]
[144.41635132 102.81910706]
[159.01202393 106.27834320]
[173.60769653 109.73757935]
[188.20336914 113.19681549]
[202.79904175 116.65605927]
[219.60560608 114.42545319]
[226.40156555 129.95771790]
[213.35760498 140.78784180]
[199.33979797 131.25172424]
[184.74412537 127.79249573]
[170.14845276 124.33325195]
[155.55278015 120.87401581]
[140.95710754 117.41477966]
[126.36144257 113.95553589]
[111.76576996 110.49629974]
[122.91622925 120.52960968]
[134.06669617 130.56291199]
[148.29405212 135.31497192]
[159.34686279 145.45576477]
[165.30358887 159.22229004]
[165.12866211 174.22126770]
[158.85249329 187.84513855]
[147.56620789 197.72540283]
[133.23188782 202.14436340]
[118.34155273 200.33381653]
[105.48388672 192.60850525]
[96.89417267 180.31147766]
[94.06573486 165.58056641]
[97.49020386 150.97689819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[16 76]
[17 75]
[18 74]
[19 73]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[37 70]
[39 68]
[40 67]
[41 66]
[42 64]
[43 63]
[44 62]
[45 61]
[46 59]
[47 58]
[48 57]
[49 56]
[77 93]
[78 92]
[79 91]
[80 90]
[81 89]
[82 88]
[83 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
