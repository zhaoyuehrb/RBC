%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUGCCCGUUGCUCAGCAAGUUACUUGGGGUUCCAGUUUGAUAAGAAAAGACUUCCUGUGGAGGAAUCUGAAGGGAAGGAGGAGGAGCUGGCCCAUUCCUGCCUGGGAGGUUGUGGAAGAAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[137.84628296 254.33337402]
[144.57743835 240.92848206]
[155.41026306 230.55302429]
[169.09288025 224.40600586]
[184.04414368 223.19779968]
[198.53346252 227.06669617]
[188.79869080 215.65467834]
[179.06390381 204.24266052]
[164.91755676 199.58113098]
[161.84799194 184.06054688]
[152.11322021 172.64852905]
[142.37844849 161.23651123]
[128.23208618 156.57498169]
[125.16253662 141.05439758]
[115.42776489 129.64237976]
[105.69298553 118.23036194]
[91.25750732 116.98013306]
[81.85402679 105.95648956]
[82.89499664 91.50440979]
[69.32051849 95.63025665]
[55.24330139 94.25544739]
[42.80026245 87.62207031]
[33.86747742 76.76790619]
[29.77733231 63.36422729]
[31.11986923 49.45848465]
[37.65790558 37.16157150]
[28.20391083 25.51588631]
[18.74991798 13.87019920]
[4.04505730 8.03259373]
[2.03056574 -6.72515345]
[-7.42342806 -18.37084007]
[-16.87742043 -30.01652527]
[-26.33141518 -41.66221237]
[-35.78540802 -53.30789948]
[-45.23940277 -64.95358276]
[-54.69339371 -76.59927368]
[-59.76850891 -78.52629089]
[-63.19223785 -81.90981293]
[-64.68380737 -85.84683228]
[-64.37478638 -89.45776367]
[-72.95348358 -101.76248169]
[-87.19299316 -108.65790558]
[-88.12486267 -123.52333069]
[-96.70355988 -135.82804871]
[-105.28224945 -148.13276672]
[-119.52176666 -155.02818298]
[-120.45363617 -169.89360046]
[-129.03233337 -182.19831848]
[-137.61102295 -194.50303650]
[-153.08854675 -198.72511292]
[-159.30508423 -213.51478577]
[-151.49183655 -227.52667236]
[-135.64247131 -230.01205444]
[-123.91526031 -219.06436157]
[-125.30630493 -203.08172607]
[-116.72761536 -190.77700806]
[-108.14891815 -178.47229004]
[-94.52301025 -172.45700073]
[-92.97753143 -156.71145630]
[-84.39884186 -144.40673828]
[-75.82015228 -132.10202026]
[-62.19424057 -126.08671570]
[-60.64876556 -110.34117889]
[-52.07007217 -98.03646088]
[-43.04771042 -86.05326080]
[-33.59371567 -74.40757751]
[-24.13972282 -62.76189041]
[-14.68572903 -51.11620712]
[-5.23173523 -39.47052002]
[4.22225857 -27.82483292]
[13.67625141 -16.17914772]
[27.70489883 -11.17451859]
[30.39560509 4.41620588]
[39.84959793 16.06189156]
[49.30359268 27.70757866]
[64.72789001 23.71761131]
[80.40991974 26.84067535]
[93.22140503 36.50516891]
[100.58441162 50.82951736]
[100.98995209 66.98832703]
[94.30701447 81.76963806]
[108.74249268 83.01986694]
[118.14597321 94.04351044]
[117.10500336 108.49559021]
[126.83978271 119.90760803]
[136.57455444 131.31962585]
[151.41720581 136.79742432]
[153.79046631 151.50173950]
[163.52523804 162.91375732]
[173.26000977 174.32577515]
[188.10266113 179.80357361]
[190.47592163 194.50788879]
[200.21070862 205.91990662]
[209.94548035 217.33192444]
[221.70541382 226.64341736]
[235.04554749 233.50204468]
[248.38568115 240.36068726]
[261.72579956 247.21931458]
[280.04129028 245.85559082]
[289.04067993 260.86984253]
[302.54385376 267.40161133]
[316.04705811 273.93334961]
[331.83935547 272.97741699]
[339.92739868 285.48474121]
[356.81887817 286.93890381]
[360.09756470 303.57281494]
[345.02136230 311.32806396]
[333.39566040 298.98794556]
[318.56918335 300.41104126]
[309.51531982 287.43655396]
[296.01211548 280.90478516]
[282.50891113 274.37304688]
[270.91787720 278.05319214]
[259.58151245 272.63769531]
[254.86717224 260.55944824]
[241.52703857 253.70082092]
[228.18692017 246.84217834]
[214.84678650 239.98355103]
[221.93597412 253.20260620]
[224.18721008 268.03271484]
[221.34036255 282.76007080]
[213.72441101 295.68280029]
[202.21943665 305.30755615]
[188.15498352 310.52206421]
[173.15634155 310.72375488]
[158.95675659 305.88931274]
[147.19714355 296.57742310]
[139.23645020 283.86413574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 94]
[7 93]
[8 92]
[10 90]
[11 89]
[12 88]
[14 86]
[15 85]
[16 84]
[19 81]
[26 75]
[27 74]
[28 73]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[40 64]
[41 63]
[43 61]
[44 60]
[45 59]
[47 57]
[48 56]
[49 55]
[95 118]
[96 117]
[97 116]
[98 115]
[100 112]
[101 111]
[102 110]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
