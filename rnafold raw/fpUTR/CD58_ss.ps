%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCGCCGGCUGCCAGCCCAGGGCGGGGCGGAGCCCUACUUCUGGCCGACCGCGUAGGCGGUGCUUGAACUUAGGGCUGCUUGUGGCUGGGCACUCGCGCAGAGGCCGGCCCGACGAGCC\
) } def
/len { sequence length } bind def

/coor [
[108.63462830 145.92704773]
[94.36009979 141.31858826]
[88.13475037 127.67142487]
[94.01129913 113.87091827]
[82.01371002 122.87413025]
[70.01612091 131.87734985]
[58.01853180 140.88055420]
[46.02094269 149.88377380]
[42.99337006 155.97756958]
[38.05017471 159.07493591]
[33.16595840 159.02265930]
[20.72080421 167.39631653]
[8.27564907 175.76997375]
[-4.16950560 184.14363098]
[-16.61466026 192.51728821]
[-18.08700180 208.08540344]
[-29.25810814 219.02798462]
[-44.85332489 220.17831421]
[-57.50906754 210.99319458]
[-61.24968338 195.80960083]
[-54.30896378 181.79673767]
[-39.96410751 175.57104492]
[-24.98831749 180.07212830]
[-12.54316139 171.69847107]
[-0.09800645 163.32481384]
[12.34714890 154.95115662]
[24.79230309 146.57749939]
[37.01773071 137.88618469]
[49.01531601 128.88296509]
[61.01290512 119.87976074]
[73.01049805 110.87654114]
[85.00808716 101.87332916]
[89.93621826 87.70599365]
[86.11614990 73.20057678]
[82.29608917 58.69515991]
[78.47602081 44.18974304]
[74.65595245 29.68432808]
[70.83588409 15.17891121]
[67.01581573 0.67349559]
[53.75569153 -12.02387333]
[58.88391876 -28.75372887]
[54.69163513 -43.15597534]
[50.49935150 -57.55822372]
[39.21343231 -68.64599609]
[43.08531189 -83.02854919]
[38.89302826 -97.43079376]
[34.70074081 -111.83304596]
[30.06666183 -116.81558990]
[28.91212273 -122.53363037]
[30.68395805 -127.08542633]
[27.23864174 -141.68438721]
[23.79332542 -156.28335571]
[20.34800911 -170.88232422]
[16.90269279 -185.48129272]
[5.27249336 -197.04287720]
[9.73102283 -212.82431030]
[25.69172859 -216.59100342]
[36.73560333 -204.46809387]
[31.50165939 -188.92660522]
[34.94697571 -174.32763672]
[38.39229202 -159.72866821]
[41.83760834 -145.12971497]
[45.28292465 -130.53074646]
[49.10298920 -116.02532959]
[53.29527283 -101.62307739]
[57.48756027 -87.22083282]
[68.47361755 -77.16320801]
[64.90159607 -61.75050735]
[69.09387970 -47.34825897]
[73.28617096 -32.94601440]
[83.78852081 -26.79549599]
[87.35263062 -14.73802853]
[81.52123260 -3.14657116]
[85.34130096 11.35884476]
[89.16136932 25.86425972]
[92.98143768 40.36967468]
[96.80149841 54.87509155]
[100.62156677 69.38050842]
[104.44163513 83.88592529]
[122.75076294 97.97190857]
[136.33628845 104.33062744]
[149.92182922 110.68934631]
[163.50737000 117.04805756]
[177.09289551 123.40677643]
[190.67843628 129.76548767]
[204.42318726 135.77229309]
[218.31803894 141.42321777]
[232.21290588 147.07414246]
[246.10775757 152.72505188]
[260.00262451 158.37597656]
[273.89749146 164.02688599]
[283.14691162 164.37805176]
[288.07431030 170.00634766]
[297.31164551 170.59553528]
[302.09249878 176.34883118]
[315.67803955 182.70755005]
[329.26358032 189.06626892]
[344.77609253 184.97465515]
[357.56042480 194.66694641]
[357.80950928 210.70806885]
[345.33227539 220.79263306]
[329.70019531 217.18463135]
[322.90484619 202.65180969]
[309.31933594 196.29309082]
[295.73379517 189.93437195]
[282.06750488 183.75109863]
[268.24655151 177.92175293]
[254.35169983 172.27082825]
[240.45684814 166.61991882]
[226.56198120 160.96899414]
[212.66712952 155.31808472]
[198.77226257 149.66716003]
[194.00201416 150.71740723]
[188.52976990 148.69667053]
[184.31971741 143.35102844]
[170.73417664 136.99230957]
[157.14865112 130.63359070]
[143.56311035 124.27487946]
[129.97758484 117.91616058]
[116.39204407 111.55744171]
[124.96734619 123.86452484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 32]
[5 31]
[6 30]
[7 29]
[8 28]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[33 79]
[34 78]
[35 77]
[36 76]
[37 75]
[38 74]
[39 73]
[41 70]
[42 69]
[43 68]
[45 66]
[46 65]
[47 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[80 120]
[81 119]
[82 118]
[83 117]
[84 116]
[85 115]
[86 112]
[87 111]
[88 110]
[89 109]
[90 108]
[91 107]
[93 106]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
