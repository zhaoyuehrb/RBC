%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGAGGAAGAGUGGUAGGGGGAGGGAGAGAGAGAGGAAGAGUUUCCAAACUUGUCUCCAGUGACAGGAGACAUUUACGUUCCACAAGAUAAAACUGCCACUUAGAGCCCAGGGAAGCUAAACCUUCCUGGCUUGGCCUAGGAGCUCGAGCGGAGUC\
) } def
/len { sequence length } bind def

/coor [
[274.64578247 381.86044312]
[263.94796753 371.34582520]
[256.26644897 358.46194458]
[252.10346985 344.05120850]
[251.73120117 329.05581665]
[255.17399597 314.45626831]
[262.20675659 301.20709229]
[272.36962891 290.17462158]
[284.99813843 282.08013916]
[299.26660156 277.45294189]
[314.24209595 276.59555054]
[328.94192505 279.56286621]
[317.72930908 269.59909058]
[306.51666260 259.63528442]
[295.30404663 249.67150879]
[284.09143066 239.70771790]
[272.87878418 229.74394226]
[261.66616821 219.78015137]
[250.45355225 209.81636047]
[239.24092102 199.85256958]
[216.09843445 204.28378296]
[196.85903931 190.25209045]
[193.94636536 166.36660767]
[181.15675354 158.52912903]
[168.36715698 150.69165039]
[155.57756042 142.85417175]
[140.68304443 142.80133057]
[132.95918274 128.99362183]
[125.60798645 136.69982910]
[116.45458984 142.53303528]
[105.97841644 146.07273865]
[94.75647736 147.02157593]
[83.43168640 145.22782898]
[72.67601776 140.69972229]
[63.15066910 133.61033630]
[55.46560287 124.29267883]
[50.14091110 113.22481537]
[47.57243347 101.00567627]
[32.71389389 98.95049286]
[17.85535240 96.89530945]
[2.99681258 94.84012604]
[-11.98271370 101.51438904]
[-25.09177208 91.66123199]
[-22.84488678 75.41674042]
[-7.55346060 69.49185181]
[5.05199766 79.98158264]
[19.91053772 82.03676605]
[34.76907730 84.09195709]
[49.62761688 86.14714050]
[53.60894775 79.79111481]
[39.05852509 76.14623260]
[38.02887344 61.18161392]
[51.94296265 55.57820892]
[61.57160950 67.07907104]
[65.55294037 60.72305298]
[57.21938705 48.25100708]
[48.88583374 35.77896500]
[40.55227661 23.30691910]
[32.21872330 10.83487606]
[23.88517189 -1.63716841]
[15.55161762 -14.10921288]
[-0.01167789 -15.63165760]
[-10.91825867 -26.83792877]
[-12.01837063 -42.43676758]
[-2.79257393 -55.06287766]
[12.40299129 -58.75460052]
[26.39344406 -51.76881027]
[32.57292175 -37.40399170]
[28.02366257 -22.44276619]
[36.35721588 -9.97072220]
[44.69076920 2.50132227]
[53.02432251 14.97336674]
[61.35787582 27.44540977]
[69.69142914 39.91745377]
[78.02498627 52.38949966]
[102.22306824 49.31958389]
[124.36171722 57.46091461]
[139.71914673 74.29179382]
[145.38534546 95.52974701]
[140.79666138 116.20402527]
[156.60597229 116.81745911]
[163.41503906 130.06457520]
[176.20463562 137.90205383]
[188.99423218 145.73953247]
[201.78384399 153.57701111]
[207.45509338 149.32504272]
[213.94166565 146.51304626]
[220.88578796 145.28684998]
[227.90655518 145.70509338]
[234.62091064 147.73643494]
[240.66445923 151.26171875]
[245.71128845 156.08100891]
[249.49153137 161.92485046]
[251.80578613 168.46932983]
[252.53564453 175.35403442]
[251.64965820 182.20193481]
[249.20471191 188.63995361]
[260.41732788 198.60374451]
[271.62997437 208.56752014]
[282.84259033 218.53131104]
[294.05520630 228.49510193]
[305.26782227 238.45887756]
[316.48046875 248.42266846]
[327.69308472 258.38644409]
[338.90570068 268.35025024]
[347.92269897 270.12167358]
[353.09945679 276.48318481]
[367.36529541 281.11843872]
[381.63116455 285.75369263]
[395.89700317 290.38894653]
[410.20767212 294.88394165]
[424.56176758 299.23822021]
[438.95794678 303.45135498]
[453.39477539 307.52294922]
[467.83160400 311.59457397]
[485.54010010 306.63397217]
[497.31469727 319.61666870]
[511.82867432 323.40405273]
[526.34265137 327.19140625]
[540.85662842 330.97879028]
[555.37060547 334.76617432]
[569.88464355 338.55352783]
[581.79357910 328.60589600]
[597.27746582 327.59158325]
[610.38238525 335.90063477]
[616.06927490 350.33807373]
[612.15130615 365.35238647]
[600.13513184 375.17025757]
[584.64117432 376.01654053]
[571.62713623 367.56579590]
[566.09722900 353.06753540]
[551.58325195 349.28015137]
[537.06927490 345.49276733]
[522.55529785 341.70541382]
[508.04129028 337.91802979]
[493.52731323 334.13064575]
[482.90332031 339.98248291]
[470.75588989 336.90777588]
[463.75997925 326.03140259]
[449.32315063 321.95977783]
[434.88632202 317.88818359]
[427.55694580 319.10559082]
[420.20751953 313.59231567]
[405.85339355 309.23803711]
[398.50152588 310.31134033]
[391.26174927 304.65481567]
[376.99591064 300.01956177]
[362.73004150 295.38430786]
[348.46420288 290.74905396]
[358.45938110 301.93371582]
[365.29129028 315.28753662]
[368.51327515 329.93740845]
[367.91467285 344.92544556]
[363.53460693 359.27169800]
[355.65945435 372.03814697]
[344.80410767 382.39004517]
[331.67840576 389.65057373]
[317.14047241 393.34500122]
[302.14089966 393.23178101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 105]
[13 104]
[14 103]
[15 102]
[16 101]
[17 100]
[18 99]
[19 98]
[20 97]
[23 85]
[24 84]
[25 83]
[26 82]
[28 80]
[38 49]
[39 48]
[40 47]
[41 46]
[55 75]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[107 149]
[108 148]
[109 147]
[110 146]
[111 144]
[112 143]
[113 141]
[114 140]
[115 139]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
