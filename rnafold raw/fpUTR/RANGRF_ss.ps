%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAAAUCUUAAAGGAUCCGGGAGCUAAGCCAGACCCGGGUGGCGGUGGCAGCUGCGAAACCCAGGGAGCCGAUGCCACGUGACCCAAUGUGGACUUCUUUUAAACCUUUCUAAUGCCCAUAACCCAGCCUCAGACCC\
) } def
/len { sequence length } bind def

/coor [
[117.88188171 381.10391235]
[115.19960785 396.04275513]
[107.29857635 409.00186157]
[95.24734497 418.22857666]
[80.67573547 422.47506714]
[65.55444336 421.16702271]
[51.92849731 414.48135376]
[41.64069748 403.32226562]
[36.08238220 389.19888306]
[36.00526810 374.02133179]
[41.41978455 359.84219360]
[51.59366226 348.57913208]
[65.15097046 341.75537109]
[80.25818634 340.29373169]
[84.27674103 325.84207153]
[83.02758789 318.49313354]
[88.55286407 311.11114502]
[92.89699554 296.75396729]
[89.17720032 282.33132935]
[100.57957458 271.36334229]
[104.92370605 257.00616455]
[109.26783752 242.64898682]
[108.18507385 235.27371216]
[113.87577057 228.01846313]
[118.54325867 213.76312256]
[123.21074677 199.50779724]
[123.04123688 184.50875854]
[118.05278015 170.36253357]
[113.06432343 156.21632385]
[107.91632843 142.12739563]
[102.60945129 128.09753418]
[97.30256653 114.06766510]
[86.60247040 105.06769562]
[88.66757202 91.23921204]
[75.78899384 87.12620544]
[67.76953125 76.48547363]
[67.37572479 63.36219025]
[74.52706909 52.58495712]
[69.53861237 38.43874359]
[64.55015564 24.29253197]
[59.56169891 10.14632130]
[47.67536545 -0.29521030]
[50.73963165 -14.87120152]
[45.75117874 -29.01741219]
[40.76272202 -43.16362381]
[34.90951157 -50.28841400]
[35.82531738 -57.68627548]
[31.15783119 -71.94161224]
[26.49034500 -86.19694519]
[21.82285881 -100.45227814]
[17.15537453 -114.70761871]
[12.00737667 -128.79655457]
[6.38478565 -142.70289612]
[0.76219440 -156.60923767]
[-11.58382607 -166.50299072]
[-9.18133736 -181.20256042]
[-24.35859489 -183.96922302]
[-35.61513519 -194.51881409]
[-39.35903931 -209.48500061]
[-34.39564133 -224.09211731]
[-22.30873871 -233.67910767]
[-6.95522213 -235.18678284]
[6.76565742 -228.13406372]
[14.47561741 -214.77142334]
[13.71443844 -199.36285400]
[4.72500896 -186.82516479]
[16.66886330 -177.92608643]
[14.66854095 -162.23184204]
[20.29113197 -148.32548523]
[25.91372299 -134.41914368]
[29.08717728 -132.70706177]
[31.55736923 -129.32875061]
[32.53002167 -124.64717102]
[31.41070938 -119.37509918]
[36.07819366 -105.11976624]
[40.74568176 -90.86443329]
[45.41316605 -76.60909271]
[50.08065033 -62.35375977]
[54.90893173 -48.15208054]
[59.89738846 -34.00587082]
[64.88584137 -19.85965729]
[76.41537476 -10.42995834]
[73.70790863 5.15786409]
[78.69636536 19.30407524]
[83.68482208 33.45028687]
[88.67327881 47.59650040]
[104.11440277 54.16391754]
[110.18565369 70.16735840]
[102.69743347 85.93233490]
[113.39752960 94.93230438]
[111.33242798 108.76078796]
[116.63931274 122.79064941]
[121.94618988 136.82051086]
[127.95891571 143.81120300]
[127.21053314 151.22787476]
[132.19898987 165.37408447]
[137.18745422 179.52029419]
[140.92166138 164.99253845]
[147.44781494 151.48663330]
[156.50952148 139.53315735]
[167.75079346 129.60169983]
[180.73001099 122.08241272]
[194.93730164 117.27068329]
[209.81454468 115.35553741]
[224.77728271 116.41222382]
[239.23770142 120.39921570]
[252.62774658 127.15989685]
[264.42138672 136.42866516]
[274.15530396 147.84141541]
[281.44711304 160.94979858]
[286.01034546 175.23884583]
[287.66577148 190.14721680]
[286.34829712 205.08924866]
[282.10974121 219.47795105]
[275.11660767 232.74804688]
[265.64355469 244.37826538]
[254.06280518 253.91168213]
[240.82926941 260.97378540]
[226.46281433 265.28713989]
[211.52784729 266.68234253]
[196.61105347 265.10452271]
[182.29846191 260.61569214]
[169.15232849 253.39218140]
[157.68908691 243.71777344]
[148.35906982 231.97251892]
[141.52880859 218.61784363]
[137.46607971 204.17527771]
[132.79859924 218.43061829]
[128.13110352 232.68594360]
[123.62501526 246.99311829]
[119.28088379 261.35028076]
[114.93675232 275.70745850]
[118.34581757 291.15704346]
[107.25417328 301.09808350]
[102.91004181 315.45526123]
[98.72843170 329.86062622]
[94.70986938 344.31228638]
[106.89400482 353.36279297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 137]
[15 136]
[17 135]
[18 134]
[20 132]
[21 131]
[22 130]
[24 129]
[25 128]
[26 127]
[27 97]
[28 96]
[29 95]
[30 93]
[31 92]
[32 91]
[34 89]
[38 86]
[39 85]
[40 84]
[41 83]
[43 81]
[44 80]
[45 79]
[47 78]
[48 77]
[49 76]
[50 75]
[51 74]
[52 70]
[53 69]
[54 68]
[56 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
