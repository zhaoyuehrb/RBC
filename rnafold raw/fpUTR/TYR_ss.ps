%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACUGUAGUAGUAGCUGGAAAGAGAAAUCUGUGACUCCAAUUAGCCAGUUCCUGCAGACCUUGUGAGGACUAGAGGAAGA\
) } def
/len { sequence length } bind def

/coor [
[148.78527832 191.38282776]
[145.82299805 185.39891052]
[144.62506104 178.79663086]
[145.30290222 172.08761597]
[147.82183838 165.79696655]
[137.94055176 154.51156616]
[128.05924988 143.22618103]
[118.17796326 131.94078064]
[108.29666901 120.65539551]
[98.41538239 109.37000275]
[93.12560272 107.79124451]
[89.20089722 103.25085449]
[88.25323486 96.83696747]
[80.39974976 91.68563080]
[79.15048981 84.20787048]
[70.61155701 71.87552643]
[62.07262421 59.54319000]
[53.53369141 47.21084976]
[44.99475861 34.87850952]
[36.45582199 22.54616928]
[11.04007053 22.64886856]
[-7.48815489 5.54364395]
[-9.38227940 -19.40206337]
[-22.46624947 -26.73757172]
[-35.55022049 -34.07308197]
[-51.93230820 -33.32525253]
[-60.54187393 -47.28259659]
[-52.52213287 -61.58699417]
[-36.12310791 -61.52330780]
[-28.21471024 -47.15705490]
[-15.13074017 -39.82154465]
[-2.04676938 -32.48603439]
[3.23773599 -37.31113052]
[9.42352486 -40.93154144]
[16.24002457 -43.18336487]
[23.38791466 -43.96269226]
[30.55226707 -43.23038101]
[37.41642761 -41.01399994]
[43.67600250 -37.40680695]
[49.05237198 -32.56385803]
[53.30506897 -26.69532776]
[56.24254608 -20.05739594]
[57.73080826 -12.94106579]
[57.69949722 -5.65941238]
[56.14522171 1.46619821]
[53.13190079 8.12028790]
[48.78816223 14.00723553]
[57.32709885 26.33957481]
[65.86602783 38.67191696]
[74.40496063 51.00425720]
[82.94390106 63.33659744]
[91.48283386 75.66893768]
[100.25361633 87.83747864]
[109.70077515 99.48870850]
[119.58206177 110.77410126]
[129.46334839 122.05949402]
[139.34465027 133.34487915]
[149.22593689 144.63027954]
[159.10722351 155.91566467]
[183.85290527 159.99125671]
[191.30046082 183.29090881]
[204.09747314 191.11628723]
[216.89448547 198.94165039]
[229.69149780 206.76702881]
[244.87313843 203.28056335]
[257.73965454 211.39891052]
[260.96990967 225.89376831]
[277.36856079 225.76640320]
[285.44378662 240.03955078]
[276.88848877 254.03021240]
[260.50363159 253.34600830]
[253.14453125 238.69078064]
[238.77003479 242.42034912]
[225.68057251 234.66661072]
[221.86611938 219.56404114]
[209.06910706 211.73866272]
[196.27209473 203.91329956]
[183.47508240 196.08792114]
[178.02075195 199.58389282]
[171.78065491 201.44467163]
[165.23626709 201.50759888]
[158.89779663 199.74948120]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 59]
[6 58]
[7 57]
[8 56]
[9 55]
[10 54]
[13 53]
[15 52]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[23 32]
[24 31]
[25 30]
[61 78]
[62 77]
[63 76]
[64 75]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
