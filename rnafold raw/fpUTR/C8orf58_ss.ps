%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUGGGGGCCGCGCCCAGCUGGGUCGGGACGCGCUCCCUGAGCUGCCCGAGCUCCGCGGGGACUCGGGCCGGGAUCCUCGGGCGGCUGCAUUGGCCGGGGCCGGGGCCGGGAGCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[85.94548035 170.16195679]
[85.55607605 155.16700745]
[85.16666412 140.17207336]
[84.77725220 125.17712402]
[72.05423737 117.23200226]
[58.40975952 123.46322632]
[44.76527786 129.69445801]
[31.12079811 135.92567444]
[17.47631836 142.15690613]
[3.83183908 148.38813782]
[-2.77168369 154.87759399]
[-10.24870110 154.59887695]
[-24.05034828 160.47378540]
[-37.85199738 166.34867859]
[-51.57621765 172.40226746]
[-65.22069550 178.63348389]
[-78.86518097 184.86471558]
[-88.20406342 197.63560486]
[-102.99539185 195.88461304]
[-116.63986969 202.11582947]
[-128.53590393 214.19558716]
[-143.43673706 206.10845947]
[-139.79061890 189.55122375]
[-122.87109375 188.47135925]
[-109.22661591 182.24012756]
[-100.86367035 169.91493225]
[-85.09640503 171.22023010]
[-71.45191956 164.98899841]
[-57.80744171 158.75778198]
[-52.97182465 153.04811096]
[-43.72690201 152.54704285]
[-29.92525482 146.67213440]
[-16.12360573 140.79722595]
[-2.39938617 134.74365234]
[11.24509430 128.51242065]
[24.88957405 122.28119659]
[38.53405380 116.04997253]
[52.17853546 109.81874847]
[65.82301331 103.58752441]
[76.02014160 87.45021057]
[90.49063873 82.67195892]
[101.05622101 87.57843018]
[104.52948761 72.98608398]
[108.00276184 58.39374542]
[111.47603607 43.80140686]
[114.94930267 29.20906830]
[118.42257690 14.61672783]
[121.89585114 0.02438773]
[125.36911774 -14.56795216]
[128.84239197 -29.16029167]
[132.31565857 -43.75263214]
[135.78894043 -58.34497070]
[130.08477783 -75.79423523]
[142.49508667 -88.12858582]
[145.58834839 -102.80617523]
[148.68162537 -117.48376465]
[147.38435364 -126.65092468]
[152.05043030 -132.49995422]
[155.52369690 -147.09230042]
[158.99697876 -161.68464661]
[148.22877502 -172.73225403]
[145.16519165 -187.85235596]
[150.78376770 -202.22021484]
[163.29164124 -211.25106812]
[178.69761658 -212.06321716]
[192.08569336 -204.39750671]
[199.18376160 -190.70002747]
[197.72689819 -175.34161377]
[188.17994690 -163.22306824]
[173.58930969 -158.21136475]
[170.11604309 -143.61903381]
[166.64276123 -129.02668762]
[163.35922241 -114.39048767]
[160.26594543 -99.71289825]
[157.17266846 -85.03530884]
[163.53501892 -74.65821838]
[160.99162292 -62.34343719]
[150.38127136 -54.87170029]
[146.90800476 -40.27936172]
[143.43473816 -25.68701935]
[139.96145630 -11.09467983]
[136.48818970 3.49765968]
[133.01492310 18.09000015]
[129.54164124 32.68233871]
[126.06837463 47.27467728]
[122.59510040 61.86701965]
[119.12182617 76.45935822]
[115.64855957 91.05169678]
[121.16318512 105.00121307]
[133.67564392 113.27394867]
[152.02262878 113.90826416]
[159.34564209 129.79930115]
[172.06864929 137.74441528]
[184.79167175 145.68954468]
[197.51467896 153.63465881]
[210.23770142 161.57977295]
[222.96070862 169.52490234]
[237.29519653 163.58332825]
[252.37651062 167.23481750]
[262.40560913 179.07530212]
[263.52606201 194.55186462]
[255.30706787 207.71347046]
[240.90896606 213.49919128]
[225.86814880 209.68431091]
[215.96809387 197.73571777]
[215.01559448 182.24790955]
[202.29258728 174.30279541]
[189.56956482 166.35768127]
[176.84655762 158.41255188]
[164.12353516 150.46743774]
[151.40052795 142.52232361]
[139.46969604 144.93460083]
[128.77702332 138.31724548]
[125.40290833 125.78641510]
[112.89044189 117.51367950]
[99.77219391 124.78771210]
[100.16160583 139.78265381]
[100.55101776 154.77760315]
[100.94042969 169.77255249]
[103.63047028 188.96664429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 119]
[2 118]
[3 117]
[4 116]
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[10 34]
[12 33]
[13 32]
[14 31]
[15 29]
[16 28]
[17 27]
[19 25]
[20 24]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[47 83]
[48 82]
[49 81]
[50 80]
[51 79]
[52 78]
[54 75]
[55 74]
[56 73]
[58 72]
[59 71]
[60 70]
[89 115]
[90 114]
[92 111]
[93 110]
[94 109]
[95 108]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
