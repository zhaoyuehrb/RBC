%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAAGCCAAAGGGCUCUCACACUAAGUGAAGCUUCUCCAUUCUGUAAGCUUUCCGGGAACAUCCAAGGCAAGACUGGCACCCAGCACAGCAGUGACUGACCACAUACCCCACUCUCCAGGACCC\
) } def
/len { sequence length } bind def

/coor [
[156.66990662 170.77105713]
[158.94821167 158.56013489]
[145.49169922 151.93273926]
[132.03520203 145.30534363]
[118.57868958 138.67793274]
[104.13058472 142.70935059]
[96.04936981 155.34635925]
[87.96815491 167.98336792]
[79.88694000 180.62037659]
[79.68441010 197.01828003]
[65.25170898 204.80474854]
[51.43596649 195.96975708]
[52.44963074 179.60195923]
[67.24993134 172.53916931]
[75.33114624 159.90216064]
[83.41236115 147.26515198]
[91.49357605 134.62814331]
[77.83604431 129.16712952]
[67.21590424 118.42724609]
[53.04457855 123.34388733]
[38.87324524 128.26052856]
[24.70191574 133.17716980]
[16.43715858 146.92756653]
[0.51535338 148.89624023]
[-10.84965611 137.57298279]
[-8.93960571 121.64403534]
[4.78027630 113.32872772]
[19.78527069 119.00584412]
[33.95660400 114.08920288]
[48.12793350 109.17255402]
[62.29926300 104.25591278]
[63.59633255 89.31209564]
[50.48403931 82.02733612]
[37.37174606 74.74257660]
[24.25945091 67.45780945]
[11.14715672 60.17304993]
[-2.05423331 53.05102158]
[-15.89728737 60.06169128]
[-31.21193695 57.56346512]
[-42.10938644 46.51696396]
[-44.39934540 31.16979027]
[-37.20127487 17.42324829]
[-23.28298378 10.56316185]
[-7.99633694 13.22737503]
[2.78063822 24.39144325]
[4.90397453 39.76255417]
[12.36918926 40.08162689]
[18.43191910 47.06075668]
[31.54421234 54.34552002]
[44.65650558 61.63027954]
[57.76879883 68.91503906]
[70.88109589 76.19980621]
[77.49960327 72.63448334]
[84.33168793 70.67548370]
[91.01819611 70.25878906]
[90.27639008 55.27714157]
[79.92562103 40.10790253]
[88.41188049 24.79982948]
[87.29974365 9.84111500]
[86.18759918 -5.11759901]
[78.98354340 -20.46484375]
[91.73673248 -31.63590240]
[106.00165558 -22.47356987]
[101.14631653 -6.22974062]
[102.25845337 8.72897434]
[103.37059784 23.68768883]
[112.36409760 31.87772942]
[113.35443115 44.40477753]
[105.25803375 54.53533554]
[105.99983978 69.51698303]
[115.29867554 72.20909882]
[123.49871063 77.72388458]
[129.74884033 85.63642883]
[133.35655212 95.26747131]
[133.86305237 105.74114990]
[131.09774780 116.06445312]
[125.20608521 125.22142792]
[138.66259766 131.84883118]
[152.11909485 138.47622681]
[165.57560730 145.10362244]
[181.81690979 130.92408752]
[204.31732178 127.69238281]
[226.02485657 137.69918823]
[239.44302368 158.88200378]
[254.24954224 156.48052979]
[269.05606079 154.07905579]
[283.83172607 151.49462891]
[298.57431030 148.72766113]
[313.31692505 145.96069336]
[325.40362549 134.87721252]
[340.96215820 140.06030273]
[343.98721313 156.17802429]
[331.36688232 166.64985657]
[316.08389282 160.70327759]
[301.34130859 163.47024536]
[286.59869385 166.23722839]
[280.53997803 170.61019897]
[271.45751953 168.88557434]
[256.65100098 171.28704834]
[241.84449768 173.68852234]
[238.61427307 180.45724487]
[252.75953674 185.44836426]
[266.90481567 190.43949890]
[281.85507202 191.66009521]
[289.33496094 204.66206360]
[282.87493896 218.19973755]
[268.06246948 220.56407166]
[257.70883179 209.70906067]
[244.93132019 201.85186768]
[232.15380859 193.99468994]
[228.92358398 200.76341248]
[236.36996460 213.78460693]
[251.80926514 215.33625793]
[263.36544800 225.69166565]
[266.59490967 240.86895752]
[260.25585938 255.03215027]
[246.78581238 262.73522949]
[231.36425781 261.01617432]
[219.92109680 250.53601074]
[216.85646057 235.32458496]
[223.34877014 221.23098755]
[215.90238953 208.20979309]
[201.54940796 211.66491699]
[187.24211121 210.29669189]
[174.51554871 204.50561523]
[164.65296936 195.15304565]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 80]
[3 79]
[4 78]
[5 77]
[6 17]
[7 16]
[8 15]
[9 14]
[19 31]
[20 30]
[21 29]
[22 28]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 46]
[55 70]
[56 69]
[58 66]
[59 65]
[60 64]
[84 100]
[85 99]
[86 98]
[87 96]
[88 95]
[89 94]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
