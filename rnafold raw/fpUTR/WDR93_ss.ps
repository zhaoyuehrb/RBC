%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGACUUCCGGUUCAAGCCGGAAGUUGUGGUUACCAAGGCGACGCAACGCCGCCCGGCCAGCUUUUCAGUUUCAUAGAGGUUCCCAGUGCCACCUUCUGUG\
) } def
/len { sequence length } bind def

/coor [
[100.60113525 139.03178406]
[86.89968109 136.77259827]
[74.85600281 129.86003113]
[63.16979599 139.26388550]
[51.48358917 148.66773987]
[39.79737854 158.07159424]
[28.11117172 167.47546387]
[16.42496300 176.87931824]
[4.73875380 186.28317261]
[-6.94745493 195.68702698]
[-18.63366318 205.09088135]
[-30.31987190 214.49473572]
[-35.73615646 229.97363281]
[-51.89751434 232.75614929]
[-62.17853165 219.97990417]
[-56.00297546 204.78797913]
[-39.72372818 202.80853271]
[-28.03752136 193.40467834]
[-16.35131264 184.00082397]
[-4.66510344 174.59696960]
[7.02110529 165.19309998]
[18.70731354 155.78924561]
[30.39352226 146.38539124]
[42.07973099 136.98153687]
[53.76594162 127.57767487]
[65.45214844 118.17382050]
[62.00046539 91.06259155]
[77.17479706 68.33216095]
[70.90539551 54.70518112]
[64.63598633 41.07820129]
[58.36658478 27.45122337]
[52.09717941 13.82424355]
[38.02722549 13.23887539]
[25.65898323 6.64614534]
[17.40803337 -4.60104609]
[14.85744190 -18.24732208]
[18.45429420 -31.58699036]
[27.43257332 -42.00049591]
[21.58578491 -55.81407928]
[15.73899651 -69.62766266]
[9.89220810 -83.44124603]
[-4.84747219 -89.14364624]
[-11.16129303 -103.63195801]
[-5.30337572 -118.31052399]
[9.25088120 -124.47081757]
[23.86669540 -118.45803070]
[29.87276268 -103.83946228]
[23.70579147 -89.28803253]
[29.55257988 -75.47444916]
[35.39936829 -61.66086960]
[41.24615479 -47.84728622]
[57.24923325 -46.29085159]
[70.38846588 -36.86270142]
[77.06417847 -22.03062630]
[75.38985443 -5.75808716]
[65.72415924 7.55483866]
[71.99356079 21.18181801]
[78.26296997 34.80879593]
[84.53237152 48.43577576]
[90.80178070 62.06275558]
[97.50888824 61.04314804]
[104.29124451 61.20016861]
[110.94398499 62.52906418]
[117.26618195 64.98970795]
[123.06688690 68.50777435]
[128.17089844 72.97700500]
[132.42405701 78.26242065]
[135.69790649 84.20437622]
[137.89355469 90.62341309]
[138.94470215 97.32566071]
[138.81959534 104.10867310]
[137.52200317 110.76759338]
[135.09112549 117.10129547]
[147.06138611 126.14081573]
[159.03164673 135.18034363]
[171.00190735 144.21986389]
[182.97216797 153.25936890]
[194.94242859 162.29888916]
[207.05046082 171.15301514]
[219.29341125 179.81961060]
[231.53637695 188.48622131]
[245.45565796 181.99400330]
[260.75482178 183.34722900]
[273.31845093 192.18185425]
[279.76702881 206.12142944]
[278.36584473 221.41627502]
[269.49188232 233.95214844]
[255.53216553 240.35697937]
[240.24179077 238.90788269]
[227.73377991 229.99465942]
[221.37274170 216.01493835]
[222.86976624 200.72917175]
[210.62681580 192.06257629]
[198.38385010 183.39596558]
[190.97781372 182.07774353]
[185.90290833 174.26914978]
[173.93264771 165.22962952]
[161.96238708 156.19010925]
[149.99212646 147.15058899]
[138.02186584 138.11106873]
[126.05161285 129.07156372]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[38 51]
[39 50]
[40 49]
[41 48]
[73 101]
[74 100]
[75 99]
[76 98]
[77 97]
[78 96]
[79 94]
[80 93]
[81 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
