%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGCUCGUUGAUUCCUCUGCAAGGUGGUGCAGCAUCCUCUGUCCCUUCAUUCAUUUCAGAUCUACUCAGGUCUCCCUGUAAACAGAUCUCUCGGAUCAAUAAGC\
) } def
/len { sequence length } bind def

/coor [
[85.65279388 344.69186401]
[70.50604248 349.97915649]
[57.00572586 341.31192017]
[55.50812912 325.33892822]
[67.16208649 314.31326294]
[68.91967773 299.41659546]
[70.67726898 284.51992798]
[64.48455811 270.97372437]
[73.78556824 258.17523193]
[75.54316711 243.27854919]
[77.30075836 228.38186646]
[79.05834961 213.48519897]
[80.81594849 198.58853149]
[82.57353973 183.69184875]
[84.33113098 168.79518127]
[86.08872986 153.89851379]
[75.57844543 150.02159119]
[66.05727386 144.11874390]
[57.91082382 136.42903137]
[51.46904755 127.26387787]
[46.99283600 116.99450684]
[44.66349030 106.03683472]
[44.57534790 94.83466339]
[46.73197937 83.84169769]
[51.04603958 73.50315857]
[38.93672562 64.65078735]
[23.22978401 62.75273514]
[17.52144432 48.99540710]
[5.41212797 40.14303589]
[-10.29481220 38.24497986]
[-16.00315285 24.48764992]
[-28.11246872 15.63527966]
[-40.22178268 6.78290892]
[-52.33110046 -2.06946158]
[-67.90756226 0.60438824]
[-80.76406860 -8.58722687]
[-83.27307892 -24.19108582]
[-73.94605255 -36.94969177]
[-58.31653976 -39.29359818]
[-45.65725708 -29.83219719]
[-43.47872925 -14.17877769]
[-31.36941338 -5.32640696]
[-19.26009750 3.52596378]
[-7.15078163 12.37833405]
[7.69001913 13.64320850]
[14.26449871 28.03372002]
[26.37381554 36.88608932]
[41.21461487 38.15096283]
[47.78909683 52.54147339]
[59.89841080 61.39384460]
[68.18978882 54.31977463]
[77.70066071 48.99694061]
[88.06642151 45.62939835]
[98.88967896 44.34625244]
[109.75550079 45.19668961]
[120.24732971 48.14811325]
[129.96293640 53.08736801]
[138.52986145 59.82510757]
[145.61967468 68.10301971]
[150.96058655 77.60375977]
[165.38085938 73.47390747]
[179.80113220 69.34404755]
[194.22140503 65.21419525]
[208.64167786 61.08433533]
[223.06195068 56.95447922]
[228.64598083 39.84358978]
[243.18589783 29.49987984]
[260.87142944 29.83026505]
[274.76885986 40.52060699]
[288.92190552 35.55157852]
[303.07495117 30.58254814]
[317.22799683 25.61351967]
[327.49560547 12.82648087]
[343.65988159 15.59204674]
[349.09240723 31.06524086]
[338.20465088 43.32856750]
[322.19702148 39.76656723]
[308.04397583 44.73559570]
[293.89093018 49.70462418]
[279.73788452 54.67365646]
[277.97308350 66.86328125]
[271.10034180 77.17177582]
[260.40182495 83.56321716]
[247.92240906 84.74311066]
[236.07885742 80.42013550]
[227.19180298 71.37475586]
[212.77153015 75.50460815]
[198.35125732 79.63446808]
[183.93098450 83.76432037]
[169.51071167 87.89418030]
[155.09043884 92.02403259]
[153.49023438 115.40671539]
[142.40736389 136.05812073]
[123.80657959 150.31718445]
[100.98539734 155.65609741]
[99.22780609 170.55278015]
[97.47021484 185.44944763]
[95.71261597 200.34611511]
[93.95502472 215.24279785]
[92.19743347 230.13946533]
[90.43983459 245.03613281]
[88.68224335 259.93280029]
[94.74923706 274.54452515]
[85.57394409 286.27752686]
[83.81635284 301.17419434]
[82.05875397 316.07086182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 106]
[6 105]
[7 104]
[9 102]
[10 101]
[11 100]
[12 99]
[13 98]
[14 97]
[15 96]
[16 95]
[25 50]
[26 49]
[28 47]
[29 46]
[31 44]
[32 43]
[33 42]
[34 41]
[60 91]
[61 90]
[62 89]
[63 88]
[64 87]
[65 86]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
