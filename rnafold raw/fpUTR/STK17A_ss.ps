%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAGUCUGCCUGCCGCAGUCCGAGCGCCGCGCUGGGGAGAGCGGGUGUUUGAAGGCUCCGCGGACCGGCACUAGGAGCCGGGGGCGGGUCCGUGACCCUCCGGCUGCUCGGAGUGAACAGGCGGCCAGGAAAGAAGCGGGCCUGAACACC\
) } def
/len { sequence length } bind def

/coor [
[100.81562805 127.33084869]
[97.13334656 141.87185669]
[93.45106506 156.41285706]
[89.76878357 170.95385742]
[91.74182892 187.79260254]
[76.10733795 194.34997559]
[65.47817993 181.14175415]
[75.22778320 167.27157593]
[78.91006470 152.73057556]
[82.59234619 138.18957520]
[86.27462769 123.64856720]
[80.47425079 119.14120483]
[76.08313751 113.25233459]
[73.41822052 106.40698242]
[58.43103027 105.78710938]
[43.44384384 105.16722870]
[28.45665932 104.54735565]
[13.45986176 104.23735046]
[-1.54013789 104.23735046]
[-16.54013824 104.23735046]
[-31.54013824 104.23735046]
[-46.53693390 104.54735565]
[-61.52412033 105.16722870]
[-76.51130676 105.78710938]
[-91.49849701 106.40698242]
[-106.48567963 107.02685547]
[-121.47286224 107.64672852]
[-136.46005249 108.26660919]
[-151.44723511 108.88648224]
[-159.95457458 112.38632965]
[-166.74990845 109.36105347]
[-181.74670410 109.67105865]
[-196.74349976 109.98106384]
[-211.74029541 110.29106140]
[-222.50004578 121.86704254]
[-238.29661560 122.36071014]
[-249.75819397 111.47917175]
[-250.08482361 95.67826080]
[-239.08271790 84.33237457]
[-223.27923584 84.17282104]
[-212.05029297 95.29426575]
[-197.05349731 94.98426819]
[-182.05670166 94.67426300]
[-167.05990601 94.36425781]
[-152.06710815 93.89929199]
[-137.07992554 93.27941895]
[-122.09274292 92.65954590]
[-107.10555267 92.03967285]
[-92.11837006 91.41979218]
[-77.13117981 90.79991913]
[-62.14399338 90.18004608]
[-47.15680695 89.56017303]
[-43.28385925 86.66836548]
[-37.53844452 86.22154236]
[-31.54013824 89.23735046]
[-16.54013824 89.23735046]
[-1.54013789 89.23735046]
[13.45986176 89.23735046]
[17.44900703 86.50807190]
[23.20797920 86.29904938]
[29.07653236 89.56017303]
[44.06372070 90.18004608]
[59.05090714 90.79991913]
[74.03809357 91.41979218]
[85.15396881 74.10031891]
[106.76613617 68.35234070]
[105.52744293 53.40357590]
[104.28874969 38.45480728]
[103.05006409 23.50604057]
[101.81137085 8.55727291]
[88.93954468 -0.32247958]
[84.83680725 -15.41226292]
[91.44034576 -29.58714294]
[105.63217926 -36.15417480]
[120.71134949 -32.01260757]
[129.55793762 -19.11796188]
[127.99485779 -3.55869508]
[116.76013947 7.31858253]
[117.99883270 22.26734924]
[119.23751831 37.21611786]
[120.47621155 52.16488266]
[121.71489716 67.11365509]
[132.43054199 77.61007690]
[144.21736145 67.42633057]
[159.38702393 68.58222961]
[169.02302551 79.88191223]
[183.99420166 80.81139374]
[198.96537781 81.74087524]
[213.93655396 82.67035675]
[228.90773010 83.59983826]
[243.87890625 84.52931976]
[258.85006714 85.45880127]
[273.82125854 86.38827515]
[288.79241943 87.31775665]
[300.57925415 77.13401031]
[315.74890137 78.28990936]
[325.38491821 89.58959198]
[337.17172241 79.40584564]
[352.34136963 80.56173706]
[361.97738647 91.86142731]
[376.94857788 92.79090881]
[391.91973877 93.72039032]
[406.89971924 94.49510956]
[421.88690186 95.11498260]
[436.87408447 95.73485565]
[451.86126709 96.35472870]
[466.84848022 96.97460938]
[481.83566284 97.59448242]
[496.82284546 98.21435547]
[510.93096924 91.05395508]
[523.32763672 99.31060028]
[533.73132324 87.63597870]
[549.21270752 85.43124390]
[562.46191406 93.73740387]
[567.22308350 108.63254547]
[561.24816895 123.08363342]
[547.35827637 130.26731873]
[532.11181641 126.79166412]
[522.70776367 114.29779053]
[509.67160034 121.50252533]
[496.20297241 113.20153809]
[481.21578979 112.58166504]
[466.22860718 111.96179199]
[451.24139404 111.34191895]
[436.25421143 110.72204590]
[421.26702881 110.10216522]
[406.27984619 109.48229218]
[399.42343140 112.36648560]
[390.99026489 108.69156647]
[376.01907349 107.76208496]
[361.04791260 106.83260345]
[350.08822632 116.85360718]
[334.89205933 116.12425232]
[324.45541382 104.56076813]
[313.49572754 114.58177185]
[298.29959106 113.85241699]
[287.86294556 102.28893280]
[272.89175415 101.35945129]
[257.92059326 100.42996979]
[242.94941711 99.50048828]
[227.97824097 98.57100677]
[213.00706482 97.64153290]
[198.03590393 96.71205139]
[183.06472778 95.78256989]
[168.09355164 94.85308838]
[157.13385010 104.87409210]
[141.93771362 104.14473724]
[131.50106812 92.58125305]
[131.12136841 103.85234070]
[126.95809937 113.95285797]
[119.76358795 121.69975281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[14 64]
[15 63]
[16 62]
[17 61]
[18 58]
[19 57]
[20 56]
[21 55]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[31 44]
[32 43]
[33 42]
[34 41]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[83 148]
[86 145]
[87 144]
[88 143]
[89 142]
[90 141]
[91 140]
[92 139]
[93 138]
[94 137]
[97 134]
[100 131]
[101 130]
[102 129]
[103 127]
[104 126]
[105 125]
[106 124]
[107 123]
[108 122]
[109 121]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
