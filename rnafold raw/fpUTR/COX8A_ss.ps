%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAGCGCAGCCAUUUUGGCUUCCUGACCUUGGGCUACGGCUGACCGUUUUUUGUGGUGUACUCCGUGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[77.97800446 113.93550110]
[63.53057098 117.96929169]
[52.31947327 129.13270569]
[37.98032761 125.10305023]
[23.53289032 129.13684082]
[9.08545113 133.17063904]
[1.39646494 138.64334106]
[-6.05183029 137.05723572]
[-17.72056770 147.74139404]
[-31.87839127 143.11480713]
[-46.48207474 146.54006958]
[-61.08575821 149.96533203]
[-75.68943787 153.39059448]
[-90.29312134 156.81585693]
[-104.33308411 166.31932068]
[-117.35179901 155.45887756]
[-110.51972198 139.94245911]
[-93.71839142 142.21217346]
[-79.11470795 138.78691101]
[-64.51101685 135.36164856]
[-49.90733719 131.93638611]
[-35.30365372 128.51112366]
[-24.67947006 118.07196808]
[-9.47709370 122.45355225]
[5.05165386 118.72320557]
[19.49909210 114.68940735]
[33.94652939 110.65560913]
[44.12424850 99.78071594]
[59.49677277 103.52185822]
[73.94421387 99.48806000]
[79.23155212 84.25713348]
[92.46759796 75.05146790]
[108.58650970 75.39434814]
[121.41911316 85.15454102]
[135.68496704 80.51928711]
[149.95080566 75.88403320]
[157.40388489 70.09414673]
[164.91206360 71.36696625]
[179.35949707 67.33316803]
[193.80694580 63.29936981]
[208.25437927 59.26557159]
[213.85458374 42.28462601]
[228.27053833 31.96801758]
[245.84341431 32.14285660]
[259.80532837 42.56079102]
[273.86456299 37.33221054]
[287.92379761 32.10363007]
[301.98303223 26.87504768]
[307.05789185 12.08383846]
[320.47964478 4.05949354]
[335.91098022 6.59086418]
[346.06567383 18.48271370]
[346.14901733 34.12007523]
[336.12161255 46.11946487]
[320.71813965 48.81513596]
[307.21160889 40.93427658]
[293.15237427 46.16285706]
[279.09313965 51.39143753]
[265.03390503 56.62001801]
[263.45388794 68.98815918]
[256.62561035 79.50840759]
[245.84733582 86.06382751]
[233.21936035 87.30254364]
[221.23498535 82.91610718]
[212.28817749 73.71301270]
[197.84074402 77.74680328]
[183.39329529 81.78060150]
[168.94586182 85.81439972]
[154.58607483 90.14987946]
[140.32022095 94.78513336]
[126.05437469 99.42038727]
[122.89936066 112.44128418]
[113.69223785 122.17405701]
[100.86637878 126.04640961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[4 27]
[5 26]
[6 25]
[8 24]
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[34 71]
[35 70]
[36 69]
[38 68]
[39 67]
[40 66]
[41 65]
[45 59]
[46 58]
[47 57]
[48 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
