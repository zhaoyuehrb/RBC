%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGCGAAAAAUGAUUUGGCUCGGACUGUCCCGUGACAGGCGGUGCGAGGAGGCCAGGCCCGCGCCCGCCGAGCCCUAGGGCCGCUGCUGCCGACAGCC\
) } def
/len { sequence length } bind def

/coor [
[160.61373901 361.39547729]
[160.06265259 357.12716675]
[161.10926819 352.47811890]
[156.02819824 338.36492920]
[150.94712830 324.25170898]
[145.86605835 310.13848877]
[133.20906067 311.13360596]
[120.68386078 308.99008179]
[109.05753326 303.83355713]
[99.04345703 295.97448730]
[91.25758362 285.88916016]
[86.18051910 274.19116211]
[84.12788391 261.59384155]
[85.23065948 248.86680603]
[89.42689514 236.78904724]
[96.46512604 226.10113525]
[105.91945648 217.45986938]
[117.21529388 211.39787292]
[113.94314575 196.75912476]
[110.67099762 182.12037659]
[107.39884949 167.48162842]
[104.12670135 152.84286499]
[100.85455322 138.20411682]
[97.58240509 123.56536865]
[81.28197479 114.51918793]
[76.57374573 96.48117828]
[63.20865250 89.67131805]
[49.84355164 82.86145782]
[36.47845459 76.05160522]
[23.11335754 69.24174500]
[6.77391911 70.63988495]
[-2.38340807 57.03564453]
[5.06164932 42.42389679]
[21.45025444 41.83595657]
[29.92321396 55.87664795]
[43.28831100 62.68650436]
[56.65341187 69.49636078]
[70.01850891 76.30622101]
[83.38360596 83.11608124]
[87.78240967 79.70463562]
[92.85585785 77.41388702]
[98.32379913 76.37032318]
[102.05415344 61.84157181]
[105.78450012 47.31282425]
[109.51484680 32.78407669]
[113.24519348 18.25533104]
[116.97554016 3.72658372]
[116.07962799 -5.55000830]
[121.05798340 -11.19629574]
[125.24284363 -25.60070038]
[115.62627411 -37.77859879]
[115.03793335 -53.28451538]
[123.70404816 -66.15611267]
[138.29232788 -71.44400024]
[153.19328308 -67.11486816]
[162.67718506 -54.83337021]
[163.09727478 -39.32198334]
[154.29203796 -26.54515457]
[139.64724731 -21.41583443]
[135.46238708 -7.01142931]
[131.50428772 7.45693207]
[127.77394104 21.98567963]
[124.04359436 36.51442719]
[120.31324768 51.04317474]
[116.58289337 65.57192230]
[112.85254669 80.10066986]
[122.47177124 92.50394440]
[122.22522736 108.19821167]
[112.22115326 120.29322052]
[115.49330139 134.93197632]
[118.76544952 149.57072449]
[122.03759766 164.20947266]
[125.30974579 178.84822083]
[128.58189392 193.48698425]
[131.85404968 208.12573242]
[149.32894897 209.86682129]
[165.19810486 217.33430481]
[177.64570618 229.65667725]
[185.25317383 245.40791321]
[187.16081238 262.77249146]
[183.16485596 279.75463867]
[173.73921204 294.40774536]
[159.97927856 305.05743408]
[165.06034851 319.17062378]
[170.14140320 333.28384399]
[175.22247314 347.39706421]
[181.17970276 361.16339111]
[187.98954773 374.52847290]
[194.79940796 387.89358521]
[201.60926819 401.25866699]
[215.64996338 409.73162842]
[215.06202698 426.12023926]
[200.45027161 433.56530762]
[186.84602356 424.40795898]
[188.24417114 408.06854248]
[181.43431091 394.70343018]
[174.62445068 381.33831787]
[167.81460571 367.97323608]
[164.99266052 367.02407837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 86]
[4 85]
[5 84]
[6 83]
[18 75]
[19 74]
[20 73]
[21 72]
[22 71]
[23 70]
[24 69]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[42 66]
[43 65]
[44 64]
[45 63]
[46 62]
[47 61]
[49 60]
[50 59]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
