%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGACGUCACGCUCGGCUAUAAAAGGCGCGGCUCGGGGCCCUUGCGGCGCUGGAGGAGCUCGAGGCUGAGGCUGCCGGGGGGCUGUGGGCUACCGGGCCGCCGGCGCCUCAGCG\
) } def
/len { sequence length } bind def

/coor [
[123.47677612 149.30541992]
[116.72294617 162.69891357]
[105.19939423 172.30140686]
[90.80735779 176.52862549]
[75.92132568 174.68310547]
[62.99727631 167.06936646]
[54.16751099 154.94355774]
[50.88881302 140.30627441]
[53.70212936 125.57246399]
[62.14329529 113.17300415]
[74.81964111 105.15362549]
[89.63655090 102.83727264]
[76.51174164 95.57508850]
[63.38692856 88.31289673]
[50.26211929 81.05071259]
[37.03934097 73.96847534]
[23.72106171 67.06749725]
[10.40278339 60.16651917]
[-0.63014507 69.11338806]
[-14.20598984 73.14263153]
[-28.24687958 71.67227936]
[-40.61702728 64.95946503]
[-49.44761658 54.05620956]
[-53.41909409 40.64468384]
[-51.95829773 26.77770424]
[-65.08310699 19.51551819]
[-78.20791626 12.25333118]
[-91.33273315 4.99114418]
[-104.45754242 -2.27104235]
[-120.27849579 -2.18229795]
[-127.66871643 -15.11419296]
[-140.79353333 -22.37637901]
[-155.80941772 -18.23383904]
[-169.01638794 -25.78569603]
[-172.87313843 -40.12658691]
[-185.99794006 -47.38877487]
[-202.78430176 -49.76675415]
[-205.14617920 -66.55537415]
[-189.66749573 -73.47250366]
[-178.73576355 -60.51358414]
[-165.61094666 -53.25139618]
[-151.41200256 -57.60176468]
[-137.99813843 -50.42383957]
[-133.53134155 -35.50119019]
[-120.40653229 -28.23900223]
[-105.52434540 -28.84718704]
[-97.19535065 -15.39585304]
[-84.07054138 -8.13366604]
[-70.94573212 -0.87147909]
[-57.82092285 6.39070749]
[-44.69611359 13.65289402]
[-31.89995384 4.18669128]
[-16.20563507 1.20581639]
[-0.71800494 5.35117197]
[11.47671223 15.84877014]
[17.92590714 30.65367889]
[17.30375862 46.84824371]
[30.62203789 53.74921799]
[43.94031525 60.65019226]
[51.42827606 60.93733978]
[57.52430344 67.92590332]
[70.64911652 75.18808746]
[83.77392578 82.45027924]
[96.89873505 89.71246338]
[111.09993744 94.54213715]
[125.93094635 96.78742218]
[140.76194763 99.03269958]
[155.59295654 101.27798462]
[170.42396545 103.52326202]
[185.25495911 105.76854706]
[200.08596802 108.01382446]
[214.91697693 110.25910950]
[224.00973511 108.43608093]
[230.12019348 112.77361298]
[244.88433838 115.42316437]
[259.64846802 118.07270813]
[274.41262817 120.72225952]
[289.17675781 123.37181091]
[304.12664795 118.19378662]
[315.28710938 128.05752563]
[330.05123901 130.70707703]
[345.00109863 125.52905273]
[356.16156006 135.39279175]
[370.92572021 138.04234314]
[385.68984985 140.69189453]
[394.82901001 139.11791992]
[400.81872559 143.62072754]
[414.96826172 136.05963135]
[429.64422607 142.53996277]
[433.58853149 158.09060669]
[423.77539062 170.78240967]
[407.73263550 170.87931824]
[397.76687622 158.30699158]
[383.04031372 155.45603943]
[368.27615356 152.80648804]
[353.51202393 150.15693665]
[339.61819458 155.52447510]
[327.40170288 145.47122192]
[312.63754272 142.82167053]
[298.74371338 148.18920898]
[286.52722168 138.13595581]
[271.76306152 135.48640442]
[256.99893188 132.83685303]
[242.23478699 130.18730164]
[227.47064209 127.53775787]
[212.67169189 125.09011078]
[197.84068298 122.84483337]
[183.00968933 120.59954834]
[168.17868042 118.35427094]
[153.34767151 116.10898590]
[138.51666260 113.86370850]
[123.68566132 111.61842346]
[108.85466003 109.37314606]
[119.18891144 120.24526978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 64]
[13 63]
[14 62]
[15 61]
[16 59]
[17 58]
[18 57]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[31 45]
[32 44]
[35 41]
[36 40]
[65 113]
[66 112]
[67 111]
[68 110]
[69 109]
[70 108]
[71 107]
[72 106]
[74 105]
[75 104]
[76 103]
[77 102]
[78 101]
[80 99]
[81 98]
[83 96]
[84 95]
[85 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
