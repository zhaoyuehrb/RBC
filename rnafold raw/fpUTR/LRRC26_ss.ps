%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCCGCAGGAACGGGCUCCGCGGACGACGGGCUCCAGGGACGCACAGGCAGCGGGCCUCCCACCGCGGGUGCCGGGGGCGGGGGGGCUGCCCCC\
) } def
/len { sequence length } bind def

/coor [
[195.81703186 228.82312012]
[186.38351440 217.16084290]
[176.94999695 205.49855042]
[167.51649475 193.83627319]
[158.08297729 182.17399597]
[148.64945984 170.51170349]
[139.02833557 159.00370789]
[129.22212219 147.65301514]
[122.33636475 144.59149170]
[119.28941345 135.77232361]
[109.85590363 124.11003876]
[93.72763824 125.28023529]
[80.01694489 116.70659637]
[74.00838470 101.69367981]
[78.01784515 86.02796936]
[68.21163177 74.67727661]
[58.40542221 63.32658768]
[48.59920883 51.97589493]
[40.45948410 47.41447830]
[38.66649628 40.09519577]
[29.23298454 28.43291473]
[19.79947090 16.77063179]
[10.36596012 5.10834789]
[-5.02435589 5.77495384]
[-17.70789146 -2.65008712]
[-22.93655968 -16.76125336]
[-18.90169144 -31.07411003]
[-31.40933228 -28.77005386]
[-43.61922836 -32.05926132]
[-53.16621017 -40.23954391]
[-58.22901917 -51.66765976]
[-57.87757492 -64.08913422]
[-52.24320984 -75.08293915]
[-60.90203857 -87.33139038]
[-69.75807190 -99.43802643]
[-78.80899048 -111.39967346]
[-94.11934662 -117.27547455]
[-96.41833496 -133.51268005]
[-83.34095001 -143.40783691]
[-68.34008789 -136.78166199]
[-66.84735107 -120.45059204]
[-57.79643250 -108.48894501]
[-51.12328339 -104.98812866]
[-48.65358353 -95.99022675]
[-39.99475479 -83.74176788]
[-22.50151634 -84.42118073]
[-7.89297342 -74.49607086]
[-1.97778022 -57.69077682]
[-7.23940897 -40.50762177]
[7.60061216 -41.46248627]
[20.30761909 -33.40047836]
[25.89620781 -19.23640251]
[22.02824211 -4.32516432]
[31.46175575 7.33711910]
[40.89526749 18.99940300]
[50.32877731 30.66168594]
[59.94990158 42.16968155]
[69.75611115 53.52037430]
[79.56232452 64.87106323]
[89.36853790 76.22175598]
[102.53598785 74.07701111]
[115.03813934 78.73295593]
[123.59514618 88.96814728]
[125.96215057 102.09746552]
[121.51818848 114.67652893]
[130.95169067 126.33880615]
[140.57281494 137.84680176]
[150.37902832 149.19749451]
[158.51875305 153.75891113]
[160.31175232 161.07820129]
[169.74525452 172.74047852]
[179.17877197 184.40275574]
[188.61228943 196.06504822]
[198.04579163 207.72732544]
[207.47930908 219.38961792]
[217.10043335 230.89761353]
[226.90664673 242.24830627]
[236.71286011 253.59899902]
[246.51905823 264.94967651]
[256.32528687 276.30038452]
[266.13150024 287.65106201]
[275.93771362 299.00177002]
[285.74392700 310.35244751]
[301.57531738 312.94985962]
[309.28924561 327.01666260]
[302.96829224 341.76199341]
[287.46130371 345.87451172]
[274.66390991 336.19943237]
[274.39321899 320.15866089]
[264.58700562 308.80798340]
[254.78079224 297.45727539]
[244.97457886 286.10659790]
[235.16838074 274.75588989]
[225.36216736 263.40521240]
[215.55595398 252.05450439]
[205.74974060 240.70381165]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[7 68]
[8 67]
[10 66]
[11 65]
[15 60]
[16 59]
[17 58]
[18 57]
[20 56]
[21 55]
[22 54]
[23 53]
[27 49]
[33 45]
[34 44]
[35 42]
[36 41]
[76 96]
[77 95]
[78 94]
[79 93]
[80 92]
[81 91]
[82 90]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
