%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUACAGACAUGAGCCACCUCGCCCAGCCUUUUCAUGGCUGAGUGAUAUUCCAUUGUGUGGAUGGAUCACACUAGCUACUCUGACCC\
) } def
/len { sequence length } bind def

/coor [
[77.47836304 322.08227539]
[64.46499634 313.92459106]
[57.28810883 300.34564209]
[57.87825775 284.99807739]
[66.07669067 272.01034546]
[79.67807007 264.87606812]
[80.20744324 249.88540649]
[80.73681641 234.89474487]
[81.26618958 219.90409851]
[71.67139435 213.26446533]
[66.51309967 202.66342163]
[67.22419739 190.77394104]
[73.74065399 180.65933228]
[84.48741150 174.98391724]
[86.07289124 160.06794739]
[87.65836334 145.15197754]
[71.25175476 136.93988037]
[59.26185989 123.05255890]
[53.53074265 105.62356567]
[54.93889999 87.33060455]
[63.26998901 70.98410034]
[53.14155579 59.91997147]
[43.01312637 48.85584641]
[32.88469696 37.79171753]
[17.85932732 32.83703995]
[14.97260666 18.22485161]
[4.84417677 7.16072416]
[-5.28425360 -3.90340304]
[-15.41268349 -14.96753025]
[-25.54111290 -26.03165627]
[-41.15529633 -25.17649651]
[-53.63505936 -34.59931564]
[-57.08783722 -49.85095215]
[-49.88333893 -63.73004150]
[-35.42330170 -69.68331146]
[-20.53531837 -64.89980316]
[-12.24903679 -51.63814545]
[-14.47698689 -36.16008759]
[-4.34855652 -25.09596062]
[5.77987337 -14.03183270]
[15.90830326 -2.96770620]
[26.03673363 8.09642124]
[40.33765030 12.25971699]
[43.94882584 27.66328812]
[54.07725525 38.72741699]
[64.20568085 49.79154205]
[74.33411407 60.85567093]
[89.80428314 54.31560898]
[106.58716583 53.65752029]
[122.52194214 58.96612930]
[135.55696106 69.55794525]
[148.36726379 61.75435638]
[161.17758179 53.95076370]
[173.98788452 46.14717102]
[186.79818726 38.34357834]
[199.60850525 30.53998756]
[204.77697754 15.35228157]
[219.92182922 10.05958176]
[233.42524719 18.72199631]
[234.92854309 34.69446182]
[223.27851868 45.72426987]
[207.41209412 43.35029602]
[194.60177612 51.15388489]
[181.79147339 58.95747757]
[168.98117065 66.76107025]
[156.17086792 74.56465912]
[143.36054993 82.36825562]
[146.09436035 91.85589600]
[146.77719116 101.70590973]
[145.37869263 111.48001862]
[141.96105957 120.74333191]
[136.67637634 129.08366394]
[129.75978088 136.12992859]
[121.51903534 141.56858826]
[112.32079315 145.15766907]
[102.57434082 146.73744202]
[100.98886108 161.65342712]
[99.40338135 176.56939697]
[111.85350800 190.61198425]
[110.34385681 209.00389099]
[96.25684357 220.43347168]
[95.72747040 235.42411804]
[95.19809723 250.41477966]
[94.66872406 265.40542603]
[107.73297882 273.48138428]
[114.99485016 287.01507568]
[114.50093079 302.36602783]
[106.38407898 315.40487671]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 84]
[7 83]
[8 82]
[9 81]
[14 78]
[15 77]
[16 76]
[21 47]
[22 46]
[23 45]
[24 44]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
