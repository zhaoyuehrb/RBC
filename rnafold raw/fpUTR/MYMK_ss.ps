%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUGCCCAAAGGGAGCUGGCCUUCCCACUUCGUGCUCCUGUGCUGGGGACCUGGGACACCAGCACCCUCCCCACCCCAGCCAGUGCUUUCCUCCUGGCCC\
) } def
/len { sequence length } bind def

/coor [
[-10.17760468 305.80966187]
[-26.46821785 307.04248047]
[-33.90208435 320.07080078]
[-41.33595276 333.09915161]
[-48.76981735 346.12747192]
[-44.36058044 361.30426025]
[-52.04748154 375.11318970]
[-67.27001190 379.36172485]
[-80.99692535 371.52926636]
[-85.08427429 356.26266479]
[-77.10711670 342.61932373]
[-61.79815674 338.69360352]
[-54.36429214 325.66528320]
[-46.93042374 312.63693237]
[-39.49655914 299.60861206]
[-46.12350845 287.91061401]
[-46.06096268 274.35726929]
[-39.21734238 262.53259277]
[-27.30852127 255.61717224]
[-13.42886829 255.53291321]
[-5.60114431 242.73733521]
[2.22657943 229.94175720]
[10.05430317 217.14619446]
[0.51483911 207.55450439]
[-6.60016870 196.03912354]
[-10.91531944 183.20040894]
[-12.20130157 169.70874023]
[-10.38707638 156.26950073]
[-5.56379175 143.58616638]
[2.01979280 132.32354736]
[11.97012901 123.07290649]
[23.76930237 116.32089233]
[36.80199432 112.42399597]
[50.38755798 111.58967590]
[63.81558609 113.86536407]
[76.38303375 119.13575745]
[85.34720612 107.10897064]
[84.37811279 95.39582825]
[91.54482269 86.08052826]
[103.11495209 84.01441956]
[112.44172668 72.26660156]
[121.76850128 60.51877975]
[124.72608948 51.69161224]
[131.56324768 48.56063080]
[141.24394226 37.10270691]
[150.92463684 25.64478111]
[160.60534668 14.18685722]
[170.28604126 2.72893214]
[179.96675110 -8.72899246]
[189.64744568 -20.18691826]
[190.61186218 -25.66998482]
[193.39271545 -29.73709297]
[197.09608459 -31.91977501]
[200.77455139 -32.19657135]
[211.46173096 -42.72198868]
[222.14889526 -53.24740601]
[232.83607483 -63.77281952]
[227.09376526 -77.84741974]
[227.17967224 -93.04811096]
[233.08071899 -107.05690002]
[243.89700317 -117.73755646]
[257.97915649 -123.46134186]
[273.17971802 -123.35543060]
[287.18072510 -117.43596649]
[297.84713745 -106.60563660]
[303.55239868 -92.51597595]
[303.42648315 -77.31556702]
[297.48861694 -63.32234573]
[286.64425659 -52.67019272]
[272.54711914 -46.98347473]
[257.34686279 -47.12937546]
[243.36148071 -53.08565140]
[232.67431641 -42.56023407]
[221.98713684 -32.03481674]
[211.29997253 -21.50940132]
[201.10537720 -10.50621700]
[191.42466736 0.95170778]
[181.74397278 12.40963268]
[172.06326294 23.86755753]
[162.38256836 35.32548141]
[152.70187378 46.78340530]
[143.02116394 58.24133301]
[133.51632690 69.84555054]
[124.18955231 81.59337616]
[114.86277771 93.34119415]
[112.90813446 109.93084717]
[97.37399292 116.07314301]
[88.40982056 128.09992981]
[98.61196899 141.20596313]
[104.79493713 156.60676575]
[106.48500824 173.10279846]
[103.55810547 189.41140747]
[96.24885559 204.26654053]
[85.13179779 216.51701355]
[71.07624054 225.21574402]
[55.17829895 229.69293213]
[38.67537308 229.60768127]
[22.84987831 224.97390747]
[15.02215481 237.76948547]
[7.19443083 250.56506348]
[-0.63329321 263.36062622]
[6.06290102 278.80389404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[20 101]
[21 100]
[22 99]
[23 98]
[36 88]
[37 87]
[40 85]
[41 84]
[42 83]
[44 82]
[45 81]
[46 80]
[47 79]
[48 78]
[49 77]
[50 76]
[54 75]
[55 74]
[56 73]
[57 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
