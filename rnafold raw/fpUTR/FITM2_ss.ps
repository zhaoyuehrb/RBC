%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGCAUGCGCUCGAAGGGAGGUGGAGGCGCAGGUCCGGGCGAAGGGCGAUACGGUGGCCGAGAGGGCACGGAGAGGAGGACGGUGGCUGACGAGAUCCGGC\
) } def
/len { sequence length } bind def

/coor [
[79.47262573 141.80735779]
[69.96488953 135.59663391]
[62.24287033 127.26953888]
[48.82720947 133.97923279]
[35.41154861 140.68893433]
[21.99588585 147.39863586]
[8.58022594 154.10832214]
[-0.30134055 167.20140076]
[-15.14532089 165.97441101]
[-24.02688789 179.06747437]
[-38.87086868 177.84048462]
[-52.28652954 184.55017090]
[-65.70218658 191.25987244]
[-79.01597595 198.16950989]
[-92.22490692 205.27754211]
[-98.19743347 220.16741943]
[-113.60343933 224.64341736]
[-126.62475586 215.27192688]
[-127.27254486 199.24195862]
[-115.04988098 188.85032654]
[-99.33293915 192.06860352]
[-86.12400818 184.96057129]
[-81.65233612 178.92060852]
[-72.41188812 177.84420776]
[-58.99622726 171.13452148]
[-45.58056641 164.42481995]
[-37.65857697 151.81167603]
[-21.85501862 152.55874634]
[-13.93303013 139.94560242]
[1.87052846 140.69267273]
[15.28618908 133.98297119]
[28.70185089 127.27327728]
[42.11751175 120.56357574]
[55.53317261 113.85388184]
[55.10345078 87.60933685]
[68.93315125 65.30014801]
[60.85789108 52.65933609]
[52.78263092 40.01852036]
[44.70737457 27.37770844]
[29.17868423 25.53547096]
[18.50490761 14.10723877]
[17.72587204 -1.51092768]
[27.20941734 -13.94460773]
[42.47770309 -17.32299805]
[56.32150650 -10.05092430]
[62.20421600 4.43796015]
[57.34818649 19.30244827]
[65.42344666 31.94326210]
[73.49870300 44.58407593]
[81.57396698 57.22489166]
[90.10310364 54.48868179]
[98.99829865 53.43579483]
[107.93054962 54.10517502]
[116.56946564 56.47206116]
[124.59552765 60.44891357]
[127.84845734 44.96572495]
[142.04896545 40.47185135]
[151.91804504 29.17577934]
[161.78712463 17.87970734]
[165.04005432 2.39652133]
[179.24055481 -2.09735441]
[189.10963440 -13.39342690]
[191.74626160 -29.57923126]
[207.17565918 -35.13492966]
[219.52539062 -24.34529495]
[216.09111023 -8.30977917]
[200.40571594 -3.52434564]
[190.53663635 7.77172661]
[187.98960876 22.44694138]
[173.08319092 27.74878693]
[163.21411133 39.04486084]
[153.34503174 50.34093094]
[150.79800415 65.01614380]
[135.89160156 70.31799316]
[142.93727112 81.95506287]
[146.31983948 95.13159180]
[145.75073242 108.72345734]
[141.27851868 121.57109833]
[153.28051758 130.56843567]
[165.28253174 139.56575012]
[180.04109192 135.15090942]
[194.40150452 140.21372986]
[202.92631531 152.61500549]
[202.51896667 167.48014832]
[214.52098083 176.47746277]
[229.30842590 171.77522278]
[244.02497864 176.69480896]
[253.01185608 189.34454346]
[252.81338501 204.86035156]
[243.50590515 217.27607727]
[228.66831970 221.81764221]
[214.00599670 216.73869324]
[205.15687561 203.99221802]
[205.52365112 188.47947693]
[193.52163696 179.48214722]
[179.36720276 184.04171753]
[165.07293701 179.33662415]
[156.18620300 166.97218323]
[156.28520203 151.56776428]
[144.28320312 142.57043457]
[132.28118896 133.57310486]
[123.19641113 140.38755798]
[112.73249817 144.80081177]
[101.51158905 146.55044556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[9 28]
[11 26]
[12 25]
[13 24]
[14 22]
[15 21]
[36 50]
[37 49]
[38 48]
[39 47]
[55 74]
[57 72]
[58 71]
[59 70]
[61 68]
[62 67]
[78 101]
[79 100]
[80 99]
[84 95]
[85 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
