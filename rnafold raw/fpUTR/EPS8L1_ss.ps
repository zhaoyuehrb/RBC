%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGGAGGGGCCGGCAGCCUGGAAGGGAAAGGACAGCGGAGAGCAGGGCAGAGCCUGAGCAGGCAGGGCACCUCCAGGUGGGCAGGAGCUACCACUCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[138.69215393 234.71455383]
[144.75399780 220.99398804]
[156.01222229 211.08174133]
[170.39001465 206.80635071]
[185.23225403 208.95539856]
[175.36317444 197.65933228]
[165.49409485 186.36325073]
[155.62501526 175.06718445]
[145.75593567 163.77111816]
[131.55541992 159.27723694]
[128.30249023 143.79405212]
[118.43341827 132.49798584]
[108.56433105 121.20190430]
[97.20098877 122.69436646]
[86.54080200 118.48563385]
[79.26177979 109.63301086]
[77.19253540 98.36042786]
[80.85289001 87.49972534]
[71.67702484 75.63365936]
[62.50116348 63.76759338]
[53.32529831 51.90152740]
[44.14943314 40.03546143]
[28.74821091 40.36488342]
[16.25221252 31.66411400]
[11.33380985 17.44183159]
[15.68113804 3.22076607]
[6.50527382 -8.64529991]
[-2.67059064 -20.51136589]
[-19.48873329 -19.74537849]
[-33.34622574 -29.01215363]
[-38.95054245 -44.53684616]
[-34.30142212 -60.20164490]
[-49.78738022 -61.88175583]
[-59.28379822 -73.76757812]
[-57.58663177 -88.52072144]
[-72.32775879 -94.26612854]
[-74.43463135 -109.01097107]
[-83.96136475 -120.59722137]
[-99.72476959 -123.57959747]
[-107.09368896 -137.83016968]
[-100.41531372 -152.41709900]
[-84.81272888 -156.15057373]
[-72.25489044 -146.16656494]
[-72.37511444 -130.12396240]
[-62.84837723 -118.53770447]
[-48.78866196 -113.62102509]
[-46.00037766 -98.04745483]
[-31.19736862 -96.86149597]
[-21.37085152 -85.24709320]
[-22.71516609 -69.72837830]
[-9.42764759 -71.75505066]
[3.21239448 -66.87332916]
[11.82549000 -56.27255249]
[14.05149460 -42.68614960]
[9.19547462 -29.68722916]
[18.37133980 -17.82116318]
[27.54720306 -5.95509863]
[42.40457535 -6.58476210]
[54.93199158 1.75357628]
[60.20906830 16.03663635]
[56.01549911 30.85959816]
[65.19136047 42.72566223]
[74.36722565 54.59172821]
[83.54309082 66.45779419]
[92.71895599 78.32386017]
[110.56741333 79.72196960]
[121.93797302 93.55065155]
[119.86040497 111.33282471]
[129.72949219 122.62889862]
[139.59857178 133.92497253]
[154.50497437 139.22682190]
[157.05200195 153.90202332]
[166.92108154 165.19810486]
[176.79016113 176.49417114]
[186.65924072 187.79025269]
[196.52832031 199.08631897]
[205.97738647 202.38102722]
[210.11163330 210.25512695]
[223.10202026 217.75512695]
[236.09239197 225.25512695]
[249.08277893 232.75512695]
[262.07315063 240.25512695]
[275.28210449 247.36315918]
[288.69775391 254.07284546]
[305.02627563 252.55253601]
[314.28509521 266.08789062]
[306.94955444 280.75491333]
[290.56579590 281.46542358]
[281.98806763 267.48852539]
[268.57238770 260.77880859]
[263.69506836 261.47430420]
[258.35025024 258.99514771]
[254.57315063 253.24549866]
[241.58277893 245.74549866]
[228.59239197 238.24549866]
[215.60202026 230.74549866]
[202.61163330 223.24549866]
[207.58889771 237.39566040]
[206.17138672 252.32853699]
[198.62059021 265.28945923]
[186.32940674 273.88754272]
[171.56518555 276.53665161]
[157.05149841 272.74816895]
[145.46565247 263.22094727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 76]
[6 75]
[7 74]
[8 73]
[9 72]
[11 70]
[12 69]
[13 68]
[18 65]
[19 64]
[20 63]
[21 62]
[22 61]
[26 57]
[27 56]
[28 55]
[32 50]
[35 47]
[37 45]
[38 44]
[78 97]
[79 96]
[80 95]
[81 94]
[82 93]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
