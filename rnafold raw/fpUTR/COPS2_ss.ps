%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGAGAGUGACGCCUCUGAGCCGCGGAGGAUUGUGGGAGGAGGUUGUCUCCAAUUUCUCCUCCCCCUCCCGGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[77.99375153 193.75550842]
[64.62364197 186.95549011]
[57.53821945 173.73442078]
[59.28007126 158.83489990]
[52.10425949 172.93519592]
[37.22330475 173.57275391]
[24.75126076 181.90631104]
[12.27921677 190.23985291]
[-0.19282696 198.57341003]
[-3.02988601 214.12097168]
[-16.07710648 223.03981018]
[-31.59380341 220.03852844]
[-40.37419510 206.89775085]
[-37.20903397 191.41365051]
[-23.97614861 182.77267456]
[-8.52638054 186.10136414]
[3.94566369 177.76782227]
[16.41770744 169.43426514]
[28.88975143 161.10070801]
[35.17347717 147.59648132]
[50.94651413 146.36285400]
[61.96135330 136.18083191]
[71.24776459 124.40108490]
[80.53417206 112.62133026]
[89.82057953 100.84157562]
[92.02543640 92.84576416]
[99.71014404 88.79110718]
[109.45186615 77.38501740]
[119.19358826 65.97892761]
[128.93530273 54.57284164]
[138.67703247 43.16675186]
[139.14321899 38.74291229]
[140.79089355 35.03039169]
[143.26554871 32.30587387]
[146.16038513 30.70737267]
[149.06459045 30.22918892]
[151.60951233 30.73240662]
[163.38926697 21.44599724]
[175.16902161 12.15958881]
[186.94877625 2.87317944]
[198.72853088 -6.41322994]
[210.50828552 -15.69963932]
[222.28804016 -24.98604774]
[234.06779480 -34.27245712]
[245.47387695 -44.01417923]
[256.48870850 -54.19618988]
[267.50354004 -64.37820435]
[278.51840210 -74.56021118]
[282.86203003 -90.37364960]
[298.79492188 -94.25631714]
[309.92666626 -82.21405029]
[304.80590820 -66.63491058]
[288.70040894 -63.54537582]
[277.68557739 -53.36336136]
[266.67071533 -43.18135071]
[255.65588379 -32.99934006]
[254.59039307 -28.09139824]
[250.26034546 -23.90339851]
[243.35420227 -22.49270439]
[231.57444763 -13.20629406]
[219.79469299 -3.91988516]
[208.01493835 5.36652422]
[196.23518372 14.65293312]
[184.45542908 23.93934250]
[172.67567444 33.22575378]
[160.89591980 42.51216125]
[150.08311462 52.90847015]
[140.34140015 64.31455994]
[130.59967041 75.72064972]
[120.85795593 87.12673950]
[111.11623383 98.53282928]
[101.60033417 110.12798309]
[92.31392670 121.90773773]
[83.02751923 133.68750000]
[73.74110413 145.46725464]
[88.73036194 144.89949036]
[101.35509491 152.99986267]
[107.08571625 166.86204529]
[103.86614227 181.51245117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 21]
[6 19]
[7 18]
[8 17]
[9 16]
[22 75]
[23 74]
[24 73]
[25 72]
[27 71]
[28 70]
[29 69]
[30 68]
[31 67]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
