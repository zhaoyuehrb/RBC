%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGCUCCCGCCUCAGUGCGCAUGUUCACUGGGCGUCUUCUGCCCGGCCCCUUCGCCCACGUGAAGAACGCCAGGGAGCUGUGAGGCAGUGCUGUGUGGUUCCUGCCGUCCGGACUCUUUUUCCUCUACUGAGAUUCAUCUGUGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[65.25777435 101.84220123]
[67.94064331 90.51906586]
[55.50120163 98.90121460]
[43.06175995 107.28335571]
[30.62232018 115.66549683]
[30.80908775 134.73530579]
[19.61554146 149.99116516]
[1.65350008 155.44920349]
[-15.85550976 149.10157776]
[-27.74789047 158.24330139]
[-39.64027023 167.38504028]
[-51.53264999 176.52677917]
[-56.47044373 184.29014587]
[-63.76886749 185.73191833]
[-75.84885406 194.62426758]
[-87.92884064 203.51661682]
[-100.00883484 212.40896606]
[-112.08882141 221.30131531]
[-111.85730743 236.81666565]
[-120.81721497 249.48550415]
[-135.52326965 254.43643188]
[-150.32069397 249.76568604]
[-159.51957703 237.26927185]
[-159.58276367 221.75233459]
[-150.48594666 209.18142700]
[-135.72705078 204.39033508]
[-120.98117065 209.22132874]
[-108.90118408 200.32897949]
[-96.82118988 191.43663025]
[-84.74120331 182.54428101]
[-72.66121674 173.65193176]
[-60.67438507 164.63439941]
[-48.78200531 155.49266052]
[-36.88962555 146.35092163]
[-24.99724388 137.20919800]
[-27.41435242 126.20745850]
[-25.51244736 115.05276489]
[-19.53201485 105.38592529]
[-10.31632710 98.64360809]
[0.80727786 95.84488678]
[12.21851826 97.43736267]
[22.24017715 103.22605896]
[34.67961884 94.84391785]
[47.11905670 86.46176910]
[59.55849838 78.07962799]
[61.73533630 63.23842239]
[52.22697830 51.63708115]
[42.71861649 40.03573990]
[25.31128120 38.64938354]
[14.48018169 25.38396454]
[16.52177811 8.71993732]
[6.77412653 -2.68108392]
[-2.97352552 -14.08210468]
[-12.72117805 -25.48312569]
[-22.46883011 -36.88414764]
[-32.21648026 -48.28516769]
[-47.84977722 -53.23815536]
[-51.11228561 -69.30950165]
[-38.64781952 -79.96637726]
[-23.27874947 -74.24591064]
[-20.81546021 -58.03282166]
[-11.06780910 -46.63179779]
[-1.32015657 -35.23077774]
[8.42749500 -23.82975769]
[18.17514801 -12.42873573]
[27.92280006 -1.02771509]
[40.82096481 -1.82405615]
[51.97859192 5.07389021]
[57.18383789 17.32678223]
[54.31995773 30.52738190]
[63.82831955 42.12872314]
[73.33667755 53.73006439]
[88.27098083 55.13237000]
[99.77278900 45.50384140]
[111.27458954 35.87531662]
[122.77639771 26.24678993]
[134.27819824 16.61826324]
[145.77999878 6.98973751]
[157.18101501 -2.75791454]
[168.48002625 -12.62363720]
[179.77903748 -22.48936081]
[184.22296143 -30.54561806]
[191.41725159 -32.43981171]
[202.91905212 -42.06833649]
[214.32006836 -51.81599045]
[225.61907959 -61.68171310]
[236.91809082 -71.54743958]
[248.21708679 -81.41316223]
[259.51608276 -91.27888489]
[265.03155518 -108.81626129]
[282.33102417 -111.59632111]
[293.42233276 -121.69496918]
[304.51364136 -131.79362488]
[308.97640991 -147.57385254]
[324.93814087 -151.33624268]
[335.97875977 -139.21037292]
[330.74063110 -123.67028809]
[314.61230469 -120.70230103]
[303.52096558 -110.60365295]
[292.42965698 -100.50500488]
[291.53628540 -88.40090942]
[282.32196045 -79.89707947]
[269.38180542 -79.97987366]
[258.08282471 -70.11415100]
[246.78381348 -60.24843216]
[235.48480225 -50.38270950]
[224.18579102 -40.51698685]
[221.19657898 -33.70448303]
[212.54757690 -30.56653404]
[201.04577637 -20.93800735]
[189.64476013 -11.19035625]
[178.34574890 -1.32463276]
[167.04673767 8.54109001]
[164.05752563 15.35359383]
[155.40852356 18.49154091]
[143.90672302 28.12006760]
[132.40492249 37.74859238]
[120.90311432 47.37712097]
[109.40131378 57.00564575]
[97.89951324 66.63417053]
[112.58640289 67.20126343]
[126.30957031 74.22718811]
[136.24790955 86.94052124]
[140.08755493 103.35437012]
[152.16754150 112.24671936]
[164.24752808 121.13906860]
[180.59686279 122.41626740]
[187.42033386 137.32841492]
[177.69853210 150.53518677]
[161.43241882 148.45057678]
[155.35517883 133.21905518]
[143.27519226 124.32671356]
[131.19520569 115.43436432]
[119.39804077 124.69972992]
[107.60192108 133.96426392]
[113.37819672 147.80747986]
[119.15446472 161.65069580]
[124.93074036 175.49391174]
[130.70701599 189.33712769]
[144.06442261 198.85089111]
[142.23483276 215.14765930]
[127.10037231 221.46272278]
[114.23007202 211.29968262]
[116.86379242 195.11340332]
[111.08752441 181.27018738]
[105.31124878 167.42697144]
[99.53498077 153.58375549]
[93.75870514 139.74053955]
[81.49215698 134.17922974]
[72.14919281 125.12534332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 45]
[3 44]
[4 43]
[5 42]
[9 35]
[10 34]
[11 33]
[12 32]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[46 72]
[47 71]
[48 70]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[73 120]
[74 119]
[75 118]
[76 117]
[77 116]
[78 115]
[79 113]
[80 112]
[81 111]
[83 110]
[84 109]
[85 107]
[86 106]
[87 105]
[88 104]
[89 103]
[91 100]
[92 99]
[93 98]
[124 133]
[125 132]
[126 131]
[135 148]
[136 147]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
