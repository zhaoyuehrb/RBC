%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCGCGCAAACUUCCCGGGCCGGCGGGCAGGGGCGGCGGCGGCGGGGCCCGGAUGGGAGCCCGGGCCGGCGGCGGCGGCGCCC\
) } def
/len { sequence length } bind def

/coor [
[2.46267176 153.27963257]
[-10.04729557 161.55615234]
[-22.55726242 169.83267212]
[-35.06723022 178.10919189]
[-40.66239548 185.63436890]
[-48.18868637 186.44976807]
[-60.99258041 194.26387024]
[-68.74163818 208.05744934]
[-83.63622284 208.08308411]
[-83.89201355 223.50833130]
[-92.46572113 236.33389282]
[-106.62150574 242.46719360]
[-121.84230804 239.95109558]
[-133.27122498 229.58850098]
[-137.26133728 214.68606567]
[-132.53939819 199.99909973]
[-120.61218262 190.21417236]
[-105.28560638 188.45359802]
[-91.45033264 195.27919006]
[-84.61708832 182.04454041]
[-68.80668640 181.45997620]
[-56.00278854 173.64587402]
[-43.34374619 165.59921265]
[-30.83377838 157.32270813]
[-18.32381248 149.04618835]
[-5.81384420 140.76966858]
[-6.21681976 133.06060791]
[-3.76311255 125.66809082]
[1.25838685 119.62307739]
[8.19713497 115.78789520]
[16.12491989 114.73338318]
[23.95995903 116.65446472]
[30.61450005 121.33653259]
[44.41969299 115.46996307]
[58.22488403 109.60339355]
[72.03007507 103.73682404]
[85.83527374 97.87024689]
[94.39783478 86.81700897]
[108.29815674 88.32455444]
[122.10334778 82.45798492]
[131.77819824 69.93968201]
[146.51777649 72.08297729]
[160.32298279 66.21640778]
[169.99781799 53.69810104]
[184.73741150 55.84140015]
[198.54260254 49.97482681]
[209.12789917 35.04254913]
[226.39059448 37.57202148]
[239.97232056 31.20517159]
[253.55404663 24.83831978]
[267.13577271 18.47146988]
[280.71749878 12.10461998]
[294.29922485 5.73776913]
[307.88095093 -0.62908131]
[310.67846680 -15.89189434]
[321.93615723 -26.57102585]
[337.32522583 -28.56013107]
[350.92822266 -21.09435844]
[357.51455688 -7.04444933]
[354.55163574 8.18711853]
[343.17874146 18.74349594]
[327.76901245 20.56554222]
[314.24780273 12.95264244]
[300.66607666 19.31949234]
[287.08435059 25.68634415]
[273.50262451 32.05319214]
[259.92089844 38.42004395]
[246.33917236 44.78689575]
[232.75744629 51.15374374]
[228.25680542 62.54079056]
[216.79660034 67.89252472]
[204.40916443 63.78002167]
[190.60397339 69.64659119]
[181.91658020 81.74528503]
[166.18954468 80.02159882]
[152.38435364 85.88816833]
[143.69696045 97.98686218]
[127.96992493 96.26317596]
[114.16472626 102.12975311]
[105.60216522 113.18299103]
[91.70184326 111.67544556]
[77.89665222 117.54201508]
[64.09145355 123.40858459]
[50.28626251 129.27516174]
[36.48107147 135.14172363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 23]
[6 22]
[7 21]
[9 19]
[33 85]
[34 84]
[35 83]
[36 82]
[37 81]
[39 79]
[40 78]
[42 76]
[43 75]
[45 73]
[46 72]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
