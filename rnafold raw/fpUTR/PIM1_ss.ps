%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUUACUCCUGGCUGCGGGGCGAGCCGGGCGUCUGCUGCAGCGGCCGCGGUGGCUGAGGAGGCCCGAGAGGAGUCGGUGGCAGCGGCGGCGGCGGGACCGGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAACCACUAGCCUCCUGCCCCGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[67.88478088 384.20382690]
[65.69107056 399.22222900]
[58.21681976 412.43206787]
[46.47286606 422.04684448]
[32.04748154 426.76623535]
[16.89157677 425.95199585]
[3.05486584 419.71420288]
[-7.59134960 408.89651489]
[-13.60725689 394.96191406]
[-14.17925262 379.79492188]
[-9.22998142 365.44677734]
[0.57120973 353.85797119]
[13.89879036 346.59573364]
[28.95031357 344.64224243]
[32.49547958 330.06719971]
[36.04064560 315.49215698]
[39.58581543 300.91711426]
[43.13098145 286.34210205]
[46.67614746 271.76705933]
[50.22131348 257.19201660]
[53.76647949 242.61697388]
[57.31164551 228.04193115]
[60.85681152 213.46688843]
[59.37381744 206.18450928]
[64.62007141 198.63873291]
[68.45432281 184.13705444]
[62.63645554 173.49249268]
[65.75241852 161.35377502]
[76.65436554 154.39450073]
[80.77617645 139.97193909]
[84.89799500 125.54936218]
[89.01981354 111.12678528]
[88.87068939 96.12752533]
[83.32859039 88.79628754]
[84.52088928 81.46070862]
[80.39907074 67.03813171]
[76.27725983 52.61555862]
[72.15544128 38.19298553]
[68.03362274 23.77041245]
[63.91180801 9.34783840]
[59.78998947 -5.07473516]
[41.75330353 -13.81018639]
[35.95980072 -32.67849731]
[45.68324661 -49.50596619]
[33.80737305 -59.95939636]
[36.88623428 -74.53231049]
[31.91194534 -88.68350983]
[26.93765640 -102.83470917]
[21.96336746 -116.98590851]
[16.98907852 -131.13711548]
[5.11320353 -141.59053040]
[8.19206715 -156.16345215]
[3.21777749 -170.31465149]
[-8.65809727 -180.76808167]
[-5.57923412 -195.34098816]
[-10.55352306 -209.49218750]
[-15.52781296 -223.64338684]
[-20.50210190 -237.79458618]
[-36.75938416 -240.66470337]
[-49.28955841 -251.26876831]
[-54.74594498 -266.65097046]
[-51.73356628 -282.59649658]
[-41.16436005 -294.78637695]
[-46.41902161 -308.83587646]
[-51.67368698 -322.88537598]
[-57.06776428 -336.88195801]
[-62.60071945 -350.82418823]
[-75.78947449 -360.57040405]
[-73.67477417 -376.83264160]
[-58.43204117 -382.88171387]
[-45.74169159 -372.49484253]
[-48.65847015 -356.35714722]
[-43.12551117 -342.41491699]
[-37.70554352 -337.33001709]
[-37.62418365 -328.14004517]
[-32.36951828 -314.09054565]
[-27.11485672 -300.04104614]
[-13.49717331 -298.67309570]
[-1.74707067 -291.52703857]
[5.80402184 -279.95382690]
[7.62903166 -266.18923950]
[3.31375456 -252.92207336]
[-6.35090256 -242.76887512]
[-1.37661314 -228.61767578]
[3.59767604 -214.46647644]
[8.57196522 -200.31527710]
[20.09204674 -190.87403870]
[17.36897659 -175.28894043]
[22.34326553 -161.13774109]
[33.86334610 -151.69650269]
[31.14027786 -136.11140442]
[36.11456680 -121.96019745]
[41.08885574 -107.80899811]
[46.06314468 -93.65779877]
[51.03743362 -79.50659943]
[62.55751419 -70.06536102]
[59.83444595 -54.48025513]
[70.03424835 -52.67318726]
[78.61398315 -46.72545624]
[83.96711731 -37.66839218]
[85.05710602 -27.12274933]
[81.61741638 -17.00876999]
[74.21256256 -9.19655228]
[78.33438110 5.22602177]
[82.45619965 19.64859581]
[86.57801056 34.07116699]
[90.69982910 48.49374390]
[94.82164764 62.91631699]
[98.94346619 77.33889008]
[103.20845795 91.71977234]
[111.99893188 86.76600647]
[123.96673584 87.90142822]
[138.86012268 89.68669891]
[153.48307800 83.64686584]
[165.19900513 92.84394836]
[180.09239197 94.62921906]
[194.71534729 88.58938599]
[206.43127441 97.78646851]
[221.32466125 99.57173920]
[236.18063354 92.62680817]
[249.46629333 102.24050140]
[247.51449585 118.52308655]
[232.33308411 124.72443390]
[219.53938293 114.46512604]
[204.64599609 112.67984772]
[191.08831787 118.84738159]
[178.30711365 109.52260590]
[163.41372681 107.73732758]
[149.85604858 113.90485382]
[137.07484436 104.58007812]
[122.18146515 102.79480743]
[136.96937561 105.30829620]
[147.78984070 115.69663239]
[150.90361023 130.36988831]
[145.23463440 144.25740051]
[132.74197388 152.56001282]
[117.74274445 152.40858459]
[105.42025757 143.85543823]
[100.03282928 129.85630798]
[103.44238281 115.24860382]
[99.32057190 129.67117310]
[95.19875336 144.09375000]
[91.07693481 158.51632690]
[95.97666931 176.24044800]
[82.95599365 187.97131348]
[79.12174225 202.47297668]
[75.43185425 217.01205444]
[71.88668823 231.58709717]
[68.34152222 246.16213989]
[64.79635620 260.73718262]
[61.25118637 275.31222534]
[57.70602036 289.88726807]
[54.16085434 304.46228027]
[50.61568832 319.03732300]
[47.07052231 333.61236572]
[43.52535248 348.18740845]
[55.99813461 356.83578491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 156]
[15 155]
[16 154]
[17 153]
[18 152]
[19 151]
[20 150]
[21 149]
[22 148]
[23 147]
[25 146]
[26 145]
[29 143]
[30 142]
[31 141]
[32 140]
[33 110]
[35 109]
[36 108]
[37 107]
[38 106]
[39 105]
[40 104]
[41 103]
[44 97]
[46 95]
[47 94]
[48 93]
[49 92]
[50 91]
[52 89]
[53 88]
[55 86]
[56 85]
[57 84]
[58 83]
[63 77]
[64 76]
[65 75]
[66 73]
[67 72]
[112 131]
[113 130]
[115 128]
[116 127]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
