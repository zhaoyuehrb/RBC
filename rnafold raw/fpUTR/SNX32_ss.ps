%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGGCGGGGGAGAGCGUCCCCGUCAGCUGAGAGCAUCCUCACUCGGUCAGUUCCUCGGGCGAGUUACGGGGACGACCUGCGGGAGCACGCGGGCAGUGGCCGGACGCUGAAGCCCAGGAGAGCG\
) } def
/len { sequence length } bind def

/coor [
[168.74501038 86.82800293]
[154.39089966 91.18226624]
[140.03680420 95.53653717]
[125.68269348 99.89080811]
[111.32859039 104.24507904]
[102.50022888 130.17791748]
[91.63652039 140.52102661]
[80.77281952 150.86413574]
[69.90911102 161.20724487]
[59.04540253 171.55035400]
[48.18169785 181.89346313]
[37.31798935 192.23657227]
[26.45428467 202.57966614]
[26.31703377 218.38336182]
[14.98668098 229.40147400]
[-0.81467760 229.09713745]
[-11.71237564 217.65092468]
[-11.24100208 201.85366821]
[0.31978533 191.07760620]
[16.11117744 191.71597290]
[26.97488213 181.37286377]
[37.83858871 171.02975464]
[48.70229340 160.68664551]
[59.56600189 150.34353638]
[70.42971039 140.00042725]
[81.29341125 129.65731812]
[92.15711975 119.31420898]
[88.33413696 104.80956268]
[73.78366852 101.16486359]
[64.59011841 102.11542511]
[58.92303085 97.24804688]
[44.46638870 93.24735260]
[30.00974846 89.24666595]
[15.55310822 85.24597168]
[1.92726743 93.25296783]
[-13.34824181 89.19904327]
[-21.21073151 75.48931122]
[-16.99552727 60.25751114]
[-3.20343256 52.54040909]
[11.98294544 56.91641998]
[19.55379868 70.78932953]
[34.01044083 74.79002380]
[48.46708298 78.79071808]
[62.92372131 82.79140472]
[77.42836761 86.61438751]
[91.97883606 90.25909424]
[106.97431946 89.89097595]
[121.32842255 85.53670502]
[135.68252563 81.18243408]
[150.03663635 76.82816315]
[164.39074707 72.47389221]
[176.59696960 58.75207520]
[193.50679016 63.27354050]
[207.74972534 58.56831360]
[221.99264526 53.86308670]
[236.23556519 49.15786362]
[250.41967773 44.27820969]
[264.54284668 39.22486115]
[274.92968750 27.29071236]
[289.51959229 30.28803253]
[303.64276123 25.23468590]
[317.76589966 20.18133736]
[331.88906860 15.12798977]
[344.09719849 -0.82537168]
[362.94815063 3.19114470]
[376.80636597 -2.54910684]
[390.66455078 -8.28935814]
[397.01593018 -24.53470993]
[412.82037354 -31.08070755]
[428.18200684 -24.35346031]
[441.89514160 -30.43208122]
[455.60827637 -36.51070023]
[461.37136841 -50.98220825]
[475.36505127 -56.95144653]
[489.12591553 -51.36803818]
[502.83905029 -57.44665909]
[508.60214233 -71.91816711]
[522.59582520 -77.88740540]
[536.35668945 -72.30399323]
[550.06982422 -78.38261414]
[563.78295898 -84.46123505]
[577.49609375 -90.53985596]
[591.20922852 -96.61847687]
[604.92242432 -102.69709778]
[610.37573242 -117.53073120]
[624.75567627 -124.08767700]
[639.53082275 -118.47782135]
[645.93536377 -104.02938843]
[640.16961670 -89.31437683]
[625.65423584 -83.06294250]
[611.00103760 -88.98394775]
[597.28790283 -82.90532684]
[583.57470703 -76.82670593]
[569.86157227 -70.74809265]
[556.14843750 -64.66947174]
[542.43530273 -58.59085083]
[537.33111572 -44.64514160]
[523.51062012 -38.28520584]
[508.91766357 -43.73351288]
[495.20452881 -37.65489197]
[490.10034180 -23.70918274]
[476.27984619 -17.34924889]
[461.68692017 -22.79755402]
[447.97375488 -16.71893501]
[434.26062012 -10.64031506]
[431.32287598 1.96832955]
[421.49096680 10.68816185]
[408.23355103 12.14134598]
[396.40481567 5.56883478]
[382.54660034 11.30908585]
[368.68841553 17.04933739]
[365.58740234 26.92072296]
[357.35711670 33.54965591]
[346.61166382 34.51611328]
[336.94241333 29.25115013]
[322.81927490 34.30450058]
[308.69610596 39.35784531]
[294.57293701 44.41119385]
[285.19625854 55.98389053]
[269.59619141 53.34802246]
[255.47302246 58.40136719]
[250.17935181 63.67245865]
[240.94079590 63.40078354]
[226.69786072 68.10601044]
[212.45494080 72.81123352]
[198.21202087 77.51646423]
[192.44741821 88.22613525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 47]
[6 27]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[28 46]
[29 45]
[31 44]
[32 43]
[33 42]
[34 41]
[53 126]
[54 125]
[55 124]
[56 123]
[57 121]
[58 120]
[60 118]
[61 117]
[62 116]
[63 115]
[65 111]
[66 110]
[67 109]
[70 105]
[71 104]
[72 103]
[75 100]
[76 99]
[79 96]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
