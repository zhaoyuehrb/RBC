%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGACUGCGUGGGUGAGUCGUCUAUAAAAACUCAUCUCUGCGCGUCUCUUCGCCACAUUCGCUUCCUGCUUUCGGUGUGUCUGUUGUGUCUUGUUGCGGGCACCGCAGUCGCCGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[2.00356197 157.49087524]
[-8.58628941 157.53181458]
[-17.22835922 151.80235291]
[-31.61065483 156.06259155]
[-45.99295044 160.32281494]
[-53.44183731 165.82542419]
[-60.80772400 164.50102234]
[-75.29661560 168.38330078]
[-89.78549957 172.26559448]
[-104.27438354 176.14787292]
[-118.65668488 180.40809631]
[-132.92253113 185.04336548]
[-147.18838501 189.67861938]
[-161.45422363 194.31387329]
[-175.72007751 198.94912720]
[-189.98591614 203.58438110]
[-204.25177002 208.21963501]
[-218.51762390 212.85488892]
[-221.03150940 227.95252991]
[-230.28292847 240.14556885]
[-244.14595032 246.63211060]
[-259.43496704 245.92160034]
[-272.63665771 238.17732239]
[-280.71737671 225.17884827]
[-281.82025146 209.91313171]
[-275.69183350 195.88810730]
[-263.74038696 186.32664490]
[-248.71226501 183.42588806]
[-234.06083679 187.85241699]
[-223.15287781 198.58903503]
[-208.88702393 193.95378113]
[-194.62117004 189.31852722]
[-180.35533142 184.68327332]
[-166.08947754 180.04801941]
[-151.82363892 175.41276550]
[-137.55778503 170.77751160]
[-123.29193878 166.14225769]
[-120.32000732 162.26048279]
[-114.82737732 160.27809143]
[-108.15666962 161.65898132]
[-93.66778564 157.77670288]
[-79.17889404 153.89440918]
[-64.69001007 150.01213074]
[-50.25318146 145.94052124]
[-35.87088394 141.68029785]
[-21.48859024 137.42005920]
[-9.38782120 122.43179321]
[10.13886356 127.09770203]
[24.27848625 122.09059906]
[38.41810989 117.08349609]
[52.55773163 112.07639313]
[66.69735718 107.06929016]
[80.83697510 102.06218719]
[65.83792877 101.89309692]
[54.08081436 92.57804108]
[50.48579788 78.01521301]
[56.55733109 64.29892731]
[69.75457764 57.16922760]
[84.55470276 59.60977173]
[94.76409912 70.59923553]
[96.10999298 85.53993225]
[99.99227905 71.05104065]
[93.24826813 56.49433136]
[100.55291748 42.21072006]
[116.30273438 39.15737152]
[128.41580200 49.67655563]
[127.60000610 65.69885254]
[114.48116302 74.93332672]
[110.59887695 89.42221832]
[114.60099030 95.76517487]
[127.28704071 87.76116943]
[135.29083252 100.44734955]
[122.60520935 108.45109558]
[126.60731506 114.79405212]
[141.35614014 117.52758026]
[156.10496521 120.26111603]
[170.85379028 122.99465179]
[179.57728577 116.24112701]
[190.36221313 115.48986816]
[199.55377197 120.74933624]
[204.17329407 130.03222656]
[218.75883484 133.53390503]
[233.34439087 137.03558350]
[247.92993164 140.53726196]
[263.15505981 136.23533630]
[273.72442627 146.72998047]
[288.30996704 150.23165894]
[302.89553833 153.73333740]
[317.48107910 157.23501587]
[332.06661987 160.73669434]
[346.65216064 164.23837280]
[359.99490356 155.76800537]
[375.40066528 159.29475403]
[383.72949219 172.72628784]
[380.04006958 188.09390259]
[366.52120972 196.28025818]
[351.19348145 192.42855835]
[343.15048218 178.82392883]
[328.56494141 175.32225037]
[313.97940063 171.82057190]
[299.39385986 168.31887817]
[284.80828857 164.81719971]
[270.22274780 161.31552124]
[256.04089355 165.86791992]
[244.42825317 155.12281799]
[229.84271240 151.62113953]
[215.25715637 148.11946106]
[200.67161560 144.61776733]
[182.69790649 151.54760742]
[168.12025452 137.74346924]
[153.37142944 135.00993347]
[138.62260437 132.27641296]
[123.87377930 129.54287720]
[85.84407806 116.20181274]
[71.70446014 121.20891571]
[57.56483459 126.21601868]
[43.42521286 131.22311401]
[29.28558922 136.23022461]
[15.14596653 141.23731995]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 46]
[4 45]
[5 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[48 119]
[49 118]
[50 117]
[51 116]
[52 115]
[53 114]
[61 69]
[62 68]
[74 113]
[75 112]
[76 111]
[77 110]
[81 108]
[82 107]
[83 106]
[84 105]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
