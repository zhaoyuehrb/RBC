%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCCCUCUCUGUGACUCAGUCUCUGAGCGUUUUAAUACGAUGGUGUCCCCGCGGGAUCAAACUUCAGCGUCACAGCUGAGGACUGGCUUCGUGGUCCCUG\
) } def
/len { sequence length } bind def

/coor [
[195.43420410 100.23064423]
[180.47779846 101.37332153]
[165.52137756 102.51599884]
[150.56497192 103.65867615]
[135.60855103 104.80134583]
[134.11790466 112.75052643]
[130.85188293 120.26908875]
[125.92976379 126.96060944]
[119.55918884 132.46076965]
[112.02777863 136.45703125]
[103.69026184 138.70617676]
[94.95184326 139.04855347]
[86.24847412 137.41844177]
[78.02516174 133.84973145]
[70.71317291 128.47663879]
[64.70754242 121.52907562]
[60.34578323 113.32321167]
[45.55635071 115.82775116]
[30.76692009 118.33229065]
[15.97748852 120.83682251]
[1.18805730 123.34136200]
[-13.41917419 131.94747925]
[-25.73263741 120.29351044]
[-17.94281769 105.23512268]
[-1.31648123 108.55193329]
[13.47294998 106.04739380]
[28.26238251 103.54285431]
[43.05181503 101.03831482]
[57.84124374 98.53377533]
[61.01956177 83.87436676]
[48.59538269 75.46962738]
[36.17119980 67.06488037]
[20.70264816 70.30516815]
[7.51939774 61.58866119]
[4.44283867 46.08671570]
[13.29823780 32.99635696]
[28.83184433 30.08386612]
[41.82784653 39.07717133]
[44.57594299 54.64070129]
[57.00012589 63.04544449]
[69.42430878 71.45018768]
[95.29315186 60.41352081]
[120.86276245 68.36128998]
[134.46588135 89.84494019]
[149.42230225 88.70226288]
[164.37870789 87.55958557]
[179.33512878 86.41690826]
[194.29153442 85.27423096]
[206.83181763 67.62952423]
[227.98812866 64.58031464]
[244.57292175 77.62921906]
[259.18215942 74.22771454]
[273.79138184 70.82621002]
[288.40063477 67.42471313]
[303.00985718 64.02320862]
[317.61911011 60.62170410]
[332.22833252 57.22020340]
[343.91442871 46.55504227]
[358.06472778 51.20465851]
[372.67395020 47.80315399]
[387.28320312 44.40165329]
[395.65576172 31.26628876]
[410.52008057 28.02479553]
[422.99102783 36.08771515]
[437.60028076 32.68621063]
[452.20950317 29.28470802]
[466.81872559 25.88320541]
[481.42797852 22.48170280]
[496.03720093 19.08020020]
[510.64645386 15.67869854]
[518.78259277 2.12958288]
[534.13641357 -1.61684489]
[547.59875488 6.66210413]
[551.18267822 22.05467606]
[542.76184082 35.42873383]
[527.33221436 38.84968185]
[514.04797363 30.28793526]
[499.43872070 33.68943787]
[484.82946777 37.09093857]
[470.22024536 40.49244308]
[455.61099243 43.89394379]
[441.00177002 47.29544830]
[426.39251709 50.69694901]
[418.76571655 63.43928528]
[403.99832153 67.09700775]
[390.68469238 59.01088715]
[376.07546997 62.41239166]
[361.46621704 65.81389618]
[350.82507324 76.23575592]
[335.62985229 71.82943726]
[321.02059937 75.23094177]
[306.41137695 78.63244629]
[291.80212402 82.03394318]
[277.19290161 85.43544769]
[262.58364868 88.83695221]
[247.97442627 92.23845673]
[246.05014038 101.10608673]
[241.24172974 108.85324097]
[234.08038330 114.56809235]
[225.37614441 117.56643677]
[216.12637329 117.47348022]
[207.40142822 114.27045441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[4 45]
[5 44]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[30 41]
[31 40]
[32 39]
[51 96]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[57 90]
[59 88]
[60 87]
[61 86]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
