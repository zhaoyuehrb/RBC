%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCGAGGCGGGGCGCGACUGGGUUCGCGGCCGCGUGCAGAGGUGCAGGCAGAGCAGCCUCGGAACCGAGACG\
) } def
/len { sequence length } bind def

/coor [
[111.29978180 249.77474976]
[115.35570526 234.89009094]
[126.83030701 224.57810974]
[124.32877350 209.78816223]
[120.90351105 195.18447876]
[116.56803894 180.82469177]
[112.23255920 166.46488953]
[107.89708710 152.10510254]
[103.56160736 137.74531555]
[99.22612762 123.38552094]
[77.08764648 112.95159912]
[74.46223450 85.75749207]
[60.19638824 81.12223816]
[44.68068695 84.21636200]
[34.96728897 72.92481232]
[20.70144272 68.28955078]
[6.43559456 63.65430069]
[-7.83025312 59.01904297]
[-22.09610176 54.38378906]
[-36.06227112 61.78120041]
[-51.14383698 57.05659103]
[-58.39317322 43.01299667]
[-53.50938034 27.98222351]
[-39.38992310 20.88176727]
[-24.41162491 25.92420197]
[-17.46084595 40.11794281]
[-3.19499826 44.75319672]
[11.07084942 49.38845062]
[25.33669662 54.02370453]
[39.60254669 58.65896225]
[54.09785843 55.23329544]
[64.83164215 66.85639191]
[79.09748840 71.49164581]
[92.80067444 65.39059448]
[98.90172577 51.68741608]
[97.44638062 35.93328857]
[109.69140625 27.45339012]
[115.79245758 13.75020790]
[121.89350891 0.04702561]
[127.99455261 -13.65615654]
[125.74318695 -29.90002823]
[138.84953308 -39.75679779]
[153.83090210 -33.08666229]
[155.27574158 -16.75128746]
[141.69773865 -7.55510664]
[135.59669495 6.14807510]
[129.49563599 19.85125732]
[123.39458466 33.55443954]
[125.28631592 48.32842255]
[112.60490417 57.78846359]
[106.50385284 71.49164581]
[114.90936279 75.82103729]
[121.26466370 82.44995880]
[125.00662231 90.53794098]
[125.88774109 99.13300323]
[123.98636627 107.28279877]
[119.67991638 114.13992310]
[113.58592224 119.05004120]
[117.92140198 133.40983582]
[122.25687408 147.76962280]
[126.59235382 162.12942505]
[130.92782593 176.48921204]
[135.26330566 190.84899902]
[139.53918457 194.81236267]
[141.45010376 199.58601379]
[141.11459351 204.03997803]
[139.11871338 207.28663635]
[141.62025452 222.07656860]
[155.84785461 228.04135132]
[164.57324219 240.76422119]
[165.01217651 256.18533325]
[157.02458191 269.38388062]
[143.15927124 276.14825439]
[127.84062195 274.31997681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 68]
[4 67]
[5 63]
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[12 33]
[13 32]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[34 51]
[35 50]
[37 48]
[38 47]
[39 46]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
