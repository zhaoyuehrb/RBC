%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCUGGUUUCUGUCCUGCGCGCGCAGAUUCGCGCAGACCAGGAAGCGGAUCCCGUGGAAUGACGGUGACGCCGCGGCGGGCGGAUUGACUUCUAAAGAAUCUUGGUACGUGAGGAAGAAACCCAGAAGAGGAAGAGGAAAGCAAAGGAGUCAGGG\
) } def
/len { sequence length } bind def

/coor [
[191.09013367 138.95095825]
[182.14425659 130.23396301]
[177.74867249 118.46507263]
[162.89372253 116.38404083]
[148.03878784 114.30300140]
[133.18383789 112.22196960]
[118.32890320 110.14093781]
[100.46567535 124.67715454]
[75.67276764 114.68489838]
[62.34852982 121.57435608]
[49.02429199 128.46382141]
[35.70005417 135.35327148]
[22.37581253 142.24273682]
[9.05157375 149.13218689]
[4.16605139 163.92304993]
[-9.44476509 170.72013855]
[-23.51547813 165.97137451]
[-36.83971786 172.86083984]
[-50.16395569 179.75030518]
[-63.48819351 186.63975525]
[-76.81243134 193.52922058]
[-90.13667297 200.41868591]
[-103.46091461 207.30813599]
[-105.66363525 222.66807556]
[-116.49814606 233.77630615]
[-131.79835510 236.36151123]
[-145.68101501 229.42961121]
[-152.80796814 215.64605713]
[-150.43875122 200.31092834]
[-139.48437500 189.32087708]
[-124.15702057 186.90180969]
[-110.35037231 193.98390198]
[-97.02613068 187.09443665]
[-83.70189667 180.20498657]
[-70.37765503 173.31552124]
[-57.05341721 166.42605591]
[-43.72917557 159.53660583]
[-30.40493774 152.64714050]
[-26.14561653 138.42062378]
[-12.73108578 131.24392700]
[2.16211462 135.80795288]
[15.48635387 128.91848755]
[28.81059265 122.02903748]
[42.13483047 115.13957214]
[55.45907211 108.25011444]
[68.78330994 101.36065674]
[71.74622345 86.65619659]
[62.12981796 75.14425659]
[52.51341248 63.63231659]
[42.89700699 52.12037659]
[25.48132324 46.21733856]
[23.09075737 28.85542107]
[13.24737072 17.53695107]
[3.29194736 6.31690073]
[-6.77452898 -4.80362320]
[-16.84100533 -15.92414761]
[-26.90748215 -27.04467201]
[-42.70271683 -27.57953644]
[-53.43223572 -39.18354416]
[-52.73040390 -54.97224426]
[-41.01360321 -65.57847595]
[-25.23320961 -64.70975494]
[-14.75144577 -52.88147736]
[-15.78695774 -37.11114883]
[-5.72048140 -25.99062347]
[4.34599495 -14.87010002]
[14.41247082 -3.74957585]
[21.27029419 -0.88555604]
[24.56583977 7.69356537]
[34.40922546 19.01203537]
[46.48373413 20.17852783]
[54.77573395 29.57535172]
[54.40894699 42.50397110]
[64.02535248 54.01591110]
[73.64175415 65.52785492]
[83.25816345 77.03979492]
[100.72360992 74.08378601]
[114.84346008 81.86289978]
[120.40993500 95.28599548]
[135.26487732 97.36702728]
[150.11981201 99.44805908]
[164.97476196 101.52909851]
[179.82969666 103.61013031]
[191.97502136 90.20831299]
[209.57176208 86.76824951]
[225.58782959 94.47381592]
[233.73669434 110.09259796]
[248.66262817 111.58140564]
[263.58856201 113.07021332]
[278.51449585 114.55902100]
[293.44042969 116.04782867]
[308.36636353 117.53663635]
[323.29229736 119.02544403]
[338.21823120 120.51425171]
[353.14416504 122.00305176]
[361.04254150 106.37596130]
[374.28643799 94.97578430]
[390.84829712 89.51251221]
[408.20596313 90.78991699]
[423.72695923 98.58741760]
[435.06759644 111.69760132]
[440.52685547 128.11314392]
[455.51498413 128.70948792]
[470.50314331 129.30583191]
[485.49127197 129.90217590]
[492.11972046 115.28193665]
[503.81536865 104.34272766]
[518.77349854 98.73219299]
[534.70141602 99.27881622]
[549.16967773 105.86974335]
[559.98297119 117.47248077]
[565.51281738 132.29652405]
[580.50982666 132.59475708]
[589.20672607 129.62394714]
[595.80126953 133.05096436]
[610.78942871 133.64730835]
[622.22869873 122.74234009]
[638.02624512 123.20366669]
[648.80969238 134.75759888]
[648.18133545 150.54939270]
[636.51403809 161.21005249]
[620.72979736 160.41481018]
[610.19305420 148.63545227]
[595.20495605 148.03910828]
[580.21160889 147.59179688]
[565.21459961 147.29356384]
[560.06695557 160.37875366]
[550.73553467 170.93748474]
[538.32995605 177.68330383]
[524.33581543 179.78504944]
[510.43728638 176.96907043]
[498.31384277 169.55482483]
[489.43771362 158.41867065]
[484.89492798 144.89031982]
[469.90676880 144.29397583]
[454.91864014 143.69763184]
[439.93051147 143.10127258]
[435.61062622 155.01217651]
[428.09130859 165.23205566]
[417.97686768 172.92236328]
[406.08514404 177.44854736]
[393.38125610 178.43241882]
[380.89929199 175.78369141]
[369.65817261 169.70820618]
[360.57846069 160.69197083]
[354.40698242 149.46226501]
[351.65536499 136.92898560]
[336.72943115 135.44018555]
[321.80349731 133.95137024]
[306.87756348 132.46257019]
[291.95162964 130.97375488]
[277.02569580 129.48495483]
[262.09976196 127.99614716]
[247.17382812 126.50733948]
[232.24789429 125.01853180]
[225.56562805 135.22698975]
[215.10412598 141.64523315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 83]
[4 82]
[5 81]
[6 80]
[7 79]
[9 46]
[10 45]
[11 44]
[12 43]
[13 42]
[14 41]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[47 76]
[48 75]
[49 74]
[50 73]
[52 70]
[53 69]
[54 67]
[55 66]
[56 65]
[57 64]
[87 155]
[88 154]
[89 153]
[90 152]
[91 151]
[92 150]
[93 149]
[94 148]
[95 147]
[102 137]
[103 136]
[104 135]
[105 134]
[112 126]
[113 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
