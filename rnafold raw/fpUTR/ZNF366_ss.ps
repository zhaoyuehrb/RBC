%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGUUCCUGUUCUCUUUCUUAAGUCAUUCGAAACACUGUCCCUGCGAGUUCUUUAAGUUCCCUGCAAUCUGUACACAAGAGAAAGAGGGAGAGAGAGAGGGAGAGAGACAGAGAGAGCAGGGAUCAGGUAAAGGAGUGGGGCUGCUGCAGCCAUUCAGACCUCAGGAGCUGGAAAAUUGCCAAGG\
) } def
/len { sequence length } bind def

/coor [
[72.61195374 112.20627594]
[72.01996613 105.11400604]
[73.14263153 98.44863129]
[75.74349976 92.59809875]
[63.33304214 84.17310333]
[50.92258453 75.74810791]
[38.51212692 67.32311249]
[26.10167122 58.89811325]
[13.69121456 50.47311401]
[1.28075862 42.04811859]
[-11.12969780 33.62312317]
[-23.54015350 25.19812393]
[-35.95061111 16.77312660]
[-48.36106873 8.34813023]
[-60.77152252 -0.07686621]
[-73.18197632 -8.50186348]
[-85.59243774 -16.92686081]
[-98.00289154 -25.35185623]
[-97.91200256 -10.35213184]
[-109.47343445 -0.79529029]
[-124.18817139 -3.70674348]
[-131.23913574 -16.94622803]
[-125.44302368 -30.78115273]
[-111.06020355 -35.04113388]
[-122.72003937 -44.47767639]
[-134.37986755 -53.91421509]
[-131.66096497 -39.16268921]
[-136.37303162 -24.92202950]
[-147.35417175 -14.70369053]
[-161.89666748 -11.02730751]
[-176.41462708 -14.79940224]
[-187.32823181 -25.08985138]
[-191.94639587 -39.36124420]
[-189.13037109 -54.09453964]
[-179.57453918 -65.65681458]
[-165.63517761 -71.19703674]
[-150.75057983 -69.34956360]
[-160.85601807 -80.43469238]
[-175.87106323 -85.42056274]
[-178.72743225 -100.03871155]
[-188.83287048 -111.12384796]
[-198.93830872 -122.20897675]
[-209.04374695 -133.29411316]
[-219.14916992 -144.37924194]
[-222.55627441 -129.77131653]
[-236.02648926 -123.17183685]
[-249.65762329 -129.43220520]
[-253.42916870 -143.95031738]
[-244.56858826 -156.05363464]
[-229.58903503 -156.84458923]
[-238.72877502 -168.73849487]
[-247.86853027 -180.63240051]
[-257.00827026 -192.52630615]
[-266.14804077 -204.42021179]
[-275.28778076 -216.31411743]
[-280.15176392 -218.32058716]
[-283.42050171 -221.66531372]
[-284.85098267 -225.51083374]
[-284.57028198 -229.04534912]
[-293.09921265 -241.38459778]
[-301.62817383 -253.72384644]
[-310.15710449 -266.06311035]
[-318.68606567 -278.40234375]
[-327.21499634 -290.74160767]
[-343.67022705 -289.22824097]
[-358.56060791 -296.17443848]
[-367.86758423 -309.60125732]
[-369.13214111 -325.79513550]
[-362.10388184 -340.33496094]
[-370.83892822 -352.52920532]
[-379.57394409 -364.72341919]
[-395.17855835 -365.73855591]
[-406.44406128 -376.58395386]
[-408.05123901 -392.13873291]
[-399.24121094 -405.05841064]
[-384.17385864 -409.24267578]
[-369.96347046 -402.71591187]
[-363.31976318 -388.55981445]
[-367.37973022 -373.45846558]
[-358.64468384 -361.26422119]
[-349.90966797 -349.07000732]
[-336.42437744 -351.29910278]
[-323.23217773 -347.47787476]
[-312.92715454 -338.29824829]
[-307.56121826 -325.51165771]
[-308.23568726 -311.59490967]
[-314.87576294 -299.27053833]
[-306.34680176 -286.93130493]
[-297.81787109 -274.59204102]
[-289.28890991 -262.25280762]
[-280.75997925 -249.91354370]
[-272.23101807 -237.57429504]
[-263.39385986 -225.45387268]
[-254.25411987 -213.55996704]
[-245.11437988 -201.66606140]
[-235.97462463 -189.77215576]
[-226.83486938 -177.87825012]
[-217.69512939 -165.98434448]
[-208.06404114 -154.48468018]
[-197.95860291 -143.39955139]
[-187.85316467 -132.31440735]
[-177.74774170 -121.22927856]
[-167.64230347 -110.14414978]
[-153.35006714 -105.95116425]
[-149.77087402 -90.54013062]
[-139.66545105 -79.45499420]
[-129.58390808 -76.45423889]
[-124.94332886 -65.57405090]
[-113.28349304 -56.13750839]
[-101.62366486 -46.70096588]
[-89.57789612 -37.76231384]
[-77.16744232 -29.33731651]
[-64.75698090 -20.91231918]
[-52.34652710 -12.48732281]
[-39.93606949 -4.06232548]
[-27.52561378 4.36267138]
[-15.11515713 12.78766823]
[-2.70470095 21.21266556]
[9.70575523 29.63766098]
[22.11621094 38.06266022]
[34.52666855 46.48765564]
[46.93712616 54.91265106]
[59.34757996 63.33765030]
[71.75803375 71.76264954]
[84.16849518 80.18764496]
[111.70936584 70.72879791]
[137.34626770 94.90622711]
[152.15562439 97.29006958]
[166.96499634 99.67391968]
[181.77435303 102.05776215]
[189.88897705 93.33527374]
[201.09504700 89.65992737]
[212.56353760 91.83751678]
[221.45774841 99.21135712]
[225.63496399 109.85434723]
[240.35588074 112.73434448]
[255.07681274 115.61434937]
[269.79772949 118.49434662]
[284.51864624 121.37434387]
[299.23959351 124.25434113]
[316.50231934 117.87274170]
[329.28262329 129.88601685]
[344.04986572 132.51831055]
[359.27795410 126.43248749]
[371.99331665 136.78869629]
[369.11550903 152.93336487]
[353.60491943 158.25823975]
[341.41757202 147.28553772]
[326.65032959 144.65324402]
[316.53948975 151.31765747]
[304.20404053 149.23097229]
[296.35958862 138.97526550]
[281.63867188 136.09526062]
[266.91772461 133.21527100]
[252.19680786 130.33526611]
[237.47589111 127.45526886]
[222.75495911 124.57527161]
[208.22924805 135.69134521]
[189.87313843 132.62825012]
[179.39051819 116.86712646]
[164.58114624 114.48328400]
[149.77178955 112.09943390]
[134.96241760 109.71559143]
[130.14688110 115.46542358]
[142.00044250 124.65743256]
[155.72286987 130.71505737]
[154.52763367 145.66735840]
[140.01715088 149.46813965]
[131.64529419 137.02163696]
[120.51579285 126.96508789]
[115.70024872 132.71492004]
[120.64593506 146.87612915]
[125.59162903 161.03735352]
[140.27813721 166.40769958]
[148.03179932 179.98764038]
[145.19158936 195.36512756]
[133.09857178 205.27938843]
[117.46267700 205.04922485]
[105.66671753 194.78329468]
[103.28037262 179.32887268]
[111.43040466 165.98304749]
[106.48471832 151.82182312]
[101.53902435 137.66059875]
[92.90183258 135.44691467]
[85.38046265 131.36982727]
[79.34667206 125.82477570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 125]
[5 124]
[6 123]
[7 122]
[8 121]
[9 120]
[10 119]
[11 118]
[12 117]
[13 116]
[14 115]
[15 114]
[16 113]
[17 112]
[18 111]
[24 110]
[25 109]
[26 108]
[37 106]
[38 105]
[40 103]
[41 102]
[42 101]
[43 100]
[44 99]
[50 98]
[51 97]
[52 96]
[53 95]
[54 94]
[55 93]
[59 92]
[60 91]
[61 90]
[62 89]
[63 88]
[64 87]
[69 81]
[70 80]
[71 79]
[127 163]
[128 162]
[129 161]
[130 160]
[135 157]
[136 156]
[137 155]
[138 154]
[139 153]
[140 152]
[142 149]
[143 148]
[171 183]
[172 182]
[173 181]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
