%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGACGGGGAAGGGGUCGCCGUGGCUGCCGGUCCUCGAGUUGGGGGCUGCCGCGGACACUGCUAGGCAGACGGCGAGUACCGAGCGCGGGUGGCCGCGGUGUCCGUGGGCCACGCUCAGCUGCGGUCAGAGGCGAC\
) } def
/len { sequence length } bind def

/coor [
[33.82368851 343.65188599]
[13.91048145 352.72613525]
[10.24537563 367.27148438]
[15.24432945 382.89013672]
[4.01887131 394.84509277]
[-11.88321018 390.83813477]
[-16.10321617 374.99124146]
[-4.29996729 363.60638428]
[-0.63486123 349.06103516]
[-7.14078140 343.97463989]
[-11.84976292 337.14926147]
[-14.31517887 329.19644165]
[-14.29255772 320.83633423]
[-11.76367283 312.83218384]
[-6.94005394 305.92092896]
[-0.24544396 300.74508667]
[7.72137070 297.79333496]
[16.24009514 297.35412598]
[21.82450104 283.43240356]
[27.40890503 269.51068115]
[32.99330902 255.58894348]
[38.57771683 241.66722107]
[44.16212082 227.74549866]
[40.71277237 210.57478333]
[55.19539642 199.26425171]
[60.46601868 185.22073364]
[65.73664093 171.17720032]
[71.00726318 157.13368225]
[76.27788544 143.09016418]
[81.54850769 129.04663086]
[86.81912994 115.00311279]
[80.31087494 101.48857880]
[66.04502869 96.85332489]
[51.77917862 92.21807098]
[37.51333237 87.58281708]
[23.24748421 82.94756317]
[8.98163605 78.31230927]
[-5.28421211 73.67705536]
[-19.55006027 69.04179382]
[-34.43977737 75.01472473]
[-48.32151794 66.97254181]
[-50.54640198 51.08451080]
[-39.40768433 39.53857803]
[-23.45003891 41.19179153]
[-14.91480446 54.77595139]
[-0.64895707 59.41120529]
[13.61689091 64.04646301]
[27.88273811 68.68171692]
[42.14858627 73.31697083]
[56.41443253 77.95222473]
[70.68028259 82.58747864]
[84.94612885 87.22273254]
[98.98965454 81.95211029]
[106.68314362 69.07537842]
[114.37663269 56.19864655]
[122.07012177 43.32191467]
[129.76361084 30.44518471]
[137.45709229 17.56845284]
[145.15058899 4.69172049]
[152.84407043 -8.18501186]
[160.53756714 -21.06174278]
[168.23104858 -33.93847656]
[175.92454529 -46.81520844]
[183.61802673 -59.69194031]
[191.31152344 -72.56867218]
[191.80130005 -79.29617310]
[195.15643311 -84.01171875]
[199.65013123 -85.83950043]
[207.91358948 -98.35810089]
[216.17704773 -110.87669373]
[210.88748169 -125.34482574]
[215.08242798 -139.98229980]
[226.95169067 -149.23350525]
[241.81457520 -149.71589661]
[242.95970154 -165.49560547]
[256.42846680 -171.85498047]
[264.69192505 -184.37358093]
[272.95538330 -196.89218140]
[266.62493896 -210.96092224]
[268.92816162 -226.21537781]
[279.13012695 -237.78793335]
[293.97537231 -241.98580933]
[308.72683716 -237.46949768]
[318.67742920 -225.68011475]
[320.65191650 -210.37962341]
[314.02026367 -196.45036316]
[300.89859009 -188.33708191]
[285.47396851 -188.62872314]
[277.21051025 -176.11012268]
[268.94705200 -163.59153748]
[268.39297485 -148.70722961]
[254.33317566 -141.45243835]
[259.73107910 -127.59600830]
[255.88926697 -113.04594421]
[244.07841492 -103.43567657]
[228.69564819 -102.61324310]
[220.43218994 -90.09464264]
[212.16873169 -77.57604218]
[204.18824768 -64.87518311]
[196.49476624 -51.99845123]
[188.80126953 -39.12171936]
[181.10778809 -26.24498558]
[173.41429138 -13.36825371]
[165.72080994 -0.49152225]
[158.02731323 12.38521004]
[150.33383179 25.26194191]
[142.64033508 38.13867188]
[134.94685364 51.01540375]
[127.25336456 63.89213562]
[119.55987549 76.76886749]
[111.86638641 89.64559937]
[115.36806488 104.23114777]
[128.06892395 112.21163177]
[142.41987610 106.30995178]
[157.49098206 110.00338745]
[167.48709106 121.87171936]
[168.56449890 137.35134888]
[160.30891418 150.49003601]
[145.89479065 156.23567200]
[130.86463928 152.37896729]
[120.99786377 140.40289307]
[120.08844757 124.91249084]
[107.38758087 116.93201447]
[104.36158752 118.88567352]
[100.86265564 120.27373505]
[95.59203339 134.31726074]
[90.32141113 148.36077881]
[85.05078888 162.40431213]
[79.78016663 176.44783020]
[74.50954437 190.49134827]
[69.23892212 204.53488159]
[73.86158752 216.63391113]
[69.12085724 228.25418091]
[58.08384705 233.32991028]
[52.49943924 247.25163269]
[46.91503525 261.17333984]
[41.33063126 275.09509277]
[35.74622726 289.01681519]
[30.16182137 302.93853760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 9]
[3 8]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[25 131]
[26 130]
[27 129]
[28 128]
[29 127]
[30 126]
[31 125]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[53 111]
[54 110]
[55 109]
[56 108]
[57 107]
[58 106]
[59 105]
[60 104]
[61 103]
[62 102]
[63 101]
[64 100]
[65 99]
[68 98]
[69 97]
[70 96]
[74 92]
[76 90]
[77 89]
[78 88]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
