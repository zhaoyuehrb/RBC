%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCCUCCCCCUCCCCCUCCCCCUCUUUCUUCUCCUCCCUCGUCGCCGCCGCCGCCGCCGCCGCCUCAGCCUUCGCCUCAGCCGCCGCCCGCUCCCGCCCGCGCGCGGCGGG\
) } def
/len { sequence length } bind def

/coor [
[-83.86578369 131.28816223]
[-98.75641632 133.09620667]
[-113.64704895 134.90426636]
[-128.53767395 136.71231079]
[-143.42831421 138.52035522]
[-156.19523621 147.86466980]
[-169.76234436 141.71789551]
[-184.65296936 143.52593994]
[-185.25576782 158.54702759]
[-188.26042175 173.27685547]
[-193.58914185 187.33392334]
[-201.10388184 200.35409546]
[-210.61000061 212.00012207]
[-221.86125183 221.97033691]
[-234.56622314 230.00650024]
[-248.39581299 235.90046692]
[-262.99179077 239.49952698]
[-277.97610474 240.71049500]
[-292.96063232 239.50199890]
[-307.55722046 235.90531921]
[-321.38775635 230.01364136]
[-334.09405518 221.97956848]
[-345.34695435 212.01119995]
[-354.85498047 200.36672974]
[-362.37185669 187.34779358]
[-367.70288086 173.29161072]
[-370.70999146 158.56227112]
[-371.31524658 143.54129028]
[-369.50299072 128.61775208]
[-365.32015991 114.17821503]
[-358.87512207 100.59670258]
[-350.33480835 88.22499847]
[-339.92041016 77.38356018]
[-327.90173340 68.35321808]
[-314.59002686 61.36786652]
[-300.33013916 56.60844803]
[-285.49145508 54.19824600]
[-270.45828247 54.19968796]
[-255.62004089 56.61273575]
[-241.36108398 61.37488937]
[-228.05073547 68.36279297]
[-216.03376770 77.39544678]
[-205.62145996 88.23887634]
[-197.08351135 100.61222076]
[-190.64106750 114.19496918]
[-186.46102905 128.63531494]
[-171.57038879 126.82726288]
[-159.86854553 117.61226654]
[-145.23635864 123.62973022]
[-130.34573364 121.82167816]
[-115.45509338 120.01362610]
[-100.56446075 118.20558167]
[-85.67382812 116.39752960]
[-76.71881104 104.55087280]
[-61.64334869 102.50512695]
[-49.27820587 111.97830200]
[-34.38757324 110.17024994]
[-19.49693871 108.36219788]
[-4.60630560 106.55414581]
[10.28432751 104.74610138]
[25.17496109 102.93804932]
[40.06559372 101.12999725]
[54.93061066 99.12220001]
[69.76733398 96.91501617]
[84.60405731 94.70783997]
[97.38848877 83.93070984]
[112.92775726 90.10478973]
[127.69986725 87.50006866]
[134.57077026 73.71250153]
[148.08479309 66.69647980]
[162.96282959 68.95658112]
[173.53063965 79.41886139]
[188.30276489 76.81414032]
[203.07487488 74.20941925]
[209.94578552 60.42185593]
[223.45980835 53.40583038]
[238.33784485 55.66593552]
[248.90565491 66.12821960]
[263.67776489 63.52349472]
[275.92471313 53.50736618]
[289.80221558 58.91705322]
[298.66073608 45.82880783]
[314.19503784 42.92002106]
[327.18887329 51.91642380]
[329.93325806 67.48060608]
[320.79998779 80.37862396]
[305.20764160 82.95830536]
[292.40692139 73.68917084]
[281.21658325 83.51898956]
[266.28250122 78.29560852]
[251.51037598 80.90032959]
[245.15818787 94.34606934]
[231.95040894 101.55845642]
[216.85176086 99.58761597]
[205.67959595 88.98153687]
[190.90748596 91.58625793]
[176.13536072 94.19097900]
[169.78318787 107.63671112]
[156.57540894 114.84910583]
[141.47676086 112.87826538]
[130.30459595 102.27217865]
[115.53247833 104.87690735]
[108.22441101 114.04994965]
[96.64801025 115.93129730]
[86.81124115 109.54456329]
[71.97451782 111.75173950]
[57.13779449 113.95892334]
[48.98562622 118.36873627]
[41.87364578 116.02062988]
[26.98301125 117.82868195]
[12.09237766 119.63673401]
[-2.79825521 121.44477844]
[-17.68888855 123.25283051]
[-32.57952118 125.06088257]
[-47.47015381 126.86893463]
[-57.20891190 139.02600098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[5 49]
[7 47]
[8 46]
[56 115]
[57 114]
[58 113]
[59 112]
[60 111]
[61 110]
[62 109]
[63 107]
[64 106]
[65 105]
[67 102]
[68 101]
[72 97]
[73 96]
[74 95]
[78 91]
[79 90]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
