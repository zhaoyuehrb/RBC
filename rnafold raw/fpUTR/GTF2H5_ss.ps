%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCACUCUGCCGGCAACGCCGAGGCGCUUCUGCAUCUGUGGGCCGAGCAUUCUUCAGGUCAUCUGAACCUUCUGAGAAAAC\
) } def
/len { sequence length } bind def

/coor [
[140.07341003 115.21537018]
[125.33490753 112.42669678]
[110.59641266 109.63802338]
[97.33701324 114.07422638]
[86.61491394 105.10047913]
[71.87641907 102.31180573]
[57.13792038 99.52312469]
[43.00362396 109.62759399]
[26.24090958 106.56493378]
[16.96450233 92.67139435]
[2.13204026 90.43576050]
[-12.70042229 88.20012665]
[-21.90550232 90.03985596]
[-28.04152679 85.59356689]
[-42.78002548 82.80489349]
[-54.08353806 93.27087402]
[-69.20558167 95.05333710]
[-82.32242584 87.67685699]
[-88.50649261 74.15297699]
[-103.24499512 71.36430359]
[-117.98348999 68.57563019]
[-133.27523804 74.49969482]
[-145.88012695 64.00928497]
[-142.83132935 47.89603424]
[-127.26519012 42.73587418]
[-115.19481659 53.83713531]
[-100.45631409 56.62580872]
[-85.71781921 59.41448212]
[-75.02040100 49.08475494]
[-60.11534882 47.01030350]
[-46.68984222 54.19425201]
[-39.99135208 68.06639862]
[-25.25285339 70.85507202]
[-10.46478844 73.36766052]
[4.36767435 75.60330200]
[19.20013618 77.83893585]
[28.52051926 68.73711395]
[41.58790970 66.71138000]
[53.57702255 72.74015045]
[59.92659378 84.78462982]
[74.66509247 87.57330322]
[89.40358734 90.36197662]
[102.66298676 85.92577362]
[113.38508606 94.89952087]
[128.12358093 97.68819427]
[142.86207581 100.47687531]
[151.52255249 89.32346344]
[164.10791016 83.06785583]
[178.09457397 82.89977264]
[190.70587158 88.79468536]
[199.46330261 99.53017426]
[202.67362976 112.93892670]
[217.29754639 116.27674103]
[231.92146301 119.61455536]
[246.54539490 122.95236969]
[261.16931152 126.29018402]
[279.90335083 119.31179047]
[293.81192017 132.52980042]
[308.64437866 134.76542664]
[323.47683716 137.00106812]
[338.30929565 139.23669434]
[353.18096924 141.19459534]
[367.98727417 134.14433289]
[381.34085083 143.66345215]
[379.50473022 159.95948792]
[364.36773682 166.26847839]
[351.50152588 156.10028076]
[344.32751465 158.54040527]
[336.07366943 154.06916809]
[321.24121094 151.83352661]
[306.40875244 149.59790039]
[291.57629395 147.36225891]
[283.68099976 154.31173706]
[273.02548218 155.66224670]
[263.24880981 150.70094299]
[257.83148193 140.91410828]
[243.20758057 137.57629395]
[228.58364868 134.23847961]
[213.95973206 130.90066528]
[199.33581543 127.56284332]
[188.74389648 139.61482239]
[173.45394897 144.77728271]
[157.54183960 141.57577515]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[5 42]
[6 41]
[7 40]
[10 36]
[11 35]
[12 34]
[14 33]
[15 32]
[19 28]
[20 27]
[21 26]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[58 72]
[59 71]
[60 70]
[61 69]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
