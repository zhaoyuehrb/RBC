%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACACGCGCGCACACACACGCGCACACCGGACCCCGCGCGCACACGCACGGAGGGCGCGAGCGAGCAGACGCGCACACCGGCGAGCCAAGUUCCGCAGCCUGGC\
) } def
/len { sequence length } bind def

/coor [
[110.32862854 144.95220947]
[104.86850739 158.92314148]
[90.54130554 163.36514282]
[78.13546753 154.93333435]
[76.99264526 139.97694397]
[87.97456360 129.75779724]
[80.55676270 128.65045166]
[68.63394928 137.75245667]
[56.71113205 146.85446167]
[44.78831482 155.95646667]
[32.86549759 165.05845642]
[33.36798859 180.56739807]
[24.63074493 193.39082336]
[10.01341629 198.59786987]
[-4.86333895 194.18630981]
[-14.27910233 181.85249329]
[-14.61332130 166.33901978]
[-5.73748255 153.61112976]
[8.93547344 148.56297302]
[23.76349640 153.13565063]
[35.68631363 144.03364563]
[47.60913086 134.93164062]
[59.53194427 125.82964325]
[71.45476532 116.72763824]
[75.14902496 89.64472961]
[94.84201813 79.89209747]
[88.79122162 65.27367401]
[97.97950745 53.55084991]
[99.75360107 38.65613174]
[101.52770233 23.76141548]
[103.30179596 8.86669922]
[86.80146790 -10.21661472]
[96.27175903 -36.83942032]
[88.64379120 -49.75507355]
[80.82527161 -62.55627441]
[72.81792450 -75.24021912]
[64.81056976 -87.92415619]
[50.90108490 -95.46317291]
[50.64960098 -110.35565948]
[42.64225006 -123.03959656]
[34.63489914 -135.72354126]
[19.87605476 -142.87255859]
[18.95790100 -159.24598694]
[32.82495499 -168.00022888]
[47.21197891 -160.12968445]
[47.31884003 -143.73088074]
[55.32619095 -131.04695129]
[63.33354187 -118.36300659]
[76.67028809 -111.73123169]
[77.49451447 -95.93150330]
[85.50186157 -83.24756622]
[93.50920868 -70.56362915]
[99.84284973 -66.52300262]
[101.55944061 -57.38304138]
[109.18740845 -44.46738434]
[124.10678101 -42.91419601]
[134.23152161 -53.98169708]
[144.35627747 -65.04919434]
[154.48101807 -76.11669159]
[164.60575867 -87.18419647]
[159.89875793 -101.80403137]
[163.14796448 -116.81529999]
[173.47938538 -128.18003845]
[188.11390686 -132.84120178]
[203.11491394 -129.54493713]
[214.44721985 -119.17795563]
[219.06248474 -104.52889252]
[215.71922302 -89.53829193]
[205.31675720 -78.23854065]
[190.65330505 -73.66921997]
[175.67326355 -77.05944824]
[165.54850769 -65.99195099]
[155.42376709 -54.92444992]
[145.29902649 -43.85695267]
[135.17428589 -32.78945160]
[140.94212341 -18.69212341]
[138.84048462 -4.40900087]
[130.24961853 6.18907070]
[118.19651794 10.64079666]
[116.42241669 25.53551292]
[114.64832306 40.43022919]
[112.87422180 55.32494736]
[119.05191803 68.87799835]
[109.73674011 81.66619873]
[126.70165253 96.56133270]
[122.41527557 124.33515930]
[131.15997314 136.52246094]
[139.90466309 148.70976257]
[148.64935303 160.89706421]
[162.98101807 167.59884644]
[164.11430359 182.45027161]
[172.85899353 194.63757324]
[181.60368347 206.82487488]
[196.76013184 213.08702087]
[198.64663696 229.37730408]
[185.32255554 238.93766785]
[170.49453735 231.93324280]
[169.41638184 215.56956482]
[160.67169189 203.38226318]
[151.92700195 191.19496155]
[138.22080994 185.36491394]
[136.46205139 169.64175415]
[127.71735382 157.45445251]
[118.97266388 145.26715088]
[110.22797394 133.07984924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[26 84]
[28 82]
[29 81]
[30 80]
[31 79]
[33 55]
[34 54]
[35 52]
[36 51]
[37 50]
[39 48]
[40 47]
[41 46]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[86 105]
[87 104]
[88 103]
[89 102]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
