%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAUUGCCCCUGUAACCUGUCAAAGAAGAGCUAAGGGAGCUUUCGGGGUUGGCUUCUUGGAGGCUGCUUUCUCCUUUACUUGGAAGGCUUCGCUAGUG\
) } def
/len { sequence length } bind def

/coor [
[80.05868530 230.43180847]
[67.17920685 219.40660095]
[74.20816040 203.97837830]
[75.15002441 189.00796509]
[76.09188080 174.03756714]
[77.03373718 159.06716919]
[77.74033356 144.08381653]
[78.21149445 129.09121704]
[67.27696228 118.82301331]
[52.34353638 120.23464203]
[37.41010666 121.64626312]
[22.47667694 123.05789185]
[17.11504173 137.30619812]
[6.14349651 147.77099609]
[-8.22485161 152.41543579]
[-23.12364960 150.36926270]
[-35.60509109 142.09140015]
[-43.22315598 129.26835632]
[-58.15658569 130.67997742]
[-65.93920898 144.10421753]
[-80.13966370 150.35935974]
[-95.29758453 147.04016113]
[-105.58443451 135.42291260]
[-107.04472351 119.97470856]
[-99.11692810 106.63568115]
[-84.84945679 100.53495789]
[-69.72843170 104.01840210]
[-59.56821060 115.74655151]
[-44.63478088 114.33492279]
[-39.55445480 100.31152344]
[-28.84520912 89.84149170]
[-14.59372330 85.03981018]
[0.39040178 86.90961456]
[13.12852001 95.13320160]
[21.06505203 108.12445831]
[35.99848175 106.71283722]
[50.93191147 105.30120850]
[65.86534119 103.88958740]
[95.98731995 81.45203400]
[98.33383942 66.63671112]
[100.68035126 51.82138443]
[103.02687073 37.00605774]
[105.37339020 22.19073296]
[107.71990204 7.37540722]
[110.06642151 -7.43991804]
[112.41294098 -22.25524330]
[114.75945282 -37.07056808]
[117.10597229 -51.88589478]
[119.45249176 -66.70121765]
[109.96136475 -79.33823395]
[112.26852417 -94.97320557]
[125.00518036 -104.33020020]
[140.61488342 -101.85786438]
[149.83670044 -89.02299500]
[147.19946289 -73.44029236]
[134.26782227 -64.35469818]
[131.92129517 -49.53937531]
[129.57478333 -34.72405243]
[127.22826385 -19.90872574]
[124.88174438 -5.09340096]
[122.53523254 9.72192383]
[120.18871307 24.53724861]
[117.84219360 39.35257339]
[115.49568176 54.16790009]
[113.14916229 68.98322296]
[110.80264282 83.79855347]
[119.42772675 96.07079315]
[134.16203308 98.88151550]
[148.89634705 101.69223785]
[163.63064575 104.50295258]
[178.36495972 107.31367493]
[193.09927368 110.12439728]
[207.83357239 112.93511200]
[218.38360596 101.67898560]
[233.34994507 97.93566895]
[247.95687866 102.89964294]
[257.54339600 114.98692322]
[259.05047607 130.34049988]
[251.99719238 144.06109619]
[238.63424683 151.77053833]
[223.22570801 151.00875854]
[210.68836975 142.01882935]
[205.02285767 127.66942596]
[190.28854370 124.85870361]
[175.55424500 122.04798126]
[160.81993103 119.23726654]
[146.08561707 116.42654419]
[131.35131836 113.61582184]
[116.61700439 110.80510712]
[110.76377869 115.49442291]
[113.03272247 130.32182312]
[99.05731964 124.87306213]
[93.20409393 129.56237793]
[92.73293304 144.55497742]
[95.63089752 153.41271973]
[92.00413513 160.00903320]
[91.06227875 174.97943115]
[90.12042236 189.94982910]
[89.17856598 204.92022705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[5 97]
[6 96]
[7 94]
[8 93]
[9 38]
[10 37]
[11 36]
[12 35]
[18 29]
[19 28]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[67 89]
[68 88]
[69 87]
[70 86]
[71 85]
[72 84]
[73 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
