%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGACUCCUCUUUCUCCCGGAAGCGGAGCACCGAGCCGGCAAAGGCUUGGGUGUGAGACAGCAGCGGUGGCAGACACCGCAGAAGCAAAGAGCAGUGAGGCUCCUGCAUUCGGGUGGAGCACC\
) } def
/len { sequence length } bind def

/coor [
[51.29038239 464.19174194]
[57.33671951 448.35263062]
[46.65584946 438.03494263]
[46.44216919 422.82281494]
[57.33671951 411.68969727]
[57.33671951 396.68969727]
[57.33671951 381.68969727]
[57.33671951 366.68969727]
[51.35640335 363.40750122]
[46.69545746 358.35519409]
[43.86241531 352.03515625]
[43.18180466 345.09036255]
[44.75728607 338.23901367]
[48.45748520 332.20025635]
[53.92626953 327.61868286]
[60.61683655 324.99557495]
[62.88825607 310.16854858]
[65.15966797 295.34152222]
[67.43109131 280.51449585]
[69.70250702 265.68746948]
[71.97392273 250.86045837]
[66.25310516 237.10830688]
[75.99091339 224.63891602]
[78.26232910 209.81188965]
[80.34574127 194.95727539]
[82.24082184 180.07746887]
[84.13590240 165.19766235]
[86.03098297 150.31785583]
[87.92606354 135.43804932]
[66.81607819 117.33386230]
[64.01628876 89.66521454]
[50.72088623 82.72026825]
[37.42548370 75.77531433]
[24.13008308 68.83036804]
[10.83468342 61.88541794]
[-2.46071720 54.94046783]
[-15.75611782 47.99551773]
[-30.75868416 52.96528244]
[-44.84355545 45.79646301]
[-49.65442657 30.74219322]
[-42.33709335 16.73390388]
[-27.23279953 12.08246326]
[-13.30265522 19.54749107]
[-8.81116772 34.70011902]
[4.48423243 41.64506912]
[17.77963257 48.59001541]
[31.07503319 55.53496552]
[44.37043381 62.47991562]
[57.66583252 69.42486572]
[70.96123505 76.36981964]
[76.60787201 60.76159668]
[89.95108032 47.01902008]
[86.56035614 32.40727997]
[83.16963959 17.79553604]
[69.62652588 9.64938545]
[65.89143372 -5.70719576]
[74.18031311 -19.16342163]
[89.57552338 -22.73595047]
[102.94336700 -14.30526447]
[106.35292816 1.12685883]
[97.78137970 14.40481567]
[101.17210388 29.01655769]
[104.56282043 43.62829971]
[119.41742706 45.71171570]
[126.69696045 32.59651566]
[133.97648621 19.48131561]
[141.25601196 6.36611700]
[148.53555298 -6.74908209]
[155.81507874 -19.86428070]
[152.80184937 -35.62181854]
[163.35185242 -47.70805359]
[179.37202454 -46.85145950]
[188.57305908 -33.70914459]
[183.89671326 -18.36276436]
[168.93028259 -12.58475208]
[161.65074158 0.53044724]
[154.37121582 13.64564610]
[147.09169006 26.76084518]
[139.81216431 39.87604523]
[132.53262329 52.99124527]
[136.97171021 59.03645706]
[149.06227112 50.15850067]
[157.94003296 62.24921799]
[145.84986877 71.12687683]
[150.28894043 77.17208862]
[164.98188782 74.15261078]
[174.97531128 61.60227585]
[191.01782227 61.73453522]
[200.80297852 74.44792938]
[196.82443237 89.98983002]
[182.13420105 96.43782806]
[168.00137329 88.84556580]
[153.30841064 91.86504364]
[151.38891602 104.32077789]
[146.72895813 115.44394684]
[139.83799744 124.67305756]
[131.32949829 131.60850525]
[121.87420654 136.02859497]
[112.15203094 137.89285278]
[102.80587006 137.33312988]
[100.91078949 152.21293640]
[99.01570892 167.09274292]
[97.12062836 181.97254944]
[95.22555542 196.85235596]
[97.25974274 205.87739563]
[93.08935547 212.08331299]
[90.81793976 226.91032410]
[96.37628174 241.72300720]
[86.80094910 253.13186646]
[84.52952576 267.95889282]
[82.25811005 282.78591919]
[79.98669434 297.61294556]
[77.71527863 312.43997192]
[75.44386292 327.26699829]
[86.52779388 348.39129639]
[72.33672333 366.68969727]
[72.33672333 381.68969727]
[72.33672333 396.68969727]
[72.33672333 411.68969727]
[83.23127747 422.82281494]
[83.01759338 438.03494263]
[72.33672333 448.35263062]
[78.38306427 464.19174194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 122]
[5 119]
[6 118]
[7 117]
[8 116]
[16 114]
[17 113]
[18 112]
[19 111]
[20 110]
[21 109]
[23 107]
[24 106]
[25 104]
[26 103]
[27 102]
[28 101]
[29 100]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[52 63]
[53 62]
[54 61]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
