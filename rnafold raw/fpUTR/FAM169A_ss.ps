%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCGCGCCCACUCUGGGUAAAUUUCAGGAGGGCCUACGCGGGGCUGGAGAACUCCACCGGGCUAUGCGAACAGAAUCCUGCGAAGAGG\
) } def
/len { sequence length } bind def

/coor [
[176.61759949 263.52615356]
[182.49951172 245.69387817]
[175.14785767 232.61897278]
[160.78096008 228.86026001]
[153.13908386 215.70516968]
[157.17897034 200.66134644]
[149.82731628 187.58642578]
[142.47566223 174.51152039]
[134.46423340 161.83016968]
[125.81402588 149.57562256]
[117.16382599 137.32107544]
[108.51361847 125.06652069]
[76.97462463 123.10206604]
[63.25661469 87.65654755]
[48.26535797 87.14443207]
[33.27410507 86.63231659]
[18.28284836 86.12020111]
[4.22656202 93.38183594]
[-8.22913074 85.21452332]
[-23.22038651 84.70240784]
[-34.59820557 95.67148590]
[-50.39810181 95.29894257]
[-61.24627686 83.80578613]
[-60.70670319 68.01070404]
[-49.09949493 57.28464890]
[-33.31100845 57.99119186]
[-22.70826912 69.71115112]
[-7.71701384 70.22326660]
[5.26699877 62.92500305]
[18.79496574 71.12894440]
[33.78622055 71.64105988]
[48.77747726 72.15317535]
[63.76873016 72.66529846]
[72.62689972 60.56021881]
[67.60370636 46.42630386]
[62.58050919 32.29238892]
[57.55731583 18.15847588]
[52.53412247 4.02456284]
[38.72189331 -4.13643789]
[36.63341522 -20.04297066]
[47.87078857 -31.49290657]
[63.81365967 -29.70283318]
[72.23202515 -16.04594231]
[66.66803741 -0.99863130]
[71.69123077 13.13528252]
[76.71442413 27.26919556]
[81.73761749 41.40311050]
[86.76081085 55.53702545]
[101.70618439 56.81600952]
[109.05783844 43.74110413]
[116.40949249 30.66619492]
[115.68188477 14.28319740]
[129.64984131 5.69086695]
[143.94433594 13.72825623]
[143.86039734 30.12718964]
[129.48440552 38.01784897]
[122.13274384 51.09275436]
[114.78108978 64.16766357]
[126.89142609 76.53580475]
[131.55961609 91.76206970]
[128.91555786 106.06591797]
[120.76816559 116.41631317]
[129.41836548 128.67086792]
[138.06857300 140.92541504]
[146.71878052 153.17996216]
[151.85993958 155.52461243]
[155.12310791 159.30647278]
[156.27485657 163.50325012]
[155.55058289 167.15986633]
[162.90222168 180.23478699]
[170.25387573 193.30969238]
[185.20669556 197.67445374]
[192.47605896 211.03900146]
[188.22276306 225.26731873]
[195.57441711 238.34222412]
[207.67459106 239.30534363]
[217.65003967 246.00639343]
[223.00770569 256.62762451]
[222.47906494 268.39050293]
[216.31837463 278.28250122]
[222.76063538 291.82861328]
[229.20288086 305.37475586]
[244.17671204 310.43045044]
[251.11489868 324.63034058]
[245.90116882 339.54986572]
[231.62870789 346.33755493]
[216.76513672 340.96636963]
[210.12873840 326.62295532]
[215.65676880 311.81698608]
[209.21450806 298.27087402]
[202.77226257 284.72476196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 75]
[3 74]
[6 71]
[7 70]
[8 69]
[9 65]
[10 64]
[11 63]
[12 62]
[14 33]
[15 32]
[16 31]
[17 30]
[19 28]
[20 27]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[49 58]
[50 57]
[51 56]
[80 91]
[81 90]
[82 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
