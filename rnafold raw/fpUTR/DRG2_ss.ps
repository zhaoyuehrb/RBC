%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGGCUCGCCCGGACUCUGAAUCCUGGAGCACCAGGCGCCCACGAGAACGCUGUUCUCUUUGGCUUCCGGGCGCACGCUACUCUGUCGCCGCCGUCAGACCGGAAUUGCCGGUGCCGCCGCCACCGCUGUCUGUGCGCCCACCUCUGCUGCUACC\
) } def
/len { sequence length } bind def

/coor [
[89.60737610 225.15869141]
[78.71684265 213.70565796]
[79.19811249 197.90869141]
[90.76564026 187.13986206]
[91.06387329 172.14282227]
[91.36210632 157.14579773]
[91.66033936 142.14875793]
[78.77387238 139.06976318]
[67.02928925 132.02091980]
[57.65426636 121.42763519]
[45.24470901 129.85395813]
[32.83514786 138.28027344]
[25.76467133 152.43367004]
[10.88888550 153.18217468]
[-1.52067542 161.60848999]
[-9.12313747 178.35227966]
[-26.63659859 179.00781250]
[-38.87617111 187.67918396]
[-51.11574554 196.35057068]
[-63.35531998 205.02194214]
[-75.59489441 213.69332886]
[-79.69995880 229.20230103]
[-94.44225311 235.53034973]
[-108.51274872 227.82316589]
[-111.11775970 211.99302673]
[-100.25895691 200.18345642]
[-84.26627350 201.45375061]
[-72.02670288 192.78237915]
[-59.78712463 184.11099243]
[-47.54755020 175.43962097]
[-35.30797958 166.76823425]
[-32.94880295 154.86912537]
[-22.77536774 147.55073547]
[-9.94699192 149.19892883]
[2.46256876 140.77261353]
[8.64542961 127.22191620]
[24.40883064 125.87070465]
[36.81838989 117.44438934]
[49.22795105 109.01807404]
[48.78063965 94.02474976]
[35.89081192 86.35321045]
[23.00098801 78.68167877]
[8.79487896 84.63925171]
[-6.02206850 81.13048553]
[-15.81594944 69.70490265]
[-16.98994064 54.88060760]
[-29.87976646 47.20907211]
[-42.76959229 39.53754044]
[-55.65941620 31.86600876]
[-68.54924011 24.19447708]
[-81.43906403 16.52294540]
[-98.14228821 13.61800194]
[-99.97478485 -3.23662090]
[-84.28613281 -9.66332531]
[-73.76753235 3.63311982]
[-60.87770844 11.30465221]
[-47.98788452 18.97618484]
[-35.09806061 26.64771652]
[-22.20823479 34.31924820]
[-9.31840897 41.99077988]
[4.27161741 35.95346451]
[18.98480225 39.11355591]
[29.13464355 50.46406555]
[30.67252159 65.79185486]
[43.56234741 73.46338654]
[56.45217133 81.13491821]
[68.40045929 65.80501556]
[85.20615387 56.80152893]
[103.84855652 55.40283585]
[121.11087799 61.54981613]
[134.13516235 73.90673828]
[147.45939636 67.01728058]
[160.78364563 60.12782288]
[174.10787964 53.23836136]
[187.43212891 46.34890366]
[200.75636292 39.45944214]
[214.08059692 32.56998444]
[227.40484619 25.68052483]
[240.72908020 18.79106522]
[245.39779663 6.72927284]
[256.68185425 1.27697587]
[268.26589966 4.87761784]
[281.72445679 -1.74556482]
[291.57638550 -17.27270126]
[309.01141357 -15.49214840]
[317.71615601 -28.70343971]
[332.57528687 -27.67613220]
[345.89950562 -34.56558990]
[354.60424805 -47.77688217]
[369.46337891 -46.74957275]
[382.78762817 -53.63903427]
[391.49237061 -66.85032654]
[406.35150146 -65.82301331]
[419.67572021 -72.71247864]
[428.38046265 -85.92376709]
[443.23959351 -84.89646149]
[456.56384277 -91.78591919]
[459.43331909 -96.27681732]
[463.35992432 -98.91799927]
[467.44680786 -99.61833954]
[470.89419556 -98.66199493]
[484.60543823 -104.74487305]
[498.31668091 -110.82775116]
[512.02795410 -116.91062927]
[525.73919678 -122.99351501]
[532.82684326 -137.38604736]
[548.52862549 -140.67742920]
[560.79949951 -130.34277344]
[560.22631836 -114.30996704]
[547.24877930 -104.87799072]
[531.82208252 -109.28225708]
[518.11083984 -103.19937134]
[504.39956665 -97.11649323]
[490.68832397 -91.03361511]
[476.97705078 -84.95073700]
[463.45330811 -78.46167755]
[450.12905884 -71.57221985]
[442.37738037 -58.85371017]
[426.56518555 -59.38823700]
[413.24096680 -52.49877930]
[405.48925781 -39.78026581]
[389.67709351 -40.31479645]
[376.35284424 -33.42533493]
[368.60116577 -20.70682526]
[352.78897095 -21.24135208]
[339.46475220 -14.35189247]
[331.71304321 -1.63338184]
[315.90087891 -2.16790938]
[311.91369629 9.28882504]
[300.82330322 15.12502193]
[288.34765625 11.71301842]
[274.88906860 18.33620071]
[265.96127319 33.41749954]
[247.61853027 32.11530685]
[234.29429626 39.00476456]
[220.97006226 45.89422226]
[207.64581299 52.78368378]
[194.32157898 59.67314148]
[180.99734497 66.56259918]
[167.67309570 73.45206451]
[154.34886169 80.34152222]
[141.02462769 87.23097992]
[142.60305786 94.42798615]
[142.92863464 101.78885651]
[141.99179077 109.09711456]
[139.82006836 116.13785553]
[136.47732544 122.70401764]
[132.06187439 128.60250854]
[126.70356750 133.65986633]
[120.55997467 137.72737122]
[113.81175995 140.68540955]
[106.65737915 142.44699097]
[106.35914612 157.44403076]
[106.06091309 172.44105530]
[105.76268005 187.43809509]
[116.89293671 198.65829468]
[116.74578857 214.46189880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 155]
[5 154]
[6 153]
[7 152]
[10 39]
[11 38]
[12 37]
[14 35]
[15 34]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[40 66]
[41 65]
[42 64]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[71 142]
[72 141]
[73 140]
[74 139]
[75 138]
[76 137]
[77 136]
[78 135]
[79 134]
[82 132]
[83 131]
[85 128]
[87 126]
[88 125]
[90 123]
[91 122]
[93 120]
[94 119]
[96 117]
[97 116]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
