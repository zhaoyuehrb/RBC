%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCAACAUGGCGGCCUUCUGUGCCCGCCCCCUCCGCUAACGGGCACGUUACUCCGUCCGAACGCAGUAGACGAAGGCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[62.41991806 270.10385132]
[61.87208939 255.11386108]
[61.32425690 240.12387085]
[49.95044708 249.90325928]
[34.95829773 250.38850403]
[22.97589302 241.36509705]
[19.30069733 226.82229614]
[25.55752754 213.18954468]
[38.98021698 206.49391174]
[53.63454437 209.69557190]
[63.04108810 221.37709045]
[66.30254364 206.73596191]
[61.51764297 192.63084412]
[72.07041168 180.84315491]
[75.33186340 166.20202637]
[78.59331512 151.56088257]
[81.85476685 136.91973877]
[85.11621857 122.27860260]
[88.37767029 107.63746643]
[85.11621857 92.99633026]
[75.94861603 81.12387848]
[66.78100586 69.25143433]
[57.61340332 57.37898636]
[48.44579697 45.50653839]
[39.27819061 33.63409042]
[30.11058426 21.76164436]
[20.94297981 9.88919640]
[6.15576315 13.53036880]
[-8.83288193 10.83585167]
[-21.42608070 2.27248788]
[-29.44198799 -10.67606926]
[-31.49179840 -25.76640320]
[-27.22036934 -40.38402176]
[-17.36775398 -51.99633408]
[-3.64097333 -58.59143829]
[11.58172131 -59.02669525]
[25.66290855 -53.22668457]
[36.16293335 -42.19630432]
[41.26260757 -27.84662819]
[40.07838058 -12.66382599]
[32.81542587 0.72159094]
[41.98303223 12.59403801]
[51.15063858 24.46648598]
[60.31824493 36.33893204]
[69.48584747 48.21138000]
[78.65345764 60.08382797]
[87.82106018 71.95627594]
[96.98866272 83.82872009]
[111.42920685 87.88714600]
[125.43944550 82.52867889]
[139.44969177 77.17021942]
[153.45993042 71.81175232]
[167.47016907 66.45329285]
[177.59574890 54.29667664]
[192.24723816 56.97686768]
[206.25747681 51.61840439]
[220.26771545 46.25994110]
[230.17782593 33.19388962]
[246.41238403 35.51145554]
[252.27067566 50.82852173]
[241.72618103 63.38820648]
[225.62617493 60.27018356]
[211.61593628 65.62864685]
[197.60569763 70.98710632]
[188.48222351 82.76044464]
[172.82864380 80.46353149]
[158.81838989 85.82199097]
[144.80815125 91.18045807]
[130.79791260 96.53891754]
[116.78767395 101.89738464]
[113.13034821 107.31975555]
[108.13997650 110.35456085]
[103.01880646 110.89891815]
[99.75735474 125.54005432]
[96.49590302 140.18119812]
[93.23445129 154.82232666]
[89.97299957 169.46347046]
[86.71154785 184.10461426]
[91.26316833 199.25694275]
[80.94367981 209.99740601]
[77.68222809 224.63854980]
[76.31424713 239.57603455]
[76.86208344 254.56602478]
[77.40991211 269.55603027]
[80.30261993 288.72064209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[3 82]
[11 81]
[12 80]
[14 78]
[15 77]
[16 76]
[17 75]
[18 74]
[19 73]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
