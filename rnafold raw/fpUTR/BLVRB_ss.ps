%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGUGGCCCUUCGAGCCAGCUCCGCCCCGUUGUUCCUGGCUUGAGUAGGGCAGAGAGCACCGCCCAGCAGCCAGUGGGUUCCCGCGCGUGCCGAGACUCUGAGGCCUUGCACCCCCACGAUCCCGUACG\
) } def
/len { sequence length } bind def

/coor [
[125.49034119 216.00733948]
[123.69602966 201.11505127]
[121.36727905 186.29692078]
[118.50710297 171.57212830]
[115.64693451 156.84735107]
[112.78675842 142.12255859]
[109.92658997 127.39776611]
[103.68432617 123.24034119]
[95.36927032 135.72471619]
[82.88502502 127.40946198]
[91.19980621 114.92549133]
[84.95754242 110.76806641]
[70.26811218 113.80458832]
[55.57867432 116.84111786]
[40.88924026 119.87763977]
[26.19980431 122.91416931]
[11.51036835 125.95069122]
[-3.17906737 128.98721313]
[-17.86850357 132.02374268]
[-32.55793762 135.06027222]
[-39.02182388 149.04327393]
[-52.32442474 156.45233154]
[-67.26230621 154.62922668]
[-78.13219452 144.48114014]
[-92.82163239 147.51766968]
[-101.29277039 160.85990906]
[-116.73515320 164.22270203]
[-129.98707581 155.61097717]
[-133.18643188 140.13389587]
[-124.43506622 126.97376251]
[-108.92503357 123.93823242]
[-95.85815430 132.82823181]
[-81.16871643 129.79171753]
[-75.21331024 116.16559601]
[-62.22257996 108.56922150]
[-47.07265472 110.09672546]
[-35.59446335 120.37083435]
[-20.90502739 117.33430481]
[-6.21559286 114.29778290]
[8.47384262 111.26125336]
[23.16327858 108.22473145]
[37.85271454 105.18820953]
[52.54214859 102.15167999]
[67.23158264 99.11515808]
[81.92102051 96.07862854]
[94.50434113 87.91407013]
[103.26281738 75.73667145]
[112.02128601 63.55926514]
[120.77976227 51.38186264]
[129.53823853 39.20446014]
[138.29670715 27.02705574]
[147.05517578 14.84965324]
[155.37002563 2.36513233]
[163.23049927 -10.41035271]
[171.09097290 -23.18583870]
[178.95144653 -35.96132278]
[177.70327759 -58.28317642]
[196.84996033 -68.29660797]
[203.45065308 -81.76622772]
[210.05136108 -95.23584747]
[216.65206909 -108.70547485]
[223.09078979 -122.25327301]
[229.36659241 -135.87730408]
[235.64241028 -149.50132751]
[231.25068665 -159.58879089]
[233.15299988 -170.20080566]
[240.46946716 -177.81591797]
[250.56573486 -180.04550171]
[250.06961060 -195.85891724]
[262.80691528 -203.57971191]
[269.72869873 -216.88717651]
[276.65051270 -230.19464111]
[283.57229614 -243.50212097]
[282.31134033 -259.85272217]
[295.99197388 -268.89553833]
[310.54071045 -261.32809448]
[310.99108887 -244.93513489]
[296.87976074 -236.58032227]
[289.95797729 -223.27284241]
[283.03616333 -209.96537781]
[276.11437988 -196.65791321]
[277.10559082 -181.79632568]
[263.87319946 -173.12370300]
[266.23181152 -153.99073792]
[249.26643372 -143.22552490]
[242.99063110 -129.60148621]
[236.71481323 -115.97746277]
[236.77426147 -108.51193237]
[230.12168884 -102.10477448]
[223.52098083 -88.63514709]
[216.92028809 -75.16552734]
[210.31958008 -61.69590378]
[214.50883484 -54.76849365]
[215.57301331 -46.64760208]
[213.25724792 -38.69277954]
[207.87898254 -32.26668167]
[200.28675842 -28.50170898]
[191.72692871 -28.10085297]
[183.86645508 -15.32536888]
[176.00598145 -2.54988337]
[168.14552307 10.22560215]
[168.65830994 13.80934620]
[167.39645386 17.82031250]
[164.17886353 21.39128304]
[159.23258972 23.60812569]
[150.47410583 35.78553009]
[141.71563721 47.96293259]
[132.95716858 60.14033508]
[124.19869232 72.31774139]
[115.44021606 84.49514008]
[106.68174744 96.67254639]
[112.63573456 97.26693726]
[118.37950897 100.66213226]
[122.89243317 106.70779419]
[125.23577881 114.92403412]
[124.65137482 124.53759003]
[127.51155090 139.26237488]
[130.37171936 153.98716736]
[133.23188782 168.71195984]
[136.09207153 183.43675232]
[139.65711975 187.51969910]
[141.08551025 192.10929871]
[140.55346680 196.28027344]
[138.58831787 199.32073975]
[140.38264465 214.21302795]
[152.96771240 223.77291870]
[155.02401733 239.44287109]
[145.33160400 251.92616272]
[129.64079285 253.81668091]
[117.26067352 243.99282837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 120]
[4 119]
[5 118]
[6 117]
[7 116]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[24 33]
[25 32]
[46 111]
[47 110]
[48 109]
[49 108]
[50 107]
[51 106]
[52 105]
[53 101]
[54 100]
[55 99]
[56 98]
[58 92]
[59 91]
[60 90]
[61 89]
[62 87]
[63 86]
[64 85]
[68 83]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
