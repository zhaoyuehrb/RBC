%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCGCGCCCCCCGCGCACGGACCCCCAUUACACUCGCGUCCCAGGCGGGGUCGACCCAGACGAGCCACGGGGCGGCGCAGAGCCCCACUCGCAGGGCGGCCGGGACCCACGCGCGUGGGUCCACGCAACAACCUAUAGGUGACAAAACACUCAGGAAGCCGUC\
) } def
/len { sequence length } bind def

/coor [
[121.30229187 180.16320801]
[120.63943481 195.14855957]
[110.61730194 206.30906677]
[95.78929901 208.57411194]
[82.89231873 200.91462708]
[77.78589630 186.81008911]
[71.20465851 200.28923035]
[64.62342072 213.76838684]
[58.04218292 227.24752808]
[61.87818527 242.82522583]
[51.97698975 255.44845581]
[35.93394089 255.43374634]
[26.05589867 242.79238892]
[29.92045021 227.22175598]
[44.56304169 220.66629028]
[51.14427567 207.18714905]
[57.72551346 193.70800781]
[64.30674744 180.22885132]
[69.98136902 166.34365845]
[74.72448730 152.11331177]
[79.46759796 137.88296509]
[84.21071625 123.65261078]
[79.99978638 117.44631958]
[69.01491547 127.66065216]
[58.03005219 137.87498474]
[52.56897736 151.84555054]
[39.22207642 158.69100952]
[24.68969917 154.97480774]
[16.26733589 142.56257629]
[18.18314171 127.68541718]
[29.47535515 117.81192017]
[44.47672272 117.89936066]
[58.02732468 111.46654510]
[71.57792664 105.03372955]
[67.36700439 98.82743835]
[52.39117050 97.97625732]
[37.41534042 97.12507629]
[22.43951035 96.27389526]
[7.46368027 95.42272186]
[-3.11902857 106.93533325]
[-18.63260269 108.90079498]
[-31.75200462 100.39108276]
[-36.28265762 85.42420959]
[-30.08532143 71.06708527]
[-16.08619118 64.09870148]
[-0.89522874 67.80931091]
[8.31485939 80.44689178]
[23.29068947 81.29806519]
[38.26652145 82.14924622]
[53.24235153 83.00042725]
[68.21817780 83.85160828]
[77.88414001 72.38124084]
[74.50679779 57.76639557]
[71.12945557 43.15155792]
[67.75212097 28.53671455]
[62.75013351 20.83963966]
[64.45192719 13.61339283]
[61.35176849 -1.06274474]
[58.25160599 -15.73888206]
[47.82917786 -27.64197159]
[52.76898193 -41.69357681]
[47.91355515 -49.48393250]
[49.75179291 -56.67667770]
[46.92992020 -71.40885925]
[44.10804749 -86.14102936]
[41.28617477 -100.87320709]
[32.77870178 -105.11773682]
[27.28112793 -112.70484924]
[25.93760872 -121.83805084]
[28.92678833 -130.42617798]
[35.44979477 -136.56219482]
[33.46844864 -151.43077087]
[31.48710442 -166.29933167]
[29.50576019 -181.16789246]
[27.52441597 -196.03646851]
[13.81252766 -203.30033875]
[7.01922512 -217.25134277]
[9.75667000 -232.52503967]
[20.97225952 -243.24839783]
[36.35337067 -245.29803467]
[49.98565292 -237.88584900]
[56.62721252 -223.86196899]
[53.72423935 -208.61885071]
[42.39298248 -198.01780701]
[44.37432480 -183.14924622]
[46.35567093 -168.28067017]
[48.33701706 -153.41210938]
[50.31835938 -138.54354858]
[64.32536316 -123.41760254]
[56.01834869 -103.69508362]
[58.84022522 -88.96290588]
[61.66209793 -74.23072815]
[64.48397064 -59.49855042]
[67.44512177 -44.79373550]
[77.64580536 -33.94038391]
[72.92774200 -18.83904266]
[76.02790070 -4.16290617]
[79.12806702 10.51323128]
[82.36695862 25.15937614]
[85.74430084 39.77421570]
[89.12163544 54.38905716]
[92.49897766 69.00389862]
[139.57681274 67.80232239]
[153.61747742 62.52410889]
[167.60758972 57.11326981]
[181.54585266 51.57029343]
[195.48413086 46.02731705]
[209.42239380 40.48433685]
[223.36067200 34.94136047]
[237.29893494 29.39838409]
[251.23721313 23.85540581]
[265.17547607 18.31242752]
[274.91220093 5.11667061]
[291.17596436 7.21968412]
[297.23596191 22.45806885]
[286.85821533 35.15587997]
[270.71844482 32.25069809]
[256.78018188 37.79367828]
[242.84191895 43.33665466]
[228.90364075 48.87963104]
[214.96537781 54.42260742]
[201.02709961 59.96558762]
[187.08883667 65.50856781]
[173.15055847 71.05154419]
[168.07478333 76.46922302]
[158.89570618 76.56478119]
[144.85502625 81.84299469]
[143.23558044 89.16606903]
[157.53900146 84.64806366]
[168.60333252 94.77626038]
[165.36412048 109.42234039]
[151.06060791 113.94003296]
[139.99668884 103.81221008]
[138.37724304 111.13528442]
[148.88299561 121.84177399]
[159.38876343 132.54826355]
[170.30870056 132.02424622]
[179.51243591 137.50566101]
[184.06211853 146.96015930]
[182.66276550 157.13650513]
[192.75585938 168.23287964]
[202.84895325 179.32925415]
[212.94203186 190.42562866]
[228.73851013 190.92265320]
[239.49578857 202.50093079]
[238.83178711 218.29125977]
[227.14042664 228.92553711]
[211.35800171 228.09461975]
[200.84793091 216.29148865]
[201.84565735 200.51872253]
[191.75257874 189.42234802]
[181.65948486 178.32595825]
[171.56639099 167.22958374]
[152.77975464 162.76208496]
[148.68226624 143.05403137]
[138.17651367 132.34753418]
[127.67074585 121.64104462]
[120.36332703 123.32971954]
[115.98106384 137.67530823]
[105.74848175 126.70705414]
[98.44106293 128.39572144]
[93.69795227 142.62606812]
[88.95483398 156.85643005]
[84.21172333 171.08677673]
[97.73462677 164.59594727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 18]
[7 17]
[8 16]
[9 15]
[19 164]
[20 163]
[21 162]
[22 161]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[52 102]
[53 101]
[54 100]
[55 99]
[57 98]
[58 97]
[59 96]
[61 94]
[63 93]
[64 92]
[65 91]
[66 90]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
[103 127]
[104 126]
[105 124]
[106 123]
[107 122]
[108 121]
[109 120]
[110 119]
[111 118]
[112 117]
[134 157]
[135 156]
[136 155]
[140 153]
[141 152]
[142 151]
[143 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
