%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGCCUGAGAAUCAGAGAAACCUUCUCUGGGGCUGCAAGGACCUGAGCUCAGCUUCCGCCCCAGCCAGGGAAGCGGCAGGGGAAAGCACCGGCUCCAGGCCAGCGUGGGCCGCUCUCUCGCUCGGUGCCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[165.61628723 197.97418213]
[161.07141113 190.97384644]
[159.69856262 182.64535522]
[161.80276489 174.37329102]
[151.87545776 163.12835693]
[141.94816589 151.88342285]
[132.02085876 140.63847351]
[122.09355164 129.39353943]
[112.16624451 118.14860535]
[117.27231598 132.25279236]
[110.30310059 145.53549194]
[95.79594421 149.34893799]
[83.19579315 141.21037292]
[80.70603943 126.41844177]
[89.94725037 114.60371399]
[77.01374054 122.20137024]
[64.08023071 129.79902649]
[51.14672089 137.39668274]
[38.21321106 144.99432373]
[25.27970123 152.59197998]
[12.34619236 160.18963623]
[1.75168741 173.42567444]
[-13.89993572 166.90931702]
[-11.97103119 150.06544495]
[4.74853945 147.25611877]
[17.68204880 139.65847778]
[30.61555862 132.06082153]
[43.54906845 124.46316528]
[56.48257828 116.86551666]
[69.41608429 109.26786041]
[82.34959412 101.67020416]
[79.81909943 86.88519287]
[65.09505463 84.02120972]
[50.37100220 81.15722656]
[35.61553192 78.45981598]
[20.83051872 75.92932129]
[5.64471388 82.11990356]
[-7.14171124 71.85153961]
[-4.37517834 55.68743134]
[11.09834003 50.25583267]
[23.36101532 61.14430618]
[38.14602661 63.67480469]
[45.33014297 61.68595505]
[53.23498535 66.43318176]
[67.95903778 69.29716492]
[82.68308258 72.16114807]
[94.77835846 63.28960419]
[96.46985626 48.38528061]
[98.16135406 33.48095703]
[99.85285187 18.57663536]
[101.54435730 3.67231321]
[90.40719604 -9.76538658]
[92.35394287 -26.77069092]
[105.70432281 -36.93566132]
[107.05856323 -51.87440491]
[108.41279602 -66.81314850]
[109.76703644 -81.75189209]
[102.26431274 -89.77288055]
[100.49848175 -100.38941956]
[104.82022095 -110.00457001]
[113.55870819 -115.49677277]
[115.58660889 -130.35905457]
[117.61450195 -145.22134399]
[119.64239502 -160.08363342]
[113.84181976 -174.80314636]
[123.22872162 -186.36753845]
[125.25662231 -201.22982788]
[127.28451538 -216.09211731]
[115.98651123 -226.72860718]
[113.13128662 -241.98072815]
[119.81673431 -255.98374939]
[133.47215271 -263.35321045]
[148.84677124 -261.25540161]
[160.02873230 -250.49699402]
[162.71833801 -235.21478271]
[155.88137817 -221.28512573]
[142.14680481 -214.06422424]
[140.11891174 -199.20193481]
[138.09101868 -184.33964539]
[144.03663635 -170.68319702]
[134.50468445 -158.05574036]
[132.47679138 -143.19345093]
[130.44889832 -128.33116150]
[128.42100525 -113.46887970]
[137.08428955 -96.23728180]
[124.70578003 -80.39765167]
[123.35153961 -65.45890808]
[121.99730682 -50.52016830]
[120.64306641 -35.58142471]
[130.22640991 -26.89522171]
[133.07385254 -14.07852364]
[127.91922760 -1.79166675]
[116.44867706 5.36381149]
[114.75717926 20.26813507]
[113.06568146 35.17245865]
[111.37418365 50.07677841]
[109.68268585 64.98110199]
[123.41118622 108.22129822]
[133.33848572 119.46623993]
[143.26579285 130.71116638]
[153.19309998 141.95611572]
[163.12040710 153.20104980]
[173.04771423 164.44598389]
[194.76258850 169.79962158]
[198.67613220 191.05545044]
[209.57810974 201.35820007]
[220.48010254 211.66094971]
[231.49781799 221.83984375]
[242.62985229 231.89360046]
[253.76188660 241.94734192]
[264.89392090 252.00108337]
[276.02597046 262.05484009]
[284.56884766 265.52490234]
[287.29269409 272.46377563]
[298.19467163 282.76654053]
[309.09664917 293.06927490]
[324.04779053 289.26568604]
[338.67459106 294.17077637]
[348.30972290 306.21932983]
[349.87866211 321.56671143]
[342.88070679 335.31561279]
[329.54895020 343.07882690]
[314.13745117 342.37915039]
[301.56399536 333.43981934]
[295.84072876 319.11334229]
[298.79388428 303.97128296]
[287.89190674 293.66851807]
[276.98992920 283.36575317]
[265.97222900 273.18685913]
[254.84017944 263.13311768]
[243.70814514 253.07937622]
[232.57611084 243.02563477]
[221.44407654 232.97189331]
[214.31166077 230.80490112]
[210.17733765 222.56294250]
[199.27536011 212.26017761]
[188.37338257 201.95742798]
[180.54678345 203.89341736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 103]
[5 102]
[6 101]
[7 100]
[8 99]
[9 98]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[32 46]
[33 45]
[34 44]
[35 42]
[36 41]
[47 97]
[48 96]
[49 95]
[50 94]
[51 93]
[54 89]
[55 88]
[56 87]
[57 86]
[61 84]
[62 83]
[63 82]
[64 81]
[66 79]
[67 78]
[68 77]
[105 137]
[106 136]
[107 135]
[108 133]
[109 132]
[110 131]
[111 130]
[112 129]
[114 128]
[115 127]
[116 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
