%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGACAGCUCUGCAGGGAAGUCUGUGACAACCUGGCCAGACAUAGGGCUCACGAUCUGAUCAGAGUC\
) } def
/len { sequence length } bind def

/coor [
[71.46195984 294.65887451]
[58.60712433 303.18862915]
[43.18109512 303.39163208]
[30.10626602 295.20306396]
[23.55476570 281.23590088]
[25.61715508 265.94702148]
[35.63533401 254.21502686]
[50.41253662 249.78356934]
[54.45948792 235.33981323]
[58.50643921 220.89605713]
[62.55339050 206.45230103]
[66.60034180 192.00852966]
[70.64729309 177.56477356]
[61.27669144 166.01792908]
[60.49290085 150.98962402]
[68.80580139 138.23231506]
[83.20304108 132.75273132]
[87.24999237 118.30897522]
[91.29694366 103.86521912]
[89.69184875 98.48505402]
[91.41764832 92.62624359]
[96.42494965 88.32394409]
[101.76857758 74.30803680]
[101.94290161 64.83076477]
[107.68760681 59.78501129]
[113.66362000 46.02684021]
[119.63963318 32.26867294]
[125.61565399 18.51050186]
[119.20594788 6.43827248]
[121.00244904 -6.91308165]
[130.10559082 -16.57534790]
[142.94036865 -19.08789444]
[149.53637695 -32.55981064]
[156.13240051 -46.03172684]
[162.72842407 -59.50364304]
[155.34567261 -73.15188599]
[157.42851257 -88.52854156]
[168.17604065 -99.72096252]
[183.45561218 -102.42543793]
[197.39193726 -95.60203552]
[204.62619019 -81.87450409]
[202.37666321 -66.52135468]
[191.50836182 -55.44618225]
[176.20034790 -52.90761948]
[169.60432434 -39.43570709]
[163.00830078 -25.96378899]
[156.41227722 -12.49187469]
[162.57432556 2.99162030]
[155.64251709 18.51184464]
[139.37382507 24.48651886]
[133.39781189 38.24468994]
[127.42179108 52.00285721]
[121.44577026 65.76102448]
[115.78448486 79.65166473]
[110.44085693 93.66757202]
[105.74069977 107.91217041]
[101.69374847 122.35592651]
[97.64679718 136.79968262]
[107.10097504 148.96211243]
[107.57518005 164.18145752]
[99.09703827 176.61468506]
[85.09104919 181.61172485]
[81.04409790 196.05548096]
[76.99714661 210.49925232]
[72.95019531 224.94300842]
[68.90324402 239.38676453]
[64.85629272 253.83052063]
[75.17970276 265.29486084]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[17 58]
[18 57]
[19 56]
[22 55]
[23 54]
[25 53]
[26 52]
[27 51]
[28 50]
[32 47]
[33 46]
[34 45]
[35 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
