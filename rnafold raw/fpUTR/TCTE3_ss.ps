%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGGCGGGCACUUCCUACCGUACGAGGCGCAGGUGGGAGACUUCCGCCCUCGCGGGACUGGCUAGGGCGUUUGACCGCCGGCGGUGAAGGGGAGGCGGUGGGCGUCUUGGAGAACAGAGCGAG\
) } def
/len { sequence length } bind def

/coor [
[12.67178535 165.64807129]
[1.21927476 175.33517456]
[-13.54238701 172.67184448]
[-20.88746071 159.59324646]
[-15.47931957 145.60246277]
[-30.18190765 148.57464600]
[-44.88449478 151.54684448]
[-59.58708191 154.51902771]
[-74.28967285 157.49122620]
[-88.99225616 160.46342468]
[-95.51729584 174.41798401]
[-108.85219574 181.76875305]
[-123.78195953 179.88026428]
[-134.60731506 169.68470764]
[-149.30990601 172.65689087]
[-164.01249695 175.62908936]
[-178.71507263 178.60127258]
[-193.41766357 181.57347107]
[-208.12025452 184.54566956]
[-222.82284546 187.51785278]
[-237.52542114 190.49005127]
[-241.24176025 205.29382324]
[-251.01977539 217.01359558]
[-264.91802979 223.32240295]
[-280.17703247 222.96763611]
[-293.76708984 216.01972961]
[-302.98986816 203.85818481]
[-306.01419067 188.89770508]
[-302.23959351 174.10868835]
[-292.41549683 162.42750549]
[-278.49249268 156.17346191]
[-263.23501587 156.58831787]
[-249.67243958 163.58969116]
[-240.49761963 175.78746033]
[-225.79502869 172.81526184]
[-211.09243774 169.84307861]
[-196.38986206 166.87088013]
[-181.68727112 163.89869690]
[-166.98468018 160.92649841]
[-152.28208923 157.95429993]
[-137.57951355 154.98211670]
[-131.56451416 141.38220215]
[-118.54064178 133.84277344]
[-103.39755249 135.43656921]
[-91.96444702 145.76083374]
[-77.26186371 142.78863525]
[-62.55927277 139.81645203]
[-47.85668564 136.84425354]
[-33.15409851 133.87207031]
[-18.45151138 130.89987183]
[-3.96262479 127.01758575]
[10.25628567 122.24028778]
[24.47519493 117.46298218]
[38.69410706 112.68568420]
[52.91301727 107.90838623]
[52.77276993 92.97750092]
[57.25122070 78.73339844]
[65.91038513 66.56910706]
[77.90341949 57.67426682]
[92.05744171 52.91876984]
[106.98822021 52.76768494]
[121.23557281 57.23579788]
[133.40614319 65.88613129]
[142.30967712 77.87270355]
[156.52859497 73.09540558]
[170.74749756 68.31810760]
[184.96641541 63.54080582]
[199.18531799 58.76350403]
[213.40423584 53.98620605]
[227.62313843 49.20890427]
[241.84205627 44.43160629]
[256.06097412 39.65430450]
[270.27987671 34.87700653]
[284.49877930 30.09970665]
[291.73205566 24.33903122]
[299.13211060 25.38535309]
[313.46569824 20.96402550]
[327.79931641 16.54269791]
[342.13290405 12.12137032]
[356.46649170 7.70004225]
[370.80007935 3.27871466]
[378.22735596 -10.41337013]
[392.82666016 -14.69303799]
[405.83419800 -7.52787638]
[410.72183228 -22.25508118]
[423.35205078 -31.26937485]
[438.86822510 -31.10457611]
[451.30413818 -21.82405472]
[455.87786865 -6.99636030]
[450.83074951 7.67695713]
[438.10351562 16.55370712]
[422.58999634 16.22059631]
[410.25552368 6.80571556]
[403.54446411 20.05325699]
[389.07113647 24.74129868]
[375.22140503 17.61230659]
[360.88781738 22.03363419]
[346.55422974 26.45496178]
[332.22064209 30.87628937]
[317.88702393 35.29761887]
[303.55343628 39.71894455]
[289.27609253 44.31861496]
[275.05718994 49.09591675]
[260.83825684 53.87321472]
[246.61935425 58.65051651]
[232.40045166 63.42781448]
[218.18153381 68.20511627]
[203.96263123 72.98241425]
[189.74371338 77.75971222]
[175.52481079 82.53701782]
[161.30589294 87.31431580]
[147.08699036 92.09161377]
[147.22723389 107.02249908]
[142.74877930 121.26660156]
[134.08961487 133.43089294]
[122.09658051 142.32572937]
[107.94255829 147.08123779]
[93.01177979 147.23231506]
[78.76442719 142.76420593]
[66.59385681 134.11387634]
[57.69031525 122.12729645]
[43.47140503 126.90459442]
[29.25249481 131.68190002]
[15.03358555 136.45919800]
[0.81467503 141.23649597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 50]
[6 49]
[7 48]
[8 47]
[9 46]
[10 45]
[14 41]
[15 40]
[16 39]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[51 125]
[52 124]
[53 123]
[54 122]
[55 121]
[64 112]
[65 111]
[66 110]
[67 109]
[68 108]
[69 107]
[70 106]
[71 105]
[72 104]
[73 103]
[74 102]
[76 101]
[77 100]
[78 99]
[79 98]
[80 97]
[81 96]
[84 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
