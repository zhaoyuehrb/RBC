%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGCCCCCGUUUCCUGGAGCCCGCGCCGUGCCGCGCUACGCCCGCCGGGAGCCGGGCAGAGCGGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[79.95841217 415.17492676]
[64.88751984 413.19082642]
[51.72562790 405.58602905]
[42.47981644 393.52023315]
[38.56001282 378.83337402]
[40.56395721 363.76510620]
[48.18606186 350.61322021]
[60.26401138 341.38330078]
[74.95600891 337.48281860]
[76.91389465 322.61114502]
[78.87178802 307.73947144]
[80.82968140 292.86779785]
[82.78757477 277.99612427]
[84.74546814 263.12445068]
[86.05280304 248.18153381]
[86.70709991 233.19581604]
[87.36138916 218.21008301]
[88.01567841 203.22436523]
[88.66996765 188.23863220]
[78.44931030 177.46488953]
[78.89938354 162.25790405]
[90.26918030 151.61059570]
[90.92347717 136.62487793]
[91.57776642 121.63914490]
[92.23205566 106.65342712]
[89.33930969 98.83493042]
[93.25590515 91.03249359]
[94.56324005 76.08957672]
[88.05815125 61.66756439]
[96.87525940 49.66307449]
[94.45472717 40.52062988]
[98.57951355 34.10167313]
[100.53740692 19.23000145]
[89.18944550 8.64683628]
[86.26242828 -6.59167576]
[92.88186646 -20.62601471]
[106.50244141 -28.05969238]
[121.88676453 -26.03430939]
[133.11924744 -15.32866287]
[135.88078308 -0.05929560]
[129.10949707 13.90241051]
[115.40908051 21.18789291]
[113.45118713 36.05956650]
[111.81818390 50.97041321]
[118.41678619 64.32360077]
[109.50616455 77.39691162]
[108.19882965 92.33982849]
[107.21778107 107.30771637]
[106.56349182 122.29344177]
[105.90919495 137.27915955]
[105.25490570 152.26489258]
[115.65347290 163.86262512]
[114.77645111 179.05096436]
[103.65569305 188.89292908]
[103.00140381 203.87864685]
[102.34711456 218.86437988]
[101.69281769 233.85009766]
[101.03852844 248.83581543]
[103.96171570 255.33747864]
[103.05033875 261.35519409]
[99.61714172 265.08233643]
[97.65924835 279.95401001]
[95.70135498 294.82568359]
[93.74346161 309.69735718]
[91.78556824 324.56903076]
[89.82767487 339.44070435]
[103.00953674 347.01086426]
[112.28705597 359.05227661]
[116.24549103 373.72875977]
[114.28119659 388.80224609]
[106.69371796 401.97415161]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 58]
[16 57]
[17 56]
[18 55]
[19 54]
[22 51]
[23 50]
[24 49]
[25 48]
[27 47]
[28 46]
[30 44]
[32 43]
[33 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
