%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCCCUGAGACCAGGUCUGGCUCCACAGCUCUGUCCUGCUCUGUGUCUUUCCCUGCUGCUCUCAGGUCCCCUGCAGGCCUUGGCCCCUUUCCUCAUCUGUAGACACACUUGAGUAGCCCAGGCACAGCC\
) } def
/len { sequence length } bind def

/coor [
[115.83000946 131.39562988]
[106.66316223 141.57421875]
[97.96231079 153.79286194]
[89.26145935 166.01150513]
[80.56060028 178.23014832]
[72.30140686 190.75155640]
[64.49438477 203.55976868]
[56.68737030 216.36799622]
[48.88035583 229.17620850]
[49.03123474 245.57466125]
[34.76968384 253.67034912]
[20.76675797 245.13511658]
[21.42746925 228.74928284]
[36.07213593 221.36918640]
[43.87915039 208.56097412]
[51.68616867 195.75274658]
[59.49318695 182.94453430]
[58.96658325 179.36471558]
[60.21071243 175.35093689]
[63.40999603 171.76799011]
[68.34196472 169.52928162]
[77.04281616 157.31065369]
[85.74367523 145.09201050]
[94.44452667 132.87336731]
[91.41031647 126.01454163]
[77.69255829 132.08274841]
[71.62456512 118.36489868]
[85.34189606 112.29687500]
[82.30768585 105.43804169]
[67.41377258 103.65725708]
[52.51985168 101.87647247]
[42.07247162 113.34956360]
[26.86987114 116.45770264]
[12.75775528 110.00574493]
[5.16252327 96.47458649]
[7.00469589 81.06725311]
[17.57592010 69.70816803]
[32.81134415 66.76512909]
[46.85263824 73.36980438]
[54.30063629 86.98255157]
[69.19455719 88.76333618]
[84.08847046 90.54412842]
[98.62253571 86.83452606]
[110.84117126 78.13367462]
[123.05981445 69.43282318]
[135.27845764 60.73196793]
[147.49708557 52.03111267]
[133.08941650 47.85753250]
[125.66113281 34.82600784]
[129.41088867 20.30225563]
[142.21922302 12.49544048]
[156.84658813 15.81815243]
[165.02523804 28.39231873]
[162.13276672 43.11020279]
[175.46530151 36.23680496]
[188.79782104 29.36340904]
[202.13035583 22.49001122]
[206.82913208 10.40993118]
[218.15455627 4.98055792]
[229.74778748 8.64134693]
[243.24011230 2.08717871]
[256.73245239 -4.46698904]
[270.14581299 -11.18124676]
[283.47836304 -18.05464554]
[296.81088257 -24.92804337]
[310.14340210 -31.80144119]
[323.47595215 -38.67483902]
[336.80847168 -45.54823685]
[350.14102173 -52.42163467]
[352.45361328 -69.13014221]
[364.12786865 -81.07482910]
[380.45214844 -83.71643066]
[395.00338745 -76.21488190]
[408.16857910 -83.40361786]
[421.33377075 -90.59235382]
[434.49893188 -97.78108215]
[447.66412354 -104.96981812]
[460.82931519 -112.15855408]
[473.99450684 -119.34729004]
[474.75183105 -133.16525269]
[482.20034790 -144.69938660]
[494.29052734 -150.97430420]
[507.79275513 -150.43508911]
[519.15991211 -143.33108521]
[532.49243164 -150.20448303]
[535.76086426 -165.49668884]
[548.12591553 -175.06948853]
[563.74932861 -174.40287781]
[575.25408936 -163.81163025]
[577.20800781 -148.29660034]
[568.68859863 -135.18351746]
[553.71838379 -130.66397095]
[539.36584473 -136.87194824]
[526.03332520 -129.99855042]
[524.08959961 -113.74328613]
[512.75207520 -101.70497131]
[496.31658936 -98.73203278]
[481.18322754 -106.18210602]
[468.01803589 -98.99337006]
[454.85287476 -91.80463409]
[441.68768311 -84.61589813]
[428.52249146 -77.42716980]
[415.35729980 -70.23843384]
[402.19213867 -63.04969788]
[401.70391846 -49.65415573]
[394.58236694 -38.17005539]
[382.60916138 -31.67473221]
[368.88223267 -31.97121239]
[357.01440430 -39.08910370]
[343.68188477 -32.21570587]
[330.34933472 -25.34230614]
[317.01681519 -18.46890831]
[303.68429565 -11.59551144]
[290.35174561 -4.72211313]
[277.01922607 2.15128469]
[272.47128296 8.07001686]
[263.28662109 9.02533817]
[249.79428101 15.57950592]
[236.30195618 22.13367271]
[227.32373047 37.16362762]
[209.00375366 35.82254028]
[195.67121887 42.69593811]
[182.33869934 49.56933594]
[169.00616455 56.44273376]
[156.19793701 64.24975586]
[143.97930908 72.95060730]
[131.76066589 81.65145874]
[119.54202271 90.35231018]
[107.32338715 99.05316925]
[114.09818268 102.55837250]
[118.79336548 109.96642303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[6 17]
[7 16]
[8 15]
[9 14]
[29 42]
[30 41]
[31 40]
[43 129]
[44 128]
[45 127]
[46 126]
[47 125]
[54 124]
[55 123]
[56 122]
[57 121]
[60 119]
[61 118]
[62 117]
[63 115]
[64 114]
[65 113]
[66 112]
[67 111]
[68 110]
[69 109]
[73 104]
[74 103]
[75 102]
[76 101]
[77 100]
[78 99]
[79 98]
[84 94]
[85 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
