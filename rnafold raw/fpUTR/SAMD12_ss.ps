%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCAGGUUGGUCCUGGAGCAGAUAAGCGCAGAAUAUUUAGGCGAAAGCGAGAGGAAGGGGGGAGCGCGGGGCAGGAGGAGUACCUCGGCCAAGAAAAUUAUGCAUGCGUUAGGGAAGCUCUGAGAGA\
) } def
/len { sequence length } bind def

/coor [
[92.97301483 476.63891602]
[85.00181580 463.51049805]
[84.67881775 448.15499878]
[92.09090424 434.70297241]
[105.24425507 426.77297974]
[104.88179779 411.77734375]
[104.51934052 396.78173828]
[103.97572327 381.79159546]
[103.25102234 366.80911255]
[102.52632141 351.82662964]
[93.74980164 343.41009521]
[93.08042908 330.86578369]
[101.42861176 320.94702148]
[101.06615448 305.95138550]
[100.70369720 290.95578003]
[100.34123993 275.96014404]
[99.97879028 260.96453857]
[99.61633301 245.96891785]
[91.57375336 233.43232727]
[98.97532654 219.44921875]
[98.61286926 204.45359802]
[98.25041199 189.45797729]
[97.70679474 174.46783447]
[96.80111694 159.49519348]
[95.71459961 144.53460693]
[94.62807465 129.57400513]
[93.54155731 114.61341095]
[87.22053528 101.01029205]
[76.48654938 90.53262329]
[65.75257111 80.05495453]
[55.01858521 69.57727814]
[38.66479492 77.22518921]
[20.66586113 78.10322571]
[3.70827556 72.10567474]
[-9.68650055 60.15115356]
[-17.53694725 44.04204941]
[-18.69460678 26.19275665]
[-13.01201820 9.26785374]
[-24.70713425 -0.12492413]
[-36.40224838 -9.51770210]
[-51.90446854 -7.99489641]
[-63.63117599 -17.68711090]
[-64.98740387 -32.47549057]
[-76.68251801 -41.86827087]
[-92.96363068 -43.83228302]
[-99.15357971 -59.01834488]
[-88.88468170 -71.80434418]
[-72.72068787 -69.03713226]
[-67.28974152 -53.56338501]
[-55.59462357 -44.17060852]
[-40.86198807 -46.03742981]
[-28.86767387 -36.67841721]
[-27.00946999 -21.21281815]
[-15.31435585 -11.82003975]
[-3.61924005 -2.42726159]
[6.43356133 -9.34942436]
[17.96182823 -13.40270901]
[30.16369057 -14.29711342]
[42.18830490 -11.96264362]
[53.19519424 -6.55471897]
[62.41299057 1.55614579]
[69.19348145 11.80972004]
[73.05721283 23.49474907]
[73.72735596 35.79828644]
[71.14955902 47.86225891]
[65.49625397 58.84329605]
[76.23023987 69.32096863]
[86.96422577 79.79863739]
[97.69820404 90.27630615]
[99.45444489 86.84370422]
[102.43502808 83.83963776]
[106.51913452 81.60292816]
[117.50316620 71.38769531]
[128.48719788 61.17245483]
[129.75375366 48.27012253]
[139.19801331 39.98678970]
[151.35136414 40.38822174]
[162.57902527 30.44138336]
[173.80668640 20.49454308]
[185.03434753 10.54770279]
[189.71138000 -5.17036057]
[205.72279358 -8.71527576]
[216.59744263 3.55966187]
[211.14840698 19.02705002]
[194.98120117 21.77536392]
[183.75354004 31.72220421]
[172.52587891 41.66904449]
[161.29821777 51.61588287]
[156.70349121 68.50778961]
[138.70243835 72.15648651]
[127.71840668 82.37171936]
[116.73437500 92.58695984]
[130.77134705 87.29890442]
[145.10815430 91.70976257]
[153.74510193 103.97366333]
[153.06774902 118.95835876]
[143.35955811 130.39300537]
[128.68325806 133.49238586]
[115.18063354 126.95944977]
[108.50215149 113.52688599]
[109.58867645 128.48748779]
[110.67519379 143.44807434]
[111.76171875 158.40867615]
[115.53726959 166.84027100]
[112.68927765 173.74313354]
[116.25999451 182.26350403]
[113.24603271 189.09552002]
[113.60848999 204.09114075]
[113.97094727 219.08676147]
[122.03945160 232.69593811]
[114.61195374 245.60646057]
[114.97440338 260.60208130]
[115.33686066 275.59771729]
[115.69931793 290.59332275]
[116.06177521 305.58892822]
[116.42423248 320.58456421]
[126.38717651 336.01477051]
[117.50880432 351.10192871]
[118.23350525 366.08441162]
[118.95820618 381.06689453]
[122.52891541 389.58724976]
[119.51496124 396.41928101]
[119.87741852 411.41488647]
[120.23987579 426.41052246]
[133.76098633 433.69577026]
[141.81433105 446.77398682]
[142.23358154 462.12713623]
[134.90597534 475.62536621]
[121.80259705 483.63766479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 124]
[6 123]
[7 122]
[8 120]
[9 119]
[10 118]
[13 116]
[14 115]
[15 114]
[16 113]
[17 112]
[18 111]
[20 109]
[21 108]
[22 107]
[23 105]
[24 103]
[25 102]
[26 101]
[27 100]
[28 69]
[29 68]
[30 67]
[31 66]
[38 55]
[39 54]
[40 53]
[43 50]
[44 49]
[72 92]
[73 91]
[74 90]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
