%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCCAGCGGCCGCCAGACCCGCCGGAGUUGGACCCGAGCACGCCGCGGAGCCCGGACCCUCCCUCGGACGCUCUGCCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[89.15477753 123.68832397]
[77.27757263 112.74546814]
[62.63643646 116.00691986]
[47.99530029 119.26837158]
[33.35416031 122.52982330]
[25.43995857 127.55969238]
[18.11899757 125.63267517]
[3.36851192 128.35722351]
[-11.38197327 131.08177185]
[-19.44391632 141.34657288]
[-31.95461464 143.20661926]
[-41.99114609 136.19316101]
[-56.83129501 138.37716675]
[-71.67144775 140.56118774]
[-84.19799805 150.22535706]
[-97.91619873 144.42361450]
[-107.14295959 157.25492859]
[-122.75362396 159.72122192]
[-135.48666382 150.35931396]
[-137.78778076 134.72344971]
[-128.29177856 122.09010315]
[-112.63245392 119.95442200]
[-100.10021210 129.58346558]
[-88.63513184 120.07551575]
[-73.85546112 125.72103882]
[-59.01531219 123.53702545]
[-44.17516327 121.35300446]
[-31.17378616 109.71842957]
[-14.10652637 116.33129120]
[0.64395911 113.60674286]
[15.39444447 110.88218689]
[30.09270668 107.88868713]
[44.73384476 104.62723541]
[59.37498474 101.36577606]
[74.01612091 98.10432434]
[78.37547302 85.46949768]
[88.42622375 76.65898132]
[101.52309418 73.99162292]
[114.21910095 78.16945648]
[123.17275238 88.09291077]
[137.92324829 85.36835480]
[146.01586914 80.63088226]
[153.26156616 82.82399750]
[168.10171509 80.63997650]
[177.52993774 68.24052429]
[192.61106873 66.23703003]
[204.37394714 75.30181122]
[219.21409607 73.11779022]
[234.05424500 70.93377686]
[248.89439392 68.74975586]
[263.73455811 66.56574249]
[278.57470703 64.38172150]
[293.41485596 62.19770432]
[308.16534424 59.47315216]
[322.80648804 56.21170044]
[337.44760132 52.95024872]
[352.08874512 49.68879318]
[358.13793945 35.39939499]
[371.44827271 27.42351723]
[386.90167236 28.82804680]
[398.55593872 39.07291031]
[401.92980957 54.21875381]
[395.72598267 68.44168854]
[382.32989502 76.27270508]
[366.89266968 74.70062256]
[355.35021973 64.32993317]
[340.70907593 67.59138489]
[326.06793213 70.85283661]
[311.42678833 74.11428833]
[308.05072021 77.79438782]
[302.24261475 79.23902893]
[295.59887695 77.03785706]
[280.75872803 79.22187042]
[265.91857910 81.40589142]
[251.07841492 83.58990479]
[236.23826599 85.77392578]
[221.39811707 87.95794678]
[206.55796814 90.14196014]
[197.90538025 102.21128082]
[182.88647461 104.63758850]
[170.28573608 95.48012543]
[155.44558716 97.66414642]
[140.64779663 100.11884308]
[125.89730835 102.84339142]
[119.24597168 117.55984497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[7 31]
[8 30]
[9 29]
[12 27]
[13 26]
[14 25]
[16 23]
[40 84]
[41 83]
[43 82]
[44 81]
[47 78]
[48 77]
[49 76]
[50 75]
[51 74]
[52 73]
[53 72]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
