%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACACACAGAGAGGACAGAUGAUGAGAAGACAGAGAGAAGACAGCCGUCUAUAAGCCAAGGAAUGCCAGAGCUCCGGGAACCUGGGAGAGAGGCAGGGACAGAUCCUCCCGCACUGUCUCAGAAGGAACCAGCCCUGCAGACACCUUGAUGUCGGCUUUCAGCCUCCAGAGCUGUGAGACCAUACAUUUCUG\
) } def
/len { sequence length } bind def

/coor [
[122.35579681 523.97662354]
[123.62351990 508.94146729]
[128.74034119 494.74707031]
[137.35737610 482.36123657]
[148.88711548 472.62841797]
[162.54344177 466.21224976]
[159.88557434 451.44961548]
[157.22770691 436.68695068]
[154.56983948 421.92431641]
[151.91198730 407.16165161]
[136.91528320 400.50112915]
[128.75749207 386.07226562]
[130.82278442 369.45867920]
[142.49441528 357.22595215]
[139.59785461 342.50827026]
[136.70127869 327.79061890]
[124.11270142 323.32067871]
[115.30879211 313.13006592]
[112.67251587 299.81332397]
[116.99816895 286.83154297]
[127.25631714 277.61288452]
[124.59844971 262.85025024]
[121.94058228 248.08758545]
[117.65514374 242.05303955]
[119.36123657 233.06451416]
[116.94277191 218.26075745]
[114.52430725 203.45700073]
[102.31964111 194.99639893]
[99.65608978 180.01774597]
[108.61310577 167.27374268]
[106.19464111 152.46998596]
[103.77617645 137.66624451]
[101.35771179 122.86248779]
[101.03259277 137.85896301]
[90.73526001 148.76606750]
[75.78224945 149.95243835]
[63.89383698 140.80555725]
[61.20803070 126.04796600]
[69.11151886 113.29904938]
[83.52576447 109.14128113]
[68.59651184 110.59642792]
[53.66726303 112.05157471]
[38.73801041 113.50672150]
[25.72034454 123.48030853]
[10.67992496 116.94441986]
[9.08904648 100.62261963]
[22.58426666 91.30537415]
[37.28286362 98.57746887]
[52.21211243 97.12232208]
[67.14136505 95.66717529]
[82.07061768 94.21202850]
[67.39363098 91.11587524]
[58.58170700 78.97709656]
[60.18445587 64.06296539]
[71.37437439 54.07368851]
[86.37409210 54.16674805]
[97.43920898 64.29409790]
[98.85623169 79.22893524]
[101.99074554 64.56009674]
[105.12525940 49.89125824]
[108.25977325 35.22241974]
[111.39428711 20.55358124]
[100.49285126 5.07285547]
[104.28897858 -13.15087032]
[119.91994476 -22.65938759]
[122.57780457 -37.42203522]
[125.23567200 -52.18468475]
[123.67536163 -61.19966888]
[128.05795288 -67.16403198]
[130.95452881 -81.88170624]
[126.02773285 -96.91623688]
[136.07708740 -107.90985107]
[138.97366333 -122.62752533]
[141.87023926 -137.34519958]
[140.09100342 -143.73666382]
[141.59133911 -149.23667908]
[145.10626221 -152.48910522]
[148.47789001 -167.10525513]
[140.06704712 -177.63626099]
[139.27333069 -190.89540100]
[146.16297913 -202.02346802]
[158.02726746 -207.07138062]
[161.63514709 -221.63102722]
[165.24301147 -236.19067383]
[155.93907166 -250.99667358]
[160.13238525 -267.62509155]
[174.75749207 -275.91537476]
[178.12913513 -290.53155518]
[181.50076294 -305.14770508]
[184.87240601 -319.76385498]
[180.43504333 -334.95004272]
[190.83512878 -345.61248779]
[194.20675659 -360.22863770]
[197.45994568 -374.87161255]
[200.59445190 -389.54046631]
[199.32688904 -398.60122681]
[203.90031433 -404.42056274]
[207.27195740 -419.03671265]
[210.64358521 -433.65286255]
[214.01522827 -448.26904297]
[204.45819092 -460.64630127]
[205.14469910 -476.26882935]
[215.75059509 -487.76007080]
[231.26811218 -489.69427490]
[244.37033081 -481.15811157]
[248.87080383 -466.18215942]
[242.64453125 -451.83755493]
[228.63137817 -444.89739990]
[225.25975037 -430.28125000]
[221.88810730 -415.66506958]
[218.51647949 -401.04891968]
[215.26329041 -386.40594482]
[212.12878418 -371.73709106]
[213.80789185 -364.52868652]
[208.82292175 -356.85699463]
[205.45127869 -342.24084473]
[210.12980652 -328.10009766]
[199.48855591 -316.39221191]
[196.11692810 -301.77606201]
[192.74528503 -287.15991211]
[189.37365723 -272.54376221]
[197.66909790 -262.67315674]
[198.77690125 -249.63194275]
[192.06874084 -238.16741943]
[179.80265808 -232.58279419]
[176.19477844 -218.02314758]
[172.58691406 -203.46351624]
[181.87696838 -189.45216370]
[178.09117126 -172.72625732]
[163.09405518 -163.73362732]
[159.72241211 -149.11746216]
[156.58790588 -134.44862366]
[153.69132996 -119.73095703]
[150.79476929 -105.01328278]
[155.92874146 -91.03145599]
[145.67219543 -78.98513031]
[142.77561951 -64.26746368]
[139.99832153 -49.52681732]
[137.34045410 -34.76417160]
[134.68258667 -20.00152397]
[143.07951355 -12.25314140]
[146.72492981 -1.29812253]
[144.60121155 10.17252064]
[137.12319946 19.28175545]
[126.06312561 23.68809319]
[122.92861176 38.35693359]
[119.79409790 53.02577209]
[116.65958405 67.69461060]
[113.52507019 82.36344910]
[124.14238739 99.82231140]
[116.16146851 120.44402313]
[118.57992554 135.24777222]
[120.99839020 150.05152893]
[123.41685486 164.85527039]
[135.96388245 174.08619690]
[138.20565796 189.13375854]
[129.32804871 201.03854370]
[131.74652100 215.84230042]
[134.16497803 230.64604187]
[136.70323181 245.42973328]
[139.36109924 260.19238281]
[142.01896667 274.95501709]
[157.34188843 282.10165405]
[165.31134033 296.82455444]
[162.96360779 313.23281860]
[151.41894531 324.89404297]
[154.31552124 339.61172485]
[157.21209717 354.32937622]
[170.12161255 359.18298340]
[178.87481689 369.70056152]
[181.26531982 383.06362915]
[176.77346802 395.75930786]
[166.67462158 404.50381470]
[169.33248901 419.26644897]
[171.99035645 434.02908325]
[174.64822388 448.79174805]
[177.30609131 463.55438232]
[192.34268188 464.80468750]
[206.54298401 469.90505981]
[218.93879700 478.50775146]
[228.68495178 490.02621460]
[235.11694336 503.67507935]
[237.79621887 518.52380371]
[236.54010010 533.55987549]
[231.43424988 547.75823975]
[222.82678223 560.15075684]
[211.30455017 569.89245605]
[197.65319824 576.31915283]
[182.80346680 578.99267578]
[167.76783752 577.73077393]
[153.57147217 572.61944580]
[141.18231201 564.00720215]
[131.44505310 552.48120117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 177]
[7 176]
[8 175]
[9 174]
[10 173]
[14 168]
[15 167]
[16 166]
[21 162]
[22 161]
[23 160]
[25 159]
[26 158]
[27 157]
[30 154]
[31 153]
[32 152]
[33 151]
[40 51]
[41 50]
[42 49]
[43 48]
[58 149]
[59 148]
[60 147]
[61 146]
[62 145]
[65 140]
[66 139]
[67 138]
[69 137]
[70 136]
[72 134]
[73 133]
[74 132]
[77 131]
[78 130]
[82 127]
[83 126]
[84 125]
[87 121]
[88 120]
[89 119]
[90 118]
[92 116]
[93 115]
[94 113]
[95 112]
[97 111]
[98 110]
[99 109]
[100 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
