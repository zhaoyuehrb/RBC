%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUCGGUGCGCGGUGCUCCGUGGCUGCGCUGCUGGAACCCGCUGGAAGAGAUACAGGUUUGCUCUGGAGCAGCAGCAGCUGGCGGAGCA\
) } def
/len { sequence length } bind def

/coor [
[0.67833692 312.72961426]
[-5.82991934 326.24414062]
[-12.33817482 339.75866699]
[-18.84643173 353.27319336]
[-17.08201599 369.57714844]
[-30.47736168 379.03744507]
[-45.25248337 371.92211914]
[-46.20800400 355.55081177]
[-32.36096573 346.76495361]
[-25.85270882 333.25042725]
[-19.34445190 319.73587036]
[-12.83619595 306.22134399]
[-16.53876305 294.56469727]
[-11.05209923 283.18395996]
[1.12760973 278.53164673]
[8.09845734 265.24978638]
[15.06930447 251.96795654]
[22.04015160 238.68611145]
[29.01099968 225.40428162]
[35.98184586 212.12243652]
[42.95269394 198.84059143]
[49.92354202 185.55876160]
[48.18174744 168.18925476]
[63.59825516 158.30326843]
[70.10651398 144.78872681]
[76.61476898 131.27420044]
[83.12302399 117.75966644]
[89.63127899 104.24513245]
[95.90529633 90.62027740]
[101.94320679 76.88916016]
[107.98111725 63.15803528]
[114.01902008 49.42691803]
[120.05693054 35.69579697]
[126.09484100 21.96467590]
[111.85450745 26.67773628]
[97.48548126 22.37297440]
[88.18216705 10.60656452]
[87.30773163 -4.36792564]
[95.17827606 -17.13720512]
[108.94859314 -23.08516884]
[123.64070892 -20.06162453]
[133.94340515 -9.15958214]
[136.13223267 5.67994070]
[145.68560791 -5.88435698]
[155.23898315 -17.44865417]
[164.79235840 -29.01295280]
[174.34573364 -40.57725143]
[173.03713989 -56.09901810]
[182.89036560 -67.69077301]
[197.69606018 -68.84265900]
[207.24945068 -80.40695953]
[216.80282593 -91.97125244]
[226.35620117 -103.53555298]
[228.54484558 -119.78799438]
[243.81494141 -125.76765442]
[256.45791626 -115.32317352]
[253.46775818 -99.19893646]
[237.92050171 -93.98217773]
[228.36711121 -82.41787720]
[218.81373596 -70.85357666]
[209.26036072 -59.28928375]
[210.92356873 -44.53227234]
[201.39982605 -32.66833878]
[185.91003418 -31.02387238]
[176.35665894 -19.45957565]
[166.80328369 -7.89527750]
[157.24990845 3.66902018]
[147.69653320 15.23331833]
[139.82595825 28.00258446]
[133.78805542 41.73370361]
[127.75014496 55.46482468]
[121.71223450 69.19594574]
[115.67432404 82.92706299]
[109.63641357 96.65818787]
[109.51115417 104.90566254]
[103.14581299 110.75338745]
[96.63755798 124.26792145]
[90.12930298 137.78245544]
[83.62104797 151.29698181]
[77.11278534 164.81152344]
[80.63822937 177.36384583]
[74.77156830 188.55343628]
[63.20538330 192.52960205]
[56.23453522 205.81144714]
[49.26368713 219.09327698]
[42.29283905 232.37512207]
[35.32199097 245.65696716]
[28.35114479 258.93881226]
[21.38029861 272.22064209]
[14.40945053 285.50247192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[15 90]
[16 89]
[17 88]
[18 87]
[19 86]
[20 85]
[21 84]
[22 83]
[24 80]
[25 79]
[26 78]
[27 77]
[28 76]
[29 74]
[30 73]
[31 72]
[32 71]
[33 70]
[34 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
