%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCGCCCGCCCCGGCCGGAGCCGCCAUGUAACCGGCGCCGCCCGGAGCCCGAGCCGCGCGGGCCCCAGCGACCCGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[154.62483215 167.09039307]
[151.98774719 164.58406067]
[150.08398438 161.05311584]
[149.27622986 156.73786926]
[138.66961670 146.13127136]
[128.06301880 135.52467346]
[117.25994110 125.11825562]
[106.07530975 115.12305450]
[89.60204315 112.54984283]
[84.01112366 96.84215546]
[72.28365326 87.48980713]
[56.67011261 84.93480682]
[51.54365921 70.95021820]
[39.81618881 61.59786987]
[28.08871651 52.24552536]
[16.36124420 42.89317703]
[0.74770641 40.33817673]
[-4.37874746 26.35358620]
[-16.10622025 17.00123978]
[-27.83369255 7.64889240]
[-43.44722748 5.09389067]
[-48.57368469 -8.89069843]
[-60.30115509 -18.24304581]
[-72.02862549 -27.59539223]
[-83.75610352 -36.94773865]
[-98.33564758 -31.90390587]
[-113.32224274 -35.56526566]
[-123.93371582 -46.76349258]
[-126.78398132 -61.92527008]
[-120.96353149 -76.21253204]
[-108.32965088 -85.06626892]
[-92.91376495 -85.66127777]
[-79.63502502 -77.80770111]
[-72.73063660 -64.01158142]
[-74.40375519 -48.67521286]
[-62.67628098 -39.32286453]
[-50.94880676 -29.97051811]
[-39.22133636 -20.61817169]
[-24.44662666 -18.73211098]
[-18.48134422 -4.07857990]
[-6.75387287 5.27376699]
[4.97359943 14.62611389]
[19.74830818 16.51217270]
[25.71359062 31.16570473]
[37.44106293 40.51805115]
[49.16853333 49.87039948]
[60.89600754 59.22274780]
[75.67071533 61.10880661]
[81.63600159 75.76233673]
[93.36347198 85.11468506]
[105.14942932 84.53715515]
[114.23593140 92.06562042]
[115.85961914 103.75347900]
[124.63257599 107.09313202]
[127.46253204 114.12247467]
[136.10447693 117.78782654]
[138.66961670 124.91806793]
[149.27622986 135.52467346]
[159.88282776 146.13127136]
[171.43336487 155.70127869]
[183.82695007 164.15107727]
[196.22053528 172.60087585]
[208.61412048 181.05067444]
[221.00769043 189.50047302]
[233.40127563 197.95027161]
[246.88240051 190.70335388]
[262.18725586 190.56311035]
[275.79891968 197.56176758]
[284.58953857 210.09107971]
[286.53906250 225.27192688]
[281.19949341 239.61584473]
[269.79788208 249.82670593]
[254.95420837 253.55812073]
[240.07942200 249.95266724]
[228.59164429 239.83882141]
[223.13070679 225.54067993]
[224.95147705 210.34385681]
[212.55789185 201.89405823]
[200.16430664 193.44425964]
[187.77073669 184.99446106]
[175.37715149 176.54466248]
[162.98356628 168.09484863]
[160.49476624 168.75010681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 59]
[5 58]
[6 57]
[7 55]
[8 53]
[10 50]
[11 49]
[13 47]
[14 46]
[15 45]
[16 44]
[18 42]
[19 41]
[20 40]
[22 38]
[23 37]
[24 36]
[25 35]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
