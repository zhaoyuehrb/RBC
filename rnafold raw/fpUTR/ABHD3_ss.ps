%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGAAGCCGCGCUCCGCCAGGCAGGAGACACUGUGGUCGGGAGUAGGCAGCGGCGCCGCGUCCGCUCUCGCCCGCUCUCGCCCGCUCGCCAGCCGGCUCUCCUCCCGCCGCAGGACCCGCGCGCCGCGCUCGGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[96.54982758 123.45700073]
[97.23149872 139.26351929]
[84.58568573 147.13323975]
[77.82053375 160.52102661]
[71.05538177 173.90881348]
[64.29022980 187.29658508]
[63.19462204 196.44842529]
[57.22230911 200.90475464]
[50.16057205 214.13850403]
[48.03816223 230.95907593]
[31.28740120 233.57600403]
[24.13566589 218.20431519]
[36.92683029 207.07676697]
[43.98857117 193.84301758]
[50.90244293 180.53143311]
[57.66759491 167.14366150]
[64.43274689 153.75587463]
[71.19789886 140.36808777]
[70.03234100 125.51915741]
[83.16204834 116.69184875]
[76.53883362 96.57827759]
[88.63092804 79.19426727]
[85.97136688 64.43192291]
[83.31180573 49.66957855]
[80.16045380 35.00435257]
[76.52081299 20.45261383]
[72.88117981 5.90087795]
[69.24153900 -8.65085888]
[65.60190582 -23.20259666]
[61.96226501 -37.75433350]
[45.76697922 -34.65204239]
[31.14878654 -40.85185242]
[22.79330635 -53.63007355]
[22.96456909 -68.28562927]
[30.92679405 -79.85650635]
[24.76474190 -93.53236389]
[18.60268974 -107.20822144]
[12.44063759 -120.88407898]
[-0.28280354 -130.28752136]
[1.54307032 -145.06979370]
[-4.61898232 -158.74565125]
[-10.78103447 -172.42150879]
[-16.94308662 -186.09736633]
[-23.10513878 -199.77322388]
[-29.26719093 -213.44908142]
[-35.42924500 -227.12493896]
[-48.15268326 -236.52838135]
[-46.32681274 -251.31063843]
[-52.48886490 -264.98651123]
[-58.65091705 -278.66235352]
[-65.26650238 -292.12466431]
[-72.32824707 -305.35842896]
[-79.38998413 -318.59216309]
[-86.45172119 -331.82589722]
[-93.51345825 -345.05963135]
[-100.72218323 -358.21389771]
[-108.07700348 -371.28701782]
[-121.11290741 -382.12683105]
[-114.30541229 -397.65405273]
[-97.50050354 -395.41094971]
[-95.00387573 -378.64181519]
[-87.64906311 -365.56869507]
[-81.57894897 -361.24652100]
[-80.27972412 -352.12136841]
[-73.21797943 -338.88763428]
[-66.15624237 -325.65390015]
[-59.09450531 -312.42016602]
[-52.03276825 -299.18643188]
[-48.69973373 -297.81936646]
[-45.88893509 -294.72485352]
[-44.42583847 -290.17877197]
[-44.97505569 -284.82440186]
[-38.81300354 -271.14855957]
[-32.65095139 -257.47268677]
[-20.36826324 -249.04745483]
[-21.75338554 -233.28698730]
[-15.59133339 -219.61112976]
[-9.42928028 -205.93527222]
[-3.26722836 -192.25941467]
[2.89482403 -178.58355713]
[9.05687618 -164.90769958]
[15.21892929 -151.23184204]
[27.50161934 -142.80659485]
[26.11649513 -127.04613495]
[32.27854919 -113.37027740]
[38.44060135 -99.69441986]
[44.60265350 -86.01855469]
[56.61786652 -85.99787140]
[67.89828491 -79.82044983]
[75.31459808 -68.29187775]
[88.46884155 -75.50060272]
[101.62309265 -82.70932770]
[109.66995239 -96.99848938]
[126.06882477 -96.90369415]
[133.94995117 -82.52246094]
[125.20591736 -68.64897156]
[108.83181763 -69.55507660]
[95.67756653 -62.34635162]
[82.52332306 -55.13762665]
[76.51399994 -41.39397049]
[80.15364075 -26.84223175]
[83.79327393 -12.29049587]
[87.43291473 2.26124096]
[91.07254791 16.81297684]
[94.71218872 31.36471367]
[97.61391449 33.49964142]
[99.58985138 37.18369675]
[99.90615082 41.94893646]
[98.07415009 47.01002121]
[100.73371124 61.77236176]
[103.39327240 76.53470612]
[114.57867432 81.30249786]
[121.92978668 90.98785400]
[123.51322174 103.04347229]
[118.91252136 114.29862976]
[127.40172577 126.66525269]
[134.90089417 132.02424622]
[135.93870544 139.40330505]
[144.15028381 151.95599365]
[152.36187744 164.50868225]
[166.39155579 171.82159424]
[166.88403320 186.70805359]
[175.09561157 199.26074219]
[189.12528992 206.57365417]
[189.61776733 221.46011353]
[197.82934570 234.01280212]
[211.56016541 243.95770264]
[205.80497742 259.90493774]
[188.88777161 258.78927612]
[185.27667236 242.22438049]
[177.06507874 229.67169189]
[163.62275696 223.25663757]
[162.54292297 207.47232056]
[154.33134460 194.91963196]
[140.88900757 188.50457764]
[139.80918884 172.72026062]
[131.59761047 160.16757202]
[123.38601685 147.61488342]
[115.03510284 135.15446472]
[106.54589844 122.78784180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[3 18]
[4 17]
[5 16]
[6 15]
[8 14]
[9 13]
[22 111]
[23 110]
[24 109]
[25 105]
[26 104]
[27 103]
[28 102]
[29 101]
[30 100]
[35 87]
[36 86]
[37 85]
[38 84]
[40 82]
[41 81]
[42 80]
[43 79]
[44 78]
[45 77]
[46 76]
[48 74]
[49 73]
[50 72]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 62]
[57 61]
[90 99]
[91 98]
[92 97]
[115 140]
[116 139]
[118 138]
[119 137]
[120 136]
[122 134]
[123 133]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
