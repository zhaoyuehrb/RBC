%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCCAGCAGCUGCUGCUCGCUCAGCUCACAAGCCAAGGCCAGGGGACAGGGCGGCAGCGACUCCUCUGGCUCCCGAGAAGUGGAUCCGGUCGCGGCCACUACG\
) } def
/len { sequence length } bind def

/coor [
[262.97964478 285.35040283]
[254.58338928 272.10140991]
[250.66278076 256.89389038]
[251.60919189 241.19828796]
[257.34280396 226.53604126]
[245.69494629 217.08473206]
[234.04708862 207.63340759]
[222.39923096 198.18209839]
[203.21437073 196.72166443]
[195.93316650 178.03982544]
[183.74584961 169.29513550]
[168.89442444 168.16184998]
[162.19265747 153.83016968]
[150.00535583 145.08547974]
[137.81805420 136.34078979]
[125.63074493 127.59609985]
[113.44344330 118.85140228]
[101.25614166 110.10671234]
[93.25727844 108.29511261]
[88.84244537 100.91790009]
[76.91963196 91.81589508]
[64.99681091 82.71389008]
[53.07399750 73.61189270]
[41.15118027 64.50988770]
[25.48705673 62.28596878]
[20.06572342 48.41303253]
[8.00934029 39.48870468]
[-4.17796278 30.74401283]
[-16.36526680 21.99932098]
[-25.31669426 19.47791672]
[-28.77895927 12.81050777]
[-44.23899078 14.71450996]
[-56.20075989 5.31394005]
[-57.92065811 -9.43657017]
[-69.84347534 -18.53857231]
[-86.16800690 -20.10115433]
[-92.72995758 -35.13022232]
[-82.77895355 -48.16515732]
[-66.55173492 -45.79673767]
[-60.74147415 -30.46138763]
[-48.81865692 -21.35938644]
[-34.13644791 -23.58835411]
[-21.91535568 -14.52747536]
[-19.67695808 0.88769066]
[-7.62057400 9.81201744]
[4.56672955 18.55670929]
[16.75403214 27.30140305]
[24.14192772 28.66545296]
[29.16772652 36.49021530]
[43.97904968 38.06309891]
[50.25318146 52.58707428]
[62.17599869 61.68907547]
[74.09881592 70.79107666]
[86.02162933 79.89308167]
[97.94445038 88.99507904]
[110.00083160 97.91941071]
[122.18813324 106.66410065]
[134.37544250 115.40879059]
[146.56274414 124.15348816]
[158.75004578 132.89817810]
[170.93734741 141.64286804]
[186.66049194 143.40162659]
[192.49055481 157.10781860]
[204.67785645 165.85252380]
[215.49218750 163.44221497]
[225.60786438 167.38815308]
[231.68037415 176.12077332]
[231.85054016 186.53424072]
[243.49839783 195.98554993]
[255.14625549 205.43687439]
[266.79412842 214.88818359]
[278.80032349 206.79769897]
[292.59130859 202.44453430]
[307.03457642 202.17669678]
[320.94665527 206.00706482]
[333.19021606 213.61309814]
[342.76699829 224.36396790]
[348.89913940 237.37289429]
[351.09249878 251.57025146]
[349.17633057 265.79150391]
[343.31658936 278.87283325]
[354.67926025 288.66516113]
[366.04193115 298.45748901]
[377.40460205 308.24984741]
[388.76727295 318.04217529]
[395.43563843 319.71182251]
[399.53671265 323.93646240]
[400.49069214 328.76696777]
[411.25329590 339.21524048]
[422.01589966 349.66351318]
[438.04104614 353.14587402]
[442.77941895 368.84555054]
[431.35656738 380.61206055]
[415.52337646 376.34100342]
[411.56765747 360.42611694]
[400.80505371 349.97784424]
[390.04241943 339.52957153]
[378.97494507 329.40484619]
[367.61227417 319.61248779]
[356.24960327 309.82015991]
[344.88693237 300.02783203]
[333.52426147 290.23550415]
[320.28967285 298.47305298]
[305.14462280 302.24691772]
[289.55361938 301.17993164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 71]
[6 70]
[7 69]
[8 68]
[10 64]
[11 63]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[26 49]
[27 47]
[28 46]
[29 45]
[31 44]
[34 41]
[35 40]
[81 102]
[82 101]
[83 100]
[84 99]
[85 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
