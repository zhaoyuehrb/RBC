%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUUCCGGCGCGAACCGCUACUUCCGGUGCGAACCGCCUCGGCCGUUCCCUCGCGGAGCUUACUGAGCGCGGCCGCCGAGCCCAGCUCCGCCGCCGAGCGCCUGUGCCGGCACGGCUACACC\
) } def
/len { sequence length } bind def

/coor [
[150.46408081 385.32876587]
[148.21069336 370.49899292]
[134.28952026 365.20120239]
[124.82630920 353.56918335]
[122.44021606 338.66372681]
[127.87093353 324.47201538]
[139.75349426 314.84124756]
[137.50012207 300.01147461]
[135.24673462 285.18170166]
[132.99334717 270.35192871]
[130.73995972 255.52214050]
[128.48658752 240.69236755]
[126.23320007 225.86259460]
[123.97981262 211.03282166]
[112.58676910 204.87626648]
[106.76438904 193.09065247]
[108.85881805 179.91545105]
[118.32181549 170.23699951]
[116.44181824 155.35527039]
[114.56182098 140.47355652]
[112.68182373 125.59182739]
[95.63818359 128.80676270]
[79.51971436 121.52103424]
[70.32060242 106.01082611]
[71.70838165 87.68585205]
[58.84548187 79.96926117]
[45.98258209 72.25266266]
[33.11968231 64.53607178]
[20.16083145 56.98172379]
[4.33976698 56.91487503]
[-2.92291903 43.91092682]
[-18.74398422 43.84407806]
[-26.00667000 30.84012985]
[-39.05942535 23.44922066]
[-52.11218262 16.05830956]
[-65.16493988 8.66739941]
[-80.98600769 8.60055065]
[-88.24868774 -4.40339756]
[-101.30144501 -11.79430771]
[-117.68655396 -11.11593246]
[-126.23687744 -25.10964966]
[-118.15657043 -39.37992096]
[-101.75795746 -39.24671555]
[-93.91053772 -24.84706306]
[-80.85778046 -17.45615387]
[-65.97033691 -17.91795158]
[-57.77402878 -4.38535643]
[-44.72127151 3.00555348]
[-31.66851616 10.39646339]
[-18.61576080 17.78737450]
[-3.72831535 17.32557487]
[4.46799088 30.85817146]
[19.35543633 30.39637184]
[27.55174255 43.92896652]
[35.00572968 44.49320984]
[40.83627701 51.67317200]
[53.69917679 59.38976669]
[66.56207275 67.10636139]
[79.42497253 74.82295227]
[92.91605377 68.26621246]
[94.79605103 53.38449478]
[96.67604828 38.50277328]
[98.55605316 23.62105370]
[94.54255676 7.14901018]
[109.25981903 -1.26754928]
[121.42160034 10.54462337]
[113.43776703 25.50105286]
[111.55776978 40.38277054]
[109.67777252 55.26449203]
[107.79777527 70.14620972]
[122.52286530 80.62689209]
[128.40315247 96.99482727]
[141.97555542 90.60813904]
[155.54797363 84.22145081]
[169.12037659 77.83475494]
[178.31275940 64.95801544]
[193.12312317 66.53992462]
[206.69552612 60.15323257]
[215.88790894 47.27648544]
[230.69827271 48.85839462]
[244.27069092 42.47170639]
[257.84307861 36.08501816]
[271.41549683 29.69832802]
[283.17276001 17.48346138]
[298.16500854 25.39984131]
[294.70825195 41.99765015]
[277.80218506 43.27073288]
[264.22976685 49.65742111]
[250.65737915 56.04411316]
[237.08496094 62.43080139]
[228.86337280 74.85073090]
[213.08221436 73.72563934]
[199.50981140 80.11232758]
[191.28820801 92.53225708]
[175.50706482 91.40716553]
[161.93466187 97.79385376]
[148.36225891 104.18054199]
[134.78984070 110.56723022]
[127.56353760 123.71183014]
[129.44354248 138.59355164]
[131.32353210 153.47528076]
[133.20353699 168.35699463]
[147.19573975 178.76667786]
[149.34388733 195.73466492]
[138.80958557 208.77943420]
[141.06297302 223.60920715]
[143.31636047 238.43898010]
[145.56974792 253.26875305]
[147.82312012 268.09854126]
[150.07650757 282.92831421]
[152.32989502 297.75808716]
[154.58328247 312.58786011]
[168.79025269 318.25433350]
[178.19137573 330.19232178]
[180.34053040 345.13378906]
[174.75962830 359.05175781]
[163.04046631 368.24560547]
[165.29385376 383.07537842]
[178.74028015 391.05834961]
[183.86065674 405.83386230]
[178.23731995 420.42535400]
[164.52542114 427.94320679]
[149.19931030 424.83767700]
[139.49549866 412.57513428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 118]
[2 117]
[7 112]
[8 111]
[9 110]
[10 109]
[11 108]
[12 107]
[13 106]
[14 105]
[18 102]
[19 101]
[20 100]
[21 99]
[25 59]
[26 58]
[27 57]
[28 56]
[29 54]
[31 52]
[33 50]
[34 49]
[35 48]
[36 47]
[38 45]
[39 44]
[60 70]
[61 69]
[62 68]
[63 67]
[72 98]
[73 97]
[74 96]
[75 95]
[77 93]
[78 92]
[80 90]
[81 89]
[82 88]
[83 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
