%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGGUGAGCCUCUGGGGCGUACCGGCUUGGCGCGGCGGCAGCGGCAGCGGCGGCUGGGAGAGCGGUCGGCGGGGUUUCUUCGUUGCAUUGCCUGAGAGGAGCGGAGUCUGCCAGGUGGUGUCCAUC\
) } def
/len { sequence length } bind def

/coor [
[113.38561249 135.81362915]
[104.34073639 137.98617554]
[95.03890991 137.91014099]
[86.03074646 135.59004211]
[77.84948730 131.16320801]
[66.92974854 141.44714355]
[56.01000214 151.73107910]
[45.09025955 162.01499939]
[34.17051697 172.29893494]
[23.25077438 182.58285522]
[18.50914192 197.67681885]
[3.93924904 200.76995850]
[-6.98049450 211.05387878]
[-17.90023804 221.33781433]
[-28.81998062 231.62173462]
[-36.20525742 246.88261414]
[-52.91416931 244.01057434]
[-54.77986908 227.15960693]
[-39.10390854 220.70199585]
[-28.18416786 210.41807556]
[-17.26442337 200.13414001]
[-6.34468079 189.85020447]
[-2.38410139 175.49183655]
[12.96684456 171.66311646]
[23.88658714 161.37918091]
[34.80633163 151.09526062]
[45.72607422 140.81132507]
[56.64581680 130.52740479]
[67.56555939 120.24346924]
[63.64738464 111.84391022]
[61.86553192 102.74832153]
[62.32471848 93.49122620]
[64.99796295 84.61663055]
[49.25664139 83.02870941]
[43.27809143 69.38663483]
[30.99654388 60.77480698]
[18.71499825 52.16297913]
[2.97367978 50.57506180]
[-3.00487161 36.93298721]
[-15.28641796 28.32115936]
[-31.02773666 26.73324394]
[-37.00628662 13.09117031]
[-49.28783417 4.47934008]
[-65.66224670 3.57895637]
[-72.82728577 -11.17212009]
[-63.41217422 -24.59924698]
[-47.10237122 -22.88974571]
[-40.67600250 -7.80220652]
[-28.39445686 0.80962348]
[-13.53159809 1.78156257]
[-6.67458820 16.03961182]
[5.60695839 24.65144157]
[20.46981812 25.62338257]
[27.32682800 39.88143158]
[39.60837555 48.49326324]
[51.88991928 57.10509109]
[66.75277710 58.07703018]
[73.60978699 72.33508301]
[95.49723816 62.03269577]
[119.18727875 66.92977905]
[135.19606018 85.06587982]
[149.88549805 82.02935791]
[164.57493591 78.99282837]
[176.52308655 68.62208557]
[190.55314636 73.62274933]
[202.50129700 63.25200272]
[216.53135681 68.25266266]
[231.22079468 65.21614075]
[243.16894531 54.84539413]
[257.19900513 59.84605408]
[269.14715576 49.47531128]
[283.17721558 54.47597122]
[297.86666870 51.43944550]
[312.55609131 48.40291977]
[327.24551392 45.36639404]
[341.93496704 42.32986832]
[356.62438965 39.29334259]
[359.91482544 36.12014771]
[363.67871094 34.39735031]
[367.38064575 34.09049606]
[370.55575562 34.98791885]
[372.86343384 36.74128723]
[387.77618408 35.12567139]
[402.68890381 33.51005173]
[417.60165405 31.89443016]
[432.51437378 30.27881241]
[447.42712402 28.66319275]
[462.33987427 27.04757309]
[475.22637939 17.86889458]
[488.71298218 24.19035530]
[501.59951782 15.01167870]
[515.08612061 21.33313942]
[529.99884033 19.71751976]
[541.13500977 8.16911602]
[557.09301758 9.81879044]
[565.63128662 23.40105438]
[560.19995117 38.49675751]
[544.96545410 43.52576828]
[531.61444092 34.63026047]
[516.70172119 36.24587631]
[504.88186646 45.30899429]
[490.32861328 39.10309601]
[478.50872803 48.16621399]
[463.95547485 41.96031189]
[449.04275513 43.57593155]
[434.13000488 45.19155121]
[419.21725464 46.80717087]
[404.30453491 48.42279053]
[389.39178467 50.03841019]
[374.47906494 51.65402603]
[359.66091919 53.98277664]
[344.97149658 57.01930237]
[330.28204346 60.05582809]
[315.59262085 63.09235382]
[300.90316772 66.12888336]
[286.21374512 69.16540527]
[275.31628418 79.31895447]
[260.23553467 74.53549194]
[249.33807373 84.68904114]
[234.25732422 79.90557098]
[219.56788635 82.94210052]
[208.67042542 93.09564972]
[193.58967590 88.31217957]
[182.69221497 98.46573639]
[167.61146545 93.68226624]
[152.92202759 96.71879578]
[138.23258972 99.75531769]
[137.16011047 108.99542236]
[133.88793945 117.70304871]
[128.60981750 125.36275482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[12 22]
[13 21]
[14 20]
[15 19]
[33 58]
[35 56]
[36 55]
[37 54]
[39 52]
[40 51]
[42 49]
[43 48]
[61 127]
[62 126]
[63 125]
[65 123]
[67 121]
[68 120]
[70 118]
[72 116]
[73 115]
[74 114]
[75 113]
[76 112]
[77 111]
[82 110]
[83 109]
[84 108]
[85 107]
[86 106]
[87 105]
[88 104]
[90 102]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
