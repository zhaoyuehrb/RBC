%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGCGGGAACCUGACACCGAGGAUGAAUAAAUGAUGCUCGCUGACUACCCGUGGCCAAAGCCCGUGGCCACCGAGCGCCGGCUGGCAGGGGCAGUGACCGGCGGCCGGCCCGUUCGUCCCUGGGCUCCGCAAGCGGCGCGGUGGCACGAAG\
) } def
/len { sequence length } bind def

/coor [
[91.18202209 109.67383575]
[76.54856110 112.96955872]
[61.91510010 116.26528931]
[47.38785553 120.00148773]
[32.98008728 124.17475128]
[18.57231331 128.34800720]
[4.20729351 132.66613770]
[-10.11351967 137.12867737]
[-24.43433189 141.59123230]
[-38.75514603 146.05377197]
[-53.07595825 150.51632690]
[-55.54922485 160.99725342]
[-62.12475586 169.42280579]
[-71.54673004 174.29388428]
[-82.06107330 174.77987671]
[-91.74191284 170.85958862]
[-98.84432983 163.31266785]
[-110.39183807 174.12773132]
[-124.60093689 169.66110229]
[-139.16505432 173.25082397]
[-150.71257019 184.06590271]
[-164.92166138 179.59925842]
[-179.48579407 183.18899536]
[-194.04992676 186.77873230]
[-208.61404419 190.36846924]
[-220.16156006 201.18353271]
[-234.37065125 196.71690369]
[-248.93478394 200.30664062]
[-260.48229980 211.12170410]
[-274.69137573 206.65507507]
[-284.18817139 219.58529663]
[-300.22363281 220.07827759]
[-310.49676514 207.75584412]
[-307.12689209 192.07070923]
[-292.69906616 185.05516052]
[-278.28112793 192.09094238]
[-267.77532959 181.53263855]
[-252.52452087 185.74250793]
[-237.96038818 182.15277100]
[-227.45460510 171.59446716]
[-212.20378113 175.80433655]
[-197.63964844 172.21459961]
[-183.07553101 168.62487793]
[-168.51139832 165.03514099]
[-158.00561523 154.47683716]
[-142.75479126 158.68670654]
[-128.19067383 155.09696960]
[-117.68488312 144.53866577]
[-102.43406677 148.74853516]
[-93.68550110 131.39692688]
[-74.73067474 125.90213013]
[-57.53850555 136.19551086]
[-43.21769333 131.73295593]
[-28.89687920 127.27041626]
[-14.57606506 122.80786896]
[-0.25525248 118.34532166]
[5.22655392 113.32402039]
[14.39905167 113.94023895]
[28.80682373 109.76698303]
[43.21459579 105.59371948]
[45.23717117 102.63956451]
[48.81849289 100.54260254]
[53.52830505 100.03712463]
[58.61937332 101.63182831]
[73.25283051 98.33609772]
[87.88629150 95.04037476]
[102.37518311 91.15808868]
[116.69599152 86.69554138]
[131.01679993 82.23299408]
[145.33761597 77.77044678]
[152.65007019 72.19886017]
[159.99192810 73.36537170]
[174.39970398 69.19210815]
[188.80746460 65.01884460]
[203.21524048 60.84558105]
[217.62301636 56.67232132]
[222.53855896 52.11317062]
[228.17347717 50.94160461]
[232.69541931 52.63367844]
[247.25955200 49.04394531]
[261.82366943 45.45420837]
[276.38781738 41.86447525]
[290.95193481 38.27473831]
[305.51605225 34.68500519]
[313.15158081 29.56509399]
[320.40960693 31.17276382]
[335.04306030 27.87703514]
[346.80599976 17.29669571]
[360.92227173 22.04855156]
[375.55575562 18.75282288]
[383.29281616 13.78770924]
[390.51699829 15.54120827]
[405.21386719 12.54082298]
[419.91070557 9.54043770]
[434.60757446 6.54005194]
[449.30444336 3.53966665]
[463.93789673 0.24393815]
[478.50201416 -3.34579682]
[490.04953003 -14.16086292]
[504.25863647 -9.69423008]
[518.82275391 -13.28396511]
[533.38690186 -16.87369919]
[544.93438721 -27.68876457]
[559.14349365 -23.22213173]
[573.70758057 -26.81186676]
[588.27172852 -30.40160179]
[602.83587646 -33.99133682]
[617.39996338 -37.58107376]
[626.89678955 -50.51129913]
[642.93225098 -51.00428391]
[653.20538330 -38.68185043]
[649.83551025 -22.99671364]
[635.40765381 -15.98117161]
[620.98974609 -23.01694489]
[606.42559814 -19.42720985]
[591.86145020 -15.83747482]
[577.29736328 -12.24774075]
[562.73321533 -8.65800571]
[552.22741699 1.90029860]
[536.97662354 -2.30957246]
[522.41247559 1.28016257]
[507.84835815 4.86989737]
[497.34259033 15.42820168]
[482.09176636 11.21833038]
[467.52761841 14.80806541]
[464.30999756 18.40777206]
[458.77606201 19.98908424]
[452.30480957 18.23652649]
[437.60797119 21.23691177]
[422.91110229 24.23729706]
[408.21423340 27.23768234]
[393.51736450 30.23806763]
[378.85147095 33.38628387]
[364.21801758 36.68201447]
[353.50173950 47.02661896]
[338.33880615 42.51049805]
[323.70532227 45.80622482]
[309.10580444 49.24913025]
[294.54165649 52.83886719]
[279.97753906 56.42860031]
[265.41342163 60.01833725]
[250.84928894 63.60807037]
[236.28515625 67.19780731]
[221.79627991 71.08009338]
[207.38850403 75.25335693]
[192.98072815 79.42661285]
[178.57295227 83.59987640]
[164.16519165 87.77313995]
[149.80017090 92.09126282]
[135.47935486 96.55381012]
[121.15853882 101.01635742]
[106.83773041 105.47889709]
[105.18230438 108.11377716]
[102.50959778 110.18855286]
[99.03141022 111.31723785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 60]
[5 59]
[6 58]
[7 56]
[8 55]
[9 54]
[10 53]
[11 52]
[17 49]
[19 47]
[20 46]
[22 44]
[23 43]
[24 42]
[25 41]
[27 39]
[28 38]
[30 36]
[67 152]
[68 151]
[69 150]
[70 149]
[72 148]
[73 147]
[74 146]
[75 145]
[76 144]
[79 143]
[80 142]
[81 141]
[82 140]
[83 139]
[84 138]
[86 137]
[87 136]
[89 134]
[90 133]
[92 132]
[93 131]
[94 130]
[95 129]
[96 128]
[97 125]
[98 124]
[100 122]
[101 121]
[102 120]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
