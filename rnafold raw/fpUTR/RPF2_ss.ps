%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAGCUUCCGGUUCCGCCUGUUCCGGCGCACGUAAUCGCCGAGGGCACGUGCAUGCCCCCUGGUUAAGAGUUGCAGGUAGCGGUAGCG\
) } def
/len { sequence length } bind def

/coor [
[64.21983337 375.24606323]
[48.93440628 378.54602051]
[35.12810898 371.20297241]
[29.31985283 356.68408203]
[34.25211716 341.84472656]
[47.59603500 333.69158936]
[49.66083908 318.83438110]
[51.72564316 303.97717285]
[45.81394958 290.30599976]
[55.37723923 277.70223999]
[57.44203949 262.84503174]
[59.50684357 247.98783875]
[53.59515381 234.31666565]
[63.15843964 221.71292114]
[61.14409256 218.57162476]
[60.68220901 214.23870850]
[62.34298706 209.52033997]
[66.28258514 205.45758057]
[69.87231445 190.89344788]
[73.46205139 176.32933044]
[77.05178833 161.76519775]
[80.64152527 147.20106506]
[84.23125458 132.63694763]
[69.02677155 118.82770538]
[63.76785660 98.97285461]
[70.14315796 79.44782257]
[59.81470871 68.57017517]
[49.48625946 57.69253159]
[39.15781021 46.81488419]
[28.82936096 35.93724060]
[13.46381569 38.10048294]
[-0.22286369 30.78922844]
[-6.96786880 16.81480408]
[-4.17760706 1.55066133]
[7.07500839 -9.13382626]
[22.46311760 -11.13025475]
[36.06967926 -3.67095637]
[42.66268921 10.37581635]
[39.70700455 25.60879135]
[50.03545380 36.48643494]
[60.36390305 47.36408234]
[70.69235229 58.24172592]
[81.02079773 69.11936951]
[95.01051331 64.09835052]
[109.83922577 65.11428833]
[116.81007385 51.83244705]
[123.78092194 38.55060577]
[130.75177002 25.26876450]
[137.72261047 11.98692513]
[132.78208923 -3.02529788]
[139.97834778 -17.09617043]
[155.04197693 -21.87769318]
[169.03596497 -14.53307438]
[173.65795898 0.58025521]
[166.16580200 14.49582386]
[151.00445557 18.95777321]
[144.03359985 32.23961258]
[137.06275940 45.52145386]
[130.09190369 58.80329514]
[123.12106323 72.08513641]
[129.47059631 78.89770508]
[133.87474060 87.10327148]
[148.69409180 84.78232574]
[159.27011108 72.71885681]
[175.28839111 73.60997009]
[184.46109009 86.77208710]
[179.75167847 102.10835266]
[164.77282715 107.85410309]
[151.01502991 99.60168457]
[136.19567871 101.92262268]
[133.88134766 112.87934113]
[128.33300781 122.60671997]
[120.08025360 130.17625427]
[109.91082001 134.86544800]
[98.79538727 136.22668457]
[95.20565033 150.79080200]
[91.61591339 165.35493469]
[88.02617645 179.91906738]
[84.43644714 194.48318481]
[80.84671021 209.04731750]
[78.01564789 223.77772522]
[83.77964783 238.51159668]
[74.36405182 250.05264282]
[72.29924774 264.90985107]
[70.23444366 279.76705933]
[75.99844360 294.50091553]
[66.58284760 306.04196167]
[64.51804352 320.89916992]
[62.45324326 335.75637817]
[73.06821442 347.23925781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 89]
[7 88]
[8 87]
[10 85]
[11 84]
[12 83]
[14 81]
[18 80]
[19 79]
[20 78]
[21 77]
[22 76]
[23 75]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
