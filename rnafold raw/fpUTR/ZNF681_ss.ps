%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCUCCCUUCAGCCCGAGCUCCGGGUCUCGUCUUCACUGCUCUGUGUCCUCUUCUUCUAGAGGCCCAGCCUCUAUGGCCCUCUGACCUGCAGGUAUUGGCGAUCCAUAGCUAAGACGCCAGGUCCCCCGGAAACCUAGAA\
) } def
/len { sequence length } bind def

/coor [
[87.70831299 340.84350586]
[75.23284149 349.25534058]
[61.39075851 355.15393066]
[46.68245316 358.32601929]
[31.63961411 358.65695190]
[16.80603409 356.13476562]
[2.71793818 350.85064697]
[-10.11539841 342.99557495]
[-21.23005867 332.85354614]
[-30.22425461 320.79116821]
[-36.77285385 307.24450684]
[-40.63912201 292.70321655]
[-41.68330383 277.69302368]
[-39.86764908 262.75650024]
[-35.25779343 248.43357849]
[-28.02037811 235.24206543]
[-18.41703224 223.65878296]
[-6.79491282 214.10249329]
[6.42584991 206.91862488]
[20.76733398 202.36688232]
[35.71110153 200.61180115]
[50.71694565 201.71684265]
[54.62575150 187.23509216]
[58.53455734 172.75332642]
[62.44336319 158.27157593]
[66.35216522 143.78982544]
[70.26097107 129.30805969]
[59.88774872 140.14302063]
[52.86555862 153.39778137]
[39.48910141 160.18530273]
[24.64536476 158.02578735]
[13.75739956 147.70822144]
[10.80304432 133.00204468]
[16.86165237 119.28004456]
[29.71975327 111.55545807]
[44.67884064 112.65004730]
[59.36957169 109.61980438]
[45.02446365 105.23598480]
[30.67935944 100.85215759]
[16.84535217 108.49387360]
[1.68308318 104.03504944]
[-5.81194353 90.12101746]
[-1.19306135 75.00673676]
[12.79942894 67.65924072]
[27.86403084 72.43766022]
[35.06318283 86.50704956]
[49.40829086 90.89087677]
[63.75339508 95.27470398]
[62.65280914 78.11962891]
[70.11020660 59.89756775]
[61.45415115 47.64715195]
[52.79809570 35.39673615]
[44.14204025 23.14632225]
[35.48598480 10.89590645]
[19.86970711 8.46537781]
[10.61356544 -4.34475088]
[13.20906353 -19.93445778]
[26.11633682 -29.05464554]
[41.67773056 -26.29446793]
[50.66094589 -13.29149246]
[47.73640060 2.23984957]
[56.39245605 14.49026585]
[65.04851532 26.74068069]
[73.70456696 38.99109650]
[82.36062622 51.24151230]
[89.66196442 49.52674103]
[86.23265076 34.92401123]
[100.83543396 31.49492073]
[104.26464081 46.09720230]
[111.56598663 44.38243103]
[113.86366272 29.55945396]
[116.16134644 14.73647690]
[107.88735199 0.99164033]
[113.60958862 -13.99620819]
[128.93844604 -18.72967339]
[142.11492920 -9.57764626]
[143.03118896 6.43922091]
[130.98432922 17.03415871]
[128.68664551 31.85713577]
[126.38896179 46.68011475]
[131.42375183 52.23897552]
[138.88568115 39.22669220]
[153.56695557 42.30242538]
[155.17849731 57.21560287]
[141.49331665 63.35670090]
[146.52809143 68.91556549]
[161.50547791 68.09213257]
[176.48286438 67.26869965]
[191.46025085 66.44527435]
[206.43762207 65.62184143]
[221.41500854 64.79840851]
[229.22126770 53.76549149]
[241.78178406 49.33135223]
[254.40908813 52.91196442]
[262.52743530 62.97574615]
[277.51928711 62.48152924]
[291.05703735 54.29374695]
[304.03231812 61.60750961]
[319.02416992 61.11329269]
[334.01602173 60.61907578]
[349.00787354 60.12485886]
[363.99975586 59.63064194]
[372.59005737 46.70833588]
[387.14700317 41.33480072]
[402.07315063 45.57627869]
[411.62905884 57.80183029]
[412.14031982 73.31047821]
[403.41030884 86.13883972]
[388.79592896 91.35414124]
[373.91668701 86.95098877]
[364.49395752 74.62249756]
[349.50210571 75.11671448]
[334.51025391 75.61093140]
[319.51840210 76.10514832]
[304.52655029 76.59936523]
[292.06109619 84.75180054]
[278.01348877 77.47338867]
[263.02163696 77.96760559]
[252.10325623 90.71332550]
[235.01069641 91.67509460]
[222.23843384 79.77579498]
[207.26106262 80.59922028]
[192.28367615 81.42265320]
[177.30628967 82.24608612]
[162.32890320 83.06951141]
[147.35153198 83.89294434]
[128.99559021 132.13749695]
[84.74272919 133.21687317]
[80.83392334 147.69862366]
[76.92511749 162.18037415]
[73.01631165 176.66213989]
[69.10750580 191.14389038]
[65.19869995 205.62564087]
[78.72260284 212.22114563]
[90.75374603 221.25708008]
[100.85720825 232.40681458]
[108.66775513 245.26728821]
[113.90303802 259.37359619]
[116.37381744 274.21585083]
[115.99076080 289.25744629]
[112.76772308 303.95468140]
[106.82121277 317.77621460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 133]
[23 132]
[24 131]
[25 130]
[26 129]
[27 128]
[37 48]
[38 47]
[39 46]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[70 80]
[71 79]
[72 78]
[86 126]
[87 125]
[88 124]
[89 123]
[90 122]
[91 121]
[95 118]
[96 117]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
