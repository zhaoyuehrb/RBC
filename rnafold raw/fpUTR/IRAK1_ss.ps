%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGACCCGGCCGGCCCAGGCCCGCGCCCGCCGCGGCCCUGAGAGGCCCCGGCAGGUCCCGGCCCGGCGGCGGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[71.22360992 356.92529297]
[56.81235886 361.68768311]
[41.65409470 360.91864014]
[27.79884148 354.72216797]
[17.12040901 343.93627930]
[11.06296921 330.01968384]
[10.44573975 314.85446167]
[15.35219479 300.49163818]
[25.11877823 288.87359619]
[38.42464066 281.57165527]
[53.47027206 279.57330322]
[56.97195053 264.98776245]
[60.47363281 250.40220642]
[63.97531128 235.81665039]
[59.42291641 221.63479614]
[70.16802216 210.02217102]
[73.38265991 195.37068176]
[76.30901337 180.65890503]
[71.20335388 166.66670227]
[81.48426056 154.64117432]
[84.41061401 139.92939758]
[87.33696747 125.21761322]
[90.26332855 110.50583649]
[85.95128632 97.20553589]
[95.02489471 86.56781006]
[90.12854767 71.52333069]
[100.20014191 60.55008316]
[103.12649536 45.83830261]
[106.05284882 31.12652397]
[101.15650177 16.08204651]
[111.22810364 5.10879803]
[114.15445709 -9.60298157]
[117.08081055 -24.31476021]
[120.00716400 -39.02653885]
[115.11081696 -54.07101822]
[125.18241119 -65.04426575]
[128.10876465 -79.75604248]
[131.03512573 -94.46782684]
[133.96147156 -109.17960358]
[124.97379303 -122.17949677]
[127.89300537 -137.71183777]
[140.98718262 -146.56156921]
[156.48780823 -143.47831726]
[165.19860840 -130.29129028]
[161.95162964 -114.82414246]
[148.67324829 -106.25325012]
[145.74690247 -91.54147339]
[142.82054138 -76.82968903]
[139.89419556 -62.11791229]
[144.99984741 -48.12571716]
[134.71894836 -36.10018539]
[131.79258728 -21.38840485]
[128.86624146 -6.67662668]
[125.93988037 8.03515244]
[131.04554749 22.02734566]
[120.76463318 34.05287933]
[117.83827972 48.76465988]
[114.91191864 63.47643661]
[120.01758575 77.46862793]
[109.73667145 89.49416351]
[114.04871368 102.79446411]
[104.97510529 113.43218994]
[102.04875183 128.14396667]
[99.12239838 142.85574341]
[96.19603729 157.56752014]
[101.09239197 172.61199951]
[91.02079010 183.58525085]
[88.09443665 198.29702759]
[89.50297546 207.59919739]
[84.75357056 213.52384949]
[89.05550385 228.74896240]
[78.56085968 239.31832886]
[75.05918121 253.90388489]
[71.55750275 268.48944092]
[68.05581665 283.07498169]
[80.55433655 291.68609619]
[89.09493256 304.23294067]
[92.52255249 319.01858521]
[90.37364960 334.04345703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 75]
[12 74]
[13 73]
[14 72]
[16 70]
[17 68]
[18 67]
[20 65]
[21 64]
[22 63]
[23 62]
[25 60]
[27 58]
[28 57]
[29 56]
[31 54]
[32 53]
[33 52]
[34 51]
[36 49]
[37 48]
[38 47]
[39 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
