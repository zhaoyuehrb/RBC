%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAAGCACCGCCCACAGCUGCCCGGGACUCCAGUGAUCGCCGCGGCUCGCUCGCGCCCCGGAAACUGCCCCUUCUCGGGGGUC\
) } def
/len { sequence length } bind def

/coor [
[73.28141022 117.60813141]
[65.38492584 130.36138916]
[57.48844528 143.11463928]
[63.48471069 157.42633057]
[59.89082718 172.52148438]
[48.08872223 182.59570312]
[32.61654663 183.77525330]
[19.42366219 175.60656738]
[13.58300686 161.23066711]
[17.34042931 146.17539978]
[29.25112534 136.22979736]
[44.73518753 135.21815491]
[52.63167191 122.46490479]
[60.52815247 109.71164703]
[76.33493805 91.50502777]
[94.24208069 92.27082062]
[93.68780518 77.28106689]
[93.13353729 62.29130936]
[89.61975861 53.59197617]
[92.84610748 46.73959732]
[81.95155334 35.60647583]
[82.16523743 20.39434052]
[92.84610748 10.07665920]
[92.84610748 -4.92334080]
[92.84610748 -19.92333984]
[92.84610748 -34.92333984]
[92.84610748 -49.92333984]
[85.10881042 -63.72351456]
[92.84610748 -76.45078278]
[85.10881042 -90.25095367]
[92.84610748 -102.97822571]
[85.10881042 -116.77840424]
[92.84610748 -129.50567627]
[92.84610748 -144.50567627]
[92.84610748 -159.50567627]
[92.84610748 -174.50567627]
[92.84610748 -189.50567627]
[89.69750977 -195.76507568]
[90.28492737 -201.72737122]
[93.44134521 -205.60321045]
[94.54913330 -220.56225586]
[86.93739319 -235.08787537]
[95.93848419 -248.79598999]
[112.29284668 -247.58486938]
[119.17652130 -232.70040894]
[109.50817108 -219.45446777]
[108.40038300 -204.49542236]
[107.84610748 -189.50567627]
[107.84610748 -174.50567627]
[107.84610748 -159.50567627]
[107.84610748 -144.50567627]
[107.84610748 -129.50567627]
[115.58340454 -116.77840424]
[107.84610748 -102.97822571]
[115.58340454 -90.25095367]
[107.84610748 -76.45078278]
[115.58340454 -63.72351456]
[107.84610748 -49.92333984]
[107.84610748 -34.92333984]
[107.84610748 -19.92333984]
[107.84610748 -4.92334080]
[107.84610748 10.07665920]
[118.52697754 20.39434052]
[118.74066162 35.60647583]
[107.84610748 46.73959732]
[108.12329102 61.73703766]
[108.67756653 76.72679138]
[109.23183441 91.71655273]
[114.65045929 105.70363617]
[124.33937836 117.15460968]
[134.02830505 128.60557556]
[143.71722412 140.05654907]
[153.40614319 151.50752258]
[169.01377869 156.54080200]
[172.19363403 172.62870789]
[159.67454529 183.22137451]
[144.33508301 177.42198181]
[141.95516968 161.19645691]
[132.26625061 149.74548340]
[122.57733154 138.29450989]
[112.88840485 126.84352875]
[103.19948578 115.39255524]
[95.71997070 115.94644928]
[89.19985199 129.45526123]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[16 68]
[17 67]
[18 66]
[20 65]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[29 56]
[31 54]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[40 47]
[41 46]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
