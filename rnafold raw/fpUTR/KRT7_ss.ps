%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCCCGCCCCUACCUGUGGAAGCCCAGCCGCCCGCUCCCGCGGAUAAAAGGCGCGGAGUGUCCCCGAGGUCAGCGAGUGCGCGCUCCUCCUCGCCCGCCGCUAGGUCCAUCCCGGCCCAGCCACC\
) } def
/len { sequence length } bind def

/coor [
[78.53435516 177.52532959]
[64.60700989 171.95495605]
[54.30089951 161.05613708]
[49.51720047 146.83938599]
[51.13835526 131.92724609]
[58.86531448 119.07057190]
[71.27268219 110.64102936]
[86.06861877 108.19345093]
[71.08668518 108.92946625]
[56.10475540 109.66548157]
[44.65176773 122.82147980]
[27.56591034 123.66046906]
[15.36859226 112.15129089]
[0.40923539 113.25476074]
[-12.78435326 121.98629761]
[-26.04633141 115.20623779]
[-41.00568771 116.30970764]
[-55.96504593 117.41317749]
[-70.92440033 118.51664734]
[-85.88375854 119.62011719]
[-100.84311676 120.72358704]
[-114.03670502 129.45512390]
[-127.29868317 122.67506409]
[-142.25804138 123.77853394]
[-157.21739197 124.88200378]
[-163.82519531 138.74679565]
[-176.48919678 147.43693542]
[-191.80285645 148.61480713]
[-205.64688110 141.96357727]
[-214.29727173 129.27239990]
[-215.42715454 113.95512390]
[-208.73255920 100.13202667]
[-196.01432800 91.52144623]
[-180.69357300 90.43959808]
[-166.89154053 97.17748260]
[-158.32086182 109.92264557]
[-143.36151123 108.81917572]
[-128.40214539 107.71570587]
[-116.27855682 99.06309509]
[-101.94658661 105.76422882]
[-86.98722839 104.66075897]
[-72.02787018 103.55728912]
[-57.06851196 102.45381927]
[-42.10915756 101.35034943]
[-27.14979935 100.24688721]
[-15.02620411 91.59427643]
[-0.69423306 98.29540253]
[14.26512337 97.19193268]
[21.27886772 86.31004333]
[33.47365189 81.41220093]
[46.44567108 84.51025391]
[55.36874008 94.68354797]
[70.35066986 93.94753265]
[85.33260345 93.21151733]
[98.64720154 86.30343628]
[107.87567139 74.47824097]
[117.10414886 62.65304565]
[126.33261871 50.82784653]
[129.18920898 42.03780746]
[135.93554688 38.82936478]
[145.45144653 27.23420715]
[154.96734619 15.63905048]
[151.25225830 5.44209766]
[152.15609741 -5.29120588]
[157.44366455 -14.58188057]
[166.07785034 -20.74574089]
[176.42239380 -22.69858932]
[186.55174255 -20.14643097]
[196.89483643 -31.01013756]
[207.23794556 -41.87384415]
[217.58105469 -52.73754883]
[214.92794800 -67.91210938]
[221.64038086 -81.57946777]
[234.95603943 -88.59069061]
[249.67074585 -86.44240570]
[260.01385498 -97.30611420]
[270.35696411 -108.16981506]
[273.68331909 -124.22806549]
[289.33618164 -129.11888123]
[301.21322632 -117.81099701]
[297.09637451 -101.93701172]
[281.22067261 -97.82671356]
[270.87756348 -86.96300507]
[260.53445435 -76.09929657]
[263.40216064 -61.50771713]
[257.05276489 -47.86407089]
[243.73123169 -40.48911285]
[228.44476318 -42.39443970]
[218.10165405 -31.53073502]
[207.75854492 -20.66702843]
[197.41543579 -9.80332184]
[199.42907715 9.48204613]
[186.53883362 24.36755180]
[166.56251526 25.15494919]
[157.04661560 36.75010681]
[147.53071594 48.34526443]
[138.15782166 60.05632019]
[128.92933655 71.88151550]
[119.70086670 83.70671844]
[110.47239685 95.53191376]
[115.12050629 99.48371887]
[117.82371521 106.20497894]
[128.16682434 117.06868744]
[138.50993347 127.93238831]
[153.62942505 132.59194946]
[156.80168152 147.14482117]
[167.14479065 158.00851440]
[177.48789978 168.87222290]
[187.83100891 179.73593140]
[203.63468933 179.87318420]
[214.65280151 191.20353699]
[214.34846497 207.00489807]
[202.90226746 217.90258789]
[187.10499573 217.43121338]
[176.32893372 205.87043762]
[176.96730042 190.07904053]
[166.62419128 179.21533203]
[156.28108215 168.35162354]
[145.93797302 157.48793030]
[131.55828857 153.60542297]
[127.64622498 138.27549744]
[117.30311584 127.41179657]
[106.96000671 116.54808807]
[115.98949432 128.52590942]
[119.16169739 143.18664551]
[115.89144135 157.82582092]
[106.78199005 169.74295044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 54]
[9 53]
[10 52]
[13 48]
[14 47]
[16 45]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[23 38]
[24 37]
[25 36]
[55 100]
[56 99]
[57 98]
[58 97]
[60 96]
[61 95]
[62 94]
[68 91]
[69 90]
[70 89]
[71 88]
[75 84]
[76 83]
[77 82]
[102 123]
[103 122]
[104 121]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
