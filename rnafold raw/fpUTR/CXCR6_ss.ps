%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGACCUUGCUUCAUGAGCAAGCUCAUCUCUGGAACAAACUGGCAAAGCAUCUCUGCUGGUGUUCAUCAGAACAGACACC\
) } def
/len { sequence length } bind def

/coor [
[24.35092163 204.77297974]
[16.31794739 201.37432861]
[9.25130367 196.28097534]
[3.50195622 189.75219727]
[-10.18559837 195.88822937]
[-19.61321831 208.59376526]
[-34.39198685 206.73977661]
[-48.07954025 212.87580872]
[-61.76709366 219.01184082]
[-75.45465088 225.14785767]
[-89.14220428 231.28388977]
[-102.82975769 237.41992188]
[-116.51731110 243.55595398]
[-128.49720764 255.55255127]
[-143.34133911 247.36181641]
[-139.57997131 230.83038330]
[-122.65334320 229.86839294]
[-108.96578979 223.73236084]
[-95.27823639 217.59634399]
[-81.59068298 211.46031189]
[-67.90312195 205.32427979]
[-54.21557236 199.18824768]
[-40.52801514 193.05221558]
[-32.07942200 180.78558350]
[-16.32162857 182.20066833]
[-2.63407350 176.06465149]
[-1.22334504 153.34210205]
[12.71616936 135.20980835]
[34.51137161 127.93887329]
[56.74737549 134.12654114]
[67.14886475 123.31871033]
[77.55035400 112.51088715]
[87.95183563 101.70306396]
[97.93172455 90.50476837]
[107.47536469 78.93242645]
[117.01899719 67.36009216]
[126.56263733 55.78775406]
[128.12133789 48.93139648]
[132.38887024 44.69905090]
[137.30703735 43.73160553]
[147.70852661 32.92377853]
[158.11001587 22.11595535]
[168.51148987 11.30813217]
[178.91297913 0.50030804]
[189.31446838 -10.30751610]
[199.71595764 -21.11533928]
[203.71055603 -36.42395782]
[218.11094666 -40.22893524]
[228.51243591 -51.03675842]
[235.13928223 -66.64192200]
[251.96910095 -64.59399414]
[254.66015625 -47.85498047]
[239.32026672 -40.63527298]
[228.91877747 -29.82744789]
[225.66816711 -15.29187870]
[210.52378845 -10.71385193]
[200.12229919 0.09397165]
[189.72080994 10.90179539]
[179.31932068 21.70961952]
[168.91783142 32.51744461]
[158.51634216 43.32526779]
[148.11485291 54.13309097]
[138.13497925 65.33139038]
[128.59133911 76.90372467]
[119.04769897 88.47606659]
[109.50405884 100.04840088]
[108.79906464 105.52922058]
[104.94524384 110.13821411]
[98.75966644 112.10455322]
[88.35817719 122.91237640]
[77.95668793 133.72019958]
[67.55519867 144.52803040]
[71.76586914 152.31045532]
[74.13722229 160.82337952]
[74.55540466 169.63902283]
[73.00456238 178.31561279]
[69.56739044 186.41944885]
[64.42074585 193.54663086]
[57.82654572 199.34313965]
[50.11844635 203.52250671]
[41.68495560 205.87985229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 26]
[5 25]
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[30 72]
[31 71]
[32 70]
[33 69]
[34 66]
[35 65]
[36 64]
[37 63]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
