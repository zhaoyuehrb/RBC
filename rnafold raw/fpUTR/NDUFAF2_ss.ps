%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACUAGAAGGGCUCCAGGAUGGAGGCCGACCUGACUUCUCCGCCUCGGUGGGCUGGGUCGGCGGCUGGAGCAUUACCCCUACUGCGGGUCCCGCUGCUGGCAGCGCUGGAAACUGGGUGGACGGC\
) } def
/len { sequence length } bind def

/coor [
[-49.82582092 229.03907776]
[-61.87393570 237.97456360]
[-73.92205048 246.91006470]
[-85.97016144 255.84555054]
[-86.96444702 266.81027222]
[-93.73787689 275.20785522]
[-103.82214355 278.36825562]
[-113.75272369 275.46240234]
[-116.95689392 290.70614624]
[-129.72402954 298.97988892]
[-144.23684692 295.83123779]
[-156.70889282 304.16479492]
[-163.88470459 318.26510620]
[-178.76565552 318.90264893]
[-191.23770142 327.23620605]
[-203.70974731 335.56976318]
[-216.18179321 343.90332031]
[-228.65382385 352.23687744]
[-238.46441650 366.06396484]
[-254.46699524 360.46450806]
[-253.51631165 343.53723145]
[-236.98738098 339.76483154]
[-224.51533508 331.43127441]
[-212.04328918 323.09771729]
[-199.57125854 314.76416016]
[-187.09921265 306.43063354]
[-180.81547546 292.92639160]
[-165.04244995 291.69274902]
[-152.57040405 283.35919189]
[-149.92553711 268.74618530]
[-137.39582825 260.11712646]
[-122.08628082 262.99035645]
[-114.95285034 245.08489990]
[-94.90564728 243.79743958]
[-82.85753632 234.86195374]
[-70.80942535 225.92645264]
[-58.76131058 216.99096680]
[-59.80186081 199.44577026]
[-50.08356476 184.61419678]
[-33.28921509 178.45608521]
[-15.98784447 183.57818604]
[-4.39268732 174.06228638]
[7.20246935 164.54638672]
[18.79762650 155.03048706]
[30.39278221 145.51458740]
[41.98794174 135.99868774]
[45.19638443 129.25234985]
[53.98642349 126.39575958]
[65.81162262 117.16728973]
[77.63681793 107.93881226]
[89.46201324 98.71034241]
[100.69905853 88.77410889]
[104.98616028 73.54481506]
[119.45679474 70.01637268]
[130.06340027 59.40976715]
[140.66999817 48.80316544]
[142.80038452 42.36355591]
[147.23829651 38.60353088]
[152.06692505 37.95239258]
[163.18118286 27.87900925]
[174.29545593 17.80562401]
[185.40972900 7.73223972]
[196.52398682 -2.34114456]
[207.63825989 -12.41452885]
[218.75251770 -22.48791313]
[229.86679077 -32.56129837]
[240.98106384 -42.63468170]
[246.01025391 -57.63527298]
[260.63659668 -60.44942474]
[271.75085449 -70.52281189]
[282.86514282 -80.59619141]
[268.07641602 -83.10491943]
[259.20941162 -95.20354462]
[261.27041626 -110.06127930]
[273.09573364 -119.28958893]
[288.00894165 -117.67825317]
[297.59014893 -106.13700867]
[296.43014526 -91.18244171]
[308.90219116 -99.51599884]
[321.37423706 -107.84954834]
[333.74307251 -116.33552551]
[340.13833618 -131.43627930]
[356.44458008 -133.17939758]
[365.88735962 -119.77169800]
[358.75271606 -105.00588226]
[342.38021851 -104.07175446]
[338.68417358 -97.57971954]
[329.70779419 -95.37751007]
[317.23574829 -87.04395294]
[304.76370239 -78.71040344]
[292.93850708 -69.48192596]
[281.82424927 -59.40854263]
[270.70999146 -49.33515930]
[266.47573853 -35.05508423]
[251.05444336 -31.52041435]
[239.94017029 -21.44703102]
[228.82591248 -11.37364674]
[217.71163940 -1.30026209]
[206.59736633 8.77312183]
[195.48310852 18.84650612]
[184.36883545 28.91989136]
[173.25457764 38.99327469]
[162.14030457 49.06665802]
[151.27659607 59.40976715]
[140.66999817 70.01637268]
[130.06340027 80.62297058]
[126.53495026 95.09361267]
[111.30566406 99.38070679]
[125.95889282 102.58738708]
[132.81253052 115.93008423]
[126.88407898 129.70881653]
[112.48342896 133.90660095]
[100.07969666 125.47171021]
[98.69048309 110.53553772]
[86.86528778 119.76401520]
[75.04009247 128.99249268]
[63.21489716 138.22096252]
[51.50383759 147.59385681]
[39.90868378 157.10975647]
[28.31352615 166.62565613]
[16.71836853 176.14155579]
[5.12321186 185.65745544]
[-6.47194481 195.17335510]
[-4.08716965 207.56689453]
[-7.22150421 219.71746826]
[-15.21084976 229.29945374]
[-26.46810341 234.50643921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[8 32]
[11 29]
[12 28]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[41 123]
[42 122]
[43 121]
[44 120]
[45 119]
[46 118]
[48 117]
[49 116]
[50 115]
[51 114]
[52 108]
[54 106]
[55 105]
[56 104]
[59 103]
[60 102]
[61 101]
[62 100]
[63 99]
[64 98]
[65 97]
[66 96]
[67 95]
[69 93]
[70 92]
[71 91]
[78 90]
[79 89]
[80 88]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
