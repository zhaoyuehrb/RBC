%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGGGGUAAGGAGGAUAGUGGAAGAAAAAAAGGUAGAUGGUUGAUUUCCCUCUCUGAUCUGGAAGGAAGAUGACCGAGGAAGG\
) } def
/len { sequence length } bind def

/coor [
[-81.52745056 304.62118530]
[-93.77333069 313.31704712]
[-106.99503326 320.44210815]
[-120.99211884 325.88830566]
[-135.55241394 329.57308960]
[-150.45515442 331.44064331]
[-165.47444153 331.46258545]
[-180.38259888 329.63864136]
[-194.95359802 325.99642944]
[-208.96655273 320.59118652]
[-222.20903015 313.50485229]
[-234.48028564 304.84481812]
[-245.59426880 294.74240112]
[-255.38253784 283.35076904]
[-263.69665527 270.84255981]
[-270.41061401 257.40744019]
[-275.42260742 243.24906921]
[-278.65667725 228.58209229]
[-280.06381226 213.62884521]
[-279.62261963 198.61601257]
[-277.33984375 183.77119446]
[-273.25006104 169.31944275]
[-267.41528320 155.47982788]
[-259.92398071 142.46214294]
[-250.88967896 130.46376038]
[-240.44937134 119.66656494]
[-228.76132202 110.23423767]
[-216.00270081 102.30976105]
[-202.36694336 96.01327515]
[-188.06076050 91.44023132]
[-173.30102539 88.65995789]
[-158.31149292 87.71460724]
[-143.31941223 88.61849976]
[-128.55204773 91.35794067]
[-114.23326874 95.89140320]
[-100.58015442 102.15015411]
[-87.79966736 110.03931427]
[-76.08556366 119.43928528]
[-65.61543274 130.20756531]
[-56.54799271 142.18092346]
[-49.02070236 155.17782593]
[-35.21551132 149.31124878]
[-21.41031837 143.44468689]
[-7.60512543 137.57810974]
[6.20006752 131.71154785]
[14.88746929 119.61285400]
[30.61450005 121.33653259]
[44.41969299 115.46996307]
[58.22488403 109.60339355]
[72.03007507 103.73682404]
[85.83527374 97.87024689]
[94.39783478 86.81700897]
[108.29815674 88.32455444]
[122.10334778 82.45798492]
[128.97229004 76.07427216]
[136.52149963 76.63948059]
[142.73760986 62.10898209]
[157.43855286 56.30744934]
[171.90252686 62.67683411]
[177.54829407 77.43829346]
[171.02635193 91.83411407]
[156.20602417 97.32351685]
[141.87995911 90.64972687]
[127.96992493 96.26317596]
[114.16472626 102.12975311]
[105.60216522 113.18299103]
[91.70184326 111.67544556]
[77.89665222 117.54201508]
[64.09145355 123.40858459]
[50.28626251 129.27516174]
[36.48107147 135.14172363]
[26.80622864 147.66003418]
[12.06663799 145.51673889]
[-1.73855448 151.38330078]
[-15.54374695 157.24987793]
[-29.34893990 163.11643982]
[-43.15413284 168.98301697]
[-39.02211380 183.42276001]
[-36.69593430 198.26083374]
[-36.21085739 213.27230835]
[-37.57423782 228.22959900]
[-40.76540756 242.90597534]
[-45.73599243 257.07894897]
[-52.41063309 270.53363037]
[-60.68814468 283.06610107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[41 77]
[42 76]
[43 75]
[44 74]
[45 73]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[53 65]
[54 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
