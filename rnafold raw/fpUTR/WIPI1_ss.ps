%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGGCAGGACCGGCGACCCGGCCCGUGGAGCCGGCGCGGGCGGGCUGCUGAGGUGGCUGUCGCCGGCUCCGAGCUGCGGCUUCCCGGGCCGAGCCCCCG\
) } def
/len { sequence length } bind def

/coor [
[87.66574097 390.19152832]
[73.33126831 383.94198608]
[66.41387939 369.91760254]
[70.17975616 354.74023438]
[82.85076904 345.57620239]
[83.75643921 330.60357666]
[84.66211700 315.63092041]
[85.56779480 300.65829468]
[86.47347260 285.68566895]
[77.76536560 270.53247070]
[87.82792664 255.20404053]
[88.28096771 240.21087646]
[80.93160248 227.25572205]
[89.08217621 213.69554138]
[89.53522491 198.70237732]
[89.98826599 183.70922852]
[90.44131470 168.71606445]
[87.44735718 161.82048035]
[91.14127350 153.27882385]
[92.04695129 138.30619812]
[92.50000000 123.31304169]
[92.50000000 108.31304169]
[92.27345276 93.31475067]
[91.82040405 78.32159424]
[91.36736298 63.32843781]
[90.91431427 48.33528137]
[82.42671967 41.20131683]
[79.42090607 30.75953293]
[82.68105316 20.62697601]
[90.86393738 14.17194271]
[91.31698608 -0.82121390]
[91.77003479 -15.81437111]
[92.22307587 -30.80752754]
[92.67612457 -45.80068588]
[93.12916565 -60.79384232]
[93.58221436 -75.78699493]
[94.03525543 -90.78015137]
[94.48830414 -105.77330780]
[94.94135284 -120.76646423]
[95.39439392 -135.75962830]
[84.84106445 -147.21672058]
[85.51409912 -162.41545105]
[96.50172424 -172.40583801]
[96.95477295 -187.39900208]
[97.40781403 -202.39215088]
[90.09085083 -216.41972351]
[98.20903015 -228.90750122]
[90.89205933 -242.93505859]
[99.01023865 -255.42283630]
[99.46327972 -270.41598511]
[91.22407532 -284.59512329]
[99.61753845 -298.68347168]
[116.00920868 -298.18817139]
[123.53672791 -283.61871338]
[114.45643616 -269.96295166]
[114.00339508 -254.96978760]
[121.35276031 -242.01463318]
[113.20218658 -228.45445251]
[120.55155182 -215.49929810]
[112.40097046 -201.93910217]
[111.94792938 -186.94595337]
[111.49488068 -171.95278931]
[121.85926056 -161.31723022]
[121.61338806 -146.10557556]
[110.38755035 -135.30657959]
[109.93450928 -120.31342316]
[109.48146057 -105.32026672]
[109.02841187 -90.32711029]
[108.57537079 -75.33395386]
[108.12232208 -60.34079742]
[107.66928101 -45.34763718]
[107.21623230 -30.35448265]
[106.76319122 -15.36132526]
[106.31014252 -0.36816847]
[105.85709381 14.62498856]
[116.33188629 30.75953293]
[105.90747070 47.88223648]
[106.36051941 62.87539291]
[106.81356049 77.86855316]
[107.26660919 92.86170959]
[110.68638611 100.32217407]
[107.50000000 108.31304169]
[107.50000000 123.31304169]
[110.59313965 129.46354675]
[110.06524658 135.33569336]
[107.01958466 139.21186829]
[106.11390686 154.18450928]
[105.43447113 169.16911316]
[104.98142242 184.16227722]
[104.52838135 199.15542603]
[104.07533264 214.14859009]
[111.39229584 228.17614746]
[103.27412415 240.66392517]
[102.82108307 255.65708923]
[111.12973785 265.66494751]
[110.34575653 278.24478149]
[101.44610596 286.59133911]
[100.54042816 301.56396484]
[99.63475037 316.53662109]
[98.72907257 331.50924683]
[97.82340240 346.48187256]
[109.29742432 357.10641479]
[111.20641327 372.62704468]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 101]
[6 100]
[7 99]
[8 98]
[9 97]
[11 94]
[12 93]
[14 91]
[15 90]
[16 89]
[17 88]
[19 87]
[20 86]
[21 83]
[22 82]
[23 80]
[24 79]
[25 78]
[26 77]
[30 75]
[31 74]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[43 62]
[44 61]
[45 60]
[47 58]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
