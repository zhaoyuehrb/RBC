%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGACUGAGGGCCGGUGCUUCCGGUGGCUGCCCAGAACUUCUUAUGUGCGGCGGCGUGAUGUUGGGCGGCCACAGAGAGAUUGGUGUUUUUGUGAGGCAGUGAGACCUAAGGUAACCUUUAUCAAAAGG\
) } def
/len { sequence length } bind def

/coor [
[184.17660522 421.25802612]
[180.98812866 406.60083008]
[177.79965210 391.94363403]
[174.61117554 377.28640747]
[171.42268372 362.62921143]
[167.88630676 348.05203247]
[164.00402832 333.56317139]
[160.12173462 319.07427979]
[147.13439941 311.87255859]
[142.99079895 297.23406982]
[150.63267517 283.66058350]
[146.75038147 269.17169189]
[142.86810303 254.68281555]
[138.81367493 240.24114990]
[134.41671753 225.90007019]
[129.84942627 211.61231995]
[118.60423279 201.84527588]
[121.77217102 186.34448242]
[117.20487976 172.05673218]
[112.63758087 157.76898193]
[108.07028198 143.48123169]
[103.50298309 129.19348145]
[98.93568420 114.90573120]
[89.50743103 112.34162903]
[83.01672363 104.02823639]
[82.77021790 92.70663452]
[72.68031311 81.60736084]
[62.59040833 70.50808716]
[52.50050354 59.40882111]
[42.41059875 48.30955124]
[32.32069016 37.21027756]
[22.23078537 26.11100960]
[12.14088058 15.01173782]
[2.05097461 3.91246772]
[-8.03893089 -7.18680286]
[-18.12883759 -18.28607368]
[-24.44736481 -20.71573639]
[-27.98997498 -25.31599236]
[-28.41927338 -30.16186905]
[-37.96962738 -41.72866440]
[-48.96107101 -42.14976501]
[-57.69472885 -48.46668625]
[-61.38132095 -58.36002350]
[-59.01206970 -68.42194366]
[-68.00123596 -80.43006134]
[-76.99040222 -92.43817902]
[-85.97956085 -104.44629669]
[-94.96872711 -116.45441437]
[-103.95789337 -128.46253967]
[-119.63501740 -130.46334839]
[-129.23941040 -143.01449585]
[-127.07295227 -158.66958618]
[-114.42096710 -168.14074707]
[-98.78965759 -165.80889893]
[-89.45278931 -153.05747986]
[-91.94977570 -137.45170593]
[-82.96060944 -125.44358063]
[-73.97144318 -113.43546295]
[-64.98227692 -101.42734528]
[-55.99311447 -89.41922760]
[-47.00395203 -77.41110229]
[-28.74048805 -71.23655701]
[-26.40283012 -51.27901840]
[-16.85247803 -39.71222305]
[-7.02956629 -28.37597847]
[3.06033945 -17.27670860]
[13.15024471 -6.17743778]
[23.24015045 4.92183256]
[33.33005524 16.02110291]
[43.41996002 27.12037277]
[53.50986862 38.21964264]
[63.59977341 49.31891632]
[73.68968201 60.41818619]
[83.77958679 71.51745605]
[93.86949158 82.61672974]
[108.80156708 84.04256439]
[115.21238708 69.57840729]
[130.03788757 68.14526367]
[142.04600525 59.15609741]
[154.05412292 50.16693115]
[166.06224060 41.17776489]
[178.07035828 32.18860245]
[190.07847595 23.19943619]
[196.03309631 7.91956139]
[212.28192139 5.70426893]
[222.10955811 18.83246231]
[215.40618896 33.79898071]
[199.06764221 35.20755386]
[187.05952454 44.19672012]
[175.05140686 53.18588638]
[163.04328918 62.17504883]
[151.03517151 71.16421509]
[139.02705383 80.15338135]
[133.47512817 93.97457886]
[117.79073334 96.05068207]
[113.22343445 110.33843231]
[117.79073334 124.62618256]
[122.35803223 138.91394043]
[126.92533112 153.20169067]
[131.49263000 167.48944092]
[136.05992126 181.77719116]
[147.63179016 192.56617737]
[144.13717651 207.04501343]
[148.70446777 221.33276367]
[154.35121155 228.63926697]
[153.20606995 236.01516724]
[158.67733765 243.45397949]
[157.35697937 250.80052185]
[161.23927307 265.28942871]
[165.12155151 279.77828979]
[178.52635193 287.71237183]
[182.25714111 302.46145630]
[174.61062622 315.19198608]
[178.49290466 329.68087769]
[182.37519836 344.16976929]
[186.87799072 349.22463989]
[187.91882324 354.93682861]
[186.07989502 359.44073486]
[189.26837158 374.09793091]
[192.45684814 388.75515747]
[195.64532471 403.41235352]
[198.83381653 418.06954956]
[213.48764038 422.66964722]
[223.86636353 433.99118042]
[227.17816162 448.98876953]
[222.53216553 463.62811279]
[211.17813110 473.97131348]
[196.17024231 477.23608398]
[181.54553223 472.54421997]
[171.23799133 461.15780640]
[168.02027893 446.13977051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[4 119]
[5 118]
[6 115]
[7 114]
[8 113]
[11 110]
[12 109]
[13 108]
[14 106]
[15 104]
[16 103]
[18 101]
[19 100]
[20 99]
[21 98]
[22 97]
[23 96]
[26 75]
[27 74]
[28 73]
[29 72]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[39 64]
[40 63]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[76 95]
[78 93]
[79 92]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
