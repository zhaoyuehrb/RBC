%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCACCAGGAGCCUUAGAGAAGCUGUAGGGCCUGCUGGCCGCUCGUCCGCCUCGCGCCCGGGGGCUCCGCGCCUGGAGCUGCGCCGGCGGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[53.67804718 122.84210968]
[50.47267532 120.97621918]
[35.71002960 123.63408661]
[20.94738197 126.29195404]
[15.41094208 130.44972229]
[9.50619507 130.95710754]
[5.14525223 128.61146545]
[-9.75847816 130.30816650]
[-24.66220856 132.00488281]
[-37.49861526 141.25350952]
[-51.01940155 135.00549316]
[-65.92313385 136.70220947]
[-80.79743195 138.64002991]
[-95.63840485 140.81845093]
[-110.47937775 142.99688721]
[-125.32035065 145.17530823]
[-140.16131592 147.35374451]
[-152.69151306 157.01319885]
[-166.40753174 151.20628357]
[-181.24848938 153.38471985]
[-196.04161072 161.66725159]
[-208.09559631 149.74508667]
[-199.97624207 134.86180115]
[-183.42692566 138.54374695]
[-168.58595276 136.36531067]
[-157.11729431 126.86167908]
[-142.33975220 132.51277161]
[-127.49877930 130.33435059]
[-112.65780640 128.15591431]
[-97.81683350 125.97748566]
[-82.97586060 123.79905701]
[-76.69595337 119.63379669]
[-67.61984253 121.79847717]
[-52.71611023 120.10176849]
[-40.94571686 110.97449493]
[-26.35891724 117.10115051]
[-11.45518589 115.40444183]
[3.44854474 113.70773315]
[18.28951645 111.52930450]
[33.05216217 108.87143707]
[47.81481171 106.21357727]
[62.43096924 102.84194183]
[76.86614990 98.76448822]
[91.30133057 94.68703461]
[97.72675323 89.54780579]
[106.27021790 90.71940613]
[114.02142334 85.52513885]
[121.35973358 87.23857880]
[136.02857971 84.10406494]
[150.69741821 80.96955109]
[165.36625671 77.83503723]
[180.03509521 74.70052338]
[193.29533386 62.05256653]
[209.76377869 67.87314606]
[224.32342529 64.26527405]
[238.88307190 60.65739822]
[253.38238525 56.81423187]
[267.81756592 52.73677826]
[282.18481445 48.42611313]
[296.48040771 43.88336182]
[310.77597046 39.34061050]
[325.07153320 34.79785919]
[339.36712646 30.25510979]
[350.17596436 18.70178413]
[364.64877319 22.22127151]
[378.94436646 17.67852020]
[392.20852661 7.11924458]
[406.02700806 16.94194221]
[400.41354370 32.93960190]
[383.48709106 31.97409248]
[369.19152832 36.51684570]
[359.40521240 47.74524307]
[343.90985107 44.55068207]
[329.61428833 49.09343338]
[315.31872559 53.63618469]
[301.02313232 58.17893600]
[286.72756958 62.72168732]
[281.20138550 67.84497070]
[271.89501953 67.17195892]
[257.45983887 71.24941254]
[251.77064514 76.19105530]
[242.49093628 75.21704102]
[227.93130493 78.82491302]
[213.37165833 82.43279266]
[206.76721191 92.70959473]
[194.52035522 95.75329590]
[183.16960144 89.36936188]
[168.50076294 92.50387573]
[153.83192444 95.63838959]
[139.16308594 98.77290344]
[124.49424744 101.90741730]
[109.87808990 105.27905273]
[95.37877655 109.12221527]
[80.94359589 113.19966888]
[66.50842285 117.27712250]
[62.61239624 121.31392670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[4 39]
[7 38]
[8 37]
[9 36]
[11 34]
[12 33]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[19 25]
[20 24]
[42 95]
[43 94]
[44 93]
[46 92]
[48 91]
[49 90]
[50 89]
[51 88]
[52 87]
[54 84]
[55 83]
[56 82]
[57 80]
[58 79]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
