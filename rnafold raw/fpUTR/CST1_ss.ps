%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUCCCUGCCUCGGGCUCUCACCCUCCUCUCCUGCAGCUCCAGCUUUGUGCUCUGCCUCUGAGGAGACC\
) } def
/len { sequence length } bind def

/coor [
[-28.58666420 200.77978516]
[-40.48696518 209.91120911]
[-52.38726425 219.04263306]
[-64.28756714 228.17404175]
[-76.18786621 237.30546570]
[-88.08816528 246.43688965]
[-87.54737091 261.94454956]
[-96.25291443 274.78948975]
[-110.85733795 280.03262329]
[-125.74494934 275.65783691]
[-135.19114685 263.34732056]
[-135.56367493 247.83470154]
[-126.71929932 235.08494568]
[-112.05885315 230.00054932]
[-97.21958923 234.53659058]
[-85.31928253 225.40516663]
[-73.41898346 216.27374268]
[-61.51868439 207.14231873]
[-49.61838531 198.01091003]
[-37.71808624 188.87948608]
[-40.39136124 175.31681824]
[-36.87785339 161.87812805]
[-27.82189178 151.25772095]
[-14.98495865 145.61100769]
[-0.90326905 146.11711121]
[11.61326981 152.73324585]
[23.90055084 144.12959290]
[36.18783188 135.52595520]
[48.47511292 126.92230225]
[60.76239395 118.31865692]
[73.04967499 109.71501160]
[71.79660034 94.97310638]
[78.06581879 81.57194519]
[90.18522644 73.08584595]
[104.92239380 71.77816772]
[118.34667969 77.99770355]
[130.63395691 69.39405823]
[142.92123413 60.79041290]
[155.20852661 52.18676758]
[157.13162231 47.46493912]
[160.27867126 44.13049316]
[163.97848511 42.41088867]
[167.56179810 42.25807190]
[170.46327209 43.37943268]
[184.05789185 37.04015732]
[197.65251160 30.70088387]
[204.46862793 16.17779732]
[220.10585022 12.59215641]
[232.56863403 22.69455910]
[232.29660034 38.73530579]
[219.49842834 48.40930939]
[203.99179077 44.29550171]
[190.39717102 50.63477325]
[176.80255127 56.97404861]
[163.81216431 64.47404480]
[151.52488708 73.07769775]
[139.23760986 81.68134308]
[126.95032501 90.28498840]
[128.20339966 105.02689362]
[121.93418121 118.42805481]
[109.81477356 126.91415405]
[95.07760620 128.22183228]
[81.65332031 122.00229645]
[69.36603546 130.60594177]
[57.07875824 139.20957947]
[44.79147720 147.81323242]
[32.50419617 156.41688538]
[20.21691704 165.02052307]
[21.86247444 181.32180786]
[15.18471050 196.18164062]
[2.05311584 205.66601562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[26 68]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[36 58]
[37 57]
[38 56]
[39 55]
[44 54]
[45 53]
[46 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
