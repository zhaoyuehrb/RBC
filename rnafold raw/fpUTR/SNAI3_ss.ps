%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCAGUCCGGACCCAGGCGCGCCCCUCCCGCCCCAGCCCACCCCGGCCUGCCGCCCGGGAGGGGAAC\
) } def
/len { sequence length } bind def

/coor [
[-2.55603790 209.36195374]
[-10.47699165 207.91952515]
[-17.23667526 203.67623901]
[-30.55495453 210.57720947]
[-36.99443436 217.53294373]
[-44.64019775 217.47352600]
[-58.25876999 223.76116943]
[-71.87734222 230.04881287]
[-74.76370239 245.29507446]
[-86.08340454 255.90847778]
[-101.48377991 257.80792236]
[-115.04308319 250.26306152]
[-121.54747772 236.17503357]
[-118.49588776 220.96098328]
[-107.06172180 210.47100830]
[-91.64164734 208.73873901]
[-78.16498566 216.43025208]
[-64.54641724 210.14259338]
[-50.92784500 203.85494995]
[-37.45592880 197.25892639]
[-24.13765144 190.35795593]
[-15.14291096 169.86912537]
[7.88070631 168.64256287]
[19.29787636 158.91383362]
[30.71504784 149.18510437]
[42.13221741 139.45637512]
[53.54938889 129.72763062]
[64.96656036 119.99890900]
[76.38372803 110.27017212]
[87.80090332 100.54144287]
[98.76344299 90.30314636]
[109.24862671 79.57650757]
[109.24002075 63.99967194]
[120.02629852 53.27069855]
[134.87648010 53.35848618]
[145.36166382 42.63184357]
[155.84684753 31.90520287]
[166.08514404 20.94266319]
[176.07124329 9.74990845]
[174.92214966 -6.01255131]
[185.31843567 -17.91603470]
[201.09216309 -18.89841652]
[212.88505554 -8.37686825]
[213.70062256 7.40636396]
[203.05497742 19.08736801]
[187.26400757 19.73600960]
[177.27790833 30.92876434]
[175.10488892 38.25946808]
[166.57350159 42.39038849]
[156.08830261 53.11703110]
[145.60311890 63.84367371]
[146.02893066 78.68801117]
[135.54826355 89.71571350]
[119.97527313 90.06169128]
[109.49008179 100.78833008]
[108.31472015 106.27841949]
[103.98773193 110.58901215]
[97.52963257 111.95861816]
[86.11246490 121.68734741]
[74.69528961 131.41607666]
[63.27812195 141.14480591]
[51.86095047 150.87353516]
[40.44377899 160.60226440]
[29.02660751 170.33100891]
[17.60943794 180.05973816]
[18.87482071 188.36544800]
[16.98169136 196.47898865]
[12.25137806 203.25210571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 21]
[4 20]
[6 19]
[7 18]
[8 17]
[23 65]
[24 64]
[25 63]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 55]
[32 54]
[35 51]
[36 50]
[37 49]
[38 47]
[39 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
