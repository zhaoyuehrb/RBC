%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUUUGGGACUGGACAGACCUGGUCACAGUCUAGGUUCUACAUCUUACUGGUCGAGCAACUUUAGAGUCAACCUAUUUGAUUUCUUGACAAGACCACAAUCUGAUCCCAAAG\
) } def
/len { sequence length } bind def

/coor [
[63.32657623 433.65225220]
[46.98247147 432.30975342]
[40.21861267 417.37048340]
[49.99308014 404.20263672]
[51.22102356 389.25299072]
[52.44896698 374.30334473]
[53.67691040 359.35366821]
[54.90485382 344.40402222]
[56.13279724 329.45437622]
[57.36074066 314.50473022]
[58.58868408 299.55505371]
[52.09710693 294.58480835]
[48.12387085 287.33084106]
[47.41485214 278.99511719]
[50.16762924 270.99462891]
[55.98471832 264.72055054]
[63.92908859 261.29647827]
[66.78005219 246.56988525]
[69.63101196 231.84332275]
[72.48197174 217.11674500]
[62.48435211 203.66979980]
[65.29597473 186.81040955]
[79.67023468 176.95536804]
[82.11787415 162.15641785]
[84.56552124 147.35746765]
[87.01316071 132.55850220]
[89.46080780 117.75955200]
[76.36697388 102.72367096]
[81.35037994 80.57611084]
[69.33667755 71.59439850]
[57.32298279 62.61269379]
[45.30928421 53.63098526]
[32.36555481 54.68767166]
[22.52242088 46.84720230]
[20.77434921 34.79179764]
[9.01046753 25.48528862]
[-2.75341415 16.17878151]
[-14.51729584 6.87227249]
[-30.55477715 7.29505682]
[-40.77386856 -5.07222891]
[-37.33535385 -20.74246216]
[-22.87697220 -27.69477844]
[-8.48995209 -20.59595871]
[-5.21078730 -4.89160872]
[6.55309391 4.41489935]
[18.31697464 13.72140789]
[30.08085632 23.02791595]
[47.50376129 24.56755638]
[54.29099274 41.61728668]
[66.30468750 50.59899521]
[78.31838989 59.58070374]
[90.33208466 68.56240845]
[105.29711914 67.53877258]
[115.97590637 57.00485992]
[126.65470123 46.47094345]
[137.33349609 35.93702698]
[148.01228333 25.40310860]
[158.69107056 14.86919212]
[143.69277954 14.64358330]
[131.56669617 5.81417704]
[126.74696350 -8.39040470]
[130.99598694 -22.77601814]
[142.76002502 -32.08232117]
[157.73738098 -32.90631104]
[170.45130920 -24.94667816]
[176.25277710 -11.11399746]
[173.02078247 3.53283286]
[185.72943115 -4.43525267]
[198.43807983 -12.40333843]
[211.14671326 -20.37142372]
[223.85536194 -28.33950996]
[236.56401062 -36.30759430]
[249.27264404 -44.27568054]
[254.24490356 -59.52875519]
[269.32028198 -65.01625061]
[282.93423462 -56.52863693]
[284.64331055 -40.57687759]
[273.13644409 -29.39780045]
[257.24072266 -31.56703758]
[244.53208923 -23.59895325]
[231.82344055 -15.63086700]
[219.11480713 -7.66278124]
[206.40615845 0.30530456]
[193.69752502 8.27339077]
[180.98887634 16.24147606]
[169.22499084 25.54798508]
[158.54620361 36.08190155]
[147.86741638 46.61581802]
[137.18861389 57.14973450]
[126.50982666 67.68364716]
[115.83103180 78.21756744]
[124.46105194 95.70356750]
[118.84024811 112.74000549]
[104.25975800 120.20719910]
[101.81211853 135.00614929]
[99.36447144 149.80509949]
[96.91683197 164.60406494]
[94.46918488 179.40301514]
[103.56268311 189.44865417]
[105.14313507 202.70953369]
[98.85206604 214.26763916]
[87.20854950 219.96769714]
[84.35758972 234.69427490]
[81.50662231 249.42085266]
[78.65566254 264.14743042]
[87.76502991 284.54113770]
[73.53833771 300.78302002]
[72.31039429 315.73266602]
[71.08245087 330.68231201]
[69.85450745 345.63195801]
[68.62656403 360.58163452]
[67.39862061 375.53128052]
[66.17067719 390.48092651]
[64.94273376 405.43057251]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 114]
[5 113]
[6 112]
[7 111]
[8 110]
[9 109]
[10 108]
[11 107]
[17 105]
[18 104]
[19 103]
[20 102]
[23 98]
[24 97]
[25 96]
[26 95]
[27 94]
[29 52]
[30 51]
[31 50]
[32 49]
[35 47]
[36 46]
[37 45]
[38 44]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[58 86]
[67 85]
[68 84]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
