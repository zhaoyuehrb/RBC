%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACGCGCCCUCCCGCAGGGCCUGCUGGGCUGCGAGACGCUAAGCGGCGCCGGGCGGGAGAAGAGCGGAGCAGUGGUCGGAG\
) } def
/len { sequence length } bind def

/coor [
[171.00718689 291.33422852]
[177.52584839 277.68276978]
[187.94548035 266.71524048]
[180.77967834 253.53755188]
[173.61389160 240.35987854]
[157.38973999 238.81596375]
[145.09841919 227.86512756]
[141.63084412 211.60418701]
[148.52061462 196.29168701]
[140.85533142 183.39813232]
[133.19006348 170.50459290]
[125.52478027 157.61105347]
[117.85949707 144.71751404]
[110.19421387 131.82395935]
[102.52893829 118.93041992]
[88.51261902 115.25766754]
[81.10820770 102.80291748]
[84.57752228 88.73486328]
[76.91223907 75.84131622]
[69.24695587 62.94777298]
[61.33610916 50.20342255]
[53.18259811 37.61294174]
[45.02908325 25.02245903]
[36.87557220 12.43197823]
[28.72205734 -0.15850291]
[14.72630882 -7.53614521]
[14.30259991 -22.42472267]
[6.14908648 -35.01520538]
[-2.00442696 -47.60568619]
[-17.50582314 -48.30307007]
[-29.61577988 -58.00505829]
[-33.67777634 -72.98103333]
[-28.12988472 -87.47242737]
[-15.10538864 -95.90700531]
[0.38753030 -95.04150391]
[12.39152718 -85.20871735]
[16.29082108 -70.18955994]
[10.58605480 -55.75919724]
[18.73956680 -43.16871643]
[26.89308167 -30.57823563]
[40.30563354 -24.10114861]
[41.31253815 -8.31201649]
[49.46605301 4.27846527]
[57.61956406 16.86894608]
[65.77307892 29.45942879]
[73.92658997 42.04990768]
[80.36920166 46.05353165]
[82.14050293 55.28249359]
[89.80578613 68.17604065]
[97.47106171 81.06958008]
[111.48738098 84.74233246]
[118.89179230 97.19708252]
[115.42247772 111.26513672]
[123.08776093 124.15868378]
[130.75303650 137.05223083]
[138.41831970 149.94577026]
[146.08360291 162.83930969]
[153.74888611 175.73286438]
[161.41416931 188.62640381]
[175.33935547 188.89581299]
[187.18470764 196.01226807]
[193.85534668 207.98957825]
[193.67178345 221.58885193]
[186.79156494 233.19407654]
[193.95736694 246.37176514]
[201.12316895 259.54943848]
[215.99269104 256.76516724]
[230.99458313 258.71408081]
[244.65911865 265.20532227]
[255.64756775 275.60287476]
[262.88339233 288.88812256]
[265.65771484 303.75952148]
[263.69873047 318.76010132]
[257.19836426 332.42028809]
[246.79342651 343.40176392]
[233.50334167 350.62869263]
[218.63008118 353.39303589]
[203.63081360 351.42401123]
[189.97500610 344.91445923]
[179.00050354 334.50219727]
[171.78248596 321.20724487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 66]
[4 65]
[5 64]
[9 59]
[10 58]
[11 57]
[12 56]
[13 55]
[14 54]
[15 53]
[18 50]
[19 49]
[20 48]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[27 40]
[28 39]
[29 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
