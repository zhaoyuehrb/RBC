%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCGCCGCCGCAGCGCCCGCACCGCGAUAAAAGGGGCGGCCGCGUUUCCUGACGCGAGAUCCGCGCUCGCCGCCGCCCGCCCAGGCGGCGAUGACACGGCGCCCGCGGCGGCCCGGAGGCGCCGGGUGGGCCGUUUGCUGACCGGAUCGCGGCUACCCGCCAGCGUGUCCGCGGCGCCGCCGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[259.95367432 252.06915283]
[252.20454407 239.22584534]
[251.03454590 224.27154541]
[256.69195557 210.37933350]
[267.97637939 200.49691772]
[282.49319458 196.72122192]
[268.75662231 190.69578552]
[255.02000427 184.67036438]
[241.28340149 178.64492798]
[227.54681396 172.61949158]
[213.81021118 166.59405518]
[200.07360840 160.56863403]
[186.33700562 154.54319763]
[169.03283691 157.41793823]
[158.23770142 142.51019287]
[144.40335083 136.71270752]
[130.56900024 130.91522217]
[116.73465729 125.11772919]
[102.90031433 119.32024384]
[88.17066956 122.15531921]
[77.47674561 132.67387390]
[66.78282166 143.19242859]
[59.73056793 158.61001587]
[42.96324539 156.10137939]
[40.73218155 139.29487610]
[56.26426697 132.49850464]
[66.95819092 121.97994995]
[77.65212250 111.46139526]
[75.33449554 104.32847595]
[61.06864548 108.96372986]
[46.80271912 113.59874725]
[42.16793823 99.33274078]
[56.43339157 94.69787598]
[70.69923401 90.06262207]
[68.38160706 82.92970276]
[53.54739380 80.70574951]
[38.75258255 86.31147003]
[27.31313324 76.77268982]
[12.47891426 74.54873657]
[-2.35530353 72.32478333]
[-17.18952179 70.10083008]
[-32.05848312 68.12244415]
[-46.97193527 66.51341248]
[-61.89817810 65.02773285]
[-76.82441711 63.54204559]
[-91.75066376 62.05636215]
[-106.67691040 60.57068253]
[-121.60314941 59.08499908]
[-136.31658936 66.32701111]
[-149.79272461 56.98218155]
[-148.16845703 40.66366959]
[-133.11470032 34.15856171]
[-120.11746979 44.15875244]
[-105.19122314 45.64443588]
[-90.26498413 47.13011932]
[-75.33873749 48.61580276]
[-60.41249466 50.10148621]
[-45.48625183 51.58716965]
[-38.50633621 49.11671829]
[-30.32621384 53.22280502]
[-26.07976532 51.00174332]
[-20.39073181 51.43724442]
[-14.96556664 55.26660919]
[-0.13134871 57.49056244]
[14.70286942 59.71451950]
[29.53708649 61.93847275]
[43.27085495 56.17367935]
[55.77134705 65.87152863]
[70.60556793 68.09548187]
[79.42234039 55.96022797]
[72.72321320 42.53928757]
[66.02407837 29.11834717]
[59.32494736 15.69740772]
[52.62581635 2.27646804]
[45.92668152 -11.14447212]
[39.22755051 -24.56541252]
[23.87968445 -26.12954903]
[11.82812691 -35.76092911]
[6.91848612 -50.38621521]
[10.71741199 -65.33853149]
[22.01268005 -75.84664917]
[37.20001221 -78.55745697]
[51.43318558 -72.60595703]
[60.17044449 -59.89125061]
[60.62376404 -44.47055054]
[52.64849091 -31.26454353]
[59.34762192 -17.84360313]
[66.04675293 -4.42266417]
[72.74588776 8.99827576]
[79.44502258 22.41921616]
[86.14414978 35.84015656]
[92.84328461 49.26109695]
[106.62210083 54.35645676]
[117.02831268 62.70153809]
[123.45659637 72.84667206]
[125.83032990 83.29343414]
[124.57246399 92.66978455]
[120.52244568 99.88296509]
[114.80955505 104.23451996]
[108.69779968 105.48590088]
[122.53215027 111.28338623]
[136.36648560 117.08087158]
[150.20083618 122.87835693]
[164.03518677 128.67584229]
[176.25755310 124.51894379]
[187.66732788 129.64616394]
[192.36244202 140.80659485]
[206.09904480 146.83203125]
[219.83564758 152.85746765]
[233.57223511 158.88288879]
[247.30883789 164.90832520]
[261.04544067 170.93376160]
[274.78204346 176.95918274]
[288.51864624 182.98461914]
[300.16555786 182.09638977]
[307.45639038 189.48594666]
[321.99737549 193.16824341]
[336.53839111 196.85052490]
[351.81567383 192.73771667]
[362.25408936 203.36262512]
[376.79510498 207.04490662]
[391.33612061 210.72718811]
[405.87710571 214.40946960]
[420.41812134 218.09175110]
[434.95910645 221.77403259]
[449.50012207 225.45631409]
[464.49807739 225.70433044]
[479.15286255 222.50482178]
[493.80767822 219.30532837]
[505.63989258 208.80252075]
[519.72467041 213.64703369]
[534.37945557 210.44754028]
[549.03424072 207.24804688]
[558.87298584 194.57606506]
[574.91589355 194.51152039]
[584.85626221 207.10391235]
[581.06866455 222.69345093]
[566.45867920 229.32116699]
[552.23376465 221.90284729]
[537.57891846 225.10235596]
[522.92413330 228.30184937]
[512.14013672 238.57580566]
[497.00717163 233.96014404]
[482.35235596 237.15963745]
[467.69757080 240.35913086]
[465.22863770 255.15454102]
[478.05053711 262.93908691]
[490.87243652 270.72363281]
[503.69430542 278.50817871]
[516.58013916 286.18646240]
[529.52899170 293.75793457]
[542.47784424 301.32940674]
[555.48883057 308.79357910]
[568.56109619 316.14993286]
[581.63336182 323.50628662]
[597.40832520 320.58557129]
[609.43243408 331.20629883]
[608.48187256 347.22116089]
[595.28576660 356.34494019]
[579.96710205 351.57864380]
[574.27697754 336.57855225]
[561.20471191 329.22219849]
[548.13244629 321.86584473]
[540.74810791 321.32443237]
[534.90631104 314.27825928]
[521.95751953 306.70678711]
[509.00863647 299.13528442]
[501.63421631 298.47186279]
[495.90979004 291.33007812]
[483.08789062 283.54553223]
[470.26599121 275.76098633]
[457.44409180 267.97644043]
[445.41241455 254.14152527]
[445.81784058 239.99731445]
[431.27682495 236.31503296]
[416.73583984 232.63275146]
[402.19482422 228.95046997]
[387.65380859 225.26818848]
[373.11282349 221.58590698]
[358.57180786 217.90362549]
[344.33459473 222.27980042]
[332.85610962 211.39152527]
[318.31509399 207.70924377]
[303.77410889 204.02696228]
[312.91091919 215.92311096]
[315.74591064 230.65277100]
[311.67755127 245.09051514]
[301.56906128 256.17288208]
[287.56533813 261.54833984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 114]
[7 113]
[8 112]
[9 111]
[10 110]
[11 109]
[12 108]
[13 107]
[15 104]
[16 103]
[17 102]
[18 101]
[19 100]
[20 28]
[21 27]
[22 26]
[35 69]
[36 68]
[38 66]
[39 65]
[40 64]
[41 63]
[42 60]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[70 92]
[71 91]
[72 90]
[73 89]
[74 88]
[75 87]
[76 86]
[116 184]
[117 183]
[118 182]
[120 180]
[121 179]
[122 178]
[123 177]
[124 176]
[125 175]
[126 174]
[127 145]
[128 144]
[129 143]
[131 141]
[132 140]
[133 139]
[146 172]
[147 171]
[148 170]
[149 169]
[150 167]
[151 166]
[152 165]
[153 163]
[154 162]
[155 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
