%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUUUUUUUAACUUUUACUUAUUCAUUAGGAUGAUUUCAUAAUAUAUUUCCUGGUUUAGAGGAAACAGGAACA\
) } def
/len { sequence length } bind def

/coor [
[149.33106995 179.92539978]
[137.56956482 186.08224487]
[125.05750275 190.51931763]
[112.04483795 193.14797974]
[98.79153442 193.91572571]
[85.56237030 192.80722046]
[72.62165070 189.84458923]
[60.22789383 185.08703613]
[48.62871170 178.62960815]
[38.05583191 170.60130310]
[28.72047615 161.16252136]
[20.80915451 150.50183105]
[14.47991467 138.83219910]
[9.85920620 126.38677979]
[7.03934145 113.41419983]
[6.07665539 100.17362976]
[6.99038124 86.92958832]
[9.76226425 73.94667053]
[14.33692646 61.48425293]
[20.62297630 49.79130554]
[28.49483109 39.10143280]
[17.88822937 28.49483109]
[7.28162718 17.88822937]
[-3.32497454 7.28162718]
[-13.93157673 -3.32497454]
[-24.53817749 -13.93157673]
[-40.50995636 -17.65102959]
[-45.01514816 -33.41920090]
[-33.41920090 -45.01514816]
[-17.65102959 -40.50995636]
[-13.93157673 -24.53817749]
[-3.32497454 -13.93157673]
[7.28162718 -3.32497454]
[17.88822937 7.28162718]
[28.49483109 17.88822937]
[39.10143280 28.49483109]
[53.16776276 18.58522034]
[68.80583191 11.40796566]
[85.49079895 7.20394468]
[102.66271210 6.11424637]
[119.74526215 8.17544270]
[136.16514587 13.31835747]
[151.37129211 21.37038994]
[164.85336304 32.06130600]
[176.15890503 45.03231049]
[184.90846252 59.84807968]
[190.80842590 76.01139069]
[193.66078186 92.97977448]
[193.36978149 110.18376923]
[189.94520569 127.04598236]
[203.91906738 132.49861145]
[217.89292908 137.95121765]
[231.86680603 143.40383911]
[245.84066772 148.85646057]
[259.81454468 154.30908203]
[274.14630127 148.20678711]
[288.24011230 153.93559265]
[293.96939087 167.63635254]
[307.94326782 173.08897400]
[324.06387329 170.07936096]
[334.52362061 182.70971680]
[328.56240845 197.98701477]
[312.31262207 200.19528198]
[302.49066162 187.06283569]
[288.51678467 181.61021423]
[275.02233887 187.80986023]
[260.77316284 182.47920227]
[254.36190796 168.28294373]
[240.38804626 162.83032227]
[226.41418457 157.37771606]
[212.44032288 151.92509460]
[198.46644592 146.47247314]
[184.49258423 141.01985168]
[177.86517334 152.52275085]
[169.68215942 162.97636414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
