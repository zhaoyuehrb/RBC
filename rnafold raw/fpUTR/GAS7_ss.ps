%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCCCCGCCUGCCUGAGGACCCCCGCGCACCCCAGAGACGGCGCGCGCCCAGAGCGCGGGAGCCCGGAGCGCCGGGCGCCUGGGACCCCGCGGAGCCGCUGCCCAGCCCGUGGGGCUCGGCGGGAAUGCAGGCUGCGCUGUGAACCCGGGCGCCAAGGCC\
) } def
/len { sequence length } bind def

/coor [
[27.49817657 133.69094849]
[17.88653183 125.06645203]
[3.16770291 127.95713043]
[-11.55112648 130.84782410]
[-26.11257172 134.44841003]
[-40.48241425 138.75045776]
[-54.85225677 143.05250549]
[-69.22209930 147.35455322]
[-83.59194183 151.65661621]
[-88.45689392 156.25044250]
[-94.06987762 157.47547913]
[-98.60293579 155.83520508]
[-113.12878418 159.57682800]
[-127.61767578 163.45910645]
[-142.06823730 167.48168945]
[-156.51879883 171.50428772]
[-163.99089050 176.84553528]
[-171.28866577 175.46185303]
[-185.81451416 179.20347595]
[-174.60827637 189.17445374]
[-175.21833801 204.16204834]
[-187.19786072 213.18927002]
[-201.77301025 209.64457703]
[-208.26889038 196.12408447]
[-201.92845154 182.53073120]
[-216.74830627 184.84852600]
[-231.56814575 187.16630554]
[-246.38800049 189.48408508]
[-261.20785522 191.80186462]
[-273.64672852 201.57862854]
[-287.41668701 195.90084839]
[-302.23654175 198.21862793]
[-309.18780518 212.09161377]
[-322.98129272 219.19932556]
[-338.31311035 216.80871582]
[-349.28787231 205.83900452]
[-351.68554688 190.50830078]
[-344.58419800 176.71154785]
[-330.71441650 169.75387573]
[-315.40942383 172.31068420]
[-304.55432129 183.39878845]
[-289.73446655 181.08100891]
[-278.35562134 171.47003174]
[-263.52563477 176.98200989]
[-248.70578003 174.66423035]
[-233.88592529 172.34645081]
[-219.06608582 170.02867126]
[-204.24623108 167.71089172]
[-189.55612183 164.67762756]
[-175.03027344 160.93600464]
[-160.54139709 157.05372620]
[-146.09082031 153.03112793]
[-131.64025879 149.00854492]
[-126.01203918 144.16136169]
[-116.87040710 145.05097961]
[-102.34455109 141.30935669]
[-87.89398956 137.28675842]
[-73.52414703 132.98471069]
[-59.15430450 128.68266296]
[-44.78446198 124.38062286]
[-30.41462135 120.07857513]
[-41.99905014 110.54961395]
[-41.97060776 95.54964447]
[-30.35012436 86.06468964]
[-15.64848518 89.04157257]
[-8.63322544 102.30000305]
[-14.44181061 116.12899017]
[0.27701902 113.23830414]
[14.99584866 110.34761810]
[23.74401283 96.01017761]
[40.47911072 92.34041595]
[54.98402023 102.07714081]
[69.64402771 98.90158081]
[84.30403900 95.72602081]
[96.40212250 84.13540649]
[112.31665039 89.37313843]
[126.91232300 85.91389465]
[141.50799561 82.45465851]
[156.10366821 78.99542236]
[170.69934082 75.53618622]
[185.29501343 72.07694244]
[199.89068604 68.61770630]
[214.48635864 65.15847015]
[229.08203125 61.69923019]
[243.67770386 58.23999405]
[251.99827576 45.07162857]
[266.84963989 41.77139282]
[279.35238647 49.78493881]
[293.91384888 46.18434143]
[305.34777832 35.24928665]
[319.60275269 39.56730652]
[334.12860107 35.82568741]
[348.65444946 32.08407211]
[360.08840942 21.14901543]
[374.34335327 25.46703529]
[388.86920166 21.72541809]
[403.39505005 17.98380089]
[417.92089844 14.24218369]
[432.40979004 10.35989761]
[446.86035156 6.33730841]
[461.09899902 1.61913705]
[475.09225464 -3.78352880]
[489.08551025 -9.18619442]
[503.07876587 -14.58886051]
[513.16589355 -26.77737617]
[527.82580566 -24.14345551]
[541.81903076 -29.54612160]
[555.81231689 -34.94878769]
[569.80554199 -40.35145187]
[583.79882812 -45.75411987]
[596.39709473 -57.09955215]
[610.78674316 -48.13431549]
[606.15527344 -31.82523346]
[589.20147705 -31.76086235]
[575.20819092 -26.35819626]
[561.21496582 -20.95553207]
[547.22167969 -15.55286503]
[533.22845459 -10.15019989]
[524.14221191 1.65188169]
[508.48144531 -0.59560502]
[494.48818970 4.80706072]
[480.49493408 10.20972633]
[466.50167847 15.61239243]
[478.78967285 24.21498871]
[479.92370605 39.17205811]
[469.07318115 49.52899170]
[454.18505859 47.70032883]
[446.16348267 35.02539062]
[450.88293457 20.78787231]
[436.43237305 24.81046104]
[430.80416870 29.65764236]
[421.66253662 28.76803207]
[407.13668823 32.50965118]
[392.61083984 36.25126648]
[378.08499146 39.99288559]
[367.69000244 50.66031265]
[352.39605713 46.60992050]
[337.87020874 50.35153580]
[323.34436035 54.09315491]
[312.94940186 64.76058197]
[297.65545654 60.71018982]
[291.93429565 65.44731903]
[282.81164551 64.38060760]
[275.23522949 77.15299988]
[260.48242188 80.86907959]
[247.13694763 72.83567047]
[232.54127502 76.29490662]
[217.94560242 79.75414276]
[203.34992981 83.21337891]
[188.75425720 86.67262268]
[174.15858459 90.13185883]
[159.56291199 93.59109497]
[144.96723938 97.05033112]
[130.37156677 100.50957489]
[115.77588654 103.96881104]
[109.05222321 113.51618958]
[97.66407776 116.09886932]
[87.47959900 110.38603210]
[72.81958771 113.56158447]
[58.15958023 116.73714447]
[52.20166779 128.84960938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 69]
[3 68]
[4 67]
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[12 56]
[13 55]
[14 53]
[15 52]
[16 51]
[18 50]
[19 49]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[31 42]
[32 41]
[72 160]
[73 159]
[74 158]
[76 155]
[77 154]
[78 153]
[79 152]
[80 151]
[81 150]
[82 149]
[83 148]
[84 147]
[85 146]
[88 143]
[89 141]
[91 139]
[92 138]
[93 137]
[95 135]
[96 134]
[97 133]
[98 132]
[99 130]
[100 129]
[101 123]
[102 122]
[103 121]
[104 120]
[106 118]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
