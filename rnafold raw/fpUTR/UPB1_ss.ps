%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUGGGAGCGAGAGUAAGAGAUAAAGGCAAGGGCGCCUGACCGGGCCUGGGCACCUCCUCCCACUGCGGGCAAAGGGCAGGCAGUUCGUGCGCGGACACAAGCACUGGCGGACCGUGGCC\
) } def
/len { sequence length } bind def

/coor [
[88.62450409 142.47822571]
[78.98189545 130.98822021]
[80.05144501 116.02640533]
[91.22933197 106.02520752]
[76.47235870 103.33599854]
[61.71539307 100.64678955]
[46.95842361 97.95757294]
[32.20145416 95.26836395]
[17.44448471 92.57915497]
[8.31878853 94.12741852]
[2.34429288 89.62602997]
[-12.33854198 86.55775452]
[-27.02137756 83.48947144]
[-36.18391418 84.80225372]
[-42.04052734 80.14852905]
[-56.63949203 76.70321655]
[-47.48990631 88.58955383]
[-44.75627899 103.33836365]
[-49.03828430 117.71419525]
[-59.39657593 128.56341553]
[-73.55886078 133.50605774]
[-88.41836548 131.45783997]
[-100.71535492 122.86808014]
[-107.75225067 109.62110901]
[-107.98536682 94.62292480]
[-101.36356354 81.16365814]
[-89.33946228 72.19588470]
[-74.54885864 69.68697357]
[-87.60314178 62.29875565]
[-102.65822601 66.29652405]
[-115.79187012 58.61785507]
[-119.51035309 44.24049377]
[-132.56463623 36.85227585]
[-145.61891174 29.46405220]
[-158.67318726 22.07583237]
[-167.80097961 20.53997231]
[-171.96493530 14.32559013]
[-184.82466125 6.60369825]
[-200.67565918 9.07861996]
[-212.39564514 -1.87680817]
[-210.99404907 -17.85851860]
[-197.54605103 -26.60671234]
[-182.36779785 -21.41052246]
[-177.10276794 -6.25602150]
[-164.24304199 1.46587074]
[-151.28497314 9.02155304]
[-138.23069763 16.40977478]
[-125.17641449 23.79799461]
[-112.12213135 31.18621635]
[-97.88196564 26.97276497]
[-84.53781891 34.27951050]
[-80.21492004 49.24447632]
[-67.16063690 56.63269806]
[-53.19417572 62.10425186]
[-38.59521103 65.54956818]
[-23.95309639 68.80663300]
[-9.27026176 71.87491608]
[5.41257381 74.94319916]
[20.13369560 77.82218170]
[34.89066696 80.51139069]
[49.64763641 83.20060730]
[64.40460205 85.88981628]
[79.16157532 88.57902527]
[93.91854095 91.26824188]
[108.83904266 92.81055450]
[123.83406830 93.19676971]
[138.82910156 93.58299255]
[153.82412720 93.96920776]
[168.81915283 94.35543060]
[183.81417847 94.74164581]
[189.20384216 84.39655304]
[198.06298828 76.88781738]
[209.05317688 73.29861450]
[220.53324890 74.12380981]
[230.80438232 79.20209503]
[238.36141968 87.74570465]
[242.11351013 98.46236420]
[256.63610840 92.18502045]
[268.50036621 101.18994141]
[283.42083740 102.73226166]
[298.34133911 104.27457428]
[313.28045654 105.62465668]
[328.23571777 106.78228760]
[346.80120850 96.23994446]
[363.53573608 108.20696259]
[378.53573608 108.20696259]
[393.53573608 108.20696259]
[408.53573608 108.20696259]
[423.53573608 108.20696259]
[437.45953369 99.54326630]
[451.79498291 107.50739288]
[451.79498291 123.90653992]
[437.45953369 131.87066650]
[423.53573608 123.20696259]
[408.53573608 123.20696259]
[393.53573608 123.20696259]
[378.53573608 123.20696259]
[363.53573608 123.20696259]
[358.23226929 130.58366394]
[349.97375488 134.69219971]
[340.61364746 134.46585083]
[332.32110596 129.82756042]
[327.07809448 121.73755646]
[312.12283325 120.57992554]
[305.12835693 123.23213959]
[296.79904175 119.19506836]
[281.87854004 117.65275574]
[266.95803833 116.11044312]
[253.50267029 122.49810028]
[240.57119751 113.38286591]
[229.06500244 127.95629883]
[210.99313354 132.82400513]
[193.44892883 125.89275360]
[183.42796326 109.73667145]
[168.43293762 109.35045624]
[153.43789673 108.96424103]
[138.44287109 108.57801819]
[123.44784546 108.19180298]
[108.45281982 107.80558014]
[117.34886932 119.88284302]
[115.33450317 134.74697876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 64]
[5 63]
[6 62]
[7 61]
[8 60]
[9 59]
[11 58]
[12 57]
[13 56]
[15 55]
[16 54]
[28 53]
[29 52]
[32 49]
[33 48]
[34 47]
[35 46]
[37 45]
[38 44]
[65 119]
[66 118]
[67 117]
[68 116]
[69 115]
[70 114]
[77 110]
[79 108]
[80 107]
[81 106]
[82 104]
[83 103]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
