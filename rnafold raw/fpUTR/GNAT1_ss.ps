%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGAUUGCAGGUCCUCCUGGGGCCAGAAGGGUGCCUGGGAGGCCAGGUUCUGGGGAUCCCCUCCAUCCAGAAGAACCACCUGCUCACUCUGUCCCUUCGCCUGCUGCUGGGACC\
) } def
/len { sequence length } bind def

/coor [
[172.80711365 250.78703308]
[166.52586365 238.35809326]
[166.23956299 224.36862183]
[172.06204224 211.57217407]
[162.73219299 199.82679749]
[153.40235901 188.08140564]
[148.71952820 186.65382385]
[144.93826294 182.19171143]
[143.90736389 175.44586182]
[135.22143555 163.21661377]
[126.53549957 150.98736572]
[117.84956360 138.75810242]
[109.16362762 126.52886200]
[100.47769928 114.29960632]
[87.19585419 107.32876587]
[72.19720459 107.12738037]
[57.19855881 106.92600250]
[42.19990921 106.72462463]
[27.20126343 106.52324677]
[12.20261478 106.32186890]
[-2.79603362 106.12049103]
[-17.79468155 105.91911316]
[-32.79333115 105.71773529]
[-47.79333115 105.71773529]
[-62.79197693 105.91911316]
[-77.79062653 106.12049103]
[-89.96670532 116.56667328]
[-105.69788361 113.41870117]
[-112.91653442 99.09143066]
[-106.08514404 84.57552338]
[-90.44415283 81.00634003]
[-77.99200439 91.12184906]
[-62.99335480 90.92046356]
[-47.99470901 90.71908569]
[-41.26102829 87.44015503]
[-32.59195328 90.71908569]
[-17.59330368 90.92046356]
[-2.59465551 91.12184906]
[12.40399265 91.32322693]
[27.40264130 91.52460480]
[42.40128708 91.72598267]
[57.39993668 91.92736053]
[72.39858246 92.12873840]
[87.39723206 92.33011627]
[77.24269867 81.28993988]
[82.66233063 67.30325317]
[97.60453033 65.98769379]
[105.38469696 78.81341553]
[109.36415100 64.35091400]
[113.34361267 49.88841248]
[117.32307434 35.42591095]
[121.30252838 20.96341324]
[125.28199005 6.50091267]
[116.36074829 -8.47368050]
[120.87760162 -24.96076584]
[135.59526062 -32.97583389]
[139.18499756 -47.53995895]
[142.77473450 -62.10408783]
[146.36447144 -76.66821289]
[136.99351501 -89.18697357]
[137.91346741 -104.79747009]
[148.68994141 -116.12891388]
[164.23461914 -117.83093262]
[177.20779419 -109.09989929]
[181.48390198 -94.05832672]
[175.04391479 -79.80839539]
[160.92858887 -73.07848358]
[157.33885193 -58.51435471]
[153.74913025 -43.95022583]
[150.15939331 -29.38609886]
[158.33642578 -19.33016396]
[159.20077515 -6.20226192]
[152.20823669 5.17195082]
[139.74449158 10.48037148]
[135.76502991 24.94287109]
[131.78556824 39.40537262]
[127.80611420 53.86787033]
[123.82665253 68.33036804]
[119.84719849 82.79286957]
[112.70694733 105.61367798]
[121.39288330 117.84292603]
[130.07881165 130.07217407]
[138.76475525 142.30142212]
[147.45068359 154.53067017]
[156.13661194 166.75991821]
[165.14775085 178.75157166]
[174.47758484 190.49694824]
[183.80741882 202.24234009]
[200.07138062 199.63009644]
[215.35978699 205.50674438]
[225.56950378 218.19451904]
[228.01106262 234.20146179]
[222.11656189 249.18215942]
[231.75837708 260.67282104]
[241.40019226 272.16348267]
[251.04200745 283.65417480]
[260.68383789 295.14483643]
[271.72006226 295.48355103]
[280.52438354 301.77322388]
[284.26629639 311.68966675]
[281.91183472 321.79681396]
[290.92297363 333.78845215]
[306.54092407 337.45706177]
[313.27984619 352.01614380]
[305.97018433 366.29721069]
[290.21929932 369.34503174]
[278.10992432 358.82159424]
[278.93133545 342.79959106]
[269.92019653 330.80795288]
[251.65324402 324.70672607]
[249.19316101 304.78665161]
[239.55134583 293.29598999]
[229.90953064 281.80529785]
[220.26771545 270.31463623]
[210.62590027 258.82397461]
[197.29122925 262.08105469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 88]
[5 87]
[6 86]
[9 85]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[15 44]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 34]
[25 33]
[26 32]
[48 79]
[49 78]
[50 77]
[51 76]
[52 75]
[53 74]
[56 70]
[57 69]
[58 68]
[59 67]
[93 115]
[94 114]
[95 113]
[96 112]
[97 111]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
