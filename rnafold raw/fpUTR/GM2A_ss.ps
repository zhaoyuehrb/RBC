%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCGGUCCAAUUCUCGGCCGGGAAGUCUCUGGCCGGGACGGGGCAGGGCGAACCUGCCAGUGACUGGACUCAGCUUCUUUGCGUAACCAAUACUGGAAGGCAUUUAAAGGCACCUCUGCCGCCACAGACCUUGCAGUUAACUCCGCCCUGACCCACCCUUCCCG\
) } def
/len { sequence length } bind def

/coor [
[-0.97325867 365.55847168]
[-17.34598160 364.62789917]
[-24.48381042 349.86364746]
[-15.04395771 336.45388794]
[-14.19277859 321.47805786]
[-13.34159946 306.50222778]
[-19.84858513 302.77273560]
[-27.30757332 315.78671265]
[-34.76676178 328.80056763]
[-47.78050613 321.34118652]
[-40.32154846 308.32772827]
[-32.86256027 295.31375122]
[-39.36954498 291.58425903]
[-51.86126709 299.88827515]
[-64.35298920 308.19232178]
[-76.84471893 316.49633789]
[-89.33644104 324.80035400]
[-101.82816315 333.10437012]
[-114.31988525 341.40841675]
[-126.81160736 349.71243286]
[-139.30332947 358.01644897]
[-151.79505920 366.32049561]
[-164.28677368 374.62451172]
[-168.85066223 390.00469971]
[-183.77441406 395.89212036]
[-197.60978699 387.77041626]
[-199.74348450 371.86990356]
[-188.53871155 360.38806152]
[-172.59080505 362.13278198]
[-160.09909058 353.82876587]
[-147.60736084 345.52474976]
[-135.11563110 337.22070312]
[-122.62390900 328.91668701]
[-110.13218689 320.61267090]
[-97.64046478 312.30862427]
[-85.14874268 304.00460815]
[-72.65702057 295.70059204]
[-60.16529465 287.39654541]
[-47.67357254 279.09252930]
[-42.90396118 249.50767517]
[-21.05088997 232.74415588]
[3.93362570 235.35232544]
[12.23765182 222.86059570]
[20.54167747 210.36888123]
[28.72712898 197.79913330]
[36.79327011 185.15249634]
[44.85941696 172.50587463]
[52.92556000 159.85923767]
[60.99170303 147.21260071]
[69.05784607 134.56596375]
[77.12399292 121.91933441]
[68.60519409 104.25853729]
[72.11154938 84.96658325]
[86.30002594 71.43288422]
[83.19986725 56.75675201]
[80.09970856 42.08061218]
[69.67727661 30.17752457]
[74.61708069 16.12591934]
[71.51692200 1.44978225]
[68.41676331 -13.22635460]
[65.31659698 -27.90249252]
[62.21643829 -42.57862854]
[59.11627579 -57.25476456]
[48.73390198 -64.95627594]
[46.47251129 -77.27601624]
[53.01082230 -87.48610687]
[50.18894958 -102.21828461]
[47.36707687 -116.95046234]
[33.91138458 -120.85916138]
[23.50854492 -130.14691162]
[18.15679550 -142.95301819]
[18.85097504 -156.74871826]
[25.39810562 -168.83641052]
[36.46633911 -176.87718201]
[33.92376709 -191.66012573]
[20.87289238 -200.57360840]
[18.02946281 -216.12001038]
[27.08043480 -229.07591248]
[42.65602493 -231.75482178]
[55.51551437 -222.56738281]
[58.02959442 -206.96434021]
[48.70670700 -194.20269775]
[51.24927902 -179.41976929]
[66.52568817 -174.21507263]
[77.16367340 -161.95436096]
[80.19687653 -145.91242981]
[74.70705414 -130.43743896]
[62.09925461 -119.77233887]
[64.92112732 -105.04016113]
[67.74299622 -90.30798340]
[79.92053223 -77.69784546]
[73.79241180 -60.35492706]
[76.89257812 -45.67879105]
[79.99273682 -31.00265312]
[83.09289551 -16.32651520]
[86.19306183 -1.65037894]
[89.29322052 13.02575779]
[99.49390411 23.87911224]
[94.77584076 38.98045349]
[97.87600708 53.65658951]
[100.97616577 68.33272552]
[110.62143707 70.15114594]
[119.24730682 74.83434296]
[126.02589417 81.93284607]
[130.30661011 90.76536560]
[145.28244019 89.91418457]
[160.25827026 89.06300354]
[175.23410034 88.21182251]
[185.73107910 76.70307159]
[200.93081665 76.05319214]
[211.83796692 86.13137817]
[226.81379700 85.28019714]
[241.78962708 84.42901611]
[253.17338562 71.17414856]
[270.28353882 70.24936676]
[282.53744507 81.73901367]
[297.49447632 80.60458374]
[312.45150757 79.47014618]
[327.40856934 78.33571625]
[337.51528931 66.18542480]
[353.26077271 64.82361603]
[365.30355835 75.05823517]
[366.49880981 90.81726074]
[356.13745117 102.75114441]
[340.36666870 103.77972412]
[328.54299927 93.29276276]
[313.58593750 94.42719269]
[298.62890625 95.56162262]
[283.67187500 96.69605255]
[276.70700073 107.56711578]
[264.56619263 112.50266266]
[251.61212158 109.48660278]
[242.64080811 99.40484619]
[227.66497803 100.25602722]
[212.68914795 101.10720825]
[202.99417114 112.35634613]
[187.81867981 113.43289948]
[176.08528137 103.18765259]
[161.10945129 104.03883362]
[146.13362122 104.89001465]
[131.15779114 105.74119568]
[125.94011688 118.19008636]
[116.01393127 127.33721161]
[103.18097687 131.52221680]
[89.77062225 129.98547363]
[81.70447540 142.63211060]
[73.63833618 155.27874756]
[65.57218933 167.92538452]
[57.50605011 180.57200623]
[49.43990326 193.21864319]
[41.37376022 205.86528015]
[39.38315964 214.82643127]
[33.03340149 218.67289734]
[24.72937584 231.16462708]
[16.42535019 243.65634155]
[22.48742867 250.02294922]
[26.79496956 258.05844116]
[28.88913155 267.26702881]
[28.45410347 277.02764893]
[25.35076904 286.63607788]
[19.63801956 295.35540771]
[11.57945347 302.47222900]
[1.63423121 307.35342407]
[0.78305209 322.32925415]
[-0.06812702 337.30508423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 165]
[5 164]
[6 163]
[13 39]
[14 38]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[42 155]
[43 154]
[44 153]
[45 151]
[46 150]
[47 149]
[48 148]
[49 147]
[50 146]
[51 145]
[54 101]
[55 100]
[56 99]
[58 97]
[59 96]
[60 95]
[61 94]
[62 93]
[63 92]
[66 90]
[67 89]
[68 88]
[74 83]
[75 82]
[105 141]
[106 140]
[107 139]
[108 138]
[111 135]
[112 134]
[113 133]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
