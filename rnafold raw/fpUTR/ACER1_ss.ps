%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAUCAGGGCCCAGCCUUCCCAAGCUCGCCUUCUCUCUGCCGGGCGCAGCCGGCUGGUGGUGGCCACUGAGACAAG\
) } def
/len { sequence length } bind def

/coor [
[90.99388885 289.64837646]
[92.60581207 274.09408569]
[103.87461853 263.25213623]
[102.68286896 248.29954529]
[98.91002655 241.70504761]
[101.75308228 232.73081970]
[101.15673828 217.74267578]
[100.56038666 202.75453186]
[99.96404266 187.76640320]
[99.06980896 172.79307556]
[97.87805939 157.84048462]
[96.68630981 142.88790894]
[95.49455261 127.93532562]
[94.00574493 113.00939178]
[85.77787018 101.70481110]
[91.10086823 88.77587891]
[89.31559753 73.88249969]
[87.53032684 58.98911667]
[75.38816833 49.23177338]
[73.78981018 34.10233688]
[83.16677094 22.58677483]
[81.38149261 7.69339323]
[72.19206238 1.25827432]
[68.28882599 -9.02118492]
[70.78794861 -19.49985504]
[78.58113098 -26.61038399]
[77.98478699 -41.59852600]
[77.38843536 -56.58666611]
[76.49420929 -71.55998993]
[75.30245972 -86.51257324]
[74.11071014 -101.46515656]
[72.91895294 -116.41773224]
[71.72720337 -131.37031555]
[57.82364273 -137.89616394]
[49.05890274 -150.50865173]
[47.79064941 -165.81509399]
[54.36004257 -179.69812012]
[66.99994659 -188.42329407]
[82.31028748 -189.64355469]
[96.17266083 -183.03068542]
[104.85816193 -170.36349487]
[106.03042603 -155.04940796]
[99.37413788 -141.20782471]
[86.67978668 -132.56207275]
[87.87153625 -117.60948944]
[89.06328583 -102.65690613]
[90.25504303 -87.70432281]
[91.44679260 -72.75173950]
[95.21963501 -66.15724945]
[92.37657928 -57.18301392]
[92.97292328 -42.19487381]
[93.56927490 -27.20673180]
[105.19478607 -11.96266842]
[96.27487946 5.90812063]
[98.06015015 20.80150223]
[109.89309692 29.77462769]
[111.91577911 44.85320282]
[102.42370605 57.20384216]
[104.20897675 72.09722137]
[105.99425507 86.99060822]
[114.22212982 98.29518890]
[108.89913177 111.22412109]
[113.12779236 119.63472748]
[110.44713593 126.74357605]
[111.63889313 141.69615173]
[112.83064270 156.64874268]
[114.02239227 171.60131836]
[117.91333771 180.17338562]
[114.95217896 187.17004395]
[115.54853058 202.15818787]
[116.14487457 217.14633179]
[116.74122620 232.13447571]
[117.63545227 247.10778809]
[118.82720184 262.06036377]
[131.67109680 270.98049927]
[135.72644043 286.08306885]
[129.07841492 300.23715210]
[114.86604309 306.75961304]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 74]
[4 73]
[6 72]
[7 71]
[8 70]
[9 69]
[10 67]
[11 66]
[12 65]
[13 64]
[14 62]
[16 60]
[17 59]
[18 58]
[21 55]
[22 54]
[26 52]
[27 51]
[28 50]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
