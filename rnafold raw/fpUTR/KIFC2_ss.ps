%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCACUGCGGCGGGCGGGCGCCGAGUCUGGGCGCGGGGACGCGGGGCGGCGCGAAGCGGGGCCCUCUGCCGCCCCGCGCUCCC\
) } def
/len { sequence length } bind def

/coor [
[94.28391266 111.50409698]
[81.02218628 118.51312256]
[74.70826721 125.45952606]
[67.13093567 125.52574921]
[53.61640549 132.03401184]
[40.10187149 138.54226685]
[33.53263474 145.24772644]
[25.95812798 145.03057861]
[12.20969486 151.02896118]
[-1.53873897 157.02734375]
[-15.28717232 163.02571106]
[-29.03560638 169.02409363]
[-34.57552719 183.82560730]
[-48.99351501 190.29841614]
[-63.73563004 184.60231018]
[-70.05564117 170.11669922]
[-64.20399475 155.43563843]
[-49.65236664 149.26911926]
[-35.03398514 155.27566528]
[-21.28555298 149.27728271]
[-7.53711939 143.27890015]
[6.21131468 137.28051758]
[19.95974922 131.28213501]
[33.59361649 125.02773285]
[47.10814667 118.51947021]
[60.62268066 112.01121521]
[74.01315308 105.25139618]
[87.27488708 98.24236298]
[100.12275696 90.50077057]
[112.51633453 82.05097198]
[124.90991974 73.60116577]
[137.30349731 65.15136719]
[149.69708252 56.70156479]
[162.09066772 48.25176620]
[174.48423767 39.80196381]
[186.87782288 31.35216331]
[199.27140808 22.90236282]
[211.66499329 14.45256138]
[214.72648621 -0.82045287]
[227.41571045 -9.21320152]
[241.95733643 -6.20040751]
[254.35090637 -14.65020847]
[266.74450684 -23.10000992]
[279.13806152 -31.54981041]
[291.53164673 -39.99961090]
[303.92523193 -48.44941330]
[309.42169189 -56.05907059]
[316.94396973 -56.97327042]
[329.64483643 -64.95375061]
[342.34570312 -72.93423462]
[349.91415405 -86.82772827]
[364.80712891 -87.04768372]
[368.07913208 -102.50955963]
[381.37133789 -111.05895996]
[396.79776001 -107.62368011]
[405.20614624 -94.24180603]
[401.60797119 -78.85256958]
[388.13793945 -70.58612823]
[372.78759766 -74.34682465]
[366.12762451 -61.02414322]
[350.32617188 -60.23337173]
[337.62530518 -52.25288773]
[324.92446899 -44.27240753]
[312.37503052 -36.05583191]
[299.98144531 -27.60602951]
[287.58789062 -19.15622902]
[275.19430542 -10.70642757]
[262.80072021 -2.25662661]
[250.40713501 6.19317436]
[247.89901733 20.83028221]
[235.45053101 29.57613373]
[220.11479187 26.84614372]
[207.72120667 35.29594421]
[195.32762146 43.74574661]
[182.93405151 52.19554520]
[170.54046631 60.64534760]
[158.14688110 69.09514618]
[145.75329590 77.54495239]
[133.35971069 85.99475098]
[120.96613312 94.44454956]
[108.57255554 102.89434814]
[107.30006409 106.83069611]
[104.18235016 110.11650848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[4 26]
[5 25]
[6 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[29 81]
[30 80]
[31 79]
[32 78]
[33 77]
[34 76]
[35 75]
[36 74]
[37 73]
[38 72]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[48 63]
[49 62]
[50 61]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
