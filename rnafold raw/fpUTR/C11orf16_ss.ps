%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUAACCGGCGUGGCAACCAGGAGUCGGUUGGGCUGAGACCCUGAGCCCCAACUGUCAGAAGGAGCCUGAGGCUGAGGUGGAGGCUGGGAGUUUGGGGCUGUGGGUGGAUCCUCUGAAGGCC\
) } def
/len { sequence length } bind def

/coor [
[56.54077911 192.64448547]
[49.98915100 206.13804626]
[35.41316986 209.67933655]
[23.40070152 200.69598389]
[22.67719650 185.71418762]
[10.43210793 194.37777710]
[-1.81298113 203.04136658]
[-14.05807018 211.70495605]
[-26.30315781 220.36854553]
[-38.54824829 229.03213501]
[-50.79333496 237.69572449]
[-63.03842545 246.35931396]
[-70.50151062 265.00537109]
[-89.73348236 266.21929932]
[-101.52780914 275.48721313]
[-113.32213593 284.75509644]
[-122.04047394 299.29562378]
[-138.42622375 294.94320679]
[-138.77995300 277.99295044]
[-122.59002686 272.96078491]
[-110.79570770 263.69287109]
[-99.00138092 254.42498779]
[-98.67868805 244.07516479]
[-92.53481293 235.46696472]
[-82.43863678 231.64091492]
[-71.70201874 234.11422729]
[-59.45692825 225.45063782]
[-47.21183777 216.78704834]
[-34.96675110 208.12345886]
[-22.72166061 199.45986938]
[-10.47657204 190.79627991]
[1.76851714 182.13269043]
[14.01360607 173.46910095]
[25.69054031 164.05372620]
[36.75323868 153.92373657]
[47.81593323 143.79374695]
[58.87863159 133.66374207]
[69.41838074 122.99071503]
[79.40856171 111.80159760]
[89.39873505 100.61248016]
[98.66663361 88.81815338]
[107.17566681 76.46516418]
[115.68470001 64.11217499]
[124.19373322 51.75918579]
[121.53719330 36.41055298]
[130.34252930 24.00407982]
[144.99148560 21.56606102]
[153.50051880 9.21307182]
[162.00955200 -3.13991714]
[170.51858521 -15.49290657]
[179.02761841 -27.84589577]
[187.53665161 -40.19888306]
[196.04568481 -52.55187225]
[204.55471802 -64.90486145]
[212.90785217 -77.36380005]
[221.10377502 -89.92671967]
[222.16389465 -105.71237183]
[235.59822083 -112.14420319]
[243.79412842 -124.70712280]
[251.99005127 -137.27003479]
[260.18597412 -149.83296204]
[252.37738037 -162.90151978]
[251.02275085 -178.00291443]
[256.33743286 -192.13706970]
[267.21710205 -202.51942444]
[281.46691895 -207.12944031]
[296.24401855 -205.10369873]
[304.43991089 -217.66662598]
[312.63583374 -230.22955322]
[320.83175659 -242.79246521]
[316.11825562 -257.70275879]
[322.13940430 -272.13467407]
[336.05221558 -279.27386475]
[351.28744507 -275.74945068]
[360.65151978 -263.22552490]
[359.72299194 -247.61553955]
[348.94027710 -236.29002380]
[333.39468384 -234.59655762]
[325.19876099 -222.03363037]
[317.00283813 -209.47071838]
[308.80691528 -196.90779114]
[316.61474609 -184.19938660]
[318.13681030 -169.29997253]
[313.01794434 -155.15930176]
[302.22311401 -144.60035706]
[287.85589600 -139.75572205]
[272.74887085 -141.63703918]
[264.55297852 -129.07412720]
[256.35705566 -116.51120758]
[248.16113281 -103.94828796]
[247.68722534 -89.06121826]
[233.66668701 -81.73080444]
[225.47077942 -69.16788483]
[224.43960571 -61.76403427]
[216.90771484 -56.39582825]
[208.39868164 -44.04283905]
[199.88963318 -31.68984985]
[191.38059998 -19.33686066]
[182.87156677 -6.98387194]
[174.36253357 5.36911678]
[165.85350037 17.72210503]
[157.34446716 30.07509422]
[160.28761292 44.63097000]
[151.83421326 57.27987289]
[136.54672241 60.26821899]
[128.03768921 72.62120819]
[119.52865601 84.97419739]
[111.01962280 97.32718658]
[126.01005554 97.86275482]
[135.14309692 109.76181793]
[131.78456116 124.38098907]
[118.37408447 131.10102844]
[104.65290833 125.04055786]
[100.58785248 110.60266113]
[90.59767914 121.79177856]
[80.60749817 132.98089600]
[79.85232544 137.51937866]
[77.83854675 141.16465759]
[75.02459717 143.62106323]
[71.91847992 144.78144836]
[69.00862122 144.72644043]
[57.94592667 154.85644531]
[46.88322830 164.98643494]
[35.82053375 175.11642456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[14 22]
[15 21]
[16 20]
[34 124]
[35 123]
[36 122]
[37 121]
[38 116]
[39 115]
[40 114]
[41 108]
[42 107]
[43 106]
[44 105]
[47 102]
[48 101]
[49 100]
[50 99]
[51 98]
[52 97]
[53 96]
[54 95]
[55 93]
[56 92]
[58 90]
[59 89]
[60 88]
[61 87]
[67 81]
[68 80]
[69 79]
[70 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
