%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAUUGGGCAUAGAUUUCCUCUUUGAGAACAUCAACCUGAUUUUUGAGACUUUUUGAAAAAAUUCUUUGUGAACUACGGAGGGUAGAGGUAUCACACCCAACU\
) } def
/len { sequence length } bind def

/coor [
[74.63429260 393.30508423]
[60.29622269 387.06378174]
[53.37076569 373.04336548]
[57.12791061 357.86386108]
[69.79364777 348.69253540]
[70.69070435 333.71936035]
[71.58776855 318.74621582]
[72.48483276 303.77307129]
[73.38189697 288.79992676]
[62.26296997 281.24777222]
[56.31757736 269.07180786]
[57.21408844 255.44248962]
[64.82341003 243.96888733]
[77.22463989 237.74293518]
[78.56922913 222.80331421]
[79.91381836 207.86370850]
[72.36385345 198.28147888]
[73.46871948 185.72775269]
[83.17741394 177.07449341]
[84.96833038 162.18179321]
[86.75924683 147.28909302]
[88.55015564 132.39639282]
[90.34107208 117.50368500]
[81.70681763 105.23789215]
[67.08289337 101.90007782]
[52.45897675 98.56226349]
[37.83505630 95.22444916]
[23.54069138 102.50804138]
[8.99393845 95.74257660]
[5.35382080 80.11794281]
[15.41272640 67.62002563]
[31.45432472 67.83615112]
[41.17287064 80.60053253]
[55.79679108 83.93834686]
[70.42070770 87.27616119]
[85.04462433 90.61397552]
[90.76584625 85.76448059]
[78.00566101 77.87920380]
[81.56191254 63.30686188]
[96.51997375 62.18598175]
[102.20829010 76.06548309]
[107.92951202 71.21598816]
[107.03245544 56.24283600]
[106.13539124 41.26968384]
[105.23832703 26.29653168]
[104.34126282 11.32337952]
[103.44420624 -3.64977264]
[102.54714203 -18.62292480]
[101.65007782 -33.59607697]
[92.16918182 -46.97683334]
[99.26173401 -61.76289749]
[115.63153076 -62.74363327]
[124.43872833 -48.91014481]
[116.62322998 -34.49313736]
[117.52029419 -19.51998711]
[118.41735840 -4.54683495]
[119.31441498 10.42631721]
[120.21147919 25.39946938]
[121.10854340 40.37261963]
[122.00560760 55.34577179]
[122.90266418 70.31892395]
[118.63740540 83.29528046]
[110.72635651 93.45402527]
[125.12448883 89.24761200]
[139.52261353 85.04120636]
[153.92074585 80.83479309]
[168.31887817 76.62837982]
[182.71699524 72.42197418]
[197.11512756 68.21556091]
[211.51325989 64.00914764]
[225.91139221 59.80273819]
[240.30950928 55.59632874]
[253.81755066 45.35086823]
[267.40200806 55.49477768]
[261.41506958 71.35646057]
[244.51593018 69.99445343]
[230.11779785 74.20086670]
[215.71966553 78.40727997]
[201.32153320 82.61368561]
[186.92341614 86.82009888]
[172.52528381 91.02651215]
[158.12715149 95.23292542]
[143.72901917 99.43933105]
[129.33090210 103.64574432]
[114.93276978 107.85215759]
[105.23377228 119.29460144]
[103.44286346 134.18730164]
[101.65194702 149.08000183]
[99.86103058 163.97270203]
[98.07012177 178.86541748]
[105.73030853 195.52650452]
[94.85343170 209.20829773]
[93.50884247 224.14790344]
[92.16425323 239.08752441]
[105.01382446 249.96525574]
[108.86907959 266.18377686]
[102.41786194 281.37606812]
[88.35504913 289.69699097]
[87.45798492 304.67013550]
[86.56092072 319.64328003]
[85.66385651 334.61642456]
[84.76679993 349.58959961]
[96.24693298 360.20751953]
[98.16484833 375.72705078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 102]
[6 101]
[7 100]
[8 99]
[9 98]
[14 94]
[15 93]
[16 92]
[19 90]
[20 89]
[21 88]
[22 87]
[23 86]
[24 36]
[25 35]
[26 34]
[27 33]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[63 85]
[64 84]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
