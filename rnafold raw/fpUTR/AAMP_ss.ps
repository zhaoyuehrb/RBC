%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUGGGGAGUCGCCUACGCCUACUUCCUGCCGGGAGGAGGGGCUCGAGUUCCGCGUCGUCGCGCAGAGCUGACUCUGGGAGGCGUUUGGGCCCAGAGAAGUGGAUCCGCCGCUUGCGCCGC\
) } def
/len { sequence length } bind def

/coor [
[77.38272858 173.92968750]
[87.86608124 162.10281372]
[86.72708893 147.14611816]
[85.58808899 132.18942261]
[71.06693268 128.42964172]
[62.81254196 140.95422363]
[54.55815125 153.47879028]
[46.30376053 166.00337219]
[49.73024368 181.43174744]
[41.17325974 194.71910095]
[25.70952225 197.98226929]
[12.51338577 189.28527832]
[9.41388798 173.78790283]
[18.24990463 160.68446350]
[33.77918243 157.74897766]
[42.03357315 145.22441101]
[50.28796387 132.69982910]
[58.54235458 120.17524719]
[70.68705750 110.51360321]
[84.27122498 103.77985382]
[69.31452942 102.64086151]
[54.35783386 101.50186157]
[39.40114212 100.36286926]
[23.05974770 108.73490143]
[8.93200016 98.40717316]
[-6.04874754 97.64743042]
[-21.02949524 96.88769531]
[-36.01024246 96.12796021]
[-50.99098969 95.36821747]
[-65.97174072 94.60848236]
[-82.09678650 99.84482574]
[-91.59233856 85.79951477]
[-80.72456360 72.78691864]
[-65.21199799 79.62773895]
[-50.23125458 80.38747406]
[-35.25050735 81.14720917]
[-20.26975822 81.90695190]
[-5.28901005 82.66668701]
[9.69173717 83.42642212]
[18.94206047 75.52131653]
[31.49889374 76.10314941]
[40.54013824 85.40617371]
[55.49682999 86.54516602]
[70.45352173 87.68416595]
[85.41021729 88.82316589]
[95.88161469 78.08305359]
[94.36408997 63.16001511]
[90.34246063 54.82840729]
[93.00206757 47.84041977]
[91.86306763 32.88372803]
[90.72407532 17.92703247]
[89.58507538 2.97033906]
[88.44607544 -11.98635483]
[79.68322754 -25.15916824]
[86.43177032 -38.43721008]
[85.29277039 -53.39390564]
[84.15377045 -68.35060120]
[83.01477814 -83.30729675]
[73.31880951 -96.53303528]
[80.17140961 -111.43182373]
[96.52321625 -112.67706299]
[105.55287933 -98.98775482]
[97.97147369 -84.44628906]
[99.11046600 -69.48959351]
[100.24946594 -54.53290176]
[101.38845825 -39.57621002]
[110.06984711 -27.47319794]
[103.40277100 -13.12535191]
[104.54177094 1.83134222]
[105.68076324 16.78803635]
[106.81976318 31.74473000]
[107.95875549 46.70142365]
[109.28712463 61.64249039]
[110.80464935 76.56552887]
[123.32923126 84.81991577]
[137.64131165 80.32947540]
[151.95339966 75.83902740]
[166.26548767 71.34857941]
[180.57759094 66.85813141]
[194.88967896 62.36768341]
[209.20176697 57.87723923]
[211.86853027 42.80584335]
[221.24302673 30.70719337]
[235.17106628 24.36147118]
[250.45210266 25.22687531]
[263.57464600 33.10454178]
[271.52322388 46.18424225]
[272.47131348 61.46035767]
[266.20108032 75.42254639]
[254.15336609 84.86240387]
[239.09661865 87.61071014]
[224.49079895 83.03593445]
[213.69221497 72.18933105]
[199.38012695 76.67977142]
[185.06802368 81.17021942]
[170.75593567 85.66066742]
[156.44384766 90.15111542]
[142.13175964 94.64156342]
[127.81967163 99.13201141]
[124.42895508 113.74375153]
[135.30084229 124.07825470]
[146.17274475 134.41276550]
[157.04463196 144.74726868]
[167.91651917 155.08177185]
[178.78840637 165.41627502]
[194.79820251 166.44889832]
[203.85421753 179.69155884]
[199.00947571 194.98561096]
[183.98043823 200.59877014]
[170.29609680 192.22509766]
[168.45390320 176.28816223]
[157.58201599 165.95365906]
[146.71012878 155.61915588]
[135.83824158 145.28465271]
[124.96633911 134.95014954]
[114.09445190 124.61563873]
[100.54478455 131.05043030]
[101.68377686 146.00712585]
[102.82277679 160.96382141]
[114.97615814 171.06683350]
[116.34276581 186.81192017]
[106.11182404 198.85781860]
[90.35316467 200.05787659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 119]
[3 118]
[4 117]
[5 18]
[6 17]
[7 16]
[8 15]
[20 45]
[21 44]
[22 43]
[23 42]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[46 74]
[47 73]
[49 72]
[50 71]
[51 70]
[52 69]
[53 68]
[55 66]
[56 65]
[57 64]
[58 63]
[75 99]
[76 98]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
