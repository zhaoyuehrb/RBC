%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUGCGCCAGCGCCCGUCGCUUUUGCUGGACGUCAUCCUCGGGAGCCCACCCGGACGAAGGGGGAGAGUAGACAGCAGAACCAGCGGCGGCGGCUAAGCAGAGACUGUAGUAGCGGCGACAGCGACGACGGCAGCG\
) } def
/len { sequence length } bind def

/coor [
[124.52103424 255.36209106]
[121.15961456 240.74357605]
[117.79819489 226.12506104]
[105.16474152 213.99655151]
[110.59763336 196.44297791]
[106.90670013 181.90415955]
[103.05171204 167.40798950]
[99.03315735 152.95631409]
[95.01459503 138.50462341]
[90.99604034 124.05294037]
[84.37004089 112.98834229]
[85.26470947 102.59169769]
[90.96547699 96.75172424]
[81.03816986 85.50679016]
[71.11086273 74.26184845]
[61.18355942 63.01691437]
[53.08646011 58.60560608]
[51.16248322 51.40384674]
[41.49184418 39.93743134]
[31.82120323 28.47101212]
[22.15056229 17.00459480]
[12.47992325 5.53817797]
[2.80928326 -5.92823935]
[-7.24446058 -17.06027603]
[-17.66975403 -27.84513855]
[-28.09504700 -38.63000107]
[-38.52033997 -49.41486359]
[-48.94563675 -60.19972610]
[-59.37092972 -70.98458862]
[-69.79621887 -81.76944733]
[-85.75334167 -77.59324646]
[-101.55535126 -81.98506165]
[-112.93846893 -93.66214752]
[-116.88051605 -109.38938904]
[-112.40285492 -124.87518311]
[-123.06922150 -135.42169189]
[-131.44659424 -139.27426147]
[-133.85408020 -146.32911682]
[-144.27937317 -157.11398315]
[-154.70466614 -167.89883423]
[-165.12995911 -178.68370056]
[-175.55525208 -189.46856689]
[-190.41894531 -185.86053467]
[-204.99667358 -190.14848328]
[-215.40167236 -201.08477783]
[-218.91209412 -215.66328430]
[-214.68249512 -229.94531250]
[-229.83694458 -234.48992920]
[-233.11959839 -249.01829529]
[-243.54489136 -259.80316162]
[-259.45132446 -263.79281616]
[-263.68859863 -279.63507080]
[-251.89776611 -291.03280640]
[-236.20822144 -286.26098633]
[-232.76002502 -270.22845459]
[-222.33473206 -259.44360352]
[-207.92597961 -255.67037964]
[-203.89764404 -240.37060547]
[-189.48045349 -244.11366272]
[-175.02931213 -240.11112976]
[-164.45199585 -229.34141541]
[-160.66062927 -214.62670898]
[-164.77040100 -199.89385986]
[-154.34509277 -189.10899353]
[-143.91979980 -178.32414246]
[-133.49450684 -167.53927612]
[-123.06922150 -156.75440979]
[-112.52272034 -146.08804321]
[-101.85635376 -135.54154968]
[-88.90621185 -140.01806641]
[-75.22711945 -138.45274353]
[-63.51065445 -131.09590149]
[-56.08708572 -119.34307861]
[-54.46202087 -105.47058105]
[-59.01136017 -92.19474030]
[-48.58606720 -81.40988159]
[-38.16077423 -70.62501526]
[-27.73547935 -59.84015656]
[-17.31018448 -49.05529404]
[-6.88489199 -38.27043152]
[3.54040170 -27.48556900]
[7.12423182 -27.08785629]
[10.68064404 -24.88178635]
[13.33722687 -20.90612221]
[14.27570057 -15.59887886]
[23.94634056 -4.13246202]
[33.61698151 7.33395529]
[43.28762054 18.80037308]
[52.95825958 30.26679039]
[62.62889862 41.73320770]
[72.42849731 53.08961105]
[82.35580444 64.33454895]
[92.28310394 75.57948303]
[102.21041107 86.82442474]
[115.70385742 93.37628174]
[130.67991638 94.22338104]
[145.65599060 95.07048035]
[160.63204956 95.91757965]
[176.82537842 87.23310089]
[191.14289856 97.31841278]
[206.13427734 97.82685089]
[221.12565613 98.33528137]
[236.11703491 98.84371948]
[252.15202332 93.33773041]
[261.88174438 107.22183990]
[251.23368835 120.41484070]
[235.60861206 113.83509827]
[220.61723328 113.32666016]
[205.62583923 112.81822968]
[190.63446045 112.30979919]
[181.53547668 120.36048889]
[168.98919678 120.00776672]
[159.78494263 110.89364624]
[144.80888367 110.04654694]
[129.83282471 109.19944000]
[114.85675812 108.35234070]
[105.44772339 120.03437805]
[109.46628571 134.48606873]
[113.48484039 148.93774414]
[117.50339508 163.38943481]
[122.86043549 170.89442444]
[121.44551086 178.21324158]
[125.13644409 192.75204468]
[135.84028625 200.04679871]
[138.58200073 212.29490662]
[132.41670227 222.76364136]
[135.77812195 237.38215637]
[139.13954163 252.00067139]
[153.95727539 255.83387756]
[165.28855896 266.12274170]
[170.52954102 280.50296021]
[168.47587585 295.67007446]
[159.59950256 308.13876343]
[145.94013977 315.04385376]
[130.63659668 314.79858398]
[117.20552063 307.45928955]
[108.73327637 294.71255493]
[107.16673279 279.48742676]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 128]
[2 127]
[3 126]
[5 123]
[6 122]
[7 120]
[8 119]
[9 118]
[10 117]
[13 94]
[14 93]
[15 92]
[16 91]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[23 85]
[24 81]
[25 80]
[26 79]
[27 78]
[28 77]
[29 76]
[30 75]
[35 69]
[36 68]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[47 58]
[49 56]
[50 55]
[95 116]
[96 115]
[97 114]
[98 113]
[100 110]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
