%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGAUGUACAGAGGAUCCCCAACCGCCUGCGAAACCCAAGCCGCCGCGUAGGAGCGUGCGUUCGGGCCCUCUUCUCCCACCUGUUCGACUCCCCAUCCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[81.92225647 240.05496216]
[78.88192749 224.93016052]
[84.52261353 210.57096863]
[97.04438019 201.55937195]
[96.15576935 186.58570862]
[95.26715851 171.61206055]
[94.37855530 156.63839722]
[93.48994446 141.66474915]
[86.97631073 137.94686890]
[87.05049133 152.94668579]
[74.09741211 160.51092529]
[61.07000351 153.07542419]
[60.99554062 138.07560730]
[73.94903564 130.51113892]
[67.43540192 126.79326630]
[54.09054565 133.64270020]
[45.65923691 147.70843506]
[29.26896286 147.16908264]
[21.78063202 132.57945251]
[30.89759827 118.94813538]
[47.24110794 120.29784393]
[60.58596420 113.44840240]
[61.32660294 105.32592010]
[63.62374496 97.99318695]
[67.20249176 91.72737885]
[71.74288177 86.73000336]
[60.09502029 77.27868652]
[48.44716263 67.82736969]
[35.45507050 68.36686707]
[25.92769623 60.12088394]
[24.68136024 47.98743057]
[13.31869125 38.19509888]
[1.95602250 28.40276718]
[-12.51791096 33.54094315]
[-27.61887169 30.73798370]
[-39.28477478 20.74787712]
[-44.37755585 6.25791025]
[-41.52727890 -8.83419037]
[-31.50065422 -20.46872330]
[-16.99479294 -25.51605988]
[-1.91170180 -22.61849022]
[9.69134617 -12.55544567]
[14.69318771 1.96616399]
[11.74835396 17.04010010]
[23.11102295 26.83243179]
[34.47369003 36.62476349]
[51.80723190 38.88153076]
[57.89848328 56.17951202]
[69.54634094 65.63082886]
[81.19419861 75.08214569]
[96.67127228 68.96006775]
[113.09454346 71.66114807]
[125.79566956 82.41759491]
[139.85696411 77.19456482]
[153.91825867 71.97154236]
[167.97955322 66.74851990]
[181.96191406 61.31770325]
[195.86225891 55.68029022]
[205.74284363 43.32373047]
[220.44496155 45.71054459]
[234.34530640 40.07313156]
[248.24565125 34.43571854]
[252.08016968 19.51584244]
[263.82739258 9.82792854]
[278.84906006 8.92553711]
[291.37173462 16.94553375]
[305.27206421 11.30811882]
[319.17242432 5.67070580]
[321.92288208 -9.50949383]
[332.46047974 -20.77727509]
[347.42266846 -24.53713226]
[362.03506470 -19.58930779]
[371.63494873 -7.51263332]
[373.15899658 7.83926678]
[366.12088013 21.56765747]
[352.76647949 29.29185867]
[337.35711670 28.54710770]
[324.80984497 19.57104874]
[310.90948486 25.20846367]
[297.00915527 30.84587669]
[293.61035156 45.32297134]
[282.20367432 55.13883972]
[267.02679443 56.37024689]
[253.88305664 48.33605957]
[239.98271179 53.97347641]
[226.08236694 59.61088943]
[217.19602966 71.56422424]
[201.49966431 69.58063507]
[187.59931946 75.21804810]
[182.50205994 80.73706055]
[173.20257568 80.80981445]
[159.14128113 86.03283691]
[145.07998657 91.25585938]
[131.01869202 96.47888947]
[129.51150513 121.36190033]
[108.46360016 140.77613831]
[109.35221100 155.74978638]
[110.24081421 170.72344971]
[111.12942505 185.69709778]
[112.01803589 200.67076111]
[125.51774597 208.13812256]
[132.81713867 221.72937012]
[131.58702087 237.10762024]
[122.21989441 249.36570740]
[107.70479584 254.59211731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[15 22]
[16 21]
[26 50]
[27 49]
[28 48]
[31 46]
[32 45]
[33 44]
[53 94]
[54 93]
[55 92]
[56 91]
[57 89]
[58 88]
[60 86]
[61 85]
[62 84]
[66 80]
[67 79]
[68 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
