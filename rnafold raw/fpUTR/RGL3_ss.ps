%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCGCCACCCGCCGGCCCUUCCGCCUCACUCAGCGGCGCCACUGAGAGGGACGGGCGCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[33.91127777 288.62622070]
[25.48221397 301.30972290]
[12.61956787 309.46276855]
[-2.44813251 311.67282104]
[-17.11031532 307.55694580]
[-28.82666969 297.82827759]
[-35.56726456 284.17236328]
[-36.16425323 268.95516968]
[-30.51420403 254.81314087]
[-19.59601974 244.19648743]
[-5.30134344 238.94462585]
[9.89318562 239.96743774]
[16.86403275 226.68560791]
[23.83488083 213.40376282]
[30.80572891 200.12191772]
[37.77657700 186.84008789]
[44.74742508 173.55824280]
[40.73247147 163.67971802]
[43.06455994 153.04496765]
[51.17174149 145.44618225]
[62.37824249 143.73892212]
[70.59842682 131.19187927]
[78.81861877 118.64482117]
[87.03880310 106.09777069]
[88.01844788 92.15029907]
[100.41414642 85.68204498]
[108.63433075 73.13499451]
[116.85452271 60.58794022]
[117.94516754 44.80437088]
[131.39189148 38.39852524]
[139.61207581 25.85147285]
[147.83226013 13.30442047]
[156.05245972 0.75736809]
[164.27264404 -11.78968430]
[165.36328125 -27.57325363]
[178.81001282 -33.97909927]
[179.19349670 -50.37376022]
[193.71125793 -58.00048447]
[207.42864990 -49.01354599]
[206.23440552 -32.65793991]
[191.35707092 -25.75891113]
[190.85438538 -10.87279129]
[176.81968689 -3.56949639]
[168.59950256 8.97755527]
[160.37931824 21.52460861]
[152.15913391 34.07165909]
[143.93894958 46.61871338]
[143.43626404 61.50483322]
[129.40156555 68.80812836]
[121.18138123 81.35517883]
[112.96119690 93.90222931]
[111.98155212 107.84970093]
[99.58585358 114.31795502]
[91.36566925 126.86500549]
[83.14547729 139.41206360]
[74.92529297 151.95910645]
[75.06253815 171.86430359]
[58.02926254 180.52908325]
[51.05841827 193.81092834]
[44.08757019 207.09277344]
[37.11672211 220.37461853]
[30.14587402 233.65644836]
[23.17502594 246.93829346]
[32.64826965 258.86212158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[21 56]
[22 55]
[23 54]
[24 53]
[26 51]
[27 50]
[28 49]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
