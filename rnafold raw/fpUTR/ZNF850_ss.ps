%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUGCUGUGCCGAUUUAGCUGCCGCCGCGCCUUGGAGUCCUGAGGAACUUGGCUAGGCUGGCCCCGAGCGGAACCAGAGAAUGCUGAGGCUCUAACCAUGGAAUAUUCGGAAUGUCCCAUUCUAUGAAGGAGGUUUGCUGGCUGCAACAGGAAUAUUC\
) } def
/len { sequence length } bind def

/coor [
[97.53689575 491.73629761]
[101.55247498 476.74780273]
[113.63230896 467.00833130]
[112.74925232 452.03436279]
[104.27610779 439.78466797]
[111.18756104 425.55291748]
[110.30449677 410.57894897]
[109.42143250 395.60494995]
[108.53836823 380.63098145]
[107.50834656 365.66638184]
[106.33145905 350.71261597]
[97.61944580 338.63165283]
[104.25014496 324.26693726]
[101.22500610 320.51046753]
[100.56205750 314.80038452]
[103.33240509 308.70498657]
[102.74350739 293.71652222]
[102.15460968 278.72808838]
[101.56571198 263.73965454]
[100.97681427 248.75123596]
[90.81915283 234.46789551]
[99.45958710 218.23394775]
[98.57653046 203.25996399]
[97.69346619 188.28598022]
[89.22032166 176.03627014]
[96.13177490 161.80453491]
[95.24871063 146.83055115]
[81.07307434 143.09811401]
[68.73299408 135.18594360]
[59.42524719 123.86137390]
[54.05250549 110.22269440]
[39.07852173 111.10575867]
[24.10453796 111.98882294]
[9.13055420 112.87187958]
[-5.84342957 113.75494385]
[-20.81741333 114.63800812]
[-34.20702744 124.10639191]
[-48.98645401 117.00000763]
[-49.95188522 100.62930298]
[-36.11016846 91.83505249]
[-21.70047569 99.66402435]
[-6.72649145 98.78096008]
[8.24749279 97.89789581]
[23.22147751 97.01483917]
[38.19546127 96.13177490]
[53.16944504 95.24871063]
[56.52975082 81.94416809]
[63.58444214 70.17412567]
[73.73397064 60.93888092]
[67.45407104 47.31673050]
[61.17417526 33.69458389]
[54.89427948 20.07243729]
[48.61438370 6.45028925]
[42.33448792 -7.17185879]
[25.87840080 -8.50473309]
[12.40835285 -17.88830566]
[5.53429556 -32.69279480]
[7.04041195 -48.85158539]
[16.42307854 -61.97817993]
[9.87694073 -75.47440338]
[3.33080173 -88.97062683]
[-3.21533680 -102.46685028]
[-17.87629128 -107.72937775]
[-24.32274818 -121.50971985]
[-19.21538162 -135.45426941]
[-25.76152039 -148.95050049]
[-39.63314819 -157.69749451]
[-38.72355270 -174.07139587]
[-23.96844864 -181.22813416]
[-10.54662132 -171.80546570]
[-12.26529694 -155.49662781]
[-5.71915817 -142.00041199]
[8.39367008 -137.37832642]
[15.22464466 -123.78448486]
[10.28088760 -109.01299286]
[16.82702637 -95.51676941]
[23.37316513 -82.02054596]
[29.91930389 -68.52431488]
[43.60379791 -68.43676758]
[55.97003555 -62.42284012]
[64.57106018 -51.60894012]
[67.67758942 -38.07737732]
[64.62546539 -24.46551514]
[55.95663452 -13.45175457]
[62.23653030 0.17039296]
[68.51642609 13.79254055]
[74.79632568 27.41468811]
[81.07621765 41.03683472]
[87.35611725 54.65898514]
[94.47217560 53.25474548]
[101.71949005 52.96045303]
[108.92597198 53.78309250]
[115.92051697 55.70312881]
[122.53703308 58.67497635]
[128.61842346 62.62806702]
[134.02027893 67.46853638]
[138.61433411 73.08144379]
[142.29151917 79.33352661]
[156.64562988 74.97925568]
[170.99972534 70.62498474]
[185.35383606 66.27072144]
[199.70794678 61.91644669]
[214.06204224 57.56217957]
[228.41615295 53.20790863]
[242.77024841 48.85363770]
[245.69430542 45.48516846]
[249.19572449 43.45845795]
[252.77101135 42.78867722]
[255.96522522 43.32237625]
[258.42385864 44.76887894]
[273.07534790 41.55424500]
[281.38391113 28.11014748]
[296.78433228 24.56012154]
[310.13983154 33.01033783]
[313.52682495 48.44742584]
[304.93588257 61.71284103]
[289.46383667 64.93644714]
[276.29000854 56.20573044]
[261.63851929 59.42036819]
[247.12452698 63.20774078]
[232.77041626 67.56201172]
[218.41632080 71.91628265]
[204.06221008 76.27055359]
[189.70809937 80.62482452]
[175.35400391 84.97909546]
[160.99989319 89.33336639]
[146.64578247 93.68763733]
[144.03775024 116.62385559]
[130.83857727 135.56202698]
[110.22269440 145.94749451]
[111.10575867 160.92147827]
[119.64206696 174.24221802]
[112.66744995 187.40290833]
[113.55051422 202.37689209]
[114.43357086 217.35087585]
[123.55796051 226.51513672]
[123.95793152 239.03927612]
[115.96524811 248.16233826]
[116.55414581 263.15075684]
[117.14304352 278.13919067]
[117.73194122 293.12762451]
[118.32083893 308.11608887]
[119.20390320 323.09005737]
[128.00010681 336.24063110]
[121.28522491 349.53573608]
[122.46210480 364.48950195]
[126.27224731 372.84973145]
[123.51235199 379.74789429]
[124.39541626 394.72189331]
[125.27848053 409.69586182]
[126.16154480 424.66986084]
[134.69784546 437.99060059]
[127.72323608 451.15130615]
[128.60629272 466.12527466]
[141.74716187 474.37738037]
[147.49659729 488.79000854]
[143.64385986 503.82116699]
[131.67037964 513.69110107]
[116.18022156 514.60461426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 154]
[4 153]
[6 151]
[7 150]
[8 149]
[9 148]
[10 146]
[11 145]
[13 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[22 135]
[23 134]
[24 133]
[26 131]
[27 130]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[49 89]
[50 88]
[51 87]
[52 86]
[53 85]
[54 84]
[59 78]
[60 77]
[61 76]
[62 75]
[65 72]
[66 71]
[98 127]
[99 126]
[100 125]
[101 124]
[102 123]
[103 122]
[104 121]
[105 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
