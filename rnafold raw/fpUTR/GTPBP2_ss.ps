%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACACGGCAGUGGCAGUAAGGGCGGCGGCGACGGCGGCGGCGGUCGGGGGAGGGGCCGGGCGGGGGGCUGGCGGCAGCGGCGG\
) } def
/len { sequence length } bind def

/coor [
[118.62878418 123.40073395]
[110.41326904 129.22319031]
[100.39434814 132.13342285]
[89.61167145 131.58406067]
[80.79489136 143.71931458]
[71.97811890 155.85456848]
[70.80299377 172.21156311]
[55.93371964 179.12797546]
[42.66653061 169.48880005]
[44.64957428 153.20999146]
[59.84286118 147.03779602]
[68.65963745 134.90254211]
[77.47641754 122.76728821]
[69.57993317 110.01403046]
[54.78692627 112.49733734]
[47.01364136 126.06605530]
[32.31939697 131.41517639]
[17.64235878 126.01901245]
[9.91257858 112.42546844]
[12.77982235 97.05299377]
[24.89026451 87.16001129]
[40.52572632 87.41767120]
[52.30361557 97.70433044]
[67.09662628 95.22101593]
[87.55667114 73.41399384]
[113.33003998 78.30942535]
[124.60001373 68.41056061]
[129.86248779 53.49020767]
[144.53092957 50.90444565]
[155.80090332 41.00558090]
[156.53930664 23.64427376]
[169.27536011 12.32000160]
[185.93670654 13.56744957]
[196.83320618 3.25889921]
[201.54075623 -11.84572029]
[216.10362244 -14.97173309]
[227.00013733 -25.28028297]
[237.89663696 -35.58883286]
[248.79313660 -45.89738464]
[248.44132996 -64.64615631]
[261.50704956 -77.65754700]
[279.62890625 -77.24173737]
[289.73434448 -88.32686615]
[293.31353760 -103.73790741]
[307.60577393 -107.93088531]
[317.71121216 -119.01602173]
[327.81665039 -130.10115051]
[337.92205811 -141.18629456]
[334.65768433 -156.35610962]
[340.96408081 -170.53385925]
[354.41638184 -178.26791382]
[369.84185791 -176.58438110]
[381.30911255 -166.13058472]
[384.40875244 -150.92625427]
[377.94891357 -136.81774902]
[364.41351318 -129.23007202]
[349.00720215 -131.08085632]
[338.90176392 -119.99571991]
[328.79632568 -108.91058350]
[318.69088745 -97.82545471]
[315.83453369 -83.20729828]
[300.81948853 -78.22143555]
[290.71405029 -67.13629913]
[293.73376465 -55.84399414]
[290.78872681 -44.40655899]
[282.52255249 -35.80181885]
[270.97994995 -32.33027649]
[259.10168457 -35.00088120]
[248.20518494 -24.69233131]
[237.30868530 -14.38378048]
[226.41218567 -4.07523012]
[222.48402405 10.29205322]
[207.14175415 14.15540314]
[196.24525452 24.46395302]
[197.67594910 37.40974808]
[191.22706604 48.95090866]
[179.09759521 54.68544006]
[165.69978333 52.27555847]
[154.42979431 62.17442703]
[149.97343445 76.38674164]
[134.49888611 79.68053436]
[123.22890472 89.57940674]
[126.46044159 97.56790924]
[126.90187836 106.53715515]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 13]
[5 12]
[6 11]
[14 24]
[15 23]
[26 82]
[27 81]
[29 79]
[30 78]
[33 74]
[34 73]
[36 71]
[37 70]
[38 69]
[39 68]
[42 63]
[43 62]
[45 60]
[46 59]
[47 58]
[48 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
