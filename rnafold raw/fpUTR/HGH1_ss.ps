%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCACACAGCGGACCCCUAAGCGGACCGCUGGCACCGGUCGGGUGGCAGCAGAGUGUCGCUCGAC\
) } def
/len { sequence length } bind def

/coor [
[121.01437378 112.64718628]
[106.41280365 109.21292877]
[91.73580170 106.11685181]
[76.99120331 103.36061096]
[62.24660873 100.60436249]
[47.50201035 97.84812164]
[42.71905136 99.81250763]
[38.07364655 99.88551331]
[34.22019196 98.40031433]
[31.60449028 95.88973236]
[30.41224480 92.98566437]
[16.42516136 87.56703949]
[2.43807769 82.14841461]
[-11.54900551 76.72978973]
[-27.21231842 78.95941162]
[-36.28511047 67.14697266]
[-50.27219391 61.72834778]
[-63.88427353 69.42544556]
[-79.24980927 66.52127838]
[-89.11367798 54.38710785]
[-88.81845093 38.75231171]
[-78.50353241 26.99916649]
[-63.03930664 24.67714691]
[-49.72751236 32.88264084]
[-44.85356903 47.74126434]
[-30.86648560 53.15988922]
[-16.20362282 50.54269028]
[-6.13038063 62.74270630]
[7.85670280 68.16133118]
[21.84378624 73.57995605]
[35.83086777 78.99858093]
[50.25825500 83.10352325]
[65.00285339 85.85977173]
[79.74744415 88.61601257]
[94.49204254 91.37225342]
[102.66465759 89.60558319]
[109.84706116 94.61135864]
[124.44863129 98.04561615]
[139.65370178 93.67338562]
[150.27145386 104.11908722]
[164.87301636 107.55334473]
[179.47459412 110.98760223]
[194.07617188 114.42185974]
[208.67773438 117.85611725]
[223.27931213 121.29038239]
[237.88087463 124.72463989]
[252.48245239 128.15888977]
[267.08401489 131.59315491]
[281.68557739 135.02740479]
[296.28717041 138.46166992]
[309.59060669 129.92973328]
[325.01251221 133.38528442]
[333.40328979 146.77818298]
[329.78491211 162.16268921]
[316.30401611 170.41142273]
[300.95864868 166.63056946]
[292.85290527 153.06324768]
[278.25134277 149.62898254]
[263.64974976 146.19471741]
[249.04818726 142.76046753]
[234.44662476 139.32620239]
[219.84504700 135.89195251]
[205.24348450 132.45768738]
[190.64190674 129.02343750]
[176.04032898 125.58917236]
[161.43876648 122.15491486]
[146.83718872 118.72065735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 35]
[4 34]
[5 33]
[6 32]
[11 31]
[12 30]
[13 29]
[14 28]
[16 26]
[17 25]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
