%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCACUGGCGUGACCGUCCGCGCUACAUACUGCGCCUGCGCAAGGGCUGUGGCCCUUUUCCCACCCCCUAGCGCCGCUGGGCCUGCAGGUCUCUGUCGAGCAGCGGACGCCGGUCUCUGUUCCGCAGG\
) } def
/len { sequence length } bind def

/coor [
[113.12004089 143.74404907]
[106.25553894 145.23876953]
[99.24300385 145.66294861]
[92.24838257 145.00654602]
[85.43720245 143.28512573]
[78.97062683 140.53939819]
[73.00170135 136.83435059]
[62.26771545 147.31201172]
[51.53372955 157.78968811]
[40.79974747 168.26736450]
[30.06576157 178.74502563]
[19.33177757 189.22270203]
[8.59779263 199.70036316]
[8.65747166 215.50454712]
[-2.53471279 226.66297913]
[-18.33863640 226.55555725]
[-29.37811279 215.24603271]
[-29.10361481 199.44412231]
[-17.67799759 188.52484131]
[-1.87987792 188.96638489]
[8.85410690 178.48870850]
[19.58809090 168.01104736]
[30.32207489 157.53337097]
[41.05606079 147.05570984]
[51.79004288 136.57803345]
[62.52402878 126.10036469]
[55.79426575 111.46866608]
[54.56195450 95.41072083]
[58.98035049 79.92350006]
[68.49997711 66.93300629]
[81.93696594 58.05474854]
[78.34722900 43.49061966]
[74.75749207 28.92649460]
[71.16776276 14.36236668]
[67.22714996 -0.11076645]
[62.93796539 -14.48445415]
[58.64878082 -28.85814095]
[54.35959244 -43.23183060]
[49.38097763 -57.38150406]
[43.72455215 -71.27412415]
[38.06813049 -85.16674805]
[32.41170883 -99.05936432]
[20.04164314 -108.92304230]
[22.40834618 -123.62841034]
[16.75192451 -137.52102661]
[11.09550095 -151.41365051]
[5.43907833 -165.30627441]
[-6.17568111 -171.06576538]
[-10.57175159 -182.83360291]
[-5.88676786 -194.05484009]
[-11.20584106 -208.08007812]
[-16.52491379 -222.10531616]
[-21.84398842 -236.13056946]
[-36.85084915 -240.07693481]
[-46.64595032 -252.11169434]
[-47.46288300 -267.60723877]
[-38.98751068 -280.60522461]
[-24.47879410 -286.10766602]
[-9.51562786 -281.99874878]
[0.14834553 -269.85842896]
[0.79713035 -254.35491943]
[-7.81874418 -241.44964600]
[-2.49967098 -227.42439270]
[2.81940222 -213.39915466]
[8.13847542 -199.37390137]
[22.30337143 -189.08782959]
[19.33169746 -170.96269226]
[24.98812103 -157.07006836]
[30.64454269 -143.17745972]
[36.30096436 -129.28483582]
[48.26644516 -120.41485596]
[46.30432892 -104.71578979]
[51.96075058 -90.82316589]
[57.61717224 -76.93054962]
[63.27359772 -63.03792953]
[65.91449738 -61.83934402]
[68.21347809 -59.46899033]
[69.70106506 -56.06163406]
[69.96932220 -51.92687988]
[68.73328400 -47.52101517]
[73.02246857 -33.14732742]
[77.31165314 -18.77363968]
[81.60083771 -4.39995146]
[85.39029694 -1.34337485]
[87.23867035 4.16617727]
[85.73188782 10.77263165]
[89.32162476 25.33675957]
[92.91135406 39.90088654]
[96.50109100 54.46501541]
[115.67318726 57.10444641]
[132.03077698 67.44686127]
[142.63641357 83.63500977]
[145.58563232 102.76190186]
[140.34878540 121.39282990]
[152.26744080 130.50027466]
[164.18611145 139.60771179]
[176.10478210 148.71514893]
[191.76788330 150.94621277]
[197.18289185 164.82160950]
[209.10156250 173.92904663]
[221.02021790 183.03648376]
[232.93888855 192.14392090]
[244.85755920 201.25135803]
[256.77621460 210.35879517]
[265.59100342 213.12394714]
[268.86932373 219.83312988]
[280.56442261 229.22590637]
[292.25955200 238.61869812]
[303.95465088 248.01147461]
[320.23577881 249.97547913]
[326.42572021 265.16156006]
[316.15682983 277.94754028]
[299.99282837 275.18032837]
[294.56188965 259.70657349]
[282.86676025 250.31381226]
[271.17166138 240.92103577]
[259.47653198 231.52824402]
[247.66877747 222.27746582]
[235.75010681 213.17002869]
[223.83145142 204.06259155]
[211.91278076 194.95515442]
[199.99412537 185.84771729]
[188.07545471 176.74028015]
[173.26484680 175.16064453]
[166.99734497 160.63380432]
[155.07867432 151.52636719]
[143.16000366 142.41893005]
[131.24134827 133.31149292]
[125.76252747 137.70901489]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[31 89]
[32 88]
[33 87]
[34 86]
[35 83]
[36 82]
[37 81]
[38 80]
[39 75]
[40 74]
[41 73]
[42 72]
[44 70]
[45 69]
[46 68]
[47 67]
[50 65]
[51 64]
[52 63]
[53 62]
[94 128]
[95 127]
[96 126]
[97 125]
[99 123]
[100 122]
[101 121]
[102 120]
[103 119]
[104 118]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
