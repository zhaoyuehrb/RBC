%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUACAGACUCCUCCGAACACAGAGCUGCAGCUCUUCAGGGAAGAAAUCAAAACAAGAUCACAAGAAUACUGAAAA\
) } def
/len { sequence length } bind def

/coor [
[135.40162659 160.36332703]
[129.29658508 146.66802979]
[121.88284302 159.70783997]
[114.46910858 172.74765015]
[115.11881256 189.13391113]
[101.11015320 197.65972900]
[86.85404205 189.55447388]
[87.01594543 173.15612793]
[101.42930603 165.33390808]
[108.84304047 152.29409790]
[116.25678253 139.25430298]
[114.17574310 124.39935303]
[103.46422577 113.89872742]
[89.97263336 110.22875214]
[86.03514862 96.81279755]
[75.32362366 86.31216431]
[64.61209869 75.81153870]
[52.26750183 80.52014160]
[39.10904312 80.11406708]
[27.16459084 74.69242096]
[18.26085091 65.12442017]
[13.74404049 52.91029358]
[14.27641010 39.94607544]
[19.73940468 28.22931862]
[9.89601803 16.91084862]
[0.05263217 5.59237957]
[-9.79075432 -5.72608948]
[-19.63414001 -17.04455948]
[-35.30862045 -21.86562347]
[-38.70645523 -37.90890121]
[-26.33223724 -48.67044449]
[-10.91550541 -43.07970047]
[-8.31567097 -26.88794518]
[1.52771521 -15.56947613]
[11.37110138 -4.25100660]
[21.21448708 7.06746292]
[31.05787468 18.38593292]
[47.58156967 14.43982506]
[63.95808411 19.27530289]
[75.80850220 31.68992424]
[79.91914368 48.44271851]
[75.11273193 65.10001373]
[85.82425690 75.60064697]
[96.53577423 86.10127258]
[110.02736664 89.77124786]
[113.96485138 103.18720245]
[124.67637634 113.68783569]
[126.78437042 98.83669281]
[131.42333984 84.57205200]
[138.45413208 71.32184601]
[147.66583252 59.48357773]
[158.78207397 49.41237640]
[171.46940613 41.41038132]
[185.34718323 35.71764374]
[199.99908447 32.50494766]
[214.98559570 31.86866570]
[229.85708618 33.82788849]
[244.16744995 38.32384109]
[257.48736572 45.22164917]
[269.41726685 54.31438065]
[279.59921265 65.32925415]
[287.72781372 77.93583679]
[293.55920410 91.75593567]
[296.91839600 106.37495422]
[297.70465088 121.35433197]
[295.89440918 136.24470520]
[291.54193115 150.59934998]
[284.77780151 163.98765564]
[275.80493164 176.00796509]
[264.89254761 186.29968262]
[252.36795044 194.55406189]
[238.60691833 200.52348328]
[224.02226257 204.02885437]
[209.05149841 204.96502686]
[194.14376831 203.30390930]
[179.74626160 199.09533691]
[166.29092407 192.46556091]
[154.18139648 183.61347961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[4 9]
[12 47]
[13 46]
[15 44]
[16 43]
[17 42]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
