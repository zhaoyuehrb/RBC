%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGAUGUGUAGGGGGCGGGGCCCGGCGGAAGCGUAUAUAAGGCCGGGCUCGGGGACGCCCCCCCCUCACUCGCGCGUUAGGAGGCUCGGGUCGUUGUGGUGCGCUGUCUUCCCGCUUGCGUCAGGGACCUGCCCGACUCAGUGGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[94.54586029 693.00207520]
[86.79431915 679.42089844]
[89.63694000 664.04388428]
[101.73152161 654.13153076]
[101.73152161 639.13153076]
[88.16497803 629.94036865]
[82.67354584 614.32519531]
[87.59835052 598.34863281]
[101.19519043 588.33850098]
[100.88519287 573.34173584]
[97.58168030 566.67724609]
[100.72697449 558.03253174]
[100.72697449 543.03253174]
[91.13610840 528.36834717]
[100.39233398 512.48352051]
[100.08232880 497.48675537]
[99.77232361 482.48995972]
[99.46232605 467.49316406]
[99.15232086 452.49636841]
[98.84231567 437.49957275]
[98.53231049 422.50277710]
[90.53363037 409.93811035]
[97.98406982 395.98098755]
[97.67407227 380.98419189]
[97.36406708 365.98739624]
[96.89910126 350.99459839]
[96.27922821 336.00741577]
[95.65935516 321.02023315]
[95.03948212 306.03305054]
[86.78283691 293.63638306]
[93.94322968 279.52825928]
[93.32335663 264.54107666]
[92.70348358 249.55387878]
[92.08361053 234.56669617]
[91.46373749 219.57951355]
[82.22527313 214.86177063]
[75.75454712 206.65048218]
[73.28969574 196.40730286]
[75.34797668 185.99206543]
[81.61899567 177.32507324]
[91.00937653 172.03308105]
[91.31938171 157.03628540]
[91.62938690 142.03948975]
[91.93939209 127.04268646]
[92.24938965 112.04589081]
[85.67911530 99.70397186]
[92.75380707 87.64410400]
[85.30336761 73.68697357]
[93.30204773 61.12232590]
[93.61205292 46.12553024]
[86.16161346 32.16839981]
[94.16029358 19.60375214]
[86.70985413 5.64662123]
[94.70853424 -6.91802645]
[87.25809479 -20.87515640]
[95.25677490 -33.43980408]
[95.56678009 -48.43659973]
[95.87677765 -63.43339539]
[96.18678284 -78.43019104]
[96.34179688 -93.42938995]
[96.34179688 -108.42938995]
[96.34179688 -123.42938995]
[85.45401001 -140.34519958]
[95.68849945 -156.70732117]
[95.06862640 -171.69450378]
[94.29390717 -186.67448425]
[93.36442566 -201.64566040]
[92.43494415 -216.61683655]
[83.85738373 -229.91104126]
[90.79116058 -243.09329224]
[89.86167908 -258.06448364]
[77.85094452 -268.33663940]
[76.70490265 -284.09933472]
[87.10349274 -296.00079346]
[102.87741089 -296.98013306]
[114.66827393 -286.45626831]
[115.48076630 -270.67288208]
[104.83285522 -258.99395752]
[105.76233673 -244.02278137]
[114.27341461 -231.79940796]
[107.40612030 -217.54631042]
[108.33560181 -202.57513428]
[109.26508331 -187.60395813]
[112.84117889 -181.08166504]
[110.05580902 -172.31437683]
[110.67568970 -157.32719421]
[118.84015656 -151.05537415]
[122.24370575 -141.10568237]
[119.51966858 -130.72093201]
[111.34179688 -123.42938995]
[111.34179688 -108.42938995]
[111.34179688 -93.42938995]
[114.50685883 -86.69803619]
[111.18357849 -78.12019348]
[110.87358093 -63.12339401]
[110.56357574 -48.12659836]
[110.25357056 -33.12980270]
[117.72618866 -20.24534225]
[109.70532990 -6.60802269]
[117.17794800 6.27643681]
[109.15708923 19.91375542]
[116.62970734 32.79821396]
[108.60884857 46.43553543]
[108.29884338 61.43233109]
[115.77146149 74.31678772]
[107.75061035 87.95410919]
[114.32088470 100.29602814]
[107.24619293 112.35589600]
[106.93618774 127.35269165]
[106.62618256 142.34948730]
[106.31617737 157.34628296]
[106.00617218 172.34307861]
[120.66935730 185.99206543]
[120.67014313 205.72201538]
[106.45092010 218.95964050]
[107.07079315 233.94682312]
[107.69066620 248.93400574]
[108.31054688 263.92120361]
[108.93041992 278.90838623]
[117.23139954 292.37701416]
[110.02666473 305.41317749]
[110.64653778 320.40036011]
[111.26641083 335.38754272]
[111.88629150 350.37472534]
[115.38613892 358.88204956]
[112.36086273 365.67739868]
[112.67086792 380.67419434]
[112.98087311 395.67098999]
[121.00172424 409.30828857]
[113.52910614 422.19274902]
[113.83911133 437.18954468]
[114.14911652 452.18634033]
[114.45912170 467.18313599]
[114.76912689 482.17993164]
[115.07912445 497.17672729]
[115.38912964 512.17352295]
[124.16040039 521.68634033]
[124.07508087 534.22381592]
[115.72697449 543.03253174]
[115.72697449 558.03253174]
[115.88198853 573.03173828]
[116.19198608 588.02850342]
[128.08999634 595.05798340]
[134.89268494 606.96234131]
[134.90838623 620.56481934]
[128.24034119 632.29620361]
[116.73152161 639.13153076]
[116.73152161 654.13153076]
[128.82611084 664.04388428]
[131.66873169 679.42089844]
[123.91718292 693.00207520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 148]
[5 147]
[9 142]
[10 141]
[12 140]
[13 139]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[24 127]
[25 126]
[26 124]
[27 123]
[28 122]
[29 121]
[31 119]
[32 118]
[33 117]
[34 116]
[35 115]
[41 112]
[42 111]
[43 110]
[44 109]
[45 108]
[47 106]
[49 104]
[50 103]
[52 101]
[54 99]
[56 97]
[57 96]
[58 95]
[59 94]
[60 92]
[61 91]
[62 90]
[64 86]
[65 85]
[66 83]
[67 82]
[68 81]
[70 79]
[71 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
