%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUGUUCGGGCCUGAGCUGGCGCUACGAAGUUCCGGUCCAGGUCUCUGACUUCGGGCUUGUUCGCUGGUGGCGUCGGAGCCGAGCCGGACUGGUCAGG\
) } def
/len { sequence length } bind def

/coor [
[129.20652771 492.57077026]
[127.80883789 477.63601685]
[126.41114807 462.70129395]
[125.01345825 447.76654053]
[116.12390137 435.81561279]
[122.54164886 421.35452271]
[121.14395905 406.41976929]
[119.74626923 391.48501587]
[118.34857941 376.55029297]
[116.95088959 361.61553955]
[115.55320740 346.68081665]
[103.95740509 337.40325928]
[102.32720184 322.27722168]
[112.13697815 310.17736816]
[103.24742126 298.22644043]
[109.66516876 283.76535034]
[98.06937408 274.48779297]
[96.43916321 259.36175537]
[106.24894714 247.26191711]
[104.85125732 232.32717896]
[103.45356750 217.39242554]
[102.05587769 202.45768738]
[100.65818787 187.52294922]
[99.26049805 172.58821106]
[97.86280823 157.65347290]
[96.46511841 142.71873474]
[95.06742859 127.78398895]
[93.66974640 112.84925079]
[85.73837280 101.33469391]
[91.39551544 88.54843903]
[80.38573456 73.89129639]
[88.10904694 58.21800995]
[75.91710663 48.52294540]
[74.24132538 33.40188599]
[83.55921936 21.83848000]
[74.16915131 9.10517406]
[80.26719666 -4.48390388]
[78.40571594 -19.36795235]
[76.54423523 -34.25199890]
[74.68275452 -49.13604736]
[72.82127380 -64.02009583]
[70.72854614 -78.87339783]
[68.40507507 -93.69235229]
[66.08159637 -108.51130676]
[63.75812531 -123.33026123]
[61.43465424 -138.14921570]
[53.00783920 -152.86061096]
[64.81153107 -165.03062439]
[79.77352142 -157.05722046]
[76.25360870 -140.47268677]
[78.57707977 -125.65373993]
[80.90055847 -110.83477783]
[83.22402954 -96.01582336]
[85.54750061 -81.19686890]
[89.76772308 -74.96668243]
[87.70532227 -65.88157654]
[89.56680298 -50.99752808]
[91.42828369 -36.11348343]
[93.28976440 -21.22943306]
[95.15124512 -6.34538555]
[104.40817261 5.32331371]
[98.44326782 19.97699928]
[110.32199097 28.88944054]
[112.42182159 43.95746231]
[102.99309540 56.35652924]
[112.41197968 64.12200165]
[113.99389648 76.63288116]
[106.33025360 87.15074921]
[114.26162720 98.66530609]
[108.60448456 111.45156097]
[110.00217438 126.38629913]
[111.39986420 141.32104492]
[112.79755402 156.25578308]
[114.19523621 171.19052124]
[115.59292603 186.12525940]
[116.99061584 201.05999756]
[118.38830566 215.99473572]
[119.78599548 230.92948914]
[121.18368530 245.86422729]
[133.06822205 255.93376160]
[134.27291870 271.09963989]
[124.59990692 282.36764526]
[133.58943176 295.38684082]
[127.07171631 308.77969360]
[138.95625305 318.84924316]
[140.16094971 334.01507568]
[130.48794556 345.28311157]
[131.88563538 360.21786499]
[133.28332520 375.15258789]
[134.68101501 390.08734131]
[136.07870483 405.02209473]
[137.47639465 419.95681763]
[146.46591187 432.97598267]
[139.94819641 446.36886597]
[141.34588623 461.30358887]
[142.74357605 476.23834229]
[144.14126587 491.17306519]
[154.06468201 504.22903442]
[147.47096252 519.24420166]
[131.14317322 520.77221680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 94]
[6 92]
[7 91]
[8 90]
[9 89]
[10 88]
[11 87]
[14 84]
[16 82]
[19 79]
[20 78]
[21 77]
[22 76]
[23 75]
[24 74]
[25 73]
[26 72]
[27 71]
[28 70]
[30 68]
[32 65]
[35 62]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
