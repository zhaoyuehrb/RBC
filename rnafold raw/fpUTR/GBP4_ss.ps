%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCUUUCAAUUUCGGUUCUCACAGACUCUUACUUGGAUGUCUGUAAAUCCGGCUGGACUUUCAGCUUCUAAGAACAGUCCGUUUCUCGAGGAUCCAGGCGCAGGAGGACAGAGCA\
) } def
/len { sequence length } bind def

/coor [
[140.05534363 396.41857910]
[137.64916992 381.61282349]
[135.24299622 366.80706787]
[132.83683777 352.00131226]
[130.43066406 337.19555664]
[128.02449036 322.38980103]
[125.61832428 307.58404541]
[110.77527618 300.71441650]
[102.83075714 286.22894287]
[105.06054688 269.69219971]
[116.78810883 257.59072876]
[113.98530579 242.85491943]
[111.18249512 228.11909485]
[101.20333099 217.06172180]
[106.22574615 202.05885315]
[103.42293549 187.32304382]
[100.62013245 172.58723450]
[97.81732178 157.85140991]
[95.01451874 143.11560059]
[92.21170807 128.37977600]
[89.40890503 113.64396667]
[79.01803589 102.82592773]
[64.40702820 99.43204498]
[49.79602432 96.03815460]
[35.18501663 92.64427185]
[20.57400894 89.25038910]
[5.96300125 85.85649872]
[-8.69225311 82.65908051]
[-23.38911247 79.65869141]
[-38.08597183 76.65830994]
[-52.20893478 84.26892853]
[-66.90753174 77.84002686]
[-70.90625763 62.30330276]
[-61.13763428 49.57720566]
[-45.09531403 49.42410660]
[-35.08558655 61.96144867]
[-20.38872719 64.96183014]
[-5.69186783 67.96221924]
[1.58599448 66.19400024]
[9.35688591 71.24549103]
[23.96789360 74.63938141]
[38.57890320 78.03326416]
[53.18991089 81.42714691]
[67.80091858 84.82103729]
[82.41192627 88.21492004]
[70.10663605 79.63705444]
[68.14009094 64.76651764]
[77.79261780 53.28485489]
[92.77989960 52.66724396]
[103.34439087 63.31578445]
[102.60823059 78.29730225]
[108.85610962 64.66043854]
[115.10398102 51.02357483]
[121.16821289 37.30405807]
[127.04771423 23.50436783]
[132.92721558 9.70467663]
[127.26825714 -4.80787086]
[133.42749023 -18.71896553]
[147.29786682 -24.02447510]
[153.17735291 -37.82416534]
[159.05685425 -51.62385941]
[150.30146790 -64.32608795]
[149.82615662 -79.74613190]
[157.78257751 -92.96350098]
[171.63188171 -99.76058197]
[186.95480347 -97.96845245]
[198.86184692 -88.15897369]
[203.55352783 -73.46231842]
[199.53273010 -58.56813431]
[188.08250427 -48.22909546]
[172.85655212 -45.74435806]
[166.97705078 -31.94466782]
[161.09754944 -18.14497566]
[166.87954712 -4.46637487]
[161.11347961 9.61223030]
[146.72689819 15.58417511]
[140.84741211 29.38386726]
[134.96791077 43.18355942]
[135.24462891 50.66802979]
[128.74084473 57.27144623]
[122.49297333 70.90830994]
[116.24509430 84.54517365]
[118.52170563 90.36677551]
[118.95148468 96.18339539]
[117.72689819 101.45940399]
[115.18330383 105.76734161]
[111.75392914 108.82250977]
[107.91760254 110.50117493]
[104.14472198 110.84115601]
[106.94752502 125.57697296]
[109.75033569 140.31278992]
[112.55313873 155.04859924]
[115.35594940 169.78442383]
[118.15875244 184.52023315]
[120.96156311 199.25605774]
[131.14120483 211.36743164]
[125.91831207 225.31628418]
[128.72111511 240.05210876]
[131.52392578 254.78791809]
[144.45942688 259.75811768]
[153.15449524 270.40823364]
[155.40023804 283.86221313]
[150.71093750 296.55514526]
[140.42407227 305.17788696]
[142.83024597 319.98364258]
[145.23641968 334.78939819]
[147.64259338 349.59515381]
[150.04875183 364.40087891]
[152.45492554 379.20663452]
[154.86109924 394.01239014]
[168.38911438 401.85629272]
[173.66157532 416.57821655]
[168.18898010 431.22692871]
[154.55532837 438.88577271]
[139.19801331 435.93844604]
[129.36828613 423.77658081]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[2 109]
[3 108]
[4 107]
[5 106]
[6 105]
[7 104]
[11 99]
[12 98]
[13 97]
[15 95]
[16 94]
[17 93]
[18 92]
[19 91]
[20 90]
[21 89]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[28 38]
[29 37]
[30 36]
[51 82]
[52 81]
[53 80]
[54 78]
[55 77]
[56 76]
[59 73]
[60 72]
[61 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
