%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGCUGAUUCUCUGGCUGUGUGGGGCGCACGGUCCCGGGAUACUGGGGACGGCGGGGUGGGAGGGCGCCGUCCUGGGGCCGCGGCGGCCGGGCGGGGGAG\
) } def
/len { sequence length } bind def

/coor [
[86.45517731 265.40139771]
[79.17491913 278.81631470]
[66.79008484 287.73703003]
[51.75969696 290.39224243]
[37.06805420 286.25482178]
[25.63218498 276.14624023]
[19.72269249 262.07354736]
[20.51291275 246.83088684]
[27.84594536 233.44471741]
[40.26581192 224.57287598]
[55.30653763 221.97685242]
[59.37263870 207.53848267]
[63.43873978 193.10009766]
[67.50484467 178.66171265]
[71.57094574 164.22334290]
[67.57336426 149.87521362]
[78.76183319 138.68911743]
[82.82793427 124.25073242]
[81.40940094 121.64427185]
[81.03045654 118.27291107]
[82.00639343 114.56652069]
[84.47661591 111.06736755]
[88.36886597 108.36015320]
[86.78739929 94.46804810]
[97.79492188 85.84680176]
[103.58796692 72.01059723]
[101.78064728 56.29295731]
[113.83294678 47.54131317]
[119.62599945 33.70510483]
[125.41904449 19.86890030]
[122.60192871 1.75192487]
[136.79762268 -8.44041729]
[142.16603088 -22.44685555]
[147.53442383 -36.45329285]
[152.90283203 -50.45972824]
[158.27122498 -64.46616364]
[163.63961792 -78.47260284]
[169.00802612 -92.47904205]
[155.38320923 -86.20494843]
[140.50071716 -88.07884216]
[128.85647583 -97.53461456]
[123.96815491 -111.71574402]
[127.31248474 -126.33817291]
[137.87916565 -136.98454285]
[152.47604370 -140.43865967]
[166.69349670 -135.65702820]
[176.23651123 -124.08416748]
[178.22200012 -109.21500397]
[187.18617249 -121.24179077]
[196.15034485 -133.26856995]
[205.11451721 -145.29536438]
[214.07868958 -157.32214355]
[223.04286194 -169.34893799]
[232.00703430 -181.37571716]
[240.97120667 -193.40251160]
[249.93537903 -205.42929077]
[243.26254272 -219.20361328]
[243.76687622 -234.50080872]
[251.33248901 -247.80570984]
[264.22085571 -256.06091309]
[279.47030640 -257.36947632]
[293.57666016 -251.43069458]
[303.29837036 -239.60922241]
[306.40145874 -224.62158203]
[302.17285156 -209.91180420]
[291.58425903 -198.86010742]
[277.06884766 -194.00607300]
[261.96215820 -196.46511841]
[252.99800110 -184.43833923]
[244.03382874 -172.41154480]
[235.06965637 -160.38476562]
[226.10548401 -148.35797119]
[217.14131165 -136.33119202]
[208.17712402 -124.30440521]
[199.21295166 -112.27761841]
[190.24877930 -100.25083160]
[183.01446533 -87.11064148]
[177.64605713 -73.10420227]
[172.27766418 -59.09776688]
[166.90925598 -45.09132767]
[161.54086304 -31.08489227]
[156.17247009 -17.07845497]
[150.80406189 -3.07201791]
[155.45468140 8.21023941]
[150.96266174 19.98904610]
[139.25524902 25.66194534]
[133.46220398 39.49815369]
[127.66915894 53.33435822]
[129.89083862 68.06233978]
[117.42417908 77.80364227]
[111.63113403 91.63984680]
[113.21260071 105.53195190]
[102.20507812 114.15319824]
[97.26631165 128.31683350]
[93.20021057 142.75521851]
[96.90695953 158.13606262]
[86.00932312 168.28944397]
[81.94322205 182.72781372]
[77.87712097 197.16619873]
[73.81101990 211.60458374]
[69.74491882 226.04295349]
[81.22050476 236.10644531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 101]
[12 100]
[13 99]
[14 98]
[15 97]
[17 95]
[18 94]
[23 93]
[25 91]
[26 90]
[28 88]
[29 87]
[30 86]
[32 83]
[33 82]
[34 81]
[35 80]
[36 79]
[37 78]
[38 77]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
