%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGUCGGAAGUGCGCAGGCAGUGCUCGCGGCGGCGGCGACGGCGGCGGGAGGUUCGGUUGUCGCCCGUUGGCCGCGCGGCGCCGCGCUCGGCGGCCGCCAUUGCAGCUUGUUUUCACUUGCUUUUUAAAGACAGAAAGCUC\
) } def
/len { sequence length } bind def

/coor [
[184.32809448 503.39544678]
[170.69955444 497.12942505]
[161.43704224 485.33087158]
[158.58538818 470.60443115]
[162.77410889 456.20114136]
[173.07850647 445.30072021]
[187.22375488 440.30953979]
[202.08712769 442.32946777]
[214.38815308 450.91549683]
[209.84701538 436.61938477]
[205.30589294 422.32330322]
[200.76475525 408.02722168]
[196.22361755 393.73114014]
[181.00942993 381.87081909]
[185.41896057 362.25289917]
[180.25425720 348.17007446]
[175.08956909 334.08724976]
[169.92486572 320.00442505]
[164.76017761 305.92160034]
[159.59548950 291.83877563]
[155.64685059 289.02865601]
[153.46604919 283.67498779]
[154.52813721 277.02230835]
[149.98699951 262.72622681]
[145.44587708 248.43014526]
[128.74319458 241.07643127]
[122.53977203 223.57630920]
[131.17182922 206.78025818]
[126.00713348 192.69743347]
[120.84243774 178.61460876]
[115.67774200 164.53178406]
[110.51305389 150.44895935]
[98.86668396 141.16395569]
[101.37931061 125.54354095]
[96.21461487 111.46071625]
[90.74180603 97.49474335]
[84.96351624 83.65236664]
[79.18523407 69.80998993]
[73.40694427 55.96761322]
[67.16551971 49.18995667]
[67.65746307 41.75712204]
[62.18465042 27.79115295]
[56.71184158 13.82518196]
[51.23902893 -0.14078927]
[45.76622009 -14.10676003]
[33.52724457 -24.13262749]
[36.08757401 -38.80552673]
[30.61476326 -52.77149963]
[18.37578583 -62.79736710]
[20.93611717 -77.47026825]
[8.69714069 -87.49613190]
[11.25747108 -102.16903687]
[5.78466034 -116.13500214]
[0.31184962 -130.10098267]
[-5.16096115 -144.06694031]
[-10.93924809 -157.90931702]
[-17.02022171 -171.62142944]
[-23.10119438 -185.33352661]
[-38.17579651 -189.49169922]
[-47.00817490 -202.39608765]
[-45.42795563 -217.95361328]
[-34.18126297 -228.81851196]
[-18.57844734 -229.86070251]
[-5.98667860 -220.58808899]
[-2.35140491 -205.37892151]
[-9.38909149 -191.41450500]
[-3.30811810 -177.70239258]
[2.77285504 -163.99029541]
[6.89799070 -161.44636536]
[9.42664242 -156.24794006]
[8.80500984 -149.53976440]
[14.27782059 -135.57379150]
[19.75063133 -121.60781860]
[25.22344208 -107.64184570]
[37.07096481 -98.61491394]
[34.90208817 -82.94307709]
[46.74961090 -73.91614532]
[44.58073425 -58.24430847]
[50.05354309 -44.27833939]
[61.90106964 -35.25141144]
[59.73218918 -19.57957077]
[65.20500183 -5.61360025]
[70.67781067 8.35237026]
[76.15061951 22.31834221]
[81.62343597 36.28431320]
[87.24932098 50.18932343]
[93.02761078 64.03170013]
[98.80589294 77.87407684]
[104.58418274 91.71645355]
[108.93102264 94.79946899]
[111.20160675 100.12024689]
[110.29743958 106.29602051]
[115.46213531 120.37884521]
[127.47791290 130.67115784]
[124.59587097 145.28427124]
[129.76057434 159.36709595]
[134.92526245 173.44992065]
[140.08995056 187.53274536]
[145.25465393 201.61557007]
[156.89535522 204.44909668]
[165.60902405 212.49507141]
[169.28421021 223.64486694]
[167.10789490 235.05874634]
[159.74195862 243.88902283]
[164.28309631 258.18508911]
[168.82421875 272.48120117]
[173.67831421 286.67407227]
[178.84300232 300.75689697]
[184.00769043 314.83972168]
[189.17239380 328.92254639]
[194.33708191 343.00537109]
[199.50178528 357.08819580]
[209.70626831 361.12609863]
[215.84170532 369.95788574]
[216.05537415 380.48895264]
[210.51971436 389.19000244]
[215.06085205 403.48608398]
[219.60197449 417.78216553]
[224.14311218 432.07824707]
[228.68423462 446.37435913]
[234.91546631 460.01882935]
[242.74592590 472.81274414]
[250.57637024 485.60662842]
[258.40682983 498.40054321]
[266.23727417 511.19445801]
[274.06771851 523.98834229]
[281.89819336 536.78228760]
[297.32049561 540.23602295]
[305.71286011 553.62792969]
[302.09625244 569.01281738]
[288.61636353 577.26318359]
[273.27053833 573.48413086]
[265.16317749 559.91772461]
[269.10427856 544.61273193]
[261.27383423 531.81878662]
[253.44337463 519.02490234]
[245.61291504 506.23098755]
[237.78247070 493.43710327]
[229.95201111 480.64318848]
[222.12156677 467.84927368]
[220.55538940 482.76730347]
[212.34898376 495.32336426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 120]
[10 119]
[11 118]
[12 117]
[13 116]
[15 112]
[16 111]
[17 110]
[18 109]
[19 108]
[20 107]
[23 106]
[24 105]
[25 104]
[28 99]
[29 98]
[30 97]
[31 96]
[32 95]
[34 93]
[35 92]
[36 89]
[37 88]
[38 87]
[39 86]
[41 85]
[42 84]
[43 83]
[44 82]
[45 81]
[47 79]
[48 78]
[50 76]
[52 74]
[53 73]
[54 72]
[55 71]
[56 68]
[57 67]
[58 66]
[121 140]
[122 139]
[123 138]
[124 137]
[125 136]
[126 135]
[127 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
