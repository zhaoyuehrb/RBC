%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACAGGGCCACAACAGGUUUCUGCAUCUGCUCCUAUGGCCACUCCUUCUUGCCCCCAGCUCUCCUGCUGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[104.02688599 132.62088013]
[91.17409515 131.66136169]
[79.67839050 125.83351135]
[71.30738068 116.03345490]
[67.34820557 103.76805878]
[68.40963745 90.92327881]
[55.31845856 83.60063934]
[42.08063507 76.54655457]
[28.70167351 69.76397705]
[15.32271194 62.98139954]
[1.94374990 56.19882202]
[-11.43521214 49.41624069]
[-27.70150566 58.88951492]
[-46.28460312 56.99671173]
[-60.09147263 44.63121414]
[-63.95274353 26.65098572]
[-78.05972290 21.55264664]
[-92.16670990 16.45430756]
[-106.27368927 11.35596848]
[-120.38066864 6.25762844]
[-134.58081055 13.19532490]
[-149.50015259 7.98106098]
[-156.28733826 -6.29163265]
[-150.91561890 -21.15501976]
[-136.57197571 -27.79091835]
[-121.76620483 -22.26236534]
[-115.28233337 -7.84935331]
[-101.17534637 -2.75101376]
[-87.06836700 2.34732580]
[-72.96138763 7.44566536]
[-58.85440445 12.54400444]
[-50.60491562 4.34891605]
[-39.79166031 -0.06768890]
[-28.05914879 0.00929606]
[-17.20844460 4.60824680]
[-8.92068481 13.06028652]
[-4.49663353 24.09627342]
[-4.65263367 36.03728104]
[8.72632885 42.81985855]
[22.10529137 49.60243607]
[35.48425293 56.38501740]
[48.86321640 63.16759491]
[56.46616364 63.38840103]
[62.64110184 70.50946045]
[75.73227692 77.83209991]
[89.95211792 68.70498657]
[106.82738495 67.84841156]
[121.89832306 75.48875427]
[131.18205261 89.60684967]
[132.22508240 106.47161102]
[145.86956787 112.70283508]
[159.51405334 118.93405914]
[173.15852356 125.16528320]
[181.92611694 120.49493408]
[191.71937561 120.56264496]
[200.17546082 125.21844482]
[205.31770325 133.22143555]
[206.01725769 142.56752014]
[218.79885864 150.41804504]
[231.58045959 158.26855469]
[244.36206055 166.11907959]
[259.67324829 162.20201111]
[273.22686768 170.33062744]
[276.98184204 185.68235779]
[268.71038818 199.14930725]
[253.31980896 202.74176025]
[239.94107056 194.32838440]
[236.51153564 178.90068054]
[223.72993469 171.05015564]
[210.94833374 163.19964600]
[198.16673279 155.34912109]
[177.76818848 157.06147766]
[166.92730713 138.80976868]
[153.28282166 132.57853699]
[139.63833618 126.34731293]
[125.99385834 120.11608887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 45]
[7 44]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[50 76]
[51 75]
[52 74]
[53 73]
[58 71]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
