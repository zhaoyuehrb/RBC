%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCCCGGGCGGGAUAAUUGAACGGCGCGGCCCUGGCCCAGCGUUGGCUGCCGAGGCUCGGCCGGAGCGUGGAGCCCGCGCCGCUGCCCCAGGACCGCGCCCGCGCCUUUGUCCGCCGCCGCCCACCGCCCGUCGCCCGCCGCCC\
) } def
/len { sequence length } bind def

/coor [
[45.83748245 290.26361084]
[39.02076721 276.79385376]
[36.09206390 261.98419189]
[37.26871109 246.93368530]
[42.46338654 232.75914001]
[51.29061127 220.51239014]
[63.09535217 211.10224915]
[77.00160980 205.22700500]
[75.09634399 190.34851074]
[73.19107819 175.47000122]
[71.28581238 160.59149170]
[69.38054657 145.71298218]
[67.47527313 130.83447266]
[87.75824738 91.91300964]
[82.16539764 77.99467468]
[76.57255554 64.07633972]
[70.97970581 50.15800476]
[65.38685608 36.23966980]
[59.79401398 22.32133484]
[45.53401947 16.05313492]
[40.06034851 1.85829139]
[46.12399673 -11.69780445]
[31.86400414 -17.96600342]
[26.39033318 -32.16084671]
[32.45398331 -45.71694565]
[26.86113548 -59.63528061]
[21.26828957 -73.55361176]
[15.52803802 -87.41180420]
[9.64102840 -101.20829773]
[3.75401950 -115.00478363]
[-2.13298988 -128.80126953]
[-8.01999855 -142.59776306]
[-20.55261993 -152.25405884]
[-18.43115234 -166.99681091]
[-24.31816292 -180.79328918]
[-30.20517159 -194.58978271]
[-36.09218216 -208.38627625]
[-41.97919083 -222.18276978]
[-56.36901474 -228.14688110]
[-62.14274597 -242.22233582]
[-56.36819458 -255.90408325]
[-62.25520325 -269.70059204]
[-68.14221191 -283.49707031]
[-74.02922058 -297.29354858]
[-78.32076263 -300.50326538]
[-80.67008209 -304.63919067]
[-81.05336761 -308.78701782]
[-79.82070923 -312.16036987]
[-84.81780243 -326.30352783]
[-89.81490326 -340.44671631]
[-95.66389465 -347.55502319]
[-94.76448822 -354.94342041]
[-99.46026611 -369.18945312]
[-105.15706635 -376.42031860]
[-104.10104370 -383.78796387]
[-109.64308167 -391.13812256]
[-108.43091583 -398.48168945]
[-112.51783752 -412.91418457]
[-116.60476685 -427.34671021]
[-120.69169617 -441.77920532]
[-124.77861786 -456.21170044]
[-135.98321533 -467.38165283]
[-132.00633240 -481.73550415]
[-136.09326172 -496.16802979]
[-150.01112366 -503.65591431]
[-154.47772217 -518.81591797]
[-146.84309387 -532.65380859]
[-131.63673401 -536.95989990]
[-117.88031006 -529.17938232]
[-113.73525238 -513.92834473]
[-121.66076660 -500.25494385]
[-117.57383728 -485.82244873]
[-106.66156769 -475.68481445]
[-110.34612274 -460.29861450]
[-106.25919342 -445.86611938]
[-102.17227173 -431.43362427]
[-98.08534241 -417.00112915]
[-93.99841309 -402.56863403]
[-89.75853729 -388.18032837]
[-85.21422577 -373.88525391]
[-80.51844788 -359.63919067]
[-75.67173767 -345.44378662]
[-70.67464447 -331.30062866]
[-65.67754364 -317.15747070]
[-60.23273087 -303.18057251]
[-54.34572220 -289.38406372]
[-48.45871353 -275.58758545]
[-42.57170486 -261.79110718]
[-28.69844818 -256.49313354]
[-22.53164864 -242.58540344]
[-28.18269920 -228.06977844]
[-22.29569054 -214.27328491]
[-16.40868187 -200.47679138]
[-10.52167225 -186.68029785]
[-4.63466358 -172.88381958]
[7.47688007 -164.21434021]
[5.77649069 -148.48477173]
[11.66349983 -134.68827820]
[17.55050850 -120.89179230]
[23.43751717 -107.09530640]
[29.32452774 -93.29882050]
[34.88102341 -88.34675598]
[35.18662643 -79.14646149]
[40.77947235 -65.22812653]
[46.37231827 -51.30979156]
[60.12999725 -45.71855927]
[66.00021362 -31.68306160]
[60.04233170 -17.29065132]
[73.80001068 -11.69942093]
[79.67022705 2.33607841]
[73.71234894 16.72848701]
[79.30519867 30.64682198]
[84.89804077 44.56515884]
[90.49089050 58.48349380]
[96.08374023 72.40183258]
[101.67658234 86.32016754]
[112.17001343 97.03874207]
[125.96650696 102.92575073]
[142.17337036 100.42180634]
[152.23295593 113.37313080]
[145.79682922 128.45651245]
[129.48591614 130.15545654]
[120.07949829 116.72223663]
[106.28300476 110.83522797]
[100.30070496 115.35872650]
[109.34751129 127.32347870]
[97.38261414 136.37010193]
[88.33609009 124.40571594]
[82.35378265 128.92921448]
[84.25904846 143.80772400]
[86.16431427 158.68621826]
[88.06958771 173.56472778]
[89.97485352 188.44323730]
[91.88011932 203.32174683]
[106.81809998 205.50334167]
[120.61308289 211.63529968]
[132.24139404 221.26260376]
[140.84011841 233.67085266]
[145.77120972 247.93923950]
[146.66870117 263.00897217]
[143.46603394 277.76177979]
[136.40084839 291.10290527]
[125.99742889 302.04235840]
[113.02777863 309.76834106]
[98.45433044 313.70755005]
[83.35853577 313.56762695]
[68.86060333 309.35900879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 134]
[9 133]
[10 132]
[11 131]
[12 130]
[13 129]
[14 116]
[15 115]
[16 114]
[17 113]
[18 112]
[19 111]
[22 108]
[25 105]
[26 104]
[27 103]
[28 101]
[29 100]
[30 99]
[31 98]
[32 97]
[34 95]
[35 94]
[36 93]
[37 92]
[38 91]
[41 88]
[42 87]
[43 86]
[44 85]
[48 84]
[49 83]
[50 82]
[52 81]
[53 80]
[55 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[63 72]
[64 71]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
