%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCACCAGGUGCCCAGUCUCCCAGUUGCGAGGGCAAGCAAACCCGUCAUGAGCAACUCCCUUCCCCAUCUCUGCUCACC\
) } def
/len { sequence length } bind def

/coor [
[62.04413223 345.69631958]
[51.52441406 340.48049927]
[42.80203247 352.68377686]
[34.07965088 364.88708496]
[25.35727119 377.09036255]
[16.63488960 389.29364014]
[12.34357166 405.69549561]
[-4.60524988 406.11236572]
[-9.69773388 389.94131470]
[4.43160868 380.57125854]
[13.15398979 368.36798096]
[21.87637138 356.16470337]
[30.59875107 343.96139526]
[39.32113266 331.75811768]
[26.01227188 317.25317383]
[16.49273491 300.01327515]
[11.30210114 281.00778198]
[10.73642254 261.30627441]
[14.83135033 242.01853943]
[23.35991096 224.23185730]
[35.84508133 208.94984436]
[51.58647537 197.03576660]
[69.69962311 189.16381836]
[89.16566467 185.78088379]
[89.74729919 170.79217529]
[90.32892609 155.80345154]
[90.91056061 140.81472778]
[91.49218750 125.82601166]
[92.07382202 110.83729553]
[91.49218750 95.84857178]
[89.75079346 80.94999695]
[87.72082520 66.08798981]
[85.40304565 51.26814270]
[83.08525848 36.44829559]
[69.21228790 29.49702835]
[62.10457230 15.70354939]
[64.49518585 0.37173301]
[75.46488953 -10.60302353]
[90.79560089 -13.00070381]
[104.59235382 -5.89934921]
[111.55001831 7.97042322]
[108.99321747 23.27540398]
[97.90510559 34.13051605]
[100.22289276 48.95036316]
[102.54067230 63.77021027]
[106.79603577 70.05419159]
[104.64936829 79.20860291]
[106.39076233 94.10717773]
[108.90650940 96.31258392]
[110.57782745 99.57481384]
[110.97564697 103.54220581]
[109.82414246 107.69620514]
[107.06253815 111.41892242]
[106.48091125 126.40763855]
[105.89927673 141.39636230]
[105.31764984 156.38508606]
[104.73601532 171.37379456]
[104.15438843 186.36251831]
[115.70487976 188.71572876]
[126.80545044 192.67599487]
[137.23374939 198.16340637]
[146.78099060 205.06748962]
[155.25607300 213.24940491]
[162.48950195 222.54473877]
[168.33670044 232.76681519]
[172.68090820 243.71044922]
[175.43554688 255.15606689]
[176.54592896 266.87408447]
[175.99032593 278.62957764]
[173.78041077 290.18688965]
[169.96104431 301.31442261]
[164.60926819 311.78930664]
[157.83287048 321.40179443]
[149.76814270 329.95950317]
[140.57713318 337.29125977]
[130.44442749 343.25051880]
[119.57342529 347.71826172]
[108.18226624 350.60543823]
[96.49943542 351.85467529]
[84.75919342 351.44149780]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[5 11]
[6 10]
[24 58]
[25 57]
[26 56]
[27 55]
[28 54]
[29 53]
[30 48]
[31 47]
[32 45]
[33 44]
[34 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
