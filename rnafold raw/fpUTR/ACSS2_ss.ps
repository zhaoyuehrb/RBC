%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCCCCACUCACCAGGCCCCGCCCCUCUACGGAGGCCCCGCCUCUAGUUCGGCCUGUUUUCUCAGUCCCGGCACCCGCCGCGACCGCAAAGGCGGCCGCGGUUCUAGGAACUUGACGUG\
) } def
/len { sequence length } bind def

/coor [
[-13.44349384 192.00576782]
[-2.10071158 201.82113647]
[5.55188227 214.72221375]
[8.72729015 229.38224792]
[7.09895182 244.29360962]
[0.83432567 257.92279053]
[-9.42232990 268.86813354]
[-22.61621284 276.00405884]
[-37.39045715 278.59667969]
[-52.22566986 276.37939453]
[-65.59619141 269.58016968]
[-76.12698364 258.89831543]
[-82.73505402 245.43229675]
[-84.74082947 230.56700134]
[-81.93802643 215.83119202]
[-74.61489868 202.74028015]
[-63.52509689 192.64093018]
[-78.40093994 194.56690979]
[-93.27677917 196.49287415]
[-108.15261841 198.41885376]
[-123.00242615 200.53619385]
[-137.82374573 202.84455872]
[-152.64506531 205.15290833]
[-159.60514832 219.02146912]
[-173.40315247 226.12040710]
[-188.73344421 223.72004700]
[-199.70121765 212.74337769]
[-202.08915710 197.41113281]
[-194.97901917 183.61889648]
[-181.10482788 176.67005920]
[-165.80148315 179.23658752]
[-154.95343018 190.33160400]
[-140.13211060 188.02323914]
[-125.31078339 185.71487427]
[-119.11248779 181.52702332]
[-110.07859039 183.54301453]
[-95.20275116 181.61703491]
[-80.32691193 179.69107056]
[-65.45107269 177.76509094]
[-59.18812561 172.46545410]
[-49.99597931 172.38900757]
[-37.13626099 164.66711426]
[-24.27654266 156.94522095]
[-17.34837151 143.76000977]
[-1.53417611 143.28907776]
[11.32554340 135.56719971]
[18.25371361 122.38198090]
[34.06790924 121.91105652]
[46.92762756 114.18916321]
[59.78734970 106.46726990]
[72.64706421 98.74537659]
[85.50679016 91.02349091]
[93.06246948 78.06541443]
[93.44868469 63.07038879]
[86.06928253 49.07557297]
[94.13171387 36.55173874]
[94.51793671 21.55671120]
[94.90415192 6.56168413]
[83.83992004 -4.72362852]
[84.07978821 -20.52609634]
[95.48144531 -31.47039795]
[111.28049469 -31.06346893]
[122.10363770 -19.54673767]
[121.52969360 -3.75287366]
[109.89917755 6.94790268]
[109.51296234 21.94293022]
[109.12673950 36.93795776]
[116.53377533 49.86022949]
[108.44371796 63.45660782]
[108.05749512 78.45162964]
[122.02396393 83.92318726]
[131.92623901 72.65620422]
[141.82852173 61.38922882]
[147.74316406 45.50044632]
[164.64834595 46.78548431]
[168.09333801 63.38573456]
[153.09550476 71.29151154]
[143.19322205 82.55848694]
[133.29093933 93.82546997]
[139.47421265 107.49174500]
[154.47421265 107.49174500]
[169.47421265 107.49174500]
[184.47421265 107.49174500]
[199.47421265 107.49174500]
[213.27438354 99.75444794]
[226.00166321 107.49174500]
[241.00166321 107.49174500]
[256.00164795 107.49174500]
[271.00164795 107.49174500]
[284.92547607 98.82804108]
[299.26089478 106.79216766]
[299.26089478 123.19132233]
[284.92547607 131.15544128]
[271.00164795 122.49174500]
[256.00164795 122.49174500]
[241.00166321 122.49174500]
[226.00166321 122.49174500]
[213.27438354 130.22904968]
[199.47421265 122.49174500]
[184.47421265 122.49174500]
[169.47421265 122.49174500]
[154.47421265 122.49174500]
[139.47421265 122.49174500]
[127.37655640 129.24195862]
[115.14892578 131.19841003]
[104.42607880 128.97047424]
[96.45162201 123.66689301]
[91.94123077 116.71492767]
[91.01843262 109.64727783]
[93.22867584 103.88320923]
[80.36895752 111.60510254]
[67.50923920 119.32698822]
[54.64952087 127.04888153]
[41.78980255 134.77078247]
[33.94181824 148.50830078]
[19.04743576 148.42691040]
[6.18771601 156.14880371]
[-1.66026723 169.88633728]
[-16.55464935 169.80494690]
[-29.41436958 177.52684021]
[-42.27408981 185.24873352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 39]
[18 38]
[19 37]
[20 36]
[21 34]
[22 33]
[23 32]
[41 121]
[42 120]
[43 119]
[45 117]
[46 116]
[48 114]
[49 113]
[50 112]
[51 111]
[52 110]
[53 70]
[54 69]
[56 67]
[57 66]
[58 65]
[71 79]
[72 78]
[73 77]
[80 103]
[81 102]
[82 101]
[83 100]
[84 99]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
