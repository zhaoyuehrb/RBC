%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACGAGUGGGAACGUAGCUGGUCGCAGAGGGCACCAGCGGCUGCAGGACUUCACCAAGGGACCCUGAGGCUCGUGAGCAGGGACCCGCGGUGCGGGUUAUGCUGGGGGCUCAGAUCACCGUAGACAACUGGACACUCAGGACCACGCC\
) } def
/len { sequence length } bind def

/coor [
[8.38312721 480.65786743]
[1.44077599 486.59069824]
[-7.32694197 488.59472656]
[-13.13967514 502.42269897]
[-18.95240974 516.25061035]
[-10.79926014 529.45312500]
[-11.99702263 544.92388916]
[-22.08513260 556.71411133]
[-37.18450546 560.29022217]
[-51.48912811 554.27716064]
[-59.49857330 540.98699951]
[-58.13305283 525.53009033]
[-47.91763687 513.84997559]
[-32.78035736 510.43789673]
[-26.96762276 496.60995483]
[-21.15488815 482.78201294]
[-25.61994553 462.66854858]
[-8.54442215 449.79290771]
[-3.61142206 435.62725830]
[1.17296743 421.41073608]
[5.80822229 407.14489746]
[10.44347763 392.87905884]
[15.07873249 378.61318970]
[19.71398735 364.34735107]
[18.78358078 356.96514893]
[24.59857941 349.83309937]
[21.47723007 335.26919556]
[33.32257080 324.78118896]
[38.25556946 310.61553955]
[43.18856812 296.44989014]
[34.56700134 286.20846558]
[32.12873459 272.93484497]
[36.61930847 260.09320068]
[46.96159363 251.08911133]
[60.51190186 248.36662292]
[65.74048615 234.30738831]
[70.96906281 220.24815369]
[76.19764709 206.18893433]
[69.78311157 192.79530334]
[74.88536072 178.46275330]
[88.97731781 171.82542419]
[94.05838776 157.71220398]
[98.99138641 143.54655457]
[103.92439270 129.38092041]
[108.85739136 115.21527100]
[91.54071808 113.81900024]
[85.22279358 99.18650055]
[72.72897339 90.88562775]
[57.28797531 94.25476074]
[44.03251648 85.64846039]
[40.82682800 70.17269897]
[49.57278824 57.00897598]
[65.08157349 53.96708298]
[78.15209961 62.85173035]
[81.02985382 78.39180756]
[93.52366638 86.69268036]
[102.93973541 84.54212952]
[112.28797150 88.73484039]
[117.51565552 98.22246552]
[126.07635498 85.90522766]
[134.50761414 73.49902344]
[142.80848694 61.00520325]
[141.03164673 48.18637466]
[148.25663757 37.93733215]
[160.14067078 35.46752548]
[168.70138550 23.15028763]
[177.26208496 10.83305073]
[185.82278442 -1.48418784]
[194.38348389 -13.80142593]
[195.90596008 -29.54920959]
[209.52305603 -35.58441544]
[218.08377075 -47.90165329]
[226.64447021 -60.21889114]
[224.09001160 -70.87731171]
[227.78306580 -80.96222687]
[236.26144409 -87.18923950]
[246.54901123 -87.67478180]
[255.61799622 -99.62273407]
[264.68698120 -111.57067871]
[273.75598145 -123.51863098]
[272.78753662 -136.42373657]
[280.64181519 -146.19888306]
[292.65750122 -147.91761780]
[301.97470093 -159.67301941]
[311.29193115 -171.42842102]
[320.60913086 -183.18382263]
[329.92636108 -194.93922424]
[339.24356079 -206.69462585]
[348.56079102 -218.45002747]
[353.66076660 -234.61871338]
[370.60937500 -234.19400024]
[374.89309692 -217.79016113]
[360.31619263 -209.13281250]
[350.99896240 -197.37741089]
[341.68176270 -185.62200928]
[332.36453247 -173.86660767]
[323.04733276 -162.11120605]
[313.73010254 -150.35580444]
[304.41290283 -138.60040283]
[302.82211304 -121.15200043]
[285.70391846 -114.44964600]
[276.63494873 -102.50169373]
[267.56594849 -90.55374146]
[258.49694824 -78.60579681]
[257.55557251 -59.33123016]
[238.96170044 -51.65818787]
[230.40100098 -39.34095001]
[221.84030151 -27.02371216]
[220.93014526 -12.15694046]
[206.70072937 -5.24072266]
[198.14002991 7.07651567]
[189.57931519 19.39375305]
[181.01861572 31.71099281]
[172.45791626 44.02822876]
[171.96586609 61.54208374]
[155.30230713 69.30607605]
[147.00143433 81.79989624]
[145.91233826 89.16036987]
[138.39360046 94.46593475]
[129.83288574 106.78317261]
[123.02303314 120.14826965]
[118.09003448 134.31391907]
[113.15703583 148.47955322]
[108.22403717 162.64520264]
[108.35115051 171.84652710]
[103.03655243 177.05400085]
[109.36712646 191.28640747]
[103.86431885 205.46998596]
[90.25687408 211.41751099]
[85.02829742 225.47674561]
[79.79971313 239.53596497]
[74.57113647 253.59519958]
[84.11553192 267.52114868]
[83.50939941 284.22714233]
[73.18762207 297.16558838]
[57.35421371 301.38290405]
[52.42121506 315.54855347]
[47.48821640 329.71420288]
[50.25672150 345.29129028]
[38.76422501 354.76608276]
[33.97983551 368.98260498]
[29.34457970 383.24847412]
[24.70932579 397.51431274]
[20.07406998 411.78015137]
[15.43881512 426.04598999]
[15.75859833 435.24264526]
[10.55422306 440.56027222]
[5.62122345 454.72592163]
[10.88173866 462.69262695]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[18 148]
[19 147]
[20 145]
[21 144]
[22 143]
[23 142]
[24 141]
[26 140]
[28 138]
[29 137]
[30 136]
[35 132]
[36 131]
[37 130]
[38 129]
[41 126]
[42 124]
[43 123]
[44 122]
[45 121]
[47 56]
[48 55]
[59 120]
[60 119]
[61 117]
[62 116]
[65 114]
[66 113]
[67 112]
[68 111]
[69 110]
[71 108]
[72 107]
[73 106]
[77 104]
[78 103]
[79 102]
[80 101]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
