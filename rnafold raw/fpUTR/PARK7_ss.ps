%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGUCUGCGCAGUGUGGGGCUGAGGGAGGCCGGACGGCGCGCGUGCGUGCUGGCGUGCGUUCAUUUUCAGCCUGGUGUGGGGUGAGUGGUACCCAACGGGCCGGGGCGCCGCGUCCGCAGGAAGAGGCGCGGGGUGCAGGCUUGUAAACAUAUAACAUAAAA\
) } def
/len { sequence length } bind def

/coor [
[9.55165958 188.90751648]
[9.75538826 173.90890503]
[13.01684761 159.26776123]
[19.19865799 145.60083008]
[28.04042816 133.48376465]
[39.16972351 123.42698669]
[52.11774826 115.85410309]
[66.33911133 111.08409882]
[81.23098755 109.31795502]
[66.36563873 107.31259155]
[51.50029373 105.30722809]
[36.63494492 103.30186462]
[29.97762680 111.74251556]
[20.47782516 116.59875488]
[9.89916706 117.04492188]
[0.17417632 113.06716156]
[-6.94876385 105.45363617]
[-10.21967411 95.63934326]
[-24.94529915 92.78347778]
[-39.67092514 89.92761230]
[-54.39654922 87.07173920]
[-69.12217712 84.21587372]
[-83.84780121 81.36000824]
[-98.57342529 78.50414276]
[-113.29904938 75.64827728]
[-128.10064697 73.21665955]
[-142.96598816 71.21129608]
[-157.83132935 69.20593262]
[-172.54203796 75.02881622]
[-184.12065125 65.65945435]
[-198.98599243 63.65409088]
[-213.86985779 61.79119873]
[-228.77088928 60.07094574]
[-239.37202454 67.47131348]
[-251.77368164 65.70230865]
[-259.37850952 56.25772476]
[-274.24386597 54.25236130]
[-289.10922241 52.24699783]
[-303.97454834 50.24163437]
[-318.83990479 48.23627090]
[-333.70526123 46.23090744]
[-348.57058716 44.22554398]
[-363.52764893 50.94998932]
[-376.66967773 41.14083481]
[-374.47726440 24.88890266]
[-359.20578003 18.91278458]
[-346.56521606 29.36019897]
[-331.69989014 31.36556244]
[-316.83453369 33.37092590]
[-301.96917725 35.37628937]
[-287.10385132 37.38165283]
[-272.23849487 39.38701630]
[-257.37313843 41.39237976]
[-241.54869080 33.85204697]
[-227.05064392 45.16991425]
[-212.14961243 46.89016724]
[-205.11141968 44.52229309]
[-196.98062134 48.78874588]
[-182.11528015 50.79410553]
[-168.46784973 44.82778549]
[-155.82597351 54.34058380]
[-140.96063232 56.34594727]
[-126.09528351 58.35131073]
[-123.05754852 56.47589874]
[-118.94819641 56.00564194]
[-114.45026398 57.43344498]
[-110.44318390 60.92265320]
[-95.71755981 63.77851868]
[-80.99192810 66.63438416]
[-66.26630402 69.49024963]
[-51.54068375 72.34611511]
[-36.81505585 75.20198822]
[-22.08943176 78.05785370]
[-7.36380768 80.91371918]
[7.87536335 68.84131622]
[27.39095688 71.84182739]
[38.64030838 88.43651581]
[53.50565720 90.44187927]
[68.37100220 92.44724274]
[83.23635101 94.45260620]
[95.58737946 85.94073486]
[99.00518036 71.33530426]
[102.42298889 56.72986984]
[105.84078979 42.12443924]
[109.25859070 27.51900673]
[102.05334473 13.18499184]
[108.89832306 -1.32451653]
[124.54264832 -4.87906361]
[136.98532104 5.24809408]
[136.68139648 21.28826904]
[123.86402130 30.93680954]
[120.44622040 45.54224014]
[117.02841949 60.14767075]
[113.61061859 74.75310516]
[110.19281006 89.35853577]
[115.01982880 95.09873199]
[129.50088501 112.31933594]
[144.47612000 111.45778656]
[159.45135498 110.59623718]
[174.42660522 109.73468781]
[189.40184021 108.87313843]
[204.37707520 108.01159668]
[219.35231018 107.15004730]
[232.68530273 98.63288116]
[245.83596802 105.62640381]
[259.16894531 97.10923767]
[272.31961060 104.10276031]
[287.29486084 103.24121094]
[300.62783813 94.72404480]
[313.77850342 101.71756744]
[328.75375366 100.85601807]
[343.72897339 99.99446869]
[358.70422363 99.13291931]
[373.67944336 98.27136993]
[388.65469360 97.40982819]
[403.62991333 96.54827881]
[418.59622192 95.54333496]
[427.55368042 82.72545624]
[442.66799927 78.71408081]
[456.80267334 85.40324402]
[463.28375244 99.63454437]
[459.05102539 114.68838501]
[446.10311890 123.45681000]
[430.55358887 121.79963684]
[419.74447632 110.49932098]
[413.28582764 114.16389465]
[404.49148560 111.52351379]
[389.51623535 112.38506317]
[374.54101562 113.24661255]
[359.56576538 114.10815430]
[344.59051514 114.96970367]
[329.61529541 115.83125305]
[314.64004517 116.69280243]
[302.37820435 125.14833832]
[288.15640259 118.21644592]
[273.18115234 119.07799530]
[260.91931152 127.53353119]
[246.69750977 120.60163879]
[234.43565369 129.05717468]
[220.21386719 122.12528229]
[205.23861694 122.98683167]
[190.26338196 123.84838104]
[175.28814697 124.70993042]
[160.31291199 125.57147217]
[145.33767700 126.43302155]
[130.36244202 127.29457092]
[140.60026550 138.25755310]
[148.38432312 151.07972717]
[153.38676453 165.22100830]
[155.39685059 180.08570862]
[154.32991028 195.04771423]
[150.23089600 209.47679138]
[143.27247620 222.76513672]
[133.74772644 234.35304260]
[122.05788422 243.75236511]
[108.69532776 250.56721497]
[94.22292328 254.51051331]
[79.25028992 255.41616821]
[64.40810394 253.24603271]
[50.32155228 248.09152222]
[37.58399200 240.16973877]
[26.73195648 229.81437683]
[18.22256279 217.46163940]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 80]
[10 79]
[11 78]
[12 77]
[18 74]
[19 73]
[20 72]
[21 71]
[22 70]
[23 69]
[24 68]
[25 67]
[26 63]
[27 62]
[28 61]
[30 59]
[31 58]
[32 56]
[33 55]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[97 146]
[98 145]
[99 144]
[100 143]
[101 142]
[102 141]
[103 140]
[105 138]
[107 136]
[108 135]
[110 133]
[111 132]
[112 131]
[113 130]
[114 129]
[115 128]
[116 127]
[117 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
