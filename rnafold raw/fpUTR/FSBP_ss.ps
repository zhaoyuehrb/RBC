%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUCUGUUUGUGAAAAGAGCUGAGCAGAGCUGAAGGCUGCAUGGUGGUUUCAGAAACUGCCUACUUAAUUUGAAAAGAACA\
) } def
/len { sequence length } bind def

/coor [
[87.40775299 225.47131348]
[84.00879669 210.86148071]
[85.13907623 195.90782166]
[74.24257660 206.21638489]
[63.34607315 216.52493286]
[52.44956970 226.83348083]
[41.55306625 237.14202881]
[42.66422653 252.74008179]
[33.44737625 265.37274170]
[18.25443077 269.07522583]
[4.25903225 262.09933472]
[-1.93061924 247.73889160]
[2.60804057 232.77445984]
[15.73199558 224.27175903]
[31.24451447 226.24552917]
[42.14101791 215.93698120]
[53.03752136 205.62841797]
[63.93402481 195.31987000]
[74.83052826 185.01132202]
[81.76358795 171.70971680]
[83.97311401 156.87335205]
[86.18264008 142.03697205]
[77.13809204 130.25852966]
[79.16751099 115.18086243]
[91.58315277 105.77396393]
[89.52895355 97.76116180]
[94.15823364 90.43423462]
[96.91448212 75.68963623]
[99.67072296 60.94504166]
[102.42696381 46.20044708]
[92.29113770 32.08573151]
[95.32093811 15.31472778]
[109.19918823 6.01147079]
[111.40871429 -8.82490349]
[113.61824036 -23.66127777]
[115.82775879 -38.49765015]
[118.03728485 -53.33402634]
[120.24681091 -68.17040253]
[114.62670135 -82.95975494]
[124.15435028 -94.40847015]
[112.98728943 -105.18234253]
[110.31882477 -120.46824646]
[117.17504120 -134.38844299]
[130.91958618 -141.59033203]
[146.26739502 -139.30464172]
[157.31692505 -128.41026306]
[159.81939697 -113.09631348]
[152.81257629 -99.25131226]
[138.99072266 -92.19894409]
[144.76887512 -78.47079468]
[135.08319092 -65.96087646]
[132.87365723 -51.12450027]
[130.66413879 -36.28812790]
[128.45460510 -21.45175171]
[126.24508667 -6.61537790]
[124.03556061 8.22099590]
[133.15231323 17.52289772]
[135.20278931 30.58359718]
[129.19978333 42.58247375]
[117.17156219 48.95668793]
[114.41532135 63.70128632]
[111.65907288 78.44588470]
[108.90283203 93.19047546]
[106.41952515 107.98348999]
[115.55530548 120.59996033]
[113.10318756 135.61466980]
[101.01901245 144.24649048]
[98.80948639 159.08287048]
[96.59996033 173.91925049]
[108.21394348 164.42633057]
[122.13732910 158.84606934]
[137.09274292 157.69042969]
[151.70812988 161.06541443]
[164.64260864 168.66140747]
[174.70954895 179.78150940]
[180.98535156 193.40554810]
[182.89427185 208.28358459]
[180.26115417 223.05067444]
[173.32760620 236.35202026]
[162.72970581 246.96730042]
[149.43974304 253.92266846]
[134.67700195 256.57998657]
[119.79584503 254.69546509]
[106.16154480 248.44201660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[20 69]
[21 68]
[22 67]
[25 64]
[27 63]
[28 62]
[29 61]
[30 60]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[40 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
