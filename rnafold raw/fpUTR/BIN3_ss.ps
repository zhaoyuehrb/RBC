%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUACGUCACUUCCUGGAGACUGGUUGAAUCCGGAAGUGACCCUAGAGAAACGAGUUGUGGCUGAGGACCCCGGCGGCAGACGCAGGUUCGGGACC\
) } def
/len { sequence length } bind def

/coor [
[86.45348358 167.76248169]
[72.07355499 163.49427795]
[61.51960754 152.83528137]
[57.39403534 138.41378784]
[60.71411896 123.78582764]
[70.66119385 112.55838013]
[84.78130341 107.50000000]
[69.78130341 107.50000000]
[54.78129959 107.50000000]
[39.78129959 107.50000000]
[24.78129959 107.50000000]
[9.78130054 107.50000000]
[-5.21869993 107.50000000]
[-20.21870041 107.50000000]
[-35.21870041 107.50000000]
[-43.98807907 110.67651367]
[-50.69754791 107.25187683]
[-65.68984222 106.77110291]
[-80.68213654 106.29032898]
[-92.15872192 116.82244873]
[-107.35619354 116.12130737]
[-117.32623291 105.11522675]
[-129.96467590 114.99698639]
[-145.53645325 111.13702393]
[-152.09623718 96.49636078]
[-144.61190796 82.30606842]
[-128.82481384 79.45172119]
[-116.84545898 90.12293243]
[-106.19074249 79.77824402]
[-90.97957611 80.05224609]
[-80.20136261 91.29803467]
[-65.20906830 91.77880859]
[-50.21677399 92.25958252]
[-35.21870041 92.50000000]
[-20.21870041 92.50000000]
[-5.21869993 92.50000000]
[9.78130054 92.50000000]
[24.78129959 92.50000000]
[39.78129959 92.50000000]
[54.78129959 92.50000000]
[69.78130341 92.50000000]
[84.78130341 92.50000000]
[97.35262299 84.31697845]
[103.42436981 70.60078430]
[109.49612427 56.88459778]
[105.57191467 44.46953964]
[111.05604553 33.10662079]
[122.46414185 28.74407387]
[128.97239685 15.22953987]
[123.98722076 0.47197169]
[130.78004456 -13.14097404]
[144.87985229 -17.80262756]
[151.38810730 -31.31715965]
[147.46792603 -46.87388611]
[157.30072021 -59.55046463]
[173.34361267 -59.62251282]
[183.28987122 -47.03475571]
[179.50956726 -31.44344711]
[164.90263367 -24.80890465]
[158.39437866 -11.29437065]
[163.54084778 2.63579583]
[157.13305664 16.43416595]
[142.48692322 21.73779678]
[135.97866821 35.25233078]
[138.30802917 52.56468201]
[123.21231079 62.95634842]
[117.14056396 76.67253876]
[111.06880951 90.38872528]
[113.20439148 93.68236542]
[114.38690948 97.41939545]
[114.53434753 101.33055115]
[127.10567474 109.51357269]
[139.67698669 117.69659424]
[152.24832153 125.87962341]
[165.43438721 133.02995300]
[179.15058899 139.10169983]
[192.86677551 145.17346191]
[208.28985596 140.75668335]
[221.27508545 150.17811584]
[221.86128235 166.21044922]
[209.59880066 176.55505371]
[193.89433289 173.27642822]
[186.79502869 158.88964844]
[173.07882690 152.81790161]
[159.36264038 146.74613953]
[157.06541443 147.77104187]
[154.23538208 147.98861694]
[151.16026306 147.20191956]
[148.18997192 145.31463623]
[145.70252991 142.34875488]
[144.06529236 138.45094299]
[131.49397278 130.26791382]
[118.92264557 122.08489227]
[106.35132599 113.90187073]
[115.42617035 125.84536743]
[117.63713074 140.68153381]
[112.43902588 154.75205994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[17 33]
[18 32]
[19 31]
[22 28]
[43 68]
[44 67]
[45 66]
[48 64]
[49 63]
[52 60]
[53 59]
[71 94]
[72 93]
[73 92]
[74 91]
[75 85]
[76 84]
[77 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
