%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGAGUCCAGGGAGAGUGCGCGGGCGGCCGCCGGCUGAAUGAAGCCUGGGACGCGGGAGCCGCGCCGCGCGCAGUGUCUGCAGUGCCGGAGGUCUGGGAGGCUCCGGGCGAAGCCUCCCUGCUGCAGGUU\
) } def
/len { sequence length } bind def

/coor [
[186.82717896 190.35813904]
[176.58811951 190.68319702]
[166.60110474 188.32608032]
[157.55770874 183.44081116]
[150.08650208 176.35678101]
[144.70944214 167.55657959]
[141.80540466 157.64309692]
[141.58345032 147.29821777]
[144.06784058 137.23594666]
[131.44903564 129.12634277]
[118.83023071 121.01672363]
[106.21143341 112.90711212]
[92.25588989 112.05007172]
[85.67895508 99.71169281]
[70.42313385 102.85774994]
[57.74140167 94.45368958]
[54.83612823 79.89021301]
[42.21732712 71.78060150]
[29.59852409 63.67098618]
[16.97972107 55.56137466]
[4.36091757 47.45175934]
[-8.25788498 39.34214783]
[-20.87668800 31.23253632]
[-33.49549103 23.12292480]
[-46.20990372 15.16404629]
[-59.01812363 7.35702896]
[-71.82633972 -0.44998822]
[-84.63455963 -8.25700569]
[-97.44277954 -16.06402206]
[-112.61941528 -12.55580044]
[-125.49755096 -20.65568352]
[-128.74858093 -35.14590073]
[-141.55679321 -42.95291901]
[-155.04911804 -49.50708771]
[-169.10336304 -54.74905014]
[-183.15762329 -59.99101257]
[-197.21186829 -65.23297882]
[-211.48202515 -58.44047928]
[-226.34741211 -63.80664444]
[-232.98866272 -78.14782715]
[-227.46562195 -92.95565033]
[-213.05503845 -99.44490051]
[-198.30642700 -93.76561737]
[-191.96989441 -79.28722382]
[-177.91564941 -74.04525757]
[-163.86140442 -68.80329895]
[-149.80715942 -63.56133270]
[-156.21504211 -77.12374878]
[-153.60774231 -91.89540863]
[-142.94401550 -102.44458008]
[-128.14506531 -104.89217377]
[-114.65264893 -98.33818817]
[-107.42812347 -85.19261169]
[-109.12805176 -70.28924561]
[-119.12734222 -59.10827255]
[-133.74978638 -55.76113892]
[-120.94155884 -47.95412064]
[-106.57243347 -51.70429611]
[-93.47186279 -43.96932983]
[-89.63576508 -28.87224197]
[-76.82754517 -21.06522560]
[-64.01932526 -13.25820732]
[-51.21110535 -5.45119047]
[-38.40288544 2.35582662]
[-30.98193359 3.15872049]
[-25.38587952 10.50412083]
[-12.76707649 18.61373329]
[-0.14827314 26.72334480]
[12.47052956 34.83295822]
[25.08933258 42.94256973]
[37.70813751 51.05218124]
[50.32693863 59.16179657]
[62.94574356 67.27140808]
[77.40004730 63.86424637]
[90.31282806 71.90878296]
[93.78856659 87.09288788]
[107.74411011 87.94992828]
[114.32104492 100.28830719]
[126.93984985 108.39791870]
[139.55865479 116.50753021]
[152.17744446 124.61714172]
[169.63734436 114.14293671]
[189.92051697 113.78317261]
[207.61083984 123.55973816]
[218.02148438 140.79776001]
[218.43669128 160.85696411]
[232.08117676 167.08819580]
[245.72566223 173.31942749]
[259.20343018 165.85914612]
[274.31311035 167.74346924]
[285.28619385 178.04179382]
[288.05792236 192.65191650]
[301.70239258 198.88314819]
[315.34686279 205.11436462]
[327.74703979 201.34043884]
[339.01574707 206.88661194]
[343.30462646 218.26245117]
[356.79693604 224.81661987]
[370.28927612 231.37078857]
[383.78161621 237.92495728]
[397.27392578 244.47912598]
[410.76626587 251.03329468]
[424.25857544 257.58746338]
[437.75091553 264.14163208]
[451.37615967 256.71655273]
[466.75921631 258.75164795]
[477.98495483 269.46435547]
[480.73684692 284.73547363]
[473.95672607 298.69290161]
[460.25173950 305.96975708]
[444.89166260 303.76788330]
[433.78280640 292.93402100]
[431.19674683 277.63394165]
[417.70440674 271.07977295]
[404.21209717 264.52563477]
[390.71975708 257.97146606]
[377.22744751 251.41728210]
[363.73510742 244.86311340]
[350.24276733 238.30894470]
[336.75045776 231.75477600]
[319.38613892 233.98832703]
[309.11566162 218.75885010]
[295.47116089 212.52761841]
[281.82669067 206.29640198]
[268.97000122 213.76927185]
[254.00122070 212.22033691]
[242.68238831 202.03517151]
[239.49443054 186.96389771]
[225.84994507 180.73268127]
[212.20547485 174.50144958]
[205.26878357 181.96961975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 81]
[10 80]
[11 79]
[12 78]
[14 76]
[17 73]
[18 72]
[19 71]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[25 64]
[26 63]
[27 62]
[28 61]
[29 60]
[32 57]
[33 56]
[34 47]
[35 46]
[36 45]
[37 44]
[86 130]
[87 129]
[88 128]
[92 124]
[93 123]
[94 122]
[97 120]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
