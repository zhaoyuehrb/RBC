%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGAGUACGCACACGCCGAUUUGCCCUUUUGAUUCUUCCACAAUCAGGGUGAGACUGCUCCCAGUGCC\
) } def
/len { sequence length } bind def

/coor [
[81.96277618 258.02600098]
[71.87474060 269.53643799]
[57.58889771 275.02944946]
[42.38802719 273.24279785]
[29.76517677 264.58703613]
[22.62098694 251.05117798]
[22.59713936 235.74569702]
[29.69911385 222.18765259]
[42.29492950 213.49258423]
[57.49015808 211.65858459]
[62.76078033 197.61505127]
[68.03140259 183.57153320]
[73.30202484 169.52801514]
[63.79657745 152.86727905]
[69.19782257 134.15823364]
[86.63468933 124.85254669]
[89.97250366 110.22862244]
[86.03518677 96.81262207]
[95.40357208 86.43356323]
[90.93109131 71.25767517]
[101.30648804 60.57121658]
[104.64430237 45.94729614]
[107.98211670 31.32337761]
[111.31993103 16.69945908]
[114.65774536 2.07554030]
[117.99555969 -12.54837799]
[121.33337402 -27.17229652]
[124.67118073 -41.79621506]
[122.89127350 -47.42202759]
[123.61997223 -52.57022095]
[126.17179108 -56.29069901]
[129.56556702 -58.09528732]
[134.83619690 -72.13880920]
[140.10681152 -86.18233490]
[145.37744141 -100.22585297]
[137.53701782 -113.75589752]
[140.27877808 -129.15124512]
[152.30810547 -139.14270020]
[167.94514465 -139.01258850]
[179.80656433 -128.82235718]
[182.29174805 -113.38350677]
[174.22729492 -99.98580933]
[159.42095947 -94.95523071]
[154.15034485 -80.91171265]
[148.87971497 -66.86818695]
[143.60910034 -52.82466507]
[139.29510498 -38.45840073]
[135.95729065 -23.83448219]
[132.61947632 -9.21056461]
[129.28166199 5.41335440]
[125.94384766 20.03727341]
[122.60603333 34.66119003]
[119.26821899 49.28511047]
[115.93040466 63.90902710]
[120.64163208 78.03890991]
[110.02749634 89.77137756]
[113.96481323 103.18737793]
[104.59642792 113.56643677]
[101.25861359 128.19035339]
[109.40129852 135.93652344]
[113.39096069 146.35476685]
[112.51808929 157.39375305]
[107.02323151 166.91247559]
[98.03643036 173.09536743]
[87.34555054 174.79862976]
[82.07492828 188.84214783]
[76.80430603 202.88568115]
[71.53368378 216.92919922]
[81.77010345 228.30787659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 68]
[11 67]
[12 66]
[13 65]
[16 59]
[17 58]
[19 56]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[32 46]
[33 45]
[34 44]
[35 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
