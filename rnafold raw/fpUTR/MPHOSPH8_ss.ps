%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACGCCGCUGAUGUGGAGUAGGGCCGAGCGCGGAACGCGAGGGGCUGCUGGGGUGUUUGUCGCAGCGGGUUUUCCUCGGCGGUUUGCGGAGCUGCUAGG\
) } def
/len { sequence length } bind def

/coor [
[-2.28449011 265.07315063]
[-4.78524208 264.99530029]
[-15.22725105 275.76397705]
[-25.66926003 286.53268433]
[-36.11127090 297.30136108]
[-40.16333771 312.59484863]
[-54.57792282 316.34570312]
[-65.01993561 327.11441040]
[-75.46194458 337.88308716]
[-85.90395355 348.65176392]
[-89.37700653 364.67892456]
[-105.07393646 369.42639160]
[-116.84707642 358.01037598]
[-112.58523560 342.17471313]
[-96.67263031 338.20974731]
[-86.23062134 327.44107056]
[-75.78861237 316.67239380]
[-65.34660339 305.90371704]
[-62.04141617 291.38046265]
[-46.87994766 286.85934448]
[-36.43793869 276.09066772]
[-25.99592972 265.32199097]
[-15.55392075 254.55329895]
[-5.97121906 243.01329041]
[2.69538856 230.77033997]
[11.36199570 218.52738953]
[4.26076794 204.10194397]
[5.35982895 187.96745300]
[14.45600128 174.48356628]
[29.17261124 167.34071350]
[45.57982254 168.55030823]
[53.86529922 156.04626465]
[62.15077209 143.54223633]
[70.43624878 131.03820801]
[78.72172546 118.53416443]
[87.00719452 106.03012848]
[88.05952454 92.08795166]
[100.48876953 85.68439484]
[108.77423859 73.18035889]
[117.05971527 60.67632675]
[125.15165710 48.04618073]
[133.04814148 35.29292297]
[140.94462585 22.53966713]
[148.84109497 9.78640938]
[156.73757935 -2.96684718]
[164.63406372 -15.72010422]
[171.93313599 -28.82444000]
[178.61921692 -42.25188828]
[185.30528259 -55.67934036]
[191.99136353 -69.10678864]
[198.67742920 -82.53424072]
[205.36351013 -95.96168518]
[204.58862305 -111.76390839]
[217.18780518 -119.70808411]
[223.87388611 -133.13552856]
[218.61441040 -148.03900146]
[225.50901794 -162.26011658]
[240.46726990 -167.36172485]
[254.61468506 -160.31713867]
[259.55786133 -145.30580139]
[252.36410522 -131.23365784]
[237.30133057 -126.44945526]
[230.61526489 -113.02200317]
[231.86837769 -98.18020630]
[218.79095459 -89.27561188]
[212.10488892 -75.84815979]
[205.41880798 -62.42071152]
[198.73272705 -48.99326324]
[192.04666138 -35.56581497]
[185.36058044 -22.13836479]
[186.24208069 -18.55310059]
[185.31617737 -14.35081863]
[182.30831909 -10.44157505]
[177.38732910 -7.82362175]
[169.49084473 4.92963505]
[161.59436035 17.68289185]
[153.69787598 30.43614960]
[145.80139160 43.18940735]
[137.90490723 55.94266510]
[137.04512024 63.41581345]
[129.56375122 68.96179962]
[121.27827454 81.46583557]
[112.99280548 93.96987152]
[111.94047546 107.91204834]
[99.51123047 114.31560516]
[91.22576141 126.81964111]
[82.94028473 139.32366943]
[74.65480804 151.82771301]
[66.36933136 164.33174133]
[58.08385849 176.83578491]
[64.99304199 189.10646057]
[65.89883423 203.09277344]
[60.67984390 216.02874756]
[50.42026138 225.38114929]
[37.18514633 229.34547424]
[23.60494995 227.19400024]
[14.93834209 239.43695068]
[6.27173471 251.67990112]
[6.18427372 255.86921692]
[4.98062086 259.51406860]
[2.94153738 262.34851074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[5 20]
[7 18]
[8 17]
[9 16]
[10 15]
[24 98]
[25 97]
[26 96]
[31 90]
[32 89]
[33 88]
[34 87]
[35 86]
[36 85]
[38 83]
[39 82]
[40 81]
[41 79]
[42 78]
[43 77]
[44 76]
[45 75]
[46 74]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
