%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCAUGGGGGCGGAAGAGGUGCUGGGCAGGAGGCGGAAGAGGUGCUGUGCAGGAGGCGGGCGGGCGCGGUUCUUUCCGGAAGGAUUGAAUCUCCUUUAGCCCCGCCCGCCUCCGUAGCUGCCUGAAGUAGUGCAGGGUCAGCCCGCAAGUUGCAGGUC\
) } def
/len { sequence length } bind def

/coor [
[131.84777832 522.79254150]
[143.82803345 513.07257080]
[142.07586670 498.17526245]
[140.32371521 483.27795410]
[131.00843811 475.51144409]
[129.45269775 463.07873535]
[137.03715515 452.60537720]
[135.57600403 437.67669678]
[126.63573456 425.76364136]
[132.99195862 411.27542114]
[131.53080750 396.34674072]
[130.06965637 381.41809082]
[128.60850525 366.48941040]
[119.66822815 354.57635498]
[126.02445221 340.08813477]
[124.56330109 325.15945435]
[110.94372559 319.12847900]
[102.11281586 307.00942993]
[100.52316284 291.99813843]
[106.70127869 278.11547852]
[119.07942963 269.13058472]
[117.61827850 254.20191956]
[116.15711975 239.27325439]
[114.69596863 224.34458923]
[113.23481750 209.41592407]
[111.04743195 194.57627869]
[108.13901520 179.86093140]
[105.23060608 165.14559937]
[102.32219696 150.43026733]
[99.41378784 135.71492004]
[96.50537872 120.99958801]
[89.36169434 118.43967438]
[83.56977844 113.53672028]
[79.86556244 106.91371918]
[64.87198639 106.47473907]
[49.87841415 106.03575897]
[34.88483810 105.59677887]
[24.62276077 117.39609528]
[9.16911125 119.78748322]
[-4.17937040 111.64180756]
[-9.11993885 96.80519867]
[-3.31980920 82.28306580]
[10.48237514 74.93229675]
[25.76964378 78.22371674]
[35.32381821 90.60320282]
[50.31739044 91.04218292]
[65.31096649 91.48116302]
[80.30454254 91.92014313]
[86.24550629 83.75164795]
[95.28276825 79.24083710]
[97.32527161 64.38054657]
[99.36776733 49.52025986]
[97.43031311 40.54072952]
[101.59783173 34.39104462]
[103.92989349 19.57343483]
[106.26195526 4.75582790]
[108.59401703 -10.06177902]
[110.92607880 -24.87938690]
[113.25814056 -39.69699478]
[115.59020233 -54.51460266]
[117.92226410 -69.33220673]
[120.25432587 -84.14981842]
[122.58638763 -98.96742249]
[124.91844940 -113.78503418]
[127.25051117 -128.60264587]
[129.58256531 -143.42024231]
[127.82069397 -152.43586731]
[132.10740662 -158.50306702]
[134.72814941 -173.27235413]
[136.33488464 -188.18605042]
[136.92012024 -203.17463684]
[137.50535583 -218.16320801]
[138.09060669 -233.15179443]
[138.67584229 -248.14036560]
[128.22395325 -259.69006348]
[129.03099060 -274.88229370]
[140.10629272 -284.77539062]
[140.69152832 -299.76397705]
[141.27676392 -314.75256348]
[133.16291809 -329.00378418]
[141.68029785 -343.01757812]
[158.06695557 -342.37774658]
[165.46571350 -327.74249268]
[156.26535034 -314.16729736]
[155.68011475 -299.17874146]
[155.09486389 -284.19015503]
[165.36505127 -273.46359253]
[164.98504639 -258.25469971]
[153.66442871 -247.55513000]
[153.07917786 -232.56654358]
[152.49394226 -217.57797241]
[151.90869141 -202.58938599]
[151.32345581 -187.60081482]
[162.53091431 -197.57041931]
[177.51901245 -198.16778564]
[189.48435974 -189.12174988]
[192.99563599 -174.53851318]
[186.45899963 -161.03767395]
[172.84156799 -154.74755859]
[158.32456970 -158.52336121]
[149.49742126 -170.65161133]
[146.87669373 -155.88233948]
[144.40017700 -141.08818054]
[142.06811523 -126.27057648]
[139.73605347 -111.45297241]
[137.40399170 -96.63536072]
[135.07192993 -81.81775665]
[132.73986816 -67.00014496]
[130.40780640 -52.18254089]
[128.07574463 -37.36493301]
[125.74369049 -22.54732513]
[123.41162872 -7.72971821]
[121.07956696 7.08788919]
[118.74750519 21.90549660]
[116.41544342 36.72310257]
[114.22805786 51.56275940]
[112.18555450 66.42304993]
[110.14305878 81.28334045]
[121.27925873 99.37699127]
[111.22071075 118.09117889]
[114.12912750 132.80651855]
[117.03753662 147.52185059]
[119.94594574 162.23718262]
[122.85435486 176.95252991]
[125.76276398 191.66786194]
[136.36094666 181.05284119]
[151.28887939 182.52137756]
[159.61541748 194.99810791]
[155.24331665 209.34680176]
[141.37413025 215.06042480]
[128.16348267 207.95477295]
[129.62463379 222.88343811]
[131.08578491 237.81210327]
[132.54693604 252.74076843]
[134.00810242 267.66943359]
[147.89346313 274.08377075]
[156.64608765 286.50506592]
[157.99720764 301.53970337]
[151.68370056 315.14102173]
[139.49195862 323.69830322]
[140.95312500 338.62698364]
[149.99789429 351.60781860]
[143.53717041 365.02825928]
[144.99832153 379.95693970]
[146.45947266 394.88558960]
[147.92062378 409.81427002]
[156.96540833 422.79510498]
[150.50466919 436.21554565]
[151.96582031 451.14419556]
[163.03039551 465.83422852]
[155.22102356 481.52578735]
[156.97317505 496.42309570]
[158.72534180 511.32040405]
[172.63389587 517.99542236]
[180.70628357 531.14227295]
[180.36660767 546.56591797]
[171.72329712 559.34466553]
[157.53436279 565.40087891]
[142.32746887 562.80206299]
[130.95506287 552.37750244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 153]
[3 152]
[4 151]
[7 149]
[8 148]
[10 146]
[11 145]
[12 144]
[13 143]
[15 141]
[16 140]
[21 135]
[22 134]
[23 133]
[24 132]
[25 131]
[26 125]
[27 124]
[28 123]
[29 122]
[30 121]
[31 120]
[34 48]
[35 47]
[36 46]
[37 45]
[50 118]
[51 117]
[52 116]
[54 115]
[55 114]
[56 113]
[57 112]
[58 111]
[59 110]
[60 109]
[61 108]
[62 107]
[63 106]
[64 105]
[65 104]
[66 103]
[68 102]
[69 101]
[70 93]
[71 92]
[72 91]
[73 90]
[74 89]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
