%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAGGACCACUCCCUCCCCCGCACUCCUGCCUCGCCAUUUCUCUUCCCCGCCCGGCCGGCCUUCGCUUUGCGCACGCGCCUUUUGAGGUAACGGCCCAAAGAGGUGGAAGCGCUUUUCCCGCCCGGCCGCGGGGCGUGGCUCUGCGCGCAGCUUG\
) } def
/len { sequence length } bind def

/coor [
[52.16852570 363.03723145]
[46.49739838 366.49075317]
[40.22612000 368.62493896]
[33.65634537 369.34420776]
[27.10255814 368.62088013]
[20.44020081 382.06011963]
[13.77784348 395.49935913]
[21.09321594 409.18383789]
[18.93459892 424.55001831]
[8.13202190 435.68933105]
[-7.16070127 438.31845093]
[-21.06320763 431.42642212]
[-28.22970009 417.66339111]
[-25.90451431 402.32150269]
[-14.98173428 391.30004883]
[0.33861050 388.83700562]
[7.00096798 375.39776611]
[13.66332531 361.95852661]
[2.93236947 340.46688843]
[11.30709743 317.69323730]
[33.85208511 308.08349609]
[37.71020508 293.58813477]
[41.56832504 279.09280396]
[37.36489487 264.80361938]
[48.39139557 253.45783997]
[39.03004837 243.89578247]
[35.60220337 230.84851074]
[39.11061478 217.71040344]
[48.73891068 207.95462036]
[62.03848267 204.21496582]
[66.18586731 189.79972839]
[70.33324432 175.38449097]
[66.41656494 161.01406860]
[77.66787720 149.89118958]
[81.81526184 135.47593689]
[85.96263885 121.06069946]
[90.11002350 106.64545441]
[78.18653870 115.74658966]
[63.42055511 118.38583374]
[49.08261871 113.97861481]
[38.34848022 103.50109863]
[33.59568024 89.27397919]
[35.87691879 74.44846344]
[44.68692780 62.30829239]
[58.07434845 55.54242325]
[73.07396698 55.64945221]
[86.36347961 62.60567093]
[94.99934387 74.87032318]
[97.06892395 89.72560883]
[104.26364136 76.56369019]
[111.45836639 63.40177917]
[118.65308380 50.23986435]
[118.88353729 43.54174423]
[122.02241516 38.71971512]
[126.40811920 36.70370102]
[134.12368774 23.84018326]
[141.83924866 10.97666645]
[149.55480957 -1.88685119]
[157.27037048 -14.75036907]
[164.98593140 -27.61388588]
[155.00773621 -38.11023331]
[148.10200500 -50.82623672]
[144.73660278 -64.88711548]
[145.13615417 -79.32745361]
[149.26692200 -93.15744781]
[156.83967590 -105.43077087]
[167.32991028 -115.30933380]
[180.01411438 -122.12048340]
[194.01971436 -125.40284729]
[208.38511658 -124.93752289]
[222.12568665 -120.76273346]
[230.09709167 -133.46929932]
[238.06849670 -146.17585754]
[246.03990173 -158.88243103]
[240.41677856 -173.22421265]
[244.27169800 -187.95487976]
[255.92359924 -197.47840881]
[270.77133179 -198.30477905]
[278.74273682 -211.01133728]
[286.71414185 -223.71791077]
[294.68554688 -236.42446899]
[302.65692139 -249.13102722]
[310.62832642 -261.83758545]
[318.59973145 -274.54415894]
[326.57113647 -287.25073242]
[323.25875854 -302.47128296]
[331.52389526 -315.24398804]
[346.05480957 -318.30804443]
[354.02621460 -331.01461792]
[361.99761963 -343.72119141]
[362.05804443 -360.12020874]
[376.42272949 -368.03146362]
[390.31451416 -359.31652832]
[389.44271851 -342.94055176]
[374.70419312 -335.74978638]
[366.73278809 -323.04321289]
[358.76138306 -310.33663940]
[362.32608032 -295.92041016]
[354.42297363 -282.92059326]
[339.27770996 -279.27932739]
[331.30630493 -266.57275391]
[323.33489990 -253.86619568]
[315.36349487 -241.15963745]
[307.39208984 -228.45306396]
[299.42068481 -215.74650574]
[291.44927979 -203.03994751]
[283.47787476 -190.33337402]
[289.19515991 -176.60563660]
[285.69125366 -161.97053528]
[274.10607910 -152.08938599]
[258.74645996 -150.91102600]
[250.77505493 -138.20445251]
[242.80364990 -125.49789429]
[234.83226013 -112.79133606]
[245.26347351 -101.23117065]
[252.03221130 -87.19252014]
[254.58561707 -71.80319214]
[252.70989990 -56.30204010]
[246.54812622 -41.93926620]
[236.58937073 -29.87554359]
[223.62992859 -21.08825302]
[208.70957947 -16.29229164]
[193.02824402 -15.88190842]
[177.84945679 -19.89832306]
[170.13388062 -7.03480530]
[162.41831970 5.82871246]
[154.70275879 18.69223022]
[146.98719788 31.55574799]
[139.27163696 44.41926575]
[131.81500244 57.43458557]
[124.62027740 70.59649658]
[117.42556000 83.75841522]
[110.23083496 96.92032623]
[104.52526855 110.79283905]
[100.37788391 125.20807648]
[96.23049927 139.62332153]
[92.08312225 154.03855896]
[95.70314789 169.44006348]
[84.74848938 179.53186035]
[80.60110474 193.94711304]
[76.45372772 208.36235046]
[87.02811432 221.52954102]
[87.68493652 238.23844910]
[78.36348724 251.92094421]
[62.88673782 257.31594849]
[66.81420898 272.64193726]
[56.06366730 282.95092773]
[52.20554733 297.44625854]
[48.34742737 311.94158936]
[53.84939194 315.90176392]
[58.34946060 320.95095825]
[61.63773727 326.84365845]
[63.56304169 333.29513550]
[64.03985596 339.99536133]
[63.05211258 346.62390137]
[60.65361404 352.86517334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 18]
[6 17]
[7 16]
[21 149]
[22 148]
[23 147]
[25 145]
[30 141]
[31 140]
[32 139]
[34 137]
[35 136]
[36 135]
[37 134]
[49 133]
[50 132]
[51 131]
[52 130]
[55 129]
[56 128]
[57 127]
[58 126]
[59 125]
[60 124]
[71 114]
[72 113]
[73 112]
[74 111]
[78 107]
[79 106]
[80 105]
[81 104]
[82 103]
[83 102]
[84 101]
[85 100]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
