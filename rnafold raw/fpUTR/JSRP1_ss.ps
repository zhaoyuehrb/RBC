%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCCGUCCUGUCCACAAGGCUCAGCAAAGCGGCUGGCGGCCUGGCCUGGGACCUGCUGCUGCUCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[140.88928223 227.50164795]
[133.55740356 222.11827087]
[128.26693726 214.67654419]
[125.57090759 205.91680908]
[125.76286316 196.71894836]
[128.84510803 188.01403809]
[134.52630615 180.69009399]
[127.60007477 167.38493347]
[120.67385101 154.07977295]
[113.74761963 140.77459717]
[106.82138824 127.46944427]
[99.60655975 114.31854248]
[87.59510040 107.16197205]
[87.40306091 93.18145752]
[79.90306091 80.19107819]
[72.40306091 67.20069885]
[67.29823303 64.30031586]
[64.33780670 60.05517197]
[63.66505432 55.61308670]
[64.90091705 51.98785782]
[59.16066742 38.12966537]
[53.42041397 24.27147102]
[47.68016434 10.41327858]
[41.34088898 -3.18133807]
[34.41466141 -16.48649979]
[27.48843002 -29.79166222]
[20.56220245 -43.09682465]
[5.41591215 -47.60963821]
[-2.02950144 -61.55027390]
[2.64319301 -76.64800262]
[16.66176796 -83.94561005]
[31.70925331 -79.11355591]
[38.85824203 -65.01860809]
[33.86736298 -50.02305603]
[40.79359436 -36.71789169]
[47.71982193 -23.41272926]
[54.64605331 -10.10756683]
[59.14696503 -7.77940798]
[62.06156158 -2.43631458]
[61.53835678 4.67302752]
[67.27861023 18.53121948]
[73.01885986 32.38941193]
[78.75910950 46.24760818]
[85.39344025 59.70069885]
[92.89344025 72.69107819]
[100.39344025 85.68145752]
[112.40489960 92.83802795]
[112.59693909 106.81854248]
[119.82361603 112.91923523]
[120.12655640 120.54321289]
[127.05278015 133.84837341]
[133.97901917 147.15353394]
[140.90524292 160.45869446]
[147.83146667 173.76385498]
[169.62864685 177.84892273]
[182.04083252 195.92495728]
[178.11514282 217.24441528]
[188.24900818 228.30357361]
[198.38285828 239.36273193]
[208.51670837 250.42189026]
[224.31489563 250.86077881]
[235.11471558 262.39938354]
[234.50881958 278.19207764]
[222.85667419 288.86929321]
[207.07130432 288.09646606]
[196.51786804 276.33206177]
[197.45755005 260.55575562]
[187.32369995 249.49658203]
[177.18983459 238.43742371]
[167.05598450 227.37826538]
[158.53454590 230.24943542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 48]
[14 46]
[15 45]
[16 44]
[20 43]
[21 42]
[22 41]
[23 40]
[24 37]
[25 36]
[26 35]
[27 34]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
