%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGGGGGCGGGCGGAGGAAGUGAGCGCAGCGGGGAGGAAUGCGAGCGGGCGGGGCGUGUCGGCCCGGGGCGGCGGGGACAGCGGCGGGGACAGCGGCGGGCGGCUGGGACGGCGGGUGCGGCGGGGCCGAGCCCGCACG\
) } def
/len { sequence length } bind def

/coor [
[-68.20789337 234.06059265]
[-78.93117523 244.54922485]
[-89.65445709 255.03784180]
[-100.37773132 265.52645874]
[-100.71871948 281.09957886]
[-111.74306488 291.58377075]
[-126.58753204 291.16271973]
[-131.04283142 306.34365845]
[-145.55162048 309.71182251]
[-156.27488708 320.20043945]
[-156.61587524 335.77355957]
[-167.64022827 346.25775146]
[-182.48469543 345.83670044]
[-193.20797729 356.32531738]
[-191.83714294 371.90270996]
[-200.84228516 384.68713379]
[-215.97145081 388.64218140]
[-230.08111572 381.90039062]
[-236.50910950 367.64505005]
[-232.22033691 352.60708618]
[-219.23983765 343.88696289]
[-203.69659424 345.60205078]
[-192.97331238 335.11343384]
[-193.06587219 320.26327515]
[-182.34034729 309.47354126]
[-166.76351929 309.47717285]
[-156.04023743 298.98852539]
[-152.35194397 284.55783081]
[-137.07615662 280.43945312]
[-137.16871643 265.58929443]
[-126.44319153 254.79957581]
[-110.86636353 254.80319214]
[-100.14308167 244.31455994]
[-89.41979980 233.82594299]
[-78.69651794 223.33731079]
[-80.51944733 217.36903381]
[-80.56169891 211.08807373]
[-78.79653168 205.01776123]
[-75.34878540 199.67053223]
[-70.48630524 195.50460815]
[-64.59925842 192.88481140]
[-58.16884232 192.05070496]
[-51.72798920 193.09478760]
[-45.81720352 195.95298767]
[-33.60440063 187.24394226]
[-27.73432159 173.55484009]
[-12.00610352 171.84202576]
[0.20669995 163.13298035]
[12.41950321 154.42395020]
[24.63230705 145.71490479]
[36.84510803 137.00585938]
[49.05791473 128.29681396]
[55.41934967 111.97763062]
[73.71755219 110.27196503]
[85.73470306 101.29488373]
[91.42751312 88.52446747]
[105.28820801 86.68796539]
[111.71356964 72.23025513]
[126.54050446 70.81202698]
[138.55764771 61.83494186]
[150.57479858 52.85785675]
[162.59196472 43.88077164]
[174.60911560 34.90368652]
[186.52622986 25.79422188]
[198.34184265 16.55348969]
[210.15747070 7.31275702]
[221.97308350 -1.92797518]
[233.78869629 -11.16870785]
[232.24400330 -30.16105843]
[242.29849243 -46.17238617]
[259.79925537 -52.92387390]
[277.71594238 -47.89399719]
[288.89266968 -57.89802933]
[300.06939697 -67.90206146]
[311.24612427 -77.90609741]
[316.36856079 -92.87510681]
[331.01214600 -95.59819031]
[328.10223389 -107.84815979]
[330.69320679 -120.09545898]
[338.22705078 -130.00207520]
[349.20837402 -135.70394897]
[361.50079346 -136.16160583]
[372.74243164 -131.34913635]
[384.35073853 -140.84898376]
[390.13031006 -155.57676697]
[404.87997437 -157.64944458]
[416.48828125 -167.14930725]
[416.49954224 -182.78688049]
[426.59933472 -194.72540283]
[442.01885986 -197.32785034]
[455.47744751 -189.36543274]
[460.62042236 -174.59776306]
[455.01937866 -159.99768066]
[441.31896973 -152.45890808]
[425.98812866 -155.54100037]
[414.37985229 -146.04115295]
[409.43057251 -131.99287415]
[393.85058594 -129.24069214]
[382.24227905 -119.74082947]
[384.10784912 -102.24275970]
[375.06835938 -86.96292877]
[358.54574585 -80.05213165]
[341.01617432 -84.42146301]
[336.69314575 -70.16800690]
[321.25015259 -66.72936249]
[310.07342529 -56.72533035]
[298.89669800 -46.72129822]
[287.71997070 -36.71726608]
[290.95660400 -25.90298271]
[289.88156128 -14.61421776]
[284.61422729 -4.51374102]
[275.89425659 2.89605141]
[264.97811890 6.49658012]
[253.45794678 5.72182226]
[243.02943420 0.64691210]
[231.21382141 9.88764477]
[219.39819336 19.12837601]
[207.58258057 28.36910820]
[195.76695251 37.60984039]
[192.40934753 44.26074219]
[183.58619690 46.92084122]
[171.56904602 55.89792633]
[159.55189514 64.87500763]
[147.53474426 73.85209656]
[135.51757812 82.82917786]
[129.95178223 96.64478302]
[114.26529694 98.70511627]
[108.57248688 111.47553253]
[94.71179199 113.31203461]
[82.69463348 122.28911591]
[80.05627441 134.96730042]
[69.79608154 142.19076538]
[57.76695633 140.50961304]
[45.55415344 149.21865845]
[33.34135056 157.92770386]
[21.12854576 166.63674927]
[8.91574287 175.34579468]
[-3.29706001 184.05484009]
[-10.04068089 198.36686707]
[-24.89535713 199.45674133]
[-37.10816193 208.16578674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[7 29]
[9 27]
[10 26]
[13 23]
[14 22]
[44 141]
[45 140]
[47 138]
[48 137]
[49 136]
[50 135]
[51 134]
[52 133]
[54 130]
[55 129]
[57 127]
[59 125]
[60 124]
[61 123]
[62 122]
[63 121]
[64 119]
[65 118]
[66 117]
[67 116]
[68 115]
[72 108]
[73 107]
[74 106]
[75 105]
[77 103]
[83 99]
[84 98]
[86 96]
[87 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
