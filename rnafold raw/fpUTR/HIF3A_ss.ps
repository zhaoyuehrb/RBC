%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAAGUCAGGGAGGGGACAGAGCGGCCCUAGGCGCGCCACAGAGAGGAGCGAGGCGCCAGAGGCACC\
) } def
/len { sequence length } bind def

/coor [
[28.88065338 198.67472839]
[17.37618065 204.16969299]
[4.83141756 206.36029053]
[-7.82500744 205.09245300]
[-19.65838051 200.46786499]
[-29.79693413 192.83575439]
[-37.49607086 182.76667786]
[-51.53959274 188.03729248]
[-65.58311462 193.30792236]
[-69.58126068 208.30107117]
[-81.64977264 218.05456543]
[-97.14805603 218.81799316]
[-110.11670685 210.29780579]
[-115.56901550 195.77017212]
[-111.40846252 180.82127380]
[-99.23485565 171.19927979]
[-83.72920227 170.60401917]
[-70.85373688 179.26438904]
[-56.81021500 173.99377441]
[-42.76669312 168.72314453]
[-43.00379562 151.23414612]
[-36.77015305 134.85769653]
[-24.92041397 121.90557098]
[-9.10378838 114.21549988]
[8.46544838 112.89038849]
[25.31794548 118.14020538]
[39.07634354 129.24917603]
[51.95307541 121.55568695]
[64.82980347 113.86219788]
[77.53067017 105.88171387]
[90.04927063 97.61826324]
[94.69065857 90.67879486]
[103.32009888 89.27964783]
[116.19683075 81.58615875]
[129.07356262 73.89266968]
[141.95028687 66.19918060]
[154.82702637 58.50568771]
[158.79643250 43.44309998]
[171.96487427 35.82424164]
[186.30027771 39.70129395]
[194.17857361 25.98111916]
[209.07273865 26.09538651]
[210.32949829 10.62928963]
[220.46250916 -1.12238121]
[235.57540894 -4.64086819]
[249.85699463 1.42675912]
[257.81567383 14.74737358]
[256.39120483 30.19892693]
[246.13131714 41.83998108]
[230.98114014 45.19431686]
[216.76622009 38.97211838]
[209.80895996 52.14200211]
[193.99377441 52.57802582]
[190.61477661 67.03894043]
[177.66554260 75.02466583]
[162.52050781 71.38242340]
[149.64378357 79.07591248]
[136.76704407 86.76940155]
[123.89031982 94.46289062]
[111.01358795 102.15637970]
[98.31272125 110.13685608]
[85.79412079 118.40031433]
[80.12693787 125.98931122]
[72.52329254 126.73892975]
[59.64656448 134.43241882]
[46.76983261 142.12590027]
[49.79804611 154.58676147]
[49.35850906 167.38792419]
[45.49169540 179.58345032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 20]
[8 19]
[9 18]
[27 66]
[28 65]
[29 64]
[30 62]
[31 61]
[33 60]
[34 59]
[35 58]
[36 57]
[37 56]
[40 53]
[42 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
