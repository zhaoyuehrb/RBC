%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCGCAGGCGCGGCCGGAUUCCGGGCAGUGACGCGACGGCGGGCCGCGCGGCGCAUUUCCGCCUCUGGCGAAUGGCUCGUCUGUAGUGCACGCCGCGGGCCCAGCUGCGACCCCGGCCCCGCCCCCGGGACCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[52.90060806 348.02542114]
[48.99812698 350.90454102]
[44.07775497 365.07455444]
[39.15738297 379.24459839]
[34.23701096 393.41464233]
[37.85398865 409.40994263]
[25.62814331 420.33975220]
[10.13637543 414.96041870]
[7.31528759 398.80575562]
[20.06697273 388.49426270]
[24.98734665 374.32421875]
[29.90771866 360.15420532]
[34.82809067 345.98416138]
[39.43154907 331.70800781]
[43.71580887 317.33285522]
[48.00006485 302.95770264]
[52.28432465 288.58255005]
[56.56858063 274.20739746]
[60.85284042 259.83224487]
[55.84404373 243.04920959]
[69.23056030 230.45932007]
[73.19348907 215.99227905]
[77.15642548 201.52525330]
[81.11935425 187.05821228]
[85.08228302 172.59117126]
[89.04521942 158.12413025]
[93.00814819 143.65708923]
[79.68273926 138.66618347]
[68.78653717 129.78578186]
[61.39384842 118.03378296]
[58.18749619 104.70285797]
[59.39690399 91.21865082]
[64.78518677 78.98732758]
[73.68547821 69.24898529]
[85.08155823 62.95201874]
[97.72302246 60.66130066]
[99.72232056 45.79513931]
[97.75527954 36.79029846]
[101.93534851 30.62146568]
[104.26535797 15.80353546]
[106.59536743 0.98560566]
[108.92537689 -13.83232403]
[111.09017181 -28.67529106]
[113.08947754 -43.54145432]
[115.08878326 -58.40761566]
[117.08808136 -73.27378082]
[119.08738708 -88.13993835]
[117.12034607 -97.14478302]
[121.30041504 -103.31361389]
[123.63042450 -118.13154602]
[125.96043396 -132.94947815]
[128.29045105 -147.76741028]
[130.62045288 -162.58532715]
[132.95046997 -177.40325928]
[135.28047180 -192.22119141]
[127.40032959 -198.18705750]
[122.30467224 -206.58790588]
[120.67456818 -216.21812439]
[122.69728088 -225.71401978]
[128.04588318 -233.74696350]
[135.93122864 -239.20918274]
[145.21807861 -241.36659241]
[148.85772705 -255.91831970]
[152.49736023 -270.47006226]
[144.62974548 -283.91397095]
[148.52815247 -298.61962891]
[161.39334106 -306.03735352]
[157.23577881 -321.30252075]
[167.83003235 -331.77203369]
[171.46966553 -346.32379150]
[175.10929871 -360.87551880]
[178.74893188 -375.42724609]
[182.38858032 -389.97900391]
[175.40226746 -404.42098999]
[182.46722412 -418.82467651]
[198.16381836 -422.14074707]
[210.45095825 -411.82543945]
[209.90301514 -395.79174805]
[196.94030762 -386.33935547]
[193.30067444 -371.78762817]
[189.66104126 -357.23587036]
[186.02139282 -342.68414307]
[182.38175964 -328.13241577]
[186.79966736 -313.90808105]
[175.94508362 -302.39770508]
[183.80325317 -289.79675293]
[180.31944275 -274.98736572]
[167.04908752 -266.83041382]
[163.40945435 -252.27868652]
[159.76982117 -237.72694397]
[171.78309631 -221.27598572]
[167.86486816 -200.99127197]
[150.09840393 -189.89118958]
[147.76840210 -175.07325745]
[145.43838501 -160.25532532]
[143.10836792 -145.43739319]
[140.77836609 -130.61946106]
[138.44834900 -115.80153656]
[136.11834717 -100.98360443]
[133.95355225 -86.14064026]
[131.95423889 -71.27447510]
[129.95494080 -56.40831375]
[127.95563507 -41.54214859]
[125.95633698 -26.67598724]
[128.20034790 -19.57022667]
[123.74330902 -11.50231361]
[121.41329956 3.31561637]
[119.08329010 18.13354683]
[116.75328064 32.95147705]
[114.58848572 47.79444504]
[112.58917999 62.66060638]
[124.78237152 68.33995056]
[134.57513428 77.95060730]
[140.71998596 90.51976776]
[142.35192871 104.68684387]
[139.10578918 118.85034180]
[131.17814636 131.34887695]
[142.84584045 140.77568054]
[154.51353455 150.20249939]
[170.63380432 155.45353699]
[170.05049133 172.39744568]
[153.60728455 176.52749634]
[145.08671570 161.87019348]
[133.41902161 152.44337463]
[121.75132751 143.01657104]
[107.47518158 147.62002563]
[103.51225281 162.08706665]
[99.54932404 176.55410767]
[95.58639526 191.02113342]
[91.62345886 205.48817444]
[87.66053009 219.95521545]
[83.69760132 234.42225647]
[89.40812683 246.04620361]
[85.75227356 258.05087280]
[75.22799683 264.11648560]
[70.94374084 278.49163818]
[66.65947723 292.86679077]
[62.37522125 307.24197388]
[58.09096527 321.61712646]
[53.80670547 335.99227905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[21 132]
[22 131]
[23 130]
[24 129]
[25 128]
[26 127]
[27 126]
[36 111]
[37 110]
[39 109]
[40 108]
[41 107]
[42 106]
[43 104]
[44 103]
[45 102]
[46 101]
[47 100]
[49 99]
[50 98]
[51 97]
[52 96]
[53 95]
[54 94]
[55 93]
[62 90]
[63 89]
[64 88]
[67 85]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
