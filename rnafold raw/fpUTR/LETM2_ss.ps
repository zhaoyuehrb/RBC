%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUGACGUCAGGGGCGAGGAAAGAGGCGGAACCGUAGAGACUUGGCUUCGGGCCCUUCUAGCUUGGGGGUCCCGGGAAGGAGCUGGGAGGACCUAGGCGGCCGUUCCGCGGAGCCCGGCCGAGGAGGUCCCUAUGUUAACUACUUGAGACAAAAAUAAAU\
) } def
/len { sequence length } bind def

/coor [
[139.08274841 314.95162964]
[149.03402710 303.60989380]
[161.58221436 295.23104858]
[156.75491333 281.02902222]
[151.92762756 266.82699585]
[146.96368408 252.67216492]
[141.86358643 238.56582642]
[136.76347351 224.45948792]
[131.66337585 210.35313416]
[126.56327057 196.24679565]
[121.30645752 191.00051880]
[121.50366974 181.81915283]
[116.67637634 167.61712646]
[111.84907532 153.41511536]
[107.02178192 139.21310425]
[102.19448853 125.01109314]
[97.36719513 110.80907440]
[94.35840607 110.94200897]
[91.17023468 110.20732117]
[88.05490875 108.53696442]
[73.13911438 110.12406158]
[65.34023285 123.40877533]
[51.37751389 129.48297119]
[36.68915939 126.20940399]
[26.86255074 115.04804993]
[11.94674969 116.63513947]
[-2.96905208 118.22223663]
[-17.88485336 119.80932617]
[-32.80065536 121.39642334]
[-45.70470810 130.55043030]
[-59.17919540 124.20319366]
[-74.09499359 125.79028320]
[-84.01291656 137.80163574]
[-99.16226959 139.19869995]
[-110.55213928 129.66944885]
[-121.71035767 141.19653320]
[-137.66519165 139.51634216]
[-146.17744446 125.91777039]
[-140.71725464 110.83248901]
[-125.47320557 105.83262634]
[-112.13922882 114.75365448]
[-103.00956726 103.04106140]
[-87.90543365 101.21903992]
[-75.68209076 110.87448120]
[-60.76628876 109.28739166]
[-48.92911148 100.24689484]
[-34.38774872 106.48062134]
[-19.47194672 104.89352417]
[-4.55614567 103.30643463]
[10.35965538 101.71933746]
[25.27545738 100.13224792]
[32.53342438 87.15303802]
[46.20406723 80.86196899]
[61.13232422 83.86206055]
[71.55201721 95.20825958]
[86.46781921 93.62116241]
[98.62004089 84.82778931]
[104.79144287 71.15615082]
[110.96283722 57.48450470]
[117.13423920 43.81285858]
[123.30563354 30.14121628]
[121.03262329 11.89021301]
[135.62455750 2.17802882]
[141.53132629 -11.61001301]
[147.43807983 -25.39805603]
[147.02958679 -32.07458115]
[149.68486023 -37.16740417]
[153.84736633 -39.59666824]
[160.28109741 -53.14683533]
[166.71482849 -66.69700623]
[165.64450073 -82.48196411]
[178.09286499 -90.66042328]
[184.52661133 -104.21059418]
[190.96034241 -117.76075745]
[197.26319885 -131.37229919]
[203.43460083 -145.04394531]
[209.60600281 -158.71559143]
[215.77740479 -172.38722229]
[221.94879150 -186.05886841]
[220.57444763 -201.82026672]
[232.86288452 -210.23712158]
[239.03428650 -223.90876770]
[231.65040588 -241.31497192]
[239.15963745 -258.32031250]
[256.39773560 -264.37777710]
[262.03765869 -278.27709961]
[267.67761230 -292.17642212]
[273.31753540 -306.07574463]
[278.95748901 -319.97503662]
[276.16482544 -336.13467407]
[288.93460083 -346.42370605]
[304.13040161 -340.25769043]
[306.12008667 -323.97967529]
[292.85681152 -314.33511353]
[287.21685791 -300.43579102]
[281.57693481 -286.53646851]
[275.93698120 -272.63714600]
[270.29702759 -258.73782349]
[276.93740845 -249.39176941]
[278.23327637 -237.87942505]
[273.74459839 -227.06904602]
[264.48736572 -219.71081543]
[252.70593262 -217.73736572]
[246.53453064 -204.06571960]
[248.35031128 -189.28221130]
[235.62043762 -179.88748169]
[229.44905090 -166.21583557]
[223.27764893 -152.54418945]
[217.10624695 -138.87254333]
[210.93484497 -125.20089722]
[211.04965210 -117.77497864]
[204.51051331 -111.32701874]
[198.07678223 -97.77685547]
[191.64303589 -84.22668457]
[193.17355347 -69.41092682]
[180.26499939 -60.26326752]
[173.83126831 -46.71310043]
[167.39752197 -33.16293335]
[161.22613525 -19.49128914]
[155.31936646 -5.70324707]
[149.41259766 8.08479500]
[153.61666870 19.45928574]
[148.77023315 31.01189423]
[136.97727966 36.31261444]
[130.80587769 49.98425674]
[124.63448334 63.65590286]
[118.46308899 77.32754517]
[112.29168701 90.99919128]
[111.56920624 105.98178101]
[116.39650726 120.18379211]
[121.22380066 134.38580322]
[126.05109406 148.58782959]
[130.87838745 162.78984070]
[135.70568848 176.99185181]
[140.66961670 191.14668274]
[145.76971436 205.25303650]
[150.86982727 219.35937500]
[155.96992493 233.46571350]
[161.07003784 247.57206726]
[166.95841980 254.61929321]
[166.12963867 261.99972534]
[170.95692444 276.20172119]
[175.78422546 290.40374756]
[190.83930969 289.40020752]
[205.64093018 292.32836914]
[219.17993164 298.98855591]
[230.53315735 308.92666626]
[238.92655945 321.46514893]
[243.78784180 335.74905396]
[244.78556824 350.80453491]
[241.85169983 365.60504150]
[235.18629456 379.14144897]
[225.24377441 390.49084473]
[212.70205688 398.87939453]
[198.41627502 403.73516846]
[183.36042786 404.72708130]
[168.56105042 401.78750610]
[155.02720642 395.11685181]
[143.68165588 385.16995239]
[135.29794312 372.62503052]
[130.44767761 358.33734131]
[129.46159363 343.28112793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 143]
[4 142]
[5 141]
[6 139]
[7 138]
[8 137]
[9 136]
[10 135]
[12 134]
[13 133]
[14 132]
[15 131]
[16 130]
[17 129]
[20 56]
[21 55]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[31 45]
[32 44]
[35 41]
[57 128]
[58 127]
[59 126]
[60 125]
[61 124]
[63 121]
[64 120]
[65 119]
[68 118]
[69 117]
[70 116]
[72 114]
[73 113]
[74 112]
[75 110]
[76 109]
[77 108]
[78 107]
[79 106]
[81 104]
[82 103]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
