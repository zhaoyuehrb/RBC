%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAUUCCGGUUUCCAGAGCACGUCUCCAGGCUUCGACGUCACCACGCUGGGACGUAUGUGCCGAGGGCCGCGGCGUCUGACCUCAUGGCGUAGAGCCUAGCAACAGCGCAGGCUCCCAGCCGAGUCCGUU\
) } def
/len { sequence length } bind def

/coor [
[103.10873413 250.65696716]
[88.99623871 256.71774292]
[73.74597168 254.89434814]
[61.46016693 245.67727661]
[55.44365311 231.54585266]
[57.31483841 216.30136108]
[66.57038879 204.04450989]
[80.72059631 198.07232666]
[82.50138855 183.17840576]
[84.28217316 168.28448486]
[78.11055756 154.72866821]
[87.43148804 141.94465637]
[89.21227264 127.05073547]
[90.99305725 112.15681458]
[85.41812134 98.23129272]
[73.85132599 88.68093872]
[62.28452682 79.13059235]
[50.71773148 69.58023834]
[39.03810883 60.16820145]
[27.24731255 50.89581680]
[18.47561264 48.00998688]
[15.28972149 41.25978088]
[3.72292590 31.70942879]
[-7.84386969 22.15907669]
[-19.63466644 12.88669109]
[-31.64278412 3.89752603]
[-43.65090179 -5.09163904]
[-59.09229279 -3.04193306]
[-71.14217377 -12.32928467]
[-73.00109863 -27.06291962]
[-85.00921631 -36.05208588]
[-97.01733398 -45.04124832]
[-111.11782837 -39.11476135]
[-126.19203949 -41.02920914]
[-138.20420837 -50.17109680]
[-143.98895264 -64.00556946]
[-142.08509827 -78.77854919]
[-154.09321594 -87.76771545]
[-166.10133362 -96.75688171]
[-178.10945129 -105.74604797]
[-190.11756897 -114.73520660]
[-198.95545959 -117.41147614]
[-202.30108643 -124.08395386]
[-214.09188843 -133.35633850]
[-225.88267517 -142.62872314]
[-242.07067871 -147.66708374]
[-241.71051025 -164.61720276]
[-225.32308960 -168.96336365]
[-216.61029053 -154.41952515]
[-204.81950378 -145.14714050]
[-193.02870178 -135.87475586]
[-181.12840271 -126.74332428]
[-169.12028503 -117.75416565]
[-157.11216736 -108.76499939]
[-145.10404968 -99.77583313]
[-133.09593201 -90.78666687]
[-119.45774078 -96.77544403]
[-104.55390930 -95.12263489]
[-92.39810944 -86.17261505]
[-86.31431580 -72.24838257]
[-88.02816772 -57.04936981]
[-76.02005005 -48.06020355]
[-64.01193237 -39.07103729]
[-49.35139465 -41.43836212]
[-37.04540253 -32.49312973]
[-34.66173935 -17.09975815]
[-22.65361977 -8.11059284]
[-10.64550114 0.87857234]
[-5.78468561 1.07680845]
[-1.02107620 4.39651680]
[1.70648277 10.59228039]
[13.27327824 20.14263344]
[24.84007454 29.69298553]
[36.51969910 39.10501862]
[48.31049347 48.37740326]
[55.58364487 50.05562973]
[60.26808548 58.01343918]
[71.83487701 67.56379700]
[83.40167999 77.11414337]
[94.96847534 86.66449738]
[88.15902710 73.29918671]
[90.54161835 58.48962021]
[101.19941711 47.93447113]
[116.03134918 45.69532013]
[129.33013916 52.63379288]
[135.97843933 66.07997894]
[133.41801453 80.85984039]
[122.63436890 91.28600311]
[137.02676392 95.51199341]
[151.41915894 99.73798370]
[163.69804382 90.43555450]
[178.92210388 90.15036774]
[191.24909973 98.78224182]
[196.07183838 112.84918976]
[210.46423340 117.07518005]
[224.85662842 121.30117035]
[239.24902344 125.52716064]
[253.64141846 129.75314331]
[268.03381348 133.97914124]
[277.24972534 133.39813232]
[282.71621704 138.48072815]
[297.00396729 143.04803467]
[310.93475342 135.58422852]
[326.03863525 140.23698425]
[333.35473633 154.24592590]
[328.54254150 169.29977417]
[314.45706177 176.46736145]
[299.45492554 171.49627686]
[292.43667603 157.33578491]
[278.14892578 152.76847839]
[263.80783081 148.37153625]
[249.41543579 144.14553833]
[235.02304077 139.91955566]
[220.63064575 135.69355774]
[206.23825073 131.46757507]
[191.84585571 127.24158478]
[180.18353271 136.46809387]
[165.14666748 137.06521606]
[152.49354553 128.59454346]
[147.19317627 114.13037872]
[132.80078125 109.90438843]
[118.40837860 105.67839813]
[105.88697815 113.93759918]
[104.10618591 128.83151245]
[102.32540131 143.72543335]
[108.36964417 158.34657288]
[99.17608643 170.06527710]
[97.39530182 184.95919800]
[95.61451721 199.85311890]
[107.95786285 208.99299622]
[114.06284332 223.08642578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 129]
[9 128]
[10 127]
[12 125]
[13 124]
[14 123]
[15 80]
[16 79]
[17 78]
[18 77]
[19 75]
[20 74]
[22 73]
[23 72]
[24 71]
[25 68]
[26 67]
[27 66]
[30 63]
[31 62]
[32 61]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[43 51]
[44 50]
[45 49]
[88 122]
[89 121]
[90 120]
[94 116]
[95 115]
[96 114]
[97 113]
[98 112]
[99 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
