%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGCCGAUAGCUGGUCCUCUUUCUCCAACACCUAGCCUGAGACUUGGCGGCGCGGCUGCUAUCCUGAACUAGCUUGGUAAGUGUUGUGUCCCGAACCAGCGUAGAGAGACCUCGGACCAGCCGCCUUG\
) } def
/len { sequence length } bind def

/coor [
[72.89575958 454.02105713]
[71.81752014 439.05987549]
[70.73927307 424.09866333]
[69.66103363 409.13748169]
[68.58279419 394.17626953]
[67.50454712 379.21508789]
[57.20198441 390.11724854]
[42.32656479 392.04647827]
[29.58377266 384.13311768]
[24.71775055 369.94430542]
[29.92198563 355.87603760]
[42.85053253 348.26995850]
[57.67551422 350.55465698]
[67.71456146 361.70123291]
[69.15125275 346.77017212]
[70.58794403 331.83914185]
[72.02463531 316.90811157]
[73.46133423 301.97705078]
[74.89802551 287.04602051]
[75.61719513 272.06326294]
[75.61719513 257.06326294]
[75.61719513 242.06327820]
[75.61719513 227.06327820]
[75.61719513 212.06327820]
[75.61719513 197.06327820]
[75.61719513 182.06327820]
[65.99668121 193.57179260]
[51.96600723 198.87651062]
[37.13800049 196.61149597]
[25.33082390 187.35997009]
[19.58477592 173.50418091]
[21.37943840 158.61192322]
[30.25269699 146.51791382]
[43.91971970 140.33628845]
[58.86130524 141.65879822]
[71.23004913 150.14491272]
[77.84078217 163.60812378]
[81.40364838 149.03739929]
[84.79154205 134.42500305]
[88.00398254 119.77302551]
[91.21642303 105.12105560]
[89.72181702 97.11208344]
[94.68556213 90.15824127]
[88.65355682 78.68412781]
[91.99028778 66.57456207]
[102.36244965 60.23006058]
[106.27368164 45.74896240]
[110.18491364 31.26786232]
[114.09614563 16.78676224]
[113.31441498 7.58365107]
[118.27868652 2.00747943]
[122.53604126 -12.37566757]
[126.79340363 -26.75881386]
[131.05075073 -41.14196014]
[135.30810547 -55.52510834]
[139.56546021 -69.90825653]
[143.82283020 -84.29140472]
[148.08018494 -98.67455292]
[151.81748962 -113.20150757]
[155.02993774 -127.85347748]
[158.24237061 -142.50544739]
[161.45481873 -157.15740967]
[164.66726685 -171.80938721]
[156.40979004 -185.01741028]
[159.87637329 -199.83082581]
[172.51910400 -207.62167358]
[175.73153687 -222.27363586]
[178.94398499 -236.92561340]
[176.43008423 -253.69213867]
[191.84545898 -260.74923706]
[202.89414978 -247.88990784]
[193.59594727 -233.71316528]
[190.38351440 -219.06120300]
[187.17106628 -204.40922546]
[195.39445496 -192.04350281]
[192.34530640 -177.13854980]
[179.31922913 -168.59693909]
[176.10679626 -153.94497681]
[172.89434814 -139.29299927]
[169.68190002 -124.64103699]
[166.46946716 -109.98906708]
[168.13436890 -106.77436829]
[168.26446533 -102.57160950]
[166.40304565 -98.13991547]
[162.46333313 -94.41719818]
[158.20596313 -80.03404999]
[153.94860840 -65.65090179]
[149.69125366 -51.26775360]
[145.43389893 -36.88460541]
[141.17654419 -22.50145912]
[136.91918945 -8.11831188]
[132.66183472 6.26483536]
[128.57723999 20.69799614]
[124.66601562 35.17909622]
[120.75478363 49.66019440]
[116.84354401 64.14129639]
[122.29032135 80.77893066]
[109.25628662 93.72109985]
[105.86839294 108.33349609]
[102.65595245 122.98546600]
[99.44351196 137.63743591]
[100.66558075 146.79248047]
[95.97437286 152.60025024]
[92.41150665 167.17097473]
[90.61719513 182.06327820]
[90.61719513 197.06327820]
[90.61719513 212.06327820]
[90.61719513 227.06327820]
[90.61719513 242.06327820]
[90.61719513 257.06326294]
[90.61719513 272.06326294]
[93.05859375 275.92794800]
[93.98377991 279.96264648]
[93.53488159 283.65005493]
[92.01328278 286.57775879]
[89.82906342 288.48272705]
[88.39237213 303.41375732]
[86.95568085 318.34478760]
[85.51898956 333.27584839]
[84.08229065 348.20687866]
[82.64559937 363.13790894]
[82.46574402 378.13684082]
[83.54398346 393.09802246]
[84.62223053 408.05923462]
[85.70046997 423.02041626]
[86.77871704 437.98162842]
[87.85695648 452.94281006]
[97.49913025 466.20782471]
[90.58607483 481.07867432]
[74.22934723 482.25747681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[4 124]
[5 123]
[6 122]
[14 121]
[15 120]
[16 119]
[17 118]
[18 117]
[19 116]
[20 111]
[21 110]
[22 109]
[23 108]
[24 107]
[25 106]
[26 105]
[37 104]
[38 103]
[39 101]
[40 100]
[41 99]
[43 98]
[46 96]
[47 95]
[48 94]
[49 93]
[51 92]
[52 91]
[53 90]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[59 81]
[60 80]
[61 79]
[62 78]
[63 77]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
