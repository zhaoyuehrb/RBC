%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCCCUAGUACUUCCGUUCUCCAGCGCUGGGCACCGCGGCCGGAGCUGUGGGCUGGCAGCCAUGGGUGCCAGGCAGUGCUGAGAGCAGUGGGGC\
) } def
/len { sequence length } bind def

/coor [
[24.13335609 414.95101929]
[16.63761139 400.36520386]
[25.74765015 386.72924805]
[26.23337746 371.73712158]
[26.71910667 356.74496460]
[27.20483398 341.75283813]
[27.44773102 326.75482178]
[27.44773102 311.75482178]
[16.83836746 322.35864258]
[2.23067546 325.76678467]
[-11.97583771 320.95272827]
[-21.50248718 309.36642456]
[-23.48006248 294.49734497]
[-17.31295967 280.82376099]
[-4.85857201 272.46383667]
[10.13211727 271.93539429]
[23.14424896 279.39761353]
[30.25889969 292.60317993]
[34.56956482 278.23590088]
[38.88023376 263.86865234]
[43.19089890 249.50138855]
[47.50156403 235.13414001]
[51.81222916 220.76687622]
[50.69793320 213.31402588]
[56.50210571 206.00831604]
[61.27574921 191.78817749]
[66.04939270 177.56805420]
[70.82303619 163.34791565]
[75.59667969 149.12777710]
[80.37033081 134.90763855]
[85.14397430 120.68749237]
[78.36528778 113.43923950]
[74.87138367 104.15051270]
[75.19274902 94.23162079]
[79.28057861 85.18852997]
[86.51422882 78.39426422]
[82.67105865 63.89494705]
[78.82789612 49.39563751]
[74.98472595 34.89632416]
[71.14155579 20.39701080]
[67.29839325 5.89769745]
[63.45522690 -8.60161495]
[51.51327896 -19.84091759]
[55.53867340 -35.73834610]
[71.39043427 -39.93998718]
[82.76161957 -28.12355804]
[77.95453644 -12.44478226]
[81.79770660 2.05453086]
[85.64086914 16.55384445]
[89.48403931 31.05315590]
[93.32720184 45.55246735]
[97.17037201 60.05178070]
[101.01354218 74.55109406]
[109.65125275 76.43037415]
[117.12634277 81.14894104]
[130.03500366 73.50914001]
[142.94364929 65.86933136]
[155.85231018 58.22953415]
[168.76097107 50.58972931]
[181.66963196 42.94992828]
[189.60498047 29.26267815]
[204.49853516 29.43896484]
[212.06845093 14.89150715]
[228.46148682 14.44392872]
[236.81390381 28.55665970]
[228.53344727 42.71173096]
[212.13833618 42.34762192]
[205.12629700 55.48842239]
[189.30943298 55.85858536]
[176.40077209 63.49838638]
[163.49211121 71.13819122]
[150.58345032 78.77799225]
[137.67480469 86.41779327]
[124.76614380 94.05759430]
[119.80184174 116.01752472]
[99.36411285 125.46114349]
[94.59046173 139.68127441]
[89.81681824 153.90141296]
[85.04317474 168.12155151]
[80.26953125 182.34169006]
[75.49588776 196.56182861]
[70.72224426 210.78196716]
[66.17948914 225.07754517]
[61.86882401 239.44479370]
[57.55815887 253.81205750]
[53.24749374 268.17932129]
[48.93682480 282.54656982]
[44.62615967 296.91384888]
[42.44773102 311.75482178]
[42.44773102 326.75482178]
[45.62515259 335.52783203]
[42.19696808 342.23858643]
[41.71123886 357.23071289]
[41.22550964 372.22283936]
[40.73978424 387.21496582]
[48.94806290 401.41201782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 95]
[4 94]
[5 93]
[6 92]
[7 90]
[8 89]
[18 88]
[19 87]
[20 86]
[21 85]
[22 84]
[23 83]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[30 77]
[31 76]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
