%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUUGAUAGGGAGAAGCCAACAUCUCCCGCAGGACCCCCUAAUCUUCAGGGCAGCUCCCAGAGCAUGGAUCCCUCCUGAUUCCACUCAGCCCG\
) } def
/len { sequence length } bind def

/coor [
[204.48168945 128.40740967]
[200.45655823 126.80278778]
[196.88362122 123.59708405]
[182.08396912 121.15364838]
[170.16423035 130.01115417]
[155.12046814 127.74399567]
[145.91072083 115.18141937]
[131.11106873 112.73799133]
[116.31142426 110.29455566]
[100.96757507 126.51912689]
[72.81918335 120.06594086]
[58.21102524 123.47208405]
[43.60287094 126.87822723]
[28.99471664 130.28437805]
[14.38656235 133.69052124]
[-0.22159280 137.09666443]
[-6.12911892 151.44520569]
[-19.35989189 159.55238342]
[-34.82641220 158.30081177]
[-46.58148193 148.17173767]
[-50.10504150 133.06002808]
[-44.04220963 118.77640533]
[-30.72426605 110.81324005]
[-15.27223587 112.23252106]
[-3.62773681 122.48851013]
[10.98041821 119.08235931]
[25.58857346 115.67621613]
[40.19672775 112.27007294]
[54.80488205 108.86392975]
[69.41304016 105.45778656]
[71.82382965 98.35581207]
[76.64542389 84.15185547]
[79.05622101 77.04988098]
[69.54032135 65.45472717]
[60.02442169 53.85956955]
[44.49412155 48.59251785]
[41.55617523 32.45868683]
[54.23288727 22.05517960]
[69.48354340 28.08423042]
[71.61957550 44.34366989]
[81.13547516 55.93882751]
[90.65137482 67.53398132]
[113.35435486 77.06832886]
[118.75485992 95.49491119]
[133.55450439 97.93833923]
[148.35415649 100.38177490]
[161.11325073 91.44626617]
[176.08740234 94.13508606]
[184.52740479 106.35399628]
[199.32705688 108.79743195]
[214.25482178 110.26768494]
[229.24679565 110.75847626]
[244.23875427 111.24925995]
[259.23074341 111.74004364]
[275.61065674 95.52320862]
[298.01937866 98.29979706]
[309.29696655 88.40960693]
[320.57458496 78.51942444]
[331.85217285 68.62923431]
[339.77401733 53.63988876]
[356.37057495 57.10269928]
[357.63748169 74.00924683]
[341.74237061 79.90682983]
[330.46475220 89.79701996]
[319.18716431 99.68721008]
[307.90957642 109.57739258]
[309.66894531 115.08021545]
[310.14932251 120.83744049]
[324.35327148 125.65902710]
[338.55722046 130.48062134]
[352.76116943 135.30221558]
[367.04211426 139.89076233]
[381.39624023 144.24502563]
[395.21447754 136.57484436]
[410.38589478 141.00242615]
[417.90954590 154.90098572]
[413.32180786 170.02474976]
[399.34448242 177.40104675]
[384.27008057 172.65367126]
[377.04196167 158.59913635]
[362.68786621 154.24485779]
[355.22888184 155.33702087]
[347.93960571 149.50616455]
[333.73562622 144.68457031]
[319.53167725 139.86297607]
[305.32772827 135.04139709]
[296.78637695 142.80697632]
[285.61477661 146.07737732]
[274.04351807 144.11148071]
[264.42163086 137.22259521]
[258.73992920 126.73201752]
[243.74797058 126.24122620]
[228.75601196 125.75044250]
[213.76403809 125.25965881]
[211.56616211 127.28882599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 50]
[4 49]
[7 46]
[8 45]
[9 44]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[33 42]
[34 41]
[35 40]
[51 94]
[52 93]
[53 92]
[54 91]
[56 66]
[57 65]
[58 64]
[59 63]
[68 86]
[69 85]
[70 84]
[71 83]
[72 81]
[73 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
