%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCUGGGACCUUUGCCUAUUUUCUGAUUGAUAGGCUUUGUUUUGUCUUUACCUCCUUCUUUCUGGGGAAAACUUCAGUUUUAUCGCACGUUCCCCUUUUCCAUAUCUUCAUCUUCCCUCUACCCAGAUUGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[192.57705688 183.40132141]
[182.09187317 172.67468262]
[167.69575500 176.49797058]
[153.22254944 172.57595825]
[142.58541870 161.86531067]
[138.71217346 147.17196655]
[142.73983765 132.41644287]
[132.25465393 121.68980408]
[121.76946259 110.96316528]
[117.48970032 116.80992889]
[111.70469666 121.11523438]
[104.94040680 123.51301575]
[97.80438995 123.80950165]
[90.93129730 121.99868011]
[84.92637634 118.26105499]
[80.31222534 112.94587708]
[66.29631805 118.28950500]
[52.28041077 123.63313293]
[38.26450348 128.97676086]
[24.24859619 134.32038879]
[10.23268795 139.66401672]
[-3.78321981 145.00762939]
[-7.70329571 160.02137756]
[-19.72089005 169.83753967]
[-35.21499252 170.68161011]
[-48.22780228 162.22901917]
[-53.75563049 147.72994995]
[-49.67291641 132.75961304]
[-37.54954147 123.07440186]
[-22.04719734 122.39846802]
[-9.12684536 130.99172974]
[4.88906193 125.64810181]
[18.90497017 120.30447388]
[32.92087555 114.96085358]
[46.93678284 109.61722565]
[60.95269394 104.27359772]
[74.96859741 98.92996979]
[60.10661316 96.89986420]
[45.24462509 94.86975098]
[30.38263893 92.83963776]
[15.55675030 95.11845398]
[1.13540804 90.99233246]
[-10.24151897 81.21657562]
[-16.49145126 67.58065033]
[-16.47031975 52.58066940]
[-10.18199348 38.96240997]
[1.22243130 29.21874046]
[15.65534210 25.13326836]
[30.47475243 27.45384789]
[42.96792603 35.75569534]
[50.84679031 48.51583099]
[62.03121948 58.51125717]
[73.21564484 68.50669098]
[84.40007019 78.50211334]
[79.37687683 64.36820221]
[74.35368347 50.23428726]
[69.33049011 36.10037613]
[54.40986633 31.83955383]
[44.86980438 19.60162735]
[44.37865448 4.09232664]
[53.12527084 -8.72470474]
[67.74640656 -13.92105675]
[82.61992645 -9.49862671]
[92.02667236 2.84207177]
[92.34954834 18.35578728]
[83.46440125 31.07718086]
[88.48759460 45.21109390]
[93.51078796 59.34500885]
[98.53398895 73.47891998]
[113.53398895 73.47891998]
[118.55718231 59.34500885]
[123.58037567 45.21109390]
[128.60356140 31.07718086]
[133.62675476 16.94326591]
[130.12609863 0.92211378]
[142.43103027 -9.91858196]
[157.88330078 -4.42684174]
[160.58694458 11.74790287]
[147.76068115 21.96646118]
[142.73748779 36.10037613]
[137.71429443 50.23428726]
[132.69108582 64.36820221]
[127.66790009 78.50211334]
[133.07649231 64.51114655]
[144.18273926 54.42892075]
[158.63006592 50.39473343]
[173.35296631 53.26457596]
[185.22747803 62.42951584]
[191.73399353 75.94488525]
[191.49192810 90.94293213]
[184.55265808 104.24129486]
[172.38858032 113.01826477]
[157.58071899 115.41149902]
[143.27110291 110.91319275]
[132.49610901 100.47797394]
[142.98129272 111.20462036]
[153.46647644 121.93125916]
[168.30986023 118.24051666]
[182.91123962 122.44723511]
[193.37696838 133.32540894]
[196.96850586 147.88414001]
[192.81851196 162.18949890]
[203.30369568 172.91613770]
[212.81489563 171.75144958]
[221.64720154 175.09448242]
[227.81974792 182.05790710]
[230.01255798 190.95867920]
[227.84742737 199.72369385]
[237.57615662 211.14086914]
[247.30488586 222.55804443]
[257.03363037 233.97521973]
[266.76235962 245.39237976]
[276.49108887 256.80953979]
[292.00415039 258.21746826]
[301.70782471 269.93469238]
[300.27001953 284.71536255]
[309.99874878 296.13253784]
[325.08889771 293.27191162]
[339.58233643 298.35476685]
[349.58044434 310.01382446]
[352.39373779 325.11285400]
[347.26547241 339.59030151]
[335.57513428 349.55181885]
[320.46734619 352.31777954]
[306.00604248 347.14416504]
[296.08123779 335.42263794]
[293.36264038 320.30627441]
[298.58157349 305.86126709]
[288.85284424 294.44409180]
[274.03128052 293.51824951]
[264.00231934 282.07821655]
[265.07391357 266.53829956]
[255.34518433 255.12110901]
[245.61645508 243.70394897]
[235.88771057 232.28677368]
[226.15898132 220.86959839]
[216.43025208 209.45243835]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[7 97]
[8 96]
[9 95]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[54 69]
[55 68]
[56 67]
[57 66]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
[108 137]
[109 136]
[110 135]
[111 134]
[112 133]
[113 132]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
