%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCUGCGCCGACAGCGGUCAGGAUCUCGGCUUUCUUGCUUCGAGAGGGACUAGGUGCCUCCACCAGAGCUUCUGUCGCUCUGUAACCUGCACUGUGACCUACACUAGUCGCGGGAGCCACGCAGAGGACGCCGGAACACCCUGGAAGCCGAGAA\
) } def
/len { sequence length } bind def

/coor [
[-19.03290939 358.72845459]
[-21.79203415 359.46801758]
[-29.76343727 372.17459106]
[-30.54291916 387.97656250]
[-43.86083221 394.64608765]
[-51.83223343 407.35266113]
[-59.80363846 420.05920410]
[-61.73097992 429.04663086]
[-68.06381226 432.93804932]
[-76.28785706 445.48257446]
[-84.51190948 458.02706909]
[-92.73596191 470.57159424]
[-93.12449646 486.96615601]
[-107.64459991 494.58840942]
[-121.35923004 485.59722900]
[-120.15995026 469.24200439]
[-105.28047943 462.34756470]
[-97.05643463 449.80303955]
[-88.83238220 437.25851440]
[-80.60832977 424.71398926]
[-72.51020050 412.08782959]
[-64.53879547 399.38125610]
[-56.56739426 386.67468262]
[-56.35808182 371.78155518]
[-42.47000122 364.20318604]
[-34.49859619 351.49661255]
[-27.04196167 338.48129272]
[-20.11203575 325.17807007]
[-13.18210888 311.87481689]
[-6.25218201 298.57159424]
[0.67774487 285.26834106]
[7.60767174 271.96511841]
[14.53759861 258.66186523]
[21.46752548 245.35864258]
[28.39745140 232.05540466]
[35.32737732 218.75216675]
[32.54781342 198.33169556]
[50.65279388 186.93620300]
[56.77211761 173.24118042]
[54.90010071 158.46467590]
[67.59411621 149.02156067]
[73.71344757 135.32653809]
[79.83277130 121.63150787]
[85.95209503 107.93647766]
[83.56111908 93.12825775]
[73.44264221 82.05503082]
[63.32416534 70.98179626]
[53.20569229 59.90856552]
[43.08721542 48.83533478]
[27.53467178 47.96577454]
[17.43084145 36.59180069]
[18.35567856 21.77018738]
[8.23720264 10.69695568]
[0.09007312 6.44109964]
[-1.97022164 -0.70054412]
[-11.86510944 -11.97401714]
[-21.75999641 -23.24748993]
[-31.65488434 -34.52096176]
[-47.35118484 -39.27051544]
[-50.82212448 -55.29813385]
[-38.49710083 -66.11598206]
[-23.05504227 -60.59558487]
[-20.38141251 -44.41585159]
[-10.48652363 -33.14237976]
[-0.59163624 -21.86890411]
[9.30325127 -10.59543228]
[19.31043434 0.57847965]
[29.42890930 11.65171051]
[44.27364349 12.06343937]
[54.69295883 23.14912987]
[54.16044617 38.71685791]
[64.27892303 49.79008865]
[74.39739990 60.86331940]
[84.51587677 71.93655396]
[94.63434601 83.00978088]
[109.50765228 84.95527649]
[122.13381958 76.85714722]
[134.75999451 68.75901031]
[140.33348083 61.44982147]
[147.72080994 60.62810516]
[160.50650024 52.78422928]
[173.29217529 44.94035339]
[186.07785034 37.09647751]
[198.86354065 29.25260162]
[211.64921570 21.40872765]
[210.97564697 8.86225128]
[215.69404602 -2.70453835]
[224.84449768 -11.10212803]
[236.63467407 -14.76948166]
[248.79058838 -13.06398869]
[258.99526978 -6.37311411]
[272.08453369 -13.69915867]
[281.10018921 -29.72557259]
[298.60452271 -28.87165833]
[311.54458618 -36.45813751]
[324.48464966 -44.04461670]
[337.42471313 -51.63109589]
[350.36477661 -59.21757507]
[363.30484009 -66.80405426]
[376.24493408 -74.39053345]
[377.62985229 -89.84568024]
[387.85992432 -101.51294708]
[403.00149536 -104.90602875]
[417.23226929 -98.72021484]
[425.08026123 -85.33408356]
[423.52777100 -69.89487457]
[413.17172241 -58.33926773]
[397.99423218 -55.11064148]
[383.83139038 -61.45046616]
[370.89132690 -53.86398697]
[357.95126343 -46.27750778]
[345.01119995 -38.69102859]
[332.07113647 -31.10454941]
[319.13107300 -23.51807022]
[306.19100952 -15.93159199]
[302.81661987 -4.27873993]
[292.05020142 2.13721585]
[279.41058350 -0.60988617]
[266.32128906 6.71615887]
[265.08914185 24.28867149]
[253.48533630 37.74981689]
[235.98072815 41.62633133]
[219.49308777 34.19440842]
[206.70741272 42.03828430]
[193.92173767 49.88215637]
[181.13604736 57.72603226]
[168.35037231 65.56990814]
[155.56469727 73.41378784]
[142.85812378 81.38518524]
[130.23194885 89.48332214]
[117.60578156 97.58145142]
[114.95258331 107.05680847]
[108.02655029 113.02223206]
[99.64712524 114.05580139]
[93.52780151 127.75083160]
[87.40847778 141.44586182]
[81.28915405 155.14088440]
[82.72347260 170.89694214]
[70.46714783 179.36050415]
[64.34782410 193.05552673]
[68.90365601 201.42446899]
[69.06115723 210.81364441]
[64.91236115 219.08367920]
[57.51600647 224.40936279]
[48.63061523 225.68208313]
[41.70068741 238.98532104]
[34.77076340 252.28855896]
[27.84083557 265.59179688]
[20.91090775 278.89505005]
[13.98098183 292.19827271]
[7.05105543 305.50152588]
[0.12112855 318.80474854]
[-6.80879831 332.10797119]
[-13.73872471 345.41122437]
[-13.37565136 349.86648560]
[-14.38041687 353.79370117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[5 23]
[6 22]
[7 21]
[9 20]
[10 19]
[11 18]
[12 17]
[27 154]
[28 153]
[29 152]
[30 151]
[31 150]
[32 149]
[33 148]
[34 147]
[35 146]
[36 145]
[38 140]
[39 139]
[41 137]
[42 136]
[43 135]
[44 134]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[52 68]
[53 67]
[55 66]
[56 65]
[57 64]
[58 63]
[76 131]
[77 130]
[78 129]
[80 128]
[81 127]
[82 126]
[83 125]
[84 124]
[85 123]
[91 119]
[92 118]
[94 115]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
