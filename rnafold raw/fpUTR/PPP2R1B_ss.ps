%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUUCGUCCCUACUGCCUGGGCGCGGGGCGGGGCCUGGGCGCGGGGCGGGAGGCGGUGACCAGCAGCAGGAGGAGAAAGAAC\
) } def
/len { sequence length } bind def

/coor [
[151.15422058 153.89358521]
[165.96002197 151.47160339]
[153.35485840 143.34080505]
[140.74969482 135.20999146]
[128.14454651 127.07920074]
[115.53938293 118.94839478]
[102.93421936 110.81759644]
[90.18096161 102.92111206]
[77.28396606 95.26164246]
[64.38696289 87.60218048]
[51.48996735 79.94271088]
[38.59297180 72.28324127]
[27.92877197 75.64029694]
[17.43013573 72.50258636]
[10.63883400 64.18899536]
[9.69918346 53.71881866]
[-2.59692335 45.12779236]
[-14.89303017 36.53676605]
[-27.18913841 27.94573975]
[-39.48524475 19.35471153]
[-51.78135300 10.76368523]
[-64.07746124 2.17265797]
[-76.37356567 -6.41836929]
[-88.66967773 -15.00939655]
[-104.41365814 -16.57066154]
[-110.41529083 -30.20259666]
[-125.93092346 -27.19579887]
[-138.98130798 -36.10999298]
[-141.82389832 -51.65654373]
[-132.77223206 -64.61196136]
[-117.19649506 -67.29002380]
[-104.33750153 -58.10188293]
[-101.82426453 -42.49870300]
[-86.95978546 -41.55192566]
[-80.07864380 -27.30550385]
[-67.78253937 -18.71447563]
[-55.48643112 -10.12344933]
[-43.19032669 -1.53242230]
[-30.89421844 7.05860472]
[-18.59811020 15.64963150]
[-6.30200338 24.24065971]
[5.99410391 32.83168793]
[18.29021072 41.42271423]
[37.48084259 41.41802216]
[46.25243759 59.38624573]
[59.14943695 67.04571533]
[72.04643250 74.70517731]
[84.94342804 82.36464691]
[97.84043121 90.02411652]
[106.03471375 91.15480804]
[111.06501770 98.21243286]
[123.67018127 106.34323883]
[136.27534485 114.47403717]
[148.88050842 122.60483551]
[161.48565674 130.73564148]
[174.09082031 138.86643982]
[188.59159851 142.70407104]
[201.94183350 134.21397400]
[215.07829285 141.23416138]
[230.05523682 140.40298462]
[241.78181458 129.45460510]
[257.63131714 131.93905640]
[265.44540405 145.95048523]
[259.22970581 160.74050903]
[243.75244141 164.96350098]
[230.88641357 155.37992859]
[215.90945435 156.21110535]
[203.63047791 164.64175415]
[189.42277527 157.68103027]
[201.09053040 167.10778809]
[209.19955444 179.72695923]
[212.92611694 194.25668335]
[211.89166260 209.22096252]
[206.20126343 223.09971619]
[196.43298340 234.48306274]
[183.57910156 242.21467590]
[168.94535828 245.50914001]
[154.01829529 244.03181458]
[140.31422424 237.93273926]
[129.22526550 227.83151245]
[121.87786102 214.75421143]
[119.01837158 200.02929688]
[120.93728638 185.15254211]
[127.43967438 171.63517761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 56]
[3 55]
[4 54]
[5 53]
[6 52]
[7 51]
[8 49]
[9 48]
[10 47]
[11 46]
[12 45]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[26 33]
[57 69]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
