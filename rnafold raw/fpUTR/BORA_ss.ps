%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCGGAAGCGGGGAGUUAAAGAGUCUAUGCCUGUCGUGGAAGCUGGCCUGGCCCCCGGAGCUCCCUGGAGUCGGUACUGGGGGCUUCGUUUUGUACGCACCGGUAGGUACGCUCUUUGUGGUCCCUGGCCUUUCCUCCUGUCUGA\
) } def
/len { sequence length } bind def

/coor [
[150.37513733 466.00509644]
[148.46986389 451.12658691]
[144.47283936 444.84796143]
[146.68553162 435.91247559]
[137.64349365 424.07647705]
[143.87533569 409.53430176]
[142.28628540 394.61871338]
[140.69725037 379.70309448]
[139.10821533 364.78750610]
[137.51918030 349.87191772]
[135.45611572 335.01446533]
[132.92109680 320.23022461]
[130.38609314 305.44598389]
[127.85107422 290.66174316]
[125.31606293 275.87750244]
[122.78105164 261.09329224]
[113.00412750 249.85668945]
[118.29788971 234.94740295]
[115.60611725 220.19090271]
[112.75787354 205.46380615]
[109.90962982 190.73670959]
[107.06138611 176.00959778]
[104.21314240 161.28250122]
[101.36490631 146.55540466]
[98.51666260 131.82829285]
[95.66841888 117.10119629]
[87.04732513 111.97671509]
[82.61251068 102.98138428]
[83.79729462 93.02247620]
[90.21875763 85.31868744]
[87.99812317 70.48397827]
[85.77748108 55.64926147]
[83.55683899 40.81454468]
[81.33619690 25.97983170]
[79.11556244 11.14511681]
[76.89492035 -3.68959761]
[74.67427826 -18.52431297]
[72.45363617 -33.35902786]
[70.07567596 -48.16933823]
[67.54066467 -62.95357513]
[53.78567123 -69.88944244]
[46.83346939 -83.43640900]
[49.16372681 -98.30361938]
[59.67574310 -108.82196045]
[57.14073181 -123.60620117]
[45.04428101 -137.44734192]
[51.67785645 -153.66233826]
[48.82961655 -168.38945007]
[45.98137283 -183.11654663]
[33.17103958 -191.97843933]
[30.49230766 -206.95437622]
[39.01971054 -219.11247253]
[36.17146683 -233.83956909]
[33.32322693 -248.56666565]
[30.47498322 -263.29376221]
[27.62674141 -278.02087402]
[24.77849770 -292.74798584]
[21.93025589 -307.47506714]
[19.08201408 -322.20217896]
[16.23377228 -336.92929077]
[0.25803950 -352.59255981]
[7.75070810 -372.87155151]
[3.66378117 -387.30404663]
[-0.42314580 -401.73654175]
[-4.51007271 -416.16906738]
[-16.63970184 -427.20553589]
[-12.88274193 -443.16854858]
[2.89597011 -447.63668823]
[14.46464729 -436.01351929]
[9.92242622 -420.25598145]
[14.00935364 -405.82348633]
[18.09628105 -391.39099121]
[22.18320656 -376.95849609]
[29.86562729 -374.62310791]
[36.04504776 -369.34918213]
[39.64131165 -361.95925903]
[39.98644257 -353.65344238]
[36.94741058 -345.81445312]
[30.96087265 -339.77752686]
[33.80911636 -325.05041504]
[36.65735626 -310.32330322]
[39.50559998 -295.59622192]
[42.35384369 -280.86911011]
[45.20208359 -266.14199829]
[48.05032730 -251.41491699]
[50.89857101 -236.68780518]
[53.74681091 -221.96070862]
[66.19251251 -213.85885620]
[69.29083252 -198.96405029]
[60.70847321 -185.96478271]
[63.55671692 -171.23768616]
[66.40496063 -156.51058960]
[76.27629089 -149.44418335]
[78.73787689 -137.14648438]
[71.92497253 -126.14121246]
[74.45998383 -111.35697174]
[87.87560272 -104.94143677]
[95.02561188 -91.69978333]
[92.98356628 -76.61059570]
[82.32490540 -65.48858643]
[84.85991669 -50.70434952]
[89.11981964 -44.60100555]
[87.28835297 -35.57966614]
[89.50899506 -20.74495316]
[91.72963715 -5.91023779]
[93.95027161 8.92447662]
[96.17091370 23.75919151]
[98.39155579 38.59390640]
[100.61219788 53.42861938]
[102.83283234 68.26333618]
[105.05347443 83.09805298]
[117.38748932 97.01861572]
[110.39552307 114.25295258]
[113.24375916 128.98005676]
[116.09200287 143.70715332]
[118.94024658 158.43426514]
[121.78849030 173.16136169]
[124.63673401 187.88845825]
[127.48497009 202.61557007]
[130.33322144 217.34266663]
[135.06542969 225.23854065]
[133.08213806 232.41239929]
[143.04037476 244.70645142]
[137.56529236 258.55825806]
[140.10031128 273.34249878]
[142.63531494 288.12673950]
[145.17033386 302.91098022]
[147.70533752 317.69522095]
[150.24035645 332.47946167]
[153.67277527 336.59506226]
[155.00135803 341.16232300]
[154.41452026 345.28628540]
[152.43478394 348.28289795]
[154.02381897 363.19848633]
[155.61285400 378.11407471]
[157.20188904 393.02966309]
[158.79092407 407.94525146]
[167.94662476 420.84811401]
[161.60113525 434.32342529]
[163.34837341 449.22131348]
[165.25364685 464.09982300]
[178.50930786 472.39569092]
[183.28207397 487.28710938]
[177.31835938 501.74285889]
[163.43406677 508.93731689]
[148.18493652 505.47354126]
[138.77113342 492.98696899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 141]
[2 140]
[4 139]
[6 137]
[7 136]
[8 135]
[9 134]
[10 133]
[11 129]
[12 128]
[13 127]
[14 126]
[15 125]
[16 124]
[18 122]
[19 120]
[20 119]
[21 118]
[22 117]
[23 116]
[24 115]
[25 114]
[26 113]
[30 111]
[31 110]
[32 109]
[33 108]
[34 107]
[35 106]
[36 105]
[37 104]
[38 103]
[39 101]
[40 100]
[44 96]
[45 95]
[47 92]
[48 91]
[49 90]
[52 87]
[53 86]
[54 85]
[55 84]
[56 83]
[57 82]
[58 81]
[59 80]
[60 79]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
