%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAGACCUUGCAAAGCGCAACGUAGCCGGAAGCUGGUGGCGGCUGGUGGGCGACCGGGCGCAUCCUCAUUGCAGUGCGGCGGCCCUACCUCGGCCCUGGCCUGACCCCGGCGGCCCUGCCCGCCCCUCCCUCCAGCAUC\
) } def
/len { sequence length } bind def

/coor [
[20.09543800 372.84350586]
[8.80707741 382.72140503]
[-5.96726847 385.31347656]
[-19.94397354 379.86813354]
[-29.07067871 367.96420288]
[-30.70161438 353.05551147]
[-39.99786377 364.82751465]
[-42.47829056 380.45306396]
[-56.43824387 385.64620972]
[-65.73448944 397.41821289]
[-75.03073883 409.19021606]
[-84.32698822 420.96218872]
[-83.89022064 436.99929810]
[-96.24859619 447.22915649]
[-111.92182159 443.80432129]
[-118.88674164 429.35198975]
[-111.80046844 414.95880127]
[-96.09898376 411.66595459]
[-86.80273438 399.89395142]
[-77.50648499 388.12197876]
[-68.21023560 376.34997559]
[-66.39473724 361.56643677]
[-51.76985550 355.53125000]
[-42.47360611 343.75924683]
[-41.21829605 333.57977295]
[-31.61797905 327.16473389]
[-24.55624008 313.93099976]
[-25.39068985 299.05978394]
[-12.06758213 290.52719116]
[-5.00584364 277.29345703]
[2.05589509 264.05972290]
[1.22144508 249.18849182]
[14.54455280 240.65588379]
[9.97874546 226.52474976]
[16.95183372 213.00326538]
[31.80482674 208.31004333]
[38.86656570 195.07629395]
[39.24347305 187.63415527]
[46.23590469 181.62896729]
[53.59072113 168.55584717]
[60.94554138 155.48271179]
[68.30036163 142.40959167]
[75.65518188 129.33647156]
[82.86390686 116.18221283]
[76.85216522 95.56292725]
[90.06241608 78.62819672]
[88.39480591 63.72117996]
[86.72720337 48.81416321]
[84.89363098 33.92665100]
[82.89433289 19.06048965]
[80.89502716 4.19432640]
[78.89572144 -10.67183590]
[66.61447144 -20.25352287]
[64.79866791 -35.35840607]
[74.00903320 -47.00764847]
[72.00972748 -61.87381363]
[70.01042175 -76.73997498]
[60.50277328 -89.38573456]
[66.47465515 -103.03072357]
[64.47535706 -117.89688873]
[62.31056213 -132.73985291]
[59.98055267 -147.55778503]
[57.65053940 -162.37571716]
[44.16303253 -170.28907776]
[38.96633911 -185.03791809]
[44.51417923 -199.65829468]
[58.18702698 -207.24691772]
[73.52899170 -204.22065735]
[83.29605865 -192.00843811]
[82.87651825 -176.37648010]
[72.46846771 -164.70573425]
[74.79848480 -149.88780212]
[77.12849426 -135.06987000]
[81.30856323 -128.90103149]
[79.34151459 -119.89619446]
[81.34082031 -105.03002930]
[90.70546722 -93.44760132]
[84.87658691 -78.73928070]
[86.87588501 -63.87311554]
[88.87519073 -49.00695419]
[100.83597565 -40.20495224]
[103.07533264 -25.15703201]
[93.76188660 -12.67113972]
[95.76118469 2.19502234]
[97.76049042 17.06118393]
[99.75979614 31.92734718]
[103.80139160 38.18777466]
[101.63421631 47.14655685]
[103.30182648 62.05357361]
[104.96942902 76.96058655]
[112.09170532 79.76882172]
[117.93815613 84.71169281]
[121.89191437 91.26766205]
[136.86865234 90.43256378]
[151.84538269 89.59746552]
[166.82212830 88.76236725]
[181.78862000 87.76048279]
[196.74304199 86.59192657]
[211.69744873 85.42337036]
[226.65187073 84.25480652]
[235.59190369 71.42477417]
[250.70075989 67.39286041]
[264.84451294 74.06282043]
[271.34490967 88.28530121]
[267.13265991 103.34487915]
[254.19664001 112.13088989]
[238.64488220 110.49483490]
[227.82041931 99.20922089]
[212.86601257 100.37777710]
[197.91159058 101.54633331]
[182.95718384 102.71489716]
[176.48146057 106.40167999]
[167.65722656 103.73910522]
[152.68048096 104.57420349]
[137.70375061 105.40930176]
[122.72701263 106.24440002]
[117.11946106 116.19980621]
[107.48852539 122.34796906]
[96.09764862 123.24394989]
[94.79841614 132.36911011]
[88.72830963 136.69128418]
[81.37348938 149.76440430]
[74.01866913 162.83753967]
[66.66384888 175.91065979]
[59.30902863 188.98379517]
[52.10030365 202.13803101]
[45.03856659 215.37178040]
[49.40899658 230.32293701]
[42.05886841 243.64323425]
[27.77829170 247.71762085]
[28.10763931 263.53540039]
[15.28963375 271.12145996]
[8.22789574 284.35519409]
[1.16615725 297.58892822]
[1.49550426 313.40670776]
[-11.32250118 320.99273682]
[-18.38423920 334.22647095]
[-4.06840229 329.74798584]
[10.49452400 333.34259033]
[21.08221245 343.96807861]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[9 21]
[10 20]
[11 19]
[12 18]
[26 137]
[27 136]
[29 134]
[30 133]
[31 132]
[33 130]
[36 127]
[37 126]
[39 125]
[40 124]
[41 123]
[42 122]
[43 121]
[44 119]
[46 90]
[47 89]
[48 88]
[49 86]
[50 85]
[51 84]
[52 83]
[55 80]
[56 79]
[57 78]
[59 76]
[60 75]
[61 73]
[62 72]
[63 71]
[93 116]
[94 115]
[95 114]
[96 113]
[97 111]
[98 110]
[99 109]
[100 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
