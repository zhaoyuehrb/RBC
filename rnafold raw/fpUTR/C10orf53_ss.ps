%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCGGAAGAGAGGUUGCUUAGCAGCGUGUGUUUCUCCCUUGCCUCUGCGGCGGCGGAGGCCUGGCG\
) } def
/len { sequence length } bind def

/coor [
[209.63322449 144.76622009]
[195.28532410 140.39152527]
[180.93742371 136.01684570]
[169.90390015 141.46493530]
[157.76893616 137.68299866]
[151.38902283 126.22324371]
[137.25511169 121.20005035]
[123.12120056 116.17685699]
[108.98728180 111.15366364]
[95.20320129 113.49689484]
[85.98952484 102.98025513]
[70.39509583 105.64941406]
[60.99374771 94.09675598]
[45.39932251 96.76591492]
[35.99797440 85.21325684]
[21.86405945 80.19005585]
[7.73014641 75.16686249]
[-6.40376711 70.14366913]
[-20.53768158 65.12047577]
[-37.48707199 65.51350403]
[-42.55679703 49.33530045]
[-28.41428566 39.98513031]
[-15.51448727 50.98656464]
[-1.38057315 56.00975800]
[12.75334072 61.03295135]
[26.88725471 66.05614471]
[41.02116776 71.07933807]
[55.60464478 68.05088806]
[66.01694489 79.96283722]
[80.60041809 76.93438721]
[91.01271820 88.84633636]
[104.79679871 86.50310516]
[114.01047516 97.01974487]
[128.14439392 102.04293823]
[142.27830505 107.06613159]
[156.41221619 112.08933258]
[174.25599670 108.22822571]
[185.31211853 121.66894531]
[199.66001892 126.04364014]
[214.00790405 130.41831970]
[231.75782776 118.37162781]
[252.56080627 122.40933228]
[264.22473145 139.78862000]
[279.18978882 140.81225586]
[294.15481567 141.83589172]
[309.11984253 142.85952759]
[324.08486938 143.88317871]
[339.04989624 144.90681458]
[354.01492310 145.93045044]
[368.97998047 146.95408630]
[383.46255493 139.26077271]
[397.22106934 148.18461609]
[396.10195923 164.54553223]
[381.25643921 171.51281738]
[367.95632935 161.91911316]
[352.99130249 160.89547729]
[338.02627563 159.87184143]
[323.06124878 158.84820557]
[308.09619141 157.82456970]
[293.13116455 156.80093384]
[278.16613770 155.77729797]
[263.20111084 154.75366211]
[258.53878784 163.05439758]
[251.26399231 169.26477051]
[242.25085449 172.59806824]
[232.59648132 172.61569214]
[223.48739624 169.28466797]
[216.05374146 162.98547363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[6 36]
[7 35]
[8 34]
[9 33]
[11 31]
[13 29]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
