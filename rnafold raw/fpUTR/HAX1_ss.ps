%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUCCGGCUUACCGUCGUUUACGACAGUGUCAGGAUCGCGGGCUUGCUUUCCGGUAGCGUGGGCUGACGCCUCGCUCAAUUUCUCACAGGGCUGCGCAGGUUUCCCCCGUCUGCGAAUGGACCACUGGAGGGGUUCAAAGGUUCGCGUCCCAGUACGGGA\
) } def
/len { sequence length } bind def

/coor [
[-18.68165207 256.63693237]
[-22.70446205 242.18614197]
[-29.96738625 240.31533813]
[-40.47064590 251.02427673]
[-50.97390747 261.73321533]
[-61.47716904 272.44216919]
[-71.87609863 283.25244141]
[-82.16972351 294.16305542]
[-92.46334839 305.07366943]
[-94.37960052 311.48452759]
[-98.62806702 315.35192871]
[-103.37395477 316.19793701]
[-114.08290100 326.70120239]
[-118.51746368 341.88821411]
[-133.02163696 345.27615356]
[-143.73057556 355.77941895]
[-154.43952942 366.28268433]
[-165.14846802 376.78594971]
[-169.02261353 392.72091675]
[-184.83372498 397.07299805]
[-196.31669617 385.36517334]
[-191.65881348 369.64141846]
[-175.65173340 366.07699585]
[-164.94277954 355.57373047]
[-154.23384094 345.07049561]
[-143.52488708 334.56723022]
[-139.85630798 320.13146973]
[-124.58615875 315.99224854]
[-113.87721252 305.48898315]
[-103.37395477 294.78002930]
[-93.08032990 283.86944580]
[-82.78670502 272.95883179]
[-80.47254181 265.90072632]
[-72.18611145 261.93890381]
[-61.68285370 251.22996521]
[-51.17959213 240.52102661]
[-40.67633438 229.81207275]
[1.58254838 222.11445618]
[8.31453609 208.70996094]
[15.04652405 195.30546570]
[21.77851105 181.90098572]
[28.51049995 168.49649048]
[35.24248505 155.09199524]
[41.97447586 141.68751526]
[48.70646286 128.28302002]
[55.43844986 114.87853241]
[50.44506073 100.73406219]
[36.78961563 94.52690125]
[23.13417053 88.31974030]
[6.87332392 90.44503784]
[-2.88148260 77.26262665]
[3.90466070 62.33345413]
[20.25075150 61.01536179]
[29.34133148 74.66429901]
[42.99677658 80.87145996]
[56.65222168 87.07862091]
[66.62416077 75.87323761]
[58.87366867 63.03073883]
[51.12317657 50.18823624]
[43.37268829 37.34572983]
[36.22328186 31.57971764]
[35.59920502 24.17819023]
[28.09920502 11.18780994]
[20.59920502 -1.80257130]
[13.09920502 -14.79295254]
[-1.36568260 -22.51946831]
[-1.63626206 -38.91638184]
[12.56581593 -47.11595535]
[26.63067245 -38.68317032]
[26.08958626 -22.29295158]
[33.58958817 -9.30257130]
[41.08958817 3.68780971]
[48.58958817 16.67819023]
[56.21519089 29.59523964]
[63.96567917 42.43774414]
[71.71617126 55.28024673]
[79.46665955 68.12274933]
[102.67915344 67.97783661]
[117.75167084 80.52684021]
[130.59417725 72.77635193]
[143.43667603 65.02585602]
[156.27917480 57.27536774]
[169.12168884 49.52487564]
[181.96418762 41.77438736]
[194.80668640 34.02389526]
[207.64920044 26.27340508]
[213.41520691 19.12399864]
[220.81672668 18.49992371]
[233.80711365 10.99992371]
[246.79750061 3.49992347]
[259.71453857 -4.12568045]
[272.55703735 -11.87617111]
[285.32379150 -19.75082016]
[298.01358032 -27.74888611]
[306.53530884 -45.98185730]
[325.84280396 -46.01356888]
[338.21292114 -54.49766922]
[350.58303833 -62.98177338]
[362.95318604 -71.46587372]
[375.32330322 -79.94998169]
[387.69342041 -88.43408203]
[387.12835693 -103.85109711]
[395.00772095 -117.11454773]
[408.81723022 -123.99213409]
[424.15029907 -122.28922272]
[436.11425781 -112.54922485]
[440.89138794 -97.88012695]
[436.95736694 -82.96278381]
[425.56750488 -72.55727386]
[410.35629272 -69.98395538]
[396.17752075 -76.06395721]
[383.80740356 -67.57985687]
[371.43728638 -59.09575272]
[359.06713867 -50.61164856]
[346.69702148 -42.12754440]
[334.32690430 -33.64344406]
[333.35217285 -23.41142273]
[326.74746704 -15.25072765]
[316.52343750 -12.03205872]
[306.01165771 -15.05908966]
[293.32186890 -7.06102324]
[289.32028198 -0.80328190]
[280.30752563 0.96633261]
[267.46502686 8.71682358]
[263.34286499 14.89579201]
[254.29750061 16.49030495]
[241.30711365 23.99030495]
[228.31672668 31.49030495]
[215.39968872 39.11590958]
[202.55717468 46.86639786]
[189.71467590 54.61688995]
[176.87217712 62.36737823]
[164.02966309 70.11787415]
[151.18716431 77.86836243]
[138.34466553 85.61885071]
[125.50215912 93.36933899]
[126.41912079 112.53505707]
[113.40726471 129.20346069]
[90.75903320 133.78501892]
[68.84294128 121.61051941]
[62.11095047 135.01501465]
[55.37896347 148.41949463]
[48.64697647 161.82398987]
[41.91498947 175.22848511]
[35.18300247 188.63296509]
[28.45101357 202.03746033]
[21.71902657 215.44194031]
[14.98703766 228.84643555]
[13.53487492 243.77598572]
[17.55746460 258.22653198]
[21.58005333 272.67709351]
[25.60264206 287.12765503]
[38.81040573 296.23449707]
[39.78151321 312.24813843]
[27.77101326 322.88427734]
[11.99233437 319.98379517]
[4.54952860 305.77166748]
[11.15207958 291.15026855]
[7.12949038 276.69970703]
[3.10690093 262.24914551]
[-0.91568822 247.79856873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 37]
[4 36]
[5 35]
[6 34]
[7 32]
[8 31]
[9 30]
[12 29]
[13 28]
[15 26]
[16 25]
[17 24]
[18 23]
[38 148]
[39 147]
[40 146]
[41 145]
[42 144]
[43 143]
[44 142]
[45 141]
[46 140]
[47 56]
[48 55]
[49 54]
[57 77]
[58 76]
[59 75]
[60 74]
[62 73]
[63 72]
[64 71]
[65 70]
[79 136]
[80 135]
[81 134]
[82 133]
[83 132]
[84 131]
[85 130]
[86 129]
[88 128]
[89 127]
[90 126]
[91 124]
[92 123]
[93 121]
[94 120]
[96 116]
[97 115]
[98 114]
[99 113]
[100 112]
[101 111]
[149 161]
[150 160]
[151 159]
[152 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
