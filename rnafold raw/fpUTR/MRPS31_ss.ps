%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAGGGCGGGGACGUGUUUGGCAGCGGGACGCACCAUUUCAGUUGUGUUCUUGGUUCAUUUCGUGUCUCGGCG\
) } def
/len { sequence length } bind def

/coor [
[62.14706039 360.72198486]
[49.51089096 369.57244873]
[34.09485245 370.16345215]
[20.81814957 362.30645752]
[13.91732502 348.50854492]
[15.59441090 333.17260742]
[25.31425476 321.19229126]
[39.97528839 316.39044189]
[43.65756989 301.84945679]
[39.28139114 287.61224365]
[50.16967392 276.13372803]
[53.85195541 261.59274292]
[57.53423691 247.05172729]
[61.21651840 232.51072693]
[64.89880371 217.96971130]
[68.58108521 203.42871094]
[72.26336670 188.88771057]
[75.94564819 174.34671021]
[66.72846985 160.43763733]
[70.35794830 143.80940247]
[85.09967041 134.65356445]
[88.17790222 119.97280884]
[91.25613403 105.29206085]
[89.67291260 97.12995911]
[94.77686310 90.07400513]
[90.66406250 74.79672241]
[101.28896332 64.35829163]
[104.97124481 49.81729126]
[108.65352631 35.27628708]
[112.33580780 20.73528290]
[116.01808929 6.19427824]
[119.39907074 -8.41972160]
[122.47730255 -23.10047340]
[125.55553436 -37.78122711]
[128.63375854 -52.46197891]
[123.89314270 -67.55625153]
[134.07760620 -78.42483521]
[125.22473907 -91.51690674]
[128.30430603 -107.01825714]
[141.48924255 -115.73220825]
[156.95716858 -112.48892212]
[165.53123474 -99.21259308]
[162.12458801 -83.77982330]
[148.75834656 -75.34660339]
[153.71914673 -61.30239868]
[143.31451416 -49.38375092]
[140.23628235 -34.70299530]
[137.15805054 -20.02224350]
[134.07981873 -5.34149122]
[135.84078979 2.06264544]
[130.55909729 9.87656021]
[126.87681580 24.41756439]
[123.19453430 38.95856857]
[119.51225281 53.49957275]
[115.82996368 68.04057312]
[120.20614624 82.27779388]
[109.31786346 93.75628662]
[105.93688965 108.37028503]
[102.85865784 123.05104065]
[99.78042603 137.73179626]
[108.48022461 148.23872375]
[109.43182373 161.64982605]
[102.50790405 172.94500732]
[90.48665619 178.02899170]
[86.80437469 192.56999207]
[83.12208557 207.11099243]
[79.43980408 221.65200806]
[75.75752258 236.19300842]
[72.07524109 250.73400879]
[68.39295959 265.27502441]
[64.71067810 279.81600952]
[68.82347870 295.09329224]
[58.19857407 305.53173828]
[54.51629257 320.07272339]
[65.12486267 331.27371216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 74]
[9 73]
[11 71]
[12 70]
[13 69]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[21 60]
[22 59]
[23 58]
[25 57]
[27 55]
[28 54]
[29 53]
[30 52]
[31 51]
[32 49]
[33 48]
[34 47]
[35 46]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
