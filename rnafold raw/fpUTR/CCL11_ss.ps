%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGCAAAGGCUUCCCUGGAAUCUCCCACACUGUCUGCUCCCUAUAAAAGGCAGGCAGAUGGGCCAGAGGAGCAGAGAGGCUGAGACCAACCCAGAAACCACCACCUCUCACGCCAAAGCUCACACCUUCAGCCUCCAAC\
) } def
/len { sequence length } bind def

/coor [
[117.95597839 265.71923828]
[129.96997070 256.54562378]
[124.77043152 242.47561646]
[119.57089233 228.40560913]
[114.37135315 214.33561707]
[109.17181396 200.26562500]
[94.80820465 196.41534424]
[85.35420227 184.70697021]
[84.59846497 169.49900818]
[93.04014587 156.61318970]
[87.84060669 142.54319763]
[82.64106750 128.47319031]
[71.91778564 117.98457336]
[57.73620987 113.09756470]
[43.55463028 108.21055603]
[29.37305260 103.32354736]
[15.13828468 98.59371185]
[0.85206634 94.02162170]
[-13.43415165 89.44953918]
[-27.72036934 84.87744904]
[-23.71422386 99.33258057]
[-32.33342361 111.60895538]
[-47.28992462 112.75047302]
[-57.67237473 101.92436218]
[-55.90636444 87.02868652]
[-43.28115845 78.93054199]
[-56.97532654 72.80928802]
[-70.66949463 66.68803406]
[-84.36366272 60.56678009]
[-96.72092438 64.43914795]
[-108.02770233 58.99794006]
[-112.41981506 47.67382812]
[-125.97521210 41.25112915]
[-139.53062439 34.82843018]
[-153.08601379 28.40572929]
[-166.64141846 21.98303032]
[-180.19682312 15.56033039]
[-193.75222778 9.13763046]
[-207.30763245 2.71493101]
[-220.86303711 -3.70776868]
[-233.45240784 5.09013510]
[-248.75546265 6.39866495]
[-262.65573120 -0.13416700]
[-271.41412354 -12.75106144]
[-272.67468262 -28.05813789]
[-266.09832764 -41.93786621]
[-253.45404053 -50.65667725]
[-238.14308167 -51.86924362]
[-224.28402710 -45.24940109]
[-215.60490417 -32.57784653]
[-214.44033813 -17.26317024]
[-200.88493347 -10.84047127]
[-187.32952881 -4.41777134]
[-173.77412415 2.00492859]
[-160.21871948 8.42762852]
[-146.66331482 14.85032845]
[-133.10792542 21.27302742]
[-119.55251312 27.69572830]
[-105.99711609 34.11842728]
[-88.64636230 31.72364426]
[-78.24240875 46.87261200]
[-64.54824066 52.99386597]
[-50.85407257 59.11511993]
[-37.15990448 65.23637390]
[-23.14828300 70.59123230]
[-8.86206532 75.16331482]
[5.42415285 79.73540497]
[19.71037102 84.30749512]
[27.09803772 83.34288025]
[34.26006317 89.14196777]
[48.44163895 94.02897644]
[62.62321854 98.91598511]
[76.80479431 103.80299377]
[81.99954224 87.38197327]
[96.22608185 79.89093018]
[110.51074219 84.24681091]
[123.09682465 76.08650208]
[135.68290710 67.92620087]
[148.26898193 59.76589203]
[160.85507202 51.60558701]
[173.44114685 43.44528198]
[185.15382385 34.07441330]
[195.87710571 23.58578682]
[206.60038757 13.09716225]
[210.58959961 4.78992891]
[217.67881775 2.49838996]
[217.95263672 -13.30352688]
[229.37779236 -24.22330284]
[245.17593384 -23.78242874]
[255.97430420 -12.24246883]
[255.36642456 3.55012584]
[243.71293640 14.22588730]
[227.92765808 13.45107651]
[217.08900452 23.82044220]
[206.36572266 34.30906677]
[195.64245605 44.79769135]
[210.61866760 43.95330429]
[223.75074768 51.20233154]
[231.01712036 64.32482147]
[230.19252014 79.30213928]
[221.52947998 91.54762268]
[207.68098450 97.31119537]
[192.88796997 94.82782745]
[181.68070984 84.85802460]
[177.49127197 70.45494080]
[181.60145569 56.03136063]
[169.01536560 64.19166565]
[156.42929077 72.35197449]
[143.84321594 80.51227570]
[131.25712585 88.67258453]
[118.67105103 96.83289337]
[118.34808350 109.05345154]
[110.26821136 119.43695068]
[96.71105957 123.27365875]
[101.91059875 137.34365845]
[107.11013794 151.41365051]
[121.90267181 155.71331787]
[131.21812439 167.75805664]
[131.64985657 182.80058289]
[123.24180603 195.06608582]
[128.44134521 209.13607788]
[133.64088440 223.20608521]
[138.84042358 237.27607727]
[144.03996277 251.34606934]
[159.13233948 250.50259399]
[173.80242920 254.14677429]
[186.74575806 261.95455933]
[196.81143188 273.23168945]
[203.10441589 286.97540283]
[205.06513977 301.96362305]
[202.51924133 316.86361694]
[195.69311523 330.35049438]
[185.19374084 341.22497559]
[171.95471191 348.52014160]
[157.15322876 351.58731079]
[142.10542297 350.15371704]
[128.14935303 344.34686279]
[116.52597046 334.68310547]
[108.26882172 322.02169800]
[104.11212921 307.48852539]
[104.42549896 292.37585449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 124]
[3 123]
[4 122]
[5 121]
[6 120]
[10 116]
[11 115]
[12 114]
[13 73]
[14 72]
[15 71]
[16 70]
[17 68]
[18 67]
[19 66]
[20 65]
[26 64]
[27 63]
[28 62]
[29 61]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[76 111]
[77 110]
[78 109]
[79 108]
[80 107]
[81 106]
[82 96]
[83 95]
[84 94]
[86 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
