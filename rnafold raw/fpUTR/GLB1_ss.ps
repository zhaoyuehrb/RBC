%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGCGGGGCGGGGCGCGGGGCUGAGCAGGCGCGAGGGCUGGCUGCUGGGCCGACGAGGGGCGGUGCCAGGCCGUGGGUCCUUAGUCAAGUGACGCGAAGCGGCCGGCCUGGGCGCCGACUGCAGAGCCGGGAGGCUGGUGGUC\
) } def
/len { sequence length } bind def

/coor [
[88.03761292 130.64118958]
[80.53759003 117.65079498]
[73.03759003 117.65079498]
[64.53706360 130.00964355]
[56.03653336 142.36848450]
[47.53600693 154.72732544]
[52.54888916 169.29364014]
[48.07574844 183.84851074]
[36.03233719 192.87182617]
[21.16296196 193.07089233]
[12.66243553 205.42973328]
[4.16190910 217.78857422]
[0.16756345 234.26527405]
[-16.77096176 234.98823547]
[-22.15471840 218.91180420]
[-8.19693565 209.28805542]
[0.30359054 196.92919922]
[8.80411720 184.57035828]
[3.67125082 170.61358643]
[7.78965664 156.13937378]
[19.78150749 146.75593567]
[35.17716217 146.22680664]
[43.67768860 133.86796570]
[52.17821503 121.50911713]
[60.67874146 109.15026855]
[66.31017303 99.37148285]
[73.93037415 92.89872742]
[82.27769470 90.01148987]
[90.09851074 90.57923126]
[96.26886749 94.08798981]
[96.91419983 79.10187531]
[97.55953217 64.11576843]
[98.20486450 49.12965393]
[98.85019684 34.14354324]
[88.44470215 22.55201912]
[89.31264496 7.36316347]
[100.42752075 -2.48545003]
[101.07285309 -17.47156143]
[101.71818542 -32.45767212]
[102.36352539 -47.44378662]
[103.00885773 -62.42989731]
[103.65419006 -77.41600800]
[104.29952240 -92.40212250]
[104.94485474 -107.38822937]
[105.59018707 -122.37434387]
[106.23551941 -137.36045837]
[106.88085938 -152.34657288]
[107.52619171 -167.33267212]
[105.43504333 -182.18620300]
[100.67716980 -196.41162109]
[95.91930389 -210.63705444]
[91.16143036 -224.86247253]
[86.40356445 -239.08789062]
[74.68851471 -249.72123718]
[77.98928833 -264.24551392]
[73.23142242 -278.47091675]
[68.47354889 -292.69635010]
[52.30379486 -297.54043579]
[42.28527451 -310.91906738]
[42.18941498 -327.46707153]
[51.85671234 -340.69323730]
[46.79386902 -354.81298828]
[41.73102570 -368.93273926]
[30.69343185 -381.80163574]
[40.00387192 -395.97033691]
[56.19623947 -390.94601440]
[55.85078812 -373.99560547]
[60.91363144 -359.87582397]
[65.97647095 -345.75607300]
[79.12180328 -343.20437622]
[89.35982513 -334.40603638]
[93.93242645 -321.58966064]
[91.53783417 -308.08413696]
[82.69897461 -297.45422363]
[87.45684814 -283.22879028]
[92.21471405 -269.00338745]
[103.58945465 -259.38751221]
[100.62899017 -243.84576416]
[105.38685608 -229.62034607]
[110.14472961 -215.39491272]
[114.90259552 -201.16949463]
[119.66046906 -186.94407654]
[126.98750305 -185.34266663]
[137.08802795 -196.43226624]
[141.64158630 -182.13984680]
[148.96862793 -180.53843689]
[159.22741699 -191.48181152]
[169.48620605 -202.42517090]
[172.68829346 -218.50865173]
[188.30287170 -223.52035522]
[200.26698303 -212.30467224]
[196.27299500 -196.39932251]
[180.42956543 -192.16638184]
[170.17077637 -181.22300720]
[159.91198730 -170.27964783]
[151.86198425 -165.11883545]
[143.54975891 -162.33944702]
[135.54934692 -161.84219360]
[128.38627625 -163.40287781]
[122.51229858 -166.68734741]
[121.86696625 -151.70123291]
[121.22163391 -136.71511841]
[120.57630157 -121.72901154]
[119.93096924 -106.74289703]
[119.28563690 -91.75679016]
[118.64029694 -76.77067566]
[117.99496460 -61.78456497]
[117.34963226 -46.79845047]
[116.70429993 -31.81233978]
[116.05896759 -16.82622910]
[115.41363525 -1.84011650]
[125.64072418 8.92752743]
[125.19975281 24.13476944]
[113.83631134 34.78887558]
[113.19097900 49.77499008]
[112.54564667 64.76110077]
[111.90031433 79.74721527]
[111.25497437 94.73332214]
[115.39643097 109.15026855]
[123.89695740 121.50911713]
[132.39749146 133.86796570]
[140.89801025 146.22680664]
[149.39854431 158.58564758]
[157.89906311 170.94450378]
[170.46046448 174.07446289]
[177.27812195 184.60362244]
[175.13493347 196.55487061]
[183.36756897 209.09375000]
[191.60021973 221.63262939]
[199.83285522 234.17150879]
[214.71705627 241.05575562]
[215.92753601 257.41018677]
[202.21907043 266.41073608]
[187.69375610 258.79843140]
[187.29397583 242.40415955]
[179.06134033 229.86528015]
[170.82868958 217.32638550]
[162.59603882 204.78750610]
[146.53237915 197.79882812]
[145.54022217 179.44502258]
[137.03968811 167.08618164]
[128.53916931 154.72732544]
[120.03864288 142.36848450]
[111.53811646 130.00964355]
[103.03759003 117.65079498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 22]
[10 18]
[11 17]
[12 16]
[30 118]
[31 117]
[32 116]
[33 115]
[34 114]
[37 111]
[38 110]
[39 109]
[40 108]
[41 107]
[42 106]
[43 105]
[44 104]
[45 103]
[46 102]
[47 101]
[48 100]
[49 82]
[50 81]
[51 80]
[52 79]
[53 78]
[55 76]
[56 75]
[57 74]
[61 69]
[62 68]
[63 67]
[86 95]
[87 94]
[88 93]
[119 145]
[120 144]
[121 143]
[122 142]
[123 141]
[124 140]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
