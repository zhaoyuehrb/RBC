%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGUGGGAGGAGAGCGCGAAGGGGCGAGGCCCGUUUGCAGGGGCCGCUCGGCCCGGGGAAGCCCGCGCCCCGCUCAGCCUUGCAGCCCCGCGCCCGGAGCAUCUCCCUGGAGGAACGGAGACAAAGGAGGAUUC\
) } def
/len { sequence length } bind def

/coor [
[86.85834503 99.11746216]
[75.28337860 89.57701874]
[63.70840836 80.03657532]
[52.13344193 70.49612427]
[40.55847549 60.95567703]
[24.98821640 58.14895630]
[20.08818626 44.08343506]
[11.39720631 41.00292206]
[8.36261749 34.19422913]
[-2.99378514 24.39463043]
[-14.35018730 14.59503269]
[-29.89648628 15.56988525]
[-41.27389526 5.46992254]
[-42.10746002 -9.35710526]
[-57.61030960 -12.51498795]
[-62.19121552 -26.68765831]
[-73.54762268 -36.48725510]
[-84.90402222 -46.28685379]
[-93.52316284 -49.56299210]
[-96.40310669 -56.43852615]
[-107.53514099 -66.49227142]
[-118.78007507 -76.41957092]
[-130.13647461 -86.21916962]
[-148.26748657 -89.20425415]
[-153.47105408 -105.92633820]
[-165.04602051 -115.46678925]
[-176.62098694 -125.00723267]
[-188.19595337 -134.54768372]
[-199.77091980 -144.08813477]
[-211.34588623 -153.62857056]
[-226.91613770 -156.43528748]
[-231.81617737 -170.50082397]
[-243.39114380 -180.04125977]
[-248.70864868 -180.91970825]
[-252.71408081 -183.53118896]
[-254.96020508 -187.06243896]
[-255.39839172 -190.64155579]
[-266.30038452 -200.94430542]
[-277.20236206 -211.24705505]
[-288.10433960 -221.54981995]
[-303.44866943 -225.40499878]
[-307.38446045 -239.77020264]
[-322.95892334 -239.49884033]
[-333.86831665 -250.10260010]
[-334.03103638 -264.95214844]
[-344.93301392 -275.25491333]
[-355.83502197 -285.55764771]
[-366.73699951 -295.86041260]
[-377.63897705 -306.16317749]
[-393.70944214 -309.42996216]
[-398.65826416 -325.06457520]
[-387.39450073 -336.98345947]
[-371.50537109 -332.92547607]
[-367.33621216 -317.06515503]
[-356.43423462 -306.76239014]
[-345.53225708 -296.45962524]
[-334.63027954 -286.15689087]
[-323.72830200 -275.85412598]
[-308.89324951 -276.53027344]
[-297.69030762 -266.23712158]
[-297.08169556 -250.67218018]
[-282.51718140 -247.55390930]
[-277.80157471 -232.45179749]
[-266.89959717 -222.14904785]
[-255.99761963 -211.84629822]
[-245.09562683 -201.54353333]
[-233.85069275 -191.61622620]
[-222.27572632 -182.07579041]
[-207.53338623 -179.95146179]
[-201.80543518 -165.20353699]
[-190.23046875 -155.66310120]
[-178.65550232 -146.12265015]
[-167.08053589 -136.58219910]
[-155.50556946 -127.04175568]
[-143.93060303 -117.50130463]
[-131.81013489 -118.33782959]
[-122.07869720 -110.41113281]
[-120.33688354 -97.57557678]
[-108.98048401 -87.77597809]
[-101.80092621 -85.77073669]
[-97.48139954 -77.62430573]
[-86.34935760 -67.57056427]
[-75.10442352 -57.64325714]
[-63.74802017 -47.84365845]
[-52.39161682 -38.04405975]
[-37.70105362 -35.58710861]
[-32.30786133 -20.71350861]
[-17.51852989 -22.05931854]
[-5.86192322 -12.28290844]
[-4.55058956 3.23863029]
[6.80581284 13.03822803]
[18.16221619 22.83782578]
[29.62863350 32.50846481]
[44.37097168 34.63278961]
[50.09891891 49.38071060]
[61.67388916 58.92115784]
[73.24885559 68.46160126]
[84.82382202 78.00205231]
[96.39878845 87.54249573]
[110.42864990 92.84937286]
[125.42003632 93.35781097]
[140.41140747 93.86624146]
[155.40280151 94.37467957]
[171.43777466 88.86869049]
[181.16751099 102.75279999]
[170.51945496 115.94580078]
[154.89436340 109.36605835]
[139.90298462 108.85762787]
[124.91159821 108.34918976]
[109.92021942 107.84075928]
[105.57608795 122.19793701]
[118.33459473 130.08593750]
[131.09309387 137.97393799]
[146.41571045 134.10183716]
[159.94541931 142.27020264]
[163.65531921 157.63288879]
[155.34436035 171.07548523]
[139.94331360 174.62275696]
[126.58932495 166.17013550]
[123.20509338 150.73243713]
[110.44658661 142.84443665]
[97.68808746 134.95643616]
[105.10301208 147.99555969]
[101.18932343 162.47599792]
[93.07033539 175.08877563]
[81.51004791 184.64700317]
[67.59629822 190.25125122]
[52.63838577 191.37414551]
[38.04386902 187.91004944]
[25.18610382 180.18490601]
[15.27501869 168.92565918]
[9.24325848 155.19183350]
[7.65841818 140.27580261]
[10.66963291 125.58115387]
[17.99354362 112.49068451]
[28.94096375 102.23622131]
[42.48172760 95.78272247]
[57.34163666 93.73745728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[5 95]
[7 93]
[9 92]
[10 91]
[11 90]
[14 87]
[16 85]
[17 84]
[18 83]
[20 82]
[21 81]
[22 79]
[23 78]
[25 75]
[26 74]
[27 73]
[28 72]
[29 71]
[30 70]
[32 68]
[33 67]
[37 66]
[38 65]
[39 64]
[40 63]
[42 61]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[100 110]
[101 109]
[102 108]
[103 107]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
