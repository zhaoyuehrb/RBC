%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGUUGGUUGGUGCGCGGCUGAAGGGUGUGGCGCGAGCAGCGUCGUUGGUUGGCCGGCGGCGGGCCGGGACGGGC\
) } def
/len { sequence length } bind def

/coor [
[97.73127747 259.13677979]
[89.99398041 246.40951538]
[97.73127747 232.60934448]
[97.73127747 217.60934448]
[97.73127747 202.60934448]
[97.73127747 187.60934448]
[97.73127747 172.60934448]
[97.12728882 157.62150574]
[95.92028809 142.67015076]
[94.71329498 127.71878815]
[93.50629425 112.76742554]
[85.72250366 101.15259552]
[91.54234314 88.43957520]
[90.33535004 73.48821259]
[88.82751465 58.56418991]
[87.01947021 43.67355728]
[82.77588654 35.26402664]
[85.45091248 28.14848328]
[84.24391174 13.19712257]
[83.03691101 -1.75423658]
[81.82991791 -16.70559692]
[80.62291718 -31.65695572]
[79.41591644 -46.60831451]
[78.20892334 -61.55967331]
[65.79414368 -66.09764862]
[56.11997986 -75.03517914]
[50.65449905 -86.96626282]
[50.20790100 -100.03457642]
[54.81259537 -112.22225189]
[63.72386169 -121.66147614]
[75.54001617 -126.92070770]
[75.54001617 -141.92071533]
[75.54001617 -156.92071533]
[75.54001617 -171.92071533]
[75.54001617 -186.92071533]
[75.54001617 -201.92071533]
[65.25824738 -214.23593140]
[68.61712646 -229.92343140]
[83.04001617 -236.94909668]
[97.46289825 -229.92343140]
[100.82178497 -214.23593140]
[90.54001617 -201.92071533]
[90.54001617 -186.92071533]
[90.54001617 -171.92071533]
[90.54001617 -156.92071533]
[90.54001617 -141.92071533]
[90.54001617 -126.92070770]
[105.59441376 -119.05907440]
[114.78032684 -104.67070007]
[115.58400726 -87.53182220]
[107.70526886 -72.19204712]
[93.16027832 -62.76667404]
[94.36727905 -47.81531525]
[95.57427979 -32.86395264]
[96.78127289 -17.91259384]
[97.98827362 -2.96123505]
[99.19527435 11.99012470]
[100.40226746 26.94148445]
[101.91010284 41.86550522]
[103.71814728 56.75613785]
[107.76240540 63.19281006]
[105.28670502 72.28121185]
[106.49370575 87.23257446]
[114.27749634 98.84740448]
[108.45765686 111.56042480]
[109.66464996 126.51178741]
[110.87165070 141.46315002]
[112.07865143 156.41450500]
[115.75241852 162.45170593]
[115.62043762 168.48861694]
[112.73127747 172.60934448]
[112.73127747 187.60934448]
[112.73127747 202.60934448]
[112.73127747 217.60934448]
[112.73127747 232.60934448]
[120.46858215 246.40951538]
[112.73127747 259.13677979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[3 75]
[4 74]
[5 73]
[6 72]
[7 71]
[8 68]
[9 67]
[10 66]
[11 65]
[13 63]
[14 62]
[15 60]
[16 59]
[18 58]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
