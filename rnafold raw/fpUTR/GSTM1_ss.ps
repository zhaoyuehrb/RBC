%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCCCCUCUCCGGAGCUCUUAUACUCUGAGCCCUGCUCGGUUUAGGCCUGUCUGCGGAAUCCGCACCAACCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[82.44477081 169.01068115]
[77.70637512 183.24261475]
[68.29336548 194.92144775]
[55.39262009 202.57460022]
[40.63080597 205.23709106]
[25.86924553 202.57321167]
[12.96922493 194.91883850]
[3.55731440 183.23910522]
[-1.17973495 169.00674438]
[-0.64462739 154.01628113]
[5.09516525 140.15789795]
[15.31591034 129.17900085]
[28.72504616 122.46502686]
[14.38727379 118.05727386]
[4.98444748 118.51191711]
[-0.42656308 113.17874908]
[-14.57776260 108.20446014]
[-28.72896194 103.23017120]
[-42.88016129 98.25588226]
[-54.98927307 107.81480408]
[-70.34624481 109.28685760]
[-84.05072784 102.20231628]
[-91.72966766 88.82183075]
[-90.93273926 73.41506195]
[-81.91424561 60.89826202]
[-67.55195618 55.26548767]
[-52.42882156 58.31414413]
[-41.37057877 69.07141113]
[-37.90587234 84.10468292]
[-23.75467300 89.07897186]
[-9.60347366 94.05326080]
[4.54772615 99.02754974]
[18.79502869 103.71950531]
[33.13280106 108.12725830]
[48.13280106 108.12725830]
[62.47057343 103.71950531]
[76.80834198 99.31174469]
[91.14611816 94.90399170]
[97.51109314 89.57846832]
[106.14219666 90.61827850]
[120.64386749 86.78402710]
[135.14553833 82.94977570]
[149.64721680 79.11552429]
[154.93193054 74.43741608]
[160.88909912 73.49609375]
[165.45414734 75.60205841]
[180.21459961 72.93208313]
[169.75006104 62.18530273]
[169.58496094 47.18621063]
[179.81039429 36.21167374]
[194.78372192 35.31770706]
[206.24230957 44.99762344]
[207.86302185 59.90980911]
[198.75212097 71.82500458]
[213.72544861 72.71923065]
[228.69876099 73.61345673]
[243.67208862 74.50768280]
[258.64541626 75.40190887]
[274.81683350 70.31057739]
[284.18588257 84.44058228]
[273.20169067 97.35507202]
[257.75119019 90.37522888]
[242.77786255 89.48100281]
[227.80453491 88.58677673]
[212.83120728 87.69255066]
[197.85789490 86.79832458]
[182.88456726 87.69255066]
[168.12411499 90.36251831]
[153.48146057 93.61720276]
[138.97979736 97.45144653]
[124.47811890 101.28569794]
[109.97644043 105.11994934]
[95.55387115 109.24176788]
[81.21609497 113.64952087]
[66.87832642 118.05727386]
[52.54055405 122.46502686]
[65.95288086 129.18138123]
[76.17259216 140.16125488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 34]
[14 33]
[16 32]
[17 31]
[18 30]
[19 29]
[35 76]
[36 75]
[37 74]
[38 73]
[40 72]
[41 71]
[42 70]
[43 69]
[46 68]
[47 67]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
