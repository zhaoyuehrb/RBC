%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGCCUGGCGCACCCGCGGGAGCGGAGCCGUGGCGCGCUCGCCCCGGACGCCGGCCGCCCCUCCGCUCGCCCUACUGAGCGAGCGGCCCGGGGCGCCGAGGGGUCCGCGCCGCGCGGGGCGCACCGCCCUGGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[74.70368958 213.93399048]
[60.61300659 206.26377869]
[57.96643066 190.44053650]
[68.79418945 178.60249329]
[69.47200012 163.61781311]
[66.91095734 159.49580383]
[66.97090149 153.70654297]
[70.53421783 147.97586060]
[71.88845825 133.03710938]
[73.24269104 118.09836578]
[60.05908585 110.94346619]
[48.27146530 120.21989441]
[45.95142746 132.96362305]
[35.87173843 140.44248962]
[23.80145645 139.05912781]
[11.80720520 148.06678772]
[-0.18704705 157.07444763]
[-12.18129921 166.08210754]
[-18.11236000 181.37113953]
[-34.35775757 183.61148071]
[-44.20561981 170.49844360]
[-37.52531052 155.52160645]
[-21.18895721 154.08786011]
[-9.19470596 145.08020020]
[2.79954600 136.07254028]
[14.79379845 127.06488037]
[20.74766922 110.59501648]
[38.99504471 108.43227386]
[50.78266525 99.15584564]
[95.33980560 89.21985626]
[97.36769867 74.35756683]
[99.39559937 59.49528122]
[101.42349243 44.63299179]
[103.45139313 29.77070236]
[105.47928619 14.90841198]
[107.50717926 0.04612331]
[109.53507996 -14.81616592]
[111.56297302 -29.67845535]
[104.43035889 -38.03027725]
[103.14606476 -48.71576691]
[107.89787292 -58.12580872]
[116.87561798 -63.21753311]
[119.57302856 -77.97300720]
[122.27044678 -92.72847748]
[124.96785736 -107.48394775]
[127.66526794 -122.23942566]
[121.94978333 -127.44740295]
[118.47087097 -134.27607727]
[117.63302612 -141.82490540]
[119.49594116 -149.11730957]
[123.77306366 -155.22695923]
[129.87440491 -159.39550781]
[136.98760986 -161.12651062]
[141.33174133 -175.48368835]
[145.67587280 -189.84086609]
[150.02000427 -204.19802856]
[149.51411438 -213.40492249]
[154.62794495 -218.82856750]
[159.29542542 -233.08389282]
[163.96292114 -247.33923340]
[168.63040161 -261.59457397]
[173.29788208 -275.84991455]
[168.19735718 -295.29483032]
[182.97203064 -307.69201660]
[186.99058533 -322.14367676]
[191.00914001 -336.59536743]
[195.02769470 -351.04705811]
[199.04624939 -365.49874878]
[203.06480408 -379.95043945]
[207.08337402 -394.40213013]
[211.10192871 -408.85379028]
[207.34457397 -424.22238159]
[218.20872498 -434.41156006]
[213.59196472 -450.14743042]
[225.10548401 -461.82522583]
[240.90516663 -457.43182373]
[244.73765564 -441.48678589]
[232.66041565 -430.39300537]
[236.70520020 -416.05810547]
[225.55360413 -404.83523560]
[221.53504944 -390.38354492]
[217.51649475 -375.93188477]
[213.49794006 -361.48019409]
[209.47938538 -347.02850342]
[205.46083069 -332.57681274]
[201.44227600 -318.12512207]
[197.42370605 -303.67346191]
[203.27574158 -295.17172241]
[203.44007874 -284.63125610]
[197.61744690 -275.57995605]
[187.55322266 -271.18240356]
[182.88574219 -256.92709351]
[178.21824646 -242.67173767]
[173.55076599 -228.41641235]
[168.88328552 -214.16107178]
[164.37718201 -199.85391235]
[160.03305054 -185.49673462]
[155.68891907 -171.13955688]
[151.34478760 -156.78237915]
[159.03639221 -135.69544983]
[142.42074585 -119.54200745]
[139.72332764 -104.78653717]
[137.02590942 -90.03106689]
[134.32850647 -75.27558899]
[131.63108826 -60.52011871]
[139.50688171 -42.91465378]
[126.42526245 -27.65055847]
[124.39736938 -12.78827000]
[122.36946869 2.07401943]
[120.34157562 16.93630791]
[118.31368256 31.79859734]
[116.28578186 46.66088486]
[114.25788879 61.52317429]
[112.22998810 76.38546753]
[110.20209503 91.24775696]
[114.22064972 105.69944000]
[123.62968445 117.38147736]
[133.03872681 129.06352234]
[142.44775391 140.74555969]
[151.85679626 152.42759705]
[161.26582336 164.10963440]
[170.67486572 175.79167175]
[185.31916809 184.33454895]
[181.16409302 200.77145386]
[164.21931458 201.32894897]
[158.99282837 185.20071411]
[149.58378601 173.51867676]
[140.17475891 161.83663940]
[130.76571655 150.15458679]
[121.35668182 138.47254944]
[111.94764709 126.79051208]
[102.53861237 115.10847473]
[88.18143463 119.45260620]
[86.82720184 134.39134216]
[85.47296143 149.33009338]
[84.45668030 164.29562378]
[83.77886963 179.28030396]
[93.49364471 192.04754639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 137]
[5 136]
[8 135]
[9 134]
[10 133]
[11 29]
[12 28]
[15 26]
[16 25]
[17 24]
[18 23]
[30 115]
[31 114]
[32 113]
[33 112]
[34 111]
[35 110]
[36 109]
[37 108]
[38 107]
[42 105]
[43 104]
[44 103]
[45 102]
[46 101]
[53 99]
[54 98]
[55 97]
[56 96]
[58 95]
[59 94]
[60 93]
[61 92]
[62 91]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[73 78]
[116 132]
[117 131]
[118 130]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
