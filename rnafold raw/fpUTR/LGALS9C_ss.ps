%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAUUCCUUCUGCAAAGGACUGCCUGGCAGGUGUCAAAGGCAGUGGUGGCCACAGAGGCGGUGGAGAG\
) } def
/len { sequence length } bind def

/coor [
[97.86988068 329.86413574]
[99.34235382 314.29605103]
[110.51354980 303.35354614]
[109.18784332 288.41223145]
[107.86214447 273.47094727]
[106.53644562 258.52963257]
[105.21073914 243.58833313]
[96.37888336 231.59468079]
[102.86624146 217.16468811]
[101.54054260 202.22338867]
[100.21484375 187.28208923]
[98.88913727 172.34078979]
[97.56343842 157.39947510]
[96.23773956 142.45817566]
[80.54403687 137.92515564]
[67.70782471 127.82205963]
[59.61436462 113.63275909]
[57.45233154 97.44120789]
[61.53926468 81.62547302]
[71.27491760 68.50839996]
[85.22941589 60.01648712]
[82.58838654 45.25081635]
[79.94735718 30.48514938]
[77.30632782 15.71947956]
[74.66530609 0.95381117]
[72.02427673 -13.81185722]
[69.38324738 -28.57752609]
[66.09166718 -43.21192169]
[62.15598679 -57.68639374]
[58.22030258 -72.16086578]
[46.20682144 -83.32367706]
[50.13060760 -99.24649048]
[65.95520782 -103.54927826]
[77.40163422 -91.80570984]
[72.69477844 -76.09654999]
[76.63046265 -61.62207794]
[80.56614685 -47.14760590]
[84.47450256 -43.91217422]
[86.18495941 -38.06194305]
[84.14891815 -31.21855354]
[86.78994751 -16.45288467]
[89.43096924 -1.68721652]
[92.07199860 13.07845211]
[94.71302795 27.84412003]
[97.35405731 42.60979080]
[99.99508667 57.37545776]
[113.38711548 59.53227615]
[125.42339325 65.78739166]
[134.88496399 75.50733185]
[140.81361389 87.70771790]
[142.60894775 101.15298462]
[140.08912659 114.48149109]
[133.50935364 126.34340668]
[123.53598022 135.53742981]
[111.17903900 141.13247681]
[112.50473785 156.07377625]
[113.83044434 171.01507568]
[115.15614319 185.95639038]
[116.48184204 200.89768982]
[117.80754852 215.83898926]
[126.73423004 228.90133667]
[120.15204620 242.26261902]
[121.47774506 257.20391846]
[122.80344391 272.14523315]
[124.12915039 287.08654785]
[125.45484924 302.02783203]
[138.37815857 310.83248901]
[142.56867981 325.89813232]
[136.04777527 340.11123657]
[121.89441681 346.76077271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 66]
[4 65]
[5 64]
[6 63]
[7 62]
[9 60]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[28 37]
[29 36]
[30 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
