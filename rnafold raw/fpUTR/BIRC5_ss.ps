%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGAAGGCCGCGGGGGGUGGACCGCCUAAGAGGGCGUGCGCUCCCGACAUGCCCCGCGGCGCGCCAUUAACCGCCAGAUUUGAAUCGCGGGACCCGUUGGCAGAGGUGGCGGCGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[118.46681213 159.02853394]
[105.82580566 167.10350037]
[90.90630341 168.65542603]
[76.87400055 163.35502625]
[66.70632935 152.32695007]
[62.56071854 137.91119385]
[65.31681061 123.16657257]
[74.38979340 111.22166443]
[87.85433960 104.61103821]
[73.34892273 100.79096985]
[58.84350586 96.97090149]
[44.33808899 93.15083313]
[29.83267403 89.33077240]
[15.32725811 85.51070404]
[0.82184267 81.69063568]
[-13.68357277 77.87056732]
[-28.18898964 74.05049896]
[-43.03879929 71.93315887]
[-58.03382492 71.54694366]
[-73.02885437 71.16072083]
[-88.02388000 70.77450562]
[-102.01869965 78.15391541]
[-114.54252625 70.09147644]
[-129.53755188 69.70526123]
[-138.31628418 72.63943481]
[-144.91233826 69.11109161]
[-159.89244080 68.33891296]
[-174.87255859 67.56673431]
[-189.85266113 66.79454803]
[-204.20401001 74.72998810]
[-218.11044312 66.03844452]
[-217.26623535 49.66104507]
[-202.53982544 42.44544601]
[-189.08049011 51.81444168]
[-174.10037231 52.58662033]
[-159.12025452 53.35880280]
[-144.14015198 54.13098526]
[-129.15133667 54.71023178]
[-114.15631104 55.09645081]
[-101.23403931 47.68941498]
[-87.63766479 55.77947617]
[-72.64263153 56.16569519]
[-57.64760590 56.55191422]
[-42.65258026 56.93813324]
[-53.44519043 46.52085876]
[-57.07019043 31.96546936]
[-52.42399216 17.70318222]
[-40.92107773 8.07598209]
[-26.06337357 6.01476002]
[-12.37413502 12.14702892]
[-4.02088881 24.60589218]
[-3.54668331 39.59839630]
[-11.09588528 52.56024551]
[-24.36892319 59.54508591]
[-9.86350632 63.36515427]
[4.64190960 67.18521881]
[19.14732552 71.00528717]
[33.65274048 74.82535553]
[48.15815735 78.64542389]
[62.66357422 82.46548462]
[77.16899109 86.28555298]
[91.67440796 90.10562134]
[101.50344086 87.30570984]
[110.16809845 92.50000000]
[125.16809845 92.50000000]
[140.16809082 92.50000000]
[155.16809082 92.50000000]
[160.01873779 85.38339233]
[167.24636841 80.87663269]
[175.58364868 79.67987823]
[183.60438538 81.92060852]
[189.96754456 87.14480591]
[193.64135742 94.40647125]
[208.56185913 95.94879150]
[223.48236084 97.49110413]
[238.40284729 99.03341675]
[253.32334900 100.57573700]
[268.24386597 102.11804962]
[280.43817139 92.42595673]
[295.54769897 94.20262909]
[304.71246338 105.88777161]
[319.63296509 107.43008423]
[334.55346680 108.97239685]
[349.47396851 110.51471710]
[357.94100952 99.55334473]
[370.63000488 94.27756500]
[384.15701294 95.97762299]
[394.97213745 104.09877777]
[400.29110718 116.41551971]
[415.16693115 118.34149170]
[430.04278564 120.26747131]
[444.91860962 122.19344330]
[461.40298462 118.23087311]
[469.77401733 132.97407532]
[457.92431641 145.09928894]
[442.99264526 137.06929016]
[428.11679077 135.14331055]
[413.24096680 133.21733093]
[398.36511230 131.29135132]
[387.53402710 143.55419922]
[371.37515259 147.02142334]
[356.16513062 140.14529419]
[347.93164062 125.43521118]
[333.01113892 123.89289856]
[318.09066772 122.35058594]
[303.17016602 120.80826569]
[291.80892944 130.37165833]
[276.65545654 129.02008057]
[266.70153809 117.03855133]
[251.78103638 115.49623108]
[236.86053467 113.95391846]
[221.94004822 112.41160583]
[207.01954651 110.86928558]
[192.09904480 109.32697296]
[173.49021912 120.29183197]
[155.16809082 107.50000000]
[140.16809082 107.50000000]
[125.16809845 107.50000000]
[110.16809845 107.50000000]
[121.50526428 117.32184601]
[127.23698425 131.18356323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 62]
[10 61]
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[16 55]
[17 54]
[18 44]
[19 43]
[20 42]
[21 41]
[23 39]
[24 38]
[26 37]
[27 36]
[28 35]
[29 34]
[64 119]
[65 118]
[66 117]
[67 116]
[73 114]
[74 113]
[75 112]
[76 111]
[77 110]
[78 109]
[81 106]
[82 105]
[83 104]
[84 103]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
