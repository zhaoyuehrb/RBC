%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCGGGACGGGCUCUCCCUUGGGUGCUUAGCCCCGCCCCCGUCCCACUCUGCCCUGUUGCUGUCGCGCCGCUGCUGGUUGCUGUCCCUGGACCCCUACC\
) } def
/len { sequence length } bind def

/coor [
[86.14377594 107.69440460]
[71.20776367 106.31037903]
[56.27175140 104.92635345]
[41.31619644 103.77249908]
[27.06588173 110.64556885]
[14.83906460 102.13944244]
[-0.13248520 101.21603394]
[-15.10403538 100.29261780]
[-30.07558441 99.36920166]
[-45.04713440 98.44579315]
[-60.01868439 97.52237701]
[-74.99023438 96.59896088]
[-89.96178436 95.67555237]
[-94.14151001 103.44189453]
[-100.46471405 109.54113770]
[-108.31525421 113.40795135]
[-116.93694305 114.69313049]
[-125.50635529 113.29502869]
[-133.21147156 109.36726379]
[-139.32864380 103.30215454]
[-143.29048157 95.69161224]
[-144.73854065 87.26940918]
[-159.28550720 83.61070251]
[-173.83245850 79.95199585]
[-188.37940979 76.29329681]
[-197.64451599 77.23492432]
[-203.31452942 72.29143524]
[-217.74192810 68.18649292]
[-234.63105774 69.66743469]
[-240.72950745 53.84828949]
[-227.21679688 43.60900116]
[-213.63697815 53.75910950]
[-199.20959473 57.86405563]
[-184.72070312 61.74633789]
[-170.17375183 65.40504456]
[-155.62680054 69.06375122]
[-141.07984924 72.72245789]
[-123.85830688 59.33222580]
[-102.01428223 62.52262115]
[-89.03836823 80.70400238]
[-74.06681824 81.62741089]
[-59.09527206 82.55082703]
[-44.12372208 83.47424316]
[-29.15217209 84.39765167]
[-14.18062115 85.32106781]
[0.79092842 86.24448395]
[15.76247787 87.16789246]
[28.94192696 80.22877502]
[42.23960876 88.80094910]
[49.23030853 86.02294159]
[57.65577698 89.99034119]
[72.59178925 91.37436676]
[87.52780151 92.75839233]
[90.94911957 75.72737885]
[112.14794159 64.64026642]
[124.65197754 56.35478973]
[131.88201904 42.28222656]
[146.76531982 41.70196152]
[159.26934814 33.41648483]
[166.49938965 19.34392166]
[181.38269043 18.76365471]
[193.88673401 10.47817993]
[201.11677551 -3.59438372]
[216.00007629 -4.17465115]
[228.50410461 -12.46012592]
[238.36785889 -26.24935150]
[254.34875488 -20.58831596]
[253.33290100 -3.66482878]
[236.78958130 0.04391013]
[224.28553772 8.32938480]
[217.94987488 21.80931664]
[202.17219543 22.98221588]
[189.66816711 31.26769066]
[183.33250427 44.74762344]
[167.55482483 45.92052078]
[155.05079651 54.20599747]
[148.71511841 67.68592834]
[132.93745422 68.85882568]
[120.43341064 77.14430237]
[119.62648010 84.60076904]
[134.30827332 81.52748108]
[141.76789856 94.54108429]
[131.69624329 105.65691376]
[118.01261139 99.51369476]
[117.20568085 106.97016144]
[127.64768982 117.73883820]
[138.08970642 128.50752258]
[154.00230408 132.47248840]
[158.26414490 148.30816650]
[146.49099731 159.72416687]
[130.79408264 154.97668457]
[127.32102203 138.94952393]
[116.87901306 128.18084717]
[106.43700409 117.41217041]
[111.85108185 131.40101624]
[108.46952057 146.01487732]
[97.46090698 156.20361328]
[82.62950897 158.44627380]
[69.10063934 151.96786499]
[61.54951859 139.00712585]
[62.58559799 124.04295349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 49]
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[11 42]
[12 41]
[13 40]
[22 37]
[23 36]
[24 35]
[25 34]
[27 33]
[28 32]
[55 79]
[56 78]
[58 76]
[59 75]
[61 73]
[62 72]
[64 70]
[65 69]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
