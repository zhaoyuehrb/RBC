%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGCGCAUACUCAACUCUAAGACCUCCGGAACAUGGAAUCUGGGCGUGCACCAUUAUUGACACCUACACCAGCCGUCCCUUUCUUAGAAGACAUACGGUAGCACUUCCACCCUCGCUCAAAACUCGGGAAAGGAGGGGCGGAGGGUGG\
) } def
/len { sequence length } bind def

/coor [
[240.66203308 209.84710693]
[228.39965820 201.20799255]
[216.13729858 192.56886292]
[203.87492371 183.92974854]
[189.01426697 182.92477417]
[182.18898010 168.65150452]
[169.92660522 160.01239014]
[157.90422058 166.56384277]
[144.16529846 167.28585815]
[131.40000916 161.97973633]
[122.13259888 151.63275146]
[118.22234344 138.23495483]
[120.49068451 124.39657593]
[108.41069794 115.50422668]
[98.60522461 117.58338928]
[89.25016022 113.98434448]
[83.36654663 105.86933899]
[82.85437012 95.85894775]
[71.15474701 86.47178650]
[59.45512390 77.08462524]
[47.75550079 67.69745636]
[36.05587769 58.31029892]
[24.35625458 48.92313766]
[12.65663052 39.53597641]
[1.06453288 44.40832138]
[-11.42574120 43.86668015]
[-22.42435837 38.07659912]
[-29.85333824 28.20189667]
[-32.33907318 16.17127419]
[-29.46598244 4.30173588]
[-40.76498795 -5.56398726]
[-52.06399155 -15.42971039]
[-68.46722412 -11.43145370]
[-83.87789917 -17.91162682]
[-92.32533264 -32.14562988]
[-90.66432953 -48.44735718]
[-102.16613007 -58.07588577]
[-113.66793823 -67.70441437]
[-125.15522003 -64.35550690]
[-136.70808411 -66.97090149]
[-145.45349121 -74.78062439]
[-149.27473450 -85.73807526]
[-147.32310486 -97.05538940]
[-158.41441345 -107.15403748]
[-169.50573730 -117.25268555]
[-180.59704590 -127.35133362]
[-196.01026917 -130.92108154]
[-200.21200562 -145.21075439]
[-211.30331421 -155.30940247]
[-219.81428528 -158.80442810]
[-222.51753235 -165.73538208]
[-233.39636230 -176.06259155]
[-248.91223145 -174.11540222]
[-262.02160645 -182.64056396]
[-266.53460693 -197.61276245]
[-260.32037354 -211.96258545]
[-246.31304932 -218.91445923]
[-231.12646484 -215.18595886]
[-221.93127441 -202.53753662]
[-223.06915283 -186.94140625]
[-212.19032288 -176.61421204]
[-201.20466614 -166.40072632]
[-190.11335754 -156.30207825]
[-175.49345398 -153.45465088]
[-170.49839783 -138.44265747]
[-159.40708923 -128.34399414]
[-148.31576538 -118.24535370]
[-137.22445679 -108.14670563]
[-119.07450867 -110.14093781]
[-104.94638824 -98.07885742]
[-104.03940582 -79.20621490]
[-92.53760529 -69.57769012]
[-81.03580475 -59.94916153]
[-68.40623474 -64.38651276]
[-55.12979126 -61.96835709]
[-44.70962906 -53.22360611]
[-39.94915009 -40.36471939]
[-42.19826889 -26.72871590]
[-30.89926338 -16.86299133]
[-19.60025978 -6.99726868]
[-2.64359212 -11.74482059]
[13.93176937 -5.35279417]
[23.47702408 9.81528187]
[22.04379272 27.83635139]
[33.74341583 37.22351456]
[45.44303894 46.61067581]
[57.14266205 55.99783707]
[68.84228516 65.38500214]
[80.54190826 74.77216339]
[92.24153137 84.15932465]
[110.74983978 86.01565552]
[117.30304718 103.42424011]
[129.38304138 112.31658936]
[144.42843628 105.53317261]
[160.75027466 107.23410797]
[173.92248535 116.86336517]
[180.42088318 131.72785950]
[178.56571960 147.75003052]
[190.82809448 156.38914490]
[206.56584167 158.01205444]
[212.51403809 171.66738892]
[224.77641296 180.30650330]
[237.03877258 188.94561768]
[249.30114746 197.58473206]
[258.40490723 194.71922302]
[267.66323853 196.37869263]
[274.98648071 202.05842590]
[278.78228760 210.36132812]
[278.30108643 219.33964539]
[290.00070190 228.72680664]
[301.70031738 238.11396790]
[313.39996338 247.50112915]
[325.09957886 256.88827515]
[336.79919434 266.27545166]
[348.49884033 275.66262817]
[360.19845581 285.04977417]
[371.99508667 294.31472778]
[383.88748169 303.45645142]
[395.77984619 312.59820557]
[407.67224121 321.73992920]
[412.14279175 322.15887451]
[415.84893799 323.84277344]
[418.48056030 326.38372803]
[419.89688110 329.31423950]
[420.13095093 332.16952515]
[431.22225952 342.26815796]
[442.31356812 352.36682129]
[457.78558350 350.09725952]
[471.06948853 358.34786987]
[475.89297485 373.22293091]
[469.97860718 387.69891357]
[456.11895752 394.94070435]
[440.85809326 391.52893066]
[431.40173340 379.07455444]
[432.21493530 363.45812988]
[421.12362671 353.35949707]
[410.03228760 343.26083374]
[398.53048706 333.63229370]
[386.63812256 324.49057007]
[374.74572754 315.34884644]
[362.85336304 306.20709229]
[355.58651733 304.61383057]
[350.81127930 296.74938965]
[339.11166382 287.36224365]
[327.41204834 277.97506714]
[315.71240234 268.58792114]
[304.01278687 259.20074463]
[292.31317139 249.81358337]
[280.61355591 240.42642212]
[268.91390991 231.03926086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 104]
[2 103]
[3 102]
[4 101]
[6 99]
[7 98]
[13 93]
[14 92]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[30 80]
[31 79]
[32 78]
[36 73]
[37 72]
[38 71]
[43 68]
[44 67]
[45 66]
[46 65]
[48 63]
[49 62]
[51 61]
[52 60]
[109 150]
[110 149]
[111 148]
[112 147]
[113 146]
[114 145]
[115 144]
[116 143]
[117 141]
[118 140]
[119 139]
[120 138]
[125 137]
[126 136]
[127 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
