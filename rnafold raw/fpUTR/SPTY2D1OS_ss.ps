%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUCCUUUGGAGCCAAAGACUCGAACAGACAUGCGAGACCUCUACCAACUGAAGGUUUCGUGAGCGCACUCCUUUGCCAAGAUCUUGGUGAAUAGUCUUUCACUGUGCAAUUUUAUCUUAGAAAUUGUUUUACGUUUGAUC\
) } def
/len { sequence length } bind def

/coor [
[35.22893524 269.12817383]
[30.06424141 283.21099854]
[32.57686615 298.83139038]
[20.93050003 308.11642456]
[15.76580620 322.19924927]
[10.60111237 336.28207397]
[10.82413006 353.23455811]
[-5.40410376 358.14175415]
[-14.61196613 343.90618896]
[-3.48171210 331.11737061]
[1.68298185 317.03454590]
[6.84767580 302.95172119]
[3.96563745 288.33859253]
[15.98141766 278.04629517]
[21.14611244 263.96347046]
[13.20906448 255.94075012]
[8.85330009 245.47390747]
[8.75457191 234.08575439]
[12.96618748 223.44903564]
[20.90548134 215.14071655]
[31.43411827 210.40823364]
[43.02120972 209.98223877]
[49.10218430 196.27012634]
[55.18315506 182.55802917]
[61.26412964 168.84593201]
[67.34510040 155.13381958]
[73.42607880 141.42172241]
[64.47934723 134.95379639]
[57.09939957 126.55839539]
[51.69994354 116.61360931]
[48.60374069 105.58586121]
[48.02388382 94.00809479]
[50.05028534 82.45405579]
[54.64218903 71.50981903]
[41.76304245 63.82037354]
[28.88389778 56.13092422]
[16.00475121 48.44147873]
[3.12560582 40.75202942]
[-9.75354004 33.06258392]
[-22.63268661 25.37313652]
[-35.51183319 17.68368912]
[-48.39097595 9.99424076]
[-61.35380936 2.44672632]
[-75.42655945 8.98410511]
[-90.64772034 5.96816778]
[-101.16444397 -5.44139481]
[-102.93283844 -20.85737419]
[-95.27291870 -34.35201263]
[-81.13008118 -40.73634338]
[-65.94252777 -37.55546188]
[-55.55019379 -26.03248405]
[-53.94913864 -10.59822845]
[-46.52194977 -10.02736568]
[-40.70153046 -2.88490510]
[-27.82238388 4.80454254]
[-14.94323826 12.49398994]
[-2.06409264 20.18343735]
[10.81505299 27.87288475]
[23.69419861 35.56233215]
[36.57334518 43.25178146]
[49.45249176 50.94122696]
[62.33163834 58.63067627]
[74.67639160 50.10970306]
[72.05364227 35.34077835]
[69.43089294 20.57185173]
[58.46607971 8.37739182]
[63.80096817 -7.12973499]
[79.94748688 -9.99712563]
[90.29547882 2.72494435]
[84.19982147 17.94910049]
[86.82257080 32.71802521]
[89.44532013 47.48695374]
[105.53343201 44.96842575]
[122.15384674 47.42179871]
[137.76057434 54.92604065]
[145.30809021 41.96320724]
[152.85560608 29.00037384]
[160.40312195 16.03754234]
[167.95063782 3.07470942]
[175.49815369 -9.88812351]
[183.04566956 -22.85095596]
[182.56459045 -39.24304581]
[196.66023254 -47.62427521]
[210.83219910 -39.37275696]
[210.50158691 -22.97694206]
[196.00849915 -15.30344105]
[188.46098328 -2.34060884]
[180.91346741 10.62222385]
[173.36595154 23.58505630]
[165.81843567 36.54788971]
[158.27091980 49.51072311]
[150.72341919 62.47355270]
[160.16748047 74.12728882]
[174.41282654 69.42939758]
[188.65817261 64.73150635]
[202.90351868 60.03361130]
[217.14886475 55.33572006]
[225.62432861 41.71419144]
[241.57455444 39.99087524]
[252.76388550 51.48775482]
[250.60884094 67.38540649]
[236.76257324 75.48851013]
[221.84675598 69.58106232]
[207.60140991 74.27895355]
[193.35606384 78.97684479]
[179.11071777 83.67473602]
[164.86537170 88.37262726]
[163.54891968 103.31475067]
[176.75338745 110.43106842]
[189.95785522 117.54738617]
[203.16232300 124.66371155]
[216.36679077 131.78002930]
[229.57127380 138.89634705]
[242.77574158 146.01266479]
[255.98020935 153.12898254]
[271.04577637 148.35366821]
[285.03677368 155.70405579]
[289.65252686 170.81927490]
[282.15463257 184.73176575]
[266.99145508 189.18746948]
[253.15902710 181.54290771]
[248.86389160 166.33345032]
[235.65940857 159.21713257]
[222.45494080 152.10081482]
[209.25047302 144.98449707]
[196.04600525 137.86817932]
[182.84153748 130.75186157]
[169.63706970 123.63553619]
[156.43260193 116.51921844]
[148.96963501 129.56571960]
[138.67701721 139.94981384]
[126.40282440 147.11303711]
[113.08781433 150.74850464]
[99.69452667 150.81015015]
[87.13817596 147.50270081]
[81.05720520 161.21479797]
[74.97623444 174.92689514]
[68.89525604 188.63900757]
[62.81428528 202.35110474]
[56.73331451 216.06320190]
[67.02905273 232.09951782]
[65.68321991 250.95985413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[4 12]
[5 11]
[6 10]
[22 140]
[23 139]
[24 138]
[25 137]
[26 136]
[27 135]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[43 52]
[63 72]
[64 71]
[65 70]
[75 92]
[76 91]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
[93 107]
[94 106]
[95 105]
[96 104]
[97 103]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
