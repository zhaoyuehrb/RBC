%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGCCGUGACAGCCGCGGGAAGACAUGAGAGGCUGCUAGAAGGACUUCCCGCGGCCAGCGCCAUCACCUGCCCACGCCGCAGGGAGCCCUGACCAGAGCUCCAGACCUCUGGGUCCAACUGCCUUAUGGAUCCCUCUCCCUGAAUGUCACAUAGGAGAGGGGACAGGGGUUGGCCACACACCUGGAA\
) } def
/len { sequence length } bind def

/coor [
[248.97839355 178.47628784]
[235.90612793 171.11993408]
[222.83386230 163.76358032]
[209.76161194 156.40722656]
[196.68934631 149.05087280]
[182.45948792 153.29905701]
[169.09756470 146.02488708]
[164.73817444 131.07051086]
[157.35377502 130.52908325]
[151.51203918 123.48291779]
[138.56318665 115.91143036]
[125.61434174 108.33995056]
[102.29300690 127.63673401]
[74.70238495 113.18086243]
[60.86803818 118.97835541]
[47.03369141 124.77584076]
[33.19934464 130.57333374]
[19.36499977 136.37081909]
[5.53065300 142.16830444]
[-8.30369377 147.96578979]
[-22.13804054 153.76327515]
[-35.97238541 159.56076050]
[-49.80673218 165.35824585]
[-63.64107895 171.15574646]
[-73.37837982 183.62553406]
[-88.10707092 181.40856934]
[-88.97928619 196.60728455]
[-96.33399200 209.86605835]
[-108.66558838 218.58110046]
[-123.49726105 221.06756592]
[-137.87837219 216.88510132]
[-148.97146606 206.91470337]
[-162.80581665 212.71218872]
[-172.29908752 226.08416748]
[-188.59863281 224.27957153]
[-194.93688965 209.15480042]
[-184.79359436 196.26893616]
[-168.60330200 198.87783813]
[-154.76895142 193.08035278]
[-154.09825134 178.18016052]
[-146.99548340 164.99456787]
[-134.82229614 156.16424561]
[-119.96173096 153.48400879]
[-105.35177612 157.53816223]
[-93.90455627 167.57423401]
[-85.15678406 155.51911926]
[-69.43856812 157.32139587]
[-55.60422134 151.52391052]
[-41.76987457 145.72642517]
[-27.93552780 139.92892456]
[-14.10118103 134.13143921]
[-0.26683477 128.33395386]
[13.56751156 122.53646851]
[27.40185738 116.73898315]
[41.23620605 110.94149780]
[55.07054901 105.14400482]
[68.90489960 99.34651947]
[72.82709503 84.86838531]
[63.81087875 72.88056183]
[54.79466248 60.89274597]
[40.31608200 54.51455688]
[38.84951401 39.69232941]
[29.83329773 27.70450974]
[23.88337898 24.75579643]
[20.79268837 19.95971489]
[20.72496605 15.16796780]
[12.11003685 2.88859606]
[4.60553360 -2.35132718]
[3.45615768 -9.66578293]
[-4.95456839 -22.08591461]
[-13.36529446 -34.50604630]
[-21.77602005 -46.92618179]
[-30.18674660 -59.34631348]
[-45.75918198 -60.77222824]
[-56.73503876 -71.91065979]
[-57.93184662 -87.50237274]
[-48.78451538 -100.18544769]
[-33.61213303 -103.97132111]
[-19.57863426 -97.07241058]
[-13.31020737 -82.74618530]
[-17.76661301 -67.75704193]
[-9.35588741 -55.33690643]
[-0.94516158 -42.91677475]
[7.46556425 -30.49664116]
[15.87629032 -18.07650757]
[24.38940811 -5.72633410]
[33.00433731 6.55303812]
[41.82111740 18.68829346]
[50.83733368 30.67611313]
[64.67101288 36.19684982]
[66.78247833 51.87652969]
[75.79869843 63.86434937]
[84.81491852 75.85216522]
[99.54443359 72.27204895]
[113.58306885 76.73738098]
[118.21832275 62.47153091]
[122.85357666 48.20568466]
[127.48883820 33.93983459]
[132.12408447 19.67398834]
[136.75933838 5.40814114]
[127.53003693 -7.06580973]
[127.42903137 -22.58255577]
[136.49517822 -35.17559433]
[151.24235535 -40.00263977]
[165.99996948 -35.20759964]
[175.09342957 -22.63426399]
[175.02609253 -7.11733484]
[165.82386780 5.37661076]
[151.02519226 10.04339600]
[146.38993835 24.30924416]
[141.75468445 38.57509232]
[137.11943054 52.84093857]
[132.48417664 67.10678864]
[127.84891510 81.37263489]
[133.18582153 95.39109802]
[146.13467407 102.96258545]
[159.08352661 110.53406525]
[172.09451294 117.99823761]
[187.13980103 113.96375275]
[200.29214478 121.61035919]
[204.04570007 135.97860718]
[217.11796570 143.33496094]
[230.19021606 150.69131470]
[243.26248169 158.04766846]
[256.33474731 165.40402222]
[265.59280396 156.78572083]
[276.83990479 151.04034424]
[289.21166992 148.59774780]
[301.76052856 149.63439941]
[313.52816772 154.06071472]
[323.61889648 161.52865601]
[331.26763916 171.45907593]
[335.89804077 183.08662415]
[337.16583252 195.51875305]
[351.87152100 198.47550964]
[366.57723999 201.43226624]
[381.28292847 204.38902283]
[395.98864746 207.34577942]
[410.69433594 210.30253601]
[425.40002441 213.25929260]
[440.10574341 216.21604919]
[457.40319824 209.92529297]
[470.11929321 222.00831604]
[484.87188721 224.72152710]
[496.80841064 214.61940002]
[512.44598389 214.60507202]
[524.40100098 224.68531799]
[527.02868652 240.10055542]
[519.08831787 253.57215881]
[504.32907104 258.73928833]
[489.71984863 253.16213989]
[482.15866089 239.47410583]
[467.40609741 236.76089478]
[457.26068115 243.36921692]
[444.93835449 241.21696472]
[437.14898682 230.92173767]
[422.44326782 227.96499634]
[407.73757935 225.00823975]
[393.03189087 222.05148315]
[378.32617188 219.09472656]
[363.62048340 216.13796997]
[348.91476440 213.18121338]
[334.20907593 210.22445679]
[330.35717773 217.97570801]
[325.09744263 224.84991455]
[318.62307739 230.59460449]
[325.32220459 244.01554871]
[332.02133179 257.43649292]
[338.72045898 270.85742188]
[351.80651855 279.74929810]
[350.56784058 294.59231567]
[357.26699829 308.01324463]
[363.91165161 314.30789185]
[363.96386719 321.71191406]
[377.79010010 330.53048706]
[376.79592896 346.89947510]
[362.00402832 353.97985840]
[348.63107300 344.48797607]
[350.43399048 328.18823242]
[343.84603882 314.71237183]
[337.14691162 301.29144287]
[324.54000854 293.35952759]
[325.29953003 277.55654907]
[318.60040283 264.13562012]
[311.90124512 250.71467590]
[305.20211792 237.29373169]
[285.39312744 238.89633179]
[266.75860596 231.83357239]
[252.91287231 217.42550659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 123]
[4 122]
[5 121]
[8 118]
[10 117]
[11 116]
[12 115]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[26 45]
[32 39]
[33 38]
[58 93]
[59 92]
[60 91]
[62 89]
[63 88]
[66 87]
[67 86]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
[134 163]
[135 162]
[136 161]
[137 160]
[138 159]
[139 158]
[140 157]
[141 156]
[143 153]
[144 152]
[166 186]
[167 185]
[168 184]
[169 183]
[171 181]
[172 180]
[174 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
