%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUGCUGACUGAGCUAGUCUUGGGGUCCUGGAGAAGGGGGCUGGAGGCAUGCCCACAGCCUCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.90773010 124.79833221]
[77.50302124 116.39129639]
[75.59143829 131.85038757]
[63.56488419 141.16793823]
[48.83878326 139.25025940]
[37.11130905 148.60261536]
[25.38383675 157.95495605]
[22.16598511 173.67198181]
[7.80677891 180.82690430]
[-6.67862558 173.93106079]
[-10.17826653 158.27436829]
[-0.00751883 145.86729431]
[16.03149033 146.22749329]
[27.75896263 136.87513733]
[39.48643494 127.52278900]
[40.89370728 112.73918152]
[52.65380478 103.08750916]
[68.15067291 104.66382599]
[69.49526215 89.72421265]
[59.62618256 78.42813873]
[49.75710297 67.13206482]
[39.88802338 55.83599472]
[24.98161507 50.53414536]
[22.43458939 35.85893250]
[12.56550789 24.56286049]
[-2.40899611 16.61298180]
[1.08484197 0.02294217]
[17.99372673 -1.21234047]
[23.86157990 14.69377899]
[33.73065948 25.98985100]
[47.93116760 30.48372650]
[51.18409348 45.96691132]
[61.05317688 57.26298523]
[70.92225647 68.55905914]
[80.79133606 79.85512543]
[105.88787079 76.33540344]
[119.86450195 93.38455963]
[134.84939575 94.05752563]
[149.83428955 94.73049927]
[164.81918335 95.40347290]
[179.80407715 96.07644653]
[186.33020020 93.15187073]
[192.36299133 94.08300781]
[196.08422852 97.54168701]
[210.94847107 99.55518341]
[225.81271362 101.56867981]
[240.67697144 103.58218384]
[255.54121399 105.59568024]
[270.40545654 107.60917664]
[279.66635132 105.62277985]
[285.88565063 110.06099701]
[300.64459229 112.73934937]
[315.89157104 106.70107269]
[328.57458496 117.09690094]
[325.64642334 133.23251343]
[310.11929321 138.50895691]
[297.96621704 127.49829865]
[283.20727539 124.81994629]
[268.39196777 122.47342682]
[253.52770996 120.45993042]
[238.66346741 118.44642639]
[223.79922485 116.43292999]
[208.93496704 114.41943359]
[194.07072449 112.40592957]
[179.13111877 111.06134033]
[164.14620972 110.38836670]
[149.16131592 109.71540070]
[134.17642212 109.04242706]
[119.19152832 108.36945343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[5 15]
[6 14]
[7 13]
[19 35]
[20 34]
[21 33]
[22 32]
[24 30]
[25 29]
[37 69]
[38 68]
[39 67]
[40 66]
[41 65]
[44 64]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
