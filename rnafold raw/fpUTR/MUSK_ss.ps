%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGAGCUGCUGACACAAACAGUCAUUAGCAGACAACCCUUUUGCAACAAAGUAUGCUUUAAAAUGUAAACUGUGGAGCCAUUUUCCUUGCGUUGUCCAGAAGGAACUUCGUCCUGCGUGAGCCUGGAUUAAUC\
) } def
/len { sequence length } bind def

/coor [
[93.63654327 177.06570435]
[107.84302521 172.25157166]
[122.21737671 176.53514099]
[114.86903381 163.45837402]
[107.52068329 150.38160706]
[100.17234039 137.30484009]
[85.46482849 134.35710144]
[73.64466858 143.59201050]
[61.82450867 152.82693481]
[50.00434875 162.06185913]
[38.18418503 171.29678345]
[26.36402512 180.53170776]
[14.54386425 189.76663208]
[8.09549522 206.96945190]
[-9.31510448 208.83119202]
[-20.91717911 218.33866882]
[-23.92575264 234.09709167]
[-38.18854523 241.44230652]
[-52.76436615 234.73970032]
[-56.47188950 219.13092041]
[-46.46702576 206.58970642]
[-30.42464256 206.73658752]
[-18.82256889 197.22912598]
[-17.29334450 185.17184448]
[-7.62518740 177.16075134]
[5.30894184 177.94647217]
[17.12910271 168.71154785]
[28.94926453 159.47662354]
[40.76942444 150.24169922]
[52.58958817 141.00677490]
[64.40975189 131.77185059]
[76.22991180 122.53693390]
[70.63529968 112.09429932]
[69.24788666 100.69547272]
[71.99629974 89.92137909]
[78.25294495 81.17308807]
[86.95285797 75.48977661]
[96.76670074 73.42729950]
[99.19937134 58.62587357]
[101.63204193 43.82445145]
[104.06470490 29.02302742]
[106.49737549 14.22160339]
[108.93004608 -0.57981920]
[111.36271667 -15.38124180]
[113.45030975 -30.23526382]
[115.19170380 -45.13383865]
[116.93309784 -60.03241348]
[118.67449188 -74.93099213]
[103.00051117 -89.70540619]
[101.47200775 -110.95825958]
[114.58201599 -127.46033478]
[110.44745636 -141.87925720]
[106.31289673 -156.29818726]
[95.07148743 -167.43107605]
[99.00094604 -181.79800415]
[94.86638641 -196.21693420]
[90.73182678 -210.63584900]
[76.10503387 -215.81626892]
[67.34444427 -228.62374878]
[67.81868744 -244.13357544]
[77.34539795 -256.38189697]
[92.26136780 -260.65899658]
[106.83110046 -255.32020569]
[115.45223999 -242.41844177]
[114.80976868 -226.91467285]
[105.15074921 -214.77041626]
[109.28530884 -200.35148621]
[113.41986847 -185.93257141]
[124.36555481 -175.83100891]
[120.73182678 -160.43275452]
[124.86638641 -146.01382446]
[129.00094604 -131.59489441]
[132.66923523 -131.42152405]
[136.28584290 -130.78381348]
[139.79220581 -129.69210815]
[148.60899353 -141.82736206]
[157.42576599 -153.96261597]
[166.24253845 -166.09786987]
[165.16313171 -182.10456848]
[177.10139465 -192.82171631]
[192.89933777 -190.02803040]
[200.43812561 -175.86659241]
[193.93463135 -161.20085144]
[178.37779236 -157.28109741]
[169.56101990 -145.14584351]
[160.74424744 -133.01058960]
[151.92745972 -120.87532806]
[157.57823181 -110.12162781]
[158.32604980 -97.91616058]
[153.97355652 -86.40267181]
[145.22497559 -77.63042450]
[133.57307434 -73.18959808]
[131.83168030 -58.29101944]
[130.09028625 -43.39244461]
[128.34889221 -28.49386978]
[130.61520386 -24.19515610]
[130.14022827 -18.41575623]
[126.16413879 -12.94857311]
[123.73146820 1.85284972]
[121.29879761 16.65427208]
[118.86613464 31.45569611]
[116.43346405 46.25711823]
[114.00079346 61.05854034]
[111.56812286 75.85996246]
[126.87472534 89.74642181]
[128.39196777 111.83522797]
[113.24910736 129.95649719]
[120.59745026 143.03326416]
[127.94580078 156.11003113]
[135.29414368 169.18679810]
[143.82615662 181.52392578]
[153.46797180 193.01458740]
[163.10978699 204.50524902]
[172.75160217 215.99592590]
[190.16899109 221.83999634]
[192.63722229 239.17501831]
[202.54380798 250.43821716]
[218.24502563 255.17147827]
[221.73258972 271.19549561]
[209.41879272 282.02612305]
[193.97102356 276.52172852]
[191.28060913 260.34478760]
[181.37402344 249.08158875]
[169.27072144 247.97409058]
[160.92709351 238.59140015]
[161.26094055 225.63774109]
[151.61912537 214.14706421]
[141.97731018 202.65640259]
[132.33549500 191.16574097]
[131.26989746 206.12783813]
[121.75117493 217.72068787]
[107.28253174 221.67773438]
[93.18887329 216.54269409]
[84.65711212 204.20538330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 110]
[4 109]
[5 108]
[6 107]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[15 23]
[16 22]
[38 104]
[39 103]
[40 102]
[41 101]
[42 100]
[43 99]
[44 98]
[45 95]
[46 94]
[47 93]
[48 92]
[51 72]
[52 71]
[53 70]
[55 68]
[56 67]
[57 66]
[75 87]
[76 86]
[77 85]
[78 84]
[111 129]
[112 128]
[113 127]
[114 126]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
