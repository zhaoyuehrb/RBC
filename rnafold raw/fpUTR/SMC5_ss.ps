%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAACAGUUCGCGGCAGUUCGCGCGGGAGCGGGGCGCCUGGGUGGAUGGGCGCUUGGGCGCCUGGGCUGCCGGACGGUGGGAACGGAAGUCGCUGUGGGACGCUGAGGAAGCCAGG\
) } def
/len { sequence length } bind def

/coor [
[86.82049561 336.86706543]
[85.62370300 321.91485596]
[84.42691040 306.96267700]
[72.40537262 315.93389893]
[57.82936859 312.39273071]
[51.26393127 298.90588379]
[57.46785736 285.24896240]
[71.94438934 281.32083130]
[84.20067596 289.96890259]
[84.99900818 274.99014282]
[85.79734039 260.01141357]
[76.98816681 244.89714050]
[86.99176025 229.50823975]
[87.39107513 214.51354980]
[87.79038239 199.51887512]
[88.18968964 184.52418518]
[85.18379974 177.66633606]
[88.80450439 169.13713074]
[89.60283661 154.15838623]
[90.40116882 139.17964172]
[91.19950104 124.20090485]
[80.82476807 117.18845367]
[74.98435974 106.11148834]
[75.05934906 93.58934784]
[81.03200531 82.58312225]
[73.41701508 69.65981293]
[65.80203247 56.73649979]
[52.13005447 48.77486801]
[52.33495712 33.88167191]
[44.71996689 20.95836067]
[37.10498047 8.03504944]
[20.89749718 -0.57934123]
[21.27980614 -18.06924248]
[13.32349300 -30.78525925]
[5.36717939 -43.50127411]
[-2.58913398 -56.21729279]
[-10.54544735 -68.93330383]
[-18.50176048 -81.64932251]
[-26.45807457 -94.36534119]
[-34.41438675 -107.08135986]
[-42.37070084 -119.79737091]
[-50.32701492 -132.51339722]
[-58.28332901 -145.22940063]
[-66.23963928 -157.94541931]
[-74.19595337 -170.66143799]
[-89.65158081 -173.96282959]
[-98.17568970 -187.27128601]
[-94.71107483 -202.69114685]
[-81.31323242 -211.07408142]
[-65.93087006 -207.44662476]
[-57.69006348 -193.96090698]
[-61.47993851 -178.61775208]
[-53.52362823 -165.90173340]
[-45.56731415 -153.18571472]
[-37.61100006 -140.46969604]
[-29.65468597 -127.75368500]
[-21.69837189 -115.03767395]
[-13.74205875 -102.32165527]
[-5.78574467 -89.60563660]
[2.17056870 -76.88961792]
[10.12688255 -64.17360687]
[18.08319664 -51.45758820]
[26.03950882 -38.74157333]
[33.99582291 -26.02555466]
[45.78161240 -22.96477318]
[52.49328995 -12.32560825]
[50.02829361 0.42006272]
[57.64328003 13.34337425]
[65.25827026 26.26668549]
[78.38556671 33.30395508]
[78.72534180 49.12151337]
[86.34033203 62.04482269]
[93.95531464 74.96813202]
[111.26126099 76.84149170]
[123.42159271 89.29666138]
[138.28887939 87.30577850]
[153.15617371 85.31489563]
[168.02346802 83.32401276]
[182.89076233 81.33312988]
[197.75805664 79.34224701]
[212.62535095 77.35136414]
[219.07640076 63.33753586]
[232.09210205 55.05532074]
[247.51919556 55.14755249]
[260.43493652 63.58479309]
[266.71798706 77.67475128]
[264.36340332 92.92137909]
[254.12257385 104.45952606]
[239.26327515 108.60741425]
[224.52706909 104.04146576]
[214.61622620 92.21865845]
[199.74893188 94.20954132]
[184.88165283 96.20042419]
[170.01435852 98.19130707]
[155.14706421 100.18218994]
[140.27976990 102.17307281]
[125.41247559 104.16395569]
[118.92143250 117.46745300]
[106.17824554 124.99923706]
[105.37991333 139.97798157]
[104.58158112 154.95671082]
[103.78324127 169.93545532]
[103.18437195 184.92349243]
[102.78506470 199.91818237]
[102.38575745 214.91287231]
[101.98645020 229.90754700]
[110.31866455 239.86257935]
[109.60275269 252.42147827]
[100.77608490 260.80975342]
[99.97775269 275.78848267]
[99.17942047 290.76724243]
[99.37908936 305.76589966]
[100.57588196 320.71807861]
[101.77267456 335.67025757]
[111.51968384 348.85842896]
[104.72470856 363.78359985]
[88.37784576 365.09201050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[9 111]
[10 110]
[11 109]
[13 106]
[14 105]
[15 104]
[16 103]
[18 102]
[19 101]
[20 100]
[21 99]
[25 73]
[26 72]
[27 71]
[29 69]
[30 68]
[31 67]
[33 64]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[75 97]
[76 96]
[77 95]
[78 94]
[79 93]
[80 92]
[81 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
