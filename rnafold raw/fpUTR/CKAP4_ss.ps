%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGAGCCCCUGCAAGUUUCCCGGGCCGCGCGCCGCGCUCGCUCGCCUCCCAGCCCGCGGCCCGAGCCGCCGCCGCGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[2.43042278 212.71109009]
[-0.08330580 212.18211365]
[-12.05356407 221.22163391]
[-24.02382278 230.26115417]
[-35.99407959 239.30065918]
[-47.96434021 248.34017944]
[-59.93459702 257.37969971]
[-71.90485382 266.41921997]
[-71.48348236 281.93057251]
[-80.28768158 294.70812988]
[-94.93204498 299.83865356]
[-109.78552246 295.34933472]
[-119.13665009 282.96646118]
[-119.38972473 267.45144653]
[-110.44744110 254.77015686]
[-95.74827576 249.79879761]
[-80.94437408 254.44895935]
[-68.97412109 245.40945435]
[-57.00386047 236.36993408]
[-45.03359985 227.33041382]
[-33.06334305 218.29089355]
[-21.09308434 209.25137329]
[-9.12282562 200.21185303]
[1.96230841 190.10641479]
[12.06774330 179.02128601]
[22.17317772 167.93614197]
[32.27861404 156.85101318]
[34.51072693 149.61346436]
[42.96814346 145.55180359]
[53.47628784 134.84764099]
[63.98443604 124.14349365]
[66.48246765 116.99337006]
[75.08419037 113.24699402]
[85.98069000 102.93843842]
[90.15605927 89.59460449]
[103.71075439 86.16505432]
[114.60726166 75.85650635]
[125.50376129 65.54795837]
[136.20791626 55.03981018]
[146.71606445 44.33565903]
[157.22421265 33.63150406]
[167.73234558 22.92735291]
[167.00909424 11.77065754]
[172.55468750 2.32010293]
[182.24540710 -2.29806423]
[192.63847351 -0.71950477]
[203.90844727 -10.61837292]
[215.17843628 -20.51724052]
[220.44090271 -35.43759537]
[235.10934448 -38.02335358]
[234.57531738 -53.65181351]
[244.25265503 -65.93525696]
[259.57205200 -69.07380676]
[273.30010986 -61.58554840]
[278.95489502 -47.00619888]
[273.86639404 -32.21968460]
[260.43719482 -24.20774460]
[245.00820923 -26.75337410]
[240.55183411 -12.54105473]
[225.07730103 -9.24726200]
[213.80731201 0.65160555]
[202.53733826 10.55047321]
[197.97576904 29.19108582]
[178.43650818 33.43549728]
[167.92835999 44.13965225]
[157.42021179 54.84380341]
[146.91206360 65.54795837]
[144.41403198 72.69807434]
[135.81231689 76.44445801]
[124.91580963 86.75300598]
[114.01931000 97.06156158]
[109.84394073 110.40539551]
[96.28924561 113.83494568]
[85.39273834 124.14349365]
[74.68859100 134.65164185]
[64.18044281 145.35578918]
[53.67229462 156.05995178]
[43.36374664 166.95645142]
[33.25831223 178.04158020]
[23.15287590 189.12670898]
[13.04744244 200.21185303]
[12.44017601 204.54612732]
[10.70808983 208.15135193]
[8.19958210 210.77262878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[24 81]
[25 80]
[26 79]
[27 78]
[29 77]
[30 76]
[31 75]
[33 74]
[34 73]
[36 71]
[37 70]
[38 69]
[39 67]
[40 66]
[41 65]
[42 64]
[46 62]
[47 61]
[48 60]
[50 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
