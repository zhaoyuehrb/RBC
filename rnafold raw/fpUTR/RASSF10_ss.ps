%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCUUCGGUGCGCAGCGGGGGAACAGGGCUAGUGCAGCCGCCGGAGGGGGGCACGGGCUCCUCUCCCAUCCCAGAGCUACUGGGCUGCCCUUGCUGUCCUCGCCGCCCCAGCAGACCCCGGCCGGACCUGCCACCUGCGCCCUGGUUGCGCC\
) } def
/len { sequence length } bind def

/coor [
[23.98325157 563.26446533]
[21.97804451 565.81878662]
[19.52248383 567.28350830]
[15.32302189 581.68365479]
[11.12355995 596.08380127]
[12.49372005 612.98229980]
[-3.36507297 618.97686768]
[-13.51553535 605.39727783]
[-3.27659655 591.88433838]
[0.92286545 577.48419189]
[5.12232733 563.08404541]
[8.73476505 548.52551270]
[11.75424290 533.83258057]
[14.77372074 519.13958740]
[17.79319763 504.44665527]
[20.81267548 489.75372314]
[23.83215332 475.06076050]
[26.85163116 460.36779785]
[21.83469582 446.34356689]
[32.19156647 434.38339233]
[35.21104431 419.69042969]
[38.23052216 404.99749756]
[41.25000000 390.30453491]
[32.86470032 378.04800415]
[35.71757507 363.10427856]
[48.63019562 354.39208984]
[51.64967346 339.69915771]
[54.66915131 325.00619507]
[57.68862915 310.31323242]
[60.40970612 295.56210327]
[62.83126450 280.75888062]
[53.95615005 268.85223389]
[56.20107269 253.80514526]
[68.75002289 244.57684326]
[71.17157745 229.77359009]
[65.59042358 215.96418762]
[75.45409393 203.59411621]
[69.87294006 189.78469849]
[79.73661041 177.41462708]
[82.15816498 162.61138916]
[84.57971954 147.80813599]
[87.00128174 133.00489807]
[71.30069733 120.84801483]
[64.59333801 102.15819550]
[68.98101807 82.79208374]
[57.69924545 72.90665436]
[46.41747284 63.02123260]
[35.13570023 53.13581085]
[23.85392761 43.25038528]
[12.57215500 33.36495972]
[1.29038310 23.47953606]
[-9.99138927 13.59411240]
[-21.27316093 3.70868802]
[-32.55493546 -6.17673635]
[-48.73690414 -8.83678818]
[-54.27025986 -24.27421188]
[-43.46275711 -36.60830688]
[-27.43223000 -33.15081787]
[-22.66950989 -17.45850945]
[-11.38773727 -7.57308435]
[-0.10596494 2.31234002]
[11.17580700 12.19776440]
[22.45758057 22.08318901]
[33.73935318 31.96861267]
[45.02112579 41.85403824]
[56.30289841 51.73945999]
[67.58467102 61.62488556]
[78.86643982 71.51030731]
[82.86216736 67.31475067]
[87.66316223 63.70008850]
[93.18097687 60.81657410]
[99.29981232 58.80027390]
[100.21132660 43.82799530]
[101.12284088 28.85571480]
[102.03435516 13.88343620]
[102.94586945 -1.08884263]
[93.43146515 -14.00610733]
[97.73742676 -29.46049881]
[112.56059265 -35.59672928]
[126.52989197 -27.70761108]
[128.92927551 -11.84499741]
[117.91814423 -0.17732932]
[117.00662994 14.79494953]
[116.09511566 29.76722908]
[115.18360138 44.73950958]
[114.27209473 59.71178818]
[127.31284332 67.12385559]
[139.71051025 58.68003464]
[152.10816956 50.23621368]
[164.50581360 41.79239655]
[163.47257996 26.53199959]
[170.17225647 12.89341259]
[182.71569824 4.49529171]
[197.67848206 3.50985622]
[211.03555298 10.10183811]
[223.43321228 1.65801883]
[230.48371887 -12.50535202]
[245.35842896 -13.27484417]
[257.75607300 -21.71866226]
[264.38726807 -36.71730804]
[280.71884155 -38.20459366]
[289.95025635 -24.65052605]
[282.58505249 -9.99836826]
[266.19992065 -9.32100487]
[253.80224609 -0.87718582]
[247.63851929 12.68222618]
[231.87702942 14.05567646]
[219.47938538 22.49949646]
[220.72146606 37.34276962]
[214.32453918 50.90504456]
[201.91601562 59.50125504]
[186.77134705 60.74045944]
[172.94964600 54.19005203]
[160.55198669 62.63387299]
[148.15432739 71.07769012]
[135.75666809 79.52150726]
[139.80752563 95.51824188]
[137.22132874 111.34652710]
[128.78982544 124.44164276]
[116.22076416 132.83049011]
[101.80452728 135.42645264]
[99.38296509 150.22969055]
[96.96141052 165.03294373]
[94.53985596 179.83618164]
[99.94780731 194.70442200]
[90.25733948 206.01567078]
[95.66529083 220.88391113]
[85.97482300 232.19515991]
[83.55326843 246.99839783]
[92.50761414 259.74426270]
[89.84093475 274.72238159]
[77.63450623 283.18041992]
[75.21295166 297.98367310]
[77.21871185 304.38339233]
[75.85435486 309.97662354]
[72.38157654 313.33273315]
[69.36209869 328.02566528]
[66.34262085 342.71862793]
[63.32314682 357.41156006]
[71.75360107 370.50985718]
[68.48211670 385.36758423]
[55.94295120 393.32400513]
[52.92347336 408.01696777]
[49.90399551 422.70989990]
[46.88451767 437.40286255]
[51.68547821 452.47805786]
[41.54458237 463.38729858]
[38.52510452 478.08023071]
[35.50562668 492.77319336]
[32.48614883 507.46612549]
[29.46666908 522.15905762]
[26.44719124 536.85205078]
[23.42771339 551.54498291]
[25.00047302 555.73614502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[12 153]
[13 152]
[14 151]
[15 150]
[16 149]
[17 148]
[18 147]
[20 145]
[21 144]
[22 143]
[23 142]
[26 139]
[27 138]
[28 137]
[29 136]
[30 133]
[31 132]
[34 129]
[35 128]
[37 126]
[39 124]
[40 123]
[41 122]
[42 121]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
[87 116]
[88 115]
[89 114]
[90 113]
[95 108]
[96 107]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
