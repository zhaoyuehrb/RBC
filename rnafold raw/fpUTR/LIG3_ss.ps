%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCUGCCUCCCGCUCUAGGACCCGGAUUUAAAGAGACAGGCGCUCCAACCGUCGUGGGCUGCCCGCGGCCUGUAAUGAGCAAGUUCCGAGGCCUACGGUGAGCGCCGGAGCCGGAGAGGCAGCUAU\
) } def
/len { sequence length } bind def

/coor [
[-7.00444412 533.41094971]
[-19.31349564 523.96282959]
[-23.68597221 509.07452393]
[-18.44056892 494.47091675]
[-5.59424829 485.76739502]
[-5.23179197 470.77175903]
[-4.86933565 455.77615356]
[-4.50687981 440.78051758]
[-4.14442348 425.78491211]
[-3.78196716 410.78927612]
[-3.41951108 395.79367065]
[-3.05705500 380.79803467]
[-2.87581348 365.79913330]
[-2.87581348 350.79913330]
[-2.87581348 335.79913330]
[-3.05705500 320.80023193]
[-3.41951108 305.80462646]
[-3.78196716 290.80899048]
[-4.14442348 275.81338501]
[-12.18579960 288.47576904]
[-23.17273903 298.68786621]
[-36.38838959 305.78341675]
[-50.97049332 309.29940796]
[-65.96763611 309.00646973]
[-80.40131378 304.92370605]
[-93.32979584 297.31750488]
[-103.90956116 286.68414307]
[-111.45033264 273.71737671]
[-115.46009064 259.26324463]
[-115.67723083 244.26481628]
[-112.08758545 229.70066833]
[-104.92536163 216.52105713]
[-94.65785980 205.58586121]
[-81.95498657 197.60858154]
[-67.64554596 193.10969543]
[-52.66317368 192.38272095]
[-37.98539734 195.47509766]
[-24.56987190 202.18507385]
[-13.29190540 212.07484436]
[-4.88733292 224.49913025]
[0.09548579 238.64733887]
[1.33141124 253.59704590]
[8.62116241 240.48751831]
[15.91091347 227.37799072]
[23.20066452 214.26847839]
[30.49041557 201.15895081]
[37.78016663 188.04943848]
[45.06991959 174.93991089]
[44.61022186 170.09312439]
[47.26174164 164.92195129]
[53.04181671 161.38551331]
[60.95642090 148.64349365]
[68.87102509 135.90147400]
[76.78562927 123.15946198]
[84.70023346 110.41744232]
[77.59870911 94.08266449]
[87.73226929 75.02013397]
[86.28456116 60.09016037]
[84.83685303 45.16018677]
[83.38914490 30.23021126]
[81.94142914 15.30023670]
[74.39462280 0.11860348]
[86.89379120 -11.33596897]
[101.36082458 -2.49621725]
[96.87140656 13.85252857]
[98.31911469 28.78250313]
[99.76682281 43.71247864]
[101.21453094 58.64245224]
[102.66223907 73.57242584]
[116.55486298 79.22885132]
[128.01959229 69.55621338]
[139.48432922 59.88358307]
[150.94906616 50.21094894]
[162.41380310 40.53831482]
[173.76083374 30.72786331]
[178.95962524 15.78520393]
[193.61691284 13.13691425]
[204.84457397 3.19007421]
[216.07223511 -6.75676537]
[216.77616882 -22.54537010]
[228.49438477 -33.15003586]
[244.27467346 -32.27920532]
[254.75485229 -20.44952583]
[253.71723938 -4.67933512]
[241.77740479 5.67519045]
[226.01907349 4.47089577]
[214.79141235 14.41773510]
[203.56375122 24.36457634]
[199.16802979 38.59577179]
[183.70767212 41.95552444]
[180.75733948 48.81526947]
[172.08644104 52.00305176]
[160.62170410 61.67568588]
[149.15696716 71.34832001]
[137.69223022 81.02095032]
[126.22749329 90.69358826]
[117.95437622 114.64489746]
[97.44225311 118.33204651]
[89.52764893 131.07406616]
[81.61304474 143.81608582]
[73.69844055 156.55810547]
[65.78383636 169.30012512]
[58.17943954 182.22966003]
[50.88968658 195.33918762]
[43.59993744 208.44871521]
[36.31018448 221.55822754]
[29.02043343 234.66775513]
[21.73068237 247.77726746]
[14.44093132 260.88677979]
[10.85119724 275.45092773]
[11.21365261 290.44653320]
[11.57610893 305.44216919]
[11.93856525 320.43777466]
[15.30235004 329.04193115]
[12.12418652 335.79913330]
[12.12418652 350.79913330]
[12.12418652 365.79913330]
[15.27908039 374.48205566]
[11.93856525 381.16049194]
[11.57610893 396.15612793]
[11.21365261 411.15173340]
[10.85119724 426.14736938]
[10.48874092 441.14297485]
[10.12628460 456.13861084]
[9.76382828 471.13421631]
[9.40137196 486.12985229]
[21.81219292 495.44387817]
[26.34592247 510.28384399]
[21.25924873 524.94348145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 126]
[6 125]
[7 124]
[8 123]
[9 122]
[10 121]
[11 120]
[12 119]
[13 117]
[14 116]
[15 115]
[16 113]
[17 112]
[18 111]
[19 110]
[42 109]
[43 108]
[44 107]
[45 106]
[46 105]
[47 104]
[48 103]
[51 102]
[52 101]
[53 100]
[54 99]
[55 98]
[57 69]
[58 68]
[59 67]
[60 66]
[61 65]
[70 96]
[71 95]
[72 94]
[73 93]
[74 92]
[75 90]
[77 88]
[78 87]
[79 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
