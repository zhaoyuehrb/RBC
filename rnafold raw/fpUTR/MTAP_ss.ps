%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCGCACUGCUCACUCCCGCGCAGUGAGGUUGGCACAGCCACCGCUCUGUGGCUCGCUUGGUUCCCUUAGUCCCGAGCGCUCGCCCACUGCAGAUUCCUUUCCCGUGCAGAC\
) } def
/len { sequence length } bind def

/coor [
[75.53230286 231.05775452]
[81.57864380 215.21862793]
[81.57864380 200.21862793]
[73.84134674 187.49134827]
[81.57864380 173.69117737]
[81.57864380 158.69117737]
[81.57864380 143.69117737]
[81.57864380 128.69117737]
[76.52365875 116.25585938]
[77.49732208 104.82537842]
[66.18572235 114.67665863]
[67.68641663 130.12100220]
[59.79354095 143.48071289]
[45.54207611 149.61874390]
[30.41199303 146.17486572]
[20.22112274 134.47334290]
[18.88806152 119.01363373]
[26.92539787 105.74031830]
[41.24261093 99.75725555]
[56.33444214 103.36505890]
[67.64604187 93.51377869]
[73.86016846 79.86150360]
[73.86016846 64.86150360]
[73.86016846 49.86150360]
[73.86016846 34.86150360]
[73.86016846 19.86150551]
[73.86016846 4.86150503]
[70.69597626 -3.85854959]
[74.07254028 -10.55038643]
[74.48585510 -25.54469109]
[74.89916992 -40.53899384]
[67.54506683 -54.54712296]
[75.63011932 -67.05636597]
[76.04343414 -82.05067444]
[76.45674896 -97.04497528]
[59.41196060 -95.14114380]
[48.22538376 -106.64502716]
[50.30860519 -121.44097137]
[42.10438156 -133.99847412]
[33.90016174 -146.55596924]
[25.69593811 -159.11346436]
[17.49171638 -171.67095947]
[9.28749371 -184.22845459]
[-6.22991848 -187.22604370]
[-15.01344681 -200.36473083]
[-11.85197830 -215.84957886]
[1.37884235 -224.49371338]
[16.82940483 -221.16870117]
[25.33316422 -207.84722900]
[21.84499168 -192.43267822]
[30.04921341 -179.87518311]
[38.25343704 -167.31768799]
[46.45765686 -154.76019287]
[54.66188049 -142.20269775]
[62.86610413 -129.64520264]
[74.58546448 -128.63420105]
[83.79893494 -119.43180084]
[92.34606171 -131.75846863]
[100.89318085 -144.08514404]
[109.44029999 -156.41180420]
[117.98741913 -168.73846436]
[126.53454590 -181.06513977]
[123.92538452 -196.42189026]
[132.76898193 -208.80113220]
[147.42538452 -211.19392395]
[145.99336243 -227.17294312]
[157.69247437 -238.15066528]
[173.54817200 -235.70591736]
[181.39729309 -221.71411133]
[175.21868896 -206.90855408]
[159.75204468 -202.64680481]
[162.65025330 -188.08192444]
[154.15785217 -175.45916748]
[138.86120605 -172.51802063]
[130.31408691 -160.19134521]
[121.76696777 -147.86468506]
[113.21984863 -135.53800964]
[104.67272949 -123.21134949]
[96.12560272 -110.88468170]
[91.45105743 -96.63166046]
[91.03774261 -81.63735962]
[90.62442780 -66.64305115]
[98.00809479 -53.70741653]
[89.89347839 -40.12567902]
[89.48016357 -25.13137627]
[89.06684875 -10.13707161]
[88.86016846 4.86150503]
[88.86016846 19.86150551]
[88.86016846 34.86150360]
[88.86016846 49.86150360]
[88.86016846 64.86150360]
[88.86016846 79.86150360]
[116.25585938 76.52365875]
[133.73446655 104.95132446]
[145.04606628 114.80260468]
[160.79362488 113.46473694]
[172.82081604 123.71765137]
[173.99212646 139.47846985]
[163.61262512 151.39659119]
[147.84030151 152.40119934]
[136.03259277 141.89627075]
[135.19479370 126.11420441]
[123.88319397 116.26292419]
[117.05705261 119.36998749]
[103.40477753 125.58411407]
[96.57864380 128.69117737]
[96.57864380 143.69117737]
[96.57864380 158.69117737]
[96.57864380 173.69117737]
[104.31594086 187.49134827]
[96.57864380 200.21862793]
[96.57864380 215.21862793]
[102.62498474 231.05775452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 112]
[3 111]
[5 109]
[6 108]
[7 107]
[8 106]
[10 21]
[11 20]
[22 92]
[23 91]
[24 90]
[25 89]
[26 88]
[27 87]
[29 86]
[30 85]
[31 84]
[33 82]
[34 81]
[35 80]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[57 79]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
[65 71]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
