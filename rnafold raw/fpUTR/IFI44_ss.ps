%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUUGAAGCUUCAAGGCUGCUGAAUAAUUUCCUUCUCCCAUUUUGUGCCUGCCUAGCUAUCCAGACAGAGCAGCUACCCUCAGCUCUAGCUGAUACUACAGACAGUACAACAGAUCAAGAAGU\
) } def
/len { sequence length } bind def

/coor [
[-96.62908173 360.07229614]
[-120.40534973 360.43191528]
[-127.29904938 373.75396729]
[-134.19274902 387.07598877]
[-141.08644104 400.39804077]
[-147.98014832 413.72009277]
[-154.87384033 427.04214478]
[-153.57838440 443.39004517]
[-167.23989868 452.46170044]
[-181.80458069 444.92498779]
[-182.28953552 428.53302002]
[-168.19589233 420.14843750]
[-161.30218506 406.82638550]
[-154.40849304 393.50436401]
[-147.51480103 380.18231201]
[-140.62109375 366.86026001]
[-133.72740173 353.53820801]
[-139.16264343 348.37484741]
[-143.52151489 342.26507568]
[-146.64225769 335.43002319]
[-148.40800476 328.11795044]
[-148.75112915 320.59500122]
[-147.65589905 313.13574219]
[-145.15908813 306.01296997]
[-141.34881592 299.48776245]
[-136.36141968 293.80001831]
[-130.37652588 289.15948486]
[-123.61069489 285.73818970]
[-116.30947113 283.66387939]
[-108.73854065 283.01541138]
[-101.17403412 283.81967163]
[-93.89247131 286.05053711]
[-87.16064453 289.62957764]
[-76.62089539 278.95654297]
[-66.08114624 268.28350830]
[-55.54139328 257.61047363]
[-45.00164413 246.93743896]
[-51.37260818 232.48388672]
[-51.73293686 216.65420532]
[-45.99850082 201.85412598]
[-35.01366425 190.34417725]
[-20.42708969 183.89431763]
[-4.44433546 183.51190186]
[10.50562954 189.28443909]
[20.77383614 178.34989929]
[31.04204369 167.41537476]
[41.31024933 156.48085022]
[51.57845688 145.54631042]
[61.84666443 134.61178589]
[71.69544983 123.29801941]
[81.11081696 111.62108612]
[90.52619171 99.94414520]
[91.16606903 94.61554718]
[94.80113220 90.06036377]
[100.71984863 87.93270111]
[110.71002197 76.74358368]
[120.70020294 65.55446625]
[124.13483429 56.96666336]
[131.08477783 54.21374130]
[141.35299683 43.27921295]
[151.62120056 32.34468460]
[161.88940430 21.41015434]
[165.53875732 12.91137409]
[172.55569458 10.33397579]
[183.09544373 -0.33905891]
[183.16627502 -15.91573143]
[194.00712585 -26.58956528]
[208.85665894 -26.42604828]
[219.39640808 -37.09908295]
[229.93615723 -47.77211761]
[240.47590637 -58.44515228]
[251.01565552 -69.11818695]
[246.30976868 -83.68229675]
[248.92260742 -98.76313019]
[258.25378418 -110.89523315]
[272.15902710 -117.29073334]
[287.44305420 -116.47998810]
[300.59368896 -108.64929962]
[308.58898926 -95.59811401]
[309.59173584 -80.32549286]
[303.37149048 -66.34096527]
[291.35760498 -56.85807800]
[276.31079102 -54.05593491]
[261.68869019 -58.57843781]
[251.14894104 -47.90540314]
[240.60919189 -37.23236847]
[230.06944275 -26.55933380]
[219.52969360 -15.88629913]
[219.87979126 -1.03998554]
[209.34303284 9.93413258]
[193.76847839 10.20069027]
[183.22872925 20.87372589]
[172.82392883 31.67836189]
[162.55572510 42.61289215]
[152.28752136 53.54742050]
[142.01931763 64.48194885]
[131.88931274 75.54464722]
[121.89913940 86.73376465]
[111.90896606 97.92288208]
[102.20312500 109.35951996]
[92.78775787 121.03645325]
[83.37238312 132.71339417]
[82.54563904 138.09635925]
[79.93983459 142.16052246]
[76.38669586 144.43959045]
[72.78118896 144.87998962]
[62.51298523 155.81452942]
[52.24477768 166.74905396]
[41.97657394 177.68357849]
[31.70836639 188.61811829]
[21.44015884 199.55264282]
[27.69620705 212.41175842]
[29.16563606 226.60612488]
[25.69105339 240.41596985]
[17.71282196 252.17521667]
[6.21336031 260.47241211]
[-7.40379095 264.32022095]
[-21.48526382 263.27273560]
[-34.32860947 257.47720337]
[-44.86835861 268.15023804]
[-55.40810776 278.82327271]
[-65.94786072 289.49630737]
[-76.48760986 300.16934204]
[-69.63377380 323.27578735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[33 123]
[34 122]
[35 121]
[36 120]
[37 119]
[44 111]
[45 110]
[46 109]
[47 108]
[48 107]
[49 106]
[50 102]
[51 101]
[52 100]
[55 99]
[56 98]
[57 97]
[59 96]
[60 95]
[61 94]
[62 93]
[64 92]
[65 91]
[68 88]
[69 87]
[70 86]
[71 85]
[72 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
