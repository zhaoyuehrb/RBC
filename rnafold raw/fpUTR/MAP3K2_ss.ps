%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUAUUAAUAUGCUGAUCUGUUUUAUCUUCUCAGGCCAUAAAGAAUGCUGAUGGGAGAACCAUUUUCCUAAUUUUCAAAUUGUUGAGCUGUUUGCCAUA\
) } def
/len { sequence length } bind def

/coor [
[78.88050079 430.96136475]
[65.97919464 422.96630859]
[56.84035492 410.84829712]
[52.69993210 396.24621582]
[54.11788559 381.13482666]
[60.90244293 367.55786133]
[72.13605499 357.35147095]
[86.29946899 351.89599609]
[86.29946899 336.89599609]
[86.29946899 321.89599609]
[86.29946899 306.89599609]
[83.09523010 300.08728027]
[86.54000092 291.43130493]
[87.00650024 276.43856812]
[87.47299957 261.44580078]
[80.13525391 248.48406982]
[88.29799652 234.93119812]
[80.96025848 221.96945190]
[89.12300110 208.41658020]
[81.78525543 195.45483398]
[89.94799805 181.90197754]
[90.41449738 166.90922546]
[90.88099670 151.91648865]
[91.34748840 136.92373657]
[79.99800873 132.92541504]
[70.30702209 125.47834778]
[63.30850601 115.22930145]
[59.79427338 103.13004303]
[60.22582626 90.34934235]
[64.67745209 78.16007996]
[72.81730652 67.81255341]
[83.92952728 60.40632248]
[76.36228180 47.45499802]
[68.79503632 34.50366974]
[61.22779465 21.55234528]
[46.09544754 23.26463509]
[31.57686806 18.66781807]
[20.18748665 8.55832195]
[13.90058517 -5.31232166]
[13.80540657 -20.54094124]
[19.91843987 -34.48908234]
[31.18056679 -44.74015045]
[45.64055634 -49.51808548]
[60.79312134 -47.99507904]
[74.01300049 -40.43499756]
[83.00975800 -28.14768028]
[86.22465515 -13.26197147]
[83.10069275 1.64308631]
[74.17912292 13.98510265]
[81.74636078 26.93642807]
[89.31360626 39.88775253]
[96.88085175 52.83908081]
[111.81558990 54.23677063]
[121.65451813 42.91442490]
[131.49345398 31.59208107]
[141.33238220 20.26973724]
[151.17131042 8.94739246]
[161.01023865 -2.37495160]
[170.84916687 -13.69729614]
[180.68809509 -25.01963997]
[186.51351929 -40.94134903]
[203.42562866 -39.75115204]
[206.96369934 -23.17048454]
[192.01043701 -15.18071079]
[182.17150879 -3.85836673]
[172.33258057 7.46397734]
[162.49365234 18.78632164]
[152.65472412 30.10866547]
[142.81579590 41.43101120]
[132.97686768 52.75335312]
[123.13793182 64.07569885]
[133.32920837 74.37053680]
[139.35467529 87.28604126]
[140.65170288 101.24365234]
[137.22528076 114.59458160]
[129.62922668 125.81455994]
[118.88361359 133.67778015]
[106.34023285 137.39024353]
[105.87374115 152.38298035]
[105.40724182 167.37573242]
[104.94074249 182.36846924]
[112.24511719 196.40260315]
[104.11574554 208.88308716]
[111.42011261 222.91720581]
[103.29074097 235.39768982]
[110.59511566 249.43182373]
[102.46574402 261.91232300]
[101.99924469 276.90505981]
[101.53274536 291.89779663]
[101.29946899 306.89599609]
[101.29946899 321.89599609]
[101.29946899 336.89599609]
[101.29946899 351.89599609]
[115.46288300 357.35147095]
[126.69649506 367.55786133]
[133.48104858 381.13482666]
[134.89900208 396.24621582]
[130.75859070 410.84829712]
[121.61974335 422.96630859]
[108.71843719 430.96136475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 93]
[9 92]
[10 91]
[11 90]
[13 89]
[14 88]
[15 87]
[17 85]
[19 83]
[21 81]
[22 80]
[23 79]
[24 78]
[32 52]
[33 51]
[34 50]
[35 49]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
