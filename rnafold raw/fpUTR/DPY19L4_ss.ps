%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAGGAAGUGGGGGCGCGGCGGCCAGGAGCGGGCCCCCGGAGGCCGAGGGGUUCGGCGACGCGGAGGGAGGGAGAGUCUGGGCCGCGCGGGAGCCGCAGGGCGCCCUAGCCUUCGCAGAAACG\
) } def
/len { sequence length } bind def

/coor [
[65.55223846 318.69754028]
[51.44396210 313.15386963]
[40.08462143 303.11688232]
[32.84590912 289.79861450]
[30.60194206 274.80725098]
[33.62368393 259.95312500]
[41.54624939 247.02995300]
[53.41294861 237.59823608]
[67.79081726 232.79690552]
[68.16777039 217.80165100]
[68.54471588 202.80638123]
[68.92166901 187.81111145]
[69.29862213 172.81585693]
[69.67557526 157.82058716]
[70.05252075 142.82533264]
[70.42947388 127.83007050]
[87.67556000 93.02043915]
[80.78186798 79.69838715]
[73.88816833 66.37634277]
[67.08847809 60.10647202]
[66.99338531 52.63175964]
[60.43664932 39.14068222]
[53.87991333 25.64960289]
[47.32317734 12.15852451]
[40.76644135 -1.33255398]
[27.77519798 -10.36240578]
[29.17087555 -25.19147682]
[22.61413956 -38.68255615]
[16.05740356 -52.17363358]
[-1.75791240 -51.56236649]
[-18.03265381 -58.70600128]
[-29.57405663 -72.15366364]
[-34.13938904 -89.22270203]
[-30.87164497 -106.53373718]
[-20.46002579 -120.67975616]
[-28.01437378 -133.63861084]
[-35.56872177 -146.59745789]
[-43.28531647 -159.46035767]
[-51.16293335 -172.22528076]
[-59.04055405 -184.99018860]
[-67.07795715 -197.65510559]
[-82.28553009 -201.02668762]
[-90.41838837 -213.88403320]
[-87.11038208 -228.36134338]
[-95.30629730 -240.92427063]
[-103.50221252 -253.48719788]
[-111.69812775 -266.05010986]
[-119.89404297 -278.61303711]
[-135.23428345 -283.30947876]
[-140.99267578 -298.28347778]
[-132.75189209 -312.04824829]
[-116.83353424 -314.04464722]
[-105.44882202 -302.74118042]
[-107.33111572 -286.80895996]
[-99.13520050 -274.24603271]
[-90.93928528 -261.68310547]
[-82.74337006 -249.12019348]
[-74.54746246 -236.55726624]
[-59.96440506 -233.75189209]
[-51.47361755 -221.12805176]
[-54.51503754 -205.85102844]
[-48.15419006 -201.92419434]
[-46.27563858 -192.86781311]
[-38.39801788 -180.10289001]
[-30.52039909 -167.33798218]
[-24.26024437 -163.25253296]
[-22.60987091 -154.15180969]
[-15.05552292 -141.19294739]
[-7.50117540 -128.23410034]
[4.69936228 -130.52043152]
[17.03177071 -128.90664673]
[28.27767372 -123.53677368]
[37.32126236 -114.92665100]
[43.25999069 -103.91448212]
[45.49465179 -91.57917786]
[43.78979874 -79.13469696]
[38.29845047 -67.81056213]
[29.54848099 -58.73036957]
[36.10521698 -45.23929214]
[42.66195297 -31.74821281]
[55.18421555 -23.68333435]
[54.25751877 -7.88929033]
[60.81425476 5.60178852]
[67.37099457 19.09286690]
[73.92772675 32.58394623]
[80.48446655 46.07502365]
[87.21021271 59.48264694]
[94.10391235 72.80469513]
[100.99761200 86.12673950]
[112.79193878 95.39463043]
[127.36640930 98.94211578]
[141.94088745 102.48960114]
[157.17944336 98.23552704]
[167.71578979 108.76332092]
[182.29026794 112.31080627]
[196.86474609 115.85828400]
[212.44250488 110.73332214]
[224.48776245 121.86183929]
[220.60939026 137.79577637]
[204.79711914 142.14366150]
[193.31726074 130.43276978]
[178.74278259 126.88527679]
[164.16830444 123.33779144]
[149.97222900 127.84561157]
[138.39340210 117.06407928]
[123.81892395 113.51659393]
[109.24445343 109.96910858]
[103.28952026 114.52858734]
[91.37966919 123.64754486]
[85.42473602 128.20701599]
[85.04779053 143.20228577]
[84.67083740 158.19754028]
[84.29388428 173.19281006]
[83.91693115 188.18806458]
[83.53997803 203.18333435]
[83.16303253 218.17858887]
[82.78607941 233.17385864]
[96.90454865 238.69152832]
[108.28236389 248.70756531]
[115.54560852 262.01248169]
[117.81719971 276.99966431]
[114.82283783 291.85934448]
[106.92410278 304.79711914]
[95.07480621 314.25067139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 117]
[10 116]
[11 115]
[12 114]
[13 113]
[14 112]
[15 111]
[16 110]
[17 89]
[18 88]
[19 87]
[21 86]
[22 85]
[23 84]
[24 83]
[25 82]
[27 80]
[28 79]
[29 78]
[35 69]
[36 68]
[37 67]
[38 65]
[39 64]
[40 63]
[41 61]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[90 107]
[91 106]
[92 105]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
