%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUGCCCCUCCUUCCAGACCCUGGCAGCCACCAUUCUACUCUUUGCCUCUAUGAAUUUGACUAUUGUAGAUAGCUC\
) } def
/len { sequence length } bind def

/coor [
[144.42178345 170.52386475]
[130.35223389 177.62507629]
[115.19746399 181.95088196]
[99.49932861 183.34661865]
[83.81909180 181.76239014]
[68.71739197 177.25482178]
[54.73416138 169.98509216]
[42.36936951 160.21311951]
[32.06510162 148.28828430]
[24.18977547 134.63696289]
[19.02496529 119.74722290]
[16.75533295 104.15144348]
[1.76749766 103.54745483]
[-12.33303261 110.72280121]
[-24.73843193 102.47930145]
[-39.72626877 101.87531281]
[-54.71410370 101.27132416]
[-69.70193481 100.66733551]
[-85.77168274 106.07099152]
[-95.41271973 92.12513733]
[-84.68077087 79.00028229]
[-69.09794617 85.67949677]
[-54.11011505 86.28348541]
[-39.12228012 86.88747406]
[-24.13444328 87.49146271]
[-11.10594368 80.27291870]
[2.37148666 88.55961609]
[17.35932159 89.16360474]
[20.41442490 75.24024963]
[25.79736519 62.04109955]
[33.35069656 49.95222855]
[42.85348511 39.32722855]
[54.02778244 30.47687912]
[66.54674530 23.66004562]
[80.04418945 19.07611656]
[94.12534332 16.85917091]
[108.37831879 17.07405281]
[122.38623810 19.71447563]
[135.73936462 24.70320892]
[148.04714966 31.89433670]
[158.94955444 41.07752228]
[168.12773132 51.98415756]
[175.31320190 64.29523468]
[180.29580688 77.65065765]
[182.92979431 91.65978241]
[183.13812256 105.91286469]
[197.94387817 108.31903076]
[214.84013367 101.33143616]
[228.10548401 112.63644409]
[242.99612427 114.44449615]
[257.88674927 116.25254059]
[272.77737427 118.06059265]
[287.66802979 119.86864471]
[302.55865479 121.67669678]
[317.44927979 123.48474121]
[327.21411133 111.54105377]
[341.89309692 106.79438019]
[356.80224609 110.75936890]
[367.18408203 122.17080688]
[369.72579956 137.38734436]
[363.61636353 151.55345154]
[350.80526733 160.14875793]
[335.38049316 160.43054199]
[322.26400757 152.30888367]
[315.64123535 138.37538147]
[300.75061035 136.56732178]
[285.85998535 134.75927734]
[270.96932983 132.95123291]
[256.07870483 131.14317322]
[241.18807983 129.33512878]
[226.29743958 127.52707672]
[216.41664124 134.80130005]
[203.84013367 133.23046875]
[195.53770447 123.12478638]
[180.73194885 120.71861267]
[175.38862610 135.54522705]
[167.34986877 149.10096741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 28]
[13 27]
[15 25]
[16 24]
[17 23]
[18 22]
[46 75]
[47 74]
[49 71]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
