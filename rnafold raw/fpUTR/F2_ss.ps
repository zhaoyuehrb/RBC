%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUAGUUCAACAUUAACCCAGAGGGGUCAGGACAGACAAUUCCUCAGUGACCCAGGAGCUGACACACU\
) } def
/len { sequence length } bind def

/coor [
[103.33253479 267.38732910]
[113.12835693 254.98500061]
[111.14305115 240.11697388]
[109.15774536 225.24893188]
[107.17243958 210.38088989]
[105.18712616 195.51284790]
[103.20182037 180.64482117]
[101.21651459 165.77677917]
[99.23120117 150.90873718]
[97.24589539 136.04069519]
[89.92608643 134.71359253]
[83.03298187 131.91610718]
[76.85855865 127.76672363]
[71.66435242 122.44121552]
[67.67037201 116.16515350]
[65.04579163 109.20437622]
[63.90178680 101.85372162]
[64.28681183 94.42455292]
[66.18456268 87.23154449]
[69.51464844 80.57937622]
[74.13602448 74.74981689]
[79.85292816 69.98979187]
[86.42321014 66.50092316]
[93.56858063 64.43099213]
[100.98635864 63.86768341]
[108.36236572 64.83484650]
[114.78506470 51.27944183]
[121.20776367 37.72404099]
[127.63046265 24.16863823]
[134.05316162 10.61323643]
[140.47586060 -2.94216609]
[145.67539978 -17.01216316]
[149.61108398 -31.48663712]
[153.54676819 -45.96110916]
[143.72149658 -57.97125244]
[142.86567688 -73.46470642]
[151.30839539 -86.48393250]
[165.80325317 -92.02275848]
[180.77668762 -87.95140839]
[190.47109985 -75.83538818]
[191.15879822 -60.33355713]
[182.57533264 -47.40668869]
[168.02124023 -42.02542496]
[164.08555603 -27.55095100]
[160.14987183 -13.07647800]
[161.75587463 -10.40451813]
[162.21702576 -6.83833170]
[161.14555359 -2.88931274]
[158.37950134 0.78560114]
[154.03126526 3.48053360]
[147.60856628 17.03593636]
[141.18586731 30.59133720]
[134.76316833 44.14673996]
[128.34046936 57.70214081]
[121.91777039 71.25754547]
[135.40217590 92.70594788]
[131.49427795 117.73775482]
[112.11393738 134.05538940]
[114.09924316 148.92343140]
[116.08454895 163.79147339]
[118.06985474 178.65951538]
[120.05516815 193.52754211]
[122.04047394 208.39558411]
[124.02577972 223.26362610]
[126.01109314 238.13165283]
[127.99639893 252.99969482]
[140.70312500 262.39727783]
[142.96038818 278.03955078]
[133.42900085 290.64620972]
[117.76374054 292.73797607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 66]
[3 65]
[4 64]
[5 63]
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[32 45]
[33 44]
[34 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
