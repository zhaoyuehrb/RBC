%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUCGCCACUUCCGGUGACCAGAGGUAGGGAAGGAAACAAUCCCGACCCGGAGUGGACAGGUGAGGAGGGGAGGACUUGCCUCGCCGAGGCCGCUGCGAGGAGCGUGCCCAAGGGCGAAGGUCCAGGGAACCCGGCUCCCGCGCACCGAAGACGGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[88.93645477 343.24923706]
[75.79498291 335.29956055]
[68.40302277 321.83648682]
[68.74898529 306.48147583]
[76.73979950 293.36499023]
[90.22599030 286.01528931]
[90.51686096 271.01809692]
[90.80773163 256.02090454]
[81.50540924 241.16499329]
[91.08623505 225.46623230]
[91.08623505 210.46623230]
[91.08623505 195.46623230]
[91.08623505 180.46623230]
[87.92594147 173.74427795]
[91.23450470 165.17607117]
[91.52536774 150.17889404]
[91.81623840 135.18170166]
[92.10710907 120.18453217]
[76.20523834 106.17456818]
[78.80073547 82.49440002]
[64.02862549 85.09912109]
[56.07454681 89.69190216]
[48.94500351 87.60822296]
[40.90336227 92.04589081]
[33.81556702 89.82435608]
[18.95356178 91.85433197]
[4.09155512 93.88430023]
[-8.53456211 103.41801453]
[-22.19184685 97.47428894]
[-37.05385208 99.50426483]
[-51.91585922 101.53423309]
[-66.77786255 103.56420135]
[-73.19204712 117.59494781]
[-86.18592834 125.91135406]
[-101.61320496 125.85968781]
[-114.55108643 117.45644379]
[-120.87115479 103.38304901]
[-118.55668640 88.13028717]
[-108.34622192 76.56525421]
[-93.49788666 72.37831116]
[-78.74973297 76.90548706]
[-68.80783844 88.70219421]
[-53.94582748 86.67222595]
[-39.08382416 84.64225769]
[-24.22181702 82.61228943]
[-12.65872955 73.22377014]
[2.06158566 79.02229309]
[16.92359161 76.99232483]
[31.78559875 74.96235657]
[46.62722397 72.78837585]
[61.42390060 70.32701111]
[76.19601440 67.72228241]
[84.31674957 55.11063385]
[80.57513428 40.58478546]
[76.83351135 26.05893707]
[73.09189606 11.53308773]
[69.35028076 -2.99276209]
[53.55417252 -8.97479725]
[44.51047897 -23.04380417]
[45.60552979 -39.56666565]
[56.21219635 -52.06612396]
[52.18960571 -66.51668549]
[48.16701508 -80.96724701]
[44.14442825 -95.41781616]
[40.12183762 -109.86837769]
[36.09925079 -124.31893921]
[32.07666016 -138.76950073]
[27.91414452 -153.18038940]
[23.61209679 -167.55023193]
[19.31004906 -181.92007446]
[5.28189039 -189.19923401]
[0.58934957 -204.29081726]
[8.01642799 -218.24122620]
[23.15677071 -222.77394104]
[37.02788162 -215.19979858]
[41.40027618 -200.01237488]
[33.67988968 -186.22212219]
[37.98194122 -171.85227966]
[42.28398895 -157.48243713]
[47.23939514 -151.94926453]
[46.52722168 -142.79208374]
[50.54981232 -128.34152222]
[54.57240295 -113.89096832]
[58.59498978 -99.44039917]
[62.61758041 -84.98983765]
[66.64016724 -70.53927612]
[70.66275787 -56.08871078]
[83.57604980 -52.59370804]
[93.14405060 -43.08929443]
[96.78314209 -29.99069405]
[93.43606567 -16.70262909]
[83.87612915 -6.73437929]
[87.61774445 7.79147005]
[91.35936737 22.31731987]
[95.10098267 36.84317017]
[98.84259796 51.36901855]
[110.96073151 60.20931244]
[125.93535614 59.33714294]
[140.90997314 58.46496964]
[149.34346008 54.82666016]
[156.18289185 57.72393799]
[171.17161560 57.14230728]
[186.16033936 56.56067657]
[201.14904785 55.97904587]
[216.13777161 55.39741516]
[231.10322571 54.38008881]
[246.03277588 52.92792511]
[259.01907349 43.89096069]
[272.43560791 50.35977936]
[287.36514282 48.90761566]
[302.29470825 47.45545197]
[311.10369873 37.99000931]
[323.60177612 37.11246872]
[333.02261353 44.74927902]
[347.97750854 43.58689117]
[362.93240356 42.42450333]
[377.88726807 41.26211929]
[391.09783936 31.54547882]
[406.00732422 38.37477112]
[407.27813721 54.72460556]
[393.60296631 63.77567291]
[379.04968262 56.21701431]
[364.09478760 57.37939835]
[349.13989258 58.54178619]
[334.18499756 59.70417023]
[320.29940796 70.40100861]
[303.74685669 62.38499451]
[288.81732178 63.83715820]
[273.88778687 65.28932190]
[261.96932983 74.22241211]
[247.48493958 67.85746765]
[232.55538940 69.30963135]
[230.02693176 71.83338928]
[226.13124084 73.23309326]
[221.42176819 72.87098694]
[216.71940613 70.38613129]
[201.73068237 70.96776581]
[186.74195862 71.54939270]
[171.75325012 72.13102722]
[156.76452637 72.71265411]
[141.78215027 73.43959045]
[126.80752563 74.31176758]
[111.83290100 75.18393707]
[124.54500580 101.36322021]
[107.10429382 120.47540283]
[106.81342316 135.47257996]
[106.52255249 150.46975708]
[106.23168182 165.46693420]
[106.08623505 180.46623230]
[106.08623505 195.46623230]
[106.08623505 210.46623230]
[106.08623505 225.46623230]
[114.65441132 235.15022278]
[114.31788635 247.67453003]
[105.80490875 256.31179810]
[105.51403809 271.30895996]
[105.22316742 286.30615234]
[118.41422272 294.17327881]
[125.89043427 307.58975220]
[125.64073944 322.94662476]
[117.73230743 336.11294556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 157]
[7 156]
[8 155]
[10 152]
[11 151]
[12 150]
[13 149]
[15 148]
[16 147]
[17 146]
[18 145]
[20 52]
[21 51]
[23 50]
[25 49]
[26 48]
[27 47]
[29 45]
[30 44]
[31 43]
[32 42]
[53 96]
[54 95]
[55 94]
[56 93]
[57 92]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
[67 81]
[68 79]
[69 78]
[70 77]
[97 143]
[98 142]
[99 141]
[101 140]
[102 139]
[103 138]
[104 137]
[105 136]
[106 132]
[107 131]
[109 129]
[110 128]
[111 127]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
