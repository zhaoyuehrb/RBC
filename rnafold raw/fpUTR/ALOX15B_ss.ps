%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCACUGGGCUUGGAGUCAGUGGCAAUAACCAGGGGCAAUAACCAGGCGUGUCCCAGGGGGGAGCCCCGCUCUGCAGCCCUGUGCGCCGUAGAGAGCUGGACUUAGGCUGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[-113.76926422 235.03579712]
[-126.75964355 242.53579712]
[-139.75003052 250.03579712]
[-152.74040222 257.53579712]
[-158.70436096 264.63055420]
[-166.18177795 265.05740356]
[-179.36883545 272.20593262]
[-192.55589294 279.35446167]
[-205.74295044 286.50299072]
[-210.36270142 303.31027222]
[-225.38217163 311.47372437]
[-241.35792542 306.41152954]
[-254.34831238 313.91152954]
[-267.33868408 321.41152954]
[-267.25845337 336.77023315]
[-274.88223267 350.10339355]
[-288.15930176 357.82449341]
[-303.51815796 357.85659790]
[-316.82736206 350.19104004]
[-324.50680542 336.88986206]
[-324.49075317 321.53097534]
[-316.78353882 308.24584961]
[-303.45834351 300.60815430]
[-288.09957886 300.67233276]
[-274.83868408 308.42117310]
[-261.84832764 300.92117310]
[-248.85792542 293.42117310]
[-247.27000427 280.55786133]
[-238.40087891 270.84048462]
[-225.35386658 268.00433350]
[-212.89147949 273.31594849]
[-199.70442200 266.16741943]
[-186.51736450 259.01889038]
[-173.33030701 251.87034607]
[-160.24040222 244.54542542]
[-147.25003052 237.04542542]
[-134.25964355 229.54542542]
[-121.26926422 222.04542542]
[-122.48772430 207.17999268]
[-117.10896301 193.20220947]
[-106.14984131 182.90373230]
[-91.74737549 178.36622620]
[-76.74209595 180.54077148]
[-64.11790466 189.04905701]
[-51.12752151 181.54905701]
[-38.13713837 174.04905701]
[-25.14675903 166.54905701]
[-17.99326897 153.48472595]
[-2.17331815 153.28533936]
[1.43059051 136.91883850]
[16.01006508 127.99331665]
[32.87547684 132.39613342]
[45.65981674 124.55007172]
[58.44415665 116.70401001]
[71.22849274 108.85794830]
[71.52079010 90.24308777]
[82.70489502 75.35974121]
[100.50348663 69.90000916]
[104.48294067 55.43751144]
[108.46240234 40.97500992]
[112.44186401 26.51251030]
[107.78255463 10.78918743]
[119.26445007 -0.91969961]
[135.07595825 3.43094897]
[138.95156860 19.36555862]
[126.90435791 30.49197006]
[122.92490387 44.95446777]
[118.94544220 59.41696930]
[114.96598816 73.87947083]
[121.42929840 78.85649109]
[126.31909943 85.38603973]
[140.83372498 81.60109711]
[155.34834290 77.81616211]
[169.86296082 74.03121948]
[184.37757874 70.24628448]
[198.89221191 66.46134949]
[210.29347229 55.49222946]
[224.56126404 59.76770020]
[239.07588196 55.98276138]
[245.61569214 41.77836227]
[259.77789307 35.14764786]
[274.87548828 39.22143936]
[283.77990723 52.07621765]
[282.28674316 67.64234924]
[271.10101318 78.56998444]
[255.50425720 79.69942474]
[242.86082458 70.49738312]
[228.34620667 74.28231812]
[217.98310852 84.98071289]
[202.67713928 80.97596741]
[188.16252136 84.76091003]
[173.64790344 88.54584503]
[159.13328552 92.33078003]
[144.61865234 96.11572266]
[130.10403442 99.90065765]
[126.90466309 113.50563049]
[117.90638733 124.19966888]
[105.04866791 129.67782593]
[91.10278320 128.75938416]
[79.07455444 121.64228821]
[66.29021454 129.48835754]
[53.50587845 137.33441162]
[40.72154236 145.18048096]
[39.09033966 158.62902832]
[30.11064911 168.50999451]
[17.26058578 171.33218384]
[5.32668209 166.27572632]
[-2.75596762 179.87651062]
[-17.64675903 179.53944397]
[-30.63714027 187.03944397]
[-43.62752151 194.53944397]
[-56.61790085 202.03944397]
[-55.56159592 217.22647095]
[-61.18102264 231.30868530]
[-72.31185913 241.51284790]
[-86.71016693 245.85447693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[6 34]
[7 33]
[8 32]
[9 31]
[12 27]
[13 26]
[14 25]
[44 112]
[45 111]
[46 110]
[47 109]
[49 107]
[52 103]
[53 102]
[54 101]
[55 100]
[58 69]
[59 68]
[60 67]
[61 66]
[71 95]
[72 94]
[73 93]
[74 92]
[75 91]
[76 90]
[78 88]
[79 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
