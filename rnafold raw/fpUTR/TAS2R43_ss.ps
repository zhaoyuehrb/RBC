%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGCGAGACCACGAACCCACCUGCAGGAACCAAUUCCGGACACAACACCAGCAUUUAAAAAAAUUUUUUUUGUCUGUUCAGAC\
) } def
/len { sequence length } bind def

/coor [
[161.37313843 401.29904175]
[172.27217102 390.38049316]
[168.97297668 375.74783325]
[165.67378235 361.11514282]
[162.10475159 346.54592896]
[158.26710510 332.04516602]
[154.42945862 317.54437256]
[150.59182739 303.04360962]
[146.75418091 288.54281616]
[131.46858215 289.38854980]
[116.33060455 287.06945801]
[101.98873138 281.68252563]
[89.05782318 273.45623779]
[78.09275055 262.74087524]
[69.56458282 249.99356079]
[63.84038162 235.75877380]
[61.16735840 220.64511108]
[61.66223526 205.29927063]
[65.30612946 190.37834167]
[71.94526672 176.52171326]
[81.29747772 164.32365417]
[92.96417999 154.30783081]
[106.44736481 146.90480042]
[102.07651520 132.55574036]
[97.70567322 118.20666504]
[79.82984161 111.33663940]
[74.51751709 88.57905579]
[64.41208649 77.49391937]
[54.30664825 66.40879059]
[44.20121384 55.32365417]
[28.41825676 50.87054062]
[24.64609909 34.91112518]
[36.76521301 23.86309242]
[52.30849838 29.09170723]
[55.28635025 45.21821976]
[65.39178467 56.30335236]
[75.49721527 67.38848877]
[85.60265350 78.47361755]
[99.95172119 74.10277557]
[102.16124725 59.26639938]
[90.99417877 48.49253082]
[88.32571411 33.20662308]
[95.18193054 19.28642464]
[108.92647552 12.08453465]
[124.27428436 14.37022686]
[135.32380676 25.26460457]
[137.82629395 40.57855988]
[130.81947327 54.42356110]
[116.99761963 61.47592545]
[114.78809357 76.31230164]
[123.06500244 98.16684723]
[112.05474091 113.83582306]
[116.42558289 128.18489075]
[120.79643250 142.53395081]
[135.45626831 141.15586853]
[150.09516907 142.69371033]
[164.13902283 147.08518982]
[177.03744507 154.15614319]
[188.28535461 163.62741089]
[197.44273376 175.12591553]
[204.15187073 188.19931030]
[208.15129089 202.33378601]
[209.28598022 216.97427368]
[207.51342773 231.54626465]
[202.90509033 245.47827148]
[195.64366150 258.22433472]
[186.01574707 269.28540039]
[174.40054321 278.22879028]
[161.25495911 284.70516968]
[165.09260559 299.20596313]
[168.93023682 313.70672607]
[172.76788330 328.20751953]
[176.60552979 342.70828247]
[181.94664001 350.42175293]
[180.30645752 357.81594849]
[183.60565186 372.44863892]
[186.90484619 387.08129883]
[201.43473816 392.26644897]
[210.83665466 404.49786377]
[212.11047363 419.87255859]
[204.84971619 433.48449707]
[191.37127686 440.99020386]
[175.97607422 439.99456787]
[163.57666016 430.81536865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 77]
[3 76]
[4 75]
[5 73]
[6 72]
[7 71]
[8 70]
[9 69]
[23 54]
[24 53]
[25 52]
[27 38]
[28 37]
[29 36]
[30 35]
[39 50]
[40 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
