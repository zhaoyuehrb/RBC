%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUUUGAUAAUUGGCCUCGACCCUCCUCACCUACUCCUUCCUUAGCCAAAUCUACUGAGAAAAGACUUGGAGGGGGACUCUCCCUCCACCCCUCCGUGGGCAAACUCCUGACGGACUGUAAGACCUUGGCCGCCCUCUCGCCUGGCCUGGGUCCCUCGAAUGA\
) } def
/len { sequence length } bind def

/coor [
[21.32464790 196.56776428]
[14.17266464 199.44754028]
[6.59024048 200.78044128]
[-1.09248996 200.51316833]
[-8.54200935 198.66203308]
[-15.43589687 195.31196594]
[-21.47677994 190.61270142]
[-26.40516853 184.77203369]
[-40.23604965 190.57778931]
[-54.06692886 196.38354492]
[-58.41041565 201.46235657]
[-63.85410309 203.27850342]
[-68.53273773 202.13630676]
[-82.57341003 207.41452026]
[-96.61408234 212.69274902]
[-110.65475464 217.97096252]
[-124.69541931 223.24917603]
[-122.33842468 238.11622620]
[-123.02273560 253.15341187]
[-126.72033691 267.74493408]
[-133.27980042 281.29330444]
[-142.43254089 293.24371338]
[-153.80375671 303.10678101]
[-166.92779541 310.47866821]
[-181.26722717 315.05746460]
[-196.23487854 316.65567017]
[-211.21783447 315.20788574]
[-225.60253906 310.77331543]
[-238.79994202 303.53363037]
[-250.26963806 293.78524780]
[-259.54196167 281.92736816]
[-266.23715210 268.44555664]
[-270.08111572 253.89192200]
[-270.91644287 238.86238098]
[-268.70886230 223.97239685]
[-263.54882812 209.83171082]
[-255.64764404 197.01937866]
[-245.32882690 186.06004333]
[-233.01493835 177.40249634]
[-219.21023560 171.40124512]
[-204.47999573 168.30206299]
[-189.42742920 168.23182678]
[-174.66889954 171.19343567]
[-160.80880737 177.06561279]
[-148.41467285 185.60787964]
[-137.99404907 196.47044373]
[-129.97363281 209.20849609]
[-115.93296814 203.93028259]
[-101.89229584 198.65206909]
[-87.85162354 193.37385559]
[-73.81095123 188.09564209]
[-59.87268066 182.55265808]
[-46.04180145 176.74690247]
[-32.21092224 170.94114685]
[-29.48556519 148.12599182]
[-13.65785408 131.30590820]
[9.18338013 127.15741730]
[30.12816429 137.44218445]
[42.61988831 129.13816833]
[55.11161423 120.83413696]
[67.60333252 112.53011322]
[63.67297363 105.23783112]
[61.46202469 96.80741882]
[61.28126907 87.66107178]
[63.33468246 78.30194855]
[67.69916534 69.28665924]
[74.31144714 61.19286346]
[82.96323395 54.58383942]
[93.30533600 49.97216415]
[104.86079407 47.78467941]
[103.16117859 32.88127899]
[101.46157074 17.97788048]
[99.76195526 3.07448125]
[98.06233978 -11.82891750]
[96.36272430 -26.73231697]
[94.66310883 -41.63571548]
[92.96349335 -56.53911591]
[91.26387787 -71.44251251]
[83.46177673 -86.49454498]
[95.76573944 -98.15854645]
[110.37998199 -89.56435394]
[106.16727448 -73.14212799]
[107.86688995 -58.23873138]
[109.56650543 -43.33533096]
[111.26612091 -28.43193245]
[112.96573639 -13.52853298]
[114.66535187 1.37486613]
[116.36496735 16.27826500]
[118.06458282 31.18166542]
[119.76419830 46.08506393]
[126.73332977 48.85655212]
[132.27653503 34.91837311]
[146.21463013 40.46181488]
[140.67160034 54.39952850]
[147.64073181 57.17102051]
[159.11109924 47.50506210]
[170.58146667 37.83910751]
[182.05183411 28.17315292]
[193.52220154 18.50719643]
[204.90058899 8.73313618]
[216.18598938 -1.14815521]
[227.47137451 -11.02944660]
[228.26724243 -26.81368256]
[240.04701233 -37.34993362]
[255.82196045 -36.38722610]
[266.23306274 -24.49671936]
[265.10363770 -8.73283958]
[253.10372925 1.55198324]
[237.35267639 0.25594613]
[226.06727600 10.13723755]
[214.78189087 20.01852798]
[211.80786133 26.82072830]
[203.18815613 29.97756386]
[191.71778870 39.64352036]
[180.24742126 49.30947495]
[168.77705383 58.97542953]
[157.30670166 68.64138794]
[157.80311584 76.12493896]
[170.26853943 67.78147888]
[183.72694397 74.40502930]
[184.72006226 89.37211609]
[172.25480652 97.71581268]
[158.79597473 91.09204102]
[159.29238892 98.57559967]
[171.93902588 106.64173889]
[184.58566284 114.70788574]
[197.23229980 122.77402496]
[209.87892151 130.84016418]
[225.67465210 131.73773193]
[232.24444580 145.10511780]
[244.89108276 153.17126465]
[257.53771973 161.23739624]
[270.18435669 169.30354309]
[282.98135376 177.12892151]
[295.92416382 184.71072388]
[311.15017700 180.47465515]
[324.87066650 188.31835938]
[328.94552612 203.58830261]
[320.95718384 217.22509766]
[305.64501953 221.13827515]
[292.09344482 213.00621033]
[288.34237671 197.65353394]
[275.39956665 190.07173157]
[270.59503174 190.40432739]
[265.53796387 187.69174194]
[262.11819458 181.95018005]
[249.47157288 173.88403320]
[236.82493591 165.81788635]
[224.17829895 157.75175476]
[209.28715515 157.43113708]
[201.81277466 143.48680115]
[189.16615295 135.42065430]
[176.51951599 127.35451508]
[163.87287903 119.28837585]
[151.22625732 111.22222900]
[112.64468384 141.71386719]
[75.90736389 125.02183533]
[63.41563797 133.32586670]
[50.92391586 141.62988281]
[38.43218994 149.93391418]
[40.53592300 157.43359375]
[41.03878403 165.19515991]
[39.92360687 172.88121033]
[37.24346924 180.15858459]
[33.11917114 186.71286011]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 54]
[9 53]
[10 52]
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[58 160]
[59 159]
[60 158]
[61 157]
[70 90]
[71 89]
[72 88]
[73 87]
[74 86]
[75 85]
[76 84]
[77 83]
[78 82]
[95 117]
[96 116]
[97 115]
[98 114]
[99 113]
[100 111]
[101 110]
[102 109]
[124 155]
[125 154]
[126 153]
[127 152]
[128 151]
[130 149]
[131 148]
[132 147]
[133 146]
[134 143]
[135 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
