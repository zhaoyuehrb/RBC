%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGGCCCAGGUCUCCGAGCACUCGGGCCUGCGCCUGGGUGCUGGCAGCCUUGCCGCUCGCUGUGCCAGUGCCUGGUGGGCCGUUCUGGCCAUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[77.53020477 97.57992554]
[83.88760376 82.53962708]
[69.77439880 77.45855713]
[55.66118240 72.37748718]
[41.54797363 67.29641724]
[27.43476105 62.21535110]
[13.32154942 57.13428116]
[1.22154486 61.93056107]
[-10.49985600 57.27353287]
[-15.66666985 46.21126556]
[-29.61331749 40.68939972]
[-43.55996323 35.16753006]
[-57.50661087 29.64566231]
[-71.86848450 35.67678452]
[-85.93370819 29.87814903]
[-91.59494781 16.14913368]
[-105.54159546 10.62726498]
[-114.85733032 10.35344887]
[-119.83514404 4.70668602]
[-133.60145569 -1.25053227]
[-147.36778259 -7.20775080]
[-161.13409424 -13.16496944]
[-174.90042114 -19.12218666]
[-188.66673279 -25.07940483]
[-202.43305969 -31.03662491]
[-216.19937134 -36.99384308]
[-229.96569824 -42.95106125]
[-243.73200989 -48.90827942]
[-257.49832153 -54.86549759]
[-273.71774292 -52.44415283]
[-283.71121216 -65.44655609]
[-277.19833374 -80.49694824]
[-260.87896729 -82.11277771]
[-251.54112244 -68.63182068]
[-237.77479553 -62.67459869]
[-224.00848389 -56.71738052]
[-210.24215698 -50.76016235]
[-196.47584534 -44.80294418]
[-182.70951843 -38.84572601]
[-168.94320679 -32.88850784]
[-155.17687988 -26.93128777]
[-141.41056824 -20.97406960]
[-127.64424133 -15.01685143]
[-113.87792206 -9.05963326]
[-100.01972961 -3.31938195]
[-86.07308197 2.20248652]
[-72.54804993 -3.93014574]
[-58.32550812 1.47113872]
[-51.98474503 15.69901466]
[-38.03809738 21.22088242]
[-24.09144974 26.74275208]
[-10.14480209 32.26461792]
[6.95946455 28.70176315]
[18.40261841 43.02107239]
[32.51583099 48.10213852]
[46.62903976 53.18320847]
[60.74225235 58.26427841]
[74.85546112 63.34534454]
[88.96867371 68.42641449]
[103.87808990 66.78040314]
[116.54300690 58.74300003]
[129.20793152 50.70559692]
[141.87284851 42.66819382]
[154.53776550 34.63079071]
[164.67140198 21.03866768]
[180.53759766 27.01359749]
[179.18838501 43.91377258]
[162.57516479 47.29571152]
[149.91024780 55.33311462]
[137.24533081 63.37051392]
[124.58041382 71.40792084]
[111.91548920 79.44532013]
[119.92203522 92.07395935]
[118.33469391 105.43400574]
[129.89239502 114.99536896]
[141.45008850 124.55673218]
[153.00779724 134.11808777]
[168.53045654 132.82020569]
[180.11540222 142.68142700]
[181.25708008 157.48793030]
[192.81477356 167.04928589]
[204.37246704 176.61064148]
[215.93017578 186.17201233]
[231.97305298 186.09979248]
[241.91944885 198.68743896]
[238.13931274 214.27877808]
[223.53245544 220.91348267]
[209.30400085 213.50196838]
[206.36880493 197.72970581]
[194.81111145 188.16835022]
[183.25341797 178.60697937]
[171.69570923 169.04562378]
[156.93756104 170.69863892]
[145.08020020 161.16670227]
[143.44642639 145.67578125]
[131.88873291 136.11442566]
[120.33103943 126.55307007]
[108.77333832 116.99170685]
[95.14720154 119.69281006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 59]
[3 58]
[4 57]
[5 56]
[6 55]
[7 54]
[10 52]
[11 51]
[12 50]
[13 49]
[16 46]
[17 45]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
[74 98]
[75 97]
[76 96]
[77 95]
[80 92]
[81 91]
[82 90]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
