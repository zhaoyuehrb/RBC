%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGACUCCAGAUAUAGGAUCACUCCAUGCCAUCAAGAAAGUUGAUGCUAUUGGGCCCAUCUCAAGCUGAUCUUGGCACCUCUCAUGCUCUGCUCUCUUCAACCAGACCUCUACAUUCCAUUUUGGAAGAAGACUAAAA\
) } def
/len { sequence length } bind def

/coor [
[314.76419067 285.42587280]
[303.24951172 275.81274414]
[291.73483276 266.19961548]
[280.22018433 256.58648682]
[268.70550537 246.97334290]
[254.33183289 250.78588867]
[240.30339050 245.33914185]
[232.07595825 232.52655029]
[232.98101807 217.14840698]
[221.46633911 207.53527832]
[209.95167542 197.92214966]
[198.43699646 188.30900574]
[186.81520081 178.82566833]
[175.08772278 169.47332764]
[163.36026001 160.12097168]
[148.58554077 158.23492432]
[142.62026978 143.58139038]
[130.89279175 134.22903442]
[119.16532135 124.87669373]
[107.90423584 131.38786316]
[94.58927917 132.89036560]
[81.41171265 128.82299805]
[70.66559601 119.56733704]
[64.34938812 106.43286896]
[63.79877853 91.47707367]
[49.10364914 88.46823120]
[34.40851593 85.45938873]
[22.12042236 97.02510071]
[5.52811480 98.99853516]
[-8.84213829 90.80183411]
[-15.45575523 75.81864166]
[-30.21469879 73.14028931]
[-44.97364426 70.46192932]
[-59.73258591 67.78357697]
[-74.49153137 65.10522461]
[-89.25047302 62.42687225]
[-103.20366669 70.34443665]
[-118.03930664 64.23842621]
[-122.37675476 48.79284286]
[-112.88869476 35.85621643]
[-96.85355377 35.35242462]
[-86.57212067 47.66792679]
[-71.81317902 50.34628296]
[-57.05423355 53.02463531]
[-42.29528809 55.70298767]
[-27.53634644 58.38134003]
[-12.77740192 61.05969620]
[-3.98832345 50.94971848]
[8.75769901 46.48679352]
[22.14719772 48.94502258]
[32.64271545 57.78424835]
[37.41735840 70.76425934]
[52.11248779 73.77310181]
[66.80761719 76.78193665]
[77.53255463 66.29500580]
[74.85420227 51.53606415]
[72.17584991 36.77712250]
[58.43727493 22.09991837]
[65.53707886 4.16632318]
[62.19926071 -10.45759583]
[58.86144638 -25.08151436]
[44.86439133 -32.05406189]
[38.67132950 -46.41303253]
[43.20643234 -61.37855530]
[56.32836533 -69.88436890]
[71.84135437 -67.91429138]
[82.42063904 -56.39852524]
[83.07099915 -40.77447128]
[73.48536682 -28.41932869]
[76.82318115 -13.79540920]
[80.16099548 0.82850903]
[89.35030365 5.52294588]
[94.50769043 14.71446896]
[93.69268799 25.44375610]
[86.93479156 34.09876633]
[89.61315155 48.85771179]
[92.29150391 63.61665726]
[112.05899048 66.35157776]
[126.80230713 78.60080719]
[132.61047363 96.03920746]
[128.51766968 113.14921570]
[140.24513245 122.50156403]
[151.97261047 131.85391235]
[167.58615112 134.40892029]
[172.71260071 148.39350891]
[184.44007874 157.74584961]
[196.16754150 167.09820557]
[204.90547180 170.03726196]
[208.05014038 176.79434204]
[219.56480408 186.40747070]
[231.07948303 196.02059937]
[242.59414673 205.63374329]
[257.56353760 201.99734497]
[271.63931274 207.80479431]
[279.50338745 220.63523865]
[278.31863403 235.45867920]
[289.83331299 245.07180786]
[301.34799194 254.68493652]
[312.86264038 264.29806519]
[324.37731934 273.91122437]
[335.91311646 266.51248169]
[349.05538940 262.68707275]
[362.72610474 262.73883057]
[375.80667114 266.65396118]
[387.22952271 274.10296631]
[396.06515503 284.46829224]
[401.59793091 296.89556885]
[403.38378906 310.36407471]
[401.28613281 323.77044678]
[395.48602295 336.01919556]
[406.55780029 346.13925171]
[417.62960815 356.25930786]
[433.03588867 359.85885620]
[437.21002197 374.15661621]
[445.73043823 377.67678833]
[448.41342163 384.63009644]
[459.25534058 394.99606323]
[470.09729004 405.36199951]
[480.93920898 415.72793579]
[491.78112793 426.09387207]
[507.40795898 432.66943359]
[505.41531372 449.50588989]
[488.68524170 452.25189209]
[481.41519165 436.93579102]
[470.57327271 426.56985474]
[459.73135376 416.20391846]
[448.88940430 405.83798218]
[438.04748535 395.47204590]
[427.08993530 385.22839355]
[412.47558594 382.35272217]
[407.50955200 367.33111572]
[396.43774414 357.21105957]
[385.36596680 347.09100342]
[370.99942017 354.97421265]
[354.78161621 357.49639893]
[338.64944458 354.33877563]
[324.53561401 345.86190796]
[314.13708496 333.06466675]
[308.71096802 317.46667480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 97]
[5 96]
[9 92]
[10 91]
[11 90]
[12 89]
[13 87]
[14 86]
[15 85]
[17 83]
[18 82]
[19 81]
[25 54]
[26 53]
[27 52]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[55 77]
[56 76]
[57 75]
[59 71]
[60 70]
[61 69]
[110 133]
[111 132]
[112 131]
[114 129]
[116 128]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
