%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAGUGCUAGAAUUUUACUUUCAGAAGGACCAGUACCCGAACUACGACCAGCGACUGAAUCUGGCGGAG\
) } def
/len { sequence length } bind def

/coor [
[47.28492737 332.58117676]
[32.05743408 330.57644653]
[19.88218117 321.21380615]
[14.03425312 307.01177979]
[16.08671188 291.79064941]
[25.48745728 279.64480591]
[39.70773315 273.84143066]
[41.66562653 258.96975708]
[43.62351990 244.09808350]
[45.58141327 229.22640991]
[47.53930664 214.35473633]
[49.49720001 199.48306274]
[51.45509338 184.61138916]
[38.65505981 192.43182373]
[23.68004227 191.56646729]
[11.86603546 182.32366943]
[7.42268372 167.99690247]
[11.93327141 153.69114685]
[23.79055786 144.50393677]
[38.76947403 143.70892334]
[51.53263474 151.58938599]
[57.53218842 165.33729553]
[64.45841980 152.03213501]
[71.38465118 138.72697449]
[78.31087494 125.42181396]
[85.23710632 112.11665344]
[80.98023987 98.26654816]
[87.67075348 85.41418457]
[101.45773315 80.95712280]
[91.66815948 68.14845276]
[88.38175201 52.42440414]
[92.19440460 36.87882614]
[102.31012726 24.54858017]
[116.70669556 17.82027817]
[132.53970337 17.96842003]
[138.87898254 4.37380314]
[145.21824646 -9.22081375]
[138.44598389 -23.31586456]
[142.36831665 -38.45354462]
[155.13323975 -47.48630142]
[170.71354675 -46.14914703]
[181.75270081 -35.07344437]
[183.03834534 -19.48880005]
[173.96342468 -6.75380707]
[158.81286621 -2.88153958]
[152.47360229 10.71307755]
[146.13432312 24.30769348]
[155.52471924 34.73912430]
[160.18948364 48.02308655]
[159.37763977 62.12264252]
[153.18075562 74.86203003]
[142.52395630 84.26240540]
[129.02803040 88.84919739]
[114.76289368 87.88334656]
[119.01976013 101.73345184]
[112.32924652 114.58581543]
[98.54226685 119.04287720]
[91.61604309 132.34803772]
[84.68981171 145.65319824]
[77.76358032 158.95837402]
[70.83734894 172.26353455]
[66.32676697 186.56929016]
[64.36887360 201.44096375]
[62.41098022 216.31263733]
[60.45308685 231.18429565]
[58.49519348 246.05596924]
[56.53730011 260.92764282]
[54.57940674 275.79931641]
[66.81311798 285.08544922]
[72.74996185 299.25051880]
[70.79296112 314.48422241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[22 61]
[23 60]
[24 59]
[25 58]
[26 57]
[29 54]
[35 47]
[36 46]
[37 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
