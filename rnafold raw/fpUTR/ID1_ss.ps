%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUCAUUCCACGUUCUUAACUGUUCCAUUUUCCGUAUCUGCUUCGGGCUUCCACCUCAUUUUUUUCGCUUUGCCCAUUCUGUUUCAGCCAGUCGCCAAGAAUC\
) } def
/len { sequence length } bind def

/coor [
[64.12995148 340.29867554]
[60.19736099 354.95812988]
[51.23157120 367.20471191]
[38.44513321 375.38223267]
[23.56731033 378.38467407]
[8.61020184 375.80606079]
[-4.40336418 367.99505615]
[-13.71341038 356.00808716]
[-18.06082916 341.46627808]
[-16.85766792 326.33627319]
[-10.26664352 312.66430664]
[0.82086104 302.29937744]
[14.90535164 296.64328003]
[30.08201790 296.46090698]
[35.30504227 282.39962769]
[40.52806854 268.33831787]
[45.75109100 254.27703857]
[50.97411728 240.21574402]
[56.19713974 226.15444946]
[50.74208069 206.34388733]
[66.95091248 192.49436951]
[70.90471649 178.02484131]
[74.85852051 163.55529785]
[78.81233215 149.08576965]
[72.35517883 145.76127625]
[66.40818787 141.59230042]
[61.08108521 136.65580750]
[56.47218323 131.04286194]
[52.66653824 124.85706329]
[49.73437881 118.21255493]
[47.72980499 111.23195648]
[46.68981934 104.04409027]
[46.63360596 96.78158569]
[47.56221008 89.57848358]
[49.45848465 82.56768799]
[52.28744888 75.87859344]
[55.99688721 69.63462067]
[60.51834869 63.95101547]
[65.76840210 58.93264389]
[71.65015411 54.67212677]
[78.05506897 51.24807739]
[84.86495209 48.72368622]
[91.95413208 47.14553833]
[99.19179535 46.54275513]
[106.44436646 46.92646408]
[113.57801819 48.28958130]
[120.46110535 50.60695267]
[128.08906555 37.69129562]
[135.71704102 24.77564240]
[143.34500122 11.85998821]
[132.66778564 1.20880294]
[124.97555542 -11.76349354]
[120.75186157 -26.24145126]
[120.26221466 -41.31497192]
[123.53737640 -56.03652573]
[130.37149048 -69.48069763]
[140.33493042 -80.80237579]
[152.80142212 -89.28987885]
[166.98727417 -94.40966797]
[182.00077820 -95.83991241]
[196.89816284 -93.49069977]
[210.74296570 -87.50970459]
[222.66488647 -78.27290344]
[231.91452026 -66.36092377]
[237.91040039 -52.52257156]
[240.27565002 -37.62772369]
[238.86157227 -22.61269188]
[233.75704956 -8.42133141]
[225.28297424 4.05427694]
[213.97201538 14.02990627]
[200.53521729 20.87847900]
[185.81719971 24.16949081]
[170.74314880 23.69606209]
[156.26065063 19.48795509]
[148.63269043 32.40361023]
[141.00473022 45.31926346]
[133.37675476 58.23491669]
[143.32200623 68.67056274]
[150.11759949 81.38397217]
[153.26945496 95.45083618]
[152.54843140 109.84843445]
[166.75833130 114.65248108]
[180.96823120 119.45652771]
[197.90951538 118.80146790]
[203.22879028 134.89935303]
[189.23254395 144.46707153]
[176.16418457 133.66642761]
[161.95428467 128.86238098]
[147.74438477 124.05832672]
[125.11506653 147.19706726]
[93.28186798 153.03958130]
[89.32805634 167.50910950]
[85.37425232 181.97863770]
[81.42044067 196.44818115]
[87.31305695 204.17347717]
[88.86809540 213.62330627]
[85.85057831 222.56562805]
[79.09021759 228.94998169]
[70.25843811 231.37747192]
[65.03540802 245.43876648]
[59.81238556 259.50006104]
[54.58936310 273.56137085]
[49.36633682 287.62265015]
[44.14331436 301.68395996]
[55.52076721 311.72973633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 104]
[15 103]
[16 102]
[17 101]
[18 100]
[19 99]
[21 94]
[22 93]
[23 92]
[24 91]
[47 77]
[48 76]
[49 75]
[50 74]
[81 89]
[82 88]
[83 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
