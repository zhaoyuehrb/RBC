%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUGGCUGGGCUCCACCCACCUUCUUGCUCUACCAGUUCGCGCUCUCCUCCGGCAGAAGUAGCAGCUGCGCUCUUGCUCUCUGGGGGAGAACCUGGCGUU\
) } def
/len { sequence length } bind def

/coor [
[34.43030930 131.46078491]
[20.05561829 135.74659729]
[5.68092442 140.03240967]
[-8.69376850 144.31822205]
[-23.06846237 148.60403442]
[-37.44315720 152.88984680]
[-51.81784821 157.17565918]
[-59.37406540 170.79701233]
[-74.01309967 174.93865967]
[-86.95241547 167.65101624]
[-101.32711029 171.93682861]
[-115.70180511 176.22264099]
[-130.07649231 180.50845337]
[-131.25776672 195.64018250]
[-137.82901001 209.32167053]
[-148.90150452 219.70263672]
[-162.97779846 225.37910461]
[-178.15417480 225.58341980]
[-192.37817383 220.28791809]
[-203.72610474 210.20878601]
[-210.66325378 196.70913696]
[-212.25143433 181.61470032]
[-208.27584839 166.96685791]
[-199.27415466 154.74662781]
[-186.46379089 146.60667419]
[-171.57720947 143.64788818]
[-156.62773132 146.27038574]
[-143.63714600 154.11952209]
[-134.36230469 166.13375854]
[-119.98761749 161.84794617]
[-105.61292267 157.56213379]
[-91.23822784 153.27632141]
[-84.40241241 140.09272766]
[-69.88548279 135.54153442]
[-56.10366058 142.80096436]
[-41.72896957 138.51515198]
[-27.35427475 134.22933960]
[-12.97958183 129.94352722]
[1.39511180 125.65770721]
[15.76980495 121.37189484]
[30.14449883 117.08608246]
[44.38180542 112.36389160]
[58.46847916 107.20971680]
[72.55516052 102.05553436]
[86.64183044 96.90135193]
[100.29493713 90.68904877]
[113.43512726 83.45472717]
[126.57531738 76.22040558]
[139.71549988 68.98608398]
[152.85569763 61.75176239]
[165.99588013 54.51744080]
[179.13607788 47.28311920]
[192.27626038 40.04879761]
[205.41645813 32.81447601]
[218.55664062 25.58015251]
[224.69383240 18.58008003]
[232.20971680 18.33255005]
[245.56442261 11.50231838]
[258.91909790 4.67208624]
[265.26693726 -2.13756847]
[272.78686523 -2.15577865]
[286.34362793 -8.57556629]
[299.90042114 -14.99535465]
[313.45721436 -21.41514206]
[322.61813354 -34.31428146]
[337.43231201 -32.76851273]
[350.98910522 -39.18830109]
[364.54589844 -45.60808945]
[376.27331543 -57.85160828]
[391.28482056 -49.97183609]
[387.86859131 -33.36563873]
[370.96566772 -32.05130768]
[357.40890503 -25.63151932]
[343.85211182 -19.21173286]
[335.66082764 -6.77178049]
[319.87698364 -7.85836124]
[306.32022095 -1.43857312]
[292.76342773 4.98121500]
[279.20663452 11.40100288]
[265.74935913 18.02678299]
[252.39465332 24.85701561]
[239.03994751 31.68724632]
[225.79096985 38.72034073]
[212.65077209 45.95466614]
[199.51058960 53.18898773]
[186.37039185 60.42330933]
[173.23020935 67.65763092]
[160.09001160 74.89195251]
[146.94982910 82.12627411]
[133.80964661 89.36059570]
[120.66944885 96.59491730]
[107.52925873 103.82923889]
[106.75396729 106.42913818]
[105.06719208 108.85500336]
[102.52040863 110.78948212]
[99.27352905 111.93550110]
[95.58598328 112.05235291]
[91.79601288 110.98802948]
[77.70933533 116.14221191]
[63.62266159 121.29638672]
[49.53598404 126.45056915]
[44.81921387 131.47262573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[10 32]
[11 31]
[12 30]
[13 29]
[42 101]
[43 100]
[44 99]
[45 98]
[46 92]
[47 91]
[48 90]
[49 89]
[50 88]
[51 87]
[52 86]
[53 85]
[54 84]
[55 83]
[57 82]
[58 81]
[59 80]
[61 79]
[62 78]
[63 77]
[64 76]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
