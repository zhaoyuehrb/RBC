%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUAAACUAUAAGAGGUAAGCAGUUCUCAGAGGAGACAGAAGGCAACAGCUCUACCAUCCUCCAAACAUCUGAAGCCCCCCAUAGAAACUCCUCUUGGAAUUGGUGGUUCCCUGUCUGACCCAA\
) } def
/len { sequence length } bind def

/coor [
[86.60525513 325.64505005]
[72.06273651 321.67282104]
[58.89374924 314.33517456]
[47.86392593 304.05868530]
[39.61452484 291.44079590]
[34.62515640 277.21511841]
[33.18589401 262.20874023]
[35.38041687 247.29405212]
[41.08113861 233.33822632]
[49.95662308 221.15260315]
[61.49086380 211.44566345]
[75.01327515 204.78173828]
[89.73767853 201.54827881]
[90.11164093 186.55293274]
[87.10018921 179.71284485]
[90.68649292 171.18969727]
[91.43418121 156.20834351]
[78.36194611 143.50794983]
[78.61730194 124.96745300]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[92.50000000 27.79650116]
[92.50000000 12.79650021]
[92.50000000 -2.20349932]
[84.76270294 -16.00367165]
[92.50000000 -28.73094368]
[92.50000000 -43.73094177]
[92.50000000 -58.73094177]
[92.50000000 -73.73094177]
[92.50000000 -88.73094177]
[92.50000000 -103.73094177]
[92.50000000 -118.73094177]
[75.06068420 -125.15576935]
[61.35101318 -137.65632629]
[53.37546539 -154.37223816]
[52.28781509 -172.82929993]
[58.22427750 -190.30558777]
[70.28699493 -204.23297119]
[86.67974854 -212.57441711]
[84.81459045 -227.45800781]
[82.94944000 -242.34159851]
[70.75510406 -252.03364563]
[69.07559204 -267.15429688]
[78.39063263 -278.72000122]
[76.52547455 -293.60357666]
[74.66032410 -308.48718262]
[59.74778748 -310.89404297]
[46.11800766 -317.40603638]
[34.87588882 -327.49520874]
[26.93277359 -340.34368896]
[22.93257713 -354.90991211]
[23.19957733 -370.01309204]
[27.71213150 -384.42880249]
[36.10442352 -396.98852539]
[47.69613266 -406.67401123]
[61.54756927 -412.70016479]
[76.53585815 -414.57843018]
[91.44596100 -412.15658569]
[105.06919098 -405.63092041]
[116.30117035 -395.53045654]
[124.23137665 -382.67401123]
[128.21693420 -368.10375977]
[127.93476105 -353.00088501]
[123.40773010 -338.58969116]
[115.00282288 -326.03842163]
[103.40139008 -316.36456299]
[89.54390717 -310.35232544]
[91.40906525 -295.46875000]
[93.27422333 -280.58514404]
[105.15513611 -271.67565918]
[107.25869751 -256.60815430]
[97.83302307 -244.20675659]
[99.69818115 -229.32316589]
[101.56333923 -214.43957520]
[113.18611908 -212.66369629]
[124.03694153 -208.10478210]
[133.45951843 -201.03227234]
[140.88240051 -191.86779785]
[145.85366821 -181.16006470]
[148.06840515 -169.55204773]
[147.38737488 -157.74230957]
[143.84584045 -146.44300842]
[137.65168762 -136.33695984]
[129.17330933 -128.03634644]
[118.91767883 -122.04563904]
[107.50000000 -118.73094177]
[107.50000000 -103.73094177]
[107.50000000 -88.73094177]
[107.50000000 -73.73094177]
[107.50000000 -58.73094177]
[107.50000000 -43.73094177]
[107.50000000 -28.73094368]
[115.23729706 -16.00367165]
[107.50000000 -2.20349932]
[107.50000000 12.79650021]
[107.50000000 27.79650116]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[117.48309326 118.89653015]
[122.89397430 129.49356079]
[122.47000122 141.26388550]
[116.43550873 151.23782349]
[106.41553497 156.95602417]
[105.66784668 171.93737793]
[105.10697937 186.92689514]
[104.73301697 201.92224121]
[119.27793884 205.88563538]
[132.45137024 213.21530151]
[143.48742676 223.48512268]
[151.74447632 236.09799194]
[156.74246216 250.32063293]
[158.19082642 265.32614136]
[156.00534058 280.24215698]
[150.31309509 294.20144653]
[141.44499207 306.39242554]
[129.91664124 316.10638428]
[116.39826965 322.77850342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 114]
[14 113]
[16 112]
[17 111]
[20 106]
[22 104]
[23 103]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[30 96]
[31 95]
[32 94]
[33 93]
[34 92]
[35 91]
[36 90]
[43 78]
[44 77]
[45 76]
[48 73]
[49 72]
[50 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
