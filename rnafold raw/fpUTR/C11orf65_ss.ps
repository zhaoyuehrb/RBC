%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUCAUUUCCGCCUGCGACGUUACCUAGGAGUCCAGCGGCGCCCGGGCCAGCAGCGAUUGGAAUUUCAA\
) } def
/len { sequence length } bind def

/coor [
[80.70007324 364.06701660]
[66.92941284 357.62982178]
[56.67407990 346.40945435]
[51.49792862 332.11694336]
[52.19029617 316.93179321]
[58.64559174 303.16961670]
[69.87943268 292.92904663]
[84.17874146 287.77169800]
[84.84224701 272.78637695]
[85.50574493 257.80105591]
[86.16924286 242.81575012]
[86.83274078 227.83042908]
[76.61871338 217.05039978]
[77.07812500 201.84370422]
[88.45446777 191.20336914]
[89.11796570 176.21806335]
[89.78147125 161.23274231]
[79.56743622 150.45269775]
[80.02684784 135.24600220]
[91.40319061 124.60568237]
[80.30632782 117.07348633]
[74.42388153 105.02063751]
[75.31338501 91.63843536]
[82.73931885 80.47018433]
[94.73548126 74.47296143]
[96.06118011 59.53166199]
[97.38688660 44.59035873]
[90.89952087 30.16036606]
[99.73138428 18.16672134]
[101.05708313 3.22541857]
[94.56972504 -11.20457458]
[103.40158081 -23.19821930]
[104.72728729 -38.13952255]
[106.05298615 -53.08082199]
[98.65377045 -67.71584320]
[107.85370636 -81.29130554]
[124.18867493 -79.84194946]
[130.85467529 -64.85874176]
[120.99428558 -51.75512314]
[119.66858673 -36.81381989]
[118.34288788 -21.87251663]
[124.92507172 -8.51122665]
[115.99839020 4.55112028]
[114.67268372 19.49242210]
[121.25486755 32.85371399]
[112.32818604 45.91606140]
[111.00248718 60.85736084]
[109.67678070 75.79866791]
[122.05496979 86.11032104]
[126.00685883 101.72866058]
[120.02259064 116.68654633]
[106.38851166 125.26918793]
[116.77994537 136.87332153]
[115.89359283 152.06111145]
[104.76678467 161.89624023]
[104.10328674 176.88156128]
[103.43978882 191.86688232]
[113.83122253 203.47100830]
[112.94487000 218.65879822]
[101.81806183 228.49392700]
[101.15456390 243.47924805]
[100.49106598 258.46456909]
[99.82756042 273.44989014]
[99.16406250 288.43521118]
[112.95160675 294.83615112]
[123.23642731 306.02947998]
[128.45016479 320.30831909]
[127.79775238 335.49526978]
[121.37868500 349.27438354]
[110.17182159 359.54446411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[15 57]
[16 56]
[17 55]
[20 52]
[25 48]
[26 47]
[27 46]
[29 44]
[30 43]
[32 41]
[33 40]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
