%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAGCGGACUCGAUCCUGCGCUCCGGCCGGGCUGACCUGCCUGCGUCCAGCCCCCGCGCCCUGGGCCUGCCUGGGUCUGGAUCUGUGUCCGAGUCUGGGUCUGGAUCUGGGUCCGAGUCUGGGUCUGGCCCUGCGCUCAGGGCCCGCGGAGGAGACU\
) } def
/len { sequence length } bind def

/coor [
[44.44147110 352.27661133]
[35.12211990 353.95840454]
[30.76785088 368.31250000]
[26.41358185 382.66662598]
[34.08377457 396.48486328]
[29.65618324 411.65628052]
[15.75762367 419.17993164]
[0.63386256 414.59219360]
[-6.74244118 400.61486816]
[-1.99505723 385.54046631]
[12.05947590 378.31234741]
[16.41374588 363.95825195]
[20.76801682 349.60412598]
[9.60674000 332.53311157]
[14.63609314 312.46691895]
[33.03989792 302.39874268]
[36.25453568 287.74725342]
[39.46917343 273.09576416]
[42.68381119 258.44427490]
[37.85385132 244.35453796]
[48.36888504 232.53317261]
[51.58352280 217.88168335]
[54.79816055 203.23019409]
[48.50553131 195.09916687]
[47.73900604 184.62538147]
[52.99647903 175.28082275]
[62.73831940 170.29789734]
[66.52569580 155.78390503]
[70.31306458 141.26992798]
[74.10044098 126.75593567]
[65.64484406 114.36631012]
[50.74882126 112.60324860]
[35.85279465 110.84018707]
[20.95676613 109.07712555]
[6.06073952 107.31406403]
[-8.83528709 105.55100250]
[-23.74790573 103.93426514]
[-38.67567444 102.46400452]
[-53.61716080 101.14037323]
[-66.70111847 110.42420197]
[-82.07672119 105.84484863]
[-87.94911957 90.91519928]
[-79.81350708 77.08799744]
[-63.91083908 74.97029877]
[-52.44027328 86.18661499]
[-45.48924255 83.56269073]
[-37.20541763 87.53623962]
[-22.27764702 89.00649261]
[-15.27643776 86.51955414]
[-7.07222652 90.65497589]
[7.82380009 92.41803741]
[22.71982765 94.18109894]
[37.61585236 95.94416046]
[52.51187897 97.70722198]
[67.40790558 99.47028351]
[76.10383606 80.87859344]
[93.27258301 72.18886566]
[110.88603210 75.70582581]
[120.62775421 64.29973602]
[130.36947632 52.89364624]
[140.11119080 41.48755646]
[138.62892151 30.64615822]
[143.28906250 20.98981476]
[152.32005310 15.62989044]
[162.58880615 16.14314842]
[172.77082825 5.12831020]
[182.95283508 -5.88652706]
[193.13484192 -16.90136528]
[203.31684875 -27.91620255]
[206.93641663 -45.94665146]
[223.84965515 -50.54386902]
[233.81343079 -61.75649261]
[243.77722168 -72.96911621]
[253.74101257 -84.18173981]
[263.70480347 -95.39436340]
[273.66857910 -106.60699463]
[283.63235474 -117.81961823]
[287.01812744 -126.36054230]
[293.90353394 -129.15211487]
[304.08554077 -140.16694641]
[314.15893555 -151.28121948]
[324.12271118 -162.49383545]
[334.08651733 -173.70646667]
[344.05029297 -184.91908264]
[354.01406860 -196.13171387]
[363.97787476 -207.34432983]
[373.94165039 -218.55696106]
[377.32476807 -234.01222229]
[391.56256104 -238.38644409]
[401.52636719 -249.59907532]
[411.49014282 -260.81170654]
[421.45391846 -272.02432251]
[431.30715942 -283.33422852]
[441.04888916 -294.74032593]
[438.28967285 -310.13253784]
[446.11471558 -323.67147827]
[460.82928467 -328.96444702]
[475.48559570 -323.51226807]
[483.16339111 -309.88928223]
[480.23745728 -294.52789307]
[468.08932495 -284.68121338]
[452.45498657 -284.99859619]
[442.71325684 -273.59249878]
[440.75033569 -266.42669678]
[432.66656494 -262.06054688]
[422.70275879 -250.84791565]
[412.73898315 -239.63528442]
[402.77520752 -228.42266846]
[400.10476685 -213.76939392]
[385.15426636 -208.59317017]
[375.19049072 -197.38055420]
[365.22671509 -186.16792297]
[355.26290894 -174.95530701]
[345.29913330 -163.74267578]
[335.33535767 -152.53004456]
[325.37155151 -141.31742859]
[323.26834106 -134.19154358]
[315.10040283 -129.98493958]
[304.91836548 -118.97010040]
[294.84500122 -107.85582733]
[284.88119507 -96.64320374]
[274.91741943 -85.43058014]
[264.95364380 -74.21795654]
[254.98985291 -63.00532913]
[245.02606201 -51.79270554]
[235.06227112 -40.58008194]
[235.45309448 -28.45735550]
[227.19868469 -19.02980614]
[214.33169556 -17.73419189]
[204.14968872 -6.71935368]
[193.96766663 4.29548407]
[183.78565979 15.31032181]
[173.60365295 26.32515907]
[170.78627014 45.42444992]
[151.51728821 51.22927856]
[141.77555847 62.63536835]
[132.03384399 74.04145813]
[122.29212189 85.44754791]
[127.73384857 97.85593414]
[126.44216919 111.93657684]
[118.17384338 124.12766266]
[104.51795959 131.07473755]
[88.61442566 130.54330444]
[84.82705688 145.05729675]
[81.03968048 159.57128906]
[77.25230408 174.08526611]
[83.50779724 193.21270752]
[69.44964600 206.44482422]
[66.23500824 221.09631348]
[63.02037430 235.74780273]
[67.62039948 250.88551331]
[57.33530045 261.65890503]
[54.12066269 276.31039429]
[50.90602493 290.96188354]
[47.69138718 305.61337280]
[55.15061188 311.99822998]
[59.71832275 320.62402344]
[60.79453659 330.26657104]
[58.27141190 339.57495117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[16 155]
[17 154]
[18 153]
[19 152]
[21 150]
[22 149]
[23 148]
[27 146]
[28 145]
[29 144]
[30 143]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[37 48]
[38 47]
[39 45]
[58 138]
[59 137]
[60 136]
[61 135]
[65 133]
[66 132]
[67 131]
[68 130]
[69 129]
[71 126]
[72 125]
[73 124]
[74 123]
[75 122]
[76 121]
[77 120]
[79 119]
[80 118]
[81 116]
[82 115]
[83 114]
[84 113]
[85 112]
[86 111]
[87 110]
[89 108]
[90 107]
[91 106]
[92 105]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
