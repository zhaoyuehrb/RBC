%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCCCCCUCCGCUCCUCCCCUUCCCUACAUCUAGCCGCCGCGCUUUCCCGCUCCCGCAGCAGCAGCCUCCCGCGUCGCUGUCGCUGUUGCCUCCGCCACCUCCUCCGCCGCCGCGCGCCCCUCGGAGUUCCGCGCCCCACC\
) } def
/len { sequence length } bind def

/coor [
[43.34096146 298.07293701]
[30.41752815 305.68771362]
[16.55809593 311.42498779]
[2.03376460 315.17248535]
[-12.87135601 316.85693359]
[-27.86570930 316.44540405]
[-42.65599442 313.94589233]
[-56.95289612 309.40731812]
[-70.47676086 302.91848755]
[-82.96305084 294.60629272]
[-94.16751099 284.63333130]
[-103.87099457 273.19470215]
[-111.88367462 260.51412964]
[-118.04882050 246.83966064]
[-122.24584198 232.43878174]
[-124.39263916 217.59320068]
[-124.44721985 202.59330750]
[-122.40851593 187.73249817]
[-118.31639862 173.30146790]
[-112.25092316 159.58250427]
[-104.33073425 146.84394836]
[-94.71075439 135.33500671]
[-83.57915497 125.28076935]
[-71.15368652 116.87792206]
[-57.67740250 110.29084015]
[-43.41390610 105.64836121]
[-28.64220238 103.04129028]
[-13.65124130 102.52063751]
[1.26574254 104.09658051]
[15.81695938 107.73829651]
[29.71777725 113.37454224]
[42.69628143 120.89508057]
[54.49860382 130.15278625]
[64.89387512 140.96658325]
[73.67876434 153.12495422]
[80.67893982 166.38439941]
[83.28366089 151.61228943]
[77.87397766 137.73480225]
[87.89010620 125.48785400]
[90.49482727 110.71573639]
[85.89366913 97.51267242]
[94.73305511 86.67953491]
[97.33777618 71.90742493]
[99.94250488 57.13530350]
[85.47850800 49.04694366]
[74.65311432 36.53319168]
[68.74897766 21.10334015]
[68.45659637 4.61059761]
[73.79356384 -10.97052097]
[84.10456848 -23.78056526]
[98.14182281 -32.29705811]
[114.21601105 -35.51543808]
[116.17390442 -50.38710785]
[104.10208130 -59.77957153]
[98.39008331 -73.86040497]
[100.47915649 -88.81039429]
[109.70907593 -100.62837219]
[123.52208710 -106.20209503]
[125.47998047 -121.07376099]
[127.43787384 -135.94543457]
[129.39576721 -150.81710815]
[131.35365295 -165.68878174]
[133.31155396 -180.56045532]
[135.26943970 -195.43212891]
[137.22734070 -210.30380249]
[138.69758606 -225.23156738]
[139.67863464 -240.19946289]
[140.65968323 -255.16734314]
[130.51660156 -266.98916626]
[131.72474670 -282.15475464]
[143.05755615 -291.75177002]
[135.32305908 -306.21240234]
[144.20771790 -319.99627686]
[160.57176208 -318.92370605]
[167.58125305 -304.09808350]
[158.02543640 -290.77072144]
[168.00863647 -279.77658081]
[167.22694397 -264.58303833]
[155.62756348 -254.18629456]
[154.64653015 -239.21841431]
[153.66548157 -224.25051880]
[155.77137756 -221.33363342]
[156.52635193 -217.22857666]
[155.37724304 -212.60185242]
[152.09901428 -208.34591675]
[150.14111328 -193.47424316]
[148.18322754 -178.60256958]
[146.22532654 -163.73089600]
[144.26744080 -148.85922241]
[142.30953979 -133.98754883]
[140.35165405 -119.11587524]
[138.39375305 -104.24420166]
[150.29351807 -95.28533173]
[156.15020752 -81.48116302]
[154.29876709 -66.49989319]
[145.13700867 -54.37722015]
[131.04557800 -48.42921829]
[129.08767700 -33.55754471]
[141.40521240 -27.92160988]
[151.63706970 -19.01924324]
[158.94046021 -7.57104445]
[162.71029663 5.49219131]
[162.62916565 19.10514069]
[158.69415283 32.15483475]
[151.21781921 43.57165527]
[140.80339050 52.41699219]
[128.29611206 57.96042633]
[114.71462250 59.74002838]
[112.10989380 74.51214600]
[109.50517273 89.28426361]
[114.10633087 102.48732758]
[105.26694489 113.32046509]
[102.66222382 128.09257507]
[107.88559723 143.02665710]
[98.05577850 154.21701050]
[95.45105743 168.98912048]
[99.64849091 183.38987732]
[109.78234100 194.44903564]
[119.91619873 205.50819397]
[130.05004883 216.56735229]
[133.72665405 202.02491760]
[147.29481506 195.62922668]
[160.85205078 202.04806519]
[164.50382996 216.59675598]
[155.58497620 228.65718079]
[140.60345459 229.42672729]
[149.47309875 241.52339172]
[164.69317627 247.62924194]
[166.74722290 263.89923096]
[153.52223206 273.59622192]
[138.62290955 266.74475098]
[137.37643433 250.39303589]
[128.50679016 238.29637146]
[118.99089050 226.70120239]
[108.85703278 215.64204407]
[98.72318268 204.58288574]
[88.58933258 193.52372742]
[89.80981445 208.47399902]
[88.93254089 223.44831848]
[85.97465515 238.15379333]
[80.99403381 252.30276489]
[74.08808899 265.61846924]
[65.39190674 277.84042358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[36 116]
[37 115]
[39 113]
[40 112]
[42 110]
[43 109]
[44 108]
[52 98]
[53 97]
[58 92]
[59 91]
[60 90]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[66 81]
[67 80]
[68 79]
[71 76]
[117 137]
[118 136]
[119 135]
[120 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
