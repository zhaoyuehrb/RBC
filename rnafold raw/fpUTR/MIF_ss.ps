%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACAGUGGUGUCCGAGAAGUCAGGCACGUAGCUCAGCGGCGGCCGCGGCGCGUGCGUCUGUGCCUCUGCGCGGGUCUCCUGGUCCUUCUGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[41.69042587 344.51443481]
[27.85731888 351.54470825]
[12.53914547 349.06817627]
[1.62605405 338.03713989]
[-0.68564796 322.69323730]
[6.49293566 308.93649292]
[20.40149307 302.05670166]
[22.79549217 287.24896240]
[25.18948936 272.44125366]
[27.58348846 257.63351440]
[29.97748756 242.82579041]
[28.40340233 240.86364746]
[27.47509575 238.18138123]
[27.45605087 235.00727844]
[28.52818680 231.65542603]
[30.76611519 228.49700928]
[34.12115097 225.92462158]
[38.84777451 211.68878174]
[43.57439804 197.45295715]
[48.30102158 183.21711731]
[53.02764511 168.98127747]
[57.29555893 154.60125732]
[61.10037994 140.09184265]
[64.90519714 125.58241272]
[68.71001434 111.07299042]
[67.03054810 96.16730499]
[60.09247589 82.86831665]
[53.15439987 69.56932831]
[46.21632385 56.27033997]
[39.27825165 42.97135162]
[32.34017563 29.67235947]
[25.46770668 23.36669350]
[25.40060425 15.83405781]
[18.89234924 2.31952524]
[12.38409233 -11.19500732]
[6.90213585 -15.41457844]
[4.83375406 -20.96346092]
[5.92312384 -25.79044724]
[0.29411876 -39.69419861]
[-5.33488607 -53.59794998]
[-10.96389103 -67.50170135]
[-22.51224899 -79.91426849]
[-13.78167439 -94.44744873]
[2.60040975 -90.08125305]
[2.93985987 -73.13070679]
[8.56886482 -59.22695541]
[14.19787025 -45.32320404]
[19.82687569 -31.41945267]
[25.89862442 -17.70326424]
[32.40688324 -4.18873072]
[38.91513824 9.32580185]
[45.63916779 22.73428535]
[52.57723999 36.03327560]
[59.51531601 49.33226395]
[66.45339203 62.63125610]
[73.39146423 75.93024445]
[80.32953644 89.22923279]
[96.90364075 79.85301208]
[112.69955444 86.76718140]
[126.60330200 81.13817596]
[140.50704956 75.50917053]
[154.41081238 69.88016510]
[168.31455994 64.25115967]
[182.21830750 58.62215424]
[196.12205505 52.99314880]
[205.77706909 39.73747253]
[222.05349731 41.73994064]
[228.20755005 56.94058609]
[217.90847778 69.70228577]
[201.75106812 66.89689636]
[187.84732056 72.52590179]
[173.94355774 78.15490723]
[160.03981018 83.78391266]
[146.13606262 89.41291809]
[132.23231506 95.04192352]
[118.32855988 100.67092896]
[116.69638062 109.39450836]
[110.98606110 116.68254089]
[102.20863342 120.67443848]
[92.19583893 120.15070343]
[83.21943665 114.87780762]
[79.41461945 129.38723755]
[75.60980225 143.89665222]
[71.80498505 158.40608215]
[73.24394989 165.17260742]
[71.22196960 170.73857117]
[67.26348114 173.70790100]
[62.53685760 187.94374084]
[57.81023407 202.17958069]
[53.08361053 216.41540527]
[48.35698700 230.65124512]
[44.78521347 245.21978760]
[42.39121628 260.02752686]
[39.99721527 274.83523560]
[37.60321808 289.64297485]
[35.20922089 304.45068359]
[46.24133301 315.36270142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 96]
[8 95]
[9 94]
[10 93]
[11 92]
[17 91]
[18 90]
[19 89]
[20 88]
[21 87]
[22 84]
[23 83]
[24 82]
[25 81]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[33 51]
[34 50]
[35 49]
[38 48]
[39 47]
[40 46]
[41 45]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
