%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGGCUCGCCGCGGGGCGCUGAGCAGGCCGGGACACCGCGGCCGAGGUUAUCGUUAGGCAUCUCCCAGGCGACCGGCUCCGCAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[157.03904724 296.28970337]
[151.47866821 282.35836792]
[145.91830444 268.42703247]
[140.39700317 263.27230835]
[140.41561890 253.91760254]
[135.33941650 239.80264282]
[129.99932861 234.46043396]
[130.34080505 225.11193848]
[125.75483704 210.83018494]
[121.16885376 196.54841614]
[116.58287811 182.26664734]
[111.99690247 167.98487854]
[101.28554535 162.08120728]
[97.42798615 150.05024719]
[103.05700684 138.28999329]
[98.96671295 123.85845184]
[94.87641907 109.42691040]
[88.60240173 95.80205536]
[80.29577637 83.31205750]
[71.98915863 70.82205963]
[57.90437698 63.61584091]
[57.29892349 48.73354721]
[48.99230194 36.24354935]
[40.68567657 23.75355339]
[26.60089874 16.54733658]
[25.99544525 1.66504216]
[9.36485481 -6.00469446]
[8.69909477 -23.44861603]
[-0.03368524 -35.64445877]
[-8.76646519 -47.84029770]
[-17.49924660 -60.03614044]
[-26.23202515 -72.23197937]
[-40.55714417 -78.94775391]
[-41.67591476 -93.80028534]
[-56.82622528 -100.07723236]
[-58.69682312 -116.36934662]
[-45.36339569 -125.91668701]
[-30.54223251 -118.89777374]
[-29.48007393 -102.53306580]
[-15.77958298 -96.68962097]
[-14.03618431 -80.96475983]
[-5.30340433 -68.76892090]
[3.42937613 -56.57307816]
[12.16215611 -44.37723541]
[20.89493561 -32.18139648]
[32.89834976 -29.83520317]
[40.24944687 -19.55969429]
[38.48543930 -6.64158106]
[51.97607422 -0.32873178]
[53.17567444 15.44693089]
[61.48229599 27.93692780]
[69.78891754 40.42692184]
[83.27955627 46.73977280]
[84.47914886 62.51543427]
[92.78577423 75.00543213]
[101.09239960 87.49542999]
[104.26047516 72.83380127]
[114.67832184 62.04174042]
[129.21907043 58.35842896]
[143.51837158 62.88938522]
[153.28439331 74.27467346]
[155.58590698 89.09706116]
[149.73211670 102.90767670]
[137.48001099 111.56134033]
[122.50699615 112.46070099]
[109.30796814 105.33661652]
[113.39826202 119.76815796]
[117.48854828 134.19970703]
[130.97795105 146.58670044]
[126.27866364 163.39891052]
[130.86463928 177.68067932]
[135.45062256 191.96243286]
[140.03660583 206.24420166]
[144.62257385 220.52597046]
[149.45437622 234.72644043]
[154.53057861 248.84141541]
[159.84965515 262.86666870]
[165.41001892 276.79800415]
[170.97038269 290.72933960]
[186.20060730 291.73095703]
[199.48373413 299.24899292]
[208.18241882 311.79077148]
[210.56951904 326.86605835]
[206.17108154 341.48168945]
[195.86039734 352.73568726]
[181.68467712 358.39358521]
[166.45852661 357.33200073]
[153.20509338 349.76171875]
[144.55586243 337.18579102]
[142.22814941 322.10122681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[5 76]
[6 75]
[8 74]
[9 73]
[10 72]
[11 71]
[12 70]
[15 68]
[16 67]
[17 66]
[18 56]
[19 55]
[20 54]
[22 52]
[23 51]
[24 50]
[26 48]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
