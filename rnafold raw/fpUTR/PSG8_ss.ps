%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAAGGAGGCAGGACAGCACUGCUGAGAGCUGUGCUCAGGAAGCUUCUGGAUCCUAGGCUCAUCUCCACAGAGGAGAACACACAGACAGCAGAGACC\
) } def
/len { sequence length } bind def

/coor [
[49.84863281 227.63578796]
[42.02997589 231.81556702]
[33.57312012 234.45497131]
[24.77812004 235.46295166]
[15.95655632 234.80628967]
[7.42047501 232.51068115]
[-0.52863657 228.65977478]
[-7.61050320 223.39208984]
[-13.57594299 216.89605713]
[-26.79774284 223.98013306]
[-40.01954269 231.06419373]
[-53.24134445 238.14825439]
[-66.46314240 245.23233032]
[-69.48851776 260.57446289]
[-81.70018005 270.34222412]
[-97.33215332 269.92358398]
[-109.00350952 259.51620483]
[-111.20338440 244.03414917]
[-102.89305878 230.78753662]
[-87.99642181 226.03103638]
[-73.54721069 232.01052856]
[-60.32540894 224.92645264]
[-47.10361099 217.84239197]
[-33.88180923 210.75833130]
[-20.66000938 203.67425537]
[-22.74616814 181.08642578]
[-13.97006607 160.10641479]
[3.66703296 145.65858459]
[26.07722282 141.16156006]
[48.03338242 147.71946716]
[57.67519760 136.22879028]
[67.31700897 124.73812866]
[76.95882416 113.24745941]
[86.60063934 101.75679016]
[90.82662964 87.36440277]
[88.92774200 72.48507690]
[87.02885437 57.60575485]
[77.60680389 44.89609146]
[83.67067719 31.29172897]
[81.77178955 16.41240692]
[79.87290192 1.53308439]
[77.97402191 -13.34623814]
[65.75774384 -23.01062584]
[64.04396820 -38.12742615]
[73.33276367 -49.71421814]
[62.97611618 -62.42924118]
[69.06141663 -77.65754700]
[85.32862854 -79.73355103]
[95.04344177 -66.52164459]
[88.21208954 -51.61310577]
[100.11317444 -42.73054886]
[102.25087738 -27.66785049]
[92.85334015 -15.24512482]
[94.75222778 -0.36580247]
[96.65111542 14.51351929]
[98.55000305 29.39284134]
[107.83622742 41.03823853]
[101.90817261 55.70686722]
[103.80706024 70.58618927]
[105.70594788 85.46551514]
[111.81526947 89.81594086]
[125.45973969 83.58468628]
[124.03390503 98.51679230]
[130.14323425 102.86721802]
[144.82527161 99.79512024]
[159.50729370 96.72302246]
[174.18933105 93.65091705]
[188.87136841 90.57881927]
[198.81977844 77.99275970]
[214.86265564 78.06753540]
[224.69328308 90.74578857]
[220.77046204 106.30184937]
[206.10342407 112.80243683]
[191.94348145 105.26085663]
[177.26144409 108.33295441]
[162.57940674 111.40505981]
[147.89736938 114.47715759]
[133.21533203 117.54925537]
[147.57287598 121.89218140]
[149.73147583 136.73605347]
[143.88201904 150.54850769]
[131.71937561 159.32745361]
[116.76760101 160.52925110]
[103.35888672 153.80567932]
[95.37834930 141.10484314]
[95.13873291 126.10514832]
[98.09130859 111.39860535]
[88.44949341 122.88927460]
[78.80767822 134.37994385]
[69.16586304 145.87060547]
[59.52404785 157.36126709]
[64.67968750 164.64674377]
[68.37677765 172.76292419]
[70.48673248 181.42150879]
[70.93725586 190.31547546]
[69.71488190 199.12989807]
[66.86531830 207.55311584]
[62.49177170 215.28781128]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[35 60]
[36 59]
[37 58]
[39 56]
[40 55]
[41 54]
[42 53]
[45 50]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
