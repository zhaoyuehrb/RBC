%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAAAGGAAACUGUUGAGAAACCGAAACUACUGGGGAAAGGGAGGGCUCACUGAGAACCAUCCCAGUAACCCGACCGCCGCUGGUCUUCGCUGGACACC\
) } def
/len { sequence length } bind def

/coor [
[19.75198364 383.75515747]
[12.31879616 396.96588135]
[0.81352490 406.83526611]
[-13.37451077 412.17150879]
[-28.53203773 412.33023071]
[-42.82870865 407.29226685]
[-54.53813553 397.66598511]
[-62.24634171 384.61383057]
[-65.02252960 369.71185303]
[-62.53145981 354.75958252]
[-55.07393646 341.56256104]
[-43.55049896 331.71441650]
[-29.35265160 326.40432739]
[-14.19485855 326.27352905]
[-9.20953655 312.12622070]
[-4.22421503 297.97891235]
[0.76110715 283.83160400]
[-2.30639195 269.25628662]
[9.57763100 258.81210327]
[14.56295300 244.66479492]
[13.31154346 241.97056580]
[13.14926434 238.57752991]
[14.36439419 234.93675232]
[17.06140327 231.60064697]
[21.12960815 229.15046692]
[27.81568336 215.72300720]
[34.50175858 202.29556274]
[41.18783569 188.86811829]
[37.02466965 179.30465698]
[38.94599152 168.82728577]
[46.54119873 161.04566956]
[57.40306091 158.78005981]
[64.90306091 145.78968811]
[72.40306091 132.79930115]
[79.90306091 119.80892181]
[87.40306091 106.81854248]
[87.59510040 92.83802795]
[99.60655975 85.68145752]
[94.62672424 73.05519867]
[97.83653259 60.06884766]
[107.82865143 51.47179031]
[120.75898743 50.27246475]
[128.65547180 37.51920700]
[125.25357056 22.31838989]
[133.44340515 9.49726295]
[147.95602417 6.34774780]
[155.85250854 -6.40550947]
[163.74899292 -19.15876579]
[159.16033936 -31.93239212]
[162.76853943 -44.81373596]
[173.02067566 -53.09901047]
[185.98181152 -53.89957809]
[194.26728821 -66.40361023]
[202.55276489 -78.90764618]
[210.83822632 -91.41168213]
[212.01113892 -107.18935394]
[225.49105835 -113.52502441]
[233.77653503 -126.02906036]
[234.24548340 -142.42150879]
[248.80278015 -149.97244263]
[262.47314453 -140.91413879]
[261.19366455 -124.56497955]
[246.28057861 -117.74358368]
[237.99510193 -105.23954773]
[237.41484070 -90.35625458]
[223.34226990 -83.12621307]
[215.05679321 -70.62217712]
[206.77131653 -58.11813736]
[198.48583984 -45.61410141]
[202.56254578 -29.37923431]
[193.52987671 -14.88981915]
[176.50224304 -11.26228428]
[168.60575867 1.49097300]
[160.70927429 14.24423027]
[164.35877991 28.63925362]
[156.53230286 41.68535995]
[141.40873718 45.41568756]
[133.51225281 58.16894531]
[138.08697510 74.27056885]
[129.50479126 89.03128052]
[112.59693909 93.18145752]
[112.40489960 107.16197205]
[100.39344025 114.31854248]
[92.89344025 127.30892181]
[85.39344025 140.29930115]
[77.89344025 153.28968811]
[70.39344025 166.28005981]
[71.47117615 186.29293823]
[54.61528397 195.55418396]
[47.92920685 208.98164368]
[41.24313354 222.40908813]
[34.55705643 235.83653259]
[28.71026993 249.65011597]
[23.72494698 263.79742432]
[26.43586349 279.38464355]
[14.90842342 288.81692505]
[9.92310143 302.96423340]
[4.93777990 317.11154175]
[-0.04754232 331.25885010]
[11.67960262 340.86355591]
[19.41185188 353.90148926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 99]
[15 98]
[16 97]
[17 96]
[19 94]
[20 93]
[25 92]
[26 91]
[27 90]
[28 89]
[32 87]
[33 86]
[34 85]
[35 84]
[36 83]
[38 81]
[42 78]
[43 77]
[46 74]
[47 73]
[48 72]
[52 69]
[53 68]
[54 67]
[55 66]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
