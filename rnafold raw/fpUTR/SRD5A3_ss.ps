%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGUCACCGACGUCCCGCUAGGCUGAGACCGGUGCGCCGCGCGCUAGUGGCCGCUCUUCCGCGGGCUAGCGGGCGGUGGGGGCGCCAGCAGCGCGGAAGGCGGGCACGCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[120.76309204 452.68835449]
[119.55609131 437.73699951]
[118.34909058 422.78564453]
[117.14208984 407.83428955]
[115.93509674 392.88293457]
[114.72809601 377.93157959]
[103.25163269 368.50680542]
[101.81457520 353.36117554]
[111.77795410 341.38751221]
[110.57095337 326.43615723]
[109.36396027 311.48480225]
[96.57365417 303.89889526]
[90.63252258 290.07257080]
[94.01153564 275.22549438]
[105.61922455 265.09793091]
[104.41222382 250.14656067]
[103.20522308 235.19519043]
[101.79760742 220.26138306]
[100.18963623 205.34782410]
[98.58165741 190.43426514]
[96.97367859 175.52069092]
[93.77879333 171.81130981]
[92.96774292 166.01901245]
[95.70186615 159.76651001]
[94.89672089 144.78813171]
[94.09156799 129.80975342]
[93.28642273 114.83138275]
[83.75655365 101.09203339]
[91.36161041 86.20071411]
[87.50855255 77.77111053]
[90.32843018 70.83264923]
[89.52327728 55.85427475]
[79.17525482 49.69181824]
[73.20173645 39.37283707]
[73.01502991 27.57175446]
[78.54489136 17.28164864]
[88.28607178 11.05513191]
[88.28607178 -3.94486785]
[88.28607178 -18.94486809]
[88.28607178 -33.94486618]
[88.28607178 -48.94486618]
[88.28607178 -63.94486618]
[80.54877472 -77.74504089]
[88.28607178 -90.47231293]
[88.28607178 -105.47231293]
[88.28607178 -120.47231293]
[88.28607178 -135.47230530]
[88.28607178 -150.47230530]
[88.28607178 -165.47230530]
[88.28607178 -180.47230530]
[85.22028351 -186.56904602]
[85.71924591 -192.39651489]
[88.71041870 -196.27204895]
[89.51556396 -211.25042725]
[90.32071686 -226.22880554]
[91.12586975 -241.20718384]
[80.38135529 -252.79730225]
[81.06278229 -268.58691406]
[92.76585388 -279.20828247]
[108.54736328 -278.35995483]
[119.04440308 -266.54522705]
[118.02928162 -250.77357483]
[106.10424042 -240.40203857]
[105.29909515 -225.42366028]
[104.49394226 -210.44528198]
[103.68879700 -195.46690369]
[103.28607178 -180.47230530]
[103.28607178 -165.47230530]
[103.28607178 -150.47230530]
[103.28607178 -135.47230530]
[103.28607178 -120.47231293]
[103.28607178 -105.47231293]
[103.28607178 -90.47231293]
[111.02337646 -77.74504089]
[103.28607178 -63.94486618]
[103.28607178 -48.94486618]
[103.28607178 -33.94486618]
[103.28607178 -18.94486809]
[103.28607178 -3.94486785]
[103.28607178 11.05513191]
[116.97270966 23.06723976]
[117.67723846 41.57991409]
[104.50165558 55.04912567]
[105.30680084 70.02750397]
[106.31296539 84.99372101]
[114.75973511 93.13034058]
[115.54644012 104.83220673]
[108.26479340 114.02622986]
[109.06994629 129.00460815]
[109.87509155 143.98298645]
[110.68024445 158.96136475]
[111.88724518 173.91271973]
[113.49521637 188.82627869]
[115.10319519 203.73985291]
[116.71117401 218.65341187]
[120.78915405 226.97653198]
[118.15658569 233.98820496]
[119.36358643 248.93955994]
[120.57057953 263.89093018]
[133.65252686 272.02532959]
[139.36943054 286.13812256]
[135.72312927 300.73840332]
[124.31531525 310.27780151]
[125.52231598 325.22915649]
[126.72931671 340.18051147]
[138.48439026 350.40087891]
[139.49546814 365.58090210]
[129.67945862 376.72457886]
[130.88645935 391.67593384]
[132.09346008 406.62728882]
[133.30044556 421.57864380]
[134.50744629 436.52999878]
[135.71444702 451.48135376]
[145.47045898 464.66287231]
[138.68568420 479.59268188]
[122.33970642 480.91226196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[4 110]
[5 109]
[6 108]
[9 105]
[10 104]
[11 103]
[15 99]
[16 98]
[17 97]
[18 95]
[19 94]
[20 93]
[21 92]
[24 91]
[25 90]
[26 89]
[27 88]
[29 85]
[31 84]
[32 83]
[37 80]
[38 79]
[39 78]
[40 77]
[41 76]
[42 75]
[44 73]
[45 72]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[53 66]
[54 65]
[55 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
