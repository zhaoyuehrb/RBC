%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUGCGCAGGCGCGCUGCCUGGAGUCCUGCCCCCAGCGGCGGUUGCUCCAAUCACCACUGGAGGCUCCCUCCCGAGGCACCCUCGCUGGCGAGCUGAGAGGAA\
) } def
/len { sequence length } bind def

/coor [
[123.26004791 153.45596313]
[108.28637695 154.34434509]
[98.93946075 142.61253357]
[103.15048218 128.21623230]
[105.86051178 113.46307373]
[98.37368774 113.90737915]
[88.92237091 125.55523682]
[79.47105408 137.20309448]
[70.01972961 148.85095215]
[67.97408295 165.12200928]
[52.75716782 171.23571777]
[40.02283859 160.90281677]
[42.87108231 144.75291443]
[58.37187576 139.39964294]
[67.82319641 127.75177765]
[77.27451324 116.10391998]
[86.72583008 104.45606232]
[90.24911499 89.87571716]
[87.15943909 75.19737244]
[84.06976318 60.51902390]
[80.98007965 45.84067917]
[77.89040375 31.16233063]
[74.36711121 16.58198547]
[70.41330719 2.11245251]
[66.45949554 -12.35708141]
[62.50568771 -26.82661438]
[49.20362473 -30.77120209]
[39.69353485 -40.72390366]
[36.41006088 -53.98036575]
[40.11588669 -67.01196289]
[49.72791290 -76.40499115]
[46.20462036 -90.98533630]
[42.68133163 -105.56568146]
[31.91902924 -117.16238403]
[36.45040512 -131.35096741]
[32.92711258 -145.93130493]
[29.40382195 -160.51165771]
[25.88053131 -175.09199524]
[15.11823082 -186.68869019]
[19.64960480 -200.87727356]
[16.12631416 -215.45762634]
[5.36401415 -227.05432129]
[9.89538860 -241.24290466]
[6.37209797 -255.82325745]
[2.84880710 -270.40359497]
[-0.67448354 -284.98394775]
[-4.19777441 -299.56427002]
[-13.79534626 -313.54006958]
[-3.02259922 -326.63146973]
[12.53935909 -319.90377808]
[10.38256931 -303.08758545]
[13.90585995 -288.50723267]
[17.42915154 -273.92687988]
[20.95244217 -259.34652710]
[24.47573280 -244.76620483]
[34.98602295 -234.21238708]
[30.70665932 -218.98091125]
[34.22994995 -204.40057373]
[44.74024200 -193.84675598]
[40.46087646 -178.61528015]
[43.98416519 -164.03494263]
[47.50745773 -149.45460510]
[51.03074646 -134.87425232]
[61.54103851 -124.32044220]
[57.26167297 -109.08897400]
[60.78496552 -94.50862885]
[64.30825806 -79.92828369]
[79.61907959 -74.21640778]
[88.64743805 -60.39754105]
[87.70944977 -43.75204849]
[76.97521973 -30.78042221]
[80.92903137 -16.31088829]
[84.88283539 -1.84135485]
[88.83664703 12.62817860]
[92.60630798 15.79574108]
[94.32601929 21.42682648]
[92.56874847 28.07265091]
[95.65843201 42.75099945]
[98.74810791 57.42934418]
[101.83778381 72.10769653]
[104.92746735 86.78604126]
[138.76925659 101.36755371]
[149.53187561 111.81581879]
[160.44812012 122.10345459]
[171.51562500 132.22819519]
[182.58312988 142.35295105]
[193.79943848 152.31257629]
[205.16210938 162.10490417]
[216.52478027 171.89723206]
[232.72807312 174.42414856]
[238.38816833 189.81556702]
[227.68243408 202.23809814]
[211.62402344 198.91252136]
[206.73243713 183.25990295]
[195.36978149 173.46757507]
[184.00711060 163.67524719]
[176.76951599 161.66056824]
[172.45837402 153.42044067]
[161.39088440 143.29570007]
[150.32337952 133.17095947]
[143.14866638 130.94268799]
[139.08360291 122.57843018]
[128.32099915 112.13016510]
[120.83416748 112.57447052]
[125.27008057 126.90354919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 17]
[7 16]
[8 15]
[9 14]
[18 81]
[19 80]
[20 79]
[21 78]
[22 77]
[23 74]
[24 73]
[25 72]
[26 71]
[31 67]
[32 66]
[33 65]
[35 63]
[36 62]
[37 61]
[38 60]
[40 58]
[41 57]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[82 103]
[83 102]
[84 100]
[85 99]
[86 98]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
