%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUAUUCUUUUUAGAUGAUUAUCCCGGGGCUCCUCUGAGAAAAGUAGGAGUAGAUUGCUGGAAUUACCAUGGGUUAAAAUGAAAGAGG\
) } def
/len { sequence length } bind def

/coor [
[24.34723854 426.18063354]
[12.06184578 435.51190186]
[-3.31992364 436.69711304]
[-16.88980484 429.35803223]
[-24.31769753 415.83657837]
[-23.23338699 400.44735718]
[-13.98287487 388.10104370]
[0.48203489 382.73727417]
[3.60071015 368.06506348]
[6.71938562 353.39285278]
[9.83806133 338.72064209]
[12.95673656 324.04843140]
[16.07541084 309.37622070]
[9.71412086 298.92709351]
[12.34924030 286.56793213]
[23.08348656 279.16278076]
[26.71231461 264.60833740]
[20.71956825 253.94357300]
[23.78441048 241.68394470]
[34.77055359 234.65791321]
[38.90511322 220.23898315]
[43.03967285 205.82005310]
[39.11021423 191.45312500]
[50.35162735 180.32023621]
[54.48619080 165.90132141]
[58.62075043 151.48239136]
[62.75531006 137.06346130]
[66.63759613 122.57457733]
[70.26642609 108.02014160]
[70.00463867 93.02243042]
[65.87007904 78.60350037]
[61.73551941 64.18457794]
[57.60095596 49.76565170]
[53.46639633 35.34672546]
[49.33183670 20.92780113]
[44.94626236 6.58323002]
[40.31100464 -7.68261766]
[26.11726761 -14.63339710]
[21.07483292 -29.61169434]
[28.17528725 -43.73115158]
[43.20605850 -48.61494446]
[57.24965668 -41.36560822]
[61.97426224 -26.28404045]
[54.57685471 -12.31787300]
[59.21210861 1.94797504]
[64.38592529 7.45578241]
[63.75076294 16.79324150]
[67.88532257 31.21216583]
[72.01988220 45.63109207]
[76.15444183 60.05001831]
[80.28900146 74.46894073]
[84.42356110 88.88787079]
[96.45893860 83.11021423]
[107.87857819 86.79104614]
[120.86895752 79.29104614]
[133.85934448 71.79104614]
[146.84971619 64.29104614]
[152.37413025 49.22916031]
[167.63934326 44.29429245]
[180.93518066 53.27204895]
[182.06222534 69.27546692]
[170.15589905 80.02809143]
[154.34971619 77.28142548]
[141.35934448 84.78142548]
[128.36895752 92.28142548]
[115.37857819 99.78142548]
[105.66360474 116.30115509]
[84.82086182 111.64897156]
[81.19203186 126.20340729]
[82.15267944 135.51301575]
[77.17423248 141.19802856]
[73.03967285 155.61695862]
[68.90511322 170.03587341]
[64.77055359 184.45480347]
[68.40428162 199.85307312]
[57.45859909 209.95462036]
[53.32403946 224.37355042]
[49.18947983 238.79246521]
[54.12035751 256.42810059]
[41.26675034 268.23718262]
[37.63792419 282.79162598]
[43.18127441 300.24441528]
[30.74762535 312.49490356]
[27.62895012 327.16711426]
[24.51027489 341.83932495]
[21.39159966 356.51153564]
[18.27292442 371.18374634]
[15.15424919 385.85595703]
[26.18696404 396.63940430]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 88]
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[16 81]
[17 80]
[20 78]
[21 77]
[22 76]
[24 74]
[25 73]
[26 72]
[27 71]
[28 69]
[29 68]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[36 45]
[37 44]
[54 66]
[55 65]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
