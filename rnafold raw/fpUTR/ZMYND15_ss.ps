%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUAUUUACCUUCGAAAAGUGGUGGCGGCUGCAGUCUGGGCCGGGGCCCUGUGCCGCUGAAGAC\
) } def
/len { sequence length } bind def

/coor [
[-31.17749214 227.81375122]
[-40.87903976 239.25402832]
[-50.58058929 250.69430542]
[-60.28213882 262.13458252]
[-69.98368835 273.57485962]
[-72.38150787 289.79776001]
[-87.72735596 295.58023071]
[-100.23474121 284.97375488]
[-97.03713989 268.88937378]
[-81.42396545 263.87332153]
[-71.72241974 252.43302917]
[-62.02086639 240.99275208]
[-52.31932068 229.55247498]
[-42.61777115 218.11219788]
[-49.96308136 207.33888245]
[-54.37869263 195.05809021]
[-55.57753754 182.05130005]
[-53.47744370 169.14776611]
[-48.20673370 157.17153931]
[-40.09641647 146.88893127]
[-29.65938568 138.95945740]
[-17.55799484 133.89352417]
[-4.56202364 132.01954651]
[8.50028515 133.46276855]
[20.79501534 138.13679504]
[31.53581238 145.74879456]
[43.20037460 136.31809998]
[54.86493683 126.88740540]
[66.52950287 117.45671082]
[78.19406128 108.02602386]
[89.85862732 98.59532928]
[93.82112885 91.22488403]
[102.29817200 89.01145935]
[114.39195251 80.13787079]
[126.48573303 71.26428986]
[128.32832336 66.41220093]
[131.46548462 62.96302795]
[135.19990540 61.16843796]
[138.83155823 60.98772430]
[141.76794434 62.11970139]
[155.30419922 55.65674591]
[168.84045410 49.19379044]
[182.37670898 42.73083496]
[191.20890808 28.91329956]
[207.57690430 29.92364502]
[214.64270020 44.72251511]
[205.13760376 58.08609772]
[188.83966064 56.26708984]
[175.30340576 62.73004532]
[161.76715088 69.19300079]
[148.23089600 75.65596008]
[135.35931396 83.35807037]
[123.26554108 92.23165131]
[111.17176056 101.10523987]
[99.28932190 110.25988770]
[87.62475586 119.69058228]
[75.96019745 129.12127686]
[64.29563141 138.55197144]
[52.63106918 147.98266602]
[40.96650314 157.41336060]
[47.13506317 173.54627991]
[47.69075394 190.78688049]
[42.58720779 207.24064636]
[32.39911270 221.10433960]
[18.25755882 230.86360168]
[1.72446024 235.45838928]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[5 10]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[31 55]
[33 54]
[34 53]
[35 52]
[40 51]
[41 50]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
