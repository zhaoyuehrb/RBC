%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGGGCGGGGAGGCGCGGGCGGGUGUGCGCGCGCCGGGCGUGGGUGUGGGUGGGGGUAACCGGCGCGGGCGCCGAGAUAGCGCCGGGCAGAGGGACCCGGCUACCCUGGACAGCGCAUCGCCGCCCGCCCGGGUCGCCGCGCCACAGCCGCUGCGGAUC\
) } def
/len { sequence length } bind def

/coor [
[143.89093018 483.32803345]
[142.56336975 472.74932861]
[144.25402832 462.20114136]
[148.83934021 452.52911377]
[155.96324158 444.51184082]
[165.06477356 438.79852295]
[161.88920593 424.13851929]
[158.71365356 409.47851562]
[155.53808594 394.81848145]
[145.28175354 384.01773071]
[149.92213440 368.89233398]
[146.74656677 354.23233032]
[136.49023438 343.43154907]
[141.13061523 328.30615234]
[137.95504761 313.64614868]
[134.77949524 298.98614502]
[124.52315521 288.18536377]
[129.16352844 273.05996704]
[125.98796844 258.39996338]
[122.81241608 243.73994446]
[119.63685608 229.07994080]
[116.46129608 214.41993713]
[113.28573608 199.75991821]
[110.11018372 185.09991455]
[106.93462372 170.43991089]
[103.75906372 155.77989197]
[100.58350372 141.11988831]
[96.07177734 135.21934509]
[97.49142456 126.14490509]
[94.60073853 111.42607880]
[91.28318024 96.79754639]
[87.54156494 82.27169800]
[83.79994965 67.74584961]
[80.05833435 53.22000122]
[76.17604828 38.73111343]
[72.01353455 24.32023239]
[67.71148682 9.95038986]
[63.40943527 -4.41945267]
[59.10738754 -18.78929520]
[54.80533981 -33.15913773]
[49.32020569 -40.52624512]
[50.56210327 -47.84947586]
[46.53951263 -62.30004120]
[42.51692581 -76.75060272]
[38.49433517 -91.20116425]
[28.67572403 -96.02350616]
[23.26733208 -105.27771759]
[23.86030579 -115.75948334]
[30.01448631 -123.99176025]
[26.55524826 -138.58743286]
[23.09601021 -153.18310547]
[19.63677216 -167.77877808]
[16.17753410 -182.37445068]
[1.11660397 -183.64955139]
[-12.79396820 -189.50944519]
[-24.19676399 -199.36868286]
[-31.98330116 -212.25219727]
[-35.40179062 -226.89175415]
[-34.12970352 -241.85078430]
[-28.30415535 -255.66539001]
[-18.50725746 -266.98751831]
[-5.70796776 -274.71664429]
[-9.16720581 -289.31231689]
[-12.62644386 -303.90798950]
[-16.08568192 -318.50366211]
[-19.54491997 -333.09933472]
[-23.00415802 -347.69500732]
[-26.46339607 -362.29067993]
[-40.62714005 -368.34829712]
[-48.41706467 -381.43148804]
[-47.02586746 -396.41577148]
[-37.19574738 -407.57403564]
[-50.04045868 -417.18615723]
[-50.38990021 -433.22540283]
[-37.97601318 -443.38784790]
[-22.32166672 -439.87771606]
[-15.43553925 -425.38769531]
[-22.60007477 -411.03326416]
[-8.80774307 -405.47363281]
[-0.83959174 -392.70758057]
[-1.92918873 -377.51986694]
[-11.86772346 -365.74990845]
[-8.40848541 -351.15423584]
[-4.94924688 -336.55856323]
[-1.49000883 -321.96289062]
[1.96922922 -307.36721802]
[5.42846727 -292.77154541]
[8.88770580 -278.17587280]
[23.79438782 -277.01321411]
[37.63058472 -271.29220581]
[49.03646088 -261.56152344]
[56.88684464 -248.76455688]
[60.40219116 -234.14796448]
[59.22599792 -219.14024353]
[53.46090698 -205.21214294]
[43.65988541 -193.73248291]
[30.77320671 -185.83369446]
[34.23244476 -171.23802185]
[37.69168091 -156.64234924]
[41.15092087 -142.04667664]
[44.61015701 -127.45099640]
[58.88690567 -114.45272064]
[52.94489670 -95.22375488]
[56.96748734 -80.77319336]
[60.99007797 -66.32263184]
[65.01266479 -51.87206650]
[69.17517853 -37.46118546]
[73.47722626 -23.09134293]
[77.77927399 -8.72150135]
[82.08132935 5.64834166]
[86.38337708 20.01818466]
[91.33878326 25.55135536]
[90.62660980 34.70852280]
[95.47379303 40.33674622]
[94.58418274 49.47838211]
[98.32579803 64.00423431]
[102.06741333 78.53008270]
[105.80903625 93.05593109]
[108.86952209 95.49182892]
[110.82164001 99.28115845]
[111.07877350 103.88894653]
[109.31956482 108.53539276]
[112.21025085 123.25421906]
[115.24351501 137.94433594]
[118.41907501 152.60433960]
[121.59462738 167.26434326]
[124.77018738 181.92436218]
[127.94574738 196.58436584]
[131.12130737 211.24436951]
[134.29685974 225.90437317]
[137.47242737 240.56439209]
[140.64797974 255.22439575]
[143.82353210 269.88439941]
[154.30700684 281.73376465]
[149.43949890 295.81057739]
[152.61505127 310.47058105]
[155.79061890 325.13058472]
[166.27409363 336.97994995]
[161.40658569 351.05676270]
[164.58213806 365.71676636]
[175.06561279 377.56613159]
[170.19810486 391.64294434]
[173.37365723 406.30294800]
[176.54920959 420.96295166]
[179.72477722 435.62295532]
[198.91238403 440.66156006]
[212.88272095 454.63623047]
[217.87577820 473.67440796]
[212.60400391 492.55627441]
[198.58308411 506.14584351]
[203.16297913 520.42956543]
[207.74287415 534.71325684]
[218.33657837 547.94995117]
[208.54983521 561.79394531]
[192.53764343 556.22204590]
[193.45915222 539.29315186]
[188.87925720 525.00946045]
[184.29937744 510.72573853]
[173.74716187 510.43957520]
[163.67698669 507.20407104]
[154.89791870 501.26669312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 145]
[7 144]
[8 143]
[9 142]
[11 140]
[12 139]
[14 137]
[15 136]
[16 135]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[25 126]
[26 125]
[27 124]
[29 123]
[30 122]
[31 118]
[32 117]
[33 116]
[34 115]
[35 113]
[36 111]
[37 110]
[38 109]
[39 108]
[40 107]
[42 106]
[43 105]
[44 104]
[45 103]
[49 101]
[50 100]
[51 99]
[52 98]
[53 97]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
[67 83]
[68 82]
[72 78]
[150 158]
[151 157]
[152 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
