%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAGCCGCGGUGGGAGGAGGCACCGGCCGCGCGGCGGGAGGAGGUGCCGGCCGAGCACCGCAGACAGCGCCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[120.40787506 197.11991882]
[116.33627319 182.68309021]
[112.26466370 168.24626160]
[108.19305420 153.80943298]
[97.29155731 143.66021729]
[100.99243164 128.27795410]
[96.63816833 113.92384338]
[86.37712097 104.42634583]
[89.09598541 90.71141052]
[84.46073151 76.44556427]
[79.82547760 62.17971420]
[75.19022369 47.91386795]
[70.55496979 33.64801788]
[65.91971588 19.38217163]
[51.31008530 14.49699116]
[42.48155212 2.09092879]
[42.64903641 -12.95685959]
[51.53874588 -24.87789536]
[46.90349197 -39.14374161]
[32.95803452 -50.97698212]
[36.95340729 -67.94691467]
[31.76165009 -82.01978302]
[26.56989479 -96.09265137]
[21.37813759 -110.16552734]
[16.18638229 -124.23839569]
[10.99462605 -138.31126404]
[-7.53227663 -145.37995911]
[-15.17137051 -163.35997009]
[-7.62876558 -181.06149292]
[-14.43862247 -194.42658997]
[-21.24847984 -207.79168701]
[-28.05833817 -221.15678406]
[-40.63648224 -232.52456665]
[-33.19492722 -247.75807190]
[-16.49672699 -244.82438660]
[-14.69324017 -227.96664429]
[-7.88338232 -214.60154724]
[-1.07352507 -201.23643494]
[5.73633242 -187.87133789]
[16.44664383 -187.38957214]
[25.99658012 -182.33866882]
[32.52148438 -173.62532043]
[34.71355820 -162.87875366]
[32.08348846 -152.14620972]
[25.06749725 -143.50302124]
[30.25925255 -129.43014526]
[35.45100784 -115.35727692]
[40.64276505 -101.28440857]
[45.83451843 -87.21154022]
[51.02627563 -73.13867188]
[62.00477219 -67.67520905]
[66.35459900 -55.77823257]
[61.16933823 -43.77899933]
[65.80459595 -29.51314926]
[80.00352478 -25.09407043]
[88.98389435 -13.01859856]
[89.13356018 2.20739913]
[80.18556213 14.74691582]
[84.82081604 29.01276398]
[89.45606995 43.27861023]
[94.09132385 57.54446030]
[98.72657776 71.81031036]
[103.36183167 86.07615662]
[113.62287903 95.57365417]
[110.90401459 109.28858948]
[116.67819214 116.71645355]
[115.42926025 124.20634460]
[126.62199402 135.38816833]
[122.62988281 149.73782349]
[126.70149231 164.17465210]
[130.77310181 178.61148071]
[134.84471130 193.04830933]
[149.44874573 198.29248047]
[158.15336609 211.13807678]
[157.61146545 226.64569092]
[148.03140259 238.85232544]
[133.09690857 243.06428528]
[118.55060577 237.66198730]
[109.98584747 224.72271729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[6 67]
[7 65]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[18 54]
[19 53]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[29 39]
[30 38]
[31 37]
[32 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
