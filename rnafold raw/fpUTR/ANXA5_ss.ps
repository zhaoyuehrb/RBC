%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCUUGGAUCAGUCUAGGUGCAGCUGCCGGAUCCUUCAGCGUCUGCAUCUCGGCGUCGCCCCGCGUACCGUCGCCCGGCUCUCCGCCGCUCUCCCGGGGUUUCGGGGCACUUGGGUCCCACAGUCUGGUCCUGCUUCACCUUCCCCUGACCUGAGUAGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[144.09397888 627.04931641]
[143.10113525 612.08221436]
[141.96670532 597.12518311]
[140.83227539 582.16809082]
[139.69783020 567.21105957]
[138.56340027 552.25402832]
[137.42897034 537.29699707]
[136.29454041 522.33996582]
[135.16011047 507.38290405]
[126.48242188 495.27725220]
[133.15386963 480.93142700]
[132.01943970 465.97439575]
[130.88500977 451.01736450]
[129.75057983 436.06033325]
[115.52221680 427.91363525]
[108.87216187 412.74594116]
[112.59436798 396.43792725]
[125.41876984 385.44158936]
[124.00149536 370.50869751]
[122.58421326 355.57580566]
[121.16693878 340.64291382]
[119.74966431 325.71002197]
[110.84443665 313.77075195]
[117.24320984 299.30126953]
[115.82593536 284.36837769]
[114.40866089 269.43548584]
[102.05922699 254.59001160]
[110.60529327 236.36471558]
[108.62394714 221.49613953]
[106.64260101 206.62757874]
[104.66125488 191.75901794]
[102.67991638 176.89044189]
[100.69857025 162.02188110]
[98.71722412 147.15330505]
[87.50180054 145.48489380]
[77.00854492 141.18826294]
[67.84378052 134.51170349]
[60.53706360 125.84099579]
[55.51058960 115.67713928]
[53.05479813 104.60742950]
[53.31159210 93.27149200]
[38.99403000 88.79852295]
[24.67646980 84.32555389]
[10.35890961 79.85259247]
[-3.95865154 75.37962341]
[-16.32699966 84.74997711]
[-31.84159851 85.02716064]
[-44.53676987 76.10459137]
[-49.53096008 61.41317368]
[-44.90380096 46.60206223]
[-32.43452835 37.36643219]
[-16.91783524 37.25756454]
[-4.32020473 46.31732941]
[0.51431710 61.06205750]
[14.83187771 65.53502655]
[29.14943886 70.00799561]
[43.46699905 74.48096466]
[57.78456116 78.95393372]
[70.63939667 63.08069611]
[88.99939728 54.12989044]
[87.86496735 39.17285156]
[86.73052979 24.21580887]
[85.59609985 9.25876904]
[84.46166992 -5.69827175]
[80.39689636 -20.13702583]
[73.56175995 -33.48921204]
[66.72661591 -46.84139633]
[51.61152267 -51.45761490]
[44.26155472 -65.44880676]
[49.03731918 -80.51425171]
[63.10543823 -87.71588898]
[78.11955261 -82.78110504]
[85.17204285 -68.63763428]
[80.07880402 -53.67653656]
[86.91394043 -40.32435226]
[93.74908447 -26.97216415]
[108.39587402 -30.21121025]
[123.04137421 -33.44995499]
[123.60899353 -48.43921280]
[124.17661285 -63.42846680]
[124.74423981 -78.41772461]
[114.93585968 -91.11320496]
[118.88597107 -106.66236115]
[133.56439209 -113.13719940]
[147.71109009 -105.57079315]
[150.47392273 -89.76742554]
[139.73348999 -77.85010529]
[139.16587830 -62.86084366]
[138.59825134 -47.87158966]
[138.03062439 -32.88233185]
[149.92515564 -23.74339676]
[155.41679382 -9.78481960]
[152.93797302 5.00894260]
[143.19624329 16.41503143]
[128.97239685 21.17759514]
[114.32659149 17.93716621]
[103.43945312 7.61871958]
[99.41870880 -6.83270311]
[100.55314636 8.12433720]
[101.68757629 23.08137894]
[102.82200623 38.03841782]
[103.95643616 52.99546051]
[114.46492004 55.10182190]
[124.22668457 59.52595901]
[132.73779297 66.03948212]
[139.55888367 74.30613708]
[153.27742004 68.23968506]
[166.99595642 62.17323303]
[180.71449280 56.10678101]
[194.43302917 50.04032898]
[199.89950562 35.21154022]
[214.28523254 28.66734695]
[229.05540466 34.29030991]
[235.44712830 48.74441910]
[229.66833496 63.45431137]
[215.14744568 69.69287109]
[200.49948120 63.75886154]
[186.78094482 69.82531738]
[173.06240845 75.89176941]
[159.34387207 81.95822144]
[145.62533569 88.02467346]
[146.78996277 105.98162842]
[141.14538574 123.06809998]
[129.51306152 136.79754639]
[113.58579254 145.17196655]
[115.56713867 160.04052734]
[117.54847717 174.90910339]
[119.52982330 189.77766418]
[121.51116943 204.64622498]
[123.49251556 219.51480103]
[125.47386169 234.38336182]
[134.52447510 240.51571655]
[138.59902954 250.42292786]
[136.56652832 260.71643066]
[129.34155273 268.01818848]
[130.75883484 282.95108032]
[132.17610168 297.88397217]
[141.18270874 310.89135742]
[134.68255615 324.29275513]
[136.09983826 339.22564697]
[137.51710510 354.15853882]
[138.93438721 369.09143066]
[140.35166931 384.02432251]
[152.72776794 390.14892578]
[160.39117432 401.50540161]
[161.42276001 415.05804443]
[155.65919495 427.24761963]
[144.70762634 434.92587280]
[145.84205627 449.88293457]
[146.97648621 464.83996582]
[148.11091614 479.79699707]
[156.86975098 492.97250366]
[150.11715698 506.24847412]
[151.25158691 521.20550537]
[152.38601685 536.16253662]
[153.52044678 551.11962891]
[154.65487671 566.07666016]
[155.78930664 581.03369141]
[156.92373657 595.99072266]
[158.05816650 610.94775391]
[161.84202576 619.31121826]
[159.06980896 626.19812012]
[168.50965881 639.60784912]
[161.37184143 654.37213135]
[144.99911499 655.30267334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 162]
[2 160]
[3 159]
[4 158]
[5 157]
[6 156]
[7 155]
[8 154]
[9 153]
[11 151]
[12 150]
[13 149]
[14 148]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[24 137]
[25 136]
[26 135]
[28 131]
[29 130]
[30 129]
[31 128]
[32 127]
[33 126]
[34 125]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[60 102]
[61 101]
[62 100]
[63 99]
[64 98]
[65 76]
[66 75]
[67 74]
[78 90]
[79 89]
[80 88]
[81 87]
[106 121]
[107 120]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
