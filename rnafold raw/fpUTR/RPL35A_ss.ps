%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUGAAGGGUCUGCUGCUGAAAUUUGGGGGCAAAUAACCGGAGUAGGUUUGUUCCUGUGCCUUGGCGAGUCGCCGGCCUGCUGGGAACGGGACUUCUAAAAGGAACU\
) } def
/len { sequence length } bind def

/coor [
[83.29408264 279.70117188]
[75.11541748 267.00134277]
[70.84733582 252.51133728]
[70.83582306 237.40582275]
[75.08181763 222.90933228]
[83.24111176 210.19703674]
[94.65226746 200.29945374]
[108.39024353 194.01893616]
[106.23606873 179.17442322]
[104.08190155 164.32991028]
[101.92772675 149.48539734]
[99.77355194 134.64088440]
[97.61938477 119.79637909]
[85.16236877 111.44036865]
[70.61026001 115.07852173]
[56.05815125 118.71666718]
[44.54667664 129.57008362]
[30.32280350 125.15072632]
[15.77069378 128.78887939]
[1.21858537 132.42701721]
[-13.33352375 136.06517029]
[-27.23320961 145.77264404]
[-40.40913010 135.10346985]
[-33.80435562 119.48893738]
[-16.97167206 121.51306152]
[-2.41956425 117.87491608]
[12.13254452 114.23676300]
[26.68465233 110.59861755]
[37.15526581 100.00543213]
[52.42000198 104.16455841]
[66.97211456 100.52641296]
[81.52422333 96.88825989]
[84.06678772 89.83238983]
[69.95512390 84.74703217]
[75.04069519 70.63544464]
[89.15192413 75.72064209]
[91.69449615 68.66477203]
[82.80790710 56.58053970]
[73.92132568 44.49630737]
[65.03473663 32.41207886]
[49.37522125 30.27783203]
[39.87805557 17.64535904]
[42.17774582 2.00927901]
[54.90992355 -7.35379744]
[70.52081299 -4.88892317]
[79.74875641 7.94153500]
[77.11897278 23.52549362]
[86.00555420 35.60972595]
[94.89213562 47.69395447]
[103.77872467 59.77818298]
[118.62323761 61.93235779]
[130.57815552 52.87255478]
[142.53306580 43.81275558]
[154.48797607 34.75295258]
[166.44290161 25.69315338]
[178.39781189 16.63335228]
[190.35272217 7.57355070]
[202.17584229 -1.65758574]
[213.86471558 -11.05813980]
[225.27781677 -20.79163933]
[236.40568542 -30.84999847]
[247.53355408 -40.90835953]
[250.01332092 -47.30399704]
[254.70185852 -50.84651184]
[259.60446167 -51.20285797]
[271.29333496 -60.60341263]
[282.98217773 -70.00396729]
[294.67105103 -79.40451813]
[303.22454834 -94.04261780]
[319.65844727 -89.87561798]
[320.20364380 -72.93044281]
[304.07162476 -67.71565247]
[292.38275146 -58.31510162]
[280.69387817 -48.91454697]
[269.00500488 -39.51399231]
[257.59191895 -29.78049278]
[246.46405029 -19.72213364]
[235.33618164 -9.66377354]
[234.21038818 -4.87889767]
[229.97216797 -0.80834651]
[223.26527405 0.63072515]
[211.57640076 10.03127956]
[208.28662109 16.77790833]
[199.41253662 19.52846527]
[187.45761108 28.58826637]
[175.50270081 37.64806747]
[163.54779053 46.70787048]
[151.59286499 55.76766968]
[139.63795471 64.82746887]
[127.68303680 73.88727570]
[112.46389771 117.64220428]
[114.61806488 132.48672485]
[116.77223969 147.33122253]
[118.92641449 162.17573547]
[121.08058167 177.02024841]
[123.23475647 191.86476135]
[138.19126892 193.98126221]
[151.94506836 200.22700500]
[163.38122559 210.09570312]
[171.57264709 222.78732300]
[175.85528564 237.27302551]
[175.88197327 252.37852478]
[171.65054321 266.87927246]
[163.50401306 279.59976196]
[152.10281372 289.50881958]
[138.37115479 295.80313110]
[123.42221832 297.97244263]
[108.46784210 295.84094238]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 96]
[9 95]
[10 94]
[11 93]
[12 92]
[13 91]
[14 32]
[15 31]
[16 30]
[18 28]
[19 27]
[20 26]
[21 25]
[37 50]
[38 49]
[39 48]
[40 47]
[51 90]
[52 89]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[58 82]
[59 81]
[60 78]
[61 77]
[62 76]
[65 75]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
