%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAAAAGAGCCUCGGGCCAGGAGCGCAGGAACCAGACCGUGUCCCGCGGGGCUGUCACCUCCGCCUCUGCUCCCCGACCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[80.86219025 334.65792847]
[72.91425323 347.68838501]
[60.09503555 355.97271729]
[44.94980621 357.86608887]
[30.48566628 352.99255371]
[19.57447433 342.31976318]
[14.38265991 327.96679688]
[15.94106007 312.78344727]
[23.94025421 299.78436279]
[36.79199219 291.55056763]
[51.94456100 289.71685791]
[56.73408127 275.50204468]
[61.52360535 261.28726196]
[65.53652954 246.83401489]
[68.76108551 232.18470764]
[71.98564148 217.53540039]
[75.21019745 202.88609314]
[78.43475342 188.23677063]
[71.08480835 170.50311279]
[84.34426880 155.52825928]
[86.50335693 140.68446350]
[88.66244507 125.84066772]
[90.82154083 110.99687195]
[85.82521820 97.93822479]
[94.33466339 86.84403992]
[96.49375153 72.00023651]
[98.65284729 57.15644073]
[92.98250580 42.38627625]
[102.47118378 30.90524101]
[104.63027954 16.06144142]
[106.78936768 1.21764457]
[95.85194397 -9.63035107]
[93.42771912 -24.66286659]
[100.23945618 -38.08166885]
[113.48798370 -44.83552170]
[115.64707184 -59.67932129]
[117.80615997 -74.52311707]
[110.54707336 -91.32807159]
[121.68177032 -104.76264954]
[123.30355835 -119.67471313]
[124.92533875 -134.58679199]
[126.54712677 -149.49885559]
[128.16891479 -164.41091919]
[123.87052917 -180.81092834]
[138.43969727 -189.48130798]
[150.80438232 -177.88169861]
[143.08097839 -162.78913879]
[141.45919800 -147.87707520]
[139.83741760 -132.96499634]
[138.21562195 -118.05293274]
[136.59384155 -103.14086151]
[143.98040771 -93.37924194]
[142.59744263 -80.80979156]
[132.64996338 -72.36402893]
[130.49087524 -57.52022934]
[128.33178711 -42.67643356]
[139.10728455 -32.42818832]
[141.81401062 -17.62488747]
[135.20774841 -3.90589142]
[121.63316345 3.37673426]
[119.47407532 18.22053146]
[117.31498718 33.06433105]
[123.13975525 46.77276993]
[113.49664307 59.31553268]
[111.33755493 74.15933228]
[109.17845917 89.00312805]
[114.17478180 102.06177521]
[105.66533661 113.15596008]
[103.50624847 127.99976349]
[101.34715271 142.84355164]
[99.18806458 157.68736267]
[106.35344696 166.25427246]
[107.46403503 177.14373779]
[102.38608551 186.58868408]
[93.08406830 191.46133423]
[89.85950470 206.11064148]
[86.63494873 220.75994873]
[83.41039276 235.40925598]
[80.18583679 250.05856323]
[81.93453979 255.47924805]
[81.32282257 260.47393799]
[78.96273041 264.16464233]
[75.73840332 266.07678223]
[70.94888306 280.29159546]
[66.15935516 294.50637817]
[77.11249542 305.13613892]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 85]
[12 84]
[13 83]
[14 79]
[15 78]
[16 77]
[17 76]
[18 75]
[20 71]
[21 70]
[22 69]
[23 68]
[25 66]
[26 65]
[27 64]
[29 62]
[30 61]
[31 60]
[35 56]
[36 55]
[37 54]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
