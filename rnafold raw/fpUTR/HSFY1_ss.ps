%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAAGUGUACAUGCUUAGGCCUUCUGAAGCAGCAUUUGAAGCUGCAGUCCUGAAAACCAUGCAGGCCGGAAGAGUAGAUAAAGAAAUAUUUAUUUGAG\
) } def
/len { sequence length } bind def

/coor [
[149.64643860 467.24810791]
[148.24874878 452.31338501]
[146.85107422 437.37863159]
[145.45338440 422.44390869]
[144.05569458 407.50915527]
[142.65800476 392.57443237]
[141.26031494 377.63967896]
[139.86262512 362.70492554]
[138.46493530 347.77020264]
[137.06724548 332.83544922]
[122.30785370 330.36364746]
[108.68079376 324.15075684]
[97.11746216 314.61483765]
[88.40991974 302.40127563]
[83.15662384 288.33914185]
[81.72128296 273.38491821]
[84.20774078 258.55740356]
[90.45240784 244.86831665]
[100.03507996 233.25332642]
[112.30717468 224.50796509]
[126.43562317 219.23329163]
[125.03793335 204.29855347]
[123.40814972 189.38735962]
[121.54666901 174.50331116]
[119.68518829 159.61926270]
[117.82370758 144.73521423]
[115.96222687 129.85116577]
[114.10074615 114.96711731]
[97.14067078 119.03963470]
[84.40257263 108.86984253]
[84.60084534 93.71327972]
[74.76191711 82.39093781]
[64.92298126 71.06859589]
[55.08405685 59.74625015]
[45.24512482 48.42390823]
[29.61405182 48.87500381]
[17.38213158 39.13261414]
[14.32490921 23.79679298]
[21.88590813 10.10864830]
[36.49505615 4.53130245]
[51.25436401 9.69820881]
[59.19493103 23.16971016]
[56.56747055 38.58497620]
[66.40640259 49.90732193]
[76.24533081 61.22966766]
[86.08425903 72.55200958]
[95.92318726 83.87435150]
[107.93204498 83.17821503]
[118.58760834 91.20531464]
[119.98011017 81.99371338]
[126.18159485 77.73142242]
[133.74884033 64.78009796]
[141.31608582 51.82877350]
[148.88333130 38.87744904]
[141.79379272 25.17554665]
[143.26025391 9.81803894]
[152.81477356 -2.29454970]
[167.40852356 -7.29713583]
[182.38470459 -3.59341335]
[192.96446228 7.63477373]
[195.77185059 22.80455208]
[189.91102600 37.07529831]
[177.25215149 45.89327240]
[161.83465576 46.44469070]
[154.26741028 59.39601517]
[146.70016479 72.34734344]
[139.13291931 85.29866791]
[131.76800537 98.36611176]
[128.98478699 113.10563660]
[130.84626770 127.98968506]
[132.70774841 142.87373352]
[134.56924438 157.75778198]
[136.43072510 172.64183044]
[138.29220581 187.52587891]
[142.52854919 195.82322693]
[139.97267151 202.90086365]
[141.37036133 217.83561707]
[156.23217773 220.39718628]
[169.91384888 226.71362305]
[181.48526001 236.34887695]
[190.16146851 248.64157104]
[195.35595703 262.75024414]
[196.72027588 277.71112061]
[194.16738892 292.50378418]
[187.87724304 306.12094116]
[178.28408813 317.63684082]
[166.04644775 326.27029419]
[152.00198364 331.43777466]
[153.39967346 346.37249756]
[154.79736328 361.30725098]
[156.19505310 376.24200439]
[157.59274292 391.17672729]
[158.99043274 406.11148071]
[160.38812256 421.04620361]
[161.78581238 435.98095703]
[163.18350220 450.91567993]
[164.58119202 465.85043335]
[174.50460815 478.90637207]
[167.91088867 493.92153931]
[151.58308411 495.44958496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 94]
[5 93]
[6 92]
[7 91]
[8 90]
[9 89]
[10 88]
[21 77]
[22 76]
[23 74]
[24 73]
[25 72]
[26 71]
[27 70]
[28 69]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[49 68]
[51 67]
[52 66]
[53 65]
[54 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
