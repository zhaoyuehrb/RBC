%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCGGACCGAGCGGCGAGCGGGCAGGACAGAGGUGGACCUCAGCAGGCUCUGCAUAACCAGCCGUGUGUG\
) } def
/len { sequence length } bind def

/coor [
[84.13928223 293.14590454]
[68.72611237 297.59716797]
[55.71984482 288.20480347]
[55.09776688 272.17382812]
[67.33708191 261.80181885]
[69.90647888 247.02351379]
[64.46363068 233.15899658]
[74.45045471 220.88813782]
[77.01985168 206.10983276]
[79.27068329 191.27967834]
[81.20190430 176.40451050]
[78.86766052 169.14562988]
[83.54959106 160.93617249]
[86.11898804 146.15788269]
[88.36981964 131.32771301]
[90.30104065 116.45255280]
[81.54316711 104.90933228]
[83.40866852 90.54040527]
[94.82379913 81.61622620]
[96.43451691 66.70295715]
[97.72399139 51.75848389]
[99.01345825 36.81401062]
[100.30293274 21.86953926]
[101.27056122 6.90078068]
[101.91589355 -8.08533096]
[91.51039886 -19.67685509]
[92.37834167 -34.86571121]
[103.49321747 -44.71432495]
[100.67214966 -53.73414993]
[104.50247955 -60.32722092]
[97.98015594 -74.74143982]
[106.78290558 -86.75646210]
[108.07238007 -101.70093536]
[109.36185455 -116.64540863]
[110.65132141 -131.58988953]
[103.21665192 -146.20690918]
[112.38363647 -159.80464172]
[128.72207642 -158.39489746]
[135.42437744 -143.42790222]
[125.59579468 -130.30041504]
[124.30632782 -115.35594177]
[123.01685333 -100.41146851]
[121.72737885 -85.46699524]
[128.34193420 -72.12169647]
[119.44695282 -59.03775024]
[118.47932434 -44.06899261]
[128.70642090 -33.30134583]
[128.26544189 -18.09410667]
[116.90200806 -7.43999720]
[116.25667572 7.54611444]
[119.20628357 14.57746220]
[115.24740601 23.15900993]
[113.95793152 38.10348129]
[112.66846466 53.04795456]
[111.37899017 67.99243164]
[114.02336884 75.14416504]
[109.69895935 83.54744720]
[118.45683289 95.09066772]
[116.59133148 109.45959473]
[105.17620087 118.38377380]
[103.24497986 133.25894165]
[105.28022003 142.48788452]
[100.89729309 148.72727966]
[98.32789612 163.50556946]
[96.07706451 178.33573914]
[94.14583588 193.21089172]
[96.18107605 202.43984985]
[91.79814911 208.67922974]
[89.22875214 223.45753479]
[94.48782349 238.37908936]
[84.68478394 249.59291077]
[82.11538696 264.37121582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 72]
[6 71]
[8 69]
[9 68]
[10 66]
[11 65]
[13 64]
[14 63]
[15 61]
[16 60]
[19 57]
[20 55]
[21 54]
[22 53]
[23 52]
[24 50]
[25 49]
[28 46]
[30 45]
[32 43]
[33 42]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
