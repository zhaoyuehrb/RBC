%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAAGUUCUGCCUUGUCUCCGCCGCGGGUCAGGGGUGAGAGCUGGAAUCUCUGCACGGGCCUUGGAAAACGACUGUCUUCUUCUGCCAAA\
) } def
/len { sequence length } bind def

/coor [
[152.70188904 140.90138245]
[151.03791809 126.90021515]
[136.97163391 121.69063568]
[122.90534973 116.48105621]
[108.83906555 111.27147675]
[95.02521515 113.43231201]
[85.95135498 102.79479980]
[71.88507080 97.58522034]
[57.81879044 92.37564087]
[43.75250626 87.16606140]
[29.68622589 81.95648956]
[15.53396225 76.98522186]
[1.29975629 72.25369263]
[-13.01233292 67.76324463]
[-27.39822197 63.51516342]
[-41.78411102 59.26708221]
[-56.16999817 55.01899719]
[-65.49944305 55.58109283]
[-70.96553802 50.37686920]
[-85.19973755 45.64533997]
[-99.43394470 40.91380692]
[-113.66815186 36.18227768]
[-128.05404663 31.93419647]
[-142.57519531 28.17440796]
[-157.09635925 24.41461945]
[-173.94538879 26.29782486]
[-180.41926575 10.62858200]
[-167.15454102 0.07002140]
[-153.33656311 9.89346313]
[-138.81541443 13.65325069]
[-124.29425049 17.41303825]
[-119.63674164 15.69015312]
[-113.84277344 17.02684593]
[-108.93662262 21.94807243]
[-94.70241547 26.67960167]
[-80.46820831 31.41113281]
[-66.23400116 36.14266205]
[-51.92191696 40.63311005]
[-37.53602600 44.88119125]
[-23.15013885 49.12927628]
[-8.76424980 53.37735748]
[-1.30487168 52.22852707]
[6.03128624 58.01948547]
[20.26549339 62.75101852]
[27.75941658 61.85477448]
[34.89580536 67.89020538]
[48.96208572 73.09978485]
[63.02836609 78.30936432]
[77.09465027 83.51894379]
[91.16093445 88.72852325]
[104.97478485 86.56768799]
[114.04864502 97.20520020]
[128.11492920 102.41477966]
[142.18121338 107.62435913]
[156.24749756 112.83393860]
[168.76748657 102.18521881]
[184.84657288 99.26045227]
[200.13912964 104.75519562]
[210.55955505 117.10224915]
[213.37373352 132.91722107]
[227.60794067 137.64874268]
[241.84214783 142.38027954]
[254.44183350 133.51719666]
[269.66647339 133.76972961]
[281.68099976 142.83148193]
[286.00402832 157.05993652]
[300.23825073 161.79147339]
[314.47244263 166.52301025]
[328.70666504 171.25453186]
[344.24291992 168.26530457]
[353.87979126 179.62222290]
[368.11401367 184.35375977]
[384.05978394 180.52441406]
[395.15121460 192.60386658]
[389.97833252 208.16578674]
[373.86257935 211.20141602]
[363.38247681 198.58796692]
[349.14828491 193.85643005]
[334.63015747 197.18408203]
[323.97512817 185.48873901]
[309.74093628 180.75720215]
[295.50671387 176.02568054]
[281.27252197 171.29414368]
[269.29168701 180.10311890]
[254.24311829 180.16893005]
[241.89698792 171.25679016]
[237.11061096 156.61448669]
[222.87640381 151.88294983]
[208.64219666 147.15142822]
[198.96003723 156.93818665]
[185.92832947 161.57899475]
[172.10717773 160.10086060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 55]
[3 54]
[4 53]
[5 52]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[12 44]
[13 43]
[14 41]
[15 40]
[16 39]
[17 38]
[19 37]
[20 36]
[21 35]
[22 34]
[23 31]
[24 30]
[25 29]
[60 89]
[61 88]
[62 87]
[66 83]
[67 82]
[68 81]
[69 80]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
