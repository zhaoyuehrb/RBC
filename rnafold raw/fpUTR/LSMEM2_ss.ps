%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUUUAGGCCAAGGCUGGGAGGCAGCCAGGCCUUCCCUGGGCUCACAAAGGAGCCACUGCUGCAUUUGUCCAGUCCUGCUACUGG\
) } def
/len { sequence length } bind def

/coor [
[67.98317719 439.73809814]
[52.86934280 438.11318970]
[39.53019714 430.82379150]
[29.99986839 418.98141479]
[25.73166084 404.39202881]
[27.37644768 389.28033447]
[34.68340683 375.95077515]
[46.53828430 366.43603516]
[61.13329697 362.18704224]
[62.73672485 347.27297974]
[64.34014893 332.35891724]
[61.94255066 327.98770142]
[62.43115997 322.03439331]
[66.62725830 316.45172119]
[69.29055786 301.69006348]
[71.95385742 286.92840576]
[74.35324860 272.12155151]
[76.48796844 257.27423096]
[78.62269592 242.42689514]
[80.75741577 227.57957458]
[82.89213562 212.73225403]
[70.04974365 198.35382080]
[71.58919525 178.84011841]
[86.98545837 166.27935791]
[87.52084351 151.28890991]
[88.05622864 136.29847717]
[88.59161377 121.30802917]
[89.12699890 106.31758881]
[84.64479828 92.00291443]
[75.65563202 79.99479675]
[66.66646576 67.98667908]
[57.67729950 55.97855759]
[42.06608200 52.28134918]
[35.35383987 37.70995712]
[42.68963623 23.44231415]
[58.44607162 20.42333031]
[70.53616333 30.96891403]
[69.68541718 46.98939514]
[78.67458344 58.99751282]
[87.66374969 71.00563049]
[96.65291595 83.01374817]
[111.53597260 81.14437866]
[117.27622223 67.28618622]
[123.01647949 53.42798996]
[128.75672913 39.56979752]
[134.49697876 25.71160507]
[128.21813965 11.20809555]
[134.11148071 -3.45629072]
[148.68055725 -9.58143330]
[163.28181458 -3.53339410]
[169.25257874 11.09963322]
[163.05050659 25.63613319]
[148.35517883 31.45185661]
[142.61491394 45.31005096]
[136.87466431 59.16824341]
[131.13441467 73.02643585]
[125.39416504 86.88462830]
[123.31715393 97.65786743]
[117.59320831 104.99270630]
[110.43656921 107.98580933]
[104.11743927 106.85297394]
[103.58206177 121.84341431]
[103.04667664 136.83386230]
[102.51129150 151.82429504]
[101.97590637 166.81474304]
[111.28596497 172.79374695]
[117.12303925 182.09675598]
[118.43643951 192.91792297]
[115.04573822 203.19139099]
[107.66188049 210.98573303]
[97.73945618 214.86697388]
[95.60473633 229.71429443]
[93.47001648 244.56161499]
[91.33528900 259.40893555]
[89.20056915 274.25625610]
[91.10090637 283.42947388]
[86.71552277 289.59170532]
[84.05222321 304.35336304]
[81.38892365 319.11502075]
[79.25420380 333.96234131]
[77.65077972 348.87640381]
[76.04734802 363.79046631]
[89.40562439 371.04476929]
[98.96707916 382.86199951]
[103.27365875 397.44012451]
[101.66863251 412.55609131]
[94.39676666 425.90481567]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 82]
[10 81]
[11 80]
[14 79]
[15 78]
[16 77]
[17 75]
[18 74]
[19 73]
[20 72]
[21 71]
[24 65]
[25 64]
[26 63]
[27 62]
[28 61]
[29 41]
[30 40]
[31 39]
[32 38]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
