%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACAACAGGAAGCAGCUUACAAACUCGGUGAACAACUGAGGGAACCAAACCAGAGACGCGCUGAACAGAGAGAAUCAGGCUCAAAGCAAGUGGAAGUGGGCAGAGAUUCCACCAGGACUGGUGCAAGGCGCAGAGCCAGCCAGAUUUGAGAAGAAGGCAAAAAG\
) } def
/len { sequence length } bind def

/coor [
[160.34127808 306.52813721]
[160.78967285 291.53485107]
[164.50553894 277.00238037]
[171.30905151 263.63406372]
[180.87095642 252.07681274]
[192.72851562 242.88996887]
[206.30789185 236.51809692]
[220.95190430 233.26957703]
[235.95187378 233.30162048]
[250.58065796 236.61224365]
[239.34580994 226.67353821]
[228.11094666 216.73481750]
[216.87609863 206.79611206]
[199.86953735 211.42805481]
[183.32958984 204.89686584]
[173.91117859 189.62867737]
[175.52429199 171.60456848]
[163.92355347 162.09548950]
[152.32279968 152.58641052]
[140.72204590 143.07733154]
[129.12130737 133.56825256]
[117.52055359 124.05916595]
[106.37732697 129.07135010]
[94.15928650 129.18388367]
[82.92562103 124.37783813]
[74.56964111 115.46318817]
[60.20280075 119.77525330]
[45.83596039 124.08731079]
[31.46911812 128.39936829]
[17.10227585 132.71142578]
[2.73543382 137.02348328]
[-6.10425234 150.41152954]
[-22.09514809 151.70411682]
[-32.97040939 139.90969849]
[-30.38746071 124.07593536]
[-16.32772446 116.34914398]
[-1.57662559 122.65664673]
[12.79021645 118.34458923]
[27.15705872 114.03252411]
[41.52389908 109.72046661]
[55.89074326 105.40840912]
[70.25758362 101.09635162]
[70.52723694 95.85639191]
[71.71286011 90.74520874]
[73.77761841 85.92164612]
[76.65732574 81.53562927]
[80.26249695 77.72345734]
[73.46521759 64.35195923]
[66.66793060 50.98046494]
[50.88319016 52.99212646]
[35.38829041 49.49058914]
[22.04748344 40.91592407]
[12.45942307 28.31743050]
[7.76560688 13.22527218]
[8.51449013 -2.53537488]
[14.59747028 -17.06504440]
[25.26419067 -28.61890030]
[18.21658134 -41.86016846]
[11.39246559 -47.99800110]
[11.16359997 -55.41746521]
[4.36631632 -68.78896332]
[-2.34113383 -75.05407715]
[-2.43039274 -82.47653198]
[-8.97494411 -95.97352600]
[-15.51949596 -109.47052002]
[-22.06404877 -122.96751404]
[-37.38859558 -123.99407959]
[-50.13781738 -132.55871582]
[-56.88224411 -146.35755920]
[-55.80764771 -161.67881775]
[-47.20310211 -174.40112305]
[-33.38317490 -181.10226440]
[-18.06536484 -179.97966003]
[-5.37008333 -171.33526611]
[1.28770280 -157.49441528]
[0.11708216 -142.18019104]
[-8.56705379 -129.51206970]
[-2.02250242 -116.01507568]
[4.52204943 -102.51808167]
[11.06660080 -89.02108765]
[17.73781395 -75.58625031]
[24.53509712 -62.21475220]
[31.45784950 -48.90777969]
[38.50545883 -35.66651154]
[52.47890854 -38.06749725]
[66.53113556 -36.02634811]
[79.28253937 -29.73002815]
[89.47706604 -19.78392792]
[96.10595703 -7.15367031]
[98.50753784 6.92862892]
[96.43325806 21.08455467]
[90.07334900 33.92431259]
[80.03942871 44.18318176]
[86.83670807 57.55467606]
[93.63399506 70.92617798]
[114.88800049 74.22868347]
[128.36636353 90.99094391]
[127.02963257 112.45841980]
[138.63038635 121.96749878]
[150.23112488 131.47657776]
[161.83187866 140.98565674]
[173.43263245 150.49473572]
[185.03338623 160.00382996]
[196.65185547 155.25997925]
[209.11169434 155.91958618]
[220.03694153 161.79510498]
[227.37062073 171.71025085]
[229.76194763 183.73503113]
[226.81481934 195.56124878]
[238.04966736 205.49996948]
[249.28453064 215.43867493]
[260.51937866 225.37739563]
[266.62185669 225.90782166]
[271.48156738 228.72131348]
[274.38330078 232.92460632]
[288.82870483 236.96565247]
[303.27413940 241.00668335]
[317.71954346 245.04772949]
[333.09393311 241.31430054]
[343.26620483 252.19430542]
[357.71160889 256.23535156]
[372.15701294 260.27639771]
[386.60244751 264.31744385]
[401.04785156 268.35848999]
[408.63787842 262.63635254]
[417.87780762 261.09683228]
[426.65069580 263.96328735]
[433.00598145 270.46423340]
[435.59307861 279.03561401]
[449.78756714 283.88504028]
[463.98205566 288.73443604]
[478.95996094 282.98626709]
[492.71911621 291.23645020]
[494.70465088 307.15615845]
[483.39343262 318.53317261]
[467.46246338 316.63998413]
[459.13262939 302.92892456]
[444.93814087 298.07949829]
[430.74368286 293.23010254]
[410.96060181 299.03076172]
[397.00680542 282.80389404]
[382.56140137 278.76284790]
[368.11596680 274.72180176]
[353.67056274 270.68075562]
[339.22515869 266.63970947]
[324.88400269 270.66220093]
[313.67849731 259.49313354]
[299.23309326 255.45210266]
[284.78765869 251.41105652]
[270.34225464 247.37001038]
[281.06402588 257.86019897]
[289.23263550 270.44088745]
[294.45275879 284.50326538]
[296.47183228 299.36672974]
[295.19210815 314.31204224]
[290.67550659 328.61590576]
[283.14059448 341.58609009]
[272.95208740 352.59487915]
[260.60296631 361.10955811]
[246.69093323 366.71804810]
[231.88920593 369.14889526]
[216.91413879 368.28451538]
[202.49041748 364.16668701]
[189.31608582 356.99472046]
[178.02871704 347.11569214]
[169.17454529 335.00769043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 112]
[11 111]
[12 110]
[13 109]
[17 103]
[18 102]
[19 101]
[20 100]
[21 99]
[22 98]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[47 95]
[48 94]
[49 93]
[57 84]
[58 83]
[60 82]
[61 81]
[63 80]
[64 79]
[65 78]
[66 77]
[115 150]
[116 149]
[117 148]
[118 147]
[120 145]
[121 144]
[122 143]
[123 142]
[124 141]
[129 139]
[130 138]
[131 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
