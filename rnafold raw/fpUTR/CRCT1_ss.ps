%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAUUCCAGUUGGAGAACGUAGUGAGUCUUUCAGUGGAGCCAGGGUCUGGUUUGUCGUGAGGAGCUCCGCG\
) } def
/len { sequence length } bind def

/coor [
[61.93591309 172.47853088]
[47.20494461 179.77845764]
[31.16839218 176.99546814]
[20.78930855 187.82481384]
[10.41022682 198.65415955]
[12.28322983 214.17916870]
[3.69550061 227.24763489]
[-11.29809666 231.68904114]
[-25.61804581 225.40626526]
[-32.50290298 211.36587524]
[-28.70184898 196.19729614]
[-16.00962639 187.06265259]
[-0.41911501 188.27507019]
[9.95996761 177.44572449]
[20.33905029 166.61639404]
[16.75151634 153.58505249]
[20.17345238 140.39636230]
[29.79720497 130.59719849]
[43.13239670 126.87892914]
[56.64974976 130.33879089]
[67.47908783 119.95970154]
[78.30843353 109.58061981]
[81.03843689 102.46637726]
[89.82459259 99.00299072]
[93.45271301 91.51011658]
[101.77931213 88.92364502]
[113.44984436 79.50035095]
[125.12038422 70.07704926]
[136.79092407 60.65374756]
[142.66722107 45.96430588]
[157.43022156 43.98867798]
[169.10075378 34.56537628]
[180.77128601 25.14207649]
[192.44183350 15.71877766]
[204.11236572 6.29547739]
[202.96978760 -10.43460560]
[211.84223938 -24.47022057]
[227.13922119 -30.49457932]
[242.88198853 -26.36162186]
[254.14207458 -36.27174377]
[265.40216064 -46.18186188]
[276.66223145 -56.09198380]
[287.92233276 -66.00210571]
[299.18240356 -75.91222382]
[310.44250488 -85.82234955]
[318.33782959 -100.82568359]
[334.94046021 -97.39223480]
[336.23727417 -80.48795319]
[320.35260010 -74.56226349]
[309.09252930 -64.65213776]
[297.83245850 -54.74201965]
[286.57235718 -44.83189774]
[275.31228638 -34.92177963]
[264.05218506 -25.01165771]
[252.79211426 -15.10153675]
[255.26158142 -1.81289804]
[250.73348999 11.03808022]
[240.31338501 19.98578453]
[226.71090698 22.55975723]
[213.53565979 17.96601295]
[201.86512756 27.38931274]
[190.19459534 36.81261444]
[178.52404785 46.23591232]
[166.85351562 55.65921402]
[161.81196594 69.67463684]
[146.21421814 72.32428741]
[134.54368591 81.74758148]
[122.87314606 91.17088318]
[111.20260620 100.59418488]
[99.73471832 110.26306915]
[88.68751526 120.40995789]
[77.85816956 130.78904724]
[67.02883148 141.16812134]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[20 73]
[21 72]
[22 71]
[24 70]
[26 69]
[27 68]
[28 67]
[29 66]
[31 64]
[32 63]
[33 62]
[34 61]
[35 60]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
