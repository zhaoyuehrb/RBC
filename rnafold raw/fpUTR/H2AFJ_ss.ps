%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCCAAUGGAAAGGGGCUGCCGCGCGGCCGUAAAGAGUUUGUAGAGGCAGUUCGGGUGCGGUACGUUGCAUUCCGGUACCGGACGCCGAGAGCGGUUUGUCUCCGUCUCUGGAGUUGUAGGCGAGAGGUGAUC\
) } def
/len { sequence length } bind def

/coor [
[100.89313507 134.69508362]
[88.88381958 132.87821960]
[78.23593140 127.03464508]
[70.25356293 117.88005066]
[56.03115463 122.64692688]
[41.80874634 127.41379547]
[34.71495056 141.28158569]
[20.22349930 145.91326904]
[7.04638958 139.06495667]
[-7.17602015 143.83183289]
[-17.80195236 155.55361938]
[-32.32830048 152.26202393]
[-46.55070877 157.02890015]
[-60.77311707 161.79577637]
[-74.63130951 167.53602600]
[-83.53590393 180.61343384]
[-98.37770844 179.36032104]
[-111.80515289 186.04640198]
[-125.23260498 192.73246765]
[-138.66004944 199.41854858]
[-152.08750916 206.10462952]
[-165.51495361 212.79069519]
[-176.99847412 225.26327515]
[-192.16256714 217.68127441]
[-189.07472229 201.01089478]
[-172.20103455 199.36325073]
[-158.77357483 192.67716980]
[-145.34613037 185.99110413]
[-131.91868591 179.30502319]
[-118.49123383 172.61894226]
[-105.06378174 165.93287659]
[-97.11960602 153.33369446]
[-81.31739044 154.10856628]
[-94.91805267 147.78228760]
[-100.26171875 133.76640320]
[-94.32484436 119.99129486]
[-80.46660614 114.25113678]
[-66.52821350 119.79380035]
[-60.39620972 133.48315430]
[-65.53999329 147.57336426]
[-51.31758118 142.80648804]
[-37.09516907 138.03961182]
[-27.48651886 126.65879822]
[-11.94289207 129.60942078]
[2.27951813 124.84255219]
[8.66804790 111.43650055]
[23.02368736 106.39961243]
[37.04187393 113.19138336]
[51.26428604 108.42451477]
[65.48669434 103.65763855]
[68.74711609 84.90682220]
[81.40570831 70.69473267]
[99.65585327 65.29512787]
[102.75193024 50.61812592]
[105.84800720 35.94112778]
[108.94408417 21.26412964]
[112.04016113 6.58712959]
[114.96651459 -8.12465000]
[117.72275543 -22.86924553]
[112.65296936 -37.85617065]
[122.59716034 -48.94501114]
[125.35340118 -63.68960571]
[128.10964966 -78.43420410]
[130.86589050 -93.17880249]
[133.62213135 -107.92339325]
[136.37837219 -122.66799164]
[124.32434082 -132.09979248]
[118.04478455 -146.05780029]
[118.98268127 -161.33453369]
[126.92253113 -174.41954041]
[140.03979492 -182.30598450]
[155.32023621 -183.18159485]
[169.25251770 -176.84516907]
[178.63510132 -164.75279236]
[181.31193542 -149.68318176]
[176.66790771 -135.09922791]
[165.77018738 -124.35222626]
[151.12297058 -119.91175079]
[148.36672974 -105.16715240]
[145.61048889 -90.42255402]
[142.85424805 -75.67796326]
[140.09800720 -60.93336487]
[137.34175110 -46.18876648]
[142.60868835 -32.25647736]
[132.46734619 -20.11300278]
[129.71110535 -5.36840677]
[131.59104919 1.84924126]
[126.71715546 9.68320656]
[123.62107849 24.36020470]
[120.52500153 39.03720474]
[117.42892456 53.71420288]
[114.33285522 68.39120483]
[125.22008514 76.15689087]
[132.36291504 87.46253967]
[134.70086670 100.62960815]
[131.88681030 113.70320129]
[144.06266785 122.46382141]
[156.23852539 131.22444153]
[168.41438293 139.98506165]
[181.30612183 138.68872070]
[191.28297424 146.30996704]
[193.28900146 158.29595947]
[205.25926208 167.33547974]
[217.22952271 176.37500000]
[229.19976807 185.41452026]
[241.27363586 194.31518555]
[253.44949341 203.07580566]
[265.62536621 211.83642578]
[277.80120850 220.59704590]
[289.97708130 229.35766602]
[302.25329590 237.97706604]
[317.26608276 233.60090637]
[331.55856323 239.94589233]
[338.38229370 254.01609802]
[334.51531982 269.16799927]
[321.78350830 278.24734497]
[306.19839478 276.96716309]
[295.11883545 265.93188477]
[293.77624512 250.35203552]
[286.41424561 249.15643311]
[281.21646118 241.53352356]
[269.04058838 232.77290344]
[256.86474609 224.01228333]
[244.68887329 215.25166321]
[232.51301575 206.49104309]
[225.18058777 205.12570190]
[220.16026306 197.38478088]
[208.19000244 188.34526062]
[196.21974182 179.30574036]
[184.24948120 170.26622009]
[166.77796936 169.09599304]
[159.65376282 152.16091919]
[147.47790527 143.40029907]
[135.30204773 134.63967896]
[123.12619019 125.87905884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 50]
[5 49]
[6 48]
[9 45]
[10 44]
[12 42]
[13 41]
[14 40]
[15 33]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[53 92]
[54 91]
[55 90]
[56 89]
[57 88]
[58 86]
[59 85]
[61 83]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[96 135]
[97 134]
[98 133]
[99 132]
[102 130]
[103 129]
[104 128]
[105 127]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
