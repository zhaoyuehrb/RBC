%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCCUUCUGCAAAGGACUGCCUGGCAGGUGUGAAAGGCAGCGGUGGCCACAGAGGCGGUGGAG\
) } def
/len { sequence length } bind def

/coor [
[126.72612000 287.88003540]
[124.59140015 273.03271484]
[122.45667267 258.18539429]
[120.32195282 243.33805847]
[110.85212708 231.84146118]
[116.54670715 217.08062744]
[114.41197968 202.23330688]
[112.27725983 187.38598633]
[110.14253998 172.53866577]
[108.00781250 157.69134521]
[104.81933594 143.03413391]
[100.59334564 128.64173889]
[86.22398376 125.11817932]
[75.52890015 114.89520264]
[71.36064911 100.69943237]
[74.83096313 86.31711578]
[85.01425934 75.58424377]
[79.40688324 67.91283417]
[80.94719696 60.40575027]
[77.41081238 45.82857895]
[73.87442780 31.25140572]
[70.33804321 16.67423248]
[66.80165863 2.09705806]
[63.26527405 -12.48011589]
[50.05308914 -20.73092651]
[46.67434692 -35.56463242]
[54.62165833 -48.10958481]
[51.08527374 -62.68675613]
[39.38312531 -74.17552185]
[43.74305344 -89.98448181]
[59.67993546 -93.85072327]
[70.79927063 -81.79699707]
[65.66244507 -66.22314453]
[69.19882965 -51.64596939]
[82.01111603 -44.13723755]
[85.80516815 -29.40428734]
[77.84244537 -16.01649857]
[81.37882996 -1.43932593]
[84.91521454 13.13784790]
[88.45159912 27.71502113]
[91.98798370 42.29219437]
[95.52436829 56.86936951]
[99.40665436 71.35825348]
[113.77601624 74.88182068]
[124.47109985 85.10479736]
[128.63934326 99.30056763]
[125.16903687 113.68288422]
[114.98574066 124.41575623]
[119.21173096 138.80815125]
[123.56126404 142.89045715]
[125.44074249 147.79492188]
[124.99151611 152.32536316]
[122.85513306 155.55662537]
[124.98986053 170.40394592]
[127.12458038 185.25126648]
[129.25930786 200.09858704]
[131.39402771 214.94590759]
[141.01654053 227.50448608]
[135.16928101 241.20333862]
[137.30400085 256.05065918]
[139.43872070 270.89797974]
[141.57344055 285.74530029]
[152.13052368 298.29440308]
[146.28759766 313.61734009]
[130.05537415 315.95117188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[4 59]
[6 57]
[7 56]
[8 55]
[9 54]
[10 53]
[11 49]
[12 48]
[17 43]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[27 34]
[28 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
