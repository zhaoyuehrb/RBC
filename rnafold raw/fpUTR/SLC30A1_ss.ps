%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGGGGGCCCCUCAGCGGUUUCCCGAACGGCCCGACUCGGGCGCUCCUCCGUGUCGCGGUCGCCGACCCUCCGCGUCCCGCCAACGCCGCCGCUGCACCAGUCUCCGGGCCGGGCUCGGCGGGCCCCGCAGCCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[87.46786499 269.71102905]
[86.17839050 254.76655579]
[84.88892365 239.82208252]
[83.59944916 224.87762451]
[82.30997467 209.93315125]
[73.50721741 197.91812134]
[80.02954865 183.50390625]
[78.74007416 168.55943298]
[77.45060730 153.61495972]
[76.16113281 138.67048645]
[74.87165833 123.72601318]
[67.18608856 110.84455109]
[54.64720917 102.61190796]
[42.10832596 94.37926483]
[30.24528122 102.13137054]
[16.36311531 104.75513458]
[2.57410669 101.88506317]
[-9.03651047 93.98907471]
[-16.72589111 82.29251099]
[-19.35515594 68.58814240]
[-16.55797958 54.96137238]
[-28.91682434 46.46084595]
[-41.27566910 37.96031952]
[-53.63451385 29.45979309]
[-66.89002991 36.94662476]
[-82.02001953 37.93173981]
[-96.02005768 32.27319336]
[-106.13339233 21.14298820]
[-110.39373779 6.78475380]
[-108.00742340 -7.93839121]
[-120.36627197 -16.43891716]
[-133.21615601 -14.86861038]
[-143.34901428 -22.26246071]
[-145.62254333 -34.18959427]
[-157.79563904 -42.95406723]
[-169.96871948 -51.71854019]
[-182.14179993 -60.48301315]
[-194.31489563 -69.24748993]
[-206.58155823 -77.88048553]
[-218.94041443 -86.38101196]
[-231.29925537 -94.88153839]
[-243.65809631 -103.38206482]
[-259.41311646 -104.82770538]
[-265.51467896 -118.41521454]
[-277.87350464 -126.91574097]
[-290.23236084 -135.41625977]
[-302.59121704 -143.91679382]
[-318.08435059 -140.79617310]
[-331.19982910 -149.61431885]
[-334.15646362 -165.13958740]
[-325.20013428 -178.16110229]
[-309.64450073 -180.95343018]
[-296.71838379 -171.85993958]
[-294.09066772 -156.27563477]
[-281.73184204 -147.77511597]
[-269.37298584 -139.27458191]
[-257.01416016 -130.77406311]
[-242.14311218 -129.93643188]
[-235.15757751 -115.74091339]
[-222.79872131 -107.24038696]
[-210.43988037 -98.73986053]
[-198.08103943 -90.23933411]
[-190.73429871 -89.03149414]
[-185.55041504 -81.42057037]
[-173.37733459 -72.65609741]
[-161.20423889 -63.89162827]
[-149.03115845 -55.12715530]
[-136.85807800 -46.36268234]
[-119.35738373 -45.58234406]
[-111.86574554 -28.79776192]
[-99.50689697 -20.29723740]
[-86.61145782 -27.79210281]
[-71.67928314 -28.94954872]
[-57.66796112 -23.48659706]
[-47.37601471 -12.43689346]
[-42.88397980 2.04442620]
[-45.13398743 17.10094833]
[-32.77514267 25.60147476]
[-20.41629791 34.10200119]
[-8.05745316 42.60252762]
[5.62583113 34.41391754]
[21.56672096 32.98986053]
[36.59337997 38.66441345]
[47.69379807 50.35412979]
[52.61952591 65.76453400]
[50.34096909 81.84037781]
[62.87985229 90.07302094]
[75.41873169 98.30567169]
[80.60812378 86.27082825]
[90.93250275 78.99312592]
[103.06484985 78.21385956]
[113.39551544 83.67034149]
[119.10588074 93.31578827]
[134.09199524 93.96112061]
[149.07810974 94.60645294]
[164.06420898 95.25179291]
[179.05032349 95.89712524]
[194.03643799 96.54245758]
[204.09382629 88.39173889]
[216.60597229 89.28051758]
[224.86299133 98.18261719]
[239.83174133 99.15024567]
[248.67074585 96.56742859]
[255.11106873 100.30314636]
[270.05554199 101.59261322]
[284.46975708 95.07028961]
[296.48477173 103.87304688]
[311.42926025 105.16251373]
[326.37371826 106.45198822]
[340.99075317 99.01731110]
[354.58850098 108.18430328]
[353.17874146 124.52274323]
[338.21173096 131.22505188]
[325.08425903 121.39646149]
[310.13977051 120.10698700]
[295.19531250 118.81751251]
[281.85000610 125.43207550]
[268.76608276 116.53708649]
[253.82159424 115.24761963]
[238.86412048 114.11900330]
[223.89535522 113.15137482]
[208.64865112 121.77814484]
[193.39111328 111.52856445]
[178.40499878 110.88323212]
[163.41888428 110.23789978]
[148.43276978 109.59256744]
[133.44665527 108.94723511]
[118.46054840 108.30190277]
[112.67324066 117.62391663]
[102.28277588 123.06080627]
[89.81613159 122.43653870]
[91.10560608 137.38101196]
[92.39508057 152.32548523]
[93.68454742 167.26995850]
[94.97402191 182.21443176]
[103.86901093 195.29838562]
[97.25444794 208.64367676]
[98.54392242 223.58815002]
[99.83338928 238.53262329]
[101.12286377 253.47709656]
[102.41233826 268.42156982]
[113.71472168 279.80734253]
[111.71684265 295.72549438]
[97.95130920 303.96499634]
[82.97785187 298.20523071]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 141]
[2 140]
[3 139]
[4 138]
[5 137]
[7 135]
[8 134]
[9 133]
[10 132]
[11 131]
[12 88]
[13 87]
[14 86]
[21 80]
[22 79]
[23 78]
[24 77]
[30 71]
[31 70]
[34 68]
[35 67]
[36 66]
[37 65]
[38 64]
[39 62]
[40 61]
[41 60]
[42 59]
[44 57]
[45 56]
[46 55]
[47 54]
[93 128]
[94 127]
[95 126]
[96 125]
[97 124]
[98 123]
[101 121]
[102 120]
[104 119]
[105 118]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
