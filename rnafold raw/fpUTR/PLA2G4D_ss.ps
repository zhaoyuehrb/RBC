%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGUCCUAUCCCACUGGGACCGUCGCUGCCACUCAGCCAGAGAGCCAGCAUCUUGGCAAGGGCUGGGCCUGGAGUGAAGCUGGAAGGGCUAGC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 233.33929443]
[92.50000000 218.33929443]
[92.50000000 203.33929443]
[92.50000000 188.33929443]
[92.50000000 173.33929443]
[92.50000000 158.33929443]
[92.50000000 143.33929443]
[92.50000000 128.33929443]
[92.50000000 113.33929443]
[84.78011322 108.73470306]
[80.20945740 99.67179108]
[67.21907043 107.17179108]
[54.22869110 114.67179108]
[41.23831177 122.17179108]
[30.54438972 135.32763672]
[14.94230366 128.69354248]
[16.99805069 111.86469269]
[33.73831177 109.18141174]
[46.72869110 101.68141174]
[59.71907425 94.18141174]
[72.70945740 86.68141174]
[82.41379547 75.24349976]
[87.69754791 61.20491409]
[92.98130035 47.16632462]
[97.56984711 32.88538361]
[101.45212555 18.39649773]
[105.33441162 3.90761042]
[109.21669769 -10.58127689]
[113.09898376 -25.07016373]
[112.30052185 -34.37042999]
[117.35260010 -39.96557617]
[121.70687103 -54.31967926]
[126.06114197 -68.67378235]
[129.94342041 -83.16267395]
[133.34956360 -97.77082825]
[136.75570679 -112.37898254]
[140.16184998 -126.98713684]
[143.56799316 -141.59529114]
[146.97413635 -156.20344543]
[150.38029480 -170.81159973]
[140.87525940 -179.26797485]
[135.96934509 -190.92720032]
[136.56204224 -203.48963928]
[142.47491455 -214.50666809]
[152.49870300 -221.85803223]
[164.64009094 -224.15974426]
[168.99435425 -238.51385498]
[173.34861755 -252.86795044]
[177.70289612 -267.22207642]
[182.05715942 -281.57617188]
[177.80838013 -297.41534424]
[189.59094238 -308.82165527]
[205.28395081 -304.06121826]
[208.74378967 -288.03121948]
[196.41127014 -277.22189331]
[192.05700684 -262.86779785]
[187.70272827 -248.51368713]
[183.34846497 -234.15957642]
[178.99418640 -219.80548096]
[190.26789856 -206.41619873]
[191.40428162 -188.79469299]
[181.77651978 -173.80795288]
[164.98844910 -167.40545654]
[161.58230591 -152.79730225]
[158.17614746 -138.18914795]
[154.77000427 -123.58099365]
[151.36386108 -108.97283936]
[147.95771790 -94.36468506]
[144.55157471 -79.75653076]
[146.38020325 -75.15109253]
[145.19206238 -69.34004974]
[140.41523743 -64.31951904]
[136.06097412 -49.96541214]
[131.70669556 -35.61130524]
[127.58787537 -21.18787956]
[123.70558929 -6.69899130]
[119.82330322 7.78989601]
[115.94101715 22.27878380]
[112.05873108 36.76766968]
[113.65334320 40.12025452]
[113.57924652 44.45075226]
[111.37801361 48.90491104]
[107.01988983 52.45007706]
[101.73613739 66.48866272]
[96.45238495 80.52725220]
[116.50704193 94.04539490]
[107.50000000 113.33929443]
[107.50000000 128.33929443]
[107.50000000 143.33929443]
[107.50000000 158.33929443]
[107.50000000 173.33929443]
[107.50000000 188.33929443]
[107.50000000 203.33929443]
[107.50000000 218.33929443]
[107.50000000 233.33929443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[5 91]
[6 90]
[7 89]
[8 88]
[9 87]
[11 21]
[12 20]
[13 19]
[14 18]
[22 85]
[23 84]
[24 83]
[25 79]
[26 78]
[27 77]
[28 76]
[29 75]
[31 74]
[32 73]
[33 72]
[34 69]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
