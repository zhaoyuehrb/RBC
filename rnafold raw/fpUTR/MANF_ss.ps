%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUACGGCGCGCGGCCGGGACUUGGAGGCGGUGCGGCGCGGCGGGUGCGGUUCAGUCGGUCGGCGGCGGCAGCGGAGGAGGAGGAGGAGGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[81.32926178 119.52944183]
[91.79055786 108.78104401]
[76.91370392 110.69920349]
[62.03685760 112.61736298]
[49.33940887 122.05587006]
[35.72720337 116.00961304]
[20.85035133 117.92777252]
[8.15290260 127.36627960]
[-5.45930243 121.32003021]
[-20.33615303 123.23818970]
[-35.21300125 125.15634155]
[-50.08985138 127.07450104]
[-64.96670532 128.99266052]
[-77.66415405 138.43116760]
[-91.27635956 132.38491821]
[-106.15320587 134.30307007]
[-121.03005981 136.22122192]
[-126.87140656 150.42594910]
[-139.04232788 159.79421997]
[-154.26889038 161.80599976]
[-168.45523071 155.92015076]
[-177.78530884 143.71994019]
[-179.74935913 128.48713684]
[-173.81907654 114.31931305]
[-161.58966064 105.02753448]
[-146.35078430 103.11123657]
[-132.20161438 109.08590698]
[-122.94821930 121.34437561]
[-108.07136536 119.42621613]
[-93.19451141 117.50806427]
[-81.56115723 108.20675659]
[-66.88485718 114.11580658]
[-52.00801086 112.19764709]
[-37.13116074 110.27949524]
[-22.25431061 108.36133575]
[-7.37746000 106.44317627]
[4.25589705 97.14187622]
[18.93219376 103.05092621]
[33.80904388 101.13276672]
[45.44240189 91.83145905]
[60.11869812 97.74050903]
[74.99555206 95.82235718]
[89.87239838 93.90419769]
[94.08792114 89.88169098]
[99.66775513 88.38755798]
[102.22275543 72.77401733]
[116.20734406 67.64756775]
[125.55969238 55.92009354]
[134.91203308 44.19261932]
[137.46704102 28.57908249]
[151.45162964 23.45262909]
[160.80398560 11.72515678]
[170.15632629 -0.00231534]
[171.57949829 -6.77219057]
[175.68142700 -11.04330826]
[180.50305176 -12.15617085]
[190.58757019 -23.26034164]
[200.67207336 -34.36450958]
[203.61952209 -50.49661255]
[219.15290833 -55.75452805]
[231.29284668 -44.72936630]
[227.55078125 -28.76286697]
[211.77624512 -24.27999687]
[201.69174194 -13.17582798]
[191.60722351 -2.07165766]
[181.88380432 9.35003185]
[172.53144836 21.07750320]
[163.17910767 32.80497742]
[161.29304504 47.57968521]
[146.63951111 53.54496765]
[137.28717041 65.27243805]
[127.93482208 76.99990845]
[126.04875946 91.77462006]
[111.39522552 97.73990631]
[126.01081085 94.36576080]
[141.01078796 94.38918304]
[155.61575317 97.80895233]
[169.06683350 104.44738007]
[180.66506958 113.95951080]
[189.80783081 125.85110474]
[196.02005005 139.50425720]
[198.97891235 154.20953369]
[198.53070068 169.20283508]
[194.69868469 183.70509338]
[187.68197632 196.96276855]
[177.84519958 208.28697205]
[165.69944763 217.08929443]
[151.87583923 222.91235352]
[137.09266663 225.45356750]
[122.11808014 224.58091736]
[107.73015594 220.33972168]
[94.67651367 212.95037842]
[83.63542938 202.79682922]
[75.18061829 190.40667725]
[69.75138092 176.42370605]
[67.62984467 161.57449341]
[68.92623138 146.63061523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 43]
[3 42]
[4 41]
[6 39]
[7 38]
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[15 30]
[16 29]
[17 28]
[45 74]
[47 72]
[48 71]
[49 70]
[51 68]
[52 67]
[53 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
