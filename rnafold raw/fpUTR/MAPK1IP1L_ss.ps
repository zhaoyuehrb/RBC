%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCUUCCUGUUCCGGCGCCAGGAGGAGCCGCGCGCUGCUGGUGCUGUUGCCGCCGCUGCUCUAGCUGCCGUCAGUCAGGCUGCGCCCGCGUCUUCAGGGCCCAGUCCCUCGGACCCAUCGCCGCUUCUAGACCCUACUGCGGUCUCGGAUAUUGCCGGGAAA\
) } def
/len { sequence length } bind def

/coor [
[58.71544266 102.42219543]
[43.83016968 100.57053375]
[28.94489670 98.71887207]
[14.05962372 96.86721039]
[-0.82564962 95.01555634]
[-13.21849060 104.45246124]
[-28.28789711 102.36257172]
[-37.20817566 90.48973083]
[-52.09344864 88.63806915]
[-66.97872162 86.78640747]
[-81.86399078 84.93475342]
[-92.52923584 92.24096680]
[-104.91409302 90.36341858]
[-112.43573761 80.85345459]
[-127.19657898 86.54803467]
[-138.69317627 77.07820892]
[-153.54049683 74.94348907]
[-168.38781738 72.80876160]
[-183.23513794 70.67404175]
[-197.99597168 76.36861420]
[-209.49256897 66.89878845]
[-224.33988953 64.76406860]
[-239.18721008 62.62934494]
[-251.75747681 71.82859802]
[-266.78436279 69.45217896]
[-275.47698975 57.41166687]
[-290.32431030 55.27694321]
[-305.17163086 53.14221954]
[-320.01895142 51.00749969]
[-334.86627197 48.87277603]
[-349.62710571 54.56735229]
[-361.12368774 45.09752655]
[-375.97100830 42.96280289]
[-390.81832886 40.82808304]
[-399.80441284 42.70919418]
[-405.92694092 38.50877762]
[-420.73092651 36.09176636]
[-435.59753418 41.50428391]
[-446.91174316 31.81729317]
[-461.71572876 29.40028191]
[-471.37585449 41.34086990]
[-485.71780396 46.83667755]
[-500.88366699 44.40936279]
[-512.79394531 34.71186066]
[-518.24475098 20.35274696]
[-515.76989746 5.19455767]
[-506.03512573 -6.68523550]
[-491.65899658 -12.09102631]
[-476.50863647 -9.56868362]
[-464.65942383 0.20329353]
[-459.29870605 14.59629345]
[-444.49472046 17.01330376]
[-430.68701172 11.42790794]
[-418.31393433 21.28777885]
[-403.50994873 23.70479012]
[-388.68362427 25.98076057]
[-373.83630371 28.11548233]
[-358.98898315 30.25020599]
[-345.29010010 24.40293884]
[-332.73153687 34.02545547]
[-317.88421631 36.16017532]
[-303.03689575 38.29489899]
[-288.18957520 40.42962265]
[-273.34225464 42.56434250]
[-261.60952759 33.46054840]
[-246.52183533 35.41395187]
[-237.05249023 47.78202438]
[-222.20516968 49.91674805]
[-207.35784912 52.05147171]
[-193.65898132 46.20420456]
[-181.10041809 55.82671738]
[-166.25309753 57.96144104]
[-151.40576172 60.09616470]
[-136.55844116 62.23088837]
[-122.85958862 56.38362122]
[-110.30101776 66.00613403]
[-94.41075897 58.60418701]
[-80.01232910 70.04947662]
[-65.12705994 71.90113831]
[-50.24178696 73.75279999]
[-35.35651398 75.60446167]
[-23.79925728 66.27893829]
[-8.67709541 67.94473267]
[1.02601075 80.13027954]
[15.91128349 81.98194122]
[30.79655647 83.83360291]
[45.68183136 85.68525696]
[60.56710434 87.53691864]
[70.63994598 70.87494659]
[87.22042847 60.66853333]
[106.63350677 59.17992783]
[124.57627106 66.73908234]
[135.53033447 56.49171448]
[146.48439026 46.24434280]
[157.43844604 35.99697495]
[158.65620422 23.12665367]
[168.02900696 14.81638145]
[180.14993286 15.12889099]
[191.29710388 5.09193182]
[202.44427490 -4.94502735]
[213.59144592 -14.98198700]
[214.16819763 -30.77574921]
[225.80059814 -41.47446442]
[241.58738708 -40.73077774]
[252.16252136 -28.98590088]
[251.25196838 -13.20786476]
[239.39593506 -2.75749612]
[223.62840271 -3.83481407]
[212.48123169 6.20214510]
[201.33406067 16.23910332]
[190.18688965 26.27606392]
[185.69680786 43.22092056]
[167.68582153 46.95103455]
[156.73176575 57.19840622]
[145.77769470 67.44577026]
[134.82363892 77.69314575]
[138.39776611 82.43252563]
[141.31524658 87.74057770]
[143.48635864 93.52452087]
[144.83476257 99.67758179]
[145.29969788 106.08091736]
[144.83775330 112.60594177]
[158.81571960 118.04805756]
[172.79368591 123.49017334]
[186.77163696 128.93229675]
[200.74960327 134.37440491]
[211.24031067 123.37378693]
[225.14422607 117.22973633]
[240.34112549 116.87916565]
[254.51356506 122.37554932]
[265.50036621 132.88070679]
[271.62612915 146.79270935]
[271.95669556 161.99005127]
[266.44168091 176.15524292]
[255.92208862 187.12823486]
[242.00204468 193.23568726]
[226.80429077 193.54626465]
[212.64634705 188.01261902]
[201.68721008 177.47859192]
[195.59808350 163.55052185]
[195.30747986 148.35237122]
[181.32952881 142.91024780]
[167.35156250 137.46813965]
[153.37361145 132.02601624]
[139.39564514 126.58390808]
[129.14826965 137.53796387]
[135.50910950 151.12251282]
[141.86994934 164.70704651]
[148.23078918 178.29159546]
[154.59161377 191.87612915]
[169.53483582 197.02162170]
[176.38768005 211.26289368]
[171.08448792 226.15086365]
[156.77156067 232.85276794]
[141.94049072 227.39247131]
[135.39028931 213.00947571]
[141.00708008 198.23696899]
[134.64624023 184.65242004]
[128.28540039 171.06788635]
[121.92456818 157.48333740]
[115.56373596 143.89880371]
[98.64015961 145.51168823]
[82.65713501 140.96824646]
[69.72510529 131.15754700]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 88]
[2 87]
[3 86]
[4 85]
[5 84]
[8 81]
[9 80]
[10 79]
[11 78]
[14 76]
[16 74]
[17 73]
[18 72]
[19 71]
[21 69]
[22 68]
[23 67]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[32 58]
[33 57]
[34 56]
[36 55]
[37 54]
[39 52]
[40 51]
[92 116]
[93 115]
[94 114]
[95 113]
[98 111]
[99 110]
[100 109]
[101 108]
[122 145]
[123 144]
[124 143]
[125 142]
[126 141]
[146 161]
[147 160]
[148 159]
[149 158]
[150 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
