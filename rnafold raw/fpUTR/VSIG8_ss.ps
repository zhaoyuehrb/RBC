%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAUUGCACCUUCCUGCCACCCCAGGCAGUGUCUGGGCCCUCAGCUCCCCCUCCCUCCACCUACCCCCUCACACCCACCACUACGACCCCACGGGAUACCCAGCCCAGACGGAGGAAACACCGAGCCUAGAGAC\
) } def
/len { sequence length } bind def

/coor [
[118.27613831 302.28939819]
[130.34288025 292.87387085]
[127.60652924 278.12557983]
[124.87017822 263.37725830]
[112.48634338 255.18115234]
[109.50119781 240.26325989]
[118.18199921 227.32952881]
[115.44564819 212.58122253]
[101.20940399 203.70239258]
[97.68862915 186.95376587]
[107.52420044 172.53819275]
[104.45040131 157.85650635]
[101.37660217 143.17481995]
[98.30279541 128.49314880]
[95.22899628 113.81146240]
[81.63034821 107.48085022]
[68.41675568 114.58022308]
[55.20317078 121.67959595]
[41.98958588 128.77897644]
[28.77599716 135.87834167]
[24.46134758 151.08227539]
[10.61911964 158.70907593]
[-4.53833866 154.23393250]
[-12.01837635 140.31184387]
[-7.38321877 125.20254517]
[6.61717653 117.87011719]
[21.67662430 122.66475677]
[34.89020920 115.56538391]
[48.10379791 108.46601105]
[61.31738663 101.36663818]
[74.53097534 94.26726532]
[85.53419495 90.40957642]
[94.99039459 93.00229645]
[97.72674561 78.25399780]
[100.46309662 63.50569534]
[103.19944763 48.75739288]
[105.93579865 34.00909424]
[108.67214966 19.26079178]
[111.40850830 4.51249075]
[114.14485931 -10.23581028]
[101.94438934 -17.67157173]
[93.04486847 -28.81095123]
[88.50549316 -42.29532242]
[88.85527802 -56.48900223]
[94.03145599 -69.67765808]
[103.38957977 -80.27536774]
[115.78366089 -87.01530457]
[129.70648193 -89.10118103]
[132.78028870 -103.78285980]
[135.85409546 -118.46454620]
[138.92788696 -133.14622498]
[124.79293823 -138.24026489]
[111.50453949 -145.25201416]
[99.32135773 -154.04496765]
[88.48052979 -164.44798279]
[79.19309235 -176.25856018]
[71.63981628 -189.24679565]
[65.96772766 -203.15986633]
[62.28724670 -217.72695923]
[60.67000580 -232.66452026]
[61.14748764 -247.68177795]
[63.71039963 -262.48641968]
[68.30884552 -276.79028320]
[74.85333252 -290.31491089]
[83.21644592 -302.79708862]
[93.23542023 -313.99380493]
[104.71521759 -323.68710327]
[117.43238068 -331.68835449]
[131.13937378 -337.84176636]
[145.56938171 -342.02758789]
[160.44152832 -344.16430664]
[175.46630859 -344.21035767]
[190.35125732 -342.16485596]
[204.80665588 -338.06756592]
[218.55111694 -331.99829102]
[231.31709290 -324.07516479]
[242.85609436 -314.45242310]
[252.94352722 -303.31735229]
[261.38299561 -290.88668823]
[268.01028442 -277.40240479]
[272.69631958 -263.12701416]
[275.34994507 -248.33834839]
[275.91949463 -233.32429504]
[274.39385986 -218.37710571]
[270.80273438 -203.78773499]
[265.21603394 -189.84014893]
[257.74252319 -176.80584717]
[248.52767944 -164.93856812]
[237.75082397 -154.46929932]
[225.62178040 -145.60180664]
[212.37661743 -138.50872803]
[198.27316284 -133.32812500]
[183.58593750 -130.16084290]
[168.60084534 -129.06851196]
[153.60957336 -130.07241821]
[150.53576660 -115.39073944]
[147.46197510 -100.70906067]
[144.38816833 -86.02738190]
[157.58306885 -77.32448578]
[166.46440125 -64.20259857]
[169.65554810 -48.64311600]
[166.64186096 -33.00916290]
[157.85330200 -19.68666840]
[144.60343933 -10.72025299]
[128.89315796 -7.49945879]
[126.15680695 7.24884224]
[123.42045593 21.99714279]
[120.68410492 36.74544525]
[117.94775391 51.49374390]
[115.21140289 66.24204254]
[112.47505188 80.99034882]
[109.73870087 95.73864746]
[109.91068268 110.73766327]
[112.98448181 125.41934204]
[116.05828094 140.10102844]
[119.13208008 154.78269958]
[122.20587921 169.46438599]
[134.29537964 175.52052307]
[140.57278442 187.27586365]
[138.92984009 200.30397034]
[130.19395447 209.84487915]
[132.93029785 224.59318542]
[145.67298889 233.55206299]
[148.23794556 248.54792786]
[139.61848450 260.64093018]
[142.35482788 275.38922119]
[145.09118652 290.13751221]
[159.73239136 294.59774780]
[170.61561584 305.35943604]
[175.23995972 319.94964600]
[172.54280090 335.01562500]
[163.14392090 347.09533691]
[149.20310974 353.41296387]
[133.92385864 352.51675415]
[120.81723785 344.61260986]
[112.89505005 331.51690674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 127]
[3 126]
[4 125]
[7 122]
[8 121]
[11 117]
[12 116]
[13 115]
[14 114]
[15 113]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[33 112]
[34 111]
[35 110]
[36 109]
[37 108]
[38 107]
[39 106]
[40 105]
[48 98]
[49 97]
[50 96]
[51 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
