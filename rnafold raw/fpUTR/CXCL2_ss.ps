%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUCCGGGAAUUUCCCUGGCCCGGGACUCCGGGCUUUCCAGCCCCAACCAUGCAUAAAAGGGGUUCGCCGUUCUCGGAGAGCCACAGAGCCCGGGCCACAGGCAGCUCCUUGCCAGCUCUCCUCCUCGCACAGCCGCUCGAACCGCCUGCUGAGCCCC\
) } def
/len { sequence length } bind def

/coor [
[160.82627869 167.10781860]
[150.48152161 156.24569702]
[140.13674927 145.38356018]
[129.79199219 134.52143860]
[119.44722748 123.65930176]
[105.77604675 129.46685791]
[91.27875519 128.10720825]
[79.41285706 120.18360901]
[72.12506866 133.29421997]
[64.83728790 146.40483093]
[57.54950333 159.51545715]
[55.13877487 176.29713440]
[38.34557343 178.62623596]
[31.45866203 163.13409424]
[44.43888855 152.22766113]
[51.72667313 139.11705017]
[59.01445389 126.00643921]
[66.30223846 112.89582062]
[63.97017670 98.07821655]
[53.00763702 87.83992004]
[42.04509735 77.60162354]
[31.08255959 67.36332703]
[20.12001991 57.12502670]
[9.15748024 46.88673019]
[-1.80505931 36.64843369]
[-12.76759911 26.41013527]
[-23.73013878 16.17183876]
[-32.18343735 12.57635975]
[-34.80421829 5.62522030]
[-45.56490326 -4.82502651]
[-56.32558823 -15.27527237]
[-71.61598969 -19.33904266]
[-75.35581970 -33.75649643]
[-86.21794891 -44.10125732]
[-97.18048859 -54.33955765]
[-108.14302826 -64.57785034]
[-119.10556793 -74.81614685]
[-130.06809998 -85.05445099]
[-141.03063965 -95.29274750]
[-151.99317932 -105.53104401]
[-162.95571899 -115.76934052]
[-174.86344910 -124.89108276]
[-187.60308838 -132.80950928]
[-200.34272766 -140.72793579]
[-213.08236694 -148.64636230]
[-225.82202148 -156.56478882]
[-238.56166077 -164.48323059]
[-250.89546204 -155.59808350]
[-265.69177246 -152.11410522]
[-280.69421387 -154.56256104]
[-293.61505127 -162.57006836]
[-302.48394775 -174.91555786]
[-305.94848633 -189.71641541]
[-303.48028564 -204.71563721]
[-295.45578003 -217.62593079]
[-283.09863281 -226.47859192]
[-268.29324341 -229.92362976]
[-253.29728699 -227.43571472]
[-240.39755249 -219.39424133]
[-231.56115723 -207.02546692]
[-228.13558960 -192.21554565]
[-230.64323425 -177.22286987]
[-217.90357971 -169.30444336]
[-205.16394043 -161.38601685]
[-192.42430115 -153.46757507]
[-179.68466187 -145.54914856]
[-166.94502258 -137.63072205]
[-172.09472656 -151.71903992]
[-169.63766479 -166.51643372]
[-160.21119690 -178.18440247]
[-146.26058960 -183.69625854]
[-131.40467834 -181.62217712]
[-119.49713135 -172.50019836]
[-113.62683105 -158.69659424]
[-115.31653595 -143.79206848]
[-124.12793732 -131.65290833]
[-137.77532959 -125.42806244]
[-152.71742249 -126.73188019]
[-141.75488281 -116.49358368]
[-130.79234314 -106.25528717]
[-119.82981110 -96.01699066]
[-108.86727142 -85.77868652]
[-97.90473175 -75.54039001]
[-86.94219208 -65.30209351]
[-75.97965240 -55.06379700]
[-68.90898132 -52.78509521]
[-64.90557098 -44.51718140]
[-50.38484955 -41.20088196]
[-45.87533951 -26.03595734]
[-35.11465454 -15.58571148]
[-24.35396957 -5.13546515]
[-13.49184132 5.20929909]
[-2.52930164 15.44759655]
[8.43323803 25.68589401]
[19.39577675 35.92419052]
[30.35831642 46.16248703]
[41.32085800 56.40078354]
[52.28339386 66.63908386]
[63.24593353 76.87738037]
[74.20847321 87.11567688]
[88.93610382 72.72977448]
[109.91920471 71.65802765]
[126.69796753 84.99414062]
[140.27534485 78.61804962]
[153.85273743 72.24195099]
[167.43013000 65.86585999]
[181.00750732 59.48976517]
[189.92807007 45.72910309]
[206.28924561 46.84430313]
[213.26008606 61.68814087]
[203.66957092 74.99054718]
[187.38360596 73.06715393]
[173.80621338 79.44324493]
[160.22883606 85.81933594]
[146.65144348 92.19543457]
[133.07406616 98.57152557]
[130.30935669 113.31453705]
[140.65411377 124.17666626]
[150.99888611 135.03880310]
[161.34364319 145.90092468]
[171.68841553 156.76306152]
[182.19798279 152.41899109]
[193.50659180 151.50737000]
[204.52433777 154.09962463]
[214.19439697 159.93029785]
[221.59437561 168.42410278]
[226.02429199 178.75267029]
[227.07275391 189.91532898]
[224.65513611 200.83601379]
[219.02014160 210.46702576]
[228.48646545 222.10269165]
[243.19749451 227.92472839]
[245.22761536 242.68032837]
[254.69393921 254.31600952]
[264.16024780 265.95166016]
[273.62655640 277.58734131]
[290.96545410 283.71798706]
[293.12634277 301.11172485]
[302.81787109 312.56045532]
[318.45349121 312.31173706]
[330.55828857 322.21163940]
[333.41674805 337.58575439]
[325.67919922 351.17486572]
[310.99908447 356.56265259]
[296.30789185 351.20513916]
[288.54235840 337.63198853]
[291.36914062 322.25201416]
[281.67758179 310.80325317]
[269.62213135 309.47680664]
[261.45605469 299.97378540]
[261.99090576 287.05364990]
[252.52458191 275.41799927]
[243.05825806 263.78231812]
[233.59194946 252.14665222]
[219.55799866 247.15689087]
[216.85079956 231.56901550]
[207.38447571 219.93334961]
[188.98155212 223.96797180]
[170.98377991 218.12953186]
[158.34588623 203.93920898]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 121]
[2 120]
[3 119]
[4 118]
[5 117]
[8 18]
[9 17]
[10 16]
[11 15]
[19 100]
[20 99]
[21 98]
[22 97]
[23 96]
[24 95]
[25 94]
[26 93]
[27 92]
[29 91]
[30 90]
[31 89]
[33 87]
[34 85]
[35 84]
[36 83]
[37 82]
[38 81]
[39 80]
[40 79]
[41 78]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
[130 157]
[131 156]
[133 154]
[134 153]
[135 152]
[136 151]
[138 148]
[139 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
