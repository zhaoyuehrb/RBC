%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCGAGUGCCUGGCGGGCUCCGGCUUCCGCGUCCGCCCCUGCUCCGGCUUCGCCCGCAGCUCCGCGCCCGCGGGCAACCAAGCCCCCAGCGAAGCCCGCACAGCUCCGGGUGCCAGGACGGGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[98.44341278 129.06118774]
[93.80815887 143.32702637]
[89.17290497 157.59288025]
[96.57031250 171.55905151]
[91.84571075 186.64060974]
[77.80210876 193.88995361]
[62.77133942 189.00616455]
[55.67088318 174.88670349]
[60.71331787 159.90840149]
[74.90705872 152.95762634]
[79.54231262 138.69177246]
[84.17756653 124.42592621]
[81.81542969 122.72216797]
[79.63541412 120.79084015]
[77.65934753 118.65129089]
[64.05622864 124.97230530]
[50.45311737 131.29331970]
[36.85000229 137.61433411]
[23.40359688 144.26220703]
[10.12175560 151.23306274]
[1.81906402 165.37510681]
[-14.57544804 164.98522949]
[-22.19651222 150.46449280]
[-13.20423031 136.75061035]
[3.15090847 137.95121765]
[16.43274879 130.98037720]
[18.70432663 126.67426300]
[23.75611305 123.80178833]
[30.52898407 124.01122284]
[44.13209915 117.69020844]
[57.73521423 111.36919403]
[71.33833313 105.04817200]
[72.12672424 91.63005066]
[78.86074829 79.99731445]
[90.10396576 72.63133240]
[103.45809174 71.10334015]
[116.07458496 75.73926544]
[127.30224609 65.79242706]
[138.52990723 55.84558868]
[149.75756836 45.89874649]
[160.98522949 35.95190811]
[172.21289062 26.00506783]
[173.32173157 10.46774960]
[184.84986877 0.54018193]
[199.65548706 1.69304132]
[210.88314819 -8.25379848]
[222.11080933 -18.20063782]
[233.21746826 -28.28241348]
[244.20150757 -38.49765015]
[255.18553162 -48.71289062]
[256.76614380 -53.90195847]
[259.90884399 -57.54346466]
[263.73339844 -59.29709244]
[267.35501099 -59.23442841]
[279.05014038 -68.62720490]
[290.74523926 -78.01998138]
[302.44036865 -87.41275787]
[314.13546753 -96.80554199]
[320.05014038 -111.47957611]
[334.81823730 -113.41663361]
[346.51336670 -122.80941010]
[358.20846558 -132.20219421]
[369.90359497 -141.59497070]
[376.23028564 -160.66412354]
[395.36221313 -163.02119446]
[406.58987427 -172.96803284]
[411.78869629 -187.91069031]
[426.44595337 -190.55897522]
[437.67361450 -200.50582886]
[443.04263306 -218.07069397]
[460.29913330 -221.01365662]
[471.28317261 -231.22889709]
[482.26721191 -241.44413757]
[492.87380981 -252.05073547]
[503.08905029 -263.03475952]
[513.30426025 -274.01879883]
[523.51953125 -285.00283813]
[522.69635010 -300.78567505]
[533.33636475 -312.47180176]
[549.12701416 -313.12805176]
[560.70001221 -302.36508179]
[561.18927002 -286.56835938]
[550.30456543 -275.10980225]
[534.50354004 -274.78759766]
[524.28833008 -263.80355835]
[514.07305908 -252.81953430]
[503.85781860 -241.83549500]
[503.65798950 -238.21884155]
[501.63195801 -234.53137207]
[497.77236938 -231.66069031]
[492.48242188 -230.46009827]
[481.49841309 -220.24487305]
[470.51437378 -210.02963257]
[469.74096680 -197.89427185]
[460.58480835 -189.29356384]
[447.62045288 -189.27816772]
[436.39279175 -179.33131409]
[431.99707031 -165.10012817]
[416.53671265 -161.74037170]
[405.30905151 -151.79353333]
[405.59832764 -141.45561218]
[399.98583984 -132.50723267]
[390.15032959 -128.08564758]
[379.29635620 -129.89985657]
[367.60125732 -120.50707245]
[355.90612793 -111.11429596]
[344.21102905 -101.72151947]
[339.13287354 -87.71931458]
[323.52825928 -85.11042023]
[311.83312988 -75.71764374]
[300.13803101 -66.32486725]
[288.44290161 -56.93209076]
[276.74780273 -47.53931046]
[265.40075684 -37.72885895]
[254.41673279 -27.51362038]
[243.43270874 -17.29838371]
[240.64900208 -10.36935234]
[232.05764771 -6.97297716]
[220.82998657 2.97386265]
[209.60232544 12.92070293]
[208.96215820 27.75733948]
[197.71742249 38.00479126]
[182.15972900 37.23272705]
[170.93206787 47.17956924]
[159.70440674 57.12640762]
[148.47674561 67.07324982]
[137.24908447 77.02008820]
[126.02142334 86.96692657]
[128.32394409 106.68803406]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[15 32]
[16 31]
[17 30]
[18 29]
[19 26]
[20 25]
[37 128]
[38 127]
[39 126]
[40 125]
[41 124]
[42 123]
[45 120]
[46 119]
[47 118]
[48 116]
[49 115]
[50 114]
[54 113]
[55 112]
[56 111]
[57 110]
[58 109]
[60 107]
[61 106]
[62 105]
[63 104]
[65 100]
[66 99]
[68 97]
[69 96]
[71 93]
[72 92]
[73 91]
[74 87]
[75 86]
[76 85]
[77 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
