%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCCAGCUGCCUGAGACCCUCCUGCAGCCUUCUCAAGGGACAGCCCCACUCUGCCUCUUGCUCCUCCAGGGCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[100.00605774 165.27731323]
[87.41431427 164.05253601]
[75.29530334 160.42189026]
[64.10422516 154.52174377]
[54.26142502 146.57371521]
[46.13661194 136.87631226]
[40.03495789 125.79381561]
[36.18564606 113.74247742]
[21.25610352 115.19464111]
[6.32656240 116.64679718]
[-8.60297966 118.09896088]
[-23.53252220 119.55112457]
[-33.55863953 131.47232056]
[-48.72000504 132.73233032]
[-60.02324677 123.10049438]
[-74.95278931 124.55265808]
[-89.88233185 126.00482178]
[-105.06171417 133.55616760]
[-116.52001190 121.06041718]
[-107.68457794 106.59074402]
[-91.33449554 111.07527924]
[-76.40495300 109.62311554]
[-61.47541046 108.17095947]
[-52.24021912 96.54138947]
[-37.12022781 94.85601044]
[-24.98468399 104.62158203]
[-10.05514240 103.16941833]
[4.87439919 101.71726227]
[19.80394173 100.26509857]
[34.73348236 98.81293488]
[36.13063049 86.51553345]
[39.82373810 74.70286560]
[45.68004990 63.79957962]
[53.48904419 54.19761658]
[62.97000122 46.24214935]
[73.78210449 40.21915436]
[85.53668976 36.34514999]
[97.81118774 34.75939560]
[110.16437531 35.51889420]
[114.18696594 21.06833267]
[118.20955658 6.61776972]
[111.60700226 -8.00364876]
[119.04981232 -22.21576309]
[134.82849121 -25.11625671]
[146.83898926 -14.48011684]
[145.86788940 1.53351808]
[132.66012573 10.64035892]
[128.63752747 25.09092140]
[124.61494446 39.54148483]
[143.36665344 51.21004105]
[157.15408325 68.46370697]
[164.39894104 89.32741547]
[164.27188110 111.41284180]
[178.64172363 115.71488953]
[193.01156616 120.01693726]
[207.38140869 124.31898499]
[221.75125122 128.62103271]
[236.12109375 132.92308044]
[243.05323792 131.69599915]
[248.61529541 133.99147034]
[251.41392517 138.15568542]
[265.40719604 143.55834961]
[279.75424194 136.92980957]
[294.55715942 142.46597290]
[301.03363037 156.88230896]
[295.34127808 171.62586975]
[280.85726929 177.94956970]
[266.17471313 172.10165405]
[260.00451660 157.55160522]
[246.01126099 152.14894104]
[231.81904602 147.29292297]
[217.44920349 142.99087524]
[203.07936096 138.68882751]
[188.70951843 134.38677979]
[174.33967590 130.08473206]
[159.96983337 125.78268433]
[153.87023926 136.86631775]
[145.74722290 146.56521606]
[135.90589905 154.51507568]
[124.71591187 160.41731262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[15 23]
[16 22]
[17 21]
[39 49]
[40 48]
[41 47]
[53 76]
[54 75]
[55 74]
[56 73]
[57 72]
[58 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
