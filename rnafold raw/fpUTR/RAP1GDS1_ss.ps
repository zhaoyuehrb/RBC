%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCGCCGCUCGUCCCCGCCGCGGCCGCGCCGCCUGCAGCAGCACCAGCUGCUCCUCCCCGGCGGCCGCCCCCCGCGGGUCCCUCCCUGGCUGCGGGAGAGACGGAGGUAGAGGGAGGACACAGAGCCGCGCCGCCCGCACCACAGACCUUCGCCUCGCCCCGCCGGUUCCUCACCCUCGGGGAGCAAC\
) } def
/len { sequence length } bind def

/coor [
[143.89427185 147.67753601]
[130.73359680 154.87452698]
[115.74861145 154.20336914]
[103.28402710 145.85867310]
[96.95378113 132.25984192]
[98.59232330 117.35198212]
[91.05673981 130.32174683]
[83.52115631 143.29151917]
[75.98557281 156.26129150]
[68.44998932 169.23106384]
[68.83399200 187.63336182]
[53.29840469 195.77941895]
[45.97716141 208.87138367]
[46.74284363 225.25263977]
[32.79489136 233.87741089]
[18.48176193 225.87327576]
[18.52757454 209.47418213]
[32.88520050 201.55014038]
[40.20644760 188.45817566]
[37.21887970 176.72534180]
[43.22534943 165.75361633]
[55.48021698 161.69548035]
[63.01580048 148.72570801]
[70.55138397 135.75593567]
[78.08696747 122.78617096]
[85.62255096 109.81639862]
[81.96192169 103.27041626]
[66.96333313 103.06513214]
[74.64067841 90.17845917]
[70.98005676 83.63248444]
[55.98462296 83.26243591]
[40.98918915 82.89238739]
[25.99375343 82.52234650]
[10.99831867 82.15229797]
[-3.99711609 81.78225708]
[-21.22640800 92.22569275]
[-37.29048920 81.48085785]
[-54.16697311 92.48532867]
[-70.57575989 82.27465820]
[-85.56307983 82.89128876]
[-100.55039978 83.50791931]
[-115.53771973 84.12455750]
[-130.52503967 84.74118805]
[-145.51235962 85.35781860]
[-159.06823730 94.58658600]
[-173.71894836 87.21849823]
[-174.39309692 70.83321381]
[-160.39718628 62.28650665]
[-146.12899780 70.37049866]
[-131.14167786 69.75386810]
[-116.15435791 69.13723755]
[-101.16703796 68.52059937]
[-86.17971039 67.90396881]
[-71.19239044 67.28733826]
[-64.95931244 59.16408920]
[-55.07350540 55.74965668]
[-44.72990417 58.40355301]
[-37.41384888 66.48136902]
[-30.91696358 58.56752014]
[-20.92420387 55.48007965]
[-10.67348385 58.47274399]
[-3.62707090 66.78681946]
[11.36836433 67.15686798]
[26.36379814 67.52690887]
[41.35923386 67.89695740]
[56.35466766 68.26699829]
[71.35010529 68.63704681]
[97.70101929 71.98928070]
[107.48394012 88.48782349]
[120.63566589 81.27449799]
[129.01463318 67.85422516]
[143.89443970 68.51774597]
[157.04617310 61.30442047]
[170.19789124 54.09109116]
[183.34962463 46.87776184]
[196.50134277 39.66443253]
[204.88031006 26.24416161]
[219.76013184 26.90768623]
[232.91184998 19.69435692]
[246.06358337 12.48102665]
[259.21530151 5.26769733]
[257.63064575 -9.82417393]
[261.93319702 -24.33386612]
[271.43743896 -36.05918121]
[284.67089844 -43.23297882]
[299.60214233 -44.78946304]
[313.95266724 -40.52241516]
[325.54455566 -31.11192322]
[338.69628906 -38.32525253]
[351.84802246 -45.53858185]
[364.99972534 -52.75191116]
[378.15145874 -59.96524048]
[384.18362427 -66.84779358]
[391.57934570 -67.18702698]
[397.72390747 -73.96943665]
[405.12420654 -74.18698883]
[418.50607300 -80.96384430]
[431.88790894 -87.74070740]
[440.70373535 -100.87812805]
[455.55368042 -99.72556305]
[468.93554688 -106.50242615]
[482.31741333 -113.27928925]
[491.13323975 -126.41670990]
[505.98318481 -125.26414490]
[519.36505127 -132.04100037]
[532.74688721 -138.81787109]
[546.12872314 -145.59472656]
[559.51062012 -152.37159729]
[572.89245605 -159.14845276]
[586.27435303 -165.92532349]
[588.16400146 -187.19580078]
[602.40441895 -202.92773438]
[623.11822510 -206.86949158]
[641.90063477 -197.58656311]
[654.54968262 -205.64895630]
[667.19873047 -213.71133423]
[674.67724609 -227.65344238]
[689.56848145 -227.96963501]
[702.21752930 -236.03201294]
[707.78411865 -243.29626465]
[715.14154053 -244.12100220]
[722.84838867 -257.93823242]
[737.74279785 -258.00942993]
[741.16906738 -273.43786621]
[754.54595947 -281.85409546]
[769.93731689 -278.26495361]
[778.21166992 -264.79977417]
[774.45996094 -249.44723511]
[760.90808105 -241.31571960]
[745.59606934 -245.22952271]
[738.80334473 -231.97401428]
[722.99481201 -231.34107971]
[710.27990723 -223.38298035]
[697.63085938 -215.32060242]
[691.05712891 -201.95516968]
[675.26110840 -201.06230164]
[662.61206055 -192.99992371]
[649.96307373 -184.93754578]
[651.83972168 -176.00086975]
[651.18493652 -166.86924744]
[648.03643799 -158.24763489]
[642.62469482 -150.80517578]
[635.35662842 -145.12326050]
[626.78454590 -141.65010071]
[617.56457520 -140.66546631]
[608.40612793 -142.25807190]
[600.01757812 -146.31787109]
[593.05120850 -152.54345703]
[579.66931152 -145.76660156]
[566.28747559 -138.98973083]
[552.90563965 -132.21287537]
[539.52374268 -125.43601227]
[526.14190674 -118.65914917]
[512.76000977 -111.88228607]
[504.90136719 -99.22959137]
[489.09426880 -99.89743042]
[475.71240234 -93.12056732]
[462.33053589 -86.34370422]
[454.47189331 -73.69100952]
[438.66479492 -74.35884857]
[425.28292847 -67.58198547]
[411.90106201 -60.80512619]
[398.57537842 -53.91844177]
[385.36477661 -46.81351471]
[372.21307373 -39.60018539]
[359.06134033 -32.38685608]
[345.90960693 -25.17352867]
[332.75787354 -17.96019936]
[334.46292114 -3.12705398]
[330.34786987 11.26780319]
[321.00991821 23.02226067]
[307.84759521 30.32575417]
[292.85156250 32.03811646]
[278.30340576 27.86746979]
[266.42861938 18.41942215]
[253.27690125 25.63275146]
[240.12518311 32.84608078]
[226.97344971 40.05941010]
[219.53520203 52.96373367]
[203.71467590 52.81615829]
[190.56295776 60.02948761]
[177.41122437 67.24281311]
[164.25950623 74.45614624]
[151.10777283 81.66947174]
[143.66950989 94.57379913]
[127.84899902 94.42622375]
[114.69727325 101.63954926]
[129.64343262 100.36973572]
[143.08135986 107.03472137]
[151.11491394 119.70207977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[12 19]
[13 18]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[37 58]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[69 187]
[70 186]
[72 184]
[73 183]
[74 182]
[75 181]
[76 180]
[78 178]
[79 177]
[80 176]
[81 175]
[88 168]
[89 167]
[90 166]
[91 165]
[92 164]
[94 163]
[96 162]
[97 161]
[98 160]
[100 158]
[101 157]
[102 156]
[104 154]
[105 153]
[106 152]
[107 151]
[108 150]
[109 149]
[110 148]
[114 138]
[115 137]
[116 136]
[118 134]
[119 133]
[121 132]
[123 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
