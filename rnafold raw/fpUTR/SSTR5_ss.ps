%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUGCAUGUGCUGGUUCAGGGACUCACCACCCUGGCGUCCUCCCUUCUUCUCUUGCAGAGCCUGACGCACCCCAGGGCUGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[73.74318695 326.16781616]
[66.28993988 311.56024170]
[75.43963623 297.95086670]
[75.96900940 282.96020508]
[67.89230347 273.76876831]
[68.34888458 261.13735962]
[77.64291382 251.98564148]
[78.70099640 237.02301025]
[79.75907898 222.06037903]
[77.02951813 215.01031494]
[81.12773132 206.59135437]
[82.71320343 191.67536926]
[76.36450195 178.20158386]
[85.51712036 165.29652405]
[87.10260010 150.38055420]
[88.68807983 135.46458435]
[90.27355194 120.54861450]
[78.57891846 111.97734070]
[73.80641174 97.13245392]
[78.97827148 81.26612854]
[65.41489410 74.86028290]
[51.85152054 68.45442963]
[38.28814697 62.04858780]
[24.72477341 55.64273834]
[11.18173599 63.21675873]
[-4.22269535 61.35044479]
[-15.56520271 50.76143646]
[-18.48436165 35.52141953]
[-11.85769367 21.49049187]
[1.76670933 14.06383324]
[17.14998817 16.09714508]
[28.37695694 26.80857658]
[31.13061905 42.07936478]
[44.69399261 48.48521042]
[58.25737000 54.89105988]
[71.82073975 61.29690552]
[85.38411713 67.70275116]
[100.04895020 64.54956055]
[109.78060150 53.13487625]
[119.51225281 41.72019196]
[129.24391174 30.30551147]
[138.97555542 18.89082909]
[134.40472412 6.98397779]
[135.41558838 -5.65667915]
[141.74725342 -16.55948448]
[152.10464478 -23.61990166]
[164.42289734 -25.50666618]
[176.27893066 -21.91241455]
[186.79151917 -32.61220169]
[197.30412292 -43.31198883]
[207.81671143 -54.01177597]
[211.96923828 -69.27830505]
[226.40818787 -72.93431091]
[229.98654175 -88.93829346]
[245.71435547 -93.58245850]
[257.41217041 -82.08928680]
[253.04631042 -66.28197479]
[237.10797119 -62.42172241]
[233.70736694 -47.92050934]
[218.51649475 -43.49918747]
[208.00390625 -32.79940033]
[197.49131775 -22.09961128]
[186.97872925 -11.39982414]
[190.76869202 5.66462564]
[183.64790344 21.79761505]
[168.21850586 30.65083694]
[150.39024353 28.62248039]
[140.65858459 40.03716278]
[130.92694092 51.45184326]
[121.19528198 62.86652756]
[111.46363068 74.28121185]
[123.14530182 86.48537445]
[125.33261108 102.40106201]
[118.15085602 115.83937073]
[105.18952942 122.13408661]
[103.60404968 137.05006409]
[102.01856995 151.96603394]
[100.43309021 166.88200378]
[106.66839600 181.42269897]
[97.62918091 193.26084900]
[96.04370117 208.17683411]
[94.72171783 223.11845398]
[93.66362762 238.08110046]
[92.60554504 253.04373169]
[101.08326721 269.27279663]
[90.95966339 283.48959351]
[90.43029022 298.48025513]
[98.59720612 312.70114136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 87]
[4 86]
[7 84]
[8 83]
[9 82]
[11 81]
[12 80]
[14 78]
[15 77]
[16 76]
[17 75]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[48 63]
[49 62]
[50 61]
[51 60]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
