%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAACUUCCGGCGGGAACCGGAAGGUGCGGUGGCACUCACGGAAUCUCGGGUCUUCUGACGUGCCGGGCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[79.98719025 278.22640991]
[68.54239655 268.06396484]
[63.14210510 253.74279785]
[65.02726746 238.55383301]
[73.76467896 225.98736572]
[87.34655762 218.93107605]
[79.60926056 206.20379639]
[87.34655762 192.40362549]
[87.34655762 177.40362549]
[87.34655762 162.40362549]
[87.34655762 147.40362549]
[87.34655762 132.40362549]
[87.34655762 117.40363312]
[84.73799133 92.94944000]
[76.62837982 80.33063507]
[68.51876068 67.71183014]
[60.40915298 55.09302902]
[43.91773987 47.20355606]
[43.44911957 29.78328705]
[34.83155441 17.50576591]
[26.21398735 5.22824287]
[12.60120869 4.40398407]
[2.15873361 -4.05919933]
[-1.36256015 -16.82759857]
[3.13063645 -29.07833672]
[-4.97897577 -41.69713974]
[-13.08858776 -54.31594086]
[-21.19820023 -66.93474579]
[-29.30781174 -79.55355072]
[-44.12395859 -86.58304596]
[-45.17442703 -102.94851685]
[-31.37858772 -111.81455994]
[-16.92841530 -104.06056213]
[-16.68900871 -87.66316223]
[-8.57939720 -75.04435730]
[-0.46978506 -62.42555618]
[7.63982725 -49.80675125]
[15.74943924 -37.18795013]
[32.20738983 -34.42298889]
[41.87577820 -20.41267014]
[38.49150848 -3.38932371]
[47.10907745 8.88819885]
[55.72664261 21.16571999]
[67.74674988 23.64540672]
[74.99176788 34.04913712]
[73.02795410 46.98341751]
[81.13756561 59.60221863]
[89.24717712 72.22102356]
[97.35678864 84.83982849]
[110.87132263 91.34808350]
[123.81193542 82.24581909]
[137.26089478 88.64698029]
[152.18293762 87.11963654]
[167.10496521 85.59228516]
[180.07423401 75.55585480]
[195.14610291 82.01891327]
[196.81590271 98.33282471]
[183.36590576 107.71523285]
[168.63230896 100.51432800]
[153.71028137 102.04167175]
[138.78823853 103.56901550]
[126.91494751 112.56202698]
[112.39866638 106.27011871]
[102.34655762 117.40363312]
[102.34655762 132.40362549]
[102.34655762 147.40362549]
[102.34655762 162.40362549]
[102.34655762 177.40362549]
[102.34655762 192.40362549]
[110.08386230 206.20379639]
[102.34655762 218.93107605]
[115.92843628 225.98736572]
[124.66585541 238.55383301]
[126.55101776 253.74279785]
[121.15072632 268.06396484]
[109.70592499 278.22640991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 71]
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 49]
[15 48]
[16 47]
[17 46]
[19 43]
[20 42]
[21 41]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[50 63]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
