%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCCCUCCUCCCUUGCUCGCUCGCUGGCUCCCUCCCCCCGGGCCGGCUCGGCGUUGACUCCGCCGCACGCUGCAGCCGCGGCUGGAAG\
) } def
/len { sequence length } bind def

/coor [
[125.42092133 156.86796570]
[116.85007477 159.96885681]
[107.91846466 161.78581238]
[98.81731415 162.27993774]
[89.74149323 161.44062805]
[80.88529968 159.28588867]
[72.43835449 155.86183167]
[64.58151245 151.24177551]
[57.48297501 145.52461243]
[51.29473114 138.83277893]
[46.14926910 131.30953979]
[42.15675354 123.11595154]
[39.40266418 114.42745209]
[37.94596863 105.43006134]
[37.81785202 96.31641388]
[39.02105713 87.28162384]
[41.52982330 78.51914215]
[45.29044342 70.21656799]
[50.22239304 62.55165482]
[56.22008896 55.68851471]
[63.15510941 49.77408600]
[55.80345535 36.69917679]
[48.45180511 23.62427139]
[41.10015106 10.54936314]
[25.08726120 1.65780759]
[25.72946167 -15.78878593]
[17.93570328 -28.60507774]
[10.14194393 -41.42136765]
[2.34818482 -54.23765945]
[-5.44557476 -67.05394745]
[-13.23933411 -79.87023926]
[-20.52665138 -85.72914124]
[-21.07176018 -93.25983429]
[-28.42341232 -106.33473969]
[-43.85104370 -107.99843597]
[-55.33173752 -118.43746185]
[-58.45093536 -133.63780212]
[-52.00924683 -147.75460815]
[-38.48362350 -155.35968018]
[-23.07495117 -153.52871704]
[-11.70817471 -142.96577454]
[-8.75405312 -127.73249054]
[-15.34850597 -113.68639374]
[-7.99685287 -100.61148834]
[-0.42304271 -87.66400146]
[7.37071657 -74.84770966]
[15.16447544 -62.03141785]
[22.95823479 -49.21512604]
[30.75199509 -36.39883804]
[38.54575348 -23.58254623]
[50.33719254 -20.34432793]
[56.89790344 -9.55007553]
[54.17505646 3.19771028]
[61.52671051 16.27261734]
[68.87836456 29.34752464]
[76.23001862 42.42243195]
[99.33989716 37.71233749]
[122.54441071 41.93161011]
[142.51702881 54.47537994]
[156.39453125 73.54541779]
[162.18750000 96.40790558]
[159.06546021 119.78533936]
[172.61158752 126.22759247]
[186.15769958 132.66984558]
[199.81184387 138.87988281]
[213.57000732 144.85589600]
[227.32818604 150.83190918]
[241.08634949 156.80792236]
[254.84451294 162.78395081]
[267.24700928 158.77172852]
[278.65560913 164.19418335]
[283.08270264 175.59265137]
[296.62881470 182.03489685]
[312.92395020 180.19097900]
[322.44946289 193.54000854]
[315.40631104 208.34967041]
[299.03988647 209.38504028]
[290.18655396 195.58102417]
[276.64044189 189.13876343]
[259.35098267 191.56176758]
[248.86849976 176.54211426]
[235.11033630 170.56610107]
[221.35215759 164.59008789]
[207.59399414 158.61405945]
[193.83583069 152.63804626]
[186.28886414 152.86592102]
[179.71545410 146.21595764]
[166.16932678 139.77371216]
[152.62321472 133.33145142]
[147.19583130 140.65393066]
[140.75798035 147.10600281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 56]
[22 55]
[23 54]
[24 53]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[33 44]
[34 43]
[62 89]
[63 88]
[64 87]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
