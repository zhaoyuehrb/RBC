%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACUUGCCUGAUAUUUCCAGUGUCAGAGGGACACAGCCAACGUGGGGUCCCUUCUAGGCUGACAGCCGCUCUCCAGCCACUGCCGCGAGCCCGUCUGCUCCCGCCCUGCCCGUGCACUCUCCGCAGCCGCCCUCCGCCAAGCCCCAGCGCCCGCUCCCAUCGCCG\
) } def
/len { sequence length } bind def

/coor [
[48.24659729 384.61007690]
[36.72796249 394.21844482]
[22.66727066 399.44311523]
[7.66926575 399.68771362]
[-6.55433273 394.92440796]
[-18.38018608 385.69677734]
[-26.45861244 373.05798340]
[-29.86762238 358.45050049]
[-28.21744537 343.53903198]
[-37.61699295 355.22869873]
[-47.01653671 366.91839600]
[-56.41608429 378.60806274]
[-65.81562805 390.29772949]
[-75.21517181 401.98742676]
[-84.61472321 413.67709351]
[-94.01426697 425.36676025]
[-99.22766113 441.49923706]
[-116.17288971 440.95550537]
[-120.34130096 424.52200317]
[-105.70394135 415.96722412]
[-96.30439758 404.27755737]
[-86.90485382 392.58786011]
[-77.50530243 380.89819336]
[-68.10575867 369.20852661]
[-58.70621490 357.51882935]
[-49.30666733 345.82916260]
[-39.90712357 334.13949585]
[-38.80286407 324.90417480]
[-30.56861877 318.42324829]
[-24.79579544 304.57861328]
[-19.02297401 290.73394775]
[-13.25015068 276.88928223]
[-14.22772408 274.21856689]
[-14.18305874 270.99185181]
[-12.89595985 267.60516357]
[-10.29673576 264.52789307]
[-6.48748684 262.24710083]
[0.30979645 248.87561035]
[-6.61798429 235.71719360]
[-4.44341993 220.82641602]
[6.20692492 209.94416809]
[21.39849854 207.39028931]
[28.19578171 194.01878357]
[34.86699295 180.58395386]
[41.41154480 167.08695984]
[47.95609665 153.58996582]
[54.50064850 140.09297180]
[61.04520035 126.59597778]
[67.58975220 113.09898376]
[57.94384766 124.58621216]
[43.51009369 128.66870117]
[29.27639389 123.93564606]
[20.16152573 112.02266693]
[19.31533432 97.04655457]
[27.03024292 84.18264008]
[40.64019012 77.87634277]
[55.44195175 80.30694580]
[66.32062531 90.63480377]
[58.29751968 77.96082306]
[50.27441788 65.28683472]
[42.25131607 52.61285400]
[34.22821426 39.93887329]
[19.07292175 41.74990463]
[4.63547993 36.79783249]
[-6.21754599 26.06588936]
[-11.33127975 11.68491364]
[-9.69038486 -3.48974371]
[-1.62066376 -16.44514275]
[11.27563572 -24.60897827]
[26.43794250 -26.36031723]
[40.85577011 -21.35142708]
[51.66645050 -10.57682991]
[56.72351456 3.82417321]
[55.02287292 18.99225044]
[46.90219879 31.91577148]
[54.92530060 44.58975220]
[62.94840240 57.26373672]
[70.97150421 69.93772125]
[78.99460602 82.61170197]
[91.02739716 76.83411407]
[103.13426971 77.80320740]
[112.09965515 84.08634186]
[124.99495697 76.42401886]
[132.90640259 62.72293854]
[147.80024719 62.87322998]
[160.69555664 55.21091080]
[166.50578308 48.10578537]
[173.90628052 47.52836227]
[186.94343567 40.10997009]
[199.98059082 32.69157410]
[204.26887512 17.71664810]
[217.59608459 10.37905884]
[231.84594727 14.55956268]
[244.88310242 7.14116764]
[253.05088806 -6.40866661]
[267.93927002 -5.97823620]
[280.97640991 -13.39663124]
[294.01358032 -20.81502724]
[307.05072021 -28.23342133]
[304.63360596 -41.50100708]
[306.43118286 -54.84360123]
[312.25357056 -66.95729828]
[321.51824951 -76.66267395]
[333.30828857 -83.01965332]
[346.46316528 -85.41851044]
[359.69293213 -83.63835907]
[371.70468140 -77.86739349]
[381.32901001 -68.68312836]
[394.63598633 -75.60588074]
[407.94296265 -82.52863312]
[416.29675293 -96.64054871]
[432.68975830 -96.19136047]
[440.25823975 -81.64315796]
[431.21640015 -67.96189117]
[414.86572266 -69.22166443]
[401.55874634 -62.29890823]
[388.25177002 -55.37615585]
[390.09613037 -38.86455154]
[385.46435547 -22.87078285]
[375.03613281 -9.84281540]
[360.38055420 -1.78585541]
[343.72009277 0.04624880]
[327.59350586 -4.65393591]
[314.46911621 -15.19626617]
[301.43197632 -7.77787113]
[288.39480591 -0.35947609]
[275.35766602 7.05891895]
[268.12240601 20.07814026]
[252.30149841 20.17832375]
[239.26434326 27.59671783]
[235.57913208 41.98263931]
[222.46327209 49.69166565]
[207.39898682 45.72872925]
[194.36183167 53.14712524]
[181.32467651 60.56551743]
[168.35787964 68.10620880]
[155.46257019 75.76853180]
[148.47348022 88.92155457]
[132.65727234 89.31932068]
[119.76197815 96.98164368]
[110.86881256 120.98192596]
[81.08674622 119.64353180]
[74.54219818 133.14053345]
[67.99764252 146.63752747]
[61.45309067 160.13452148]
[54.90853882 173.63151550]
[48.36398697 187.12850952]
[47.42666626 196.25883484]
[41.56727982 200.81607056]
[34.76999664 214.18757629]
[41.65917969 227.96600342]
[39.14361191 242.98350525]
[28.39468956 253.51557922]
[13.68129349 255.67289734]
[6.88401031 269.04440308]
[0.59450620 282.66210938]
[-5.17831659 296.50677490]
[-10.95113945 310.35140991]
[-16.72396278 324.19607544]
[-4.41860628 315.61831665]
[10.04074383 311.62741089]
[25.00384521 312.67889404]
[38.76295853 318.65274048]
[49.74776077 328.86715698]
[56.70455933 342.15634155]
[58.83937073 357.00366211]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[16 20]
[29 159]
[30 158]
[31 157]
[32 156]
[37 155]
[38 154]
[42 150]
[43 149]
[44 147]
[45 146]
[46 145]
[47 144]
[48 143]
[49 142]
[58 79]
[59 78]
[60 77]
[61 76]
[62 75]
[82 140]
[83 139]
[85 137]
[86 136]
[88 135]
[89 134]
[90 133]
[93 130]
[94 129]
[96 127]
[97 126]
[98 125]
[99 124]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
