%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUGAAAGCAUUUCUGGAGUGUUUUAGGCCUGUUCACUUUCUCUUACUCACUGUCUAUUCACUUGUCCUGUUCACUCGUCUGGAAGAUCUCAGCCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[77.64625549 108.89228058]
[65.48416901 117.67200470]
[53.32207870 126.45172882]
[41.15998459 135.23144531]
[28.99789619 144.01116943]
[16.83580589 152.79090881]
[4.67371511 161.57063293]
[-7.48837519 170.35035706]
[-12.72803211 178.04528809]
[-20.15792084 179.20567322]
[-32.58210373 187.61041260]
[-45.00628662 196.01516724]
[-57.43046570 204.41990662]
[-69.85464478 212.82464600]
[-79.58600616 226.70762634]
[-95.62033844 221.19976807]
[-94.76647186 204.26733398]
[-78.25939178 200.40046692]
[-65.83521271 191.99572754]
[-53.41102982 183.59097290]
[-40.98684692 175.18623352]
[-28.56266594 166.78149414]
[-16.26809883 158.18826294]
[-4.10600901 149.40853882]
[8.05608177 140.62881470]
[20.21817207 131.84909058]
[32.38026047 123.06935883]
[44.54235077 114.28963470]
[56.70444489 105.50991058]
[68.86653137 96.73018646]
[54.56721115 92.19924927]
[40.92115021 85.97149658]
[28.12885094 78.13842010]
[16.37827492 68.81511688]
[5.84207296 58.13857651]
[-3.32494307 46.26567459]
[-10.98808193 33.37085724]
[-17.03474808 19.64359093]
[-21.37609673 5.28557301]
[-23.94833946 -9.49223328]
[-24.71368408 -24.47269630]
[-23.66088295 -39.43570328]
[-20.80540466 -54.16140366]
[-16.18920708 -68.43343353]
[-9.88011646 -82.04208374]
[-1.97083163 -94.78739929]
[7.42243385 -106.48212433]
[18.16166496 -116.95442200]
[30.08906555 -126.05041504]
[43.02938843 -133.63645935]
[56.79249954 -139.60108948]
[71.17617035 -143.85665894]
[85.96906281 -146.34066772]
[100.95382690 -147.01658630]
[115.91028595 -145.87451172]
[130.61868286 -142.93119812]
[144.86289978 -138.22990417]
[158.43365479 -131.83970642]
[171.13154602 -123.85449219]
[182.77000427 -114.39159393]
[193.17800903 -103.59005737]
[202.20266724 -91.60858154]
[209.71133423 -78.62321472]
[215.59371948 -64.82475281]
[219.76338196 -50.41593552]
[222.15905762 -35.60847855]
[222.74552917 -20.61994934]
[221.51420593 -5.67057276]
[218.48315430 9.01999474]
[213.69692993 23.23590469]
[207.22586060 36.76828003]
[199.16500854 49.41828537]
[189.63282776 61.00005722]
[178.76936340 71.34341431]
[166.73423767 80.29639435]
[153.70428467 87.72743988]
[139.87095642 93.52736664]
[125.43751526 97.61095428]
[110.60629272 99.91912079]
[121.29346466 110.44454193]
[132.13990784 120.80575562]
[143.14308167 131.00035095]
[154.14627075 141.19496155]
[165.14945984 151.38955688]
[180.72048950 150.96443176]
[191.73405457 161.45994568]
[192.04339600 176.30717468]
[208.14533997 179.41513062]
[213.24829102 195.00012207]
[202.10276794 207.02963257]
[186.17433167 203.12875366]
[181.84878540 187.31034851]
[167.02114868 188.13294983]
[155.71713257 177.95091248]
[154.95484924 162.39274597]
[143.95167542 152.19815063]
[132.94848633 142.00354004]
[121.94529724 131.80894470]
[114.77792358 129.53332520]
[110.76805115 121.13171387]
[100.08087921 110.60629272]
[95.23539734 124.80211639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[7 24]
[8 23]
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[79 101]
[80 100]
[81 98]
[82 97]
[83 96]
[84 95]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
