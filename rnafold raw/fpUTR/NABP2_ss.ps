%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCACUCCCGCGUUCCACGGGGCAGCAUCCGGCGGCAGCGGAGCCUGUGGCUCCCCCUGCGGGCUGCUCAGCGGCGUGCACAGUCCUGCCGGCUGGCUUGGUGGGGUGCCGAGGCUCAGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[142.26138306 589.23120117]
[154.16044617 579.60461426]
[151.16479492 564.90679932]
[146.69619751 558.91412354]
[148.28343201 549.80218506]
[145.65808105 535.03369141]
[143.03274536 520.26525879]
[133.25236511 513.02856445]
[130.99717712 500.66363525]
[138.02838135 489.76339722]
[135.77499390 474.93362427]
[133.52162170 460.10385132]
[131.26823425 445.27404785]
[129.01484680 430.44427490]
[126.76146698 415.61450195]
[124.50807953 400.78472900]
[122.25469971 385.95495605]
[120.00131226 371.12518311]
[110.43985748 359.70468140]
[116.01621246 344.89877319]
[113.76283264 330.06900024]
[111.50944519 315.23922729]
[109.25606537 300.40945435]
[105.91870117 296.85144043]
[104.85425568 291.12469482]
[107.28157043 284.77975464]
[105.77614594 269.85549927]
[96.80058289 257.96902466]
[103.11380768 243.46199036]
[101.60838318 228.53773499]
[100.10295868 213.61346436]
[98.59753418 198.68919373]
[97.09210205 183.76493835]
[95.58667755 168.84066772]
[94.08125305 153.91639709]
[84.87378693 145.96353149]
[83.55641174 133.46386719]
[91.38872528 123.12424469]
[90.25881958 108.16686249]
[84.04319000 94.51527405]
[73.50344086 83.84223938]
[62.96368790 73.16920471]
[52.42393875 62.49617004]
[41.88418961 51.82313538]
[31.34443855 41.15010071]
[15.91288662 34.12845230]
[18.38824654 17.35618401]
[35.19029617 15.09178162]
[42.01747513 30.61034966]
[52.55722427 41.28338623]
[63.09697342 51.95642090]
[73.63672638 62.62945557]
[84.17647552 73.30249023]
[94.71622467 83.97552490]
[102.02517700 82.29349518]
[106.42046356 67.95189667]
[116.64307404 78.92943573]
[123.95202637 77.24740601]
[128.76618958 63.04092789]
[133.58033752 48.83445358]
[138.39448547 34.62797928]
[135.49559021 19.07462120]
[146.90830994 9.50388145]
[151.72245789 -4.70259333]
[156.53660583 -18.90906715]
[161.35076904 -33.11554337]
[166.16491699 -47.32201767]
[165.52191162 -64.26376343]
[181.62356567 -69.57158661]
[191.18133545 -55.56854248]
[180.37139893 -42.50786209]
[175.55723572 -28.30138779]
[170.74308777 -14.09491348]
[165.92893982 0.11156080]
[161.11477661 14.31803513]
[164.35803223 28.85524940]
[152.60096741 39.44213104]
[147.78680420 53.64860916]
[142.97265625 67.85507965]
[138.15850830 82.06155396]
[131.02455139 100.55873108]
[117.68785095 109.10667419]
[105.21620178 107.03696442]
[106.34610748 121.99434662]
[117.08692169 136.88746643]
[109.00551605 152.41098022]
[110.51094818 167.33525085]
[112.01637268 182.25950623]
[113.52179718 197.18377686]
[115.02722168 212.10803223]
[116.53264618 227.03230286]
[118.03807068 241.95657349]
[127.12131500 254.91053772]
[120.70041656 268.35006714]
[122.20584106 283.27435303]
[124.08583832 298.15606689]
[126.33921814 312.98583984]
[128.59260559 327.81561279]
[130.84599304 342.64538574]
[140.56861877 355.12661743]
[134.83108521 368.87179565]
[137.08447266 383.70156860]
[139.33786011 398.53134155]
[141.59124756 413.36111450]
[143.84461975 428.19088745]
[146.09800720 443.02069092]
[148.35139465 457.85046387]
[150.60478210 472.68023682]
[152.85815430 487.51000977]
[164.69030762 501.55172729]
[157.80120850 517.63989258]
[160.42655945 532.40838623]
[163.05189514 547.17681885]
[165.86262512 561.91113281]
[168.85826111 576.60894775]
[183.57574463 580.81066895]
[194.64680481 591.37902832]
[199.52737427 605.88555908]
[197.09594727 620.99670410]
[187.91125488 633.24005127]
[174.08384705 639.80218506]
[158.79119873 639.17517090]
[145.54740906 631.50311279]
[137.39582825 618.54895020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 115]
[3 114]
[5 113]
[6 112]
[7 111]
[10 109]
[11 108]
[12 107]
[13 106]
[14 105]
[15 104]
[16 103]
[17 102]
[18 101]
[20 99]
[21 98]
[22 97]
[23 96]
[26 95]
[27 94]
[29 92]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[35 86]
[38 84]
[39 83]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
[58 80]
[59 79]
[60 78]
[61 77]
[63 75]
[64 74]
[65 73]
[66 72]
[67 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
