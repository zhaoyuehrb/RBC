%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGGGGUUCCUCAGCUGGCUGAGGUGGAGUCAGUGUCAGUCAGGGAGGCGAACUGCUGAGCACUGGCCGCGGACGCUCCGUUGCAGUCUCGCCCAGGGGCCGGUACCUGCGCUCGCGCCGCCGGGUUGAAAGGAUGAAGCCGCAGCUGGAGCAGCCACCCU\
) } def
/len { sequence length } bind def

/coor [
[106.56841278 202.85853577]
[91.65003967 208.75952148]
[77.80728149 200.65040588]
[75.65911865 184.75183105]
[86.85343933 173.25979614]
[88.00167847 158.30380249]
[89.14991760 143.34782410]
[90.29815674 128.39183044]
[91.44639587 113.43585205]
[84.51730347 110.56571960]
[63.73001099 101.95534515]
[53.96646118 113.34275055]
[44.20290756 124.73016357]
[34.43935394 136.11756897]
[24.67580223 147.50497437]
[14.91224957 158.89237976]
[12.42633820 175.10202026]
[-2.95069790 180.80104065]
[-15.40028286 170.12677002]
[-12.11534977 154.05999756]
[3.52484250 149.12882996]
[13.28839493 137.74142456]
[23.05194664 126.35401154]
[32.81549835 114.96660614]
[42.57905197 103.57920074]
[52.34260559 92.19179535]
[50.42460251 84.94119263]
[44.67058945 63.18937683]
[30.51021767 69.67948914]
[16.26569748 64.33643341]
[10.16562843 50.79668427]
[-3.95147204 45.72643280]
[-18.06857300 40.65617752]
[-32.18567276 35.58592606]
[-46.30277252 30.51567078]
[-60.41987610 25.44541740]
[-74.53697205 20.37516594]
[-88.70198822 15.44035625]
[-102.91362000 10.64144516]
[-117.12525177 5.84253311]
[-131.33688354 1.04362166]
[-140.51652527 1.25927687]
[-145.77323914 -3.98571706]
[-159.89033508 -9.05597019]
[-174.00744629 -14.12622356]
[-186.18116760 -4.64973545]
[-201.54779053 -3.28198147]
[-215.20385742 -10.45940685]
[-222.79176331 -23.89172173]
[-221.89025879 -39.29272079]
[-212.78698730 -51.74800491]
[-198.38679504 -57.28313828]
[-183.28469849 -54.13187408]
[-172.29974365 -43.29977798]
[-168.93719482 -28.24332428]
[-154.82008362 -23.17307091]
[-140.70298767 -18.10281754]
[-126.53797150 -13.16800880]
[-112.32633972 -8.36909771]
[-98.11470795 -3.57018590]
[-83.90307617 1.22872555]
[-76.52529144 0.38534138]
[-69.46672058 6.25806427]
[-55.34962082 11.32831764]
[-41.23252106 16.39857101]
[-27.11541939 21.46882439]
[-12.99831963 26.53907776]
[1.11878109 31.60933113]
[15.23588181 36.67958450]
[28.55657959 30.11493683]
[42.94555664 35.05578995]
[49.74084091 49.07227707]
[111.58370209 88.53585815]
[125.96871185 84.28481293]
[133.55784607 70.68176270]
[148.20684814 66.57552338]
[161.12850952 73.89442444]
[175.51351929 69.64337921]
[189.89852905 65.39233398]
[204.28353882 61.14128876]
[218.66856384 56.89024353]
[233.01219177 52.50161362]
[247.31314087 47.97580338]
[261.61407471 43.44999695]
[275.91503906 38.92418671]
[290.21597290 34.39837646]
[301.03851318 22.85786629]
[315.50714111 26.39450073]
[329.80810547 21.86869240]
[340.63061523 10.32818222]
[355.09927368 13.86481571]
[369.40020752 9.33900642]
[383.70114136 4.81319809]
[397.95809937 0.15062375]
[412.16973877 -4.64828777]
[416.97570801 -20.84230423]
[430.34396362 -30.89493942]
[446.90383911 -31.01460648]
[460.14791870 -21.35173798]
[474.26501465 -26.42199135]
[484.63757324 -38.36856461]
[499.23107910 -35.38871384]
[513.34814453 -40.45896912]
[527.46527100 -45.52922058]
[541.58239746 -50.59947586]
[555.69946289 -55.66972733]
[558.57611084 -64.73633575]
[565.22418213 -71.34500885]
[574.04406738 -74.08568573]
[582.99517822 -72.45792389]
[590.06756592 -66.95697021]
[604.45257568 -71.20802307]
[618.83758545 -75.45906830]
[629.73516846 -87.71361542]
[645.73992920 -84.13871002]
[650.38751221 -68.41191101]
[638.89685059 -56.71160126]
[623.08862305 -61.07405090]
[608.70361328 -56.82300568]
[594.31860352 -52.57196045]
[581.53845215 -36.39785004]
[560.76971436 -41.55262756]
[546.65264893 -36.48237228]
[532.53552246 -31.41212082]
[518.41839600 -26.34186745]
[504.30133057 -21.27161407]
[494.93850708 -9.68769741]
[479.33529663 -12.30488968]
[465.21817017 -7.23463678]
[462.67898560 5.89862680]
[453.90261841 16.13663292]
[441.10766602 20.72643661]
[427.61114502 18.36420059]
[416.96862793 9.56334305]
[402.75701904 14.36225414]
[397.40078735 19.50559425]
[388.22695923 19.11414337]
[373.92602539 23.63995361]
[359.62506104 28.16576195]
[349.82543945 39.38255692]
[334.33389282 36.16963959]
[320.03295898 40.69544601]
[310.23333740 51.91224289]
[294.74179077 48.69932175]
[280.44085693 53.22513199]
[266.13989258 57.75094223]
[251.83894348 62.27674866]
[237.53800964 66.80255890]
[232.08424377 71.84236145]
[222.91960144 71.27525330]
[208.53459167 75.52629852]
[194.14958191 79.77734375]
[179.76455688 84.02838898]
[165.37954712 88.27944183]
[158.51187134 101.44646454]
[143.98397827 105.96255493]
[130.21975708 98.66983032]
[115.83474731 102.92087555]
[106.40238190 114.58409119]
[105.25414276 129.54006958]
[104.10590363 144.49606323]
[102.95767212 159.45204163]
[101.80943298 174.40803528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 163]
[6 162]
[7 161]
[8 160]
[9 159]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[28 72]
[31 69]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[37 63]
[38 61]
[39 60]
[40 59]
[41 58]
[43 57]
[44 56]
[45 55]
[73 158]
[74 157]
[77 154]
[78 153]
[79 152]
[80 151]
[81 150]
[82 148]
[83 147]
[84 146]
[85 145]
[86 144]
[88 142]
[89 141]
[91 139]
[92 138]
[93 137]
[94 135]
[95 134]
[99 129]
[100 128]
[102 126]
[103 125]
[104 124]
[105 123]
[106 122]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
