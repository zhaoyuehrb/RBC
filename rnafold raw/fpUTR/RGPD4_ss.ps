%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGCUUUCCUGUUGGAAUUGGCGACUGCUGCGGGGCUGAGCGCUGGUUUCACGCGUCUCGGGAGCCAGGUUGGUGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[23.40245056 144.71319580]
[10.05026436 151.54833984]
[1.29180145 164.72407532]
[-13.56302738 163.63626099]
[-26.91521263 170.47140503]
[-40.26739883 177.30653381]
[-53.61958694 184.14167786]
[-66.70355988 191.47718811]
[-79.50057220 199.30256653]
[-92.29758453 207.12792969]
[-105.09459686 214.95330811]
[-112.45368958 229.60853577]
[-128.83856201 230.29273987]
[-137.39384460 216.30206299]
[-129.31861877 202.02891541]
[-112.91996765 202.15629578]
[-100.12295532 194.33091736]
[-87.32594299 186.50555420]
[-74.52893066 178.68017578]
[-72.52405548 174.09136963]
[-67.47744751 170.83906555]
[-60.45472336 170.78948975]
[-47.10253906 163.95434570]
[-33.75035095 157.11921692]
[-20.39816666 150.28407288]
[-12.59474087 137.59724426]
[3.21512532 138.19615173]
[16.56731224 131.36102295]
[18.83063698 118.52887726]
[28.26723480 109.26137543]
[41.52563477 107.16914368]
[53.70846176 113.25559235]
[67.30973816 106.93061066]
[80.91101074 100.60563660]
[85.97949219 87.03151703]
[99.11788940 80.92179108]
[112.76400757 85.79309082]
[126.36528778 79.46811676]
[139.96655273 73.14313507]
[146.62980652 66.52388000]
[154.20431519 66.84707642]
[168.03520203 61.04132462]
[181.86607361 55.23556900]
[188.77503967 48.87320709]
[196.33187866 49.48279953]
[210.37255859 44.20458603]
[224.41322327 38.92637253]
[238.45390320 33.64815521]
[252.49456787 28.36993980]
[266.53524780 23.09172440]
[280.57589722 17.81350899]
[294.61657715 12.53529453]
[301.76135254 6.43893194]
[309.28973389 7.33405304]
[323.52008057 2.59093809]
[331.95223999 -11.05744171]
[347.89691162 -12.83140945]
[359.12271118 -1.37012875]
[357.01815796 14.53428745]
[343.19769287 22.68133163]
[328.26318359 16.82128906]
[314.03283691 21.56440353]
[299.89480591 26.57596588]
[285.85412598 31.85418129]
[271.81344604 37.13239670]
[257.77279663 42.41061020]
[243.73211670 47.68882751]
[229.69143677 52.96704102]
[215.65077209 58.24525833]
[201.61009216 63.52347183]
[187.67182922 69.06645203]
[173.84094238 74.87220764]
[160.01007080 80.67795563]
[146.29153442 86.74440765]
[132.69026184 93.06938934]
[119.08898926 99.39436340]
[114.02050781 112.96848297]
[100.88211060 119.07820892]
[87.23599243 114.20690918]
[73.63471222 120.53188324]
[60.03343964 126.85686493]
[54.44045639 143.30415344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[4 25]
[5 24]
[6 23]
[7 22]
[8 19]
[9 18]
[10 17]
[11 16]
[32 81]
[33 80]
[34 79]
[37 76]
[38 75]
[39 74]
[41 73]
[42 72]
[43 71]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[54 62]
[55 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
