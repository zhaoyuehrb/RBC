%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUUGAUCCGAGCGGUCUUCCCGGUGUCUAGCUCAAGUCGCUCCUGCUGCAGCUUCGCUGCGGGCGGAGGAGGUCUGGAAGGAGGGGGCGGGCAGGGAGAGGCUGGAGCCGGUGACGCCCCCUCCUCCCGCGCUGCGAGCGCCCAGACGACGGCGAG\
) } def
/len { sequence length } bind def

/coor [
[114.40582275 157.10458374]
[112.63172150 142.20985413]
[110.85762787 127.31514740]
[92.53924561 129.16903687]
[76.26065826 119.65829468]
[64.42833710 128.87763977]
[52.59602356 138.09698486]
[40.76371002 147.31632996]
[38.67770767 162.75285339]
[26.54672432 171.93402100]
[11.84321117 169.85021973]
[0.01089543 179.06956482]
[-11.82141972 188.28890991]
[-23.65373611 197.50825500]
[-35.39439392 206.84403992]
[-47.04225159 216.29534912]
[-52.88323593 230.99887085]
[-67.64144897 233.00997925]
[-66.67959595 248.49720764]
[-75.03299713 261.57391357]
[-89.48960876 267.21182251]
[-104.49056244 263.24307251]
[-114.26767731 251.19367981]
[-115.06147003 235.69692993]
[-106.56669617 222.71160889]
[-92.04978180 217.23085022]
[-77.09276581 221.36212158]
[-72.08491516 207.33460999]
[-56.49357224 204.64749146]
[-44.84571457 195.19618225]
[-41.61599350 188.50395203]
[-32.87308121 185.67593384]
[-21.04076385 176.45658875]
[-9.20844841 167.23724365]
[2.62386680 158.01789856]
[4.19796181 143.25111389]
[16.06627846 133.73283386]
[31.54436493 135.48400879]
[43.37667847 126.26467133]
[55.20899582 117.04532623]
[67.04131317 107.82598114]
[66.89312744 92.82671356]
[54.88097000 83.84294128]
[42.86881638 74.85916901]
[30.85666275 65.87539673]
[15.41619778 67.93203735]
[3.36214232 58.65010071]
[1.49660492 43.91730118]
[-10.51554871 34.93352890]
[-22.52770233 25.94975662]
[-34.53985596 16.96598625]
[-46.55200958 7.98221350]
[-58.56416702 -1.00155818]
[-70.57631683 -9.98532963]
[-86.88172150 -14.62970257]
[-86.93264008 -31.58357430]
[-70.65542603 -36.32579803]
[-61.59254837 -21.99748421]
[-49.58039474 -13.01371193]
[-37.56824112 -4.02994061]
[-25.55608559 4.95383120]
[-13.54393101 13.93760300]
[-1.53177738 22.92137527]
[10.48037624 31.90514755]
[25.13985062 29.53124046]
[37.44985962 38.47094345]
[39.84043503 53.86324692]
[51.85258865 62.84701538]
[63.86474228 71.83078766]
[75.87689972 80.81455994]
[91.19780731 70.83419800]
[109.26232910 71.35205841]
[123.64327240 81.94125366]
[129.36224365 98.63479614]
[143.66427612 94.11243439]
[157.96632385 89.59007263]
[172.26835632 85.06770325]
[186.57038879 80.54534149]
[200.87242126 76.02297974]
[201.08729553 55.92516708]
[222.76162720 39.48958206]
[235.11932373 30.98738289]
[247.47702026 22.48518372]
[259.83471680 13.98298550]
[272.19241333 5.48078632]
[284.55010986 -3.02141237]
[296.90780640 -11.52361107]
[309.26547241 -20.02581024]
[321.62316895 -28.52800941]
[333.98086548 -37.03020859]
[346.33856201 -45.53240585]
[349.46127319 -58.08267975]
[359.97348022 -64.90393066]
[371.91632080 -62.78214645]
[384.43960571 -71.03852844]
[383.54797363 -80.81968689]
[386.29327393 -90.18936157]
[392.25109863 -97.85092926]
[400.55569458 -102.76052856]
[410.02542114 -104.26919556]
[419.33099365 -102.20835876]
[427.18188477 -96.90752411]
[440.31790161 -104.14940643]
[453.45394897 -111.39128876]
[461.46472168 -125.70070648]
[477.86380005 -125.64727020]
[485.78115845 -111.28596497]
[477.07214355 -97.39046478]
[460.69583130 -98.25526428]
[447.55978394 -91.01338196]
[434.42376709 -83.77149963]
[430.50650024 -63.75649643]
[412.90438843 -52.89093399]
[392.69598389 -58.51527023]
[380.17272949 -50.25888443]
[373.20291138 -34.17804337]
[354.84075928 -33.17471313]
[342.48306274 -24.67251396]
[330.12536621 -16.17031479]
[317.76770020 -7.66811562]
[305.41000366 0.83408338]
[293.05230713 9.33628178]
[280.69461060 17.83848190]
[268.33691406 26.34067917]
[255.97921753 34.84288025]
[243.62152100 43.34507751]
[231.26382446 51.84727478]
[230.89350891 59.33812714]
[243.49774170 67.47036743]
[230.15286255 74.31983185]
[229.78254700 81.81068420]
[241.24139404 91.49028778]
[252.70025635 101.16988373]
[264.15908813 110.84948730]
[275.61795044 120.52909088]
[291.61959839 126.13124847]
[290.66604614 143.05836487]
[274.13650513 146.82798767]
[265.93835449 131.98794556]
[254.47950745 122.30834198]
[243.02064514 112.62873840]
[231.56179810 102.94914246]
[220.10293579 93.26953888]
[205.39479065 90.32501984]
[191.09275818 94.84738159]
[176.79071045 99.36974335]
[162.48867798 103.89210510]
[148.18664551 108.41446686]
[133.88461304 112.93682861]
[125.75234222 125.54104614]
[127.52644348 140.43576050]
[129.30053711 155.33047485]
[142.48258972 163.74281311]
[147.12396240 178.67572021]
[141.03311157 193.07835388]
[127.08596802 200.15020752]
[111.86794281 196.55218506]
[102.56452179 183.98315430]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[5 41]
[6 40]
[7 39]
[8 38]
[11 35]
[12 34]
[13 33]
[14 32]
[15 30]
[16 29]
[18 27]
[42 70]
[43 69]
[44 68]
[45 67]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
[74 149]
[75 148]
[76 147]
[77 146]
[78 145]
[79 144]
[81 127]
[82 126]
[83 125]
[84 124]
[85 123]
[86 122]
[87 121]
[88 120]
[89 119]
[90 118]
[91 117]
[94 115]
[95 114]
[102 111]
[103 110]
[104 109]
[131 143]
[132 142]
[133 141]
[134 140]
[135 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
