%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGACGUAGCUGAUCGGCCCGGAAGUGCUCACACGUGUGCUCCCUGCCCUGCUCCUGGCCCCUUGGCCGGCCGGGCUGUUUCUGGCC\
) } def
/len { sequence length } bind def

/coor [
[100.07630157 365.02947998]
[89.36891937 376.04071045]
[74.58606720 380.20761108]
[59.70426178 376.40924072]
[48.72663498 365.66738892]
[44.60611343 350.87155151]
[48.45109558 336.00173950]
[59.22730255 325.05783081]
[74.03598785 320.98370361]
[77.74558258 306.44964600]
[81.45517731 291.91558838]
[84.90476990 277.31762695]
[88.09324646 262.66043091]
[81.79226685 246.38667297]
[94.00926208 232.75129700]
[96.67256165 217.98962402]
[99.33586121 203.22795105]
[101.99916077 188.46629333]
[104.66246033 173.70462036]
[107.32575226 158.94294739]
[109.98905182 144.18128967]
[112.65235138 129.41961670]
[79.11321259 129.16169739]
[60.40688705 96.88784790]
[49.42847061 86.66658020]
[38.45005417 76.44531250]
[27.47163582 66.22404480]
[16.49321747 56.00277328]
[1.28996181 59.10771179]
[-12.82079601 52.65278244]
[-20.41318130 39.12003326]
[-18.56776810 23.71308327]
[-7.99415541 12.35622120]
[7.24188805 9.41639042]
[21.28179169 16.02401733]
[28.72692680 29.63833237]
[26.71448708 45.02435684]
[37.69290543 55.24562454]
[48.67132187 65.46689606]
[59.64973831 75.68816376]
[70.62815857 85.90943146]
[77.92713928 84.18463898]
[74.47777557 69.58662415]
[89.07583618 66.13748932]
[92.52509308 80.73504639]
[99.82407379 79.01025391]
[105.06603241 64.95600891]
[104.93612671 48.00255966]
[121.19107056 43.18454742]
[130.32060242 57.47048187]
[119.12027740 70.19797516]
[113.87831879 84.25222015]
[118.89015961 89.83177185]
[128.91384888 100.99088287]
[133.92568970 106.57043457]
[148.45974731 102.86083984]
[162.99380493 99.15123749]
[177.52786255 95.44164276]
[192.06193542 91.73204803]
[206.59599304 88.02244568]
[217.94468689 76.18441772]
[233.80441284 80.35591125]
[237.86003113 96.24565887]
[225.93946838 107.50764465]
[210.30558777 102.55651093]
[195.77153015 106.26610565]
[181.23747253 109.97570038]
[166.70341492 113.68530273]
[152.16934204 117.39489746]
[137.63528442 121.10449219]
[127.41401672 132.08291626]
[124.75072479 146.84457397]
[122.08742523 161.60624695]
[119.42412567 176.36791992]
[116.76082611 191.12959290]
[114.09752655 205.89125061]
[111.43423462 220.65292358]
[108.77093506 235.41459656]
[115.52288818 246.57785034]
[112.84841156 258.93417358]
[102.75045013 265.84890747]
[99.56197357 280.50610352]
[100.80306244 289.79150391]
[95.98924255 295.62518311]
[92.27964020 310.15924072]
[88.57004547 324.69329834]
[99.61479187 335.36611938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 86]
[10 85]
[11 84]
[12 82]
[13 81]
[15 78]
[16 77]
[17 76]
[18 75]
[19 74]
[20 73]
[21 72]
[22 71]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[46 52]
[47 51]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
