%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCCUCGGCUACUUCCGAGGGGGUGAGUGGCUUCACCGCCGGUCCCUUGCAGCGCUGCCUUUCGAUCUCUCCACAUCUCGGUGGCGCGGGAUCUCAAG\
) } def
/len { sequence length } bind def

/coor [
[115.30067444 160.97666931]
[101.65503693 154.74798584]
[92.68788147 142.72341919]
[90.61032867 127.86798859]
[95.93396759 113.84574127]
[84.76599884 123.85955811]
[73.59803772 133.87338257]
[62.43008041 143.88720703]
[51.26211929 153.90103149]
[40.09415436 163.91485596]
[39.48466873 179.70738220]
[27.83009338 190.38195801]
[12.04488850 189.60552979]
[1.49413288 177.83874512]
[2.43740296 162.06263733]
[14.31507397 151.63687134]
[30.08033371 152.74688721]
[41.24829483 142.73306274]
[52.41625595 132.71923828]
[63.58421707 122.70542145]
[74.75218201 112.69159698]
[85.92014313 102.67778015]
[86.29921722 101.67160034]
[86.74745178 100.72796631]
[73.45728302 93.77301788]
[60.16711044 86.81806183]
[46.87693787 79.86310577]
[37.64479828 78.61402893]
[33.28657913 72.47958374]
[20.21913719 65.11466980]
[7.15169287 57.74975967]
[-9.23203468 58.46075439]
[-17.81019402 44.48408508]
[-9.75830936 30.19775581]
[6.64053011 30.29831696]
[14.51660442 44.68231964]
[27.58404732 52.04722977]
[40.65149307 59.41213989]
[53.83189392 66.57293701]
[67.12206268 73.52789307]
[80.41223145 80.48284149]
[93.70240021 87.43779755]
[108.69514465 87.90429688]
[122.39199829 81.78903961]
[136.08885193 75.67378998]
[149.78569031 69.55853271]
[163.48254395 63.44327927]
[177.17939758 57.32802582]
[179.39402771 53.76018524]
[182.29412842 51.23361969]
[185.50045776 49.83443832]
[188.64242554 49.52671051]
[191.39427185 50.16439438]
[193.50532532 51.51334763]
[207.98410034 47.59351730]
[222.46287537 43.67369080]
[236.94165039 39.75386047]
[251.42044067 35.83403015]
[265.89920044 31.91420364]
[280.37799072 27.99437332]
[294.85675049 24.07454491]
[298.74197388 12.61623001]
[307.64279175 4.60062838]
[319.20797729 1.98596740]
[330.45919800 5.32433510]
[338.55798340 13.65015030]
[353.25244141 10.63804436]
[367.94692993 7.62593842]
[374.23812866 -6.55856848]
[387.68212891 -14.30704117]
[403.10940552 -12.64003372]
[414.58786011 -2.19854474]
[417.70379639 13.00246048]
[411.25906372 27.11788368]
[397.73181152 34.72005844]
[382.32351685 32.88579559]
[370.95901489 22.32040024]
[356.26455688 25.33250618]
[341.57009888 28.34461212]
[332.59542847 44.14967346]
[314.65560913 48.62609100]
[298.77658081 38.55332184]
[284.29782104 42.47314835]
[269.81903076 46.39297867]
[255.34025574 50.31280899]
[240.86148071 54.23263550]
[226.38270569 58.15246582]
[211.90393066 62.07229233]
[197.42515564 65.99211884]
[183.29464722 71.02487183]
[169.59779358 77.14012909]
[155.90095520 83.25537872]
[142.20410156 89.37063599]
[128.50724792 95.48589325]
[114.81040192 101.60114288]
[129.78596497 102.45702362]
[142.50349426 110.41091156]
[149.82711792 123.50154114]
[149.95097351 138.50102234]
[142.84451294 151.71081543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[24 42]
[25 41]
[26 40]
[27 39]
[29 38]
[30 37]
[31 36]
[43 95]
[44 94]
[45 93]
[46 92]
[47 91]
[48 90]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
[66 79]
[67 78]
[68 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
