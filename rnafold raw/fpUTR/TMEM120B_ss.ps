%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGCGCGCGUGGCUCUGGCUGCGCAGGAACAGCUGGUGCCUCCGAGGGCGGUCGGCGAGCGCGCGGGCGUGGGGCGCUGGGGGGCCGGUCGGGCAGCGCUGCGGGAGCAGCCGCCGGCACCGCCGCCUUGCACCAUCGCAUC\
) } def
/len { sequence length } bind def

/coor [
[33.20167160 160.88850403]
[20.69343567 152.60937500]
[15.28423500 138.61865234]
[18.96991158 124.07850647]
[30.39004326 114.35406494]
[15.41204166 113.54198456]
[1.21321905 120.52080536]
[-11.07649803 112.10581207]
[-26.05449867 111.29373169]
[-41.03250122 110.48164368]
[-56.01050186 109.66956329]
[-70.98850250 108.85748291]
[-85.96650696 108.04539490]
[-102.14574432 116.76613617]
[-116.48374939 106.70232391]
[-130.52804565 113.98712158]
[-142.99719238 105.84035492]
[-157.98927307 105.35295105]
[-172.98133850 104.86554718]
[-187.97341919 104.37815094]
[-202.96549988 103.89074707]
[-217.95758057 103.40334320]
[-232.94966125 102.91593933]
[-247.94174194 102.42853546]
[-261.98605347 109.71333313]
[-274.45516968 101.56656647]
[-290.44168091 110.63577271]
[-304.99435425 100.88494873]
[-319.99346924 100.72245789]
[-334.99258423 100.55996704]
[-342.38238525 108.66774750]
[-352.81097412 111.27539825]
[-362.73147583 107.74742889]
[-368.90750122 99.49363708]
[-383.88549805 98.68155670]
[-398.25793457 106.57873535]
[-412.14117432 97.85018158]
[-411.25335693 81.47508240]
[-396.50778198 74.29873657]
[-383.07342529 83.70355225]
[-368.09542847 84.51564026]
[-351.61489868 74.48533630]
[-334.83010864 85.56084442]
[-319.83099365 85.72333527]
[-304.83187866 85.88583374]
[-295.92691040 77.63040924]
[-283.38232422 77.68748474]
[-273.96777344 86.57448578]
[-260.99581909 79.25482941]
[-247.45434570 87.43645477]
[-232.46226501 87.92385864]
[-217.47018433 88.41126251]
[-202.47810364 88.89866638]
[-187.48602295 89.38607025]
[-172.49394226 89.87347412]
[-157.50186157 90.36087036]
[-142.50978088 90.84827423]
[-129.53782654 83.52861786]
[-115.99634552 91.71024323]
[-106.91463470 83.64968872]
[-94.37423706 83.97851562]
[-85.15441895 93.06739807]
[-70.17642212 93.87947845]
[-55.19841766 94.69155884]
[-40.22041702 95.50364685]
[-25.24241638 96.31572723]
[-10.26441479 97.12781525]
[2.86308074 90.09090424]
[16.22412491 98.56398010]
[31.20212555 99.37606049]
[46.19420624 98.88866425]
[61.08782959 97.10543060]
[75.98146057 95.32219696]
[90.87508392 93.53897095]
[105.74851990 91.59450531]
[120.60001373 89.48902893]
[133.17752075 79.89126587]
[146.86483765 85.76550293]
[161.71632385 83.66003418]
[174.29383850 74.06227112]
[187.98115540 79.93650818]
[202.83264160 77.83103180]
[217.68414307 75.72555542]
[230.26164246 66.12779999]
[243.94895935 72.00203705]
[258.80044556 69.89656067]
[273.65194702 67.79108429]
[281.77999878 63.45927811]
[288.84762573 65.80448914]
[303.74127197 64.02126312]
[318.63488770 62.23802948]
[333.50833130 60.29356384]
[346.08581543 50.69580078]
[359.77313232 56.57003784]
[374.62463379 54.46456528]
[389.47613525 52.35908890]
[397.60415649 48.02728271]
[404.67181396 50.37249374]
[412.89178467 46.21779251]
[419.90695190 48.71557236]
[434.83572388 47.25542450]
[449.76449585 45.79527283]
[464.69323730 44.33512497]
[479.62200928 42.87497330]
[492.63632202 32.89702606]
[507.67895508 39.42787552]
[509.27529907 55.74914169]
[495.78320312 65.07090759]
[481.08215332 57.80373764]
[466.15341187 59.26388550]
[451.22463989 60.72403717]
[436.29586792 62.18418503]
[421.36712646 63.64433670]
[406.45504761 65.26612091]
[391.58160400 67.21058655]
[376.73010254 69.31606293]
[361.87860107 71.42153931]
[350.36340332 80.86869812]
[335.61380005 75.14505768]
[329.38656616 79.22837067]
[320.41812134 77.13165283]
[305.52450562 78.91488647]
[290.63085938 80.69812012]
[275.75741577 82.64258575]
[260.90594482 84.74805450]
[246.05442810 86.85353088]
[234.53921509 96.30069733]
[219.78961182 90.57705688]
[204.93812561 92.68253326]
[190.08662415 94.78800201]
[178.57139587 104.23516846]
[163.82180786 98.51152802]
[148.97030640 100.61700439]
[137.45507812 110.06416321]
[122.70549011 104.34052277]
[107.85398865 106.44599915]
[100.89098358 110.63336945]
[92.65830994 108.43259430]
[77.76468658 110.21582794]
[62.87106323 111.99905396]
[47.97743607 113.78228760]
[60.00540543 122.74487305]
[64.62739563 137.01502991]
[60.13803101 151.32745361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 70]
[6 69]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[15 59]
[17 57]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[26 48]
[28 45]
[29 44]
[30 43]
[34 41]
[35 40]
[71 141]
[72 140]
[73 139]
[74 138]
[75 136]
[76 135]
[78 133]
[79 132]
[81 130]
[82 129]
[83 128]
[85 126]
[86 125]
[87 124]
[89 123]
[90 122]
[91 121]
[92 119]
[94 117]
[95 116]
[96 115]
[98 114]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
