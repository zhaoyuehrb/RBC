%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGGGCUGCAUGCAGAGCUGAGAGCUGAGGACUCCCAUCUCCAGCCUGCCCGGGUGAAGCGCGGCCUGGGGUGUGCUGGCUGCCGUC\
) } def
/len { sequence length } bind def

/coor [
[148.96470642 243.60775757]
[160.37892151 233.87556458]
[175.35418701 234.74499512]
[167.40539551 222.02427673]
[159.45660400 209.30355835]
[151.50781250 196.58283997]
[143.55902100 183.86212158]
[135.61024475 171.14138794]
[127.66145325 158.42066956]
[119.71266174 145.69995117]
[111.76387024 132.97923279]
[98.45783997 126.28603363]
[97.70646667 110.48268127]
[87.86558533 99.16204071]
[76.37491608 89.52022552]
[64.88424683 79.87841034]
[53.39358521 70.23659515]
[44.60504532 67.01895905]
[41.67779541 60.05221558]
[30.53062248 50.01525879]
[19.38344955 39.97829819]
[8.23627758 29.94133949]
[-0.43461183 26.41894722]
[-3.11694431 19.35428810]
[-13.90704155 8.93441296]
[-24.69713783 -1.48546290]
[-39.99893188 -5.50612020]
[-43.77938461 -19.91297340]
[-54.56948090 -30.33284950]
[-63.11215973 -34.15570450]
[-65.54630280 -41.30967331]
[-75.96617889 -52.09976959]
[-91.31833649 -59.29334641]
[-88.65579224 -76.03691864]
[-71.82949829 -78.11350250]
[-65.17608643 -62.51964569]
[-54.75620651 -51.72954941]
[-44.14960480 -41.12294769]
[-33.35950851 -30.70307159]
[-18.82949638 -27.42771339]
[-14.27726269 -12.27555943]
[-3.48716593 -1.85568428]
[7.30293131 8.56419086]
[18.27323723 18.79416656]
[29.42040825 28.83112526]
[40.56758118 38.86808395]
[51.71475220 48.90504456]
[63.03539658 58.74592972]
[74.52606201 68.38774109]
[86.01673126 78.02955627]
[97.50740051 87.67137146]
[96.45159149 72.70857239]
[103.43579102 59.43375015]
[116.36501312 51.82881165]
[131.36102295 52.17493057]
[143.92561340 60.36828995]
[150.28991699 73.95121002]
[148.54489136 88.84935760]
[139.21397400 100.59389496]
[125.09608459 105.66193390]
[110.42719269 102.53388977]
[124.30177307 110.13695526]
[124.48459625 125.03044128]
[132.43338013 137.75115967]
[140.38217163 150.47187805]
[148.33096313 163.19261169]
[156.27975464 175.91333008]
[164.22854614 188.63404846]
[172.17732239 201.35476685]
[180.12611389 214.07548523]
[188.07490540 226.79621887]
[197.30982971 238.61637878]
[207.72970581 249.40647888]
[218.14958191 260.19656372]
[228.75617981 270.80316162]
[239.54627991 281.22305298]
[255.58053589 284.66317749]
[260.36022949 300.35034180]
[248.96842957 312.14688110]
[233.12403870 307.91757202]
[229.12640381 292.01315308]
[218.33630371 281.59326172]
[211.18234253 279.15911865]
[207.35948181 270.61645508]
[196.93960571 259.82635498]
[186.51972961 249.03625488]
[183.74078369 263.77658081]
[171.53654480 272.49761963]
[156.69084167 270.35171509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[13 61]
[14 51]
[15 50]
[16 49]
[17 48]
[19 47]
[20 46]
[21 45]
[22 44]
[24 43]
[25 42]
[26 41]
[28 39]
[29 38]
[31 37]
[32 36]
[72 86]
[73 85]
[74 84]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
