%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUGCGAGUGUGUGUGCGCCGGGCGGGCGGGCACUGCAGCUUCUUCCUCCGUGGAGCGGAGAGCGAGACAGAGCUACAGCGAACGAGAGAGCGGCGAAGGCGGGUAGAGGGGCGCGGGCGAGGCGGCGCAGCCAUCCCCGGACCAGGGGCCGCGCCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[169.38430786 163.26139832]
[158.37922668 153.06884766]
[143.78405762 150.09725952]
[138.91677856 135.04335022]
[127.91170502 124.85078430]
[116.90662384 114.65823364]
[117.53253174 129.64517212]
[104.36324310 136.82637024]
[92.10369110 128.18325806]
[94.44377136 113.36590576]
[82.34238434 122.22911835]
[70.24099731 131.09231567]
[58.22505188 140.07102966]
[46.29565811 149.16441345]
[34.36626816 158.25779724]
[22.43687439 167.35116577]
[16.15224266 181.87060547]
[1.33978653 183.43278503]
[-10.58960629 192.52616882]
[-22.51899910 201.61953735]
[-34.44839096 210.71292114]
[-38.00953293 226.35574341]
[-52.52192688 233.19461060]
[-66.85290527 225.98332214]
[-70.00896454 210.25376892]
[-59.56905365 198.07231140]
[-43.54177475 198.78353882]
[-31.61238098 189.69015503]
[-19.68298721 180.59677124]
[-7.75359440 171.50338745]
[-2.32223392 157.63436890]
[13.34349251 155.42178345]
[25.27288628 146.32839966]
[37.20227814 137.23501587]
[49.13167191 128.14163208]
[52.56088638 121.55501556]
[61.37778854 118.99093628]
[73.47917175 110.12773132]
[85.58055878 101.26451874]
[91.05430603 87.29891968]
[88.19844055 72.57329559]
[85.34257507 57.84766769]
[82.48670959 43.12204361]
[79.63084412 28.39641762]
[76.77497101 13.67079353]
[73.91910553 -1.05483162]
[54.77315140 -14.24625874]
[58.84286118 -40.99237823]
[51.67706680 -54.17006302]
[44.51126862 -67.34774780]
[37.21958542 -80.45619202]
[29.80268669 -93.49420166]
[22.38578606 -106.53220367]
[9.04697704 -108.59205627]
[-0.51993161 -117.83426666]
[-2.96607065 -130.71115112]
[2.38398457 -142.46292114]
[-4.78181267 -155.64059448]
[-18.57013893 -156.41528320]
[-30.07729530 -163.85310364]
[-36.34580231 -175.91473389]
[-35.82803345 -189.38966370]
[-28.76686096 -200.75054932]
[-35.67892456 -214.06307983]
[-42.59099197 -227.37561035]
[-57.95464325 -229.55226135]
[-69.08126068 -240.36788940]
[-71.69242096 -255.66369629]
[-64.78409576 -269.55810547]
[-51.01266098 -276.70843506]
[-35.67352676 -274.36526489]
[-24.66489601 -263.42953491]
[-22.21981430 -248.10632324]
[-29.27846527 -234.28767395]
[-22.36639977 -220.97514343]
[-15.45433426 -207.66261292]
[0.82843214 -205.75259399]
[12.89663887 -194.41229248]
[15.87376213 -177.95317078]
[8.39587116 -162.80639648]
[15.56166840 -149.62870789]
[31.86184120 -145.57455444]
[40.37357330 -130.70437622]
[35.42379379 -113.94910431]
[42.84069061 -100.91110229]
[50.25759125 -87.87309265]
[56.32662582 -83.59409332]
[57.68895340 -74.51354218]
[64.85475159 -61.33586121]
[72.02054596 -48.15817642]
[86.98684692 -47.15323639]
[88.89895630 -62.85847092]
[102.66139221 -68.55449677]
[104.57350922 -84.25972748]
[118.33594513 -89.95575714]
[127.19915009 -102.05714417]
[128.43693542 -118.40950775]
[143.33259583 -125.26890564]
[156.56275940 -115.57896423]
[154.51736450 -99.30787659]
[139.30053711 -93.19393158]
[130.43733215 -81.09254456]
[129.15916443 -66.25288391]
[114.76277924 -59.69128799]
[113.48461914 -44.85162735]
[99.08823395 -38.29003143]
[101.29285431 -17.14619064]
[88.64472961 -3.91069818]
[91.50060272 10.81492615]
[94.35646820 25.54055214]
[97.21233368 40.26617432]
[100.06819916 54.99180222]
[102.92406464 69.71742249]
[105.77993011 84.44305420]
[127.09918213 103.65315247]
[138.10426331 113.84570312]
[149.10934448 124.03826141]
[164.49166870 127.73889160]
[168.57177734 142.06376648]
[179.57685852 152.25631714]
[198.42785645 150.78125000]
[212.16870117 163.30303955]
[212.43669128 181.57344055]
[223.82409668 191.33699036]
[235.21150208 201.10054016]
[246.59890747 210.86408997]
[257.98632812 220.62765503]
[269.37371826 230.39120483]
[280.76113892 240.15475464]
[292.14852905 249.91830444]
[307.66131592 253.02703857]
[312.28713989 267.18511963]
[323.67453003 276.94866943]
[335.06195068 286.71221924]
[339.46206665 287.36648560]
[343.04507446 289.22305298]
[345.52932739 291.86853027]
[346.79992676 294.84011841]
[346.91006470 297.68557739]
[357.51666260 308.29217529]
[373.31896973 308.04153442]
[384.61181641 319.09808350]
[384.69537354 334.90216064]
[373.52005005 346.07748413]
[357.71597290 345.99392700]
[346.65945435 334.70108032]
[346.91006470 318.89877319]
[336.30346680 308.29217529]
[325.29840088 298.09960938]
[313.91098022 288.33605957]
[302.52359009 278.57250977]
[287.82528687 276.16213989]
[282.38497925 261.30572510]
[270.99758911 251.54216003]
[259.61016846 241.77861023]
[248.22276306 232.01506042]
[236.83535767 222.25149536]
[225.44795227 212.48794556]
[214.06054688 202.72439575]
[202.67314148 192.96084595]
[191.70314026 196.28771973]
[180.37683105 193.86004639]
[171.55279541 186.17155457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 120]
[2 119]
[4 117]
[5 116]
[6 115]
[10 39]
[11 38]
[12 37]
[13 35]
[14 34]
[15 33]
[16 32]
[18 30]
[19 29]
[20 28]
[21 27]
[40 114]
[41 113]
[42 112]
[43 111]
[44 110]
[45 109]
[46 108]
[48 90]
[49 89]
[50 88]
[51 86]
[52 85]
[53 84]
[57 81]
[58 80]
[63 76]
[64 75]
[65 74]
[91 106]
[93 104]
[95 102]
[96 101]
[123 160]
[124 159]
[125 158]
[126 157]
[127 156]
[128 155]
[129 154]
[130 153]
[132 151]
[133 150]
[134 149]
[139 148]
[140 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
