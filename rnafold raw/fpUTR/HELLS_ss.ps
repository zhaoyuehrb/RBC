%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAUGACAGGAUUUUCCCGCGAAGGAGAAGCGCGCUUUUUUCCCUGGCGGGGGAUUUGGCUAGAAGGCUGGGCCGGCAGCGGUUGUGAGGAGUUAGCUCGCGGCAUUGCAGGCUCUGAGAGGAGGGGACCCGGUUCCCGGGUGAGUGUCCAGGC\
) } def
/len { sequence length } bind def

/coor [
[106.32528687 200.65530396]
[92.06507111 205.30784607]
[77.07695770 204.71075439]
[63.23202896 198.93858337]
[52.25864792 188.71189880]
[45.52669525 175.30740356]
[43.87656784 160.39843750]
[47.51427078 145.84622192]
[55.98567581 133.46739197]
[68.23043060 124.80861664]
[79.88226318 115.36219788]
[65.12796021 118.06602478]
[52.94852448 128.16413879]
[39.03503799 122.84773254]
[24.28074074 125.55155945]
[9.52644253 128.25538635]
[-5.22785616 130.95921326]
[-19.98215485 133.66304016]
[-34.73645401 136.36685181]
[-49.49075317 139.07067871]
[-64.24504852 141.77450562]
[-76.42448425 151.87261963]
[-90.33797455 146.55621338]
[-102.51741028 156.65432739]
[-116.43089294 151.33792114]
[-131.18519592 154.04174805]
[-145.93949890 156.74557495]
[-160.69378662 159.44940186]
[-175.44808960 162.15322876]
[-190.20239258 164.85705566]
[-204.95668030 167.56086731]
[-213.72715759 180.70828247]
[-229.24157715 183.72128296]
[-242.29553223 174.81231689]
[-245.14433289 159.26689148]
[-236.09783936 146.30786133]
[-220.52317810 143.62358093]
[-207.66050720 152.80657959]
[-192.90621948 150.10275269]
[-178.15191650 147.39892578]
[-163.39761353 144.69509888]
[-148.64331055 141.99127197]
[-133.88902283 139.28744507]
[-119.13471985 136.58361816]
[-108.01061249 126.67890167]
[-93.04180145 131.80191040]
[-81.91768646 121.89720154]
[-66.94887543 127.02021027]
[-52.19457626 124.31638336]
[-37.44027710 121.61255646]
[-22.68597984 118.90873718]
[-7.93168163 116.20491028]
[6.82261705 113.50108337]
[21.57691574 110.79725647]
[36.33121490 108.09342957]
[47.45532608 98.18871307]
[62.42413712 103.31172943]
[77.17843628 100.60790253]
[83.33462524 86.92940521]
[75.57456207 74.09268188]
[67.81449127 61.25596619]
[60.05442429 48.41924667]
[45.43688202 40.98557663]
[44.83617020 24.59743500]
[58.87025452 16.11353683]
[73.10206604 24.26138687]
[72.89114380 40.65917969]
[80.65121460 53.49589920]
[88.41127777 66.33261871]
[96.17134857 79.16933441]
[111.15917969 79.77332306]
[119.92700958 67.60266113]
[128.69483948 55.43199158]
[137.46267700 43.26132202]
[146.23049927 31.09065437]
[148.01913452 15.37087822]
[161.73637390 9.56687450]
[170.50421143 -2.60379314]
[179.27203369 -14.77446079]
[188.03987122 -26.94512749]
[186.74891663 -39.81618881]
[194.34941101 -49.78286743]
[206.31161499 -51.80826950]
[215.32275391 -63.79991150]
[224.33387756 -75.79155731]
[233.34501648 -87.78319550]
[242.35615540 -99.77483368]
[251.36727905 -111.76647949]
[260.37841797 -123.75811768]
[269.38955688 -135.74975586]
[265.67541504 -150.93986511]
[272.64053345 -164.94061279]
[286.99621582 -171.14128113]
[301.96414185 -166.61412048]
[310.47689819 -153.49668884]
[308.51504517 -137.98266602]
[297.00491333 -127.39727020]
[281.38119507 -126.73862457]
[272.37005615 -114.74698639]
[263.35891724 -102.75534821]
[254.34779358 -90.76370239]
[245.33665466 -78.77206421]
[236.32553101 -66.78041840]
[227.31439209 -54.78878021]
[218.30325317 -42.79713821]
[217.15835571 -25.31004333]
[200.21054077 -18.17729759]
[191.44270325 -6.00663042]
[182.67488098 6.16403723]
[173.90704346 18.33470535]
[172.74554443 33.18395233]
[158.40116882 39.85848618]
[149.63334656 52.02915192]
[140.86550903 64.19982147]
[132.09768677 76.37049103]
[123.32984924 88.54115295]
[135.82632446 80.24428558]
[150.38043213 83.87441254]
[157.51666260 97.06813049]
[152.58892822 111.23561096]
[138.80546570 117.15304565]
[125.14035034 110.96819305]
[135.74694824 121.57479858]
[146.35354614 132.18139648]
[161.58283997 136.46849060]
[165.11128235 150.93913269]
[182.57400513 150.60322571]
[194.65951538 162.74163818]
[194.26290894 179.52886963]
[205.08094788 189.91973877]
[215.89898682 200.31060791]
[226.71702576 210.70147705]
[237.53506470 221.09233093]
[248.35310364 231.48320007]
[263.96475220 238.09472656]
[261.93338013 254.92652893]
[245.19700623 257.63403320]
[237.96223450 242.30123901]
[227.14419556 231.91036987]
[216.32615662 221.51951599]
[205.50811768 211.12864685]
[194.69007874 200.73777771]
[183.87205505 190.34690857]
[171.11834717 192.40377808]
[159.34078979 186.63734436]
[152.95686340 174.96006775]
[154.50468445 161.54573059]
[140.03404236 158.01728821]
[135.74694824 142.78799438]
[125.14035034 132.18139648]
[114.53374481 121.57479858]
[118.75683594 135.96804810]
[126.21667480 148.98152161]
[128.68524170 163.77700806]
[125.85434723 178.50746155]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 58]
[12 57]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[21 48]
[23 46]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[59 70]
[60 69]
[61 68]
[62 67]
[71 116]
[72 115]
[73 114]
[74 113]
[75 112]
[77 110]
[78 109]
[79 108]
[80 107]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
[88 100]
[89 99]
[90 98]
[122 151]
[123 150]
[124 149]
[126 147]
[129 143]
[130 142]
[131 141]
[132 140]
[133 139]
[134 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
