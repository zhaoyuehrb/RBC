%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCCAGCGCUUCCAUCCCCGCCCCGGCGGGUCCAAGCCGGUGCCGGGCGCCCAGGGGUUGCCGCGCUGGGCGGGAGGGCAGCGCCUGAGAGGGCGGUGGGGUGGCGGGGUUCCUGCGCGCGGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[65.79637909 112.59604645]
[64.50977325 97.75080872]
[50.07661057 93.66622162]
[35.64345169 89.58162689]
[21.21028900 85.49703979]
[6.77712822 81.41245270]
[-7.70397139 77.50122070]
[-22.23092842 73.76390076]
[-36.75788498 70.02658844]
[-51.28483963 66.28926849]
[-65.81179810 62.55195618]
[-76.59702301 70.71876526]
[-89.92344666 71.14423370]
[-100.88194275 63.89726257]
[-105.56587219 51.83172607]
[-119.99903107 47.74713898]
[-135.38461304 51.43418503]
[-145.52401733 40.52355957]
[-159.95718384 36.43897247]
[-174.39035034 32.35438156]
[-188.82350159 28.26979446]
[-203.39422607 24.70693207]
[-218.08366394 21.67040634]
[-232.80845642 18.81023407]
[-247.56648254 16.12682533]
[-262.32449341 13.44341469]
[-277.08251953 10.76000500]
[-291.84054565 8.07659531]
[-306.59857178 5.39318609]
[-321.35659790 2.70977640]
[-336.17474365 0.38102600]
[-351.04443359 -1.59172618]
[-365.91415405 -3.56447840]
[-380.85644531 3.19275665]
[-394.01992798 -6.58754587]
[-391.86315918 -22.84424973]
[-376.60482788 -28.85385132]
[-363.94140625 -18.43418694]
[-349.07168579 -16.46143532]
[-334.20199585 -14.48868275]
[-329.86309814 -16.69293213]
[-324.08224487 -16.12417984]
[-318.67318726 -12.04824924]
[-303.91516113 -9.36483955]
[-289.15713501 -6.68142986]
[-274.39910889 -3.99802017]
[-259.64108276 -1.31461048]
[-244.88307190 1.36879909]
[-230.12504578 4.05220890]
[-222.90975952 2.13457322]
[-215.04713440 6.98097181]
[-200.35771179 10.01749706]
[-197.16320801 8.31417179]
[-192.96231079 8.13368893]
[-188.50860596 9.94182968]
[-184.73892212 13.83663368]
[-170.30575562 17.92122269]
[-155.87258911 22.00580978]
[-141.43943787 26.09039879]
[-127.08620453 22.11119652]
[-115.91444397 33.31397629]
[-101.48128510 37.39856720]
[-87.21817017 28.57286644]
[-70.64714050 32.83078766]
[-62.07448196 48.02499771]
[-47.54752350 51.76231384]
[-33.02056885 55.49962997]
[-18.49361229 59.23694611]
[-3.96665502 62.97426224]
[3.36780953 61.58024216]
[10.86171627 66.97929382]
[25.29487801 71.06388092]
[39.72803879 75.14846802]
[54.16120148 79.23305511]
[68.59436035 83.31764221]
[76.67681885 71.98969269]
[88.74600983 64.39936829]
[103.13050079 61.90349579]
[117.71901703 65.13106537]
[130.27026367 73.85126495]
[138.75691223 86.97073364]
[152.73249817 81.52252197]
[162.77990723 69.30121613]
[177.44827271 71.88738251]
[191.42385864 66.43917084]
[205.39944458 60.99096298]
[219.37503052 55.54275131]
[233.35061646 50.09454346]
[243.17672729 36.96519852]
[259.42581177 39.17859268]
[265.38220215 54.45777512]
[254.91848755 67.08483124]
[238.79882812 64.07012939]
[224.82324219 69.51834106]
[210.84765625 74.96654510]
[196.87207031 80.41475677]
[182.89648438 85.86296844]
[173.84870911 97.69458008]
[158.18070984 95.49810791]
[144.20512390 100.94631958]
[141.34495544 115.67110443]
[152.26469421 125.95503235]
[163.18443298 136.23896790]
[174.10418701 146.52288818]
[189.45512390 150.35160828]
[193.41571045 164.70999146]
[204.33544922 174.99391174]
[215.25518799 185.27784729]
[230.60614014 189.10655212]
[234.56671143 203.46493530]
[250.07473755 201.45616150]
[263.21786499 209.92921448]
[267.79028320 224.88337708]
[261.63305664 239.25775146]
[247.65344238 246.26519775]
[232.45217896 242.59701538]
[223.20683289 229.98519897]
[224.28279114 214.38467407]
[209.71289062 211.29154968]
[204.97126770 196.19758606]
[194.05151367 185.91366577]
[183.13177490 175.62973022]
[168.56188965 172.53659058]
[163.82025146 157.44264221]
[152.90051270 147.15870667]
[141.98075867 136.87477112]
[131.06101990 126.59085083]
[117.27760315 136.07670593]
[101.19242096 139.09455872]
[85.62115479 135.41740417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[15 62]
[16 61]
[18 59]
[19 58]
[20 57]
[21 56]
[22 52]
[23 51]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 40]
[32 39]
[33 38]
[81 100]
[82 99]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
[101 127]
[102 126]
[103 125]
[104 124]
[106 122]
[107 121]
[108 120]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
