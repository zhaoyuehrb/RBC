%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGAAGUGCUAGUGCCGCGGCGGCGGCGGCGGACGGCCCAGCCGGAGCGCGAGGGGCUCGGGGGGGCGCGGCGGUUCGGGUCGCAGAGCCAGGGACCCCAGGACCCGGGAGGCGGCGCAGCCGGGGCCGCCGGAGGAGCGCGGGUGACCUGGCGGCGGCGAG\
) } def
/len { sequence length } bind def

/coor [
[243.79556274 119.94252777]
[252.17276001 107.50000000]
[237.17276001 107.50000000]
[222.17276001 107.50000000]
[207.17276001 107.50000000]
[192.17276001 107.50000000]
[179.44549561 115.23729706]
[165.64532471 107.50000000]
[150.64532471 107.50000000]
[135.64532471 107.50000000]
[120.64532471 107.50000000]
[107.02733612 120.81095123]
[88.12761688 118.48041534]
[76.19821930 127.57379913]
[71.24052429 135.30255127]
[63.95210266 136.72450256]
[51.85071564 145.58770752]
[39.74932861 154.45091248]
[27.64794350 163.31411743]
[21.08634758 177.71051025]
[6.24668550 178.98866272]
[-5.85470152 187.85186768]
[-11.96864414 203.06869507]
[-28.23973465 205.11408997]
[-37.92967224 191.88392639]
[-31.07027626 176.98826599]
[-14.71790791 175.75048828]
[-2.61652112 166.88728333]
[3.07950234 153.12484741]
[18.78473663 151.21272278]
[30.88612366 142.34951782]
[42.98751068 133.48631287]
[55.08889771 124.62310791]
[67.10483551 115.64440155]
[79.03423309 106.55102539]
[78.15638733 102.30995941]
[78.12775421 97.97909546]
[64.56024170 91.58200836]
[50.99273682 85.18492126]
[37.42522812 78.78783417]
[25.01368332 82.40766144]
[13.82979393 76.76399994]
[9.64623451 65.38280487]
[-3.79624915 58.72700882]
[-19.59668159 59.53750229]
[-27.56923103 46.95625687]
[-41.01171494 40.30045700]
[-54.45419693 33.64466095]
[-67.89668274 26.98886299]
[-83.69711304 27.79935455]
[-91.66966248 15.21811008]
[-108.54702759 13.60849380]
[-111.67243958 -3.05488420]
[-96.52546692 -10.67103195]
[-85.01386261 1.77562630]
[-70.17492676 0.48906729]
[-61.24088287 13.54637909]
[-47.79840088 20.20217705]
[-34.35591507 26.85797501]
[-20.91343307 33.51377106]
[-6.07449722 32.22721481]
[2.85954833 45.28452682]
[16.30203247 51.94032288]
[33.70714951 49.85897446]
[43.82231522 65.22032166]
[57.38982391 71.61740875]
[70.95732880 78.01449585]
[84.52484131 84.41158295]
[97.50745392 78.17646790]
[111.56164551 81.32360840]
[120.64532471 92.50000000]
[135.64532471 92.50000000]
[150.64532471 92.50000000]
[165.64532471 92.50000000]
[179.44549561 84.76270294]
[192.17276001 92.50000000]
[207.17276001 92.50000000]
[222.17276001 92.50000000]
[237.17276001 92.50000000]
[252.17276001 92.50000000]
[267.15557861 91.78192139]
[282.08682251 90.34741211]
[297.01806641 88.91290283]
[311.94931030 87.47840118]
[326.88055420 86.04389191]
[333.34292603 77.22193909]
[343.39648438 73.51408386]
[353.61080933 75.92652893]
[360.64154053 83.41972351]
[375.61679077 82.55818176]
[390.59204102 81.69663239]
[405.56726074 80.83508301]
[420.54251099 79.97353363]
[435.51773071 79.11198425]
[443.95196533 66.22129822]
[458.19296265 60.83169556]
[472.70520020 64.81404877]
[481.97869873 76.43901825]
[496.95394897 75.57746887]
[511.92916870 74.71591949]
[522.41815186 63.19990540]
[537.61749268 62.53950119]
[548.53161621 72.61013031]
[559.02056885 61.09411240]
[574.21990967 60.43370819]
[585.13403320 70.50434113]
[600.10925293 69.64279175]
[606.69030762 57.50162125]
[618.32525635 50.26541901]
[631.90838623 49.73950195]
[643.87561035 55.95451355]
[651.14019775 67.18645477]
[666.12915039 66.61191559]
[681.11816406 66.03736877]
[696.10717773 65.46282959]
[711.09613037 64.88829041]
[726.08514404 64.31375122]
[739.57885742 56.05354309]
[752.59313965 63.29767609]
[764.50549316 52.55174637]
[780.31011963 55.30728912]
[787.88305664 69.45049286]
[781.41497803 84.13189697]
[765.86767578 88.08918762]
[753.16766357 78.28666687]
[740.74609375 86.50578308]
[726.65966797 79.30274200]
[711.67071533 79.87728119]
[696.68170166 80.45182037]
[681.69268799 81.02636719]
[666.70373535 81.60090637]
[651.71472168 82.17544556]
[643.04296875 96.08864594]
[627.63891602 102.16802216]
[611.48193359 97.84146118]
[600.97076416 84.61802673]
[585.99554443 85.47957611]
[576.30834961 96.73542786]
[561.13360596 97.82248688]
[549.39312744 87.58536530]
[539.70593262 98.84121704]
[524.53118896 99.92827606]
[512.79071045 89.69116211]
[497.81549072 90.55270386]
[482.84024048 91.41425323]
[474.96112061 104.02603912]
[461.00134277 109.64643097]
[446.23620605 105.92559814]
[436.37927246 94.08722687]
[421.40405273 94.94876862]
[406.42880249 95.81031799]
[391.45358276 96.67186737]
[376.47833252 97.53341675]
[361.50311279 98.39496613]
[346.21191406 110.18559265]
[328.31506348 100.97513580]
[313.38381958 102.40964508]
[298.45257568 103.84415436]
[283.52133179 105.27866364]
[268.59008789 106.71317291]
[278.11886597 118.29773712]
[275.19525146 133.01005554]
[261.96121216 140.07121277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 80]
[3 79]
[4 78]
[5 77]
[6 76]
[8 74]
[9 73]
[10 72]
[11 71]
[13 35]
[14 34]
[16 33]
[17 32]
[18 31]
[19 30]
[21 28]
[22 27]
[37 68]
[38 67]
[39 66]
[40 65]
[43 63]
[44 62]
[46 60]
[47 59]
[48 58]
[49 57]
[51 55]
[81 160]
[82 159]
[83 158]
[84 157]
[85 156]
[89 154]
[90 153]
[91 152]
[92 151]
[93 150]
[94 149]
[98 145]
[99 144]
[100 143]
[103 140]
[106 137]
[107 136]
[112 132]
[113 131]
[114 130]
[115 129]
[116 128]
[117 127]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
