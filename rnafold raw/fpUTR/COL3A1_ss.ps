%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGAGUUUUAUGACGGGCCCGGUGCUGAAGGGCAGGGAACAACUUGAUGGUGCUACUUUGAACUGCUUUUCUUUUCUCCUUUUUGCACAAAGAGUCUCAUGUCUGAUAUUUAGAC\
) } def
/len { sequence length } bind def

/coor [
[89.77087402 400.17153931]
[86.41198730 384.48403931]
[96.69375610 372.16882324]
[96.69375610 357.16882324]
[96.69375610 342.16882324]
[96.69375610 327.16882324]
[96.69375610 312.16882324]
[96.69375610 297.16882324]
[88.95645905 284.44152832]
[96.69375610 270.64135742]
[96.69375610 255.64137268]
[96.69375610 240.64137268]
[93.50637054 233.86596680]
[96.89874268 225.24339294]
[97.29804993 210.24870300]
[97.69735718 195.25401306]
[97.49768829 180.25535583]
[96.69935608 165.27661133]
[95.90102386 150.29786682]
[95.10269165 135.31912231]
[94.10504150 120.35234070]
[81.32177734 110.00462341]
[79.79146576 93.62947845]
[90.43605804 81.09234619]
[88.84165192 66.17732239]
[87.24725342 51.26230240]
[85.65284729 36.34727859]
[76.49251556 23.44771385]
[82.83315277 9.97011948]
[81.23875427 -4.94490290]
[79.64435577 -19.85992432]
[78.04994965 -34.77494812]
[76.45555115 -49.68996811]
[74.86114502 -64.60498810]
[70.79162598 -72.92941284]
[73.42826843 -79.93752289]
[72.23147583 -94.88970947]
[71.03468323 -109.84188843]
[69.83789062 -124.79406738]
[68.64109802 -139.74624634]
[67.44430542 -154.69842529]
[54.01655579 -159.31950378]
[43.41240311 -168.69914246]
[37.22461700 -181.38409424]
[36.36557007 -195.42807007]
[40.93286514 -208.69039917]
[50.19951630 -219.16230774]
[62.72945786 -225.27116394]
[59.10874939 -233.80038452]
[62.11463928 -240.65823364]
[61.71533203 -255.65292358]
[61.31602478 -270.64761353]
[60.91671753 -285.64227295]
[52.81479263 -299.23159790]
[60.21054459 -312.16033936]
[48.57069016 -322.85095215]
[47.98295975 -338.64431763]
[58.79604721 -350.17047119]
[74.59473419 -350.59121704]
[86.00594330 -339.65686035]
[86.25960541 -323.85461426]
[75.20523071 -312.55963135]
[83.27859497 -300.04284668]
[75.91139984 -286.04159546]
[76.31070709 -271.04690552]
[76.71001434 -256.05221558]
[77.10932159 -241.05754089]
[77.70819855 -226.06950378]
[92.52057648 -220.23373413]
[103.36704254 -208.50067139]
[108.05730438 -193.16555786]
[105.61209869 -177.25811768]
[96.46713257 -163.94410706]
[82.39649200 -155.89521790]
[83.59327698 -140.94303894]
[84.79006958 -125.99085999]
[85.98686218 -111.03868103]
[87.18365479 -96.08649445]
[88.38044739 -81.13431549]
[89.77616882 -66.19939423]
[91.37056732 -51.28437042]
[92.96497345 -36.36935043]
[94.55937195 -21.45432663]
[96.15377808 -6.53930521]
[97.74817657 8.37571716]
[106.79447174 20.20846176]
[100.56787109 34.75287628]
[102.16227722 49.66790009]
[103.75667572 64.58292389]
[105.35108185 79.49794006]
[116.14679718 86.27960968]
[121.09694672 98.02841949]
[118.40943909 110.49098969]
[109.05722046 119.15554810]
[112.90369415 127.58535004]
[110.08142853 134.52079773]
[110.87976837 149.49954224]
[111.67810059 164.47827148]
[112.47643280 179.45701599]
[115.47831726 184.04113770]
[116.25110626 188.83442688]
[115.10822296 192.92027283]
[112.69204712 195.65333557]
[112.29273987 210.64801025]
[111.89343262 225.64270020]
[111.69375610 240.64137268]
[111.69375610 255.64137268]
[111.69375610 270.64135742]
[119.43106079 284.44152832]
[111.69375610 297.16882324]
[111.69375610 312.16882324]
[111.69375610 327.16882324]
[111.69375610 342.16882324]
[111.69375610 357.16882324]
[111.69375610 372.16882324]
[121.97552490 384.48403931]
[118.61664581 400.17153931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 115]
[4 114]
[5 113]
[6 112]
[7 111]
[8 110]
[10 108]
[11 107]
[12 106]
[14 105]
[15 104]
[16 103]
[17 99]
[18 98]
[19 97]
[20 96]
[21 94]
[24 90]
[25 89]
[26 88]
[27 87]
[29 85]
[30 84]
[31 83]
[32 82]
[33 81]
[34 80]
[36 79]
[37 78]
[38 77]
[39 76]
[40 75]
[41 74]
[48 68]
[50 67]
[51 66]
[52 65]
[53 64]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
