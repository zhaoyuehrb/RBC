%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAGCCUGGUUGAGAUUACUCUUGGAGGAAGGCAUCAGUUAAGGACACUGGAAAAGACAGGCUCUUUUGUUCUGGUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[58.18484116 144.43833923]
[52.45166397 148.46345520]
[45.81509399 150.57324219]
[38.89249039 150.59733582]
[32.32011032 148.55821228]
[26.69463348 144.66683960]
[22.51899910 139.30113220]
[7.78050184 142.08981323]
[-6.95799494 144.87847900]
[-12.10652637 159.28125000]
[-23.69642258 169.10830688]
[-38.55031586 171.79685974]
[-52.66115570 166.72338867]
[-62.27315521 155.34466553]
[-77.01165009 158.13334656]
[-91.75014496 160.92202759]
[-103.82052612 172.02328491]
[-119.38666534 166.86311340]
[-122.43546295 150.74986267]
[-109.83056641 140.25946045]
[-94.53882599 146.18351746]
[-79.80032349 143.39485168]
[-65.06182861 140.60617065]
[-60.27138138 126.50237274]
[-48.98951721 116.62434387]
[-34.18018341 113.70030212]
[-19.80122566 118.61379242]
[-9.74666882 130.13998413]
[4.99182796 127.35131073]
[19.73032570 124.56263733]
[34.84599686 106.12466431]
[58.72183228 111.55414581]
[72.23636627 105.04589081]
[85.75090027 98.53763580]
[93.78507233 87.09457397]
[107.74084473 87.94783020]
[121.25537872 81.43957520]
[134.76991272 74.93132019]
[148.28443909 68.42306519]
[161.79898071 61.91481018]
[167.15917969 43.94928741]
[183.55485535 35.52016449]
[200.69332886 41.41193008]
[213.68371582 33.91193008]
[226.67410278 26.41192818]
[239.66447449 18.91192818]
[252.65486145 11.41192818]
[256.84915161 -3.58959365]
[270.13009644 -11.01060772]
[284.40588379 -6.91954136]
[297.39627075 -14.41954136]
[310.38665771 -21.91954041]
[312.92373657 -37.34994125]
[324.81933594 -47.50024414]
[340.45672607 -47.57778931]
[352.45239258 -37.54595947]
[355.14239502 -22.14147758]
[347.25653076 -8.63787174]
[332.51831055 -3.41112995]
[317.88665771 -8.92916012]
[304.89627075 -1.42916024]
[291.90588379 6.07083988]
[288.31094360 20.47958755]
[275.24371338 28.27070618]
[260.15484619 24.40230942]
[247.16447449 31.90230942]
[234.17410278 39.40230942]
[221.18371582 46.90230942]
[208.19332886 54.40230942]
[207.64662170 66.08417511]
[201.36730957 76.09369659]
[190.87408447 81.78557587]
[178.81672668 81.58679199]
[168.30723572 75.42934418]
[154.79269409 81.93759918]
[141.27816772 88.44585419]
[127.76363373 94.95410919]
[114.24909973 101.46236420]
[106.21492767 112.90542603]
[92.25915527 112.05216980]
[78.74462128 118.56042480]
[65.23008728 125.06867981]
[64.90418243 132.18991089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 30]
[8 29]
[9 28]
[14 23]
[15 22]
[16 21]
[32 82]
[33 81]
[34 80]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[43 69]
[44 68]
[45 67]
[46 66]
[47 65]
[50 62]
[51 61]
[52 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
