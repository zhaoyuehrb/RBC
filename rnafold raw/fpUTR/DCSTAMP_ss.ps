%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUAUCAAGACCUACAGCCCUUGGGAAGUGCAUUUCUGCAUUCGAAGAAGAAUCUGAGAGAAACCUGACGCAGGGAGC\
) } def
/len { sequence length } bind def

/coor [
[46.14357758 231.43432617]
[45.56383896 246.55117798]
[40.33920670 260.74829102]
[30.98154068 272.63482666]
[18.40760803 281.04620361]
[3.84927630 285.15838623]
[-11.26717949 284.56851196]
[-25.46080208 279.33438110]
[-37.34104538 269.96875000]
[-45.74400330 257.38919067]
[-49.84644318 242.82810974]
[-49.24644470 227.71205139]
[-44.00279236 213.52192688]
[-34.62920380 201.64796448]
[-22.04401016 193.25344849]
[-7.48018074 189.16076660]
[7.63547134 189.77088928]
[21.82206726 195.02404785]
[31.10847664 183.24429321]
[40.16181564 171.28448486]
[48.97859573 159.14923096]
[57.79537201 147.01397705]
[66.61215210 134.87872314]
[75.42893219 122.74346161]
[84.00575256 110.43744659]
[81.28199768 96.20623016]
[89.33194733 84.15863037]
[103.52220917 81.22900391]
[111.85575867 68.75695801]
[114.11422729 59.62385178]
[120.76937103 55.96771240]
[118.49937439 40.55716705]
[127.61371613 28.37589073]
[142.31930542 26.30677032]
[151.13607788 14.17151546]
[159.95286560 2.03626108]
[168.76963806 -10.09899426]
[177.58642578 -22.23424911]
[174.48348999 -39.31943512]
[184.39425659 -53.16914749]
[200.90585327 -55.64592743]
[209.23941040 -68.11797333]
[217.57296753 -80.59001160]
[225.90650940 -93.06205750]
[222.57781982 -108.51182556]
[231.21879578 -121.74471283]
[246.70289612 -124.90987396]
[259.84368896 -116.12947845]
[262.84494019 -100.61278534]
[253.92611694 -87.56556702]
[238.37855530 -84.72850800]
[230.04501343 -72.25646210]
[221.71145630 -59.78441620]
[213.37789917 -47.31237030]
[217.65078735 -34.99323273]
[213.91227722 -22.29685402]
[203.33627319 -14.01704788]
[189.72167969 -13.41746998]
[180.90489197 -1.28221512]
[172.08811951 10.85303974]
[163.27133179 22.98829460]
[154.45455933 35.12355042]
[157.03099060 49.74878693]
[148.26239014 62.18126297]
[132.90461731 64.78449249]
[124.32780457 77.09051514]
[115.99424744 89.56255341]
[118.71800232 103.79376984]
[110.66805267 115.84136963]
[96.47779083 118.77099609]
[94.21932220 127.90410614]
[87.56418610 131.56024170]
[78.74740601 143.69549561]
[69.93062592 155.83074951]
[61.11384964 167.96600342]
[52.29706955 180.10125732]
[49.68177795 189.13865662]
[42.88822937 192.53070068]
[33.60182190 204.31045532]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 79]
[19 78]
[20 76]
[21 75]
[22 74]
[23 73]
[24 72]
[25 70]
[28 67]
[29 66]
[31 65]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[41 54]
[42 53]
[43 52]
[44 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
