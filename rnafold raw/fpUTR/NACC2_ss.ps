%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGUCCAUGGGAGCCGGAGCGCCGGGACGCCAAGCACUUCCUGCCGCGGGCGGCGCGCCGCAGCUGCCCAGGCCGGACCGGGCCGGGCGCCCGCAGAUGAGCCCCGCUAGGGCCGCCCCGCGCUGAGAGCCCAGCCCCGCCGCUGCCCGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[119.37287903 175.96145630]
[105.51560974 181.70391846]
[90.51707458 181.49378967]
[76.82611847 175.36535645]
[66.67805481 164.31924438]
[61.72977066 150.15892029]
[62.78917313 135.19638062]
[69.68329620 121.87455750]
[81.28525543 112.36917114]
[66.29201508 111.91901398]
[51.29877090 111.46885681]
[36.30552673 111.01869202]
[21.30853081 110.71855927]
[6.30928087 110.56848907]
[-8.68996811 110.41841125]
[-23.68921661 110.56848907]
[-38.68246078 111.01864624]
[-53.67570496 111.46881104]
[-67.23745728 119.61677551]
[-80.19120026 112.26491547]
[-95.18444061 112.71507263]
[-110.17768860 113.16523743]
[-125.17092896 113.61539459]
[-140.16416931 114.06555939]
[-155.15742493 114.51571655]
[-163.22639465 125.34203339]
[-175.87852478 129.46690369]
[-188.40548706 125.59185028]
[-196.28085327 115.35244751]
[-211.28010559 115.50252533]
[-226.27935791 115.65259552]
[-233.48219299 123.89669037]
[-243.82928467 126.72673035]
[-253.80680847 123.43386841]
[-260.16427612 115.34706879]
[-275.15750122 114.89691162]
[-290.15075684 114.44674683]
[-302.76898193 124.35429382]
[-318.34863281 120.52613831]
[-324.93826294 105.89890289]
[-317.48294067 91.69335175]
[-301.70172119 88.80677795]
[-289.70059204 99.45350647]
[-274.70733643 99.90366364]
[-259.71411133 100.35382843]
[-243.46119690 89.93890381]
[-226.42942810 100.65334320]
[-211.43017578 100.50327301]
[-196.43093872 100.35320282]
[-185.21174622 87.85841370]
[-168.09106445 87.30586243]
[-155.60757446 99.52247620]
[-140.61433411 99.07231140]
[-125.62109375 98.62215424]
[-110.62784576 98.17198944]
[-95.63460541 97.72183228]
[-80.64135742 97.27167511]
[-68.15202332 89.15589905]
[-54.12586594 96.47556305]
[-39.13262177 96.02540588]
[-24.13937759 95.57524109]
[-20.23817825 92.73282623]
[-14.49735165 92.34888458]
[-8.53989506 95.41916656]
[6.45935440 95.56923676]
[21.45860481 95.71931458]
[28.21640968 92.62416077]
[36.75568771 96.02545166]
[51.74893188 96.47560883]
[66.74217224 96.92577362]
[81.73542023 97.37593079]
[92.50000000 86.92969513]
[92.50000000 71.92969513]
[92.50000000 56.92969894]
[92.50000000 41.92969894]
[81.14886475 30.93300629]
[80.98176575 15.12960148]
[92.09785461 3.89536071]
[107.90214539 3.89536071]
[119.01823425 15.12960148]
[118.85113525 30.93300629]
[107.50000000 41.92969894]
[107.50000000 56.92969894]
[107.50000000 71.92969513]
[107.50000000 86.92969513]
[117.72875214 97.90113831]
[132.69198608 98.95081329]
[147.65521240 100.00048828]
[162.61843872 101.05016327]
[177.58166504 102.09983826]
[185.42059326 94.45803833]
[195.96083069 92.46436310]
[205.64314270 96.54443359]
[211.33366394 105.11365509]
[226.24291992 106.76116180]
[241.15216064 108.40866852]
[256.06140137 110.05617523]
[264.99191284 107.88040161]
[271.25140381 111.88871765]
[286.12472534 113.83420563]
[295.09698486 111.83755493]
[301.27502441 115.97031403]
[316.10641479 118.21301270]
[327.01586914 107.33689880]
[342.06179810 104.99741364]
[355.44201660 111.88465881]
[362.12109375 125.17103577]
[376.95248413 127.41373444]
[391.78390503 129.65643311]
[400.79431152 127.83970642]
[406.88842773 132.09526062]
[421.67196655 134.63426208]
[436.45553589 137.17327881]
[451.23907471 139.71228027]
[466.14831543 141.35978699]
[481.12954712 142.10986328]
[496.11080933 142.85992432]
[512.23248291 137.61317444]
[521.73706055 151.65235901]
[510.87771606 164.67196655]
[495.36071777 157.84115601]
[480.37948608 157.09109497]
[465.39825439 156.34101868]
[474.33602905 168.38745117]
[472.32104492 183.25149536]
[460.49874878 192.48367310]
[445.58950806 190.83595276]
[436.06854248 179.24496460]
[437.34802246 164.29963684]
[448.70007324 154.49583435]
[433.91650391 151.95683289]
[419.13296509 149.41781616]
[404.34939575 146.87879944]
[389.54119873 144.48783875]
[374.70980835 142.24513245]
[359.87838745 140.00242615]
[349.56961060 150.72001648]
[334.75128174 153.34327698]
[321.06973267 146.65982056]
[313.86370850 133.04440308]
[299.03231812 130.80171204]
[284.17922974 128.70750427]
[269.30593872 126.76201630]
[254.41390991 124.96542358]
[239.50465393 123.31791687]
[224.59541321 121.67041016]
[209.68615723 120.02290344]
[192.65255737 129.10498047]
[176.53199768 117.06306458]
[161.56877136 116.01338959]
[146.60552979 114.96371460]
[131.64230347 113.91403961]
[116.67908478 112.86436462]
[128.01144409 122.69174957]
[134.52964783 136.20149231]
[135.16946411 151.18783569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 71]
[10 70]
[11 69]
[12 68]
[13 66]
[14 65]
[15 64]
[16 61]
[17 60]
[18 59]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[29 49]
[30 48]
[31 47]
[35 45]
[36 44]
[37 43]
[72 85]
[73 84]
[74 83]
[75 82]
[86 153]
[87 152]
[88 151]
[89 150]
[90 149]
[94 147]
[95 146]
[96 145]
[97 144]
[99 143]
[100 142]
[102 141]
[103 140]
[107 136]
[108 135]
[109 134]
[111 133]
[112 132]
[113 131]
[114 130]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
