%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAAGUCGGGAAGACUGCAUCCGGCUCCAGGAAAAGCGAGUGGGAUAUCCCAAUCUUUGGACUGCAUCCUGGUUGCCUCUACUGUGGUCACCUUUGGGAAGAA\
) } def
/len { sequence length } bind def

/coor [
[107.94136810 422.61209106]
[105.72666931 407.77648926]
[96.19503021 396.33108521]
[101.80998230 381.53976440]
[99.59528351 366.70416260]
[97.24340057 364.90979004]
[95.52237701 362.00057983]
[94.89056396 358.23629761]
[95.69382477 354.04867554]
[98.10553741 349.99322510]
[97.66103363 334.99981689]
[97.21653748 320.00640869]
[88.57991791 311.39343262]
[88.17980194 298.79953003]
[96.78489685 289.05078125]
[96.78489685 274.05078125]
[96.78489685 259.05078125]
[96.78489685 244.05078125]
[96.78489685 229.05078125]
[96.78489685 214.05078125]
[96.78489685 199.05078125]
[82.09565735 189.48199463]
[75.92258453 172.90815735]
[80.85902405 155.76339722]
[95.14670563 144.82115173]
[94.25810242 129.84748840]
[93.36949158 114.87383270]
[83.75988007 101.20550537]
[91.24608612 86.26815033]
[89.91415405 71.32740021]
[88.58221436 56.38665390]
[87.25027466 41.44590759]
[85.91833496 26.50515938]
[84.58639526 11.56441212]
[70.99609375 0.67325419]
[69.43728638 -16.33576775]
[80.38305664 -29.00759315]
[78.60896301 -43.90230942]
[76.61434174 -58.76910019]
[66.92429352 -71.27564240]
[72.69766235 -85.00580597]
[70.48296356 -99.84141541]
[67.39328003 -114.51976013]
[63.43947220 -128.98928833]
[59.48566818 -143.45883179]
[55.53186035 -157.92835999]
[43.50440598 -169.07611084]
[47.40825272 -185.00382996]
[63.22745514 -189.32643127]
[74.68857574 -177.59719849]
[70.00139618 -161.88217163]
[73.95520020 -147.41262817]
[77.90900421 -132.94309998]
[81.86281586 -118.47356415]
[84.41041565 -116.96994019]
[86.46343994 -114.28469849]
[87.53603363 -110.62158966]
[87.23369598 -106.36835480]
[85.31856537 -102.05611420]
[87.53326416 -87.22050476]
[97.06490326 -75.77510834]
[91.44995117 -60.98379898]
[95.61727905 -54.73279953]
[93.50367737 -45.67640686]
[95.27777863 -30.78169060]
[106.48751831 -24.24078560]
[111.91825104 -12.23812580]
[109.35665131 0.88385129]
[99.52714539 10.23247433]
[100.85908508 25.17322159]
[102.19102478 40.11396790]
[103.52295685 55.05471802]
[104.85489655 69.99546814]
[106.18683624 84.93621063]
[114.71217346 93.01811981]
[115.58177948 104.73316193]
[108.34314728 113.98522949]
[109.23175812 128.95887756]
[110.12036896 143.93254089]
[121.60494232 149.31677246]
[129.61355591 159.05876160]
[132.63914490 171.22671509]
[130.15481567 183.44233704]
[122.70440674 193.34561157]
[111.78489685 199.05078125]
[111.78489685 214.05078125]
[111.78489685 229.05078125]
[111.78489685 244.05078125]
[111.78489685 259.05078125]
[111.78489685 274.05078125]
[111.78489685 289.05078125]
[121.37916565 304.68002319]
[112.20994568 319.56188965]
[112.65444946 334.55529785]
[113.09894562 349.54873657]
[114.43088531 364.48947144]
[116.64558411 379.32507324]
[126.33563232 391.83160400]
[120.56227112 405.56176758]
[122.77696991 420.39736938]
[135.62731934 429.59759521]
[138.12590027 445.20312500]
[128.79034424 457.95550537]
[113.15927124 460.28894043]
[100.50631714 450.81909180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[4 97]
[5 96]
[10 95]
[11 94]
[12 93]
[15 91]
[16 90]
[17 89]
[18 88]
[19 87]
[20 86]
[21 85]
[25 79]
[26 78]
[27 77]
[29 74]
[30 73]
[31 72]
[32 71]
[33 70]
[34 69]
[37 65]
[38 64]
[39 62]
[41 60]
[42 59]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
