%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCGCUUUCGCGGGGGCUGCUGGGGCGUAGGUGUCGGGGACGCGCGCACGGGCGCGCGCAGCUGUUGACGCGCUUCUUAGCUGGUGCGCGCCGGAGCCCAAAUUCCAAGUGGAAACUGCAGGCGCACGAGGGAGGAACGCGUGGAGC\
) } def
/len { sequence length } bind def

/coor [
[85.42863464 157.76049805]
[82.75504303 143.00115967]
[75.37516785 144.33810425]
[70.11300659 158.38481140]
[64.85084534 172.43150330]
[59.58868027 186.47819519]
[62.81715393 202.55641174]
[50.33015060 213.18687439]
[34.97322845 207.43388367]
[32.54427338 191.21560669]
[45.54198456 181.21603394]
[50.80414581 167.16934204]
[56.06630707 153.12265015]
[61.32847214 139.07594299]
[58.65456390 124.31620026]
[48.79909897 113.00824738]
[38.94363403 101.70028687]
[29.08817101 90.39233398]
[19.23270607 79.08438110]
[11.17790413 74.63134003]
[9.29173088 67.43256378]
[-0.32313731 55.91933823]
[-9.93800545 44.40611649]
[-19.55287361 32.89289474]
[-34.33741379 27.26013756]
[-36.55673218 12.53180122]
[-46.17160034 1.01857781]
[-55.78646851 -10.49464512]
[-65.40133667 -22.00786781]
[-75.01620483 -33.52109146]
[-101.39949036 -36.57537460]
[-109.89273071 -65.70325470]
[-122.08351135 -74.44309998]
[-134.27429199 -83.18293762]
[-146.46507263 -91.92278290]
[-158.65585327 -100.66262817]
[-170.84663391 -109.40247345]
[-189.17965698 -110.75441742]
[-195.84967041 -126.95520020]
[-208.22200012 -135.43608093]
[-228.32749939 -136.01501465]
[-236.04606628 -153.70071411]
[-248.76492310 -161.65248108]
[-261.48379517 -169.60424805]
[-274.20263672 -177.55603027]
[-286.92150879 -185.50779724]
[-299.64035034 -193.45956421]
[-312.35922241 -201.41133118]
[-328.75833130 -201.44642639]
[-336.69174194 -215.79887390]
[-327.99826050 -229.70410156]
[-311.62100220 -228.85760498]
[-304.40744019 -214.13018799]
[-291.68859863 -206.17842102]
[-278.96972656 -198.22665405]
[-266.25088501 -190.27488708]
[-253.53201294 -182.32312012]
[-240.81315613 -174.37133789]
[-228.09429932 -166.41957092]
[-218.30216980 -169.61689758]
[-208.16424561 -166.80250549]
[-201.13282776 -158.68190002]
[-199.74111938 -147.80841064]
[-187.36878967 -139.32752991]
[-175.38026428 -141.23249817]
[-164.98997498 -134.21040344]
[-162.10679626 -121.59325409]
[-149.91601562 -112.85340881]
[-137.72523499 -104.11356354]
[-125.53444672 -95.37371826]
[-113.34366608 -86.63388062]
[-101.15288544 -77.89403534]
[-87.40294647 -83.88896179]
[-85.51039886 -98.76909637]
[-83.61785126 -113.64922333]
[-90.45555115 -128.55485535]
[-80.74636841 -141.77090454]
[-64.47827148 -139.70181274]
[-58.38648605 -124.47611237]
[-68.73772430 -111.75667572]
[-70.63027191 -96.87654877]
[-72.52281952 -81.99641418]
[-63.10041809 -73.86162567]
[-58.40203094 -63.14297867]
[-58.76984024 -52.18992996]
[-63.50298309 -43.13595963]
[-53.88811493 -31.62273598]
[-44.27324677 -20.10951424]
[-34.65837860 -8.59629059]
[-25.04350853 2.91693282]
[-10.94668865 7.72618580]
[-8.03965092 23.27802467]
[1.57521760 34.79124832]
[11.19008636 46.30447006]
[20.80495453 57.81769562]
[30.54066086 69.22891998]
[40.39612579 80.53687286]
[50.25159073 91.84482574]
[60.10705185 103.15277863]
[69.96251678 114.46073151]
[71.05529022 89.70784760]
[88.05912018 74.55989075]
[108.77421570 76.07191467]
[120.79655457 90.48698425]
[135.72909546 89.06591797]
[150.66162109 87.64484406]
[165.59416199 86.22377777]
[178.63455200 76.27993011]
[193.66001892 82.85012817]
[195.21363831 99.17551422]
[181.69718933 108.46192932]
[167.01522827 101.15631104]
[152.08268738 102.57737732]
[137.15016174 103.99845123]
[122.21762848 105.41952515]
[122.35097504 117.03577423]
[116.20262146 129.13482666]
[126.05808258 140.44277954]
[140.95809937 145.76258850]
[143.48744202 160.44085693]
[153.34289551 171.74880981]
[168.24290466 177.06861877]
[170.77224731 191.74688721]
[180.62771606 203.05484009]
[190.48318481 214.36279297]
[207.92311096 215.22023010]
[219.15194702 228.14880371]
[217.62002563 244.86601257]
[233.41644287 245.36503601]
[244.17225647 256.94467163]
[243.50624084 272.73492432]
[231.81353760 283.36770630]
[216.03120422 282.53479004]
[205.52264404 270.73031616]
[206.52236938 254.95768738]
[193.65278625 256.14776611]
[182.28862000 249.59207153]
[176.71260071 237.50141907]
[179.17521667 224.21826172]
[169.31976318 212.91030884]
[159.46429443 201.60235596]
[145.26921082 197.09136963]
[142.03494263 181.60427856]
[132.17947388 170.29632568]
[117.98439789 165.78533936]
[114.75012970 150.29824829]
[104.89466858 138.99029541]
[97.51479340 140.32725525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[15 100]
[16 99]
[17 98]
[18 97]
[19 96]
[21 95]
[22 94]
[23 93]
[24 92]
[26 90]
[27 89]
[28 88]
[29 87]
[30 86]
[32 72]
[33 71]
[34 70]
[35 69]
[36 68]
[37 67]
[39 64]
[40 63]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[73 82]
[74 81]
[75 80]
[104 115]
[105 114]
[106 113]
[107 112]
[117 147]
[118 146]
[120 144]
[121 143]
[123 141]
[124 140]
[125 139]
[128 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
