%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUCCACCUCUCAAGCAGCCAGCGCCUGCCUGAAUCUGUUCUGCCCCCUCCCCACCCAUUUCACCACCACC\
) } def
/len { sequence length } bind def

/coor [
[184.31854248 165.65293884]
[188.03569031 151.06637573]
[174.54122925 144.51661682]
[161.51268005 151.68565369]
[146.58436584 149.78581238]
[135.50773621 139.33776855]
[132.67439270 124.19583130]
[119.17993164 117.64605713]
[105.13529205 125.55155945]
[89.12689972 123.68605042]
[77.27641296 112.76291656]
[74.11550903 96.95919800]
[60.35175705 90.99605560]
[46.58800125 85.03291321]
[30.84928322 86.64636993]
[22.24685478 74.48711395]
[8.48309994 68.52397156]
[-5.28065443 62.56083298]
[-19.04440880 56.59769058]
[-32.93328094 50.93207169]
[-49.03483582 54.04203796]
[-59.57304382 41.47707748]
[-53.70709991 26.16294479]
[-37.47138214 23.85350418]
[-27.56780624 36.92451096]
[-19.96395683 36.35749817]
[-13.08126640 42.83393478]
[0.68248761 48.79707718]
[14.44624233 54.76021957]
[28.20999718 60.72336197]
[42.96424103 58.68337631]
[52.55114365 71.26915741]
[66.31489563 77.23229980]
[80.07865143 83.19544220]
[91.06580353 75.51667023]
[104.41629791 74.31440735]
[116.59855652 79.90668488]
[124.39004517 90.81419373]
[125.72969818 104.15159607]
[139.22416687 110.70136261]
[152.87333679 103.55949402]
[167.93463135 105.79795074]
[178.66296387 116.35099792]
[181.09098816 131.02215576]
[194.58544922 137.57191467]
[203.74569702 125.62725067]
[215.12309265 115.77130127]
[228.25173950 108.40765381]
[242.59405518 103.83785248]
[257.56271362 102.24902344]
[272.54473877 103.70623016]
[286.92666626 108.14980316]
[300.11953735 115.39777374]
[311.58309937 125.15335083]
[320.84796143 137.01704407]
[327.53472900 150.50303650]
[331.36956787 165.05909729]
[332.19543457 180.08915710]
[329.97854614 194.97775269]
[324.80963135 209.11520386]
[316.90039062 221.92257690]
[306.57470703 232.87544250]
[294.25540161 241.52525330]
[280.44692993 247.51783752]
[265.71475220 250.60778809]
[250.66213989 250.66857910]
[235.90548706 247.69770813]
[222.04907227 241.81684875]
[209.66029358 233.26681519]
[199.24649048 222.39770508]
[191.23406982 209.65461731]
[185.95115662 195.55938721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 45]
[3 44]
[7 40]
[8 39]
[12 34]
[13 33]
[14 32]
[16 30]
[17 29]
[18 28]
[19 27]
[20 25]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
