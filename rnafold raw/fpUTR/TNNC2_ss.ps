%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCUUUGGGUGGUGGAGUGCAAAGGAGGCGACCUGCAACAGAGGAGUCCCGGUCACCAGCAACC\
) } def
/len { sequence length } bind def

/coor [
[49.90988159 342.82720947]
[34.89968109 345.22769165]
[20.11459923 341.69644165]
[7.80925226 332.77191162]
[-0.13988221 319.81509399]
[-2.52061963 304.80172729]
[1.03008533 290.02130127]
[9.97077560 277.72772217]
[22.93806076 269.79562378]
[37.95452499 267.43466187]
[33.38550949 253.25814819]
[44.11699295 241.63291931]
[47.60157394 227.04327393]
[51.08615494 212.45362854]
[54.57073212 197.86398315]
[58.05531311 183.27433777]
[61.53989410 168.68470764]
[54.29766083 163.16442871]
[49.15435791 155.60775757]
[46.65651321 146.77864075]
[47.08186340 137.57809448]
[50.40864944 128.95231628]
[56.31560898 121.79532623]
[64.21286011 116.85633850]
[73.30077362 114.66134644]
[82.65090942 115.45719147]
[90.04916382 102.40859985]
[91.03575134 94.09887695]
[98.11238861 88.93353271]
[106.11412811 76.24605560]
[114.11586761 63.55857468]
[110.83985901 48.33012772]
[119.13549805 35.57720566]
[133.67369080 32.54788589]
[141.37579346 19.67630959]
[148.77404785 6.62771368]
[156.17230225 -6.42088175]
[158.72468567 -23.18160057]
[175.53695679 -25.36879921]
[182.29277039 -9.81903362]
[169.22090149 0.97737145]
[161.82264709 14.02596664]
[154.42439270 27.07456207]
[153.84730530 34.71025467]
[146.36116028 40.54962540]
[149.89143372 54.97435379]
[141.95726013 67.95525360]
[126.80334473 71.56031036]
[118.80160522 84.24779510]
[110.79986572 96.93527222]
[103.09775543 109.80685425]
[95.69950104 122.85544586]
[104.19210052 143.29089355]
[95.98767853 163.57807922]
[76.12953949 172.16928101]
[72.64495850 186.75892639]
[69.16037750 201.34857178]
[65.67579651 215.93821716]
[62.19121552 230.52784729]
[58.70663452 245.11749268]
[63.02641296 260.33755493]
[52.54417038 270.91921997]
[64.87295532 279.81134033]
[72.85614777 292.74722290]
[75.27637482 307.75424194]
[71.76457214 322.54394531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 62]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 55]
[26 52]
[27 51]
[29 50]
[30 49]
[31 48]
[34 45]
[35 43]
[36 42]
[37 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
