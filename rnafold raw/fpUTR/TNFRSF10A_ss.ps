%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGUGCCCCGAAAAGGGGGCGGGGUCAGGGGUGCCCUGAACUCCGAAUGCGAAGUUCUGUCUUGUCAUAGCCAAGCACGCUGCUUCUUGGAUUGACCUGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[157.27301025 106.65995789]
[142.27462769 106.88015747]
[127.27624512 107.10035706]
[120.97639465 121.13457489]
[107.67412567 130.41589355]
[90.65861511 131.60955811]
[74.69350433 123.52621460]
[63.40985870 133.40950012]
[52.12621307 143.29278564]
[40.84257126 153.17607117]
[29.55892563 163.05935669]
[28.76584625 178.84373474]
[16.98793983 189.38206482]
[1.21282959 188.42214966]
[-9.20039177 176.53349304]
[-8.07374477 160.76940918]
[3.92435050 150.48246765]
[19.67563820 151.77571106]
[30.95928192 141.89242554]
[42.24292755 132.00914001]
[53.52657318 122.12585449]
[64.81021881 112.24256897]
[62.83413315 97.37329865]
[49.36081314 90.78014374]
[35.88749313 84.18698883]
[22.41417503 77.59383392]
[8.94085693 71.00068665]
[-4.62779617 64.60602570]
[-18.28886032 58.41123962]
[-31.94992256 52.21645737]
[-45.61098480 46.02167511]
[-59.27204895 39.82688904]
[-76.19439697 38.79218674]
[-79.88469696 22.24473763]
[-65.00550842 14.11786461]
[-53.07726669 26.16582680]
[-39.41620255 32.36061096]
[-25.75513840 38.55539322]
[-12.09407616 44.75017929]
[1.56698763 50.94496155]
[9.07670116 50.83925629]
[15.53401089 57.52736282]
[29.00732994 64.12052155]
[42.48064804 70.71367645]
[55.95396805 77.30683136]
[69.42728424 83.89997864]
[84.40431213 70.96208954]
[103.14244843 68.78872681]
[119.03590393 77.10210419]
[127.05604553 92.10197449]
[142.05442810 91.88177490]
[157.05281067 91.66157532]
[161.67617798 82.72920227]
[169.25231934 76.20315552]
[178.65998840 72.99159241]
[188.52816772 73.51637268]
[197.43586731 77.65814972]
[204.11671448 84.77992249]
[207.63894653 93.82457733]
[222.55981445 95.36330414]
[237.48068237 96.90203094]
[252.40155029 98.44075012]
[267.32241821 99.97947693]
[279.51440430 90.28445435]
[294.62435913 92.05748749]
[303.79196167 103.74041748]
[318.71282959 105.27914429]
[333.63369751 106.81787109]
[348.55456543 108.35659027]
[358.03689575 98.65853119]
[371.19110107 96.27792358]
[383.11676025 101.87155914]
[389.50369263 113.16773224]
[404.37295532 115.14381409]
[419.24224854 117.11990356]
[434.18408203 118.43942261]
[449.16952515 119.09982300]
[464.15499878 119.76023102]
[479.14044189 120.42063141]
[495.23043823 115.07749939]
[504.81887817 129.05953979]
[494.03762817 142.14390564]
[478.48004150 135.40608215]
[463.49459839 134.74568176]
[448.50912476 134.08528137]
[433.52368164 133.42488098]
[430.61239624 135.67059326]
[426.41677856 136.52732849]
[421.64624023 135.38348389]
[417.26614380 131.98916626]
[402.39688110 130.01307678]
[387.52761841 128.03700256]
[374.70675659 138.80998230]
[357.71929932 137.01792908]
[347.01583862 123.27745819]
[332.09497070 121.73873901]
[317.17410278 120.20001221]
[302.25323486 118.66129303]
[290.89431763 128.22741699]
[275.74050903 126.87947845]
[265.78369141 114.90034485]
[250.86282349 113.36161804]
[235.94195557 111.82289886]
[221.02108765 110.28417206]
[206.10021973 108.74545288]
[191.65638733 123.00763702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[3 50]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[59 105]
[60 104]
[61 103]
[62 102]
[63 101]
[66 98]
[67 97]
[68 96]
[69 95]
[73 92]
[74 91]
[75 90]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
