%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGCUACGCCCACUUGGUGGCCUAUAAAGGAAGCGGGCGAACCCCGGCAGCCCUACACAACUUGGGGCCCCUCUCCUCUCCAGCCCUUCUCCUGUGUGCCUGCCUCCUGCCGCCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[17.56361008 438.03457642]
[12.60300922 452.32611084]
[3.46725750 464.38400269]
[-8.94861603 473.02700806]
[-23.42823219 477.40832520]
[-38.55302429 477.09872437]
[-52.84122086 472.12854004]
[-64.89300537 462.98471069]
[-73.52767181 450.56304932]
[-77.89928436 436.08050537]
[-77.57955933 420.95593262]
[-72.59980774 406.67105103]
[-63.44790268 394.62539673]
[-51.02045822 385.99905396]
[-36.53498459 381.63714600]
[-21.41062164 381.96701050]
[-16.48248482 367.79968262]
[-11.55434895 353.63235474]
[-6.62621355 339.46499634]
[-1.69807792 325.29766846]
[3.23005772 311.13034058]
[8.15819359 296.96298218]
[0.04265456 289.02175903]
[-4.49177599 278.55557251]
[-4.73711443 267.10025024]
[-0.61792105 256.35290527]
[7.29172564 247.92057800]
[17.84791946 243.07989502]
[29.50225639 242.58389282]
[35.50906372 228.83912659]
[41.51587296 215.09437561]
[47.52268219 201.34962463]
[45.52954865 186.58897400]
[58.14570236 177.04208374]
[64.15251160 163.29733276]
[70.15931702 149.55256653]
[76.16613007 135.80781555]
[82.17293549 122.06306458]
[88.17974091 108.31831360]
[77.72088623 119.07062531]
[62.86865616 121.17093658]
[49.83847427 113.74030304]
[44.08325958 99.88831329]
[48.01147461 85.41181183]
[59.97922897 76.36897278]
[74.97820282 76.54408264]
[86.73226166 85.86492157]
[79.01036835 73.00520325]
[64.41497803 65.52812958]
[63.86296463 49.13827896]
[77.92219543 40.69611359]
[92.12973785 48.88621521]
[91.87009430 65.28330994]
[99.59197998 78.14302826]
[100.22466278 84.61184692]
[100.42671204 91.09141541]
[111.43499756 80.90231323]
[122.44327545 70.71321106]
[133.45155334 60.52411270]
[144.45983887 50.33501434]
[140.62893677 34.30836487]
[145.34262085 18.61638451]
[157.23446655 7.48145151]
[173.01992798 3.85036421]
[188.40319824 8.61488914]
[199.14547729 -1.85427284]
[209.88777161 -12.32343483]
[220.63005066 -22.79259682]
[231.37232971 -33.26176071]
[225.70399475 -47.36631393]
[225.86972046 -62.56634521]
[231.84422302 -76.54396057]
[242.71644592 -87.16767883]
[256.82843018 -92.81745148]
[272.02822876 -92.63173676]
[285.99798584 -86.63885498]
[296.60739136 -75.75267029]
[302.23858643 -61.63325119]
[302.03289795 -46.43370819]
[296.02163696 -32.47185898]
[285.12149048 -21.87678337]
[270.99468994 -16.26415634]
[255.79542542 -16.48986053]
[241.84149170 -22.51947784]
[231.09921265 -12.05031490]
[220.35693359 -1.58115232]
[209.61465454 8.88801003]
[198.87236023 19.35717201]
[203.11064148 32.40645599]
[201.27906799 46.07096100]
[193.68106079 57.65452957]
[181.76353455 64.84656525]
[167.84159851 66.18284607]
[154.64894104 61.34329605]
[143.64065552 71.53239441]
[132.63237000 81.72149658]
[121.62409210 91.91059875]
[110.61581421 102.09969330]
[101.92449951 114.32511902]
[95.91768646 128.06987000]
[89.91088104 141.81462097]
[83.90406799 155.55938721]
[77.89726257 169.30413818]
[71.89045715 183.04888916]
[73.45394135 198.79264832]
[61.26743698 207.35643005]
[55.26062775 221.10118103]
[49.25381851 234.84594727]
[43.24700928 248.59069824]
[53.63156891 264.51550293]
[52.47199249 283.34359741]
[40.40236282 297.64782715]
[22.32553101 301.89111328]
[17.39739609 316.05847168]
[12.46926022 330.22579956]
[7.54112482 344.39312744]
[2.61298895 358.56048584]
[-2.31514668 372.72781372]
[-7.24328232 386.89514160]
[4.82074833 396.02282715]
[13.47205544 408.43289185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 119]
[17 118]
[18 117]
[19 116]
[20 115]
[21 114]
[22 113]
[29 109]
[30 108]
[31 107]
[32 106]
[34 104]
[35 103]
[36 102]
[37 101]
[38 100]
[39 99]
[47 54]
[48 53]
[56 98]
[57 97]
[58 96]
[59 95]
[60 94]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
