%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGCGCGCGCGCCUGCGUAGUGUGUCACGGGGCGGGACAACCGCGGCGCGGCUCGGCGCUCCCGGCCUGGCGUUGUGGCGCCGCAGCCCUUGCCACCUUCCCUGCACCUGCCCUGCCCGGCCUC\
) } def
/len { sequence length } bind def

/coor [
[-16.65339470 284.43392944]
[-23.87323952 282.89785767]
[-34.01089096 293.95355225]
[-44.14854431 305.00921631]
[-54.28619766 316.06491089]
[-64.42385101 327.12057495]
[-74.56150055 338.17626953]
[-84.69915009 349.23193359]
[-94.69928741 360.41213989]
[-104.56038666 371.71520996]
[-114.42147827 383.01824951]
[-124.28257751 394.32128906]
[-126.90775299 410.50894165]
[-142.33322144 416.07556152]
[-154.69056702 405.29464722]
[-151.26762390 389.25671387]
[-135.58561707 384.46020508]
[-125.72452545 373.15713501]
[-115.86342621 361.85409546]
[-106.00233459 350.55105591]
[-103.95380402 343.36532593]
[-95.75482941 339.09429932]
[-85.61717987 328.03860474]
[-75.47952271 316.98294067]
[-65.34187317 305.92724609]
[-55.20422363 294.87158203]
[-45.06657028 283.81588745]
[-34.92891693 272.76022339]
[-32.79545975 250.41896057]
[-10.88332462 242.90084839]
[-9.80896950 228.04504395]
[4.49600267 221.28646851]
[13.19227600 209.06455994]
[21.88854980 196.84266663]
[30.58482361 184.62077332]
[39.28109741 172.39886475]
[47.97737122 160.17697144]
[56.67364502 147.95506287]
[57.74799728 133.09925842]
[72.05297089 126.34068298]
[80.74924469 114.11878204]
[76.12737274 100.17162323]
[80.54824066 86.15945435]
[92.33726501 77.38995361]
[107.02885437 77.18494415]
[115.72512817 64.96304321]
[123.00988770 51.85074997]
[128.79296875 38.01037216]
[134.57603455 24.16999435]
[140.35911560 10.32961750]
[137.55093384 -7.81861496]
[151.80290222 -17.97908783]
[157.24186707 -31.95827293]
[162.68084717 -45.93745422]
[168.11981201 -59.91664124]
[173.38546753 -73.96202087]
[178.47702026 -88.07146454]
[183.56855774 -102.18090057]
[188.66009521 -116.29033661]
[193.75163269 -130.39976501]
[198.84317017 -144.50921631]
[203.93472290 -158.61865234]
[199.15563965 -170.67436218]
[203.76686096 -182.36386108]
[214.76264954 -187.56507874]
[220.20161438 -201.54426575]
[225.64057922 -215.52343750]
[231.07955933 -229.50262451]
[225.96298218 -244.70790100]
[234.78153992 -258.10986328]
[250.77037048 -259.42767334]
[261.66421509 -247.65043640]
[259.10626221 -231.81262207]
[245.05874634 -224.06365967]
[239.61976624 -210.08447266]
[234.18080139 -196.10528564]
[228.74182129 -182.12609863]
[232.37928772 -165.00527954]
[218.04415894 -153.52709961]
[212.95262146 -139.41766357]
[207.86106873 -125.30823517]
[202.76953125 -111.19879150]
[197.67799377 -97.08935547]
[192.58645630 -82.97991943]
[187.49490356 -68.87048340]
[188.19132996 -61.43097687]
[182.09899902 -54.47766876]
[176.66001892 -40.49848557]
[171.22105408 -26.51930046]
[165.78207397 -12.54011631]
[170.37126160 -1.27515709]
[165.86965942 10.45699406]
[154.19949341 16.11269379]
[148.41641235 29.95306969]
[142.63334656 43.79344559]
[136.85026550 57.63382339]
[150.42315674 51.24814606]
[165.31576538 53.03976059]
[176.98687744 62.46234894]
[181.87757874 76.64265442]
[178.49653625 91.25663757]
[167.87474060 101.84802246]
[153.25112915 105.18714905]
[139.08489990 100.25580597]
[129.69581604 88.55772400]
[127.94702911 73.65931702]
[119.25075531 85.88121796]
[123.87262726 99.82837677]
[119.45175934 113.84054565]
[107.66273499 122.61004639]
[92.97114563 122.81505585]
[84.27487183 135.03695679]
[82.57849884 150.76695251]
[68.89554596 156.65133667]
[60.19926834 168.87324524]
[51.50299454 181.09513855]
[42.80672073 193.31703186]
[34.11045074 205.53894043]
[25.41417503 217.76083374]
[16.71790123 229.98274231]
[15.02153111 245.71273804]
[1.33857477 251.59712219]
[4.33480930 258.79208374]
[4.58274937 266.51324463]
[2.09887028 273.75552368]
[-2.74790049 279.59347534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[9 20]
[10 19]
[11 18]
[12 17]
[30 122]
[32 120]
[33 119]
[34 118]
[35 117]
[36 116]
[37 115]
[38 114]
[40 112]
[41 111]
[45 107]
[46 106]
[47 96]
[48 95]
[49 94]
[50 93]
[52 90]
[53 89]
[54 88]
[55 87]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
[61 80]
[62 79]
[65 77]
[66 76]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
