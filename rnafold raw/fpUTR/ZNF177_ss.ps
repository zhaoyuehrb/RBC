%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGCGGUCUUGCUGUGUUGCCUAGGCUGGUCUCAAACUCCUGCUCUCAAGUGAUCCUCCUGCCUCAGCCUCCUGAGUACAUUUAUAUUUAAAGUAAUUAUUGAUGGCUCUGCCUGCUUAGGACUCUGCCCAGCCAGGAAGGAAACCUACAGGAGGAAGA\
) } def
/len { sequence length } bind def

/coor [
[-270.38482666 572.52105713]
[-279.80200195 584.19653320]
[-289.21917725 595.87200928]
[-298.63638306 607.54748535]
[-301.60940552 616.23779297]
[-308.35113525 619.35571289]
[-317.99295044 630.84637451]
[-327.63476562 642.33703613]
[-337.27658081 653.82769775]
[-346.91839600 665.31835938]
[-356.56021118 676.80902100]
[-359.31182861 694.99340820]
[-375.98703003 700.39428711]
[-385.40420532 712.06976318]
[-383.47271729 727.75561523]
[-393.26425171 740.16131592]
[-408.96960449 741.92681885]
[-421.27111816 732.00469971]
[-422.87048340 716.28155518]
[-412.81884766 704.08563232]
[-397.07968140 702.65258789]
[-387.66250610 690.97711182]
[-388.63189697 678.88854980]
[-380.83920288 669.07806396]
[-368.05087280 667.16723633]
[-358.40905762 655.67657471]
[-348.76724243 644.18591309]
[-339.12542725 632.69525146]
[-329.48361206 621.20452881]
[-319.84179688 609.71386719]
[-310.31185913 598.13024902]
[-300.89465332 586.45483398]
[-291.47747803 574.77935791]
[-282.06030273 563.10388184]
[-288.84164429 547.32232666]
[-286.71447754 530.18829346]
[-276.17211914 516.40319824]
[-260.02935791 509.79495239]
[-242.67120361 512.25549316]
[-233.71382141 500.22363281]
[-224.75643921 488.19180298]
[-215.79905701 476.15994263]
[-206.84169006 464.12811279]
[-197.88430786 452.09625244]
[-203.11132812 443.04690552]
[-205.01173401 432.73168945]
[-203.34060669 422.33795166]
[-198.26570129 413.07095337]
[-190.35093689 406.01400757]
[-180.49388123 402.00180054]
[-169.82395935 401.52185059]
[-159.57307434 404.65524292]
[-149.71025085 393.35372925]
[-150.21018982 381.23666382]
[-142.04295349 371.73571777]
[-129.19013977 370.32217407]
[-119.11001587 359.21401978]
[-109.02989960 348.10583496]
[-98.94978333 336.99768066]
[-88.97784424 325.79229736]
[-79.11502075 314.49078369]
[-69.25220490 303.18923950]
[-59.38938141 291.88769531]
[-56.85048676 277.21105957]
[-41.94702148 271.90097046]
[-32.08420181 260.59942627]
[-22.55425453 249.01580811]
[-13.36524582 237.15992737]
[-4.17623758 225.30403137]
[-6.29770374 210.60591125]
[2.85236573 198.45144653]
[18.28349876 196.32591248]
[27.47250748 184.47003174]
[36.66151428 172.61413574]
[45.85052490 160.75823975]
[55.03953171 148.90235901]
[64.22853851 137.04646301]
[73.41754913 125.19057465]
[82.60655975 113.33468628]
[91.79556274 101.47879791]
[79.63371277 96.05507660]
[71.92833710 82.36183167]
[72.78555298 63.45962906]
[77.08760071 49.08978653]
[81.38964844 34.71994400]
[85.69169617 20.35010147]
[81.38535309 4.52646685]
[93.12635803 -6.92259121]
[108.83656311 -2.21926260]
[112.35466766 13.79807091]
[100.06153870 24.65215111]
[95.75949097 39.02199173]
[91.45744324 53.39183426]
[87.15539551 67.76168060]
[92.75808716 72.74765015]
[102.73001862 61.54227066]
[112.70195770 50.33689499]
[122.67389679 39.13151932]
[132.64584351 27.92614365]
[142.61796570 16.72093201]
[153.82299805 26.69324303]
[143.85121155 37.89808273]
[133.87927246 49.10345840]
[123.90733337 60.30883408]
[113.93539429 71.51420593]
[103.96346283 82.71958923]
[109.56614685 87.70555115]
[123.33938599 81.76435852]
[137.11262512 75.82315826]
[149.26155090 63.99775696]
[163.98796082 72.39828491]
[159.99240112 88.87468719]
[143.05383301 89.59640503]
[129.28057861 95.53759766]
[115.50734711 101.47879791]
[103.65145111 110.66780090]
[94.46244812 122.52369690]
[85.27343750 134.37957764]
[76.08442688 146.23547363]
[66.89542389 158.09136963]
[57.70641327 169.94725037]
[48.51740646 181.80314636]
[39.32839584 193.65904236]
[30.13938904 205.51492310]
[31.93020630 220.98847961]
[22.44235229 232.88113403]
[7.67965221 234.49304199]
[-1.50935578 246.34893799]
[-10.69836426 258.20483398]
[-11.41119480 263.47537231]
[-13.85512257 267.51733398]
[-17.25917053 269.87277222]
[-20.78266144 270.46224976]
[-30.64548302 281.76379395]
[-33.88983154 297.24877930]
[-48.08784485 301.75051880]
[-57.95066452 313.05206299]
[-67.81348419 324.35360718]
[-77.67630768 335.65512085]
[-80.98407745 344.22366333]
[-87.84162140 347.07781982]
[-97.92173767 358.18597412]
[-108.00185394 369.29412842]
[-118.08197784 380.40228271]
[-121.53664398 398.46630859]
[-138.40870667 403.21655273]
[-148.27153015 414.51806641]
[-142.75024414 433.67248535]
[-149.79228210 452.16857910]
[-166.41242981 462.64840698]
[-185.85246277 461.05361938]
[-194.80982971 473.08547974]
[-203.76721191 485.11734009]
[-212.72459412 497.14916992]
[-221.68197632 509.18103027]
[-230.63934326 521.21289062]
[-224.39970398 532.58172607]
[-222.94584656 545.42144775]
[-226.45989990 557.80749512]
[-234.38208008 567.89703369]
[-245.49948120 574.20288086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[13 22]
[14 21]
[39 156]
[40 155]
[41 154]
[42 153]
[43 152]
[44 151]
[52 147]
[53 146]
[56 144]
[57 143]
[58 142]
[59 141]
[60 139]
[61 138]
[62 137]
[63 136]
[65 134]
[66 133]
[67 129]
[68 128]
[69 127]
[72 124]
[73 123]
[74 122]
[75 121]
[76 120]
[77 119]
[78 118]
[79 117]
[80 116]
[83 94]
[84 93]
[85 92]
[86 91]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
