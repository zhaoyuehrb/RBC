%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCAAAUCCUCGUCCGCGAGAACUGCAAGGCCCGCAAUGCCCUGCGCCUGCGUGGACCGAUUAGCUUUGAAGUUUAAAUCCA\
) } def
/len { sequence length } bind def

/coor [
[172.56704712 336.31509399]
[176.07423401 321.63171387]
[183.41389465 308.43957520]
[194.04139709 297.71771240]
[186.62156677 284.68136597]
[173.60154724 277.44754028]
[173.49960327 261.62664795]
[166.07977295 248.59033203]
[158.65992737 235.55400085]
[151.24009705 222.51765442]
[140.90127563 220.61595154]
[133.24978638 213.08654785]
[131.09414673 202.34318542]
[135.42085266 192.03422546]
[128.98403931 178.48551941]
[122.54722595 164.93679810]
[116.11042023 151.38809204]
[109.67360687 137.83938599]
[103.23680115 124.29067993]
[96.79999542 110.74197388]
[90.11391449 97.31452179]
[83.18085480 84.01291656]
[72.34671021 81.25316620]
[65.07238770 73.05860901]
[63.67484283 62.41509628]
[68.38777161 53.01850891]
[62.45600510 39.24120712]
[56.52423859 25.46389961]
[50.59247208 11.68659592]
[38.02856445 2.07104182]
[40.10216141 -12.67851639]
[34.17039108 -26.45582199]
[28.23862457 -40.23312759]
[13.21004963 -44.55469131]
[4.51826859 -57.55419159]
[6.26727629 -73.09365845]
[17.63124466 -83.83583069]
[33.24445343 -84.70858002]
[45.73482513 -75.29982758]
[49.20478821 -60.05209351]
[42.01593018 -46.16489410]
[47.94769669 -32.38758850]
[53.87946701 -18.61028481]
[66.01908875 -9.98017597]
[64.36977386 5.75482750]
[70.30154419 19.53213310]
[76.23331451 33.30943680]
[82.16507721 47.08674240]
[98.48374939 57.18531799]
[96.48246765 77.07985687]
[103.41551971 90.38146210]
[109.78721619 95.65653229]
[110.34870148 104.30516052]
[116.78550720 117.85387421]
[123.22232056 131.40257263]
[129.65913391 144.95129395]
[136.09593201 158.50000000]
[142.53274536 172.04870605]
[148.96955872 185.59741211]
[166.05178833 195.98948669]
[164.27642822 215.09782410]
[171.69625854 228.13415527]
[179.11610413 241.17048645]
[186.53593445 254.20681763]
[200.08668518 262.37310791]
[199.65789795 277.26153564]
[207.07772827 290.29788208]
[221.72314453 286.63528442]
[236.81358337 287.06091309]
[251.22924805 291.54324341]
[263.90039062 299.74963379]
[273.88674927 311.07107544]
[280.44723511 324.66751099]
[283.09503174 339.52993774]
[281.63369751 354.55548096]
[276.17160034 368.62915039]
[267.11410522 380.70657349]
[255.13334656 389.89154053]
[241.11834717 395.50247192]
[226.10913086 397.12298584]
[211.21948242 394.63284302]
[197.55430603 388.21679688]
[186.12765503 378.35101318]
[177.78744507 365.76754761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 67]
[5 66]
[7 64]
[8 63]
[9 62]
[10 61]
[14 59]
[15 58]
[16 57]
[17 56]
[18 55]
[19 54]
[20 53]
[21 51]
[22 50]
[26 48]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[33 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
