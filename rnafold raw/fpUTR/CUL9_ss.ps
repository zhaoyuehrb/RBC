%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCGGGGCCAGGACGGCGGGACCGGCCGCUGGGUCCCAGCGAGGGCUGAGCCGGGCGGUGGGAGGAGGUCAGG\
) } def
/len { sequence length } bind def

/coor [
[66.57872772 227.37133789]
[56.93181610 230.21388245]
[46.98724365 229.18374634]
[38.78302002 241.74125671]
[30.57879829 254.29875183]
[26.97740746 270.86578369]
[10.06086349 271.99133301]
[4.29632425 256.04748535]
[18.02130127 246.09452820]
[26.22552299 233.53703308]
[34.42974472 220.97952271]
[28.21643829 201.79501343]
[37.76582336 183.71932983]
[57.64754105 177.88301086]
[63.67297363 164.14642334]
[69.69840240 150.40982056]
[64.06171417 136.67070007]
[69.97667694 122.65399933]
[84.42574310 116.83487701]
[78.17798615 107.05481720]
[77.51814270 95.46824646]
[82.61517334 85.04211426]
[92.16388702 78.44621277]
[103.71916962 77.36952972]
[110.85838318 64.17742157]
[110.62178802 48.35798264]
[123.48405457 40.84722900]
[130.62326050 27.65512276]
[137.76246643 14.46301651]
[144.90168762 1.27091026]
[152.04089355 -11.92119598]
[159.18009949 -25.11330223]
[158.94351196 -40.93273926]
[171.80577087 -48.44349289]
[178.94499207 -61.63560104]
[186.08419800 -74.82770538]
[183.15467834 -87.58190155]
[189.60275269 -98.50182343]
[201.40776062 -101.87273407]
[209.08602905 -114.75854492]
[216.76431274 -127.64435577]
[224.44258118 -140.53016663]
[224.12738037 -156.92628479]
[238.30709839 -165.16447449]
[252.39485168 -156.76998901]
[251.89837646 -140.37837219]
[237.32839966 -132.85188293]
[229.65011597 -119.96607971]
[221.97184753 -107.08026886]
[214.29356384 -94.19445801]
[215.12757874 -76.79044342]
[199.27630615 -67.68849182]
[192.13708496 -54.49638748]
[184.99787903 -41.30428314]
[185.74511719 -26.42843246]
[172.37220764 -17.97409058]
[165.23300171 -4.78198528]
[158.09379578 8.41012096]
[150.95457458 21.60222816]
[143.81536865 34.79433441]
[136.67616272 47.98643875]
[137.42340088 62.86228943]
[124.05049133 71.31662750]
[116.91127777 84.50873566]
[122.89817810 101.28215790]
[115.07615662 117.28236389]
[98.16233826 122.86030579]
[103.66715240 137.43202209]
[97.36082458 151.27705383]
[83.43500519 156.43524170]
[77.40957642 170.17184448]
[71.38414001 183.90844727]
[77.76908875 192.05812073]
[80.56247711 201.96566772]
[79.38858795 212.13272095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[14 72]
[15 71]
[16 70]
[19 67]
[24 64]
[25 63]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[34 54]
[35 53]
[36 52]
[39 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
