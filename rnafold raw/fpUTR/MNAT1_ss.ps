%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAAGGGACCGUCUCUGCCAAGCGCCUGUUGGUAGGAACCUGCUUGGUCGCGUCUGAGGGGGCUUGUAGGUGGCUCUGGCUGAAACAGGCGCCUGCGAGAGUCUGUAGGAGGGAAACCGCC\
) } def
/len { sequence length } bind def

/coor [
[134.81736755 308.66748047]
[130.44668579 301.58468628]
[129.28819275 293.24716187]
[131.61408997 285.05856323]
[137.10334778 278.42874146]
[126.14048004 268.34585571]
[129.74798584 252.94142151]
[125.58888245 238.52955627]
[121.42977142 224.11769104]
[117.27066803 209.70582581]
[113.49581909 206.60935974]
[111.69700623 201.06326294]
[113.28740692 194.45114136]
[109.86960602 179.84571838]
[106.45180511 165.24028015]
[103.03400421 150.63485718]
[98.39244080 144.77081299]
[99.72047424 135.61285400]
[96.67678833 120.92489624]
[85.27572632 115.23451996]
[79.20040894 104.03384399]
[80.64827728 91.37413025]
[89.09562683 81.83438110]
[86.42804718 67.07348633]
[83.76046753 52.31259537]
[81.09288025 37.55170059]
[78.42530060 22.79080582]
[75.75771332 8.02991199]
[73.09013367 -6.73098230]
[70.42255402 -21.49187660]
[67.75496674 -36.25276947]
[64.71128845 -50.94072342]
[61.29348373 -65.54615784]
[57.87567902 -80.15158844]
[47.19748688 -91.82578278]
[51.83131027 -105.98123932]
[48.41350555 -120.58666992]
[44.99570465 -135.19210815]
[41.02098083 -149.65589905]
[36.49517059 -163.95684814]
[31.96936226 -178.25779724]
[27.44355392 -192.55874634]
[22.91774559 -206.85968018]
[18.39193535 -221.16062927]
[7.26831722 -227.83847046]
[3.83399487 -239.93202209]
[9.41928387 -250.74395752]
[5.26017761 -265.15582275]
[1.10107124 -279.56768799]
[-3.05803514 -293.97955322]
[-14.31838894 -305.09329224]
[-10.41339874 -319.46688843]
[-24.78220558 -325.63708496]
[-31.77701950 -339.62304688]
[-28.09510422 -354.82098389]
[-15.47494984 -364.05493164]
[0.12459581 -362.96487427]
[11.33790302 -352.06552124]
[12.87039089 -336.50320435]
[3.99846530 -323.62600708]
[14.96133232 -313.54309082]
[11.35382938 -298.13867188]
[15.51293564 -283.72680664]
[19.67204094 -269.31494141]
[23.83114815 -254.90307617]
[37.11091614 -243.50706482]
[32.69288254 -225.68644714]
[37.21868896 -211.38549805]
[41.74449921 -197.08454895]
[46.27030945 -182.78359985]
[50.79611588 -168.48266602]
[55.32192612 -154.18171692]
[58.38656616 -152.22398376]
[60.60642242 -148.62666321]
[61.19454575 -143.82725525]
[59.60113525 -138.60990906]
[63.01893616 -124.00447083]
[66.43673706 -109.39904022]
[76.87046814 -98.76952362]
[72.48110962 -83.56938934]
[75.89891052 -68.96395874]
[79.31671906 -54.35852814]
[82.92853546 -51.07334137]
[84.44181061 -45.44264221]
[82.51586151 -38.92035294]
[85.18344879 -24.15946007]
[87.85102844 -9.39856434]
[90.51860809 5.36232948]
[93.18619537 20.12322426]
[95.85377502 34.88411713]
[98.52135468 49.64501190]
[101.18894196 64.40590668]
[103.85652161 79.16680145]
[117.60181427 88.20716858]
[120.73409271 104.35802460]
[111.36473846 117.88121033]
[114.40842438 132.56916809]
[117.63943481 147.21705627]
[121.05723572 161.82247925]
[124.47503662 176.42791748]
[127.89283752 191.03334045]
[131.68252563 205.54672241]
[135.84164429 219.95858765]
[140.00074768 234.37045288]
[144.15985107 248.78231812]
[155.42019653 259.89605713]
[151.51521301 274.26965332]
[168.88333130 288.33157349]
[163.49578857 309.24887085]
[169.10304260 323.16140747]
[181.43815613 333.06875610]
[179.01945496 347.76568604]
[184.62670898 361.67822266]
[197.86727905 371.35394287]
[195.83935547 387.62722778]
[180.62910461 393.75750732]
[167.88352966 383.43847656]
[170.71417236 367.28546143]
[165.10691833 353.37292480]
[153.17288208 344.46069336]
[155.19050598 328.76867676]
[149.58325195 314.85614014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 107]
[7 105]
[8 104]
[9 103]
[10 102]
[13 101]
[14 100]
[15 99]
[16 98]
[18 97]
[19 96]
[23 93]
[24 92]
[25 91]
[26 90]
[27 89]
[28 88]
[29 87]
[30 86]
[31 85]
[32 82]
[33 81]
[34 80]
[36 78]
[37 77]
[38 76]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[47 65]
[48 64]
[49 63]
[50 62]
[52 60]
[109 122]
[110 121]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
