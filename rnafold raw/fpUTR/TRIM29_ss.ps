%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCACAGGUGUGUCUCUAGUCCUCGUGGUUGCCUGCCCCACUCCCUGCCGAGACGCCUGCCAGAAAGGUCACCUAUCCUGAACCCCAGCAAGCCUGAAACAGCUCAGCCAAGCACCCUGCG\
) } def
/len { sequence length } bind def

/coor [
[57.74359512 125.83457947]
[53.53729248 117.15360260]
[51.09349060 107.82192993]
[50.50488663 98.19354248]
[35.77058029 95.38282013]
[22.79321671 103.99826813]
[7.89057302 100.93789673]
[-0.24295841 88.51287079]
[-14.97726727 85.70215607]
[-29.71157646 82.89143372]
[-44.44588470 80.08071136]
[-59.18019485 77.26999664]
[-73.91450500 74.45927429]
[-88.64881134 71.64855957]
[-103.65437317 76.66291046]
[-114.70638275 66.67781067]
[-129.44068909 63.86708832]
[-142.41804504 72.48252869]
[-157.32069397 69.42216492]
[-165.45422363 56.99713898]
[-180.18853760 54.18642044]
[-194.92285156 51.37569809]
[-202.91906738 61.14976120]
[-214.26615906 66.52440643]
[-226.74917603 66.51932526]
[-237.96069336 61.19770813]
[-245.76521301 51.64205170]
[-248.70576477 39.73457336]
[-263.28024292 36.18708801]
[-277.85470581 32.63960266]
[-292.42919922 29.09211731]
[-303.53146362 39.80394745]
[-318.66696167 42.79056168]
[-333.00604248 37.09894180]
[-341.97311401 24.54526329]
[-342.70684814 9.13535881]
[-334.97311401 -4.21352768]
[-321.23971558 -11.24181366]
[-305.88888550 -9.70679951]
[-293.81909180 -0.09830272]
[-288.88171387 14.51764107]
[-274.30722046 18.06512642]
[-259.73275757 21.61261177]
[-245.15827942 25.16009521]
[-232.34162903 13.14058590]
[-214.73066711 11.11881924]
[-199.25396729 20.07722855]
[-192.11212158 36.64139175]
[-177.37782288 39.45211029]
[-162.64350891 42.26282883]
[-150.50718689 33.70448685]
[-135.52445984 36.34505844]
[-126.62996674 49.13277817]
[-111.89566040 51.94350052]
[-97.94400024 46.72809982]
[-85.83808899 56.91424561]
[-71.10378265 59.72496796]
[-56.36947250 62.53568649]
[-41.63516617 65.34640503]
[-26.90085602 68.15712738]
[-12.16654778 70.96784210]
[2.56776142 73.77856445]
[14.70408440 65.22022247]
[29.68680763 67.86079407]
[38.58129883 80.64851379]
[53.31560898 83.45923615]
[69.90634918 60.66297150]
[96.24916077 50.61416626]
[123.80746460 56.56920242]
[132.92642212 44.65934753]
[142.04536438 32.74949265]
[137.49378967 17.91497993]
[142.56283569 3.24921942]
[155.30332947 -5.60850382]
[170.81631470 -5.25221539]
[183.13671875 4.18108511]
[187.52709961 19.06410027]
[182.29927063 33.67400742]
[169.46343994 42.39300156]
[153.95523071 41.86844635]
[144.83627319 53.77830124]
[135.71731567 65.68815613]
[139.64533997 70.31370544]
[142.97821045 75.38491058]
[145.66587830 80.82563782]
[147.66801453 86.55420685]
[148.95455933 92.48463440]
[149.50617981 98.52787781]
[149.31462097 104.59321594]
[148.38273621 110.58960724]
[146.72453308 116.42702484]
[159.95890808 123.48758698]
[174.90966797 119.11582184]
[188.23062134 126.46475983]
[192.30628967 140.74497986]
[208.12403870 140.41421509]
[215.71122742 153.23155212]
[228.94558716 160.29211426]
[242.17996216 167.35266113]
[255.41432190 174.41322327]
[270.45962524 169.57440186]
[284.48150635 176.86570740]
[289.16098022 191.96133423]
[281.72183228 205.90531921]
[266.57757568 210.42494202]
[252.71302795 202.83879089]
[248.35377502 187.64759827]
[235.11940002 180.58703613]
[221.88504028 173.52647400]
[208.65066528 166.46591187]
[193.77952576 167.30169678]
[185.24572754 153.97933960]
[171.11500549 158.54641724]
[157.59289551 151.57452393]
[152.89834595 136.72195435]
[139.66397095 129.66139221]
[133.16210938 136.78727722]
[125.40229797 142.51766968]
[116.67887878 146.63522339]
[107.32276154 148.98373413]
[97.68887329 149.47412109]
[88.14265442 148.08775330]
[79.04622650 144.87725830]
[70.74465179 139.96440125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 66]
[5 65]
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[13 57]
[14 56]
[16 54]
[17 53]
[20 50]
[21 49]
[22 48]
[28 44]
[29 43]
[30 42]
[31 41]
[69 82]
[70 81]
[71 80]
[91 116]
[92 115]
[95 112]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
