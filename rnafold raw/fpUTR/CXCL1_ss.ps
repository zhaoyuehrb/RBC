%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGAGCCCGGGCCGCAGGCACCUCCUCGCCAGCUCUUCCGCUCCUCUCACAGCCGCCAGACCCGCCUGCUGAGCCCC\
) } def
/len { sequence length } bind def

/coor [
[67.07712555 315.46707153]
[58.76189804 328.26629639]
[45.71231461 336.18280029]
[30.51937866 337.64477539]
[16.19965363 332.36196899]
[5.59633446 321.38323975]
[0.81471688 306.88845825]
[2.80419493 291.75555420]
[11.16975594 278.98916626]
[24.25041199 271.12411499]
[39.44898987 269.72198486]
[44.64074707 255.64910889]
[49.83250046 241.57623291]
[55.02425766 227.50337219]
[59.93870926 213.33128357]
[64.29298401 198.97717285]
[68.36458588 184.54034424]
[72.43619537 170.10351562]
[76.50779724 155.66668701]
[80.57940674 141.22985840]
[84.65101624 126.79302979]
[74.55361938 117.49112701]
[69.48654938 104.73151398]
[70.45149231 91.03656006]
[77.25768280 79.11352539]
[88.55965424 71.31941223]
[102.12319183 69.19496918]
[106.75844574 54.92912292]
[103.66432953 39.41342163]
[114.95587921 29.70002365]
[119.59113312 15.43417645]
[114.40587616 3.43494010]
[118.75569916 -8.46203232]
[129.73419189 -13.92549515]
[134.92594910 -27.99836540]
[140.11770630 -42.07123566]
[128.53233337 -51.84644699]
[120.99164581 -64.99612427]
[118.40623474 -79.93236542]
[121.08829498 -94.85156250]
[128.71395874 -107.95214081]
[140.36238098 -117.65214539]
[154.62695312 -122.78025055]
[169.78518677 -122.71720886]
[184.00662231 -117.47064209]
[195.57397461 -107.67409515]
[203.09040833 -94.51055145]
[205.64828491 -79.56956482]
[202.93873596 -64.65533447]
[195.28895569 -51.56883621]
[183.62268066 -41.89031601]
[169.34866333 -36.78850937]
[154.19058228 -36.87947845]
[148.99882507 -22.80661011]
[143.80706787 -8.73373890]
[147.80244446 8.23619175]
[133.85697937 20.06943130]
[129.22172546 34.33527756]
[132.64739990 48.83059311]
[121.02429962 59.56437683]
[116.38903809 73.83022308]
[127.25978851 85.49614716]
[130.86093140 101.02993011]
[126.23212433 116.28905487]
[114.60777283 127.20423889]
[99.08784485 130.86463928]
[95.01623535 145.30146790]
[90.94462585 159.73829651]
[86.87302399 174.17512512]
[82.80141449 188.61195374]
[78.72981262 203.04878235]
[79.40415955 212.43278503]
[74.20455933 217.96653748]
[74.50997925 227.36978149]
[69.09712982 232.69512939]
[63.90537262 246.76799011]
[58.71361542 260.84085083]
[53.52185822 274.91372681]
[64.16832733 285.85061646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 78]
[12 77]
[13 76]
[14 75]
[15 73]
[16 71]
[17 70]
[18 69]
[19 68]
[20 67]
[21 66]
[27 61]
[28 60]
[30 58]
[31 57]
[34 55]
[35 54]
[36 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
