%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGUUCUAAGGGACCAUACAGAGUAUUCCUCUCUUCACACCAGGACCAGUCACUGUUGCAGC\
) } def
/len { sequence length } bind def

/coor [
[100.03565979 150.68630981]
[89.13233948 149.50755310]
[78.73779297 146.01110840]
[69.33862305 140.36067200]
[61.37486267 132.82075500]
[48.63284302 140.73535156]
[35.89082336 148.64996338]
[23.14880371 156.56455994]
[15.89229774 171.27085876]
[-0.48738939 172.06953430]
[-9.14023972 158.13899231]
[-1.16494238 143.80976868]
[15.23420048 143.82254028]
[27.97621918 135.90794373]
[40.71823883 127.99333954]
[53.46025848 120.07873535]
[49.95112228 108.01330566]
[49.51782608 95.45541382]
[52.18699265 83.17681122]
[57.79459000 71.93210602]
[65.99598694 62.41236115]
[76.28716278 55.20262909]
[71.30854797 41.05295181]
[66.32992554 26.90327263]
[61.35131073 12.75359535]
[46.65235138 7.41742659]
[38.86711502 -6.14443445]
[41.67154312 -21.52849007]
[53.74147797 -31.47086143]
[69.37786102 -31.27706337]
[81.19766998 -21.03860092]
[83.61995697 -5.58976507]
[75.50098419 7.77497816]
[80.47960663 21.92465591]
[85.45822144 36.07433319]
[90.43683624 50.22401047]
[112.21656799 50.80794144]
[131.73902893 60.48117447]
[145.39700317 77.45636749]
[150.66690063 98.59699249]
[165.55754089 100.40503693]
[180.18971252 94.38758087]
[191.89155579 103.60256958]
[206.78219604 105.41062164]
[221.67283630 107.21867371]
[236.60279846 108.66638184]
[251.56340027 109.75289917]
[266.07818604 102.12052917]
[279.79907227 111.10211945]
[278.61120605 127.45819092]
[263.73654175 134.36300659]
[250.47688293 124.71350098]
[235.51628113 123.62697601]
[228.35981750 126.38539124]
[219.86477661 122.10930634]
[204.97415161 120.30125427]
[190.08351135 118.49320221]
[176.51640320 124.63998413]
[163.74948120 115.29567719]
[148.85885620 113.48762512]
[144.81404114 123.68131256]
[138.67127991 132.76637268]
[130.71813965 140.31748962]
[121.32692719 145.98114014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[8 13]
[22 36]
[23 35]
[24 34]
[25 33]
[40 60]
[41 59]
[43 57]
[44 56]
[45 55]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
