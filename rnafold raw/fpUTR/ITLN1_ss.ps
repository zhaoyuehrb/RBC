%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGCGUUUUUGGAGAAAGCUGCACUCUGUUGAGCUCCAGGGCGCAGUGGAGGGAGGGAGUGAAGGAGCUCUCUGUACCCAAGGAAAGUGCAGCUGAGACUCAGACAAGAUUACA\
) } def
/len { sequence length } bind def

/coor [
[112.29148102 558.32904053]
[97.13983154 557.10583496]
[83.61190796 550.17309570]
[73.77060699 538.58782959]
[69.11665344 524.11688232]
[70.35974884 508.96685791]
[77.31033325 495.44805908]
[88.90848541 485.62200928]
[103.38557434 480.98709106]
[104.59256744 466.03573608]
[105.79956818 451.08438110]
[107.00656891 436.13302612]
[108.21356201 421.18167114]
[108.81755829 406.19381714]
[108.81755829 391.19381714]
[108.81755829 376.19381714]
[95.13092041 364.18173218]
[94.42639160 345.66903687]
[107.60197449 332.19982910]
[106.79682922 317.22146606]
[105.99167633 302.24307251]
[105.18652344 287.26470947]
[104.38137817 272.28631592]
[103.57622528 257.30795288]
[102.77108002 242.32957458]
[101.96592712 227.35119629]
[101.16078186 212.37283325]
[90.78824615 198.28681946]
[99.08867645 181.91761780]
[90.35234070 169.85421753]
[96.95410156 155.47619629]
[95.74710083 140.52484131]
[94.54010773 125.57347870]
[77.61923218 117.55310822]
[69.27769470 99.06961060]
[75.29133606 78.08103943]
[65.04663849 67.12448120]
[54.80194473 56.16791916]
[44.55725098 45.21135712]
[34.31255341 34.25479507]
[18.93086433 36.30009460]
[5.30067873 28.88405418]
[-1.33692026 14.85829639]
[1.57036102 -0.38399172]
[12.90461349 -10.98183823]
[28.30758476 -12.86015511]
[41.85652161 -5.29669046]
[48.34157562 8.80024815]
[45.26911545 24.01010132]
[55.51380920 34.96666336]
[65.75850677 45.92322159]
[76.00319672 56.87978363]
[86.24789429 67.83634949]
[100.98371124 65.03353882]
[98.85309601 49.35645294]
[110.72261810 40.35847092]
[116.22949982 26.40590096]
[121.73638916 12.45333099]
[127.24327087 -1.49923909]
[132.75015259 -15.45180893]
[138.25704956 -29.40437889]
[143.76393127 -43.35694885]
[137.24259949 -57.75305176]
[142.88900757 -72.51426697]
[157.35325623 -78.88303375]
[172.05395508 -73.08087158]
[178.26943970 -58.55010605]
[172.31217957 -43.91157532]
[157.71650696 -37.85006332]
[152.20960999 -23.89749336]
[146.70272827 -9.94492340]
[141.19584656 4.00764656]
[135.68896484 17.96021652]
[130.18206787 31.91278648]
[124.67518616 45.86535645]
[127.19969177 60.54446030]
[114.93627930 70.54042816]
[127.07213593 84.27113342]
[129.55438232 101.44623566]
[122.61567688 116.28668976]
[109.49146271 124.36648560]
[110.69846344 139.31784058]
[111.90546417 154.26919556]
[120.72812653 167.40202332]
[114.04003143 180.71063232]
[123.39028168 189.71858215]
[124.02064514 202.28364563]
[116.13915253 211.56767273]
[116.94430542 226.54605103]
[117.74945068 241.52442932]
[118.55460358 256.50280762]
[119.35975647 271.48117065]
[120.16490173 286.45956421]
[120.97005463 301.43792725]
[121.77519989 316.41632080]
[122.58035278 331.39468384]
[132.92837524 337.55712891]
[138.90188599 347.87612915]
[139.08859253 359.67721558]
[133.55873108 369.96731567]
[123.81755829 376.19381714]
[123.81755829 391.19381714]
[123.81755829 406.19381714]
[126.57402802 410.93548584]
[127.08969879 415.76745605]
[125.72740173 419.78890991]
[123.16492462 422.38867188]
[121.95792389 437.34002686]
[120.75093079 452.29138184]
[119.54393005 467.24273682]
[118.33692932 482.19409180]
[131.88305664 489.09127808]
[141.75480652 500.65054321]
[146.44680786 515.10925293]
[145.24357605 530.26245117]
[138.32858276 543.79949951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 111]
[10 110]
[11 109]
[12 108]
[13 107]
[14 103]
[15 102]
[16 101]
[19 96]
[20 95]
[21 94]
[22 93]
[23 92]
[24 91]
[25 90]
[26 89]
[27 88]
[29 85]
[31 83]
[32 82]
[33 81]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[54 77]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
