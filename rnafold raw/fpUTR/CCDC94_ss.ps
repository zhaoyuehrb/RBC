%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUCCGUCGGAAAAGCUCGAUAAUUACCCAGCCUAACCAUUUCUCAGGUGCUUGCGAGGUGAUCAGAAGGCAAAG\
) } def
/len { sequence length } bind def

/coor [
[107.54512787 193.18185425]
[97.86642456 181.86054993]
[103.28982544 166.99794006]
[100.88365936 152.19218445]
[98.47748566 137.38642883]
[96.07131958 122.58067322]
[88.14267731 119.61441040]
[81.83155823 113.97243500]
[67.60350800 118.72245789]
[53.37546539 123.47247314]
[39.14741898 128.22248840]
[24.91937065 132.97251892]
[18.08315086 147.22178650]
[3.14595795 152.38470459]
[-11.03023720 145.39822388]
[-16.03495026 130.40727234]
[-8.89897251 116.30574036]
[6.14404678 111.45980072]
[20.16934967 118.74446869]
[34.39739609 113.99444580]
[48.62544250 109.24443054]
[62.85348892 104.49440765]
[77.08153534 99.74439240]
[85.14984894 82.54164124]
[103.42407990 77.33732605]
[110.39492798 64.05548096]
[117.36577606 50.77363968]
[124.33662415 37.49180222]
[131.30746460 24.20996094]
[138.27832031 10.92812061]
[133.80549622 -3.99272346]
[141.06413269 -17.36309624]
[155.31643677 -21.53530121]
[162.28727722 -34.81714249]
[154.59622192 -49.73150635]
[157.18307495 -66.14514923]
[168.85520935 -77.73925781]
[184.96067810 -80.16689301]
[191.39106750 -93.71865082]
[197.82145691 -107.27040100]
[190.27195740 -120.82712555]
[192.16615295 -136.22814941]
[202.77568054 -147.55148315]
[218.02095032 -150.44303894]
[232.03987122 -143.79098511]
[239.44184875 -130.15316772]
[237.38069153 -114.77359009]
[226.64895630 -103.56603241]
[211.37321472 -100.84001923]
[204.94282532 -87.28826141]
[198.51243591 -73.73650360]
[206.02479553 -62.51600647]
[206.94862366 -48.93507004]
[200.92916870 -36.60440063]
[189.47225952 -28.85674667]
[175.56912231 -27.84629250]
[168.59828186 -14.56445312]
[173.26084900 -0.46495050]
[166.38063049 13.10402679]
[151.56015015 17.89896774]
[144.58930969 31.18080902]
[137.61846924 44.46265030]
[130.64761353 57.74448776]
[123.67676544 71.02632904]
[116.70591736 84.30816650]
[122.68278503 96.71174622]
[120.47415924 110.30194092]
[110.87707520 120.17449951]
[113.28324127 134.98025513]
[115.68941498 149.78601074]
[118.09558105 164.59176636]
[127.94638824 176.97207642]
[122.35088348 190.77568054]
[134.47500610 201.28211975]
[133.67607117 217.30526733]
[120.56695557 226.55354309]
[105.20384216 221.93244934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[3 71]
[4 70]
[5 69]
[6 68]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[33 57]
[34 56]
[38 51]
[39 50]
[40 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
