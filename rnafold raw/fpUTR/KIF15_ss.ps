%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCUCCAUGCGGGCGUCAACGUCCGAUCCAAGCGCCAAAUUCAAAUUUGCGGCCAUCUUGAGCGGGCGGAAUUCAGUCGCGCGCGGUGCAGUCGGGAGGUGGAGGCACCGGCUGCAUUGUUUUCGGGAUCGAGGGGUGAGGGCGCU\
) } def
/len { sequence length } bind def

/coor [
[99.19308472 260.44104004]
[98.87894440 245.44433594]
[98.56481171 230.44763184]
[90.56266785 217.88517761]
[98.00926208 203.92599487]
[97.69512939 188.92929077]
[97.38098907 173.93257141]
[97.06685638 158.93586731]
[96.59569550 143.94326782]
[90.52970886 141.62695312]
[85.06005096 138.50984192]
[80.28643799 134.71511841]
[76.28562927 130.37728882]
[64.93070221 140.17860413]
[53.57577515 149.97990417]
[42.22085190 159.78121948]
[30.86592484 169.58253479]
[19.51099968 179.38383484]
[14.63179111 195.04031372]
[-1.42398834 198.37858582]
[-12.13952923 185.96450806]
[-6.49160194 170.56863403]
[9.70969009 168.02891541]
[21.06461525 158.22760010]
[32.41954041 148.42630005]
[43.77446747 138.62498474]
[55.12939453 128.82366943]
[66.48432159 119.02236176]
[63.55949402 112.53956604]
[61.87575912 105.62969971]
[61.49045944 98.52809143]
[62.41671753 91.47661591]
[48.71353531 85.37556458]
[35.01035309 79.27451324]
[21.30717087 73.17346954]
[1.42779350 76.24234772]
[-9.36217499 60.24323654]
[-23.30882263 54.72136688]
[-37.25547028 49.19950104]
[-47.80883789 60.14001465]
[-61.74762726 66.20455170]
[-76.94627380 66.46830750]
[-91.08709717 60.89106750]
[-102.01371765 50.32331467]
[-108.05991364 36.37656021]
[-108.30367279 21.17757988]
[-102.70783997 7.04410744]
[-92.12572479 -3.86860442]
[-78.17102814 -9.89644718]
[-62.97173691 -10.12021732]
[-48.84563828 -4.50579262]
[-37.94685745 6.09066820]
[-31.93737793 20.05328178]
[-31.73360062 35.25285339]
[-17.78695297 40.77471924]
[-3.84030652 46.29658890]
[5.21084261 41.38266373]
[15.68869781 42.31699753]
[24.07186127 49.03017426]
[27.40822029 59.47028732]
[41.11140442 65.57133484]
[54.81458282 71.67238617]
[68.51776886 77.77343750]
[84.16304779 62.22937012]
[106.99606323 57.19271469]
[107.62419128 42.20587540]
[108.25232697 27.21903229]
[101.09970856 13.10695934]
[109.36318207 0.71485621]
[109.99131775 -14.27198601]
[110.61945343 -29.25882912]
[111.24758911 -44.24567032]
[99.57870483 -54.65581512]
[97.38249969 -70.13841248]
[105.69596100 -83.38304138]
[120.59371948 -88.13600922]
[135.04151917 -82.15309906]
[142.21754456 -68.25926208]
[138.73348999 -53.01474380]
[126.23442841 -43.61753464]
[125.60629272 -28.63069344]
[124.97815704 -13.64385128]
[124.35002899 1.34299099]
[131.54757690 14.38310337]
[123.23917389 27.84716606]
[122.61103821 42.83400726]
[121.98290253 57.82085037]
[134.02516174 66.76422119]
[148.19081116 61.83122635]
[162.35646057 56.89822388]
[176.52209473 51.96522522]
[190.68774414 47.03222656]
[204.85339355 42.09922409]
[219.01904297 37.16622543]
[233.18467712 32.23322678]
[247.35032654 27.30022621]
[261.51596069 22.36722755]
[275.68161011 17.43422699]
[277.36203003 2.26389599]
[285.46548462 -10.67043686]
[298.38299561 -18.80065155]
[313.54983521 -20.51248550]
[327.95455933 -15.46605492]
[338.73712158 -4.66333151]
[343.75665283 9.75079632]
[342.01651001 24.91439247]
[333.86218262 37.81671524]
[320.91275024 45.89599609]
[305.73931885 47.54809189]
[291.35458374 42.44497299]
[280.61462402 31.59987259]
[266.44897461 36.53287125]
[252.28332520 41.46587372]
[238.11767578 46.39887238]
[223.95204163 51.33187103]
[209.78639221 56.26486969]
[195.62074280 61.19787216]
[181.45509338 66.13086700]
[167.28945923 71.06387329]
[153.12380981 75.99687195]
[138.95816040 80.92987061]
[143.54896545 103.92044067]
[135.48928833 126.13639069]
[146.42381287 136.40460205]
[157.35833740 146.67280579]
[168.29287720 156.94100952]
[179.22740173 167.20921326]
[190.16192627 177.47743225]
[206.24266052 180.69335938]
[211.24092102 196.31224060]
[200.01492310 208.26670837]
[184.11302185 204.25901794]
[179.89372253 188.41195679]
[168.95919800 178.14375305]
[158.02465820 167.87554932]
[147.09013367 157.60733032]
[136.15560913 147.33912659]
[125.22107697 137.07092285]
[111.58253479 143.31513977]
[115.08795166 151.82351685]
[112.06356049 158.62173462]
[112.37770081 173.61843872]
[112.69183350 188.61515808]
[113.00597382 203.61186218]
[121.03058624 217.24696350]
[113.56152344 230.13348389]
[113.87565613 245.13020325]
[114.18979645 260.12692261]
[116.78345490 279.33428955]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[5 144]
[6 143]
[7 142]
[8 141]
[9 139]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[32 63]
[33 62]
[34 61]
[35 60]
[37 56]
[38 55]
[39 54]
[65 87]
[66 86]
[67 85]
[69 83]
[70 82]
[71 81]
[72 80]
[88 121]
[89 120]
[90 119]
[91 118]
[92 117]
[93 116]
[94 115]
[95 114]
[96 113]
[97 112]
[98 111]
[123 138]
[124 137]
[125 136]
[126 135]
[127 134]
[128 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
