%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCGCAGUCAGCGAGCCCACGUGCUUGUGUUGACUGGACAACUUCCUGGUGGAAAACCGCGACUCUUGCAAGUGGGCAAACUUGACGUUUUCGCU\
) } def
/len { sequence length } bind def

/coor [
[108.69057465 477.91433716]
[95.82524872 466.87261963]
[102.87398529 451.45343018]
[103.83503723 436.48425293]
[104.79608917 421.51507568]
[105.75714111 406.54586792]
[91.82762146 393.16415405]
[91.93670654 373.55126953]
[106.44754791 359.91799927]
[105.96677399 344.92572021]
[105.48600006 329.93341064]
[105.00522614 314.94113159]
[104.52445221 299.94882202]
[90.70472717 291.25048828]
[84.66942596 275.90002441]
[88.94930267 259.79989624]
[102.06775665 249.26599121]
[101.10669708 234.29681396]
[100.14564514 219.32763672]
[99.18459320 204.35844421]
[98.22354126 189.38926697]
[97.26248932 174.42008972]
[88.72564697 162.21469116]
[95.56286621 147.94714355]
[94.60181427 132.97796631]
[93.64076233 118.00878143]
[82.82932281 108.36206818]
[81.90097809 93.90232086]
[91.39006042 82.95227051]
[82.78447723 69.67617798]
[89.69043732 56.47932816]
[88.72938538 41.51014709]
[87.76833344 26.54096603]
[86.80728149 11.57178497]
[83.07543182 3.02394152]
[86.06316376 -3.89115644]
[82.60720062 -12.55421925]
[85.81503296 -19.37000275]
[85.81503296 -34.37000275]
[76.35512543 -39.97449112]
[70.20727539 -48.99179840]
[68.47259521 -59.68385315]
[71.40952301 -70.02494049]
[78.39801025 -78.08550262]
[88.06889343 -82.39213562]
[89.50923920 -97.32282257]
[90.94958496 -112.25350952]
[92.38993073 -127.18419647]
[85.10326385 -141.87556458]
[94.40712738 -155.38002014]
[110.73049164 -153.80532837]
[117.28128815 -138.77139282]
[107.32061768 -125.74385071]
[105.88027191 -110.81316376]
[104.43992615 -95.88247681]
[102.99958038 -80.95178986]
[116.49304199 -67.13048553]
[115.75538635 -47.53116226]
[100.81503296 -34.37000275]
[100.81503296 -19.37000275]
[101.05545044 -4.37193012]
[101.77645874 10.61073112]
[102.73751068 25.57991219]
[103.69856262 40.54909134]
[104.65962219 55.51827240]
[113.19646454 67.72366333]
[106.35923767 81.99121857]
[117.17067719 91.63793182]
[118.09902191 106.09767914]
[108.60993958 117.04772949]
[109.57099152 132.01690674]
[110.53205109 146.98609924]
[119.13763428 160.26217651]
[112.23166656 173.45903015]
[113.19271851 188.42822266]
[114.15377808 203.39739990]
[115.11483002 218.36657715]
[116.07588196 233.33575439]
[117.03693390 248.30493164]
[129.28488159 254.85513306]
[136.59725952 266.53561401]
[137.13011169 280.19696045]
[130.85050964 292.21853638]
[119.51674652 299.46807861]
[119.99752045 314.46035767]
[120.47829437 329.45263672]
[120.95906830 344.44494629]
[121.43984222 359.43722534]
[131.07452393 364.73562622]
[137.50822449 373.55126953]
[139.58471680 384.18222046]
[136.98074341 394.61212158]
[130.25419617 402.89254761]
[120.72632599 407.50692749]
[119.76527405 422.47610474]
[118.80421448 437.44528198]
[117.84316254 452.41448975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[6 94]
[9 88]
[10 87]
[11 86]
[12 85]
[13 84]
[17 79]
[18 78]
[19 77]
[20 76]
[21 75]
[22 74]
[24 72]
[25 71]
[26 70]
[29 67]
[31 65]
[32 64]
[33 63]
[34 62]
[36 61]
[38 60]
[39 59]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
