%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCAAACAGAGCAGCAGAAAAGGCAGUUCCUCUUCUCCAGUGCCCUCCUUCCCUGUCUCUGCCUCUCCCUCCCUUCCUCAGGCAUCAGAGCGGAGACUUCAGGGAGACCAGAGCCCAGCUUGCCAGGCACUGAGCUAGAAGCCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[19.05511475 340.72726440]
[5.11053133 356.46615601]
[-15.34847164 360.71411133]
[-20.28147125 374.87976074]
[-12.11948109 388.21829224]
[-14.49197578 403.67483521]
[-26.27873421 413.95132446]
[-41.91441345 414.19552612]
[-54.01631927 404.29208374]
[-56.87030411 388.91714478]
[-49.12880325 375.33026123]
[-34.44711685 369.94677734]
[-29.51411629 355.78112793]
[-36.64306641 349.82766724]
[-41.85036469 342.10833740]
[-44.71508789 333.22372437]
[-44.99917221 323.86938477]
[-42.66716003 314.78161621]
[-37.89000320 306.67929077]
[-31.03260994 300.20712280]
[-22.62599754 295.88430786]
[-13.32618237 294.06289673]
[-3.86298490 294.89916992]
[2.80654263 281.46350098]
[9.47607040 268.02780151]
[16.14559746 254.59213257]
[22.81512642 241.15646362]
[17.83574677 227.16569519]
[24.40819931 213.44500732]
[39.11676025 208.31703186]
[37.84535980 193.47679138]
[50.91179276 184.55609131]
[57.58132172 171.12042236]
[64.25084686 157.68473816]
[62.17914200 140.28689575]
[77.52976227 130.17192078]
[83.91645050 116.59951782]
[90.30313873 103.02711487]
[90.62080383 94.91510773]
[96.96833038 89.23949432]
[103.63786316 75.80381775]
[110.30738831 62.36813736]
[116.97691345 48.93246078]
[123.64644623 35.49678421]
[130.31597900 22.06110954]
[120.17748260 11.88894653]
[113.69455719 -0.90232801]
[111.49188995 -15.05072975]
[113.77261353 -29.16498756]
[120.29964447 -41.86135101]
[130.42027283 -51.89925385]
[143.13139343 -58.30252457]
[157.17892456 -60.45430374]
[171.18151855 -58.15646362]
[178.13095093 -71.44951630]
[185.08039856 -84.74256897]
[183.85629272 -103.08529663]
[198.96675110 -111.95384216]
[205.63629150 -125.38951874]
[212.30581665 -138.82519531]
[218.97534180 -152.26087952]
[225.64486694 -165.69654846]
[222.27542114 -178.19160461]
[228.15888977 -189.26535034]
[239.63967896 -193.20515442]
[246.58911133 -206.49821472]
[253.53855896 -219.79125977]
[260.48800659 -233.08432007]
[267.43743896 -246.37736511]
[274.38687134 -259.67041016]
[281.33630371 -272.96347046]
[274.27426147 -291.70690918]
[283.04260254 -309.37832642]
[301.66024780 -314.91937256]
[307.76129150 -328.62252808]
[313.86233521 -342.32571411]
[319.96337891 -356.02890015]
[325.92059326 -369.79522705]
[331.73333740 -383.62316895]
[337.54608154 -397.45111084]
[329.39291382 -410.65359497]
[330.59069824 -426.12438965]
[340.67880249 -437.91461182]
[355.77816772 -441.49072266]
[370.08279419 -435.47763062]
[378.09222412 -422.18746948]
[376.72671509 -406.73059082]
[366.51129150 -395.05047607]
[351.37402344 -391.63839722]
[345.56127930 -377.81042480]
[339.74856567 -363.98248291]
[340.05795288 -356.54830933]
[333.66656494 -349.92785645]
[327.56552124 -336.22467041]
[321.46447754 -322.52148438]
[315.36340332 -308.81829834]
[321.54806519 -300.48382568]
[323.69769287 -290.24746704]
[321.35195923 -279.97103882]
[314.87463379 -271.55270386]
[305.39883423 -266.57638550]
[294.62936401 -266.01403809]
[287.67993164 -252.72097778]
[280.73049927 -239.42793274]
[273.78103638 -226.13487244]
[266.83160400 -212.84182739]
[259.88217163 -199.54876709]
[252.93272400 -186.25570679]
[254.63963318 -168.81829834]
[239.08055115 -159.02702332]
[232.41101074 -145.59135437]
[225.74148560 -132.15567017]
[219.07196045 -118.71999359]
[212.40243530 -105.28431702]
[215.96330261 -93.68041992]
[210.46266174 -82.41159821]
[198.37344360 -77.79312897]
[191.42401123 -64.50007629]
[184.47456360 -51.20702362]
[195.22084045 -39.74179459]
[201.41287231 -25.26993942]
[202.28837585 -9.52658939]
[197.72364807 5.59385967]
[188.25076294 18.26569939]
[174.99554443 26.95235443]
[159.54379272 30.59269714]
[143.75164795 28.73063660]
[137.08212280 42.16631317]
[130.41259766 55.60198975]
[123.74306488 69.03766632]
[117.07353973 82.47334290]
[110.40400696 95.90901947]
[103.87554169 109.41380310]
[97.48885345 122.98620605]
[91.10216522 136.55860901]
[94.73254395 148.98036194]
[89.08228302 160.17489624]
[77.68652344 164.35426331]
[71.01699829 177.78994751]
[64.34747314 191.22561646]
[65.14181519 207.02687073]
[52.55243301 214.98655701]
[57.36063385 229.80273438]
[50.40538788 243.33341980]
[36.25080109 247.82598877]
[29.58127403 261.26165771]
[22.91174698 274.69735718]
[16.24221992 288.13302612]
[9.57269192 301.56869507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[23 149]
[24 148]
[25 147]
[26 146]
[27 145]
[30 142]
[32 140]
[33 139]
[34 138]
[36 135]
[37 134]
[38 133]
[40 132]
[41 131]
[42 130]
[43 129]
[44 128]
[45 127]
[54 119]
[55 118]
[56 117]
[58 114]
[59 113]
[60 112]
[61 111]
[62 110]
[65 108]
[66 107]
[67 106]
[68 105]
[69 104]
[70 103]
[71 102]
[74 96]
[75 95]
[76 94]
[77 93]
[78 91]
[79 90]
[80 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
