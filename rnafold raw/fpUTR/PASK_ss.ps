%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGCUGUGCGAUUGGUCGGUGGGAUAAAAGCGCGGAAGGGCUCCUUUCCGUGGUGUGUAGCCGGCUUGGCGUGACCCUCGCCUGAUCCAGUUGUUAGAGUUGGAAGCUUGGCAGUUGGCCUCCCUUCUUCCC\
) } def
/len { sequence length } bind def

/coor [
[302.61355591 365.92346191]
[301.37112427 359.51074219]
[302.02465820 352.97067261]
[304.54241943 346.85534668]
[295.11172485 335.19079590]
[285.68103027 323.52621460]
[271.66241455 318.49356079]
[269.00289917 302.89749146]
[259.57220459 291.23294067]
[250.00541687 279.67971802]
[240.30386353 268.23944092]
[230.60232544 256.79916382]
[220.90077209 245.35888672]
[211.19921875 233.91860962]
[201.49768066 222.47833252]
[191.79612732 211.03805542]
[181.96113586 199.71228027]
[171.99406433 188.50257874]
[161.89628601 177.41047668]
[151.66915894 166.43750000]
[141.44204712 155.46453857]
[131.21492004 144.49156189]
[120.98780823 133.51860046]
[110.76068878 122.54562378]
[101.59040070 126.13285828]
[91.28975677 125.95807648]
[81.40823364 121.70593262]
[73.55867767 113.69835663]
[69.15696716 102.89126587]
[69.17585754 90.76609802]
[53.41725922 92.17218781]
[44.97568130 79.90071106]
[31.29163551 73.75685883]
[17.60759354 67.61299896]
[3.92354965 61.46914673]
[-9.76049328 55.32529068]
[-23.44453621 49.18143463]
[-37.12858200 43.03757858]
[-50.81262207 36.89372635]
[-64.49666595 30.74987030]
[-80.74749756 32.95044708]
[-90.56324768 19.81335831]
[-83.84631348 4.85291481]
[-67.50650024 3.45913839]
[-58.35280991 17.06582642]
[-44.66876984 23.20968056]
[-30.98472404 29.35353661]
[-17.30068207 35.49739075]
[-3.61663818 41.64124680]
[10.06740475 47.78510284]
[23.75144768 53.92895889]
[37.43549347 60.07281494]
[51.11953354 66.21666718]
[65.89936066 64.37113190]
[75.31971741 77.08205414]
[87.71800995 68.63917542]
[87.01493073 53.65565872]
[74.21417999 45.08553314]
[68.97553253 30.78833580]
[73.11117554 16.31904221]
[84.83359528 7.16902256]
[84.13050842 -7.81449080]
[83.42742920 -22.79800415]
[72.57971954 -34.61776352]
[75.19960022 -50.44545364]
[89.27732849 -58.13942337]
[104.01367188 -51.79751968]
[108.10416412 -36.28470612]
[98.41094208 -23.50108910]
[99.11402893 -8.51757526]
[99.81710815 6.46593857]
[112.34484100 14.47804832]
[117.81724548 28.49649429]
[113.94042206 43.22142792]
[101.99844360 52.95257568]
[102.70152283 67.93608856]
[125.27647400 86.66204834]
[121.73366547 112.31850433]
[131.96078491 123.29148102]
[142.18789673 134.26445007]
[152.41500854 145.23741150]
[162.64213562 156.21038818]
[172.86924744 167.18336487]
[181.09040833 171.37974548]
[183.20376587 178.53550720]
[193.17083740 189.74520874]
[201.29138184 194.13316345]
[203.23640442 201.33650208]
[212.93795776 212.77677917]
[222.63949585 224.21705627]
[232.34104919 235.65733337]
[242.04260254 247.09761047]
[251.74414062 258.53790283]
[261.44570923 269.97817993]
[269.46112061 274.55526733]
[271.23675537 281.80224609]
[280.66744995 293.46679688]
[295.36062622 299.33380127]
[297.34561157 314.09552002]
[306.77627563 325.76010132]
[316.20697021 337.42465210]
[339.91003418 343.42822266]
[344.10531616 366.82220459]
[355.31503296 376.78927612]
[366.52474976 386.75634766]
[377.73443604 396.72341919]
[388.94415283 406.69049072]
[404.01953125 403.52206421]
[417.90759277 409.76504517]
[425.36828613 422.83416748]
[423.72247314 437.61352539]
[434.93218994 447.58059692]
[446.14187622 457.54766846]
[462.17715454 458.04708862]
[471.66876221 470.98110962]
[467.33554077 486.42788696]
[452.50155640 492.53793335]
[438.54620361 484.62420654]
[436.17480469 468.75738525]
[424.96511841 458.79031372]
[413.75540161 448.82324219]
[399.26995850 452.18627930]
[385.41796875 446.30529785]
[377.59353638 433.24267578]
[378.97708130 417.90020752]
[367.76736450 407.93313599]
[356.55767822 397.96606445]
[345.34796143 387.99899292]
[334.13824463 378.03192139]
[328.26788330 380.28475952]
[321.95739746 380.76181030]
[315.73553467 379.39971924]
[310.13043213 376.29013062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 101]
[5 100]
[6 99]
[8 97]
[9 96]
[10 94]
[11 93]
[12 92]
[13 91]
[14 90]
[15 89]
[16 88]
[17 86]
[18 85]
[19 83]
[20 82]
[21 81]
[22 80]
[23 79]
[24 78]
[30 55]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[56 76]
[57 75]
[61 71]
[62 70]
[63 69]
[103 129]
[104 128]
[105 127]
[106 126]
[107 125]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
