%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGGUCCCUGAACCGCGGUAAGGGCGGUGGUGCGGGCGUCCGAAUGGGCGUUUUCUAGAUACGGGGCGCGGACUAGAGGCUCGCUGGGCCCGGAGACCGGCGGACUGGAGUCGGGGAACCGGAGGGCGGCCCCGCUCCCUCUGCUGGCC\
) } def
/len { sequence length } bind def

/coor [
[210.17323303 159.08941650]
[196.43664551 153.06398010]
[182.70004272 147.03854370]
[168.96343994 141.01312256]
[155.22683716 134.98768616]
[150.47734070 135.88467407]
[145.11947632 133.76272583]
[141.05517578 128.41891479]
[127.57931519 121.83096313]
[114.10345459 115.24301910]
[106.86782837 121.44350433]
[96.93415070 124.07174683]
[86.10771179 121.99620819]
[76.63677216 115.00306702]
[64.25151062 123.46505737]
[51.86625671 131.92704773]
[39.48099518 140.38905334]
[27.09573746 148.85104370]
[20.06602287 163.02473450]
[5.19245148 163.81605530]
[-7.19280767 172.27804565]
[-13.80198765 187.28640747]
[-30.13135338 188.79763794]
[-39.38265228 175.25712585]
[-32.03894424 160.59417725]
[-15.65480232 159.89279175]
[-3.26954293 151.43078613]
[2.87429500 137.86235046]
[18.63374138 136.46578979]
[31.01900101 128.00378418]
[43.40425873 119.54179382]
[55.78952026 111.07980347]
[68.17478180 102.61780548]
[70.49066925 87.79766083]
[61.27748108 75.96055603]
[52.06428909 64.12344360]
[42.85109711 52.28633881]
[33.63790894 40.44923019]
[24.42471695 28.61212349]
[12.12756538 20.02259254]
[-2.15732145 15.44634724]
[-16.44220734 10.87010193]
[-30.72709465 6.29385662]
[-46.63023758 10.29660797]
[-57.85252380 -1.66133463]
[-52.84942245 -17.27866554]
[-36.76769638 -20.48961258]
[-26.15084839 -7.99102974]
[-11.86596298 -3.41478467]
[2.41892362 1.16146040]
[16.70380974 5.73770523]
[21.89637566 0.32593450]
[17.71517944 -14.07953644]
[32.28150558 -10.49760723]
[37.47407150 -15.90937805]
[32.31141281 -29.99294853]
[27.14875412 -44.07651901]
[21.98609543 -58.16009140]
[16.82343864 -72.24365997]
[11.66077900 -86.32723236]
[-1.16370964 -90.56586456]
[-9.07356262 -101.27280426]
[-9.34818459 -114.38676453]
[-2.11176753 -125.09230804]
[-6.98225975 -139.27957153]
[-20.70568085 -147.58903503]
[-22.62251282 -163.51716614]
[-11.26232624 -174.84526062]
[4.66031647 -172.88337708]
[12.93092632 -159.13648987]
[7.20499897 -144.15005493]
[12.07549095 -129.96279907]
[27.46766472 -123.25745392]
[33.39305878 -107.18892670]
[25.74435043 -91.48989105]
[30.90700912 -77.40631866]
[36.06966782 -63.32275009]
[41.23232651 -49.23917770]
[46.39498520 -35.15560913]
[51.55764389 -21.07203674]
[36.26182556 19.39893341]
[45.47501373 31.23604012]
[54.68820572 43.07314682]
[63.90139771 54.91025543]
[73.11458588 66.74736023]
[82.32777405 78.58447266]
[111.27091980 78.51012421]
[120.69139862 101.76715088]
[134.16726685 108.35510254]
[147.64312744 114.94304657]
[161.25227356 121.25108337]
[174.98887634 127.27651978]
[188.72546387 133.30195618]
[202.46206665 139.32737732]
[216.19866943 145.35281372]
[229.56278992 137.69079590]
[244.69909668 139.34779358]
[255.82572937 149.48002625]
[258.81674194 164.04682922]
[272.55334473 170.07226562]
[286.28994751 176.09768677]
[300.02651978 182.12312317]
[313.76312256 188.14855957]
[327.49972534 194.17398071]
[341.23632812 200.19941711]
[354.97293091 206.22485352]
[367.29229736 202.26736450]
[378.63134766 207.61721802]
[383.11264038 218.89564514]
[396.72177124 225.20367432]
[410.33090210 231.51171875]
[423.94003296 237.81974792]
[433.10586548 238.60150146]
[437.76318359 244.40136719]
[451.23904419 250.98931885]
[464.71490479 257.57727051]
[478.19076538 264.16522217]
[491.66662598 270.75317383]
[498.38000488 270.67822266]
[503.34539795 273.60299683]
[505.55474854 277.90197754]
[518.74682617 285.04116821]
[531.93896484 292.18038940]
[547.66345215 288.99923706]
[559.86151123 299.41970825]
[559.17590332 315.44808960]
[546.13244629 324.78881836]
[530.73706055 320.27642822]
[524.79974365 305.37249756]
[511.60763550 298.23327637]
[498.41552734 291.09405518]
[485.07870483 284.22903442]
[471.60281372 277.64108276]
[458.12695312 271.05313110]
[444.65109253 264.46517944]
[431.17523193 257.87722778]
[417.63201904 251.42889404]
[404.02285767 245.12084961]
[390.41372681 238.81282043]
[376.80459595 232.50477600]
[359.46685791 235.03953552]
[348.94750977 219.96144104]
[335.21090698 213.93601990]
[321.47430420 207.91058350]
[307.73770142 201.88514709]
[294.00109863 195.85972595]
[280.26449585 189.83428955]
[266.52789307 183.80885315]
[252.79130554 177.78343201]
[240.04840088 185.44869995]
[225.05801392 184.12493896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[5 91]
[8 90]
[9 89]
[10 88]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[20 27]
[21 26]
[34 86]
[35 85]
[36 84]
[37 83]
[38 82]
[39 81]
[40 51]
[41 50]
[42 49]
[43 48]
[55 80]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[64 72]
[65 71]
[99 149]
[100 148]
[101 147]
[102 146]
[103 145]
[104 144]
[105 143]
[106 142]
[109 140]
[110 139]
[111 138]
[112 137]
[114 136]
[115 135]
[116 134]
[117 133]
[118 132]
[121 131]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
