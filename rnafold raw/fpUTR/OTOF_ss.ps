%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGGAGGGGGGUCGGGAGGAGGAGGAGGAGGCAGCGGCAGAGAAGAGAGAGGCGUGUGAGCCGUGCUCCACCGGCUAGCUCCUUCCCGCUGCUCCUGCCUGGCAGUGCCAGGCAGCCCACACCAGC\
) } def
/len { sequence length } bind def

/coor [
[99.41803741 261.43109131]
[84.10076141 260.30123901]
[71.40957642 251.65083313]
[64.75834656 237.80680847]
[65.93622589 222.49314880]
[74.62636566 209.82914734]
[88.49115753 203.22134399]
[89.59462738 188.26199341]
[90.51443481 173.29022217]
[91.06654358 158.30038452]
[91.43466187 143.30490112]
[91.80278015 128.30941772]
[92.17089844 113.31393433]
[83.34808350 94.07598114]
[103.01386261 80.32618713]
[97.27361298 66.46799469]
[91.53335571 52.60980225]
[85.79310608 38.75160980]
[80.05285645 24.89341545]
[67.62342834 15.10465527]
[69.90124512 0.38525277]
[64.16098785 -13.47294044]
[52.50947571 -19.16383553]
[48.04357529 -30.90817833]
[52.66522980 -42.15842438]
[47.26680756 -56.15331650]
[41.19591904 -63.12247467]
[41.91225815 -70.55847931]
[36.85890961 -84.68164062]
[31.80556107 -98.80480194]
[26.75221443 -112.92796326]
[21.69886589 -127.05112457]
[15.80083656 -134.16717529]
[16.69944954 -141.58335876]
[11.99422359 -155.82627869]
[7.28899717 -170.06919861]
[2.40934300 -184.25331116]
[-2.64400482 -198.37646484]
[-7.69735241 -212.49963379]
[-19.63150024 -222.88648987]
[-16.63418007 -237.47639465]
[-22.53220749 -244.59243774]
[-21.63359642 -252.00862122]
[-35.47053909 -259.16241455]
[-40.03940964 -273.67379761]
[-33.13409042 -286.82110596]
[-37.83931732 -301.06402588]
[-42.54454422 -315.30694580]
[-57.17797470 -320.12036133]
[-66.06729889 -332.48294067]
[-65.97367859 -347.53137207]
[-57.14259720 -359.49591064]
[-61.84782410 -373.73883057]
[-66.55304718 -387.98175049]
[-80.78073883 -394.86276245]
[-85.89663696 -409.81613159]
[-78.86557007 -423.97027588]
[-63.85895538 -428.92779541]
[-49.77994156 -421.74746704]
[-44.98136139 -406.68930054]
[-52.31012726 -392.68698120]
[-47.60490036 -378.44406128]
[-42.89967346 -364.20114136]
[-28.67921829 -359.85180664]
[-19.63968468 -347.82055664]
[-19.41528130 -332.59548950]
[-28.30162048 -320.01217651]
[-23.59639359 -305.76925659]
[-18.89116669 -291.52633667]
[-5.51290989 -285.07980347]
[-0.53824562 -270.70248413]
[-7.39067268 -256.71383667]
[-2.51101851 -242.52973938]
[9.06167984 -233.15306091]
[6.42580843 -217.55297852]
[11.47915649 -203.42982483]
[16.53250313 -189.30665588]
[21.80359268 -184.01298523]
[21.53191948 -174.77442932]
[26.23714638 -160.53150940]
[30.94237137 -146.28857422]
[35.82202530 -132.10447693]
[40.87537384 -117.98130798]
[45.92872238 -103.85814667]
[50.98207092 -89.73498535]
[56.03541946 -75.61182404]
[61.26169968 -61.55174255]
[66.66012573 -47.55685043]
[80.88273621 -37.35376740]
[78.01918030 -19.21319199]
[83.75943756 -5.35499859]
[95.77828217 3.44253063]
[93.91104889 19.15316391]
[99.65129852 33.01135635]
[105.39154816 46.86954880]
[111.13180542 60.72774124]
[116.87205505 74.58593750]
[126.94544220 85.70020294]
[140.17425537 92.77115631]
[153.40307617 99.84210205]
[166.63189697 106.91305542]
[179.86071777 113.98400879]
[193.08953857 121.05495453]
[206.31835938 128.12591553]
[223.13745117 130.26002502]
[225.74272156 147.01260376]
[210.36604309 154.15364075]
[199.24740601 141.35472107]
[186.01858521 134.28378296]
[172.78976440 127.21282959]
[159.56094360 120.14187622]
[146.33212280 113.07092285]
[133.10330200 105.99996948]
[119.87448883 98.92902374]
[115.36230469 108.73957062]
[107.16638184 113.68205261]
[106.79826355 128.67753601]
[106.43014526 143.67301941]
[106.06202698 158.66850281]
[109.00381470 167.43038940]
[105.49636841 174.02622986]
[108.22224426 182.85768127]
[104.55398560 189.36546326]
[103.45051575 204.32481384]
[116.19567871 212.89549255]
[122.93356323 226.69752502]
[121.85171509 242.01828003]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 124]
[8 123]
[9 121]
[10 119]
[11 118]
[12 117]
[13 116]
[15 97]
[16 96]
[17 95]
[18 94]
[19 93]
[21 91]
[22 90]
[25 88]
[26 87]
[28 86]
[29 85]
[30 84]
[31 83]
[32 82]
[34 81]
[35 80]
[36 79]
[37 77]
[38 76]
[39 75]
[41 73]
[43 72]
[46 69]
[47 68]
[48 67]
[52 63]
[53 62]
[54 61]
[98 114]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
