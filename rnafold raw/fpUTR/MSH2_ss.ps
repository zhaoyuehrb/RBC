%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCUGAUUGGGUGUGGUCGCCGUGGCCGGACGCCGCUCGGGGGACGUGGGAGGGGAGGCGGGAAACAGCUUAGUGGGUGUGGGGUCGCGCAUUUUCUUCAACCAGGAGGUGAGGAGGUUUCGAC\
) } def
/len { sequence length } bind def

/coor [
[266.10031128 216.99205017]
[253.76649475 204.04125977]
[251.57287598 186.13505554]
[238.22479248 179.29190063]
[224.87672424 172.44874573]
[210.02124023 173.52763367]
[201.27069092 160.34663391]
[187.92262268 153.50347900]
[174.57453918 146.66032410]
[161.22647095 139.81715393]
[147.87838745 132.97399902]
[134.53031921 126.13083649]
[121.18223572 119.28768158]
[108.73420715 127.28397369]
[93.95663452 128.00320435]
[80.79091644 121.25353241]
[72.74856567 108.83521271]
[71.97460938 94.06040192]
[58.62652969 87.21723938]
[49.45211029 86.06148529]
[45.03414917 80.03345490]
[31.86082458 72.85964966]
[18.68750000 65.68583679]
[5.51417685 58.51202774]
[-9.47353649 62.75539780]
[-22.73096657 55.29247665]
[-26.68400764 40.97782898]
[-39.85733032 33.80401993]
[-51.45314026 41.73301697]
[-65.27174377 43.85842133]
[-78.58724976 39.81904602]
[-88.79808807 30.46408653]
[-93.93524170 17.67535210]
[-93.04186249 3.98891401]
[-106.03224182 -3.51108599]
[-119.02262115 -11.01108646]
[-132.01300049 -18.51108551]
[-145.09587097 -25.84856033]
[-158.26919556 -33.02236938]
[-174.64083862 -32.07283401]
[-183.42164612 -45.92308426]
[-175.57868958 -60.32516861]
[-159.18011475 -60.46345901]
[-151.09538269 -46.19569397]
[-137.92205811 -39.02188492]
[-130.46141052 -38.58116913]
[-124.51300812 -31.50146675]
[-111.52262115 -24.00146675]
[-98.53224182 -16.50146675]
[-85.54186249 -9.00146675]
[-71.80221558 -17.40987587]
[-55.60447311 -17.77564430]
[-41.33550262 -9.90569878]
[-32.90705490 4.14980459]
[-32.68352127 20.63069725]
[-19.51019859 27.80450630]
[-5.34081745 23.35880661]
[8.12099934 30.44641113]
[12.68798637 45.33870316]
[25.86131096 52.51251221]
[39.03463364 59.68632126]
[52.20795822 66.86013031]
[65.46968842 73.86916351]
[78.81776428 80.71231842]
[91.26579285 72.71602631]
[106.04336548 71.99679565]
[119.20908356 78.74646759]
[127.25143433 91.16478729]
[128.02539062 105.93959808]
[141.37347412 112.78276062]
[154.72154236 119.62592316]
[168.06962585 126.46907806]
[181.41770935 133.31224060]
[194.76577759 140.15539551]
[208.11386108 146.99856567]
[223.92408752 146.40913391]
[231.71987915 159.10066223]
[245.06796265 165.94381714]
[258.41604614 172.78698730]
[268.83724976 165.65902710]
[281.23559570 163.69369507]
[293.21099854 167.20846558]
[302.47219849 175.46603394]
[307.27505493 186.82797241]
[306.75085449 199.07951355]
[319.74124146 206.57951355]
[332.73162842 214.07951355]
[345.72201538 221.57951355]
[356.48556519 214.97987366]
[368.96646118 213.63499451]
[380.75177002 217.74232483]
[389.58984375 226.45124817]
[393.82037354 238.03846741]
[392.68615723 250.24865723]
[405.28656006 258.38684082]
[417.88693237 266.52505493]
[430.48733521 274.66323853]
[443.08770752 282.80142212]
[455.68811035 290.93963623]
[468.28848267 299.07781982]
[480.88888550 307.21600342]
[489.90264893 309.27947998]
[493.69845581 315.71746826]
[506.09204102 324.16726685]
[522.47686768 324.85253906]
[529.83502197 339.50823975]
[520.59704590 353.05786133]
[504.26617432 351.56268311]
[497.64224243 336.56085205]
[485.24865723 328.11105347]
[472.75070190 319.81640625]
[460.15029907 311.67819214]
[447.54992676 303.54000854]
[434.94952393 295.40182495]
[422.34912109 287.26361084]
[409.74874878 279.12542725]
[397.14834595 270.98724365]
[384.54797363 262.84902954]
[368.49224854 269.99118042]
[351.19326782 266.11267090]
[339.52032471 252.56317139]
[338.22201538 234.56990051]
[325.23162842 227.06990051]
[312.24124146 219.56990051]
[299.25085449 212.06990051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 79]
[4 78]
[5 77]
[7 75]
[8 74]
[9 73]
[10 72]
[11 71]
[12 70]
[13 69]
[18 64]
[19 63]
[21 62]
[22 61]
[23 60]
[24 59]
[27 56]
[28 55]
[34 50]
[35 49]
[36 48]
[37 47]
[38 45]
[39 44]
[85 125]
[86 124]
[87 123]
[88 122]
[94 118]
[95 117]
[96 116]
[97 115]
[98 114]
[99 113]
[100 112]
[101 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
