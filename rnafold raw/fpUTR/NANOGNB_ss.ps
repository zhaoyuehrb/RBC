%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUACCUUAUCUGGUCGGUCAUCUCUGUAACCUCCCUACCAAGGACUAAUUGGUCUUUAAAACUCCUCA\
) } def
/len { sequence length } bind def

/coor [
[35.11271667 157.83389282]
[23.09556389 166.81097412]
[11.07841206 175.78805542]
[4.65305328 190.24577332]
[-10.17387772 191.66400146]
[-22.19103050 200.64108276]
[-34.20818329 209.61816406]
[-36.22476578 225.29327393]
[-48.78556061 234.88504028]
[-64.43846893 232.70283508]
[-73.89690399 220.04133606]
[-71.54933167 204.41236877]
[-58.78853607 195.08833313]
[-43.18526840 197.60101318]
[-31.16811371 188.62393188]
[-19.15096283 179.64685059]
[-13.58515167 165.83123779]
[2.10132694 163.77090454]
[14.11847973 154.79382324]
[26.13563156 145.81674194]
[20.01424789 134.02053833]
[15.76274681 121.42903137]
[13.48052216 108.33655548]
[13.22092628 95.04919434]
[14.99002647 81.87756348]
[18.74646759 69.12960052]
[24.40242958 57.10331345]
[31.82569122 46.07985687]
[40.84271240 36.31692886]
[51.24269867 28.04276466]
[62.78251648 21.45079803]
[75.19239807 16.69513130]
[88.18222046 13.88694477]
[101.44831848 13.09188461]
[114.68055725 14.32853794]
[127.56959534 17.56799507]
[139.81411743 22.73452568]
[151.12788391 29.70734596]
[161.24639893 38.32344818]
[169.93310547 48.38140869]
[176.98493958 59.64609146]
[182.23703003 71.85416412]
[196.79502869 68.23964691]
[211.35302734 64.62512970]
[225.91102600 61.01061249]
[240.46902466 57.39609909]
[255.02702332 53.78158188]
[269.58502197 50.16706848]
[281.01086426 38.40346909]
[296.84295654 42.67854309]
[300.79464722 58.59445953]
[288.80072021 69.77828979]
[273.19952393 64.72506714]
[258.64154053 68.33957672]
[244.08354187 71.95409393]
[229.52554321 75.56861115]
[214.96754456 79.18312836]
[200.40954590 82.79764557]
[185.85154724 86.41215515]
[186.84796143 103.54251862]
[184.45968628 120.53481293]
[178.77981567 136.72682190]
[170.02969360 151.48748779]
[158.55032349 164.24156189]
[144.78910828 174.49197388]
[129.28234863 181.83924866]
[112.63438416 185.99703979]
[95.49402618 186.80331421]
[78.52927399 184.22663879]
[62.40129089 178.36743164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[5 16]
[6 15]
[7 14]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
