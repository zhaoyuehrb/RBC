%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAACUCGAGGCGGGGCUGCUGGGUCUUCCAGGAGCGCCCAGACGCGGGCAGGUGGCCGCCGGUGGCCACAGGCCUGGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[117.10163116 140.04986572]
[109.46870422 142.50648499]
[101.51475525 143.52198792]
[93.50946045 143.06193542]
[85.72420502 141.14195251]
[78.42295837 137.82710266]
[71.85324097 133.22978210]
[66.23780060 127.50585175]
[61.76701355 120.84938049]
[58.59246063 113.48604584]
[56.82176208 105.66548920]
[56.51495743 97.65285492]
[57.68244934 89.71978760]
[43.93401337 83.72141266]
[30.18557930 77.72303009]
[16.32738686 71.98278046]
[2.36428094 66.50266266]
[-11.59882545 61.02254868]
[-27.27179718 63.18322754]
[-36.29252625 51.33098602]
[-50.25563431 45.85086823]
[-64.21874237 40.37075424]
[-78.18184662 34.89063644]
[-93.40211487 39.96240997]
[-106.77805328 31.10442924]
[-108.04878998 15.11178112]
[-96.23950958 4.25265646]
[-80.40930176 6.85724592]
[-72.70172882 20.92753220]
[-58.73862457 26.40764809]
[-44.77551651 31.88776207]
[-30.81241226 37.36787796]
[-16.13817406 34.81522369]
[-6.11871004 47.05944061]
[7.84439611 52.53955841]
[21.80750275 58.01967239]
[29.36859131 57.51945496]
[36.18395996 63.97459793]
[49.93239594 69.97297668]
[63.68082809 75.97135925]
[82.30809784 60.20735550]
[106.49053955 56.93805695]
[128.63499451 67.19001007]
[141.78817749 87.74414825]
[154.63528442 78.51036835]
[168.14881897 84.77401733]
[183.05450439 83.09455109]
[197.96018982 81.41507721]
[212.86587524 79.73561096]
[227.77156067 78.05614471]
[237.61488342 65.98358154]
[252.75527954 64.49269867]
[264.20397949 73.95120239]
[279.10964966 72.27172852]
[294.01531982 70.59226227]
[308.92102051 68.91279602]
[323.82669067 67.23332977]
[338.73239136 65.55386353]
[348.38900757 53.04285812]
[364.07434082 51.10739899]
[376.48254395 60.89575195]
[378.25207520 76.60066986]
[368.33306885 88.90469360]
[352.61032104 90.50807190]
[340.41186523 80.45954895]
[325.50616455 82.13901520]
[310.60049438 83.81848145]
[295.69479370 85.49794769]
[280.78912354 87.17741394]
[265.88342285 88.85688019]
[256.82650757 100.62580872]
[241.73394775 102.54136658]
[229.45101929 92.96183014]
[214.54534912 94.64129639]
[199.63966370 96.32076263]
[184.73397827 98.00022888]
[169.82829285 99.67969513]
[158.04734802 108.79335022]
[143.46765137 102.64982605]
[142.24494934 110.57456970]
[139.59001160 118.14080048]
[135.59283447 125.09198761]
[130.38893127 131.19247437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 40]
[14 39]
[15 38]
[16 36]
[17 35]
[18 34]
[20 32]
[21 31]
[22 30]
[23 29]
[44 79]
[46 77]
[47 76]
[48 75]
[49 74]
[50 73]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
