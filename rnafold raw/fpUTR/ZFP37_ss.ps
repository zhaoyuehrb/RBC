%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGCUGAGUGUUUGCCAAGAUGGCCGCGCCCGUGCGCUAUUACCGAAGGGCGCCGCCAUCGCGGCUGCCGGACCCGCUAAGGCCGCCCUCCGGGUAGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[103.95957184 142.04095459]
[91.50054169 133.68795776]
[91.09434509 118.69338989]
[82.57337189 131.03814697]
[74.05239868 143.38290405]
[80.09008026 157.57974243]
[77.47138214 172.78321838]
[67.03193665 184.14198303]
[52.10292816 188.03149414]
[37.44814682 183.21060181]
[27.74388313 171.21765137]
[26.08673096 155.87954712]
[33.00548172 142.09062195]
[46.29238510 134.25086975]
[61.70764160 134.86193848]
[70.22861481 122.51717377]
[78.74958801 110.17241669]
[81.78366852 103.94796753]
[86.28383636 99.73105621]
[91.48092651 97.80078888]
[81.87773132 86.27782440]
[72.27454376 74.75485992]
[62.67134857 63.23189545]
[53.06815720 51.70893097]
[43.46496582 40.18597031]
[28.68614197 34.53822708]
[26.48175430 19.80764961]
[16.87856102 8.28468609]
[7.27536917 -3.23827720]
[-2.32782364 -14.76124096]
[-11.93101597 -26.28420448]
[-21.53420830 -37.80716705]
[-35.09947968 -37.49096298]
[-46.17817307 -44.98154068]
[-50.80105972 -57.32176971]
[-47.47100067 -69.86951447]
[-56.72178650 -81.67726135]
[-72.35558319 -82.02116394]
[-84.07656097 -92.37261963]
[-86.35043335 -107.84400177]
[-78.10353851 -121.13018799]
[-63.22980881 -125.95784760]
[-48.75217438 -120.04751587]
[-41.50652313 -106.18985748]
[-44.91403198 -90.92804718]
[-35.66324997 -79.12029266]
[-18.96861458 -77.86377716]
[-8.07167625 -64.71488953]
[-10.01124477 -47.41036224]
[-0.40805256 -35.88739777]
[9.19513988 -24.36443329]
[18.79833221 -12.84146976]
[28.40152550 -1.31850612]
[38.00471878 10.20445728]
[52.09665680 15.02799797]
[54.98792648 30.58277512]
[64.59111786 42.10573959]
[74.19431305 53.62870407]
[83.79750824 65.15166473]
[93.40069580 76.67462921]
[103.00389099 88.19759369]
[115.72194672 96.15065002]
[130.28607178 99.74038696]
[144.85020447 103.33012390]
[159.41432190 106.91986084]
[173.97845459 110.50959015]
[188.54258728 114.09932709]
[203.10670471 117.68906403]
[217.67083740 121.27880096]
[232.23495483 124.86853027]
[246.85163879 128.23789978]
[261.51754761 131.38610840]
[276.18344116 134.53433228]
[294.90472412 127.36711121]
[308.88687134 140.57865906]
[323.69412231 135.00588989]
[335.11230469 144.57009888]
[349.94152832 146.82707214]
[365.01040649 140.35704041]
[377.98431396 150.38746643]
[375.51681519 166.59991455]
[360.14627075 172.31640625]
[347.68457031 161.65629578]
[332.85534668 159.39933777]
[319.10876465 165.13354492]
[306.62988281 155.40789795]
[298.80560303 162.29319763]
[288.25134277 163.67349243]
[278.52239990 158.83473206]
[273.03524780 149.20022583]
[258.36932373 146.05201721]
[243.70343018 142.90379333]
[236.38110352 144.60574341]
[228.64523315 139.43266296]
[214.08110046 135.84292603]
[199.51696777 132.25318909]
[184.95285034 128.66345215]
[170.38871765 125.07372284]
[155.82458496 121.48398590]
[141.26046753 117.89424896]
[126.69633484 114.30451202]
[112.13220978 110.71478271]
[121.77138519 122.20765686]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 15]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[36 46]
[37 45]
[62 102]
[63 101]
[64 100]
[65 99]
[66 98]
[67 97]
[68 96]
[69 95]
[70 94]
[71 92]
[72 91]
[73 90]
[75 86]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
