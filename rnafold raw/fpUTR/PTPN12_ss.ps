%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAACGAGCUGGGGAAGACGGAGCGGGCUCUGUGCCGGGCGGGCGGGCGGCGGGGGGGCCAGCGACCGCAGCCGGGGGGACGCGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[55.80006790 140.15061951]
[42.04190063 146.12663269]
[28.28372955 152.10266113]
[14.52556133 158.07867432]
[8.65453529 172.50672913]
[-5.38333607 178.37126160]
[-19.10210228 172.68522644]
[-32.86027145 178.66123962]
[-38.73129654 193.08929443]
[-52.76916885 198.95384216]
[-66.48793030 193.26779175]
[-80.24610138 199.24382019]
[-94.00427246 205.21983337]
[-98.27751923 220.26222229]
[-111.24901581 228.99572754]
[-126.79402161 227.29667664]
[-137.57266235 215.96728516]
[-138.49559021 200.35696411]
[-129.12702942 187.83642578]
[-113.89052582 184.31747437]
[-99.98028564 191.46165466]
[-86.22212219 185.48564148]
[-72.46395111 179.50962830]
[-67.25572968 165.60243225]
[-53.38811874 159.34591675]
[-38.83628845 164.90307617]
[-25.07811737 158.92706299]
[-19.86989403 145.01986694]
[-6.00228500 138.76333618]
[8.54954433 144.32049561]
[22.30771446 138.34448242]
[36.06588364 132.36846924]
[49.82405472 126.39245605]
[62.77153778 118.81864166]
[74.72361755 109.75509644]
[86.67568970 100.69155121]
[97.98138428 90.83349609]
[108.58798981 80.22689056]
[112.87508392 64.99760437]
[127.34572601 61.46915817]
[137.95233154 50.86255646]
[148.55892944 40.25595474]
[149.37635803 27.24627686]
[158.60603333 18.62236214]
[170.83387756 18.68552017]
[181.79641724 8.44722271]
[192.75895691 -1.79107487]
[203.72149658 -12.02937222]
[214.32810974 -22.63597298]
[224.56640625 -33.59851456]
[234.61604309 -44.73425293]
[244.47409058 -56.03994751]
[254.33215332 -67.34564209]
[253.00370789 -83.09400177]
[263.26382446 -95.11505127]
[279.02536011 -96.27690887]
[290.93725586 -85.89027405]
[291.93240356 -70.11734772]
[281.42041016 -58.31592941]
[265.63784790 -57.48759079]
[255.77978516 -46.18189240]
[245.92173767 -34.87619781]
[243.85586548 -27.61392212]
[235.52894592 -23.36021614]
[225.29063416 -12.39767647]
[224.58055115 -7.47895765]
[220.63442993 -3.02399397]
[213.95979309 -1.06683254]
[202.99725342 9.17146492]
[192.03471375 19.40976143]
[181.07217407 29.64805794]
[176.98353577 46.62094879]
[159.16552734 50.86255646]
[148.55892944 61.46915817]
[137.95233154 72.07575989]
[134.42388916 86.54639435]
[119.19458771 90.83349609]
[108.58798981 101.44009399]
[108.39888763 104.72095490]
[106.90665436 107.99038696]
[104.12055206 110.72412109]
[100.25948334 112.41265869]
[95.73923492 112.64363098]
[83.78716278 121.70717621]
[71.83508301 130.77072144]
[86.42121124 134.26998901]
[95.57324982 146.15443420]
[95.23011017 161.15051270]
[85.54405212 172.60391235]
[70.81313324 175.43234253]
[57.57399750 168.38072205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[7 27]
[8 26]
[11 23]
[12 22]
[13 21]
[34 85]
[35 84]
[36 83]
[37 78]
[38 77]
[40 75]
[41 74]
[42 73]
[45 71]
[46 70]
[47 69]
[48 68]
[49 65]
[50 64]
[51 62]
[52 61]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
