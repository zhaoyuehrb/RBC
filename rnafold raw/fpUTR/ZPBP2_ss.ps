%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGUCCGCUCCCGCCGUUGCGACGGACGGGUAGGGGAGGCGACCCCGGCGUUCUGCUCCGCACUGUGGAGGAGGUGGGGAGGUGUUGGGCCAGGGCUGAGGUAGGAGGGAGUCUGUCCCUCGACGCCUCCUGCGACGCCAGCCCCUGAGCG\
) } def
/len { sequence length } bind def

/coor [
[90.61756134 135.94168091]
[75.65491486 128.05621338]
[63.73910904 137.16738892]
[51.82329941 146.27856445]
[45.56035233 160.80737305]
[30.75024223 162.39164734]
[18.83443642 171.50283813]
[6.91862965 180.61401367]
[0.65567881 195.14280701]
[-14.15442944 196.72709656]
[-26.07023621 205.83827209]
[-37.89249039 215.07051086]
[-49.61996078 224.42286682]
[-61.34743500 233.77520752]
[-73.07490540 243.12754822]
[-84.70637512 252.59902954]
[-96.24063110 262.18865967]
[-107.77489471 271.77828979]
[-119.30915070 281.36791992]
[-124.47708893 296.93145752]
[-140.59185791 299.97219849]
[-151.07597351 287.36206055]
[-145.14427185 272.07330322]
[-128.89877319 269.83364868]
[-117.36451721 260.24401855]
[-105.83026123 250.65440369]
[-94.29599762 241.06477356]
[-91.14425659 234.32962036]
[-82.42725372 231.40008545]
[-70.69978333 222.04772949]
[-58.97230911 212.69538879]
[-47.24483871 203.34304810]
[-43.95635986 196.67358398]
[-35.18141174 193.92247009]
[-23.26560783 184.81127930]
[-17.85495567 170.93417358]
[-2.19254827 168.69819641]
[9.72325802 159.58702087]
[21.63906479 150.47584534]
[27.04971695 136.59873962]
[42.71212387 134.36276245]
[54.62792969 125.25158691]
[66.54373932 116.14040375]
[63.41092300 93.59111023]
[74.02149200 73.44908142]
[65.91188049 60.83027649]
[57.80226517 48.21147156]
[49.69265366 35.59267044]
[41.58304214 22.97386551]
[37.52577972 21.07438278]
[34.61030579 18.24589729]
[32.99014282 14.97410774]
[32.64072418 11.74377918]
[33.37586212 8.97925091]
[26.32178307 -4.25857210]
[19.26770401 -17.49639511]
[5.94953632 -26.03671074]
[6.79259253 -40.90743637]
[-0.26148614 -54.14525986]
[-7.31556463 -67.38308716]
[-14.36964321 -80.62091064]
[-21.42372131 -93.85873413]
[-28.47780037 -107.09655762]
[-41.26252365 -118.23150635]
[-34.10189438 -133.59906006]
[-17.35265160 -130.97242737]
[-15.23997688 -114.15063477]
[-8.18589878 -100.91281128]
[-1.13181973 -87.67498779]
[5.92225885 -74.43716431]
[12.97633743 -61.19934082]
[20.03041649 -47.96151733]
[32.84402847 -40.36806107]
[32.50552750 -24.55047417]
[39.55960464 -11.31265068]
[46.61368561 1.92517269]
[54.20184708 14.86425400]
[62.31145859 27.48305702]
[70.42106628 40.10186005]
[78.53068542 52.72066116]
[86.64029694 65.33946228]
[93.72003937 63.38857651]
[101.04522705 62.86858749]
[108.32956696 63.79982376]
[115.28835297 66.14588928]
[121.64962006 69.81509399]
[127.16474152 74.66403198]
[131.61816406 80.50318909]
[134.83584595 87.10434723]
[136.69201660 94.20951080]
[137.11415100 101.54099274]
[151.66693115 105.17641449]
[166.25604248 108.66321564]
[180.87995911 112.00102997]
[195.50389099 115.33884430]
[210.12780762 118.67665863]
[224.75172424 122.01447296]
[239.40892029 125.20295715]
[254.09788513 128.24176025]
[268.78683472 131.28057861]
[284.88442993 119.35233307]
[304.28506470 122.95666504]
[314.69952393 139.35968018]
[329.54684448 141.49440002]
[344.39416504 143.62911987]
[359.24148560 145.76383972]
[374.08880615 147.89857483]
[388.93612671 150.03329468]
[403.78344727 152.16801453]
[418.63076782 154.30273438]
[429.44238281 147.19725037]
[441.79724121 149.31987000]
[449.13104248 158.98712158]
[463.93173218 161.42425537]
[478.73242188 163.86140442]
[489.67654419 152.86112976]
[505.00161743 150.42776489]
[518.81488037 157.49697876]
[525.80480957 171.35050964]
[523.28363037 186.66140747]
[512.22082520 197.54229736]
[496.87026978 199.80928040]
[483.13452148 192.59063721]
[476.29525757 178.66209412]
[461.49459839 176.22494507]
[446.69390869 173.78781128]
[430.66458130 180.86790466]
[416.49606323 169.15005493]
[401.64874268 167.01533508]
[386.80142212 164.88061523]
[371.95407104 162.74589539]
[357.10675049 160.61116028]
[342.25942993 158.47644043]
[327.41210938 156.34172058]
[312.56478882 154.20700073]
[306.23864746 162.42173767]
[296.98678589 167.27899170]
[286.47070312 167.82994080]
[276.61120605 163.90611267]
[269.23754883 156.16256714]
[265.74804688 145.96954346]
[251.05906677 142.93072510]
[236.37011719 139.89192200]
[229.13926697 141.62707520]
[221.41390991 136.63839722]
[206.78999329 133.30058289]
[192.16607666 129.96276855]
[177.54214478 126.62495422]
[162.91822815 123.28713989]
[155.65350342 124.87444305]
[148.03150940 119.72920990]
[133.47871399 116.09378052]
[122.87299347 129.26876831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 43]
[3 42]
[4 41]
[6 39]
[7 38]
[8 37]
[10 35]
[11 34]
[12 32]
[13 31]
[14 30]
[15 29]
[16 27]
[17 26]
[18 25]
[19 24]
[45 81]
[46 80]
[47 79]
[48 78]
[49 77]
[54 76]
[55 75]
[56 74]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
[91 152]
[92 151]
[93 149]
[94 148]
[95 147]
[96 146]
[97 145]
[98 143]
[99 142]
[100 141]
[103 135]
[104 134]
[105 133]
[106 132]
[107 131]
[108 130]
[109 129]
[110 128]
[113 126]
[114 125]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
