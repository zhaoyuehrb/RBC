%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCACGGCCGGAGUUGGUGGUCUGGGAACCCACGUGGGCUGGGUUUCGGAUUGCUCUGCUGGUCCGGCCGCUGGAGCGCCCACCCUGGCCUAGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[170.71296692 229.61238098]
[184.64517212 224.05416870]
[199.51673889 226.00189209]
[189.95538330 214.44419861]
[180.39402771 202.88648987]
[170.65229797 191.48040771]
[160.73262024 180.22874451]
[150.81294250 168.97706604]
[140.89326477 157.72540283]
[130.97358704 146.47373962]
[121.05391693 135.22207642]
[111.13423920 123.97040558]
[101.21456146 112.71874237]
[90.77586365 101.94684601]
[79.84133911 91.67864227]
[61.88765717 87.98354340]
[57.29701233 71.12602997]
[46.04534531 61.20635223]
[34.79367828 51.28667450]
[23.54201317 41.36699677]
[12.29034805 31.44731712]
[1.03868186 21.52763939]
[-10.21298409 11.60796165]
[-21.46465111 1.68828332]
[-32.71631622 -8.23139477]
[-43.96798325 -18.15107346]
[-52.64022064 -21.56429291]
[-55.41097641 -28.56339645]
[-66.34550476 -38.83160400]
[-77.28003693 -49.09981155]
[-88.21456909 -59.36801529]
[-99.14909363 -69.63622284]
[-110.08362579 -79.90442657]
[-121.17809296 -89.99961853]
[-137.35189819 -92.70885468]
[-142.83828735 -108.16303253]
[-131.99334717 -120.46421051]
[-115.97340393 -116.95800018]
[-111.25841522 -101.25128174]
[-104.02961731 -99.15149689]
[-99.81541443 -90.83895874]
[-88.88088989 -80.57075500]
[-77.94635773 -70.30254364]
[-67.01183319 -60.03433990]
[-56.07730103 -49.76613235]
[-45.14277267 -39.49792480]
[-34.04830551 -29.40273857]
[-22.79663849 -19.48306084]
[-11.54497242 -9.56338310]
[-0.29330623 0.35629526]
[10.95835972 10.27597332]
[22.21002579 20.19565201]
[33.46169281 30.11532974]
[44.71335983 40.03500748]
[55.96502304 49.95468521]
[67.21669006 59.87436295]
[79.41892242 59.45586395]
[88.88977051 67.78546143]
[90.10954285 80.74411011]
[101.04407501 91.01231384]
[105.08535767 91.41254425]
[108.89943695 93.68496704]
[111.61274719 97.66851044]
[112.46622467 102.79906464]
[122.38590240 114.05072784]
[132.30558777 125.30239868]
[142.22526550 136.55406189]
[152.14494324 147.80572510]
[162.06462097 159.05738831]
[171.98429871 170.30905151]
[181.90397644 181.56072998]
[190.08003235 186.03395081]
[191.95172119 193.32513428]
[201.51307678 204.88282776]
[211.07444763 216.44053650]
[222.32611084 226.36021423]
[234.99102783 234.39761353]
[244.09043884 236.41217041]
[247.92198181 242.89166260]
[260.32818604 251.32290649]
[272.73440552 259.75415039]
[288.20983887 256.54690552]
[301.37445068 265.29153442]
[304.41790771 280.80001831]
[295.53457642 293.87145996]
[279.99478149 296.75076294]
[267.01800537 287.72973633]
[264.30316162 272.16036987]
[251.89694214 263.72912598]
[239.49073792 255.29786682]
[226.95362854 247.06253052]
[214.28871155 239.02513123]
[218.08497620 253.53678894]
[214.31604004 268.05557251]
[203.94059753 278.88839722]
[189.59779358 283.27978516]
[174.93595886 280.11270142]
[163.68453979 270.19274902]
[158.70552063 256.04321289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[6 71]
[7 70]
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 60]
[15 59]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[34 39]
[76 92]
[77 91]
[79 90]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
