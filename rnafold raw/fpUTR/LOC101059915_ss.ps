%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGGCCCCCUCGGCUGGGCUUGGCUGGGCUCGGCUCUCCUCUCCCACUGUUACCAGGACGACUGUCUCCCCACAGCCUGGCUGUCUAGACUGGCGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[92.43624115 371.41223145]
[76.10569763 369.91375732]
[69.48478699 354.91055298]
[79.38453674 341.83666992]
[80.75515747 326.89941406]
[82.12578583 311.96215820]
[83.26846313 297.00573730]
[84.18292236 282.03366089]
[85.09738159 267.06155396]
[78.15037537 253.88624573]
[86.71459961 240.58345032]
[87.62905884 225.61134338]
[88.54351807 210.63925171]
[89.45797729 195.66714478]
[90.14401245 180.68284607]
[90.60144806 165.68981934]
[91.05889130 150.69679260]
[91.51633453 135.70376587]
[91.97377777 120.71074677]
[92.43122101 105.71772766]
[89.68720245 101.03057861]
[89.86573792 95.13245392]
[93.40145874 89.83244324]
[94.77207947 74.89519501]
[96.14270782 59.95794678]
[97.51333618 45.02069855]
[98.88395691 30.08345032]
[100.25458527 15.14620304]
[101.62521362 0.20895444]
[102.99583435 -14.72829342]
[104.36646271 -29.66554260]
[103.68043518 -44.64984512]
[100.95064545 -59.39936447]
[98.22086334 -74.14888000]
[93.50878906 -82.17773438]
[95.63993835 -89.38938904]
[93.36122894 -104.21529388]
[90.85668945 -119.00472260]
[88.12690735 -133.75424194]
[85.39712524 -148.50375366]
[82.66733551 -163.25328064]
[67.79213715 -166.38327026]
[55.24986649 -174.97163391]
[46.95312881 -187.70867920]
[44.16711807 -202.65213013]
[47.31668091 -217.52320862]
[55.92152786 -230.05416870]
[68.66948700 -238.33413696]
[83.61658478 -241.10049438]
[98.48349762 -237.93136597]
[111.00312805 -229.31004333]
[119.26632690 -216.55120850]
[122.01301575 -201.60047913]
[118.82434082 -186.73774719]
[110.18655396 -174.22947693]
[97.41685486 -165.98306274]
[100.14663696 -151.23355103]
[102.87642670 -136.48402405]
[105.60620880 -121.73450470]
[109.99297333 -115.62664032]
[108.18713379 -106.49400330]
[110.46584320 -91.66809845]
[112.97038269 -76.87866211]
[115.70016479 -62.12914658]
[118.42995453 -47.37963104]
[126.77832031 -59.84175873]
[140.45153809 -66.00966644]
[155.31900024 -64.02005005]
[166.88932800 -54.47396469]
[171.66717529 -40.25524139]
[168.20918274 -25.65927124]
[157.55999756 -15.09542465]
[142.93669128 -11.75498199]
[128.75686646 -16.64707375]
[119.30371094 -28.29491615]
[117.93308258 -13.35766792]
[116.56246185 1.57958043]
[115.19183350 16.51682854]
[113.82120514 31.45407677]
[112.45058441 46.39132690]
[111.07995605 61.32857513]
[109.70932770 76.26582336]
[108.33870697 91.20307159]
[107.42424774 106.17517090]
[106.96680450 121.16819000]
[106.50936127 136.16120911]
[106.05191803 151.15423584]
[105.59447479 166.14726257]
[105.13703156 181.14028931]
[108.04090118 189.98526001]
[104.43007660 196.58160400]
[103.51561737 211.55371094]
[102.60115814 226.52580261]
[101.68669891 241.49790955]
[108.56829071 255.74411011]
[100.06948090 267.97601318]
[99.15502167 282.94812012]
[98.24056244 297.92019653]
[100.87334442 306.84963989]
[97.06303406 313.33279419]
[95.69240570 328.27001953]
[94.32178497 343.20727539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 102]
[5 101]
[6 100]
[7 98]
[8 97]
[9 96]
[11 94]
[12 93]
[13 92]
[14 91]
[15 89]
[16 88]
[17 87]
[18 86]
[19 85]
[20 84]
[23 83]
[24 82]
[25 81]
[26 80]
[27 79]
[28 78]
[29 77]
[30 76]
[31 75]
[32 65]
[33 64]
[34 63]
[36 62]
[37 61]
[38 59]
[39 58]
[40 57]
[41 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
