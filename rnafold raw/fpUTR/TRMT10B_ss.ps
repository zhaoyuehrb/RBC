%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGAUCCGAUGCGCGCCGCUGCCGCUGCGUGGGGGUGAGGGGAUCAGUCUGGUGGAAAGGACAGAGGACUAAGUCC\
) } def
/len { sequence length } bind def

/coor [
[101.50264740 114.65481567]
[95.22274780 128.27696228]
[88.94285583 141.89910889]
[90.98139954 158.17106628]
[77.74716187 167.85542297]
[62.85438919 160.98976135]
[61.62348938 144.63687134]
[75.32070923 135.61921692]
[81.60060120 121.99707031]
[87.88050079 108.37492371]
[84.95414734 93.66313934]
[73.93930817 83.48113251]
[62.92446899 73.29911804]
[47.53860855 69.61322784]
[43.44477081 55.29227066]
[28.05890656 51.60637665]
[23.96507072 37.28541946]
[10.89718723 36.97077942]
[1.91412830 28.03973579]
[1.54877663 15.78235531]
[-9.05782509 5.17575359]
[-19.66442680 -5.43084812]
[-30.27102852 -16.03745079]
[-45.50032043 -20.32454872]
[-49.02876282 -34.79518509]
[-59.63536453 -45.40178680]
[-70.24196625 -56.00838852]
[-80.84857178 -66.61499023]
[-96.32393646 -73.53954315]
[-93.95401001 -90.32702637]
[-77.16651917 -92.69696045]
[-70.24196625 -77.22159576]
[-59.63536453 -66.61499023]
[-49.02876282 -56.00838852]
[-38.42216110 -45.40178680]
[-23.95152473 -41.87334442]
[-19.66442680 -26.64405251]
[-9.05782509 -16.03745079]
[1.54877663 -5.43084812]
[12.15537834 5.17575359]
[29.23920631 8.65200996]
[34.14708328 26.27058411]
[48.74509048 29.22819138]
[53.62678146 44.27743149]
[68.22478485 47.23503876]
[73.10648346 62.28428268]
[84.12131500 72.46629333]
[95.13615417 82.64830017]
[122.09105682 88.32376862]
[137.04481506 89.50064850]
[151.99858093 90.67753601]
[166.95233154 91.85442352]
[181.90609741 93.03131104]
[193.85968018 83.04383850]
[209.00814819 84.45038605]
[218.45602417 95.90785217]
[233.40977478 97.08473969]
[244.24052429 85.80515289]
[259.79318237 84.17776489]
[272.72430420 92.97097778]
[276.92816162 108.03289795]
[270.41986084 122.25175476]
[256.27239990 128.91383362]
[241.16577148 124.87351227]
[232.23289490 112.03849792]
[217.27912903 110.86161041]
[206.15524292 120.70004272]
[190.97323608 119.71953583]
[180.72921753 107.98506927]
[165.77545166 106.80818176]
[150.82168579 105.63130188]
[135.86793518 104.45441437]
[120.91416931 103.27752686]
[135.21827698 107.79332733]
[143.76512146 120.12019348]
[142.97796631 135.09951782]
[133.18624878 146.46272278]
[118.48762512 149.45445251]
[105.03324127 142.82275391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[11 48]
[12 47]
[13 46]
[15 44]
[17 42]
[20 40]
[21 39]
[22 38]
[23 37]
[25 35]
[26 34]
[27 33]
[28 32]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[56 66]
[57 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
