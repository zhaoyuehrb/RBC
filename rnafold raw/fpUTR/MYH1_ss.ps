%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCUCCUCAUAAAGCUUCAAGUUCUGAUCCACUUUAAGGUCGCAUCUCUACGCCAGGGUCCUUAACUGGGCUACCAUCAAUAACCUGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[31.65199089 336.55157471]
[28.43562317 351.34796143]
[20.58700752 364.29702759]
[8.95750332 373.99411011]
[-5.19140720 379.38735962]
[-20.32495689 379.89172363]
[-34.80157089 375.45254517]
[-47.05093384 366.55133057]
[-55.74432755 354.15359497]
[-59.93875885 339.60418701]
[-59.17924500 324.48129272]
[-53.54817200 310.42532349]
[-43.65635681 298.96099854]
[-30.57679367 291.33187866]
[-15.72825050 288.36547852]
[-0.72138786 290.38360596]
[5.97774410 276.96267700]
[12.67687607 263.54171753]
[11.43819904 248.69871521]
[24.52426720 239.80683899]
[31.22339821 226.38589478]
[29.98472023 211.54289246]
[43.07078934 202.65101624]
[49.76992035 189.23007202]
[56.46905136 175.80914307]
[54.38071823 158.47090149]
[69.61016083 148.28561401]
[75.86188507 134.65051270]
[82.11360931 121.01541138]
[88.36534119 107.38031769]
[93.46974182 93.27552032]
[97.39193726 78.79738617]
[87.83319092 66.71697235]
[87.22770691 51.50228119]
[95.59828186 38.99638367]
[109.56063843 33.87870407]
[113.48283386 19.40056801]
[117.40503693 4.92243528]
[121.32723236 -9.55569839]
[125.24943542 -24.03383255]
[129.17163086 -38.51196671]
[125.31198883 -53.85516357]
[136.10803223 -64.11649323]
[132.24838257 -79.45968628]
[143.04441833 -89.72101593]
[131.46923828 -99.66978455]
[125.36484528 -113.65903473]
[125.94326019 -128.91119385]
[133.08964539 -142.39791870]
[145.38508606 -151.44143677]
[160.38829041 -154.24612427]
[175.12039185 -150.25512695]
[186.65629578 -140.26084900]
[192.70556641 -126.24767303]
[192.06709290 -110.99790955]
[184.86764526 -97.53942871]
[172.53669739 -88.54440308]
[157.52255249 -85.79882050]
[161.66273499 -71.49119568]
[150.58616638 -60.19429398]
[154.72634888 -45.88666534]
[143.64976501 -34.58976746]
[139.72756958 -20.11163330]
[135.80537415 -5.63349962]
[131.88316345 8.84463406]
[127.96096802 23.32276726]
[124.03877258 37.80090332]
[133.50863647 49.26648712]
[134.42204285 64.28746033]
[126.21950531 77.11602020]
[111.87007141 82.71958923]
[107.94787598 97.19772339]
[109.30976868 99.58112335]
[109.89592743 102.51681519]
[109.50540161 105.73741150]
[108.03202057 108.90811920]
[105.48545837 111.66043091]
[102.00044250 113.63204193]
[95.74871063 127.26714325]
[89.49698639 140.90223694]
[83.24525452 154.53733826]
[87.00636292 167.01028442]
[81.36455536 178.30361938]
[69.88999176 182.50827026]
[63.19086075 195.92921448]
[56.49172974 209.35014343]
[57.25123978 225.15312195]
[44.64434052 233.08503723]
[37.94520569 246.50596619]
[38.70471573 262.30892944]
[26.09781647 270.24084473]
[19.39868355 283.66180420]
[12.69955254 297.08273315]
[23.33275223 307.86297607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 93]
[17 92]
[18 91]
[20 89]
[21 88]
[23 86]
[24 85]
[25 84]
[27 81]
[28 80]
[29 79]
[30 78]
[31 72]
[32 71]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[43 60]
[45 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
