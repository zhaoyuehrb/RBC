%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGAAUCUCGCGAGAGCUCCCGGGGGCCGUUGGGUAGCGUCUUCGCUGUUGCCCUUAGGGACGGCUGUGGGCCUGCUGGGGGUGGGGGCCCGAAGCGCCAGAG\
) } def
/len { sequence length } bind def

/coor [
[92.41639709 130.10652161]
[83.60746002 126.36662292]
[72.84484863 136.81488037]
[62.08224106 147.26315308]
[51.31963348 157.71141052]
[53.37352753 172.97862244]
[46.12846375 186.37124634]
[32.54721069 192.85304260]
[17.92843246 190.12736511]
[7.16582298 200.57562256]
[-3.59678578 211.02389526]
[-7.55250454 226.93879700]
[-23.38570595 231.20983887]
[-34.80854797 219.44332886]
[-30.07019234 203.74365234]
[-14.04505157 200.26127625]
[-3.28244233 189.81301880]
[7.48016644 179.36474609]
[5.18889046 164.67161560]
[12.07028484 151.28840637]
[25.67172623 144.44338989]
[40.87136841 146.94880676]
[51.63397598 136.50054932]
[62.39658356 126.05227661]
[73.15919495 115.60401154]
[70.46952820 109.58464813]
[69.11152649 103.13307190]
[69.14640808 96.54021454]
[55.08511734 91.31719208]
[41.02382278 86.09416962]
[24.95465851 89.36740112]
[14.28946304 76.91004944]
[19.99967384 61.53716278]
[36.21111298 59.06305695]
[46.24684525 72.03287506]
[60.30813980 77.25589752]
[74.36943817 82.47891998]
[96.32798004 69.17095184]
[120.79804230 76.94884491]
[133.23912048 68.56914520]
[145.68020630 60.18944550]
[151.16072083 52.67615509]
[158.61645508 51.75216293]
[171.30039978 43.74481201]
[183.98432922 35.73746109]
[196.66827393 27.73011208]
[209.10935974 19.35041046]
[221.29666138 10.60571766]
[233.48396301 1.86102593]
[240.18572998 -12.47064590]
[255.03717041 -13.60392952]
[267.22445679 -22.34862137]
[279.41177368 -31.09331322]
[291.59906006 -39.83800507]
[303.78637695 -48.58269882]
[315.97369385 -57.32738876]
[328.16098022 -66.07208252]
[340.34829712 -74.81677246]
[352.53558350 -83.56147003]
[364.72290039 -92.30615997]
[371.42465210 -106.63783264]
[386.27609253 -107.77111816]
[389.46533203 -113.86074829]
[394.53509521 -116.85477448]
[399.45452881 -116.64745331]
[412.13845825 -124.65480042]
[424.82238770 -132.66215515]
[437.50634766 -140.66950989]
[447.67218018 -154.23756409]
[463.52416992 -148.22503662]
[462.13488770 -131.32810974]
[445.51370239 -127.98556519]
[432.82974243 -119.97821808]
[420.14581299 -111.97086334]
[407.46188354 -103.96351624]
[395.02078247 -95.58380890]
[389.19073486 -81.87761688]
[373.46759033 -80.11885834]
[361.28027344 -71.37416077]
[349.09298706 -62.62947083]
[336.90567017 -53.88478088]
[324.71838379 -45.14008713]
[312.53106689 -36.39539719]
[300.34378052 -27.65070343]
[288.15646362 -18.90601158]
[275.96914673 -10.16131878]
[263.78186035 -1.41662657]
[257.95181274 12.28956699]
[242.22865295 14.04832935]
[230.04135132 22.79302216]
[217.85404968 31.53771400]
[216.19731140 36.17441940]
[211.51742554 39.74726105]
[204.67562866 40.41405106]
[191.99168396 48.42140198]
[179.30773926 56.42875290]
[166.62380981 64.43610382]
[154.05990601 72.63053131]
[141.61882019 81.01023102]
[129.17773438 89.38993073]
[131.02299500 98.78031158]
[129.92066956 108.28658295]
[125.97549438 117.00551605]
[119.56231689 124.10871124]
[111.29045868 128.92126465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[4 23]
[5 22]
[9 18]
[10 17]
[11 16]
[28 37]
[29 36]
[30 35]
[39 100]
[40 99]
[41 98]
[43 97]
[44 96]
[45 95]
[46 94]
[47 91]
[48 90]
[49 89]
[51 87]
[52 86]
[53 85]
[54 84]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[60 78]
[62 76]
[65 75]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
