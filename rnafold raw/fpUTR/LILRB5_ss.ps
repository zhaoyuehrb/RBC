%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUCUUGUGACAGGGAGAACCCAGCCUCCAGUCCACACUCUGCGUGUUUUUGUGUCCUGCCAGGCACCGUGGUCUCAUCCGCCUGCACAGCUGAGUCCAGUGGGAGCUGACGCC\
) } def
/len { sequence length } bind def

/coor [
[126.21128082 116.86163330]
[119.40266418 127.99679565]
[107.81008148 136.12484741]
[101.88270569 149.90403748]
[95.95532990 163.68324280]
[98.41180420 179.89735413]
[85.43108368 189.91897583]
[70.36661530 183.43872070]
[68.71543121 167.12290955]
[82.17613220 157.75585938]
[88.10350800 143.97666931]
[94.03089142 130.19747925]
[82.59794617 120.48625183]
[71.16603088 110.77588654]
[58.52729797 118.85440063]
[45.88856506 126.93292236]
[38.82261276 141.73171997]
[22.45460701 142.74189758]
[13.62255096 128.92427063]
[21.41210556 114.49322510]
[37.81004715 114.29418945]
[50.44877625 106.21567535]
[63.08750916 98.13715363]
[82.76087189 75.79294586]
[106.26992798 78.41535950]
[115.02084351 66.23252106]
[116.78764343 50.51027679]
[130.49681091 44.68722916]
[139.24772644 32.50439453]
[141.76306152 23.58107758]
[148.40425110 20.11448097]
[157.48185730 8.17308521]
[166.55947876 -3.76831102]
[175.31039429 -15.95114422]
[183.72819519 -28.36647987]
[192.14601135 -40.78181458]
[200.56381226 -53.19714737]
[208.47045898 -65.94411469]
[215.85287476 -79.00167084]
[223.23530579 -92.05922699]
[230.61772156 -105.11678314]
[230.67428589 -120.93788910]
[243.67352295 -128.20903015]
[251.05593872 -141.26658630]
[258.26086426 -154.42291260]
[265.28701782 -167.67558289]
[272.31314087 -180.92826843]
[279.33926392 -194.18095398]
[271.90136719 -205.33616638]
[270.12939453 -218.53897095]
[274.30825806 -231.09678650]
[283.51696777 -240.48208618]
[295.83044434 -244.84104919]
[297.85543823 -259.70373535]
[299.88043213 -274.56643677]
[301.90542603 -289.42910767]
[303.93041992 -304.29177856]
[294.16775513 -316.72021484]
[296.13565063 -332.40151978]
[308.66659546 -342.03222656]
[324.32620239 -339.89865112]
[333.82391357 -327.26657104]
[331.52490234 -311.63040161]
[318.79312134 -302.26678467]
[316.76812744 -287.40411377]
[314.74310303 -272.54141235]
[312.71810913 -257.67874146]
[310.69311523 -242.81605530]
[315.05288696 -240.52743530]
[318.96060181 -237.53158569]
[331.59933472 -245.61010742]
[344.23806763 -253.68862915]
[356.87677002 -261.76715088]
[360.02905273 -277.25387573]
[373.25473022 -285.90588379]
[388.70724487 -282.59005737]
[397.21893311 -269.27365112]
[393.73992920 -253.85702515]
[380.33428955 -245.48661804]
[364.95529175 -249.12841797]
[352.31655884 -241.04989624]
[339.67785645 -232.97137451]
[327.03912354 -224.89285278]
[326.42544556 -204.88685608]
[312.86682129 -189.86576843]
[292.59194946 -187.15483093]
[285.56579590 -173.90214539]
[278.53967285 -160.64945984]
[271.51354980 -147.39678955]
[271.15591431 -139.91381836]
[264.11349487 -133.88415527]
[256.73107910 -120.82659912]
[257.20254517 -105.93946075]
[243.67527771 -97.73435974]
[236.29286194 -84.67680359]
[228.91043091 -71.61924744]
[221.52801514 -58.56168747]
[222.19407654 -54.97015381]
[221.06657410 -50.87319183]
[217.92643738 -47.15907288]
[212.97914124 -44.77934265]
[204.56134033 -32.36400986]
[196.14353943 -19.94867325]
[187.72572327 -7.53333807]
[187.76455688 -2.63555622]
[184.63485718 2.30926824]
[178.50086975 5.30930233]
[169.42326355 17.25069809]
[160.34564209 29.19209480]
[151.43055725 41.25531387]
[142.67964172 53.43814850]
[141.53877258 68.28899384]
[127.20367432 74.98344421]
[118.45275879 87.16627502]
[124.79145813 94.59708405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[14 23]
[15 22]
[16 21]
[25 114]
[26 113]
[28 111]
[29 110]
[31 109]
[32 108]
[33 107]
[34 104]
[35 103]
[36 102]
[37 101]
[38 97]
[39 96]
[40 95]
[41 94]
[43 92]
[44 91]
[45 89]
[46 88]
[47 87]
[48 86]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[70 83]
[71 82]
[72 81]
[73 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
