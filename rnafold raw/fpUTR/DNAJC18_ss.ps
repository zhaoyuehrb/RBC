%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCCCGCGCUCCGCGCCCCCUUCUCUUUCAGCCUCGGGCACGGGGGAGGCUCGGCGGACCUGCUGAUUGGGAACCGAU\
) } def
/len { sequence length } bind def

/coor [
[95.47114563 239.72512817]
[90.39451599 225.33100891]
[92.07454681 210.16062927]
[100.17765045 197.22608948]
[113.09496307 189.09553528]
[111.35356903 174.19696045]
[109.61217499 159.29838562]
[106.43662262 144.63838196]
[101.85672760 130.35466003]
[97.27684021 116.07094574]
[84.57775879 105.27687073]
[88.00256348 88.96585083]
[82.87226105 74.87046814]
[77.74195862 60.77507401]
[72.61165619 46.67968750]
[67.48135376 32.58429718]
[52.43656158 29.82723045]
[40.86815643 19.97488022]
[35.81805038 5.74945307]
[38.54814911 -8.99512291]
[48.22678375 -20.31720924]
[43.09648132 -34.41259766]
[37.96617889 -48.50798798]
[32.83587646 -62.60337830]
[27.70557594 -76.69876862]
[22.57527351 -90.79415894]
[17.44497108 -104.88954926]
[12.31466866 -118.98493195]
[0.47503138 -121.92131805]
[-8.30188370 -130.21676636]
[-11.82909012 -141.63983154]
[-9.30887985 -153.20204163]
[-1.50957584 -161.93960571]
[-5.53216505 -176.39016724]
[-9.55475426 -190.84072876]
[-19.62724304 -204.47822571]
[-9.31104851 -217.93231201]
[6.47305489 -211.74374390]
[4.89580917 -194.86332703]
[8.91839790 -180.41275024]
[12.94098759 -165.96218872]
[29.29597092 -158.18196106]
[35.11985779 -140.70326233]
[26.41005707 -124.11523438]
[31.54035950 -110.01984406]
[36.67066193 -95.92446136]
[41.80096436 -81.82907104]
[46.93126678 -67.73368073]
[52.06156921 -53.63829041]
[57.19187164 -39.54290009]
[62.32217407 -25.44751167]
[77.01412964 -22.99559593]
[88.58314514 -13.45546913]
[93.85846710 0.68798679]
[91.32952118 15.67135239]
[81.57674408 27.45399475]
[86.70704651 41.54938507]
[91.83734894 55.64477158]
[96.96765137 69.74016571]
[102.09795380 83.83554840]
[112.46318054 89.49476624]
[116.28631592 100.66831207]
[111.56055450 111.49105072]
[116.14044952 125.77477264]
[120.72033691 140.05848694]
[124.22512054 142.77320862]
[126.51081085 146.11494446]
[127.52874756 149.64047241]
[127.37412262 152.93463135]
[126.26522064 155.65332031]
[124.51074982 157.55699158]
[126.25214386 172.45556641]
[127.99353790 187.35414124]
[142.43769836 192.28659058]
[153.30529785 203.00378418]
[158.43856812 217.37779236]
[156.81829834 232.55467224]
[148.76618958 245.52102661]
[135.88099670 253.70237732]
[120.72107697 255.47431946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 73]
[6 72]
[7 71]
[8 65]
[9 64]
[10 63]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[33 41]
[34 40]
[35 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
