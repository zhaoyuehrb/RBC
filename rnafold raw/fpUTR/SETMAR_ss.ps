%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGUCCCAGCAUCCACCGCGCGGCCCAGGACUGUCAGGGUAGUGGGCGUUGCGUGAGGCGGGUAA\
) } def
/len { sequence length } bind def

/coor [
[79.72933960 274.04486084]
[64.51773071 271.92294312]
[52.41493225 262.46685791]
[46.67652893 248.22021484]
[48.84613037 233.01533508]
[58.34011841 220.94224548]
[72.60466003 215.24851990]
[74.67700195 200.39236450]
[76.74935150 185.53620911]
[74.47549438 178.23023987]
[79.27584839 170.04798889]
[82.03208923 155.30339050]
[76.76515961 141.37109375]
[86.90649414 129.22763062]
[89.66274261 114.48303223]
[83.34658813 106.26746368]
[82.67890167 95.92611694]
[87.88613129 86.96653748]
[97.20210266 82.42761230]
[101.30705261 68.00022888]
[105.41199493 53.57284164]
[109.51693726 39.14545441]
[102.08500671 25.45589447]
[106.45352173 10.88295174]
[119.55023193 3.88210082]
[123.65517426 -10.54528427]
[127.76011658 -24.97266769]
[131.86506653 -39.40005493]
[135.97000122 -53.82743835]
[128.53807068 -67.51699829]
[132.90660095 -82.08994293]
[146.00329590 -89.09078979]
[150.10824585 -103.51818085]
[154.21318054 -117.94556427]
[147.69413757 -132.60440063]
[155.21788025 -146.77383423]
[171.01284790 -149.58428955]
[182.96249390 -138.87980652]
[181.90007019 -122.87197876]
[168.64057922 -113.84061432]
[164.53562927 -99.41323090]
[160.43067932 -84.98584747]
[167.88024902 -72.13907623]
[163.92277527 -57.44918060]
[150.39739990 -49.72249222]
[146.29244995 -35.29510880]
[142.18750000 -20.86772346]
[138.08256531 -6.44033909]
[133.97761536 7.98704576]
[141.42718506 20.83381653]
[137.46971130 35.52371216]
[123.94432068 43.25040054]
[119.83937836 57.67778397]
[115.73443604 72.10517120]
[111.62948608 86.53255463]
[117.32109833 104.07388306]
[104.40733337 117.23927307]
[101.65109253 131.98387146]
[106.72087860 146.97079468]
[96.77668762 158.05963135]
[94.02044678 172.80422974]
[91.60550690 187.60855103]
[89.53315735 202.46470642]
[87.46081543 217.32086182]
[99.62265778 226.70091248]
[105.45025635 240.91128540]
[103.37602234 256.12945557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 64]
[8 63]
[9 62]
[11 61]
[12 60]
[14 58]
[15 57]
[19 55]
[20 54]
[21 53]
[22 52]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[32 42]
[33 41]
[34 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
