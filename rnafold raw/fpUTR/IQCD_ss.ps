%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACACCGAGUCUCGCCUUCUGAGAUUGGCGGGUAACCUAGCAACGCAGGGACCGCGGCGGUAACUGUGGCUAGGGAAACCUGGAGCGGUCAGAGCAGGAUGGCCAGAGACAAUAAAAGCACGAGACCCAAGUAGUCUACCGAAGUCUCCAUCUCUGUGGACCUACAGAGGCACAGAGGGCUGCUCACAAG\
) } def
/len { sequence length } bind def

/coor [
[83.81855011 413.58224487]
[69.03477478 409.92712402]
[57.01978302 400.56979370]
[49.85523987 387.13143921]
[48.78244781 371.94036865]
[53.98727417 357.62847900]
[64.56795502 346.67544556]
[78.69132233 340.97891235]
[79.18210602 325.98693848]
[79.67289734 310.99499512]
[80.16368103 296.00302124]
[72.52317810 289.18847656]
[69.84705353 279.07897949]
[73.25532532 268.96008301]
[81.84886932 262.25927734]
[82.82991791 247.29139709]
[83.81096649 232.32350159]
[84.79201508 217.35562134]
[85.77306366 202.38774109]
[86.75410461 187.41986084]
[87.73515320 172.45196533]
[88.71620178 157.48408508]
[78.01706696 154.30004883]
[68.11615753 149.14433289]
[59.37297058 142.20413208]
[52.10498810 133.73147583]
[46.57611465 124.03399658]
[42.98710632 113.46382141]
[41.46828461 102.40476227]
[42.07480240 91.25838470]
[27.65137482 87.13955688]
[13.22794724 83.02072906]
[-1.19547963 78.90190125]
[-15.61890697 74.78307343]
[-30.74263191 83.55935669]
[-47.21247864 78.78413391]
[-54.98376465 63.87769318]
[-69.47264862 59.99540710]
[-83.96154022 56.11312103]
[-98.45042419 52.23083496]
[-112.93931580 48.34855270]
[-127.42819977 44.46626663]
[-133.92799377 45.81113052]
[-139.31614685 43.94148254]
[-142.32360840 40.21265411]
[-156.67771912 35.85838318]
[-171.03182983 31.50411415]
[-185.38592529 27.14984322]
[-199.74003601 22.79557228]
[-213.55628967 29.98923492]
[-228.05136108 25.36890602]
[-234.82427979 12.15288353]
[-249.17839050 7.79861307]
[-263.53250122 3.44434309]
[-277.88659668 -0.90992707]
[-294.79885864 0.27820176]
[-300.62234497 -15.64421844]
[-286.93426514 -25.64787674]
[-273.53231812 -15.26403236]
[-259.17822266 -10.90976238]
[-244.82411194 -6.55549192]
[-230.47000122 -2.20122170]
[-217.49610901 -9.42711449]
[-202.87698364 -5.21574497]
[-195.38575745 8.44146824]
[-181.03166199 12.79573822]
[-166.67755127 17.15000916]
[-152.32344055 21.50427818]
[-137.96934509 25.85854912]
[-123.54591370 29.97737694]
[-109.05702972 33.85966492]
[-94.56813812 37.74195099]
[-80.07925415 41.62423325]
[-65.59036255 45.50651932]
[-51.10147858 49.38880539]
[-40.94497299 41.44426346]
[-27.87178993 40.79539871]
[-16.64948845 47.90340424]
[-11.50007725 60.35964203]
[2.92334962 64.47846985]
[17.34677696 68.59730530]
[31.77020264 72.71613312]
[46.19363022 76.83496094]
[52.21984863 66.10602570]
[60.35435867 56.87265778]
[70.23822784 49.54228210]
[81.43533325 44.43834305]
[93.45160675 41.78606033]
[93.69702911 26.78806686]
[93.94245911 11.79007435]
[94.18788147 -3.20791745]
[94.43331146 -18.20590973]
[81.95018005 -27.42280579]
[77.30078888 -42.22695160]
[82.27291107 -56.92584991]
[94.95466614 -65.86747742]
[110.46966553 -65.61359406]
[122.85206604 -56.26181793]
[127.34059143 -41.40810394]
[122.20931244 -26.76400948]
[109.43129730 -17.96048355]
[109.18587494 -2.96249151]
[108.94044495 12.03550053]
[108.69502258 27.03349304]
[108.44959259 42.03148651]
[129.70462036 49.50861359]
[146.56521606 64.45530701]
[159.55560303 56.95530701]
[172.54597473 49.45530701]
[185.53636169 41.95530701]
[198.52673340 34.45530701]
[195.70738220 23.64436722]
[195.37960815 12.48654079]
[197.55561829 1.54811788]
[202.12066650 -8.61673546]
[208.83908081 -17.49405479]
[217.36642456 -24.63606071]
[227.26719666 -29.68375015]
[238.03698730 -32.38493729]
[249.12826538 -32.60684967]
[259.97814941 -30.34264946]
[270.03701782 -25.71154785]
[278.79629517 -18.95255470]
[285.81423950 -10.41212654]
[299.47720337 -16.60273170]
[313.14016724 -22.79333687]
[326.80313110 -28.98394203]
[330.84042358 -44.09136581]
[343.67364502 -53.02682114]
[359.24334717 -51.57125854]
[370.19796753 -40.41194916]
[371.36508179 -24.81798172]
[362.19363403 -12.15234756]
[347.01406860 -8.39537239]
[332.99371338 -15.32098484]
[319.33078003 -9.13037968]
[305.66781616 -2.93977427]
[292.00485229 3.25083113]
[293.53964233 22.27015686]
[287.69720459 40.46809769]
[275.33721924 55.08797836]
[258.30856323 63.90547180]
[239.17279053 65.56702423]
[220.81881714 59.79755783]
[206.02673340 47.44568634]
[193.03636169 54.94568634]
[180.04597473 62.44568634]
[167.05560303 69.94568634]
[154.06521606 77.44568634]
[158.19161987 93.25606537]
[157.79060364 109.59113312]
[152.89340210 125.18000031]
[165.50012207 133.30838013]
[178.10685730 141.43675232]
[190.71357727 149.56512451]
[203.32031250 157.69349670]
[215.92703247 165.82186890]
[228.53375244 173.95024109]
[241.14048767 182.07861328]
[257.53750610 182.34240723]
[265.27001953 196.80410767]
[256.38345337 210.58674622]
[240.01956177 209.51193237]
[233.01211548 194.68533325]
[220.40538025 186.55696106]
[207.79866028 178.42858887]
[195.19194031 170.30021667]
[182.58520508 162.17184448]
[169.97848511 154.04347229]
[157.37174988 145.91510010]
[144.76502991 137.78672791]
[133.11589050 148.32269287]
[119.08603668 155.38471985]
[103.68408203 158.46513367]
[102.70304108 173.43301392]
[101.72199249 188.40090942]
[100.74094391 203.36878967]
[99.75989532 218.33666992]
[98.77884674 233.30455017]
[97.79780579 248.27243042]
[96.81675720 263.24032593]
[106.54861450 280.88201904]
[95.15564728 296.49380493]
[94.66486359 311.48577881]
[94.17407990 326.47772217]
[93.68328857 341.46969604]
[107.40384674 348.07775879]
[117.24550629 359.69934082]
[121.50315094 374.32098389]
[119.43910980 389.40939331]
[111.41100311 402.35037231]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 186]
[9 185]
[10 184]
[11 183]
[15 181]
[16 180]
[17 179]
[18 178]
[19 177]
[20 176]
[21 175]
[22 174]
[30 83]
[31 82]
[32 81]
[33 80]
[34 79]
[37 75]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[52 62]
[53 61]
[54 60]
[55 59]
[88 105]
[89 104]
[90 103]
[91 102]
[92 101]
[107 149]
[108 148]
[109 147]
[110 146]
[111 145]
[124 138]
[125 137]
[126 136]
[127 135]
[152 171]
[153 170]
[154 169]
[155 168]
[156 167]
[157 166]
[158 165]
[159 164]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
