%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGGGGCGGGUCCACGCCAGCCCGGAAGAGACGCAGCACCGCGCAUGCUCCUUCCUUUCCAGCCCCGGUACCGGACCCUGCAGCCGCAGAG\
) } def
/len { sequence length } bind def

/coor [
[158.96083069 160.87094116]
[147.27767944 151.46330261]
[135.59451294 142.05564880]
[120.82888031 140.09980774]
[114.93289185 125.41826630]
[103.24973297 116.01062012]
[88.32348633 114.52494049]
[75.01514435 121.44505310]
[61.70680237 128.36517334]
[48.39846039 135.28529358]
[39.72416687 148.51658630]
[24.86270714 147.52349854]
[11.55436420 154.44360352]
[-1.75397825 161.36372375]
[-10.11057186 175.47398376]
[-26.50347710 175.02156067]
[-34.06907654 160.47186279]
[-25.02453423 146.79237366]
[-8.67409611 148.05538940]
[4.63424683 141.13526917]
[17.94258881 134.21514893]
[25.66497993 121.47882843]
[41.47834396 121.97694397]
[54.78668594 115.05683136]
[68.09502411 108.13671112]
[81.40336609 101.21659851]
[86.97132874 87.28828430]
[82.10083771 73.10102844]
[77.23034668 58.91376877]
[72.35985565 44.72650909]
[67.48935699 30.53924942]
[61.63131714 23.26682281]
[62.70082855 15.80166054]
[58.30207825 1.46112418]
[52.68768692 -6.00101376]
[54.00343704 -13.42673206]
[50.08123779 -27.90486526]
[46.15903854 -42.38299942]
[41.99799347 -56.79430389]
[37.59924316 -71.13484192]
[24.15806389 -79.89350891]
[22.76891708 -95.87630463]
[34.49744034 -106.82260132]
[50.34650803 -104.33532715]
[58.15808105 -90.32251740]
[51.93978119 -75.53359222]
[56.33853149 -61.19305420]
[61.40992355 -55.61152649]
[60.63717270 -46.30519867]
[64.55937195 -31.82706451]
[68.48156738 -17.34893227]
[72.64261627 -2.93762636]
[77.04136658 11.40291023]
[81.67662048 25.66875839]
[86.54711151 39.85601807]
[91.41760254 54.04327393]
[96.28809357 68.23053741]
[101.15858459 82.41779327]
[108.29131317 85.66581726]
[112.89745331 91.40582275]
[114.31732178 98.14022064]
[112.65737915 104.32746124]
[124.34053802 113.73510742]
[139.94183350 116.36383820]
[145.00215149 130.37249756]
[156.68531799 139.78013611]
[168.36848450 149.18778992]
[182.29678345 154.75573730]
[197.24555969 155.99443054]
[212.19432068 157.23312378]
[226.78601074 149.74882507]
[240.41481018 158.86956787]
[239.06057739 175.21270752]
[224.11643982 181.96582031]
[210.95562744 172.18188477]
[196.00686646 170.94320679]
[181.05809021 169.70451355]
[177.16583252 176.11544800]
[184.37767029 189.26800537]
[169.38128662 188.93734741]
[165.48901367 195.34829712]
[173.48448181 208.03971863]
[181.47996521 220.73115540]
[189.47543335 233.42257690]
[204.22758484 240.58541870]
[205.13041687 256.95968628]
[191.25517273 265.70095825]
[176.87551880 257.81695557]
[176.78401184 241.41806030]
[168.78852844 228.72662354]
[160.79306030 216.03520203]
[152.79757690 203.34376526]
[147.33215332 189.84675598]
[147.37573242 177.10162354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[5 63]
[6 62]
[7 26]
[8 25]
[9 24]
[10 23]
[12 21]
[13 20]
[14 19]
[27 58]
[28 57]
[29 56]
[30 55]
[31 54]
[33 53]
[34 52]
[36 51]
[37 50]
[38 49]
[39 47]
[40 46]
[68 77]
[69 76]
[70 75]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
