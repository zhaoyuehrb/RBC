%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCAUUCUUUGCCCCAAAACUCUUUCCUUUGGUUGUGCUAAGAGGUGAUGCCCAAGGUGCACCACCUUUCAAGAACUGGAUC\
) } def
/len { sequence length } bind def

/coor [
[-6.04499054 234.03683472]
[-26.75234985 231.76573181]
[-34.33414841 244.70854187]
[-41.91594696 257.65133667]
[-39.26905441 273.47454834]
[-50.09657288 285.31280518]
[-66.09255981 284.08483887]
[-74.98626709 270.73260498]
[-69.95519257 255.49884033]
[-54.85875702 250.06954956]
[-47.27695847 237.12673950]
[-39.69515991 224.18392944]
[-46.52585602 216.83296204]
[-51.43912125 208.06959534]
[-54.15360641 198.38400269]
[-54.51116180 188.31954956]
[-52.48599625 178.44215393]
[-48.18648148 169.30863953]
[-41.84934998 161.43519592]
[-33.82667923 155.26831055]
[-24.56631660 151.15937805]
[-14.58689785 149.34474182]
[-4.44879055 149.93205261]
[5.27736473 152.89393616]
[14.04278088 158.06919861]
[25.13915825 147.97610474]
[36.23553467 137.88301086]
[36.68550491 134.14260864]
[39.13396454 130.47895813]
[43.49911499 127.91010284]
[49.20907211 127.36369324]
[61.37760925 118.59291077]
[73.54615021 109.82212830]
[85.71469116 101.05134583]
[91.62451935 88.37989807]
[105.51452637 86.78011322]
[105.11894226 74.60026550]
[110.70331573 63.90568542]
[120.72035980 57.40173340]
[132.51933289 56.66718292]
[143.04708862 61.77253342]
[155.84410095 53.94716263]
[168.64111328 46.12179184]
[181.43812561 38.29641724]
[194.23513794 30.47104454]
[207.03215027 22.64567184]
[219.82916260 14.82029915]
[227.56607056 1.01991117]
[242.46063232 0.98115700]
[255.25764465 -6.84421539]
[268.05465698 -14.66958809]
[280.70129395 -22.73573112]
[287.50054932 -37.65894318]
[303.84777832 -38.96268463]
[312.92636108 -25.30577850]
[305.39703369 -10.73727703]
[289.00531006 -10.24400806]
[285.08120728 -3.75718021]
[275.88003540 -1.87257516]
[263.08300781 5.95279741]
[250.28599548 13.77816963]
[243.46441650 27.01883507]
[227.65452576 27.61731339]
[214.85751343 35.44268417]
[202.06050110 43.26805878]
[189.26348877 51.09342957]
[176.46647644 58.91880417]
[163.66946411 66.74417877]
[150.87245178 74.56954956]
[147.85942078 92.43640137]
[132.62658691 102.81350708]
[114.28530884 98.94865417]
[108.37548065 111.62010193]
[94.48547363 113.21988678]
[82.31693268 121.99066925]
[70.14839172 130.76145935]
[57.97985458 139.53224182]
[46.32862091 148.97940063]
[35.23224640 159.07247925]
[24.13586807 169.16557312]
[30.52931213 189.26443481]
[26.57843781 209.91622925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[25 80]
[26 79]
[27 78]
[31 77]
[32 76]
[33 75]
[34 74]
[36 72]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[49 61]
[50 60]
[51 59]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
