%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCCAUGUGAUGCUGGGCGAGAGAGAGCCGCCGCGCCGGAGCCUCCUUCUUUCCUGCCUCUGAUUCCGGGCUGUC\
) } def
/len { sequence length } bind def

/coor [
[81.22518921 284.18969727]
[80.75580597 268.39239502]
[91.65495300 256.94754028]
[91.05096436 241.95971680]
[90.44696808 226.97187805]
[89.84297943 211.98403931]
[86.32978058 205.24281311]
[89.52876282 196.38308716]
[89.52876282 181.38308716]
[86.28984833 174.50587463]
[89.84297943 165.78215027]
[90.44696808 150.79431152]
[80.19021606 140.05491638]
[80.58923340 124.84651947]
[91.92324066 114.16110992]
[83.70082092 99.67171478]
[92.50000000 85.52516174]
[92.50000000 70.52516174]
[92.50000000 55.52515793]
[92.50000000 40.52515793]
[91.89601135 25.53732491]
[90.68901062 10.58596516]
[89.48201752 -4.36539459]
[88.27501678 -19.31675339]
[87.06801605 -34.26811218]
[85.86101532 -49.21947479]
[84.05297089 -64.11010742]
[81.64679718 -78.91586304]
[79.24063110 -93.72161102]
[69.38982391 -106.10192871]
[74.98532867 -119.90553284]
[65.13452148 -132.28584290]
[70.73002625 -146.08946228]
[68.32386017 -160.89520264]
[65.91768646 -175.70095825]
[57.40887070 -190.36508179]
[69.14443970 -202.60079956]
[84.15071106 -194.71105957]
[80.72344208 -178.10713196]
[83.12960815 -163.30137634]
[85.53578186 -148.49562073]
[95.21448517 -137.17431641]
[89.79108429 -122.31170654]
[99.46978760 -110.99039459]
[94.04638672 -96.12778473]
[96.45255280 -81.32202911]
[98.85871887 -66.51627350]
[102.37148285 -62.91236877]
[103.47013855 -56.97480774]
[100.81237793 -50.42647171]
[102.01937866 -35.47511292]
[103.22637177 -20.52375221]
[104.43337250 -5.57239294]
[105.64037323 9.37896633]
[106.84737396 24.33032608]
[110.05874634 28.20520592]
[110.67606354 34.21192169]
[107.50000000 40.52515793]
[107.50000000 55.52515793]
[107.50000000 70.52516174]
[107.50000000 85.52516174]
[115.30950928 94.39733124]
[115.07149506 106.21457672]
[106.91107178 114.76509857]
[117.34850311 126.32787323]
[116.52246857 141.51905823]
[105.43480682 151.39830017]
[104.83081818 166.38613892]
[104.52876282 181.38308716]
[104.52876282 196.38308716]
[104.83081818 211.38005066]
[105.43480682 226.36788940]
[106.03879547 241.35572815]
[106.64278412 256.34356689]
[118.42751312 266.87426758]
[119.23080444 282.65811157]
[108.57608795 294.33084106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 74]
[4 73]
[5 72]
[6 71]
[8 70]
[9 69]
[11 68]
[12 67]
[15 64]
[17 61]
[18 60]
[19 59]
[20 58]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[27 47]
[28 46]
[29 45]
[31 43]
[33 41]
[34 40]
[35 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
