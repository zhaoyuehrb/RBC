%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUCCAGGAACGCCUACGUUUGUGGCAGGUGGAGACAGCUUAUUAGGCAGCCUGCUCUCCUCUU\
) } def
/len { sequence length } bind def

/coor [
[97.83296967 111.40916443]
[93.40235138 110.72734070]
[89.24053955 108.27659607]
[74.27762604 109.33074188]
[65.59318542 113.16754913]
[58.59160995 110.06678772]
[43.59572983 110.41842651]
[28.59985352 110.77006531]
[14.98485565 118.82875061]
[2.07969904 111.39193726]
[-12.91617870 111.74357605]
[-27.91205597 112.09521484]
[-42.90793610 112.44685364]
[-57.90381241 112.79849243]
[-71.62068939 121.78622437]
[-86.13888550 114.16033936]
[-86.52332306 97.76570129]
[-72.37852478 89.46770477]
[-58.25545120 97.80261230]
[-43.25957108 97.45097351]
[-28.26369476 97.09933472]
[-13.26781750 96.74769592]
[1.72806048 96.39605713]
[14.27045250 88.36252594]
[28.24821472 95.77418518]
[43.24409103 95.42254639]
[58.23997116 95.07090759]
[73.22348022 94.36782837]
[88.18639374 93.31368256]
[102.98484802 90.86302185]
[117.48880005 87.03738403]
[128.85925293 76.03632355]
[143.13897705 80.27175140]
[157.64291382 76.44610596]
[172.14686584 72.62046814]
[186.65081787 68.79482269]
[201.15475464 64.96918488]
[215.56503296 60.80458450]
[229.87373352 56.30331421]
[244.18241882 51.80204391]
[258.38165283 46.96657944]
[272.46362305 41.79957581]
[276.57214355 26.83629608]
[288.71218872 17.17198563]
[304.21566772 16.52277184]
[317.12118530 25.13829041]
[322.46630859 39.70569611]
[318.19570923 54.62352753]
[305.95153809 64.15557098]
[290.44192505 64.63656616]
[277.63064575 55.88155365]
[263.54864502 61.04855728]
[258.16998291 66.49894714]
[248.68368530 66.11073303]
[234.37500000 70.61199951]
[220.06631470 75.11327362]
[214.43807983 80.30555725]
[204.98040771 79.47312927]
[190.47645569 83.29876709]
[175.97250366 87.12441254]
[161.46856689 90.95005035]
[146.96461487 94.77569580]
[136.63157654 105.50312042]
[121.31443787 101.54132843]
[106.81049347 105.36696625]
[104.95975494 108.27992249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 29]
[4 28]
[6 27]
[7 26]
[8 25]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[30 65]
[31 64]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 56]
[39 55]
[40 54]
[41 52]
[42 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
