%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUCCAGGCCUGGCAUCCCGGUAGCCGCAGCUGUCUUUUCCGGCCCCCGUGCACUCUCCGCCCGAGCGGAGCCCCCCGGCUCGCGGGGAUCGCCCCCGAGCGCUGCGUCCUGCGGGUCACCUAACCCAUUUGUGGCUUCCUCUACCUGUGCUCAGCC\
) } def
/len { sequence length } bind def

/coor [
[51.09934998 515.59857178]
[53.66786575 496.38781738]
[53.96237183 481.39071655]
[54.25687790 466.39361572]
[54.55138397 451.39651489]
[46.79338074 444.64935303]
[43.99824905 434.52636719]
[47.33166885 424.33566284]
[55.91420364 417.54794312]
[56.79726410 402.57397461]
[57.68032837 387.59997559]
[58.41634369 372.61804199]
[51.18467712 359.59683228]
[59.45780563 346.11105347]
[60.04670334 331.12261963]
[48.65070343 325.53887939]
[40.19529724 316.01287842]
[35.97222900 303.94644165]
[36.64695358 291.13320923]
[42.15401459 279.49230957]
[51.70154572 270.78076172]
[63.88494492 266.32824707]
[65.06182861 251.37448120]
[58.34695435 238.07939148]
[67.14315033 224.92881775]
[68.32003784 209.97505188]
[69.49692535 195.02130127]
[70.67381287 180.06753540]
[71.85069275 165.11376953]
[73.02758026 150.16001892]
[74.20446777 135.20625305]
[63.80815887 124.39345551]
[48.81972122 124.98235321]
[33.83128738 125.57124329]
[18.84285164 126.16014099]
[9.41295433 138.63456726]
[-5.84063530 142.07868958]
[-19.71563911 134.86631775]
[-25.66070366 120.40290833]
[-20.86875153 105.51763916]
[-7.60239601 97.23888397]
[7.87439489 99.47560883]
[18.25395393 111.17170715]
[33.24238968 110.58280945]
[48.23082733 109.99391174]
[63.21926117 109.40501404]
[59.36110687 92.98859406]
[63.06163788 75.15864563]
[74.71321106 59.44852066]
[93.05717468 49.40945816]
[84.72361755 36.93741226]
[77.31429291 31.50484848]
[76.35169220 24.13767815]
[61.06805038 24.73560143]
[47.62593460 17.64996147]
[39.58869171 4.87227964]
[39.03007507 -10.11250973]
[46.00003433 -23.27629471]
[37.91296005 -35.90955353]
[29.82588577 -48.54281235]
[21.73880959 -61.17607117]
[13.65173531 -73.80932617]
[5.56466055 -86.44258881]
[-9.23891449 -93.49851990]
[-10.26016998 -109.86583710]
[3.55147409 -118.70724487]
[17.98778343 -110.92745972]
[18.19791985 -94.52966309]
[26.28499413 -81.89640045]
[34.37207031 -69.26314545]
[42.45914459 -56.62988663]
[50.54621887 -43.99662781]
[58.63329315 -31.36336899]
[73.50593567 -32.18194580]
[86.88040161 -25.40111160]
[95.11949158 -12.75264549]
[95.92659760 2.42119336]
[88.98495483 16.05060387]
[97.19566345 28.60385895]
[105.52921295 41.07590485]
[120.50319672 40.19284058]
[127.31305695 26.82774353]
[134.12290955 13.46264553]
[140.93276978 0.09754814]
[147.74263000 -13.26754951]
[148.86216736 -22.38661957]
[154.81964111 -26.82624245]
[161.89059448 -40.05506134]
[168.96154785 -53.28388214]
[176.03250122 -66.51270294]
[174.95542908 -82.87644196]
[188.73684692 -91.76490021]
[203.19960022 -84.03439331]
[203.46565247 -67.63740540]
[189.26132202 -59.44174957]
[182.19036865 -46.21292877]
[175.11941528 -32.98411179]
[168.04846191 -19.75529099]
[161.10772705 -6.45769215]
[154.29786682 6.90740585]
[147.48800659 20.27250290]
[140.67816162 33.63759995]
[133.86830139 47.00270081]
[144.15795898 57.91704559]
[157.90077209 51.90581512]
[161.09455872 36.72097397]
[172.62637329 26.33843994]
[188.06198120 24.75050545]
[201.46609497 32.56776428]
[207.68453979 46.78432465]
[204.32621765 61.93362045]
[192.68244934 72.19044495]
[177.23051453 73.61083984]
[163.91200256 65.64863586]
[150.16918945 71.65986633]
[152.51570129 86.47518921]
[167.44348145 87.94544983]
[182.37124634 89.41570282]
[197.29901123 90.88596344]
[209.35536194 80.66734314]
[225.09904480 82.05006409]
[235.18962097 94.21376801]
[233.64053345 109.94195557]
[221.37081909 119.90336609]
[205.65989685 118.18807983]
[195.82876587 105.81373596]
[180.90098572 104.34347534]
[165.97322083 102.87321472]
[151.04544067 101.40296173]
[142.26242065 122.30991364]
[126.11215973 136.05122375]
[106.92092896 140.65440369]
[89.15822601 136.38314819]
[87.98134613 151.33689880]
[86.80445862 166.29066467]
[85.62757111 181.24441528]
[84.45068359 196.19818115]
[83.27379608 211.15194702]
[82.09690857 226.10569763]
[88.72760773 240.47039795]
[80.01559448 252.55137634]
[78.83870697 267.50512695]
[93.52416992 277.07684326]
[101.32784271 292.67431641]
[100.19433594 309.98928833]
[90.52320862 324.28936768]
[75.03514099 331.71151733]
[74.44624329 346.69995117]
[81.63578033 360.79324341]
[73.40477753 373.20693970]
[76.20586395 381.95706177]
[72.65431213 388.48303223]
[71.77124786 403.45703125]
[70.88818359 418.43099976]
[80.75505829 435.97052002]
[69.54849243 451.69100952]
[69.25399017 466.68811035]
[68.95948029 481.68524170]
[68.66497803 496.68234253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 159]
[3 158]
[4 157]
[5 156]
[9 154]
[10 153]
[11 152]
[12 150]
[14 148]
[15 147]
[22 142]
[23 141]
[25 139]
[26 138]
[27 137]
[28 136]
[29 135]
[30 134]
[31 133]
[32 46]
[33 45]
[34 44]
[35 43]
[50 80]
[51 79]
[53 78]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
[81 103]
[82 102]
[83 101]
[84 100]
[85 99]
[87 98]
[88 97]
[89 96]
[90 95]
[104 115]
[105 114]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
