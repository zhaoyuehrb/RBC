%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUCAGUUUGUUGGCUGCGGCAGCAGGUAGCAAAGUGACGCCGAGGGCCUGAGUGCUCCAGUAGCCACCGCAUCUGGAGAACCAGCGGUUACC\
) } def
/len { sequence length } bind def

/coor [
[31.40164757 149.34959412]
[25.15288925 148.12521362]
[19.50119400 145.26411438]
[14.86362267 140.99748230]
[11.57692337 135.65943909]
[-3.35084796 137.12968445]
[-18.27861977 138.59994507]
[-31.25395203 147.65264893]
[-44.67832565 141.20008850]
[-59.60609818 142.67034912]
[-74.53386688 144.14060974]
[-89.46163940 145.61087036]
[-104.38941193 147.08111572]
[-119.31718445 148.55137634]
[-134.24494934 150.02163696]
[-147.22029114 159.07432556]
[-160.64465332 152.62178040]
[-175.57243347 154.09204102]
[-190.50019836 155.56228638]
[-205.42797852 157.03254700]
[-218.43553162 167.01930237]
[-233.48255920 160.49864197]
[-235.08996582 144.17846680]
[-221.60417175 134.84756470]
[-206.89822388 142.10478210]
[-191.97045898 140.63452148]
[-177.04269409 139.16426086]
[-162.11491394 137.69401550]
[-150.20732117 128.74647522]
[-135.71520996 135.09385681]
[-120.78743744 133.62361145]
[-105.85966492 132.15335083]
[-90.93189240 130.68309021]
[-76.00412750 129.21282959]
[-61.07635498 127.74257660]
[-46.14858246 126.27232361]
[-34.24098587 117.32479095]
[-19.74887657 123.67218018]
[-4.82110500 122.20191956]
[10.10666561 120.73166656]
[27.15371513 103.25028229]
[50.96577835 111.03459167]
[65.00437164 105.75083923]
[79.04295349 100.46708679]
[93.08154297 95.18334198]
[94.21894836 92.68973541]
[96.25468445 90.50199890]
[99.08976746 88.93773651]
[102.51586914 88.27741241]
[106.23023224 88.72776794]
[109.86236572 90.39131927]
[124.57415009 87.46496582]
[139.28593445 84.53861237]
[147.27392578 79.70908356]
[154.52653503 81.76548767]
[169.32618713 79.32205200]
[181.68167114 69.44010925]
[195.49931335 75.00085449]
[210.29896545 72.55741882]
[225.09861755 70.11399078]
[239.89826965 67.67055511]
[254.69792175 65.22712708]
[269.49755859 62.78369141]
[278.70730591 50.22111893]
[293.75106812 47.95395660]
[305.67080688 56.81146622]
[320.47045898 54.36803436]
[332.79699707 43.55192566]
[348.23828125 49.07450104]
[350.90963745 65.25460815]
[338.06298828 75.44754028]
[322.91387939 69.16768646]
[308.11425781 71.61111450]
[299.67422485 83.83003235]
[284.70010376 86.51884460]
[271.94100952 77.58334351]
[257.14135742 80.02677155]
[242.34170532 82.47020721]
[227.54205322 84.91363525]
[212.74240112 87.35707092]
[197.94274902 89.80050659]
[186.64584351 99.50767517]
[171.76962280 94.12170410]
[156.96997070 96.56513214]
[142.21228027 99.25038910]
[127.50050354 102.17674255]
[112.78872681 105.10309601]
[98.36529541 109.22193146]
[84.32670593 114.50567627]
[70.28811646 119.78942871]
[56.24953079 125.07318115]
[55.50609970 131.59620667]
[53.03097534 137.64144897]
[49.02690506 142.76094055]
[43.80917740 146.58061218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 40]
[6 39]
[7 38]
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[15 30]
[17 28]
[18 27]
[19 26]
[20 25]
[42 91]
[43 90]
[44 89]
[45 88]
[51 87]
[52 86]
[53 85]
[55 84]
[56 83]
[58 81]
[59 80]
[60 79]
[61 78]
[62 77]
[63 76]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
