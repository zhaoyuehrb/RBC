%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCACGUGAAGAACGCCAGGGAGCUGUGAGGCAGUGCUGUGUGGUUCCUGCCGUCCGGACUCUUUUUCCUCUACUGAGAUUCAUCUGUGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[117.71347809 296.03225708]
[115.79531860 281.15539551]
[113.87715912 266.27856445]
[104.57585907 254.64520264]
[110.48490906 239.96890259]
[108.56674957 225.09205627]
[99.26544189 213.45869446]
[105.17449188 198.78239441]
[103.25634003 183.90554810]
[101.33818054 169.02870178]
[99.42002106 154.15184021]
[97.50186920 139.27499390]
[85.39415741 136.54360962]
[74.73931122 130.17720032]
[66.59716034 120.80904388]
[61.77761841 109.37099457]
[60.76008606 97.00080872]
[63.64577866 84.92894745]
[70.14765167 74.35621643]
[79.61896515 66.33429718]
[74.43849182 52.25727081]
[69.25801086 38.18024445]
[64.07753754 24.10321999]
[58.89706421 10.02619267]
[53.71658707 -4.05083370]
[48.31115341 -18.04302025]
[42.68214798 -31.94677162]
[37.05314255 -45.85052109]
[30.81791687 -52.78696823]
[31.47443199 -60.29123688]
[26.29395676 -74.36826324]
[20.88852119 -88.36045074]
[15.25951672 -102.26419830]
[9.63051128 -116.16795349]
[4.00150633 -130.07170105]
[-1.62749887 -143.97544861]
[-16.38239098 -154.84562683]
[-13.49934292 -172.07441711]
[-19.57109261 -185.79061890]
[-25.64284325 -199.50680542]
[-39.20116425 -208.73197937]
[-37.72141266 -225.06422424]
[-22.72582245 -231.70233154]
[-9.64057827 -221.81758118]
[-11.92665386 -205.57855225]
[-5.85490370 -191.86236572]
[0.21684663 -178.14617920]
[11.47924805 -173.42022705]
[16.59636307 -161.88735962]
[12.27625275 -149.60446167]
[17.90525818 -135.70071411]
[23.53426170 -121.79695892]
[29.16326714 -107.89320374]
[34.79227448 -93.98945618]
[40.32340622 -88.87558746]
[40.37098312 -79.54873657]
[45.55146027 -65.47171021]
[50.95689392 -51.47952652]
[56.58589935 -37.57577515]
[62.21490479 -23.67202568]
[67.74603271 -18.55815315]
[67.79360962 -9.23130989]
[72.97409058 4.84571695]
[78.15456390 18.92274284]
[83.33503723 32.99977112]
[88.51551819 47.07679749]
[93.69599152 61.15382385]
[109.97111511 61.92976379]
[124.53704834 69.23152161]
[134.89695740 81.80745697]
[139.27499390 97.50186920]
[154.15184021 99.42002106]
[169.02870178 101.33818054]
[183.94607544 94.52614594]
[197.14538574 104.25806427]
[195.04830933 120.52257538]
[179.81213379 126.58814240]
[167.11053467 116.21502686]
[152.23368835 114.29687500]
[137.35684204 112.37871552]
[127.82773590 127.82773590]
[112.37871552 137.35684204]
[114.29687500 152.23368835]
[116.21502686 167.11053467]
[118.13318634 181.98739624]
[120.05134583 196.86424255]
[129.48985291 209.56169128]
[123.44359589 223.17388916]
[125.36175537 238.05075073]
[134.80026245 250.74819946]
[128.75401306 264.36041260]
[130.67216492 279.23724365]
[132.59033203 294.11410522]
[144.36251831 305.01342773]
[143.03727722 321.00164795]
[129.63122559 329.81396484]
[114.42833710 324.69033813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[5 89]
[6 88]
[8 86]
[9 85]
[10 84]
[11 83]
[12 82]
[20 67]
[21 66]
[22 65]
[23 64]
[24 63]
[25 62]
[26 60]
[27 59]
[28 58]
[30 57]
[31 56]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[38 47]
[39 46]
[40 45]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
