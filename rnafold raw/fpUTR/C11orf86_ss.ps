%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGGGUGGAGGCACUGGGCCACCUCAGAGGGCCAGUGUCUUGCUGAGGGGCCGGAGCAGUCCUGUGCCUGCAGCCUCCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[119.83783722 316.73977661]
[130.79238892 305.87695312]
[127.56782532 291.22763062]
[122.94835663 285.23452759]
[124.50141144 275.99151611]
[121.80783081 261.23535156]
[111.91084290 250.10435486]
[117.04425049 235.13911438]
[114.35066986 220.38293457]
[104.45368195 209.25195312]
[109.58708191 194.28669739]
[106.89350891 179.53053284]
[104.19992828 164.77435303]
[101.50634766 150.01817322]
[98.81276703 135.26200867]
[96.11918640 120.50583649]
[80.07437134 111.52187347]
[76.23641968 91.72161865]
[89.96877289 74.59743500]
[82.70452881 61.47376633]
[75.44027710 48.35009766]
[68.17603302 35.22642517]
[61.11874390 29.05875397]
[60.89620209 21.49521446]
[54.11048508 8.11784267]
[47.32477188 -5.25952864]
[40.53905487 -18.63689995]
[33.75334167 -32.01427078]
[26.96762466 -45.39164352]
[19.94149780 -58.64432144]
[12.67725086 -71.76799011]
[5.41300344 -84.89166260]
[-1.85124385 -98.01533508]
[-9.11549091 -111.13899994]
[-23.43852615 -119.12541199]
[-23.41302872 -135.52453613]
[-9.06522942 -143.46636963]
[4.84508705 -134.78102112]
[4.00817871 -118.40325165]
[11.27242565 -105.27957916]
[18.53667259 -92.15590668]
[25.80092049 -79.03224182]
[33.06516647 -65.90856934]
[39.20053864 -61.47981644]
[40.34499741 -52.17735672]
[47.13071060 -38.79998779]
[53.91642761 -25.42261505]
[60.70214081 -12.04524422]
[67.48786163 1.33212733]
[74.27357483 14.70949841]
[81.29969788 27.96217918]
[88.56394958 41.08584976]
[95.82819366 54.20951843]
[103.09244537 67.33319092]
[117.30724335 72.12271118]
[131.03236389 66.07118225]
[144.75749207 60.01965714]
[154.00263977 46.47494507]
[170.33268738 47.97877121]
[176.94868469 62.98412704]
[167.04464722 76.05478668]
[150.80902100 73.74478149]
[137.08389282 79.79631042]
[123.35876465 85.84783173]
[123.40605927 105.70223236]
[110.87535858 117.81225586]
[113.56893921 132.56843567]
[116.26251984 147.32460022]
[118.95610046 162.08078003]
[121.64968109 176.83694458]
[124.34325409 191.59312439]
[134.43290710 203.77957153]
[129.10684204 217.68936157]
[131.80041504 232.44552612]
[141.89007568 244.63197327]
[136.56401062 258.54177856]
[139.25758362 273.29794312]
[142.21713257 288.00308228]
[145.44169617 302.65237427]
[159.94496155 307.91152954]
[169.28439331 320.19073486]
[170.47981262 335.57171631]
[163.14978027 349.14645386]
[149.63325500 356.58334351]
[134.24331665 355.50924683]
[121.89086151 346.26693726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 79]
[3 78]
[5 77]
[6 76]
[8 74]
[9 73]
[11 71]
[12 70]
[13 69]
[14 68]
[15 67]
[16 66]
[19 54]
[20 53]
[21 52]
[22 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
