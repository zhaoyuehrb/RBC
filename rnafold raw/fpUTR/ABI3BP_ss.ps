%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAGCCGCCCGCCUCUGUCACUGGGAGACAGUCCACUUAAAUGCAGCUCCAGGGUUGCGAGGCACCCACCAGCAUCAUUCCCC\
) } def
/len { sequence length } bind def

/coor [
[157.33097839 301.62442017]
[153.00949097 287.26040649]
[148.68800354 272.89639282]
[144.36651611 258.53237915]
[129.41706848 258.25863647]
[115.26500702 253.37097168]
[103.30039978 244.33613586]
[94.70256042 232.02890015]
[90.32382202 217.64733887]
[90.60504150 202.59622192]
[95.53125763 188.34979248]
[104.63193512 176.30735779]
[117.02584076 167.65585327]
[112.70435333 153.29185486]
[108.38286591 138.92784119]
[104.06137848 124.56382751]
[99.73989105 110.19982147]
[95.72608185 112.09895325]
[90.59906769 112.27349091]
[85.10245514 110.25975037]
[80.14214325 105.90473175]
[76.66166687 99.41535950]
[63.32153702 92.55672455]
[49.98140335 85.69808960]
[36.64126968 78.83945465]
[20.98756218 82.35242462]
[8.57183552 72.19224548]
[8.91837406 56.15293121]
[21.76134300 46.53847885]
[37.24871826 50.72426987]
[43.49990463 65.49932098]
[56.84003830 72.35795593]
[70.18016815 79.21659088]
[83.52030182 86.07522583]
[75.10144043 73.66060638]
[64.01367950 63.55805969]
[59.84778976 49.14815521]
[63.83440018 34.68762207]
[74.79584503 24.44815445]
[89.49407959 21.45451927]
[103.58720398 26.59104729]
[112.91205597 38.34039307]
[114.71405029 53.23175812]
[108.46054840 66.86656952]
[105.56769562 81.58497620]
[115.16279602 70.05526733]
[124.75788879 58.52556229]
[134.35298157 46.99585342]
[143.94807434 35.46614838]
[153.54316711 23.93643951]
[155.79052734 7.69201136]
[171.08212280 1.76755905]
[183.68727112 12.25765133]
[180.63888550 28.37098122]
[165.07287598 33.53153610]
[155.47778320 45.06124115]
[145.88269043 56.59095001]
[136.28759766 68.12065887]
[126.69249725 79.65036011]
[117.09740448 91.18006897]
[114.10390472 105.87833405]
[118.42539215 120.24234009]
[122.74687195 134.60635376]
[127.06835938 148.97036743]
[131.38984680 163.33436584]
[146.49995422 163.71115112]
[160.73452759 168.73304749]
[172.70370483 177.89640808]
[181.24296570 190.29383850]
[185.52638245 204.70407104]
[185.14654541 219.71229553]
[180.15321350 233.84901428]
[171.04728699 245.73397827]
[158.73051453 254.21089172]
[163.05200195 268.57489014]
[167.37348938 282.93890381]
[171.69497681 297.30291748]
[186.55395508 301.45196533]
[196.79389954 312.99087524]
[199.14729309 328.23770142]
[192.86317444 342.32717896]
[179.94677734 350.76342773]
[164.51968384 350.85446167]
[151.50460815 342.57122803]
[145.05464172 328.55691528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[3 75]
[4 74]
[13 65]
[14 64]
[15 63]
[16 62]
[17 61]
[22 34]
[23 33]
[24 32]
[25 31]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
