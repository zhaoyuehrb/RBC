%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAGAUUCCGCGGGAGAGCGGCAGAGAUACCGCGAUAUUUGGGAGCGGCCCCGAGACGCGCCUGGCGCGGAUCCUAAAUCCCGACAGCUUUAUAGAGCCCAGGCCUGGCAGGCUCCCAGAACUUGAAGCCACCAGACCCCAC\
) } def
/len { sequence length } bind def

/coor [
[88.14359283 189.91471863]
[99.33480835 178.99269104]
[98.03646851 164.04898071]
[96.73812103 149.10527039]
[91.16658020 148.41424561]
[85.70999908 147.09313965]
[80.43939209 145.15916443]
[75.42334747 142.63749695]
[70.72713470 139.56094360]
[66.41188812 135.96952820]
[62.53375626 131.91000366]
[49.76542664 139.78210449]
[36.99709702 147.65419006]
[24.22876930 155.52627563]
[11.46043873 163.39836121]
[12.95496750 178.54853821]
[7.74463844 192.78720093]
[-3.08681083 203.30859375]
[-17.35370636 208.06430054]
[-32.20935059 206.16184998]
[-44.71400452 198.03172302]
[-52.01948929 212.71374512]
[-68.40174866 213.45782471]
[-77.00811768 199.49850464]
[-68.98509979 185.19595337]
[-52.58609390 185.26338196]
[-54.23341751 170.43936157]
[-49.26063919 156.31205750]
[-38.60355759 145.70132446]
[-24.33815575 140.74969482]
[-9.27632999 142.48992920]
[3.58835149 150.63003540]
[16.35668182 142.75794983]
[29.12501144 134.88584900]
[41.89334106 127.01377106]
[54.66167068 119.14167786]
[51.31663895 92.79594421]
[62.14840698 68.54804993]
[84.00271606 53.45910263]
[110.51550293 51.92305756]
[115.91629791 37.92908096]
[121.31708527 23.93510056]
[126.71788025 9.94112301]
[132.11868286 -4.05285454]
[137.51947021 -18.04683304]
[142.92027283 -32.04080963]
[148.32106018 -46.03479004]
[153.72184753 -60.02876663]
[150.42759705 -78.11099243]
[164.42953491 -88.63735962]
[169.52589417 -102.74505615]
[174.62225342 -116.85276031]
[173.66763306 -122.13601685]
[174.77209473 -126.77079010]
[177.32666016 -130.06892395]
[180.53514099 -131.69297791]
[186.53706360 -145.43986511]
[185.85980225 -149.90075684]
[186.60679626 -153.92123413]
[188.45268250 -157.09713745]
[190.97206116 -159.17689514]
[193.69995117 -160.08120728]
[200.86923218 -173.25698853]
[208.03849792 -186.43278503]
[215.20777893 -199.60858154]
[222.37705994 -212.78436279]
[229.54634094 -225.96015930]
[203.85366821 -260.84713745]
[206.44061279 -275.62237549]
[204.83251953 -284.69119263]
[209.24697876 -290.68820190]
[212.15339661 -305.40393066]
[215.05982971 -320.11965942]
[217.96626282 -334.83538818]
[210.26557922 -348.90945435]
[216.60043335 -363.64880371]
[232.11129761 -367.74670410]
[244.89955139 -358.05960083]
[245.15513611 -342.01858521]
[232.68199158 -331.92895508]
[229.77555847 -317.21322632]
[226.86912537 -302.49749756]
[223.96270752 -287.78176880]
[221.21585083 -273.03543091]
[218.62892151 -258.26019287]
[224.97006226 -254.25521851]
[238.24801636 -261.23345947]
[237.65237427 -246.24526978]
[243.99351501 -242.24029541]
[256.22357178 -250.92509460]
[268.45364380 -259.60989380]
[280.68368530 -268.29470825]
[287.02011108 -283.42022705]
[303.31942749 -285.22680664]
[312.81433105 -271.85598755]
[305.73724365 -257.06250000]
[289.36849976 -256.06463623]
[277.13842773 -247.37985229]
[264.90838623 -238.69505310]
[252.67832947 -230.01023865]
[242.72213745 -218.79087830]
[235.55285645 -205.61508179]
[228.38357544 -192.43930054]
[221.21429443 -179.26350403]
[214.04501343 -166.08772278]
[206.87573242 -152.91192627]
[200.28395081 -139.43794250]
[194.28201294 -125.69105530]
[188.72994995 -111.75640106]
[183.63359070 -97.64870453]
[178.53723145 -83.54100800]
[183.39688110 -72.41293335]
[179.20895386 -60.58792114]
[167.71583557 -54.62797165]
[162.31503296 -40.63399506]
[156.91424561 -26.64001656]
[151.51344299 -12.64603806]
[146.11265564 1.34793985]
[140.71186829 15.34191799]
[135.31106567 29.33589554]
[129.91027832 43.32987213]
[124.50947571 57.32385254]
[130.94609070 61.73372650]
[136.60485840 67.10543823]
[141.34355164 73.30396271]
[145.04307556 80.17350769]
[147.61041260 87.54138947]
[148.98104858 95.22242737]
[149.12052917 103.02355194]
[148.02534485 110.74867249]
[145.72303772 118.20362854]
[142.27145386 125.20102692]
[137.75737000 131.56498718]
[132.29425049 137.13555908]
[126.01939392 141.77270508]
[119.09053802 145.35989380]
[111.68183136 147.80693054]
[112.98017120 162.75064087]
[114.27851105 177.69435120]
[127.18568420 186.52265930]
[131.34861755 201.59594727]
[124.80169678 215.79705811]
[110.63618469 222.42068481]
[95.54060364 218.33934021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 139]
[3 138]
[4 137]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[21 26]
[40 122]
[41 121]
[42 120]
[43 119]
[44 118]
[45 117]
[46 116]
[47 115]
[48 114]
[50 111]
[51 110]
[52 109]
[56 108]
[57 107]
[62 106]
[63 105]
[64 104]
[65 103]
[66 102]
[67 101]
[68 85]
[69 84]
[71 83]
[72 82]
[73 81]
[74 80]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
