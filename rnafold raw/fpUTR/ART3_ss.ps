%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCUGUCUCAGCUCUCACUGUCAACAACAUCCCAUCCUGAAGACUUGCUUACCACAACUGAGAGUGGGGAGUCAGUUUGAGGCCUAGCAUCACUUAAACUUCCUCCAAAGGCACAAAAGCCAGAAGAGAAAA\
) } def
/len { sequence length } bind def

/coor [
[83.41366577 198.35479736]
[91.75102997 184.23316956]
[91.40199280 169.23722839]
[91.05296326 154.24128723]
[90.52947235 139.25042725]
[89.83158875 124.26667023]
[77.39602661 115.87877655]
[63.24189758 120.84472656]
[49.08776855 125.81067657]
[34.93364334 130.77662659]
[20.83825302 135.90693665]
[6.80351067 141.20089722]
[-7.23123217 146.49484253]
[-7.10947943 161.63455200]
[-12.16535664 175.87568665]
[-21.77046394 187.50592041]
[-34.75064468 195.13381958]
[-49.52949524 197.85540771]
[-64.31980896 195.36119080]
[-77.33969879 187.97122192]
[-87.02726746 176.59422302]
[-101.06201172 181.88818359]
[-115.09675598 187.18212891]
[-122.99073792 201.14868164]
[-138.85418701 203.54254150]
[-150.51802063 192.52734375]
[-149.03474426 176.55300903]
[-135.54219055 167.87367249]
[-120.39070892 173.14739990]
[-106.35597229 167.85343933]
[-92.32122803 162.55947876]
[-92.56083679 147.61866760]
[-87.66508484 133.47084045]
[-78.20661163 121.82988739]
[-65.31202698 114.11295319]
[-50.52770233 111.26798248]
[-35.63436890 113.65730286]
[-22.43261147 121.01159668]
[-12.52519035 132.46011353]
[1.50955224 127.16614532]
[15.54429531 121.87219238]
[20.73998642 116.51919556]
[29.96769142 116.62250519]
[44.12181854 111.65655518]
[58.27594757 106.69059753]
[72.43007660 101.72464752]
[57.92576981 105.54893494]
[44.11541748 99.69452667]
[36.77842331 86.61138916]
[38.98520279 71.77460480]
[49.81225204 61.39312744]
[64.72863007 59.81144333]
[77.49206543 67.69145203]
[82.76132202 81.73677063]
[78.62676239 67.31784058]
[74.49219513 52.89891815]
[70.35763550 38.47999191]
[55.73084641 33.29958344]
[46.97026062 20.49209595]
[47.44449997 4.98226976]
[56.97121429 -7.26605082]
[71.88718414 -11.54313660]
[86.45691681 -6.20436049]
[95.07804871 6.69740915]
[94.43558502 22.20117950]
[84.77656555 34.34543228]
[88.91112518 48.76435852]
[93.04568481 63.18328476]
[97.18024445 77.60221100]
[111.21498871 82.89616394]
[123.84236145 74.79990387]
[136.46974182 66.70364380]
[149.09710693 58.60738754]
[152.58891296 43.42696762]
[165.51019287 35.39609146]
[179.96089172 38.81854248]
[192.58825684 30.72228241]
[205.21563721 22.62602234]
[217.84300232 14.52976227]
[230.47038269 6.43350220]
[243.09776306 -1.66275775]
[255.72512817 -9.75901794]
[268.35250854 -17.85527802]
[266.96182251 -33.09747696]
[272.82458496 -47.23561096]
[284.59350586 -57.02084351]
[299.56423950 -60.20459366]
[314.29656982 -56.05526733]
[325.40512085 -45.52634048]
[330.33728027 -31.03729057]
[327.95959473 -15.91759205]
[318.81851196 -3.64164042]
[305.01455688 2.96963954]
[289.71975708 2.39702439]
[276.44876099 -5.22790337]
[263.82138062 2.86835647]
[251.19401550 10.96461678]
[238.56665039 19.06087685]
[225.93927002 27.15713692]
[213.31188965 35.25339508]
[200.68452454 43.34965515]
[188.05714417 51.44591522]
[185.13647461 66.00631714]
[172.44584656 74.39695740]
[157.19337463 71.23476410]
[144.56599426 79.33102417]
[131.93862915 87.42728424]
[119.31124878 95.52354431]
[125.09328461 95.69197845]
[130.90176392 96.51624298]
[136.68006897 97.99886322]
[142.37150574 100.13803101]
[153.28210449 110.43165588]
[164.19271851 120.72528076]
[179.98103333 120.01515198]
[191.59068298 130.73857117]
[192.13385010 146.53352356]
[181.28829956 158.02914429]
[165.48847961 158.40528870]
[154.10816956 147.43879700]
[153.89909363 131.63587952]
[142.98847961 121.34226227]
[132.07788086 111.04863739]
[125.26224518 114.17867279]
[123.86802673 129.11373901]
[111.63098145 120.43875122]
[104.81534576 123.56879425]
[105.51322174 138.55255127]
[109.06577301 147.06962585]
[106.04889679 153.89225769]
[106.39793396 168.88819885]
[106.74697113 183.88414001]
[115.73231506 197.60256958]
[108.10391235 212.11944580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 132]
[3 131]
[4 130]
[5 128]
[6 127]
[7 46]
[8 45]
[9 44]
[10 43]
[11 41]
[12 40]
[13 39]
[21 31]
[22 30]
[23 29]
[54 69]
[55 68]
[56 67]
[57 66]
[70 108]
[71 107]
[72 106]
[73 105]
[76 102]
[77 101]
[78 100]
[79 99]
[80 98]
[81 97]
[82 96]
[83 95]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
