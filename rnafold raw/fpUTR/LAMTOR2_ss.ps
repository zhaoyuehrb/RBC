%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGGGCGGGGUUGAGUCGGAACCACAAUAGCCAGGCGAAGAAACUACAACUCCCAGGGCGUCCCGGAGCAGGCCAACGGGACUACGGGAAGCAGCGGGCAGCGGCCCGCGGGAGGCACCUCGGAGAUCUGGGUGCAAAAGCCCAGGGUUAGGAACCGUAGGC\
) } def
/len { sequence length } bind def

/coor [
[46.90128708 254.07936096]
[28.89554405 257.19482422]
[21.02764893 269.96572876]
[13.15975380 282.73663330]
[5.29185820 295.50756836]
[8.72780037 310.70071411]
[0.56670892 323.54016113]
[-13.93881989 326.72216797]
[-14.58988190 342.52996826]
[-27.85316467 349.30749512]
[-35.72105789 362.07839966]
[-31.82481956 377.39489746]
[-39.97185898 390.93746948]
[-55.32868958 394.67153931]
[-68.78437042 386.38177490]
[-72.35588074 370.98632812]
[-63.92432022 357.61904907]
[-48.49197388 354.21051025]
[-40.62407684 341.43957520]
[-40.53577805 326.54525757]
[-26.70973396 318.85427856]
[-30.39146996 304.46746826]
[-22.59423256 291.40386963]
[-7.47905493 287.63964844]
[0.38884062 274.86874390]
[8.25673580 262.09783936]
[16.12463188 249.32691956]
[11.12788486 239.01150513]
[11.75833988 227.44662476]
[17.97443581 217.53187561]
[28.31962967 211.80950928]
[40.26216888 211.81286621]
[48.61055756 199.35075378]
[56.95894623 186.88862610]
[54.92462921 174.93554688]
[61.81642532 164.47547913]
[74.38244629 161.43847656]
[82.96658325 149.13755798]
[73.63982391 143.94819641]
[65.70099640 137.04992676]
[59.44919586 128.78746033]
[55.10206985 119.55455017]
[52.78860092 109.77538300]
[52.54600143 99.88526917]
[54.32073212 90.31127167]
[57.97348785 81.45377350]
[63.28785324 73.66973877]
[69.98208618 67.25836182]
[77.72348022 62.44972610]
[86.14455414 59.39678955]
[94.86029816 58.17110443]
[103.48570251 58.76223755]
[107.43691254 44.29199600]
[111.38812256 29.82175255]
[115.33933258 15.35150814]
[111.51044464 0.00060521]
[122.32702637 -10.23906422]
[126.27823639 -24.70930862]
[130.22944641 -39.17955017]
[134.04272461 -53.68675613]
[137.71771240 -68.22959900]
[133.59725952 -83.50482178]
[144.21693420 -93.94857025]
[147.89192200 -108.49141693]
[151.56692505 -123.03426361]
[155.24191284 -137.57711792]
[153.95829773 -152.52209473]
[147.85723877 -166.22526550]
[133.01470947 -171.65432739]
[126.43423462 -186.02349854]
[132.01991272 -200.80780029]
[146.45783997 -207.23597717]
[161.18226624 -201.49430847]
[167.45744324 -186.98922729]
[161.56042480 -172.32632446]
[167.66146851 -158.62313843]
[175.02593994 -160.04252625]
[189.75486755 -162.88128662]
[197.11933899 -164.30067444]
[197.69039917 -179.28981018]
[186.76614380 -190.71066284]
[187.20082092 -206.50897217]
[198.73654175 -217.31187439]
[214.52937317 -216.71018982]
[225.20970154 -205.06089783]
[224.44108582 -189.27531433]
[212.67951965 -178.71873474]
[212.10845947 -163.72961426]
[218.96005249 -160.67909241]
[225.06109619 -174.38227844]
[226.62921143 -189.30007935]
[241.30151367 -192.41839600]
[248.80102539 -179.42773438]
[238.76428223 -168.28121948]
[232.66323853 -154.57804871]
[239.51483154 -151.52751160]
[250.27180481 -161.98158264]
[261.02877808 -172.43563843]
[271.78576660 -182.88970947]
[282.54272461 -193.34376526]
[293.29971313 -203.79783630]
[297.24685669 -219.71487427]
[313.07775879 -223.99444580]
[324.50692749 -212.23410034]
[319.77703857 -196.53186035]
[303.75378418 -193.04086304]
[292.99679565 -182.58679199]
[282.23980713 -172.13273621]
[271.48284912 -161.67866516]
[260.72586060 -151.22460938]
[249.96888733 -140.77053833]
[169.78475952 -133.90211487]
[166.10977173 -119.35926819]
[162.43476868 -104.81642151]
[158.75978088 -90.27357483]
[163.14309692 -76.03855896]
[152.26055908 -64.55460358]
[148.58557129 -50.01175690]
[150.00202942 -42.72324371]
[144.69969177 -35.22834396]
[140.74847412 -20.75809860]
[136.79727173 -6.28785563]
[140.90876770 8.02803802]
[129.80957031 19.30271721]
[125.85836792 33.77296066]
[121.90715790 48.24320221]
[117.95594788 62.71344757]
[138.37350464 76.63865662]
[148.44628906 101.37095642]
[142.82128906 129.51228333]
[155.51670837 137.50140381]
[168.21214294 145.49052429]
[180.90757751 153.47962952]
[193.60301208 161.46875000]
[206.29844666 169.45787048]
[221.65133667 165.70761108]
[235.11573792 173.98320007]
[238.70346069 189.37489319]
[230.28598022 202.75103760]
[214.85722351 206.17582703]
[201.57081604 197.61740112]
[198.30932617 182.15330505]
[185.61390686 174.16418457]
[172.91847229 166.17506409]
[160.22303772 158.18594360]
[147.52760315 150.19683838]
[134.83216858 142.20771790]
[123.68499756 152.24467468]
[130.30331421 165.70565796]
[136.92163086 179.16662598]
[143.53994751 192.62760925]
[155.95448303 204.17384338]
[148.29615784 219.29953003]
[131.64155579 216.12771606]
[130.07896423 199.24592590]
[123.46064758 185.78494263]
[116.84233093 172.32397461]
[110.22401428 158.86299133]
[95.26750183 157.72169495]
[86.68335724 170.02261353]
[85.55444336 188.38111877]
[69.42106628 195.23701477]
[61.07267380 207.69914246]
[52.72428513 220.16125488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[4 25]
[5 24]
[8 21]
[10 19]
[11 18]
[32 164]
[33 163]
[34 162]
[37 160]
[38 159]
[52 127]
[53 126]
[54 125]
[55 124]
[57 122]
[58 121]
[59 120]
[60 118]
[61 117]
[63 115]
[64 114]
[65 113]
[66 112]
[67 76]
[68 75]
[79 88]
[80 87]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
[130 147]
[131 146]
[132 145]
[133 144]
[134 143]
[135 142]
[148 158]
[149 157]
[150 156]
[151 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
