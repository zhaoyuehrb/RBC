%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUGGCGCUCCGGCCGCUUUGUCGAAAGCCGGCCCGACUGGAGCAGGACGAAGGGGGAGGGUCUCGAGGCCGAGUCCUGUUCUUCUGAGGGACGGACCCCAGCUGGGGUGGAAAAGCAGUACCAGAGAGCCUCCGAGGCGCGCGGUGCCAACC\
) } def
/len { sequence length } bind def

/coor [
[139.84391785 464.53839111]
[138.63691711 449.58703613]
[137.42991638 434.63568115]
[136.07243347 419.69723511]
[134.56460571 404.77322388]
[133.05677795 389.84918213]
[131.39875793 374.94110107]
[129.59069824 360.05047607]
[127.78265381 345.15985107]
[125.97460175 330.26919556]
[124.16654968 315.37857056]
[114.95156097 303.67672729]
[120.96902466 289.04455566]
[119.16097260 274.15390015]
[117.35292053 259.26327515]
[105.50626373 250.30825806]
[103.46052551 235.23280334]
[112.93369293 222.86766052]
[111.12564087 207.97702026]
[109.31758881 193.08639526]
[107.50954437 178.19575500]
[105.70149231 163.30513000]
[96.48650360 151.60327148]
[102.50395966 136.97109985]
[89.60196686 132.55851746]
[80.17520142 124.22302246]
[75.16757202 113.83059692]
[74.67329407 103.34768677]
[78.00901031 94.49398804]
[83.91521454 88.46627045]
[90.84397125 85.77684784]
[82.82698059 73.09899902]
[74.80998993 60.42114639]
[60.89478302 52.89270020]
[60.63198090 38.00041199]
[52.61499405 25.32256126]
[44.59800720 12.64470959]
[28.11222458 13.48853588]
[13.52618790 5.96152115]
[4.76263618 -7.80588913]
[4.12484694 -24.01962280]
[11.69198608 -38.26737595]
[3.42132998 -50.78121948]
[-4.84932661 -63.29506302]
[-13.11998272 -75.80890656]
[-21.39063835 -88.32274628]
[-29.66129494 -100.83658600]
[-37.93195343 -113.35043335]
[-46.20261002 -125.86427307]
[-54.47326279 -138.37811279]
[-62.74391937 -150.89195251]
[-76.19676208 -152.05862427]
[-86.36109924 -160.64929199]
[-89.65517426 -173.34225464]
[-85.08882141 -185.42680359]
[-93.10580444 -198.10464478]
[-111.69595337 -201.51387024]
[-121.76917267 -217.12904358]
[-117.36380005 -234.85432434]
[-125.88477325 -247.19908142]
[-134.40574646 -259.54382324]
[-148.37944031 -269.14447021]
[-143.02229309 -285.22979736]
[-126.08259583 -284.53488159]
[-122.06098175 -268.06481934]
[-113.54001617 -255.72004700]
[-105.01904297 -243.37528992]
[-93.55078125 -243.79331970]
[-83.20989990 -238.54583740]
[-76.64098358 -228.84417725]
[-75.58692932 -217.05461121]
[-80.42795563 -206.12164307]
[-72.41096497 -193.44378662]
[-55.88365555 -190.47448730]
[-46.40795898 -176.20523071]
[-50.23007965 -159.16261292]
[-41.95942307 -146.64877319]
[-33.68876648 -134.13493347]
[-25.41810989 -121.62108612]
[-17.14745331 -109.10724640]
[-8.87679672 -96.59339905]
[-0.60614067 -84.07955933]
[7.66451550 -71.56571960]
[15.93517208 -59.05187607]
[24.20582771 -46.53803253]
[37.78506851 -48.25775528]
[50.83928680 -43.92654419]
[60.79281235 -34.33869171]
[65.65580750 -21.33149147]
[64.42190552 -7.43333817]
[57.27585602 4.62772179]
[65.29284668 17.30557251]
[73.30982971 29.98342514]
[86.65161133 36.60506439]
[87.48784637 52.40415573]
[95.50482941 65.08200836]
[103.52182007 77.75985718]
[118.04906464 81.49606323]
[131.18783569 74.25917053]
[144.32661438 67.02227783]
[157.46539307 59.78538513]
[170.60415649 52.54849625]
[178.62039185 38.24213028]
[195.01942444 38.30178833]
[202.93135071 52.66610336]
[194.21705627 66.55829620]
[177.84104919 65.68727112]
[164.70228577 72.92416382]
[151.56350708 80.16104889]
[138.42472839 87.39794159]
[125.28595734 94.63483429]
[128.58168030 109.26829529]
[143.55432129 110.17397308]
[151.95581055 97.31665802]
[165.66760254 90.39695740]
[181.00129700 91.27624512]
[193.83221436 99.71799469]
[200.70890808 113.45141602]
[199.78155518 128.78228760]
[191.29963684 141.58668518]
[177.54472351 148.42028809]
[162.21684265 147.44488525]
[149.43908691 138.92286682]
[142.64863586 125.14660645]
[127.67600250 124.24092865]
[117.39459229 135.16304016]
[126.73890686 147.92996216]
[120.59212494 161.49707031]
[122.40017700 176.38771057]
[124.20822144 191.27833557]
[126.01627350 206.16897583]
[127.82432556 221.05960083]
[139.98139954 230.79837036]
[141.60289001 245.92533875]
[132.24356079 257.45523071]
[134.05160522 272.34585571]
[135.85964966 287.23651123]
[145.20396423 300.00341797]
[139.05718994 313.57052612]
[140.86523438 328.46115112]
[142.67327881 343.35180664]
[144.48133850 358.24243164]
[146.28938293 373.13305664]
[150.45159912 381.33001709]
[147.98080444 388.34136963]
[149.48863220 403.26538086]
[150.99645996 418.18939209]
[154.99276733 426.46853638]
[152.38128662 433.42868042]
[153.58827209 448.38003540]
[154.79527283 463.33142090]
[166.03466797 474.77935791]
[163.94898987 490.68624878]
[150.13821411 498.84970093]
[135.19676208 493.00738525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 147]
[5 146]
[6 145]
[7 143]
[8 142]
[9 141]
[10 140]
[11 139]
[13 137]
[14 136]
[15 135]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[24 126]
[31 97]
[32 96]
[33 95]
[35 93]
[36 92]
[37 91]
[42 85]
[43 84]
[44 83]
[45 82]
[46 81]
[47 80]
[48 79]
[49 78]
[50 77]
[51 76]
[55 73]
[56 72]
[59 67]
[60 66]
[61 65]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
