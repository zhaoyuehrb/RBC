%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCCCAGAUCUGCACCGCCAGCCGCCGGGAGCUCCGGGCUCCGGGCGUAGAGGCUGCGCUGUCAC\
) } def
/len { sequence length } bind def

/coor [
[77.42095184 263.65542603]
[63.63197327 270.29791260]
[48.33592606 269.75988770]
[35.04772949 262.16497803]
[26.82091522 249.25848389]
[25.54594803 234.00616455]
[31.51580238 219.91291809]
[43.35865021 210.21728516]
[58.35309219 207.14721680]
[62.45803833 192.71983337]
[66.56298065 178.29244995]
[60.90808868 167.35836792]
[64.46742249 155.15142822]
[75.81356049 148.56213379]
[80.58043671 134.33972168]
[77.28884888 119.81337738]
[89.01062775 109.18743896]
[86.41860199 95.44797516]
[96.76696014 86.04568481]
[101.53383636 71.82328033]
[106.30070496 57.60086823]
[96.34111786 44.13474274]
[96.24465179 27.55000305]
[105.85498047 14.23493576]
[121.31404877 9.20428753]
[125.41899109 -5.22309685]
[129.52394104 -19.65048218]
[133.62887573 -34.07786560]
[129.96354675 -49.46863937]
[140.88845825 -59.59264374]
[144.99340820 -74.02002716]
[149.09834290 -88.44741058]
[153.20329285 -102.87479401]
[157.30824280 -117.30217743]
[161.41317749 -131.72956848]
[159.93225098 -148.61871338]
[175.75138855 -154.71714783]
[185.99067688 -141.20443726]
[175.84057617 -127.62461853]
[171.73562622 -113.19723511]
[167.63067627 -98.76985168]
[163.52574158 -84.34246826]
[159.42079163 -69.91508484]
[155.31584167 -55.48769760]
[159.27479553 -41.12886810]
[148.05625916 -29.97292137]
[143.95132446 -15.54553699]
[139.84637451 -1.11815190]
[135.74142456 13.30923271]
[145.02178955 23.16646194]
[148.15954590 36.44870758]
[144.20858765 49.62638092]
[134.12159729 59.14137650]
[120.52311707 62.36773682]
[115.75624084 76.59014893]
[110.98937225 90.81256104]
[113.58139801 104.55202484]
[103.23303986 113.95431519]
[106.18366241 129.49794006]
[94.80284119 139.10659790]
[90.03597260 153.32899475]
[94.22120667 171.09593201]
[80.99036407 182.39739990]
[76.88542175 196.82478333]
[72.78047943 211.25216675]
[83.91283417 221.75593567]
[88.87772369 236.23379517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 65]
[10 64]
[11 63]
[14 61]
[15 60]
[17 58]
[19 56]
[20 55]
[21 54]
[25 49]
[26 48]
[27 47]
[28 46]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
