%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGAGGGCCUCCAGGGGGCGGGUCGGACUGCCGCGGGCCGGGGAGCGCUCUGGGUGGCCAGCUGUGGGCCCGGGCCGUCGUGGGCUCCGGCUUGCGUGCGGAG\
) } def
/len { sequence length } bind def

/coor [
[44.47775650 384.36276245]
[40.43815613 399.18090820]
[29.51939583 409.98257446]
[14.65857029 413.86221313]
[-0.14683104 409.77618408]
[-10.91423130 398.82360840]
[-14.74725437 383.95068359]
[-10.61483574 369.15817261]
[0.37142518 358.42517090]
[15.25627899 354.63876343]
[19.24683189 340.17932129]
[23.23738480 325.71987915]
[27.22793579 311.26043701]
[25.95248604 303.85433960]
[31.56019783 296.43154907]
[27.91807365 281.98910522]
[39.37929916 271.08264160]
[35.73717499 256.64019775]
[47.19840240 245.73373413]
[51.61972809 231.40014648]
[56.04105759 217.06654358]
[60.46238327 202.73295593]
[64.88371277 188.39936829]
[69.30503845 174.06576538]
[73.72636414 159.73217773]
[78.14769745 145.39859009]
[82.56902313 131.06500244]
[86.99034882 116.73140717]
[79.73915863 106.22005463]
[79.84319305 93.45065308]
[87.26468658 83.05884552]
[99.30944824 78.81713104]
[104.15759277 64.62221527]
[109.00573730 50.42730713]
[113.85388184 36.23239899]
[118.70202637 22.03748703]
[123.12335205 7.70389414]
[127.11390686 -6.75554848]
[131.10446167 -21.21499252]
[135.09501648 -35.67443466]
[131.30789185 -51.03569412]
[142.15228271 -61.24590683]
[146.14283752 -75.70534515]
[150.13339233 -90.16479492]
[142.59326172 -103.79505920]
[146.84623718 -118.40214539]
[159.88708496 -125.50650024]
[163.87763977 -139.96594238]
[167.86819458 -154.42538452]
[162.77676392 -172.04208374]
[175.57131958 -183.94993591]
[179.12753296 -198.52229309]
[182.68373108 -213.09463501]
[186.23994446 -227.66699219]
[181.12429810 -243.24781799]
[192.26002502 -255.28640747]
[208.19163513 -251.39849854]
[212.53004456 -235.58363342]
[200.81228638 -224.11077881]
[197.25608826 -209.53843689]
[193.69987488 -194.96607971]
[190.14367676 -180.39373779]
[196.18115234 -169.79327393]
[193.21759033 -157.54443359]
[182.32763672 -150.43482971]
[178.33708191 -135.97538757]
[174.34652710 -121.51595306]
[181.89761353 -108.72858429]
[178.05659485 -94.00780487]
[164.59283447 -86.17424011]
[160.60227966 -71.71479797]
[156.61172485 -57.25535202]
[160.68428040 -42.92832947]
[149.55445862 -31.68388176]
[145.56390381 -17.22443962]
[141.57334900 -2.76499605]
[137.58279419 11.69444656]
[139.20773315 16.34542084]
[137.80824280 22.06858444]
[132.89694214 26.88563156]
[128.04878235 41.08054352]
[123.20064545 55.27545166]
[118.35250092 69.47035980]
[113.50435638 83.66527557]
[121.11959839 98.22424316]
[116.04235077 113.85041046]
[101.32394409 121.15273285]
[96.90261078 135.48632812]
[92.48128510 149.81991577]
[88.05995941 164.15350342]
[83.63863373 178.48710632]
[79.21730042 192.82069397]
[74.79597473 207.15428162]
[70.37464905 221.48786926]
[65.95332336 235.82147217]
[61.53199387 250.15505981]
[64.85787201 265.62274170]
[53.71289062 275.50396729]
[57.03877258 290.97164917]
[45.89379120 300.85287476]
[41.68737793 315.25100708]
[37.69682693 329.71044922]
[33.70627594 344.16989136]
[29.71572113 358.62933350]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 104]
[11 103]
[12 102]
[13 101]
[15 100]
[17 98]
[19 96]
[20 95]
[21 94]
[22 93]
[23 92]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[37 77]
[38 76]
[39 75]
[40 74]
[42 72]
[43 71]
[44 70]
[47 67]
[48 66]
[49 65]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
