%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUGUCGUACGUAUGUCUUCUGUUUCGUCCUCGCUUUCCGGCUGCUGUUUCUCCACGGCUCUCCUCUUUCCCCCUCCCUUCUCUCCCGGGCGGCUUACUUUGCGGCAGCGCCGAGAACCCCACCCCCUUUCUUUGCGGAAUCACC\
) } def
/len { sequence length } bind def

/coor [
[333.88259888 387.85366821]
[348.20849609 383.40753174]
[362.98245239 385.99819946]
[352.77987671 375.00241089]
[342.57727051 364.00665283]
[332.37469482 353.01086426]
[322.17208862 342.01507568]
[311.96951294 331.01931763]
[301.76690674 320.02352905]
[291.56433105 309.02774048]
[274.56188965 304.80590820]
[270.53411865 286.87127686]
[260.09887695 276.09603882]
[249.66365051 265.32080078]
[235.25143433 261.56085205]
[231.20896912 246.26481628]
[220.77374268 235.48957825]
[210.33850098 224.71434021]
[195.92626953 220.95440674]
[191.88381958 205.65837097]
[181.44857788 194.88311768]
[171.01333618 184.10787964]
[160.57809448 173.33264160]
[144.36546326 184.13732910]
[126.29141998 191.41194153]
[107.11430359 194.85130310]
[87.63869476 194.31108093]
[68.68172455 189.81396484]
[51.03873444 181.54861450]
[35.44995880 169.86183167]
[22.56943703 155.24392700]
[12.93758488 138.30821228]
[6.95851326 119.76523590]
[4.88307953 100.39300537]
[-10.07497692 99.27204895]
[-25.03303337 98.15110016]
[-39.56534195 105.75005341]
[-53.26553345 96.73690033]
[-52.04002380 80.38360596]
[-37.14951324 73.51303864]
[-23.91208267 83.19304657]
[-8.95402622 84.31399536]
[6.00403118 85.43494415]
[11.45740032 65.24958801]
[21.18932533 46.74344635]
[9.46185398 37.39109802]
[-2.26561832 28.03875160]
[-13.99309063 18.68640327]
[-25.72056198 9.33405685]
[-41.39543915 11.35241032]
[-53.85522079 1.62978601]
[-55.70773697 -14.06555462]
[-45.85392380 -26.42184639]
[-30.13987541 -28.10831833]
[-17.88845444 -18.12441826]
[-16.36821556 -2.39341545]
[-4.64074373 6.95893145]
[7.08672857 16.31127930]
[18.81420135 25.66362572]
[30.54167366 35.01597214]
[38.17777252 27.71310425]
[46.57674026 21.30223465]
[55.63493347 15.86247063]
[65.24057770 11.46093750]
[75.27513885 8.15194988]
[85.61480713 5.97633743]
[96.13197327 4.96094799]
[106.69687653 5.11831141]
[117.17913818 6.44648504]
[127.44941711 8.92908001]
[137.38098145 12.53546143]
[146.85127258 17.22112846]
[155.74343872 22.92826080]
[163.94773865 29.58643532]
[171.36294556 37.11349106]
[177.89755249 45.41654587]
[183.47094727 54.39314651]
[188.01431274 63.93251801]
[191.47161865 73.91695404]
[193.80020142 84.22324371]
[194.97131348 94.72421265]
[194.97050476 105.29029083]
[193.79779053 115.79107666]
[191.46763611 126.09701538]
[188.00880432 136.08091736]
[183.46397400 145.61959839]
[177.88922119 154.59535217]
[171.35334778 162.89739990]
[181.78857422 173.67263794]
[192.22381592 184.44789124]
[202.65905762 195.22312927]
[217.81768799 199.75376892]
[221.11373901 214.27909851]
[231.54898071 225.05433655]
[241.98420715 235.82957458]
[257.14282227 240.36021423]
[260.43890381 254.88554382]
[270.87414551 265.66079712]
[281.30935669 276.43603516]
[294.21514893 277.43579102]
[302.68695068 286.68493652]
[302.56011963 298.82516479]
[312.76269531 309.82095337]
[322.96530151 320.81671143]
[333.16787720 331.81250000]
[343.37048340 342.80828857]
[353.57305908 353.80404663]
[363.77566528 364.79983521]
[373.97824097 375.79559326]
[385.39993286 385.51904297]
[397.88308716 393.83590698]
[410.36627197 402.15280151]
[426.14093018 403.36538696]
[432.44268799 416.86120605]
[444.92584229 425.17807007]
[457.40902710 433.49496460]
[469.89218140 441.81185913]
[482.37533569 450.12875366]
[495.77825928 442.73818970]
[511.08074951 442.43438721]
[524.76641846 449.28720093]
[533.69042969 461.72189331]
[535.80206299 476.88101196]
[530.61608887 491.28118896]
[519.32421875 501.61328125]
[504.52124023 505.50311279]
[489.60876465 502.05679321]
[478.01361084 492.06628418]
[472.40017700 477.82730103]
[474.05847168 462.61190796]
[461.57528687 454.29501343]
[449.09213257 445.97811890]
[436.60897827 437.66125488]
[424.12579346 429.34436035]
[409.24401855 428.72668457]
[402.04937744 414.63598633]
[389.56622314 406.31909180]
[377.08303833 398.00219727]
[381.99850464 412.17395020]
[379.89544678 427.02578735]
[371.23864746 439.27566528]
[357.94110107 446.21652222]
[342.94140625 446.31451416]
[329.55432129 439.54797363]
[320.73818970 427.41226196]
[318.44128418 412.58914185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 109]
[4 108]
[5 107]
[6 106]
[7 105]
[8 104]
[9 103]
[10 102]
[12 99]
[13 98]
[14 97]
[16 95]
[17 94]
[18 93]
[20 91]
[21 90]
[22 89]
[23 88]
[34 43]
[35 42]
[36 41]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[110 138]
[111 137]
[112 136]
[114 134]
[115 133]
[116 132]
[117 131]
[118 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
