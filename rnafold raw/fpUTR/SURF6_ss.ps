%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGUUUCCGGCGGAGGUGGUGAGAGUCGCACGCGCAGCGGGGAAGGUGUGAGUCGUGAACGGCCCGGGUCUCCGCC\
) } def
/len { sequence length } bind def

/coor [
[30.32020569 297.39935303]
[23.96591949 310.98696899]
[29.58983040 325.75677490]
[23.04656410 340.14291382]
[8.21812439 345.61035156]
[-6.09803867 338.91537476]
[-11.40839958 324.02993774]
[-4.56241560 309.78536987]
[10.37831306 304.63269043]
[16.73260117 291.04507446]
[22.81547928 277.33383179]
[28.62454796 263.50433350]
[34.43361664 249.67483521]
[40.24268341 235.84535217]
[46.05175018 222.01586914]
[51.86081696 208.18638611]
[57.66988754 194.35688782]
[63.47895432 180.52740479]
[68.73361969 166.47790527]
[73.42556763 152.23060608]
[78.11751556 137.98329163]
[77.19293976 130.44229126]
[83.28960419 123.26938629]
[73.90826416 111.82890320]
[71.48600769 97.23346710]
[76.66887665 83.37590790]
[88.07453156 73.95226288]
[102.66089630 71.47595215]
[107.91555786 57.42645264]
[113.17021942 43.37694931]
[118.42488098 29.32744598]
[123.39916992 15.17624664]
[128.09112549 0.92894459]
[125.05872345 -14.59893799]
[136.38880920 -24.26735687]
[141.08076477 -38.51465607]
[145.77272034 -52.76195908]
[150.46466064 -67.00926208]
[147.43226624 -82.53714752]
[158.76235962 -92.20555878]
[151.42054749 -106.20103455]
[156.20509338 -121.26369476]
[170.27740479 -128.45712280]
[185.28863525 -123.51360321]
[192.33288574 -109.36602020]
[187.23092651 -94.40789032]
[173.00965881 -87.51361084]
[176.37765503 -73.00479126]
[164.71195984 -62.31731415]
[160.02001953 -48.07001114]
[155.32806396 -33.82270813]
[150.63612366 -19.57540703]
[154.00411987 -5.06658649]
[142.33842468 5.62089396]
[137.64646912 19.86819649]
[138.57104492 27.40920448]
[132.47438049 34.58210754]
[127.21971893 48.63161087]
[121.96505737 62.68111420]
[116.71039581 76.73061371]
[126.09173584 88.17109680]
[128.51399231 102.76653290]
[123.33112335 116.62409210]
[111.92546844 126.04773712]
[97.33910370 128.52404785]
[92.36481476 142.67524719]
[87.67286682 156.92254639]
[82.98091888 171.16984558]
[84.02142334 178.15055847]
[81.56272888 183.65771484]
[77.30844116 186.33647156]
[71.49937439 200.16595459]
[65.69030762 213.99545288]
[59.88123703 227.82493591]
[54.07217026 241.65441895]
[48.26310349 255.48391724]
[42.45403671 269.31338501]
[36.64496613 283.14288330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[11 78]
[12 77]
[13 76]
[14 75]
[15 74]
[16 73]
[17 72]
[18 71]
[19 68]
[20 67]
[21 66]
[23 65]
[28 60]
[29 59]
[30 58]
[31 57]
[32 55]
[33 54]
[35 52]
[36 51]
[37 50]
[38 49]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
