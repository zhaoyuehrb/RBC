%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGCGGCCGGCGCGCGCUCCCGGGAGGCGGCAGCGGCUGCAGCGUUGGUAGCAUCAGCAUCAGCAUCAGCGGCAGCGGCAGCGGCCUCGGGCGGGGCCGGCCGGACGGACAGGCGGACAGAAGGCGCCAGGGGCGCGCGUCCCGCCCGGGCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[88.78151703 176.61677551]
[94.82785797 160.77763367]
[94.82785797 145.77763367]
[94.82785797 130.77763367]
[76.63766479 114.39298248]
[77.38624573 93.00498962]
[65.19894409 84.26029205]
[53.01163864 75.51560211]
[40.82433319 66.77091217]
[28.63703156 58.02621841]
[16.44972801 49.28152847]
[4.26242495 40.53683472]
[-7.92487812 31.79214287]
[-16.77268982 29.31173515]
[-20.26427650 22.75232887]
[-35.94960403 20.68326569]
[-41.50772476 6.86456156]
[-53.51988220 -2.11921000]
[-65.53203583 -11.10298157]
[-77.54418945 -20.08675385]
[-89.55634308 -29.07052612]
[-94.00549316 -29.43039513]
[-97.71488953 -31.05190468]
[-100.37346649 -33.53766632]
[-101.83520508 -36.42943192]
[-102.12453461 -39.26862335]
[-113.38990784 -49.17272949]
[-124.65528870 -59.07683563]
[-135.92065430 -68.98094177]
[-147.18603516 -78.88504791]
[-162.65904236 -82.18603516]
[-167.10881042 -96.40042114]
[-178.37419128 -106.30452728]
[-193.84719849 -109.60551453]
[-198.29695129 -123.81990814]
[-209.56233215 -133.72401428]
[-225.03533936 -137.02499390]
[-229.48510742 -151.23937988]
[-240.75048828 -161.14349365]
[-252.01585388 -171.04759216]
[-263.28121948 -180.95170593]
[-274.54660034 -190.85581970]
[-290.01962280 -194.15679932]
[-294.46939087 -208.37118530]
[-305.73477173 -218.27529907]
[-317.38262939 -227.72660828]
[-329.39477539 -236.71038818]
[-341.40692139 -245.69415283]
[-353.41906738 -254.67793274]
[-365.43124390 -263.66171265]
[-377.44338989 -272.64547729]
[-386.24047852 -275.30020142]
[-389.60177612 -281.92730713]
[-401.43408203 -291.14666748]
[-417.74240112 -292.87042236]
[-424.15554810 -307.96359253]
[-414.07626343 -320.89959717]
[-397.87322998 -318.37097168]
[-392.21475220 -302.97897339]
[-380.38241577 -293.75961304]
[-368.45962524 -284.65762329]
[-356.44744873 -275.67385864]
[-344.43530273 -266.69009399]
[-332.42315674 -257.70629883]
[-320.41101074 -248.72253418]
[-308.39883423 -239.73876953]
[-305.56094360 -240.04045105]
[-302.43008423 -239.20570374]
[-299.45001221 -237.11614990]
[-297.09924316 -233.82029724]
[-295.83065796 -229.54066467]
[-284.56527710 -219.63656616]
[-269.89804077 -217.04399109]
[-264.64251709 -202.12118530]
[-253.37712097 -192.21708679]
[-242.11175537 -182.31297302]
[-230.84637451 -172.40887451]
[-219.58100891 -162.50476074]
[-204.91377258 -159.91218567]
[-199.65823364 -144.98937988]
[-188.39285278 -135.08528137]
[-173.72561646 -132.49270630]
[-168.47007751 -117.56990814]
[-157.20469666 -107.66579437]
[-142.53746033 -105.07321930]
[-137.28193665 -90.15042114]
[-126.01655579 -80.24631500]
[-114.75118256 -70.34220886]
[-103.48580170 -60.43810272]
[-92.22042847 -50.53399658]
[-80.57257080 -41.08267975]
[-68.56041718 -32.09890747]
[-56.54826355 -23.11513519]
[-44.53610992 -14.13136387]
[-32.52395630 -5.14759207]
[-17.69781494 -3.72110820]
[-11.28050518 10.74017429]
[0.81981403 19.60483932]
[13.00711727 28.34953117]
[25.19441986 37.09422302]
[37.38172531 45.83891678]
[49.56902695 54.58360672]
[61.75632858 63.32830048]
[73.94363403 72.07299042]
[86.13093567 80.81768799]
[100.06626129 74.44460297]
[116.19254303 77.84693909]
[127.91779327 91.02610779]
[129.64846802 109.74591064]
[142.92500305 116.72685242]
[158.74047852 116.30109406]
[166.40451050 129.07261658]
[184.75645447 127.89715576]
[193.57925415 143.04078674]
[206.99113464 149.75805664]
[220.40299988 156.47532654]
[233.81486511 163.19259644]
[247.22674561 169.90986633]
[260.70431519 176.49430847]
[274.24627686 182.94528198]
[283.17382812 176.93609619]
[293.71499634 175.21652222]
[303.93316650 178.03392029]
[311.97952271 184.80834961]
[316.42764282 194.25039673]
[316.52612305 204.60623169]
[329.66213989 211.84811401]
[342.79818726 219.08999634]
[355.93420410 226.33187866]
[369.07022095 233.57376099]
[385.86022949 235.92578125]
[388.24807739 252.71072388]
[372.78009033 259.65179443]
[361.82833862 246.70977783]
[348.69232178 239.46789551]
[335.55630493 232.22601318]
[322.42025757 224.98413086]
[309.28424072 217.74224854]
[291.08099365 224.55374146]
[273.42834473 215.72135925]
[267.79531860 196.48725891]
[254.25334167 190.03627014]
[246.82261658 189.99858093]
[240.50947571 183.32173157]
[227.09759521 176.60446167]
[213.68572998 169.88719177]
[200.27386475 163.16992188]
[186.86198425 156.45265198]
[175.25390625 159.97207642]
[164.00872803 154.44200134]
[159.42356873 142.34915161]
[144.55772400 143.27424622]
[135.94406128 130.00338745]
[122.66752625 123.02245331]
[109.82785797 130.77763367]
[109.82785797 145.77763367]
[109.82785797 160.77763367]
[115.87419891 176.61677551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 157]
[3 156]
[4 155]
[6 105]
[7 104]
[8 103]
[9 102]
[10 101]
[11 100]
[12 99]
[13 98]
[15 97]
[17 95]
[18 94]
[19 93]
[20 92]
[21 91]
[26 90]
[27 89]
[28 88]
[29 87]
[30 86]
[32 84]
[33 83]
[35 81]
[36 80]
[38 78]
[39 77]
[40 76]
[41 75]
[42 74]
[44 72]
[45 71]
[46 66]
[47 65]
[48 64]
[49 63]
[50 62]
[51 61]
[53 60]
[54 59]
[109 154]
[110 153]
[112 151]
[114 148]
[115 147]
[116 146]
[117 145]
[118 144]
[119 142]
[120 141]
[126 138]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
