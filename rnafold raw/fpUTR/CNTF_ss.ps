%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUCACAUCUCUUAUUUGGACCAGUAUAGACAGAAGUAAACCCAGCUGACUUGUUUCCUGGGACAGUUGAGUUAAGGG\
) } def
/len { sequence length } bind def

/coor [
[79.26122284 319.99661255]
[64.21926117 321.38082886]
[49.39689255 318.46978760]
[35.99569702 311.49954224]
[25.10205269 301.03506470]
[17.59905815 287.92468262]
[14.09494591 273.23123169]
[14.87378025 258.14581299]
[19.87242317 243.89131165]
[28.68565941 231.62333679]
[40.59903717 222.33634949]
[54.64679337 216.78321838]
[69.69013977 215.41410828]
[72.58081818 200.69528198]
[75.47150421 185.97645569]
[78.36219025 171.25761414]
[73.22262573 157.27784729]
[83.47434998 145.22743225]
[86.36503601 130.50859070]
[89.25572205 115.78976440]
[81.26393127 103.70351410]
[84.05623627 89.48559570]
[96.02545166 81.31954956]
[98.91613770 66.60072327]
[101.80681610 51.88188934]
[104.69750214 37.16305923]
[97.94517517 28.22097588]
[97.39260101 17.25263405]
[102.98080444 8.05826855]
[112.56610107 3.68331003]
[116.58869171 -10.76725292]
[120.61128235 -25.21781731]
[124.63386536 -39.66838074]
[128.65646362 -54.11894226]
[132.67904663 -68.56950378]
[126.57936859 -87.59654999]
[140.40483093 -100.88761902]
[143.29551697 -115.60645294]
[146.18620300 -130.32527161]
[136.22856140 -142.38261414]
[136.40257263 -158.01924133]
[146.62606812 -169.85198975]
[162.07182312 -172.29382324]
[175.44682312 -164.19177246]
[180.43582153 -149.37138367]
[174.68313599 -134.83038330]
[160.90502930 -127.43459320]
[158.01434326 -112.71576691]
[155.12365723 -97.99693298]
[161.72592163 -89.78545380]
[162.59329224 -79.06108856]
[157.17691040 -69.50741577]
[147.12960815 -64.54691315]
[143.10702515 -50.09635544]
[139.08442688 -35.64579010]
[135.06184387 -21.19522667]
[131.03926086 -6.74466419]
[127.01666260 7.70589924]
[133.40652466 25.78808975]
[119.41632843 40.05374527]
[116.52565002 54.77257538]
[113.63496399 69.49140167]
[110.74427795 84.21023560]
[118.73606873 96.29648590]
[115.94376373 110.51440430]
[103.97454834 118.68045044]
[101.08386230 133.39927673]
[98.19318390 148.11810303]
[103.12598419 163.15068054]
[93.08101654 174.14830017]
[90.19033813 188.86714172]
[87.29965210 203.58596802]
[84.40896606 218.30479431]
[97.81715393 225.26159668]
[108.72130585 235.71511841]
[116.23747253 248.81794739]
[119.75634003 263.50787354]
[118.99266052 278.59408569]
[114.00833893 292.85357666]
[105.20743561 305.13040161]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 73]
[14 72]
[15 71]
[16 70]
[18 68]
[19 67]
[20 66]
[23 63]
[24 62]
[25 61]
[26 60]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[37 49]
[38 48]
[39 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
