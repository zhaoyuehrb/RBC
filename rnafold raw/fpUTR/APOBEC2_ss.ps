%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAAGCCUGGCCUGCUGGGUCCUUUUCCCGUCAUCCCCAGCCAGAUUUAGCUGCUGACAGCUGCUUGGGACUCUGCCGCCAGGGCCUGGCCCAGACCUGCCUGCCUCUCUCCUCUCCCUCAGUGACUCCUGAGCCACAGCCCCUCC\
) } def
/len { sequence length } bind def

/coor [
[296.98358154 344.20703125]
[301.94927979 332.67926025]
[308.89703369 322.22058105]
[298.29040527 311.61398315]
[283.81979370 308.08554077]
[279.53268433 292.85626221]
[268.92608643 282.24963379]
[256.79058838 281.92276001]
[247.86473083 273.11242676]
[247.34661865 260.17938232]
[236.96752930 249.35005188]
[226.58845520 238.52072144]
[211.73812866 238.46231079]
[201.05798340 227.62767029]
[201.21994019 212.05168152]
[190.72650146 201.33309937]
[180.11990356 190.72650146]
[169.51330566 180.11990356]
[158.90669250 169.51330566]
[148.30009460 158.90669250]
[137.69349670 148.30009460]
[127.08689117 137.69349670]
[118.69676208 142.48448181]
[109.49655151 145.43473816]
[99.88488770 146.41644287]
[90.27821350 145.38706970]
[81.09275818 142.39122009]
[72.72648621 137.55868530]
[65.54189301 131.09884644]
[59.85026932 123.29159546]
[55.89820480 114.47518921]
[53.85693741 105.03162384]
[53.81490326 95.37004852]
[55.77392960 85.90907288]
[59.64913559 77.05860901]
[47.97859955 67.63531494]
[36.30806351 58.21201324]
[24.63752747 48.78871155]
[9.03977299 46.13906479]
[3.99822688 32.12364197]
[-7.67230940 22.70034218]
[-19.34284592 13.27704144]
[-18.18225861 28.23207474]
[-26.76011658 40.53737259]
[-41.19318771 44.62228012]
[-54.94756317 38.63753891]
[-61.79658508 25.29246712]
[-58.63967133 10.62843323]
[-46.90597153 1.28390265]
[-31.90563583 1.48982978]
[-42.05252457 -9.55737209]
[-52.19940948 -20.60457420]
[-62.34629822 -31.65177536]
[-72.49318695 -42.69897842]
[-88.29271698 -47.09294128]
[-92.12462616 -63.03811264]
[-80.04698181 -74.13146210]
[-64.48422241 -68.96111298]
[-61.44598389 -52.84586334]
[-51.29909897 -41.79866409]
[-41.15221024 -30.75146103]
[-31.00532150 -19.70425987]
[-20.85843277 -8.65705776]
[-9.91954613 1.60650539]
[1.75099051 11.02980518]
[13.42152691 20.45310593]
[28.18452644 22.42873573]
[34.06082535 37.11817551]
[45.73136139 46.54147720]
[57.40190125 55.96477509]
[69.07243347 65.38807678]
[75.48526001 60.58519363]
[82.62847900 56.95664978]
[90.28928375 54.61055756]
[98.23940277 53.61681747]
[106.24198151 54.00503159]
[110.63432312 39.66252899]
[115.02666473 25.32002831]
[108.80175781 10.53388405]
[116.60706329 -3.48241854]
[132.45501709 -5.97677088]
[144.18843079 4.96428061]
[142.80642700 20.94769859]
[129.36917114 29.71236992]
[124.97682190 44.05487061]
[120.58448029 58.39737320]
[139.97367859 76.40753174]
[146.36967468 102.08628082]
[137.69349670 127.08689117]
[148.30009460 137.69349670]
[158.90669250 148.30009460]
[169.51330566 158.90669250]
[180.11990356 169.51330566]
[190.72650146 180.11990356]
[201.33309937 190.72650146]
[209.67529297 194.61839294]
[212.04928589 201.67259216]
[227.61810303 202.17185974]
[237.98971558 213.30220032]
[237.41778564 228.14163208]
[247.79687500 238.97097778]
[258.17596436 249.80030823]
[275.94866943 254.49412537]
[279.53268433 271.64303589]
[290.13928223 282.24963379]
[305.36859131 286.53674316]
[308.89703369 301.00738525]
[319.50363159 311.61398315]
[334.65606689 302.34915161]
[351.64379883 297.19940186]
[369.37155151 296.49185181]
[386.69750977 300.26736450]
[402.50695801 308.27832031]
[415.78396606 320.00457764]
[425.67663574 334.68759155]
[431.55181885 351.37915039]
[433.03558350 369.00289917]
[430.03701782 386.42352295]
[422.75384521 402.51995850]
[434.62176514 411.69342041]
[446.48968506 420.86688232]
[458.35760498 430.04037476]
[470.22552490 439.21383667]
[485.86801147 436.95803833]
[498.47375488 446.49066162]
[500.56402588 462.15609741]
[490.89868164 474.66036987]
[475.21200562 476.58489990]
[462.81063843 466.78790283]
[461.05206299 451.08175659]
[449.18414307 441.90829468]
[437.31622314 432.73480225]
[425.44830322 423.56134033]
[413.58038330 414.38787842]
[404.16610718 422.59292603]
[393.43371582 428.98614502]
[381.72781372 433.36050415]
[369.42449951 435.57382202]
[356.91949463 435.55337524]
[344.61511230 433.29830933]
[332.90765381 428.87969971]
[322.17434692 422.43829346]
[312.76141357 414.18008423]
[304.97268677 404.36968994]
[299.06002808 393.32180786]
[295.21505737 381.39129639]
[293.56292725 368.96154785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 108]
[4 107]
[6 105]
[7 104]
[10 102]
[11 101]
[12 100]
[15 97]
[16 95]
[17 94]
[18 93]
[19 92]
[20 91]
[21 90]
[22 89]
[35 71]
[36 70]
[37 69]
[38 68]
[40 66]
[41 65]
[42 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[76 86]
[77 85]
[78 84]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
