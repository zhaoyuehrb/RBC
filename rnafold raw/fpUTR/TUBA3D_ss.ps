%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCAAUGGCCAAUCAGAACUGGGAUCCGGCCCUCAGCCCGCCUCCCAGGAACUCCGAGCCAAUGGCGGCCUGGCACCGGCGGGCCAAUCCCGUGCGGCGCGCACAGGCAGGAGGUUGCAGUUGGGCGCUCAGCAGCUGUGGCAGCCGGUUGAGGUCUGGCAGUAGCGUUGGGCUGAAGCAGCGGAGUUCGCC\
) } def
/len { sequence length } bind def

/coor [
[31.58836746 278.59231567]
[25.21614456 292.74060059]
[11.72807026 300.41207886]
[-3.68941665 298.65689087]
[-15.10797787 288.14993286]
[-18.13694382 272.93136597]
[-11.61161423 258.85302734]
[1.95888710 251.32830811]
[3.65559435 236.42457581]
[5.35230160 221.52085876]
[-0.77192563 217.19143677]
[-9.40615559 229.45724487]
[-18.04038620 241.72305298]
[-22.54047585 256.03210449]
[-37.53943253 256.20904541]
[-42.37583160 242.01014709]
[-30.38717461 232.99470520]
[-21.70377731 220.76365662]
[-13.02038097 208.53260803]
[-19.14460754 204.20318604]
[-32.62888336 210.77391052]
[-46.11315918 217.34461975]
[-59.59743500 223.91532898]
[-73.08171082 230.48605347]
[-86.56598663 237.05676270]
[-91.80179596 251.72727966]
[-105.57037354 258.19882202]
[-119.52420044 253.11688232]
[-133.00848389 259.68759155]
[-146.49275208 266.25830078]
[-149.06005859 281.56152344]
[-160.15560913 292.40902710]
[-175.51295471 294.62973022]
[-189.22688293 287.36968994]
[-196.02410889 273.42059326]
[-193.29093933 258.14611816]
[-182.07836914 247.41963196]
[-166.69783020 245.36567688]
[-153.06347656 252.77403259]
[-139.57919312 246.20332336]
[-126.09491730 239.63259888]
[-121.49855042 225.51138306]
[-107.91718292 218.65565491]
[-93.13670349 223.57249451]
[-79.65242767 217.00177002]
[-66.16815186 210.43106079]
[-52.68387604 203.86033630]
[-39.19960022 197.28962708]
[-25.71532249 190.71891785]
[15.47010326 199.40904236]
[25.63872910 188.38185120]
[35.80735397 177.35464478]
[45.97598267 166.32745361]
[56.14460754 155.30026245]
[66.31323242 144.27307129]
[76.48185730 133.24586487]
[66.72776794 120.43490601]
[63.03032303 105.45251465]
[65.48785400 90.89604187]
[52.11174393 84.10783386]
[38.73563385 77.31962585]
[21.87498474 75.54344177]
[18.91426468 58.85001755]
[34.13569641 51.38380051]
[45.52383804 63.94351959]
[58.89994812 70.73172760]
[72.27605438 77.51992798]
[77.55281830 72.24942017]
[83.80963898 68.19052124]
[79.96646881 53.69121170]
[76.12330627 39.19189835]
[72.28013611 24.69258499]
[68.43697357 10.19327354]
[64.47653198 -4.27444696]
[60.39908218 -18.70962524]
[45.33141708 -32.08695221]
[50.85675812 -50.60826492]
[46.31400681 -64.90383911]
[41.77125549 -79.19940948]
[37.11290359 -93.45773315]
[32.33926010 -107.67787170]
[27.56561470 -121.89801025]
[22.79196930 -136.11814880]
[18.01832581 -150.33828735]
[4.35187960 -158.74113464]
[2.54369617 -174.68196106]
[13.98085880 -185.93232727]
[29.88975525 -183.86192322]
[38.06644058 -170.05897522]
[32.23846436 -155.11193848]
[37.01210785 -140.89179993]
[41.78575134 -126.67165375]
[46.55939865 -112.45151520]
[51.33304214 -98.23138428]
[56.44943619 -92.88317871]
[56.06682968 -83.74216461]
[60.60957718 -69.44659424]
[65.15232849 -55.15101624]
[74.62761688 -51.27958679]
[80.52526093 -42.64630127]
[80.69330597 -31.97245026]
[74.83425903 -22.78707695]
[78.91171265 -8.35189819]
[83.76235199 -2.76154470]
[82.93628693 6.35010672]
[86.77944946 20.84941864]
[90.62261963 35.34873199]
[94.46578217 49.84804535]
[98.30895233 64.34735870]
[113.00189972 66.75964355]
[125.43219757 74.95655823]
[133.43667603 87.51164246]
[148.27764893 85.33321381]
[160.80783081 75.67375946]
[174.52384949 81.48066711]
[189.36482239 79.30223846]
[204.20579529 77.12380981]
[219.04676819 74.94538116]
[233.88774109 72.76695251]
[246.41792297 63.10750198]
[260.13394165 68.91441345]
[274.97491455 66.73598480]
[289.81588745 64.55755615]
[304.65686035 62.37912369]
[319.49783325 60.20069504]
[334.33880615 58.02226639]
[349.17977905 55.84383774]
[357.22952271 51.49569321]
[364.27850342 53.75231552]
[379.15280151 51.81449509]
[394.02709961 49.87667465]
[408.90139771 47.93885040]
[423.77572632 46.00102997]
[438.65002441 44.06320572]
[453.00149536 32.53609085]
[468.93164062 39.88348389]
[483.77261353 37.70505524]
[498.61358643 35.52662659]
[513.45458984 33.34819794]
[528.24768066 25.06566620]
[540.30163574 36.98781967]
[532.18231201 51.87111282]
[515.63299561 48.18917084]
[500.79202271 50.36759949]
[485.95104980 52.54602814]
[471.11007690 54.72445679]
[463.63278198 64.24459076]
[451.27603149 66.17392731]
[440.58782959 58.93750763]
[425.71353149 60.87533188]
[410.83923340 62.81315231]
[395.96493530 64.75097656]
[381.09063721 66.68879700]
[366.21633911 68.62661743]
[351.35821533 70.68481445]
[336.51724243 72.86324310]
[321.67626953 75.04167175]
[306.83529663 77.22010040]
[291.99432373 79.39852905]
[277.15335083 81.57695770]
[262.31237793 83.75538635]
[250.84370422 93.25901794]
[236.06616211 87.60792542]
[221.22520447 89.78635406]
[206.38423157 91.96478271]
[191.54325867 94.14321136]
[176.70228577 96.32164001]
[165.23362732 105.82527161]
[150.45608521 100.17417908]
[135.61511230 102.35260773]
[133.84326172 115.84677124]
[126.92598724 128.27752686]
[115.44345856 137.68142700]
[122.87322998 150.71211243]
[130.30299377 163.74278259]
[137.73277283 176.77345276]
[150.83070374 187.53823853]
[144.11248779 203.10429382]
[127.29497528 200.95773315]
[124.70209503 184.20323181]
[117.27232361 171.17254639]
[109.84255219 158.14187622]
[102.41278839 145.11120605]
[87.50905609 143.41448975]
[77.34043121 154.44169617]
[67.17179871 165.46888733]
[57.00317764 176.49607849]
[46.83455276 187.52328491]
[36.66592407 198.55047607]
[26.49729919 209.57766724]
[20.25603294 223.21755981]
[18.55932426 238.12129211]
[16.86261749 253.02502441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 193]
[9 192]
[10 191]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[28 41]
[29 40]
[30 39]
[50 190]
[51 189]
[52 188]
[53 187]
[54 186]
[55 185]
[56 184]
[59 67]
[60 66]
[61 65]
[69 109]
[70 108]
[71 107]
[72 106]
[73 105]
[74 103]
[75 102]
[77 98]
[78 97]
[79 96]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[112 170]
[113 169]
[115 167]
[116 166]
[117 165]
[118 164]
[119 163]
[121 161]
[122 160]
[123 159]
[124 158]
[125 157]
[126 156]
[127 155]
[129 154]
[130 153]
[131 152]
[132 151]
[133 150]
[134 149]
[136 146]
[137 145]
[138 144]
[139 143]
[173 183]
[174 182]
[175 181]
[176 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
