%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCUCUCCAGCGCGCUCUCCAGGAGCUUUGGCUCGGUGGGUACUGUCGCGGAGGCUUGUCAUUCUGACCCGGGGAUUCCUCACAGCGUCUGGCAGAA\
) } def
/len { sequence length } bind def

/coor [
[10.72148323 306.99093628]
[0.36187488 312.50579834]
[-11.25046921 312.25494385]
[-19.60825348 324.71078491]
[-27.96603775 337.16659546]
[-36.32382202 349.62240601]
[-44.68160629 362.07824707]
[-45.24551392 378.46768188]
[-59.84632874 385.93417358]
[-73.46398163 376.79678345]
[-72.08980560 360.45532227]
[-57.13742447 353.72045898]
[-48.77964020 341.26464844]
[-40.42185593 328.80880737]
[-32.06407166 316.35299683]
[-23.70628929 303.89718628]
[-28.39971352 286.33822632]
[-18.75668144 270.56207275]
[-0.37461585 266.59924316]
[7.19262695 253.64791870]
[14.75987053 240.69659424]
[22.12478065 227.62915039]
[29.28557968 214.44876099]
[36.44637680 201.26835632]
[43.60717392 188.08795166]
[50.76797485 174.90754700]
[50.04508591 160.03050232]
[63.43181992 151.59806824]
[70.59261322 138.41766357]
[77.75341797 125.23725891]
[67.17228699 107.36009216]
[69.10797882 86.67660522]
[82.82244110 71.07317352]
[71.23278046 60.30328751]
[74.70352173 45.81870270]
[70.11266327 31.53850555]
[65.52180481 17.25830841]
[53.93214798 6.48842001]
[57.40288544 -7.99616671]
[52.81202698 -22.27636337]
[48.22116852 -36.55656052]
[43.63031006 -50.83675766]
[29.45826149 -57.83164978]
[24.46243858 -72.82556152]
[31.60677910 -86.92286682]
[46.65266800 -91.75988007]
[60.67364883 -84.46689606]
[65.35132599 -69.37070465]
[57.91050720 -55.42761612]
[62.50136566 -41.14741898]
[67.09222412 -26.86722183]
[71.68308258 -12.58702564]
[82.94436646 -2.83855247]
[79.80200195 12.66744900]
[84.39286041 26.94764519]
[88.98371887 41.22784424]
[100.24500275 50.97631454]
[97.10263824 66.48231506]
[106.32038879 66.95635223]
[115.06241608 69.91755676]
[122.67070770 75.14303589]
[134.99504089 66.59255219]
[147.31938171 58.04206848]
[159.64370728 49.49158478]
[169.21089172 35.49496078]
[185.30897522 40.81359482]
[184.65458679 57.75490952]
[168.19419861 61.81591797]
[155.86985779 70.36640167]
[143.54553223 78.91688538]
[131.22119141 87.46736908]
[132.49432373 91.28515625]
[133.30247498 95.22765350]
[133.63406372 99.23844147]
[148.32852173 102.25054932]
[163.02297974 105.26265717]
[177.71743774 108.27476501]
[194.44808960 105.53218842]
[201.71498108 120.84978485]
[189.00769043 132.07301331]
[174.70533752 122.96922302]
[160.01087952 119.95711517]
[145.31640625 116.94501495]
[130.62194824 113.93290710]
[120.93318939 126.33688354]
[106.66265106 132.97633362]
[90.93381500 132.39805603]
[83.77301788 145.57846069]
[76.61222076 158.75886536]
[76.82291412 174.57865906]
[63.94837570 182.06834412]
[56.78757477 195.24874878]
[49.62677765 208.42915344]
[42.46598053 221.60955811]
[35.30518341 234.78994751]
[33.91267776 244.00155640]
[27.71119499 248.26383972]
[20.14395332 261.21517944]
[12.57670975 274.16650391]
[17.84717369 285.05731201]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[19 99]
[20 98]
[21 97]
[22 95]
[23 94]
[24 93]
[25 92]
[26 91]
[28 89]
[29 88]
[30 87]
[33 58]
[35 56]
[36 55]
[37 54]
[39 52]
[40 51]
[41 50]
[42 49]
[61 71]
[62 70]
[63 69]
[64 68]
[74 84]
[75 83]
[76 82]
[77 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
