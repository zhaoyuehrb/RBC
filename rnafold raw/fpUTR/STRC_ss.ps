%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUGCCCUCACCUGGCUAUCCCACACAGGUGAGAAUAACCAGAACUCACCUCCGGUACCAGUGUUCACUUGGAAAC\
) } def
/len { sequence length } bind def

/coor [
[22.20456886 159.68560791]
[11.38595295 160.65869141]
[0.63200212 159.19598389]
[-9.51624298 155.37525940]
[-18.54914856 149.39283752]
[-26.01408386 141.55346680]
[-31.53810120 132.25482178]
[-34.84656525 121.96736145]
[-35.77680969 111.21044922]
[-50.53727341 108.54048157]
[-65.29773712 105.87051392]
[-80.05819702 103.20054626]
[-94.81866455 100.53057861]
[-109.57912445 97.86061096]
[-124.33958435 95.19063568]
[-139.10005188 92.52066803]
[-148.46119690 104.62965393]
[-162.38223267 110.99073792]
[-177.66419983 110.14218903]
[-190.79542542 102.27899933]
[-198.75842285 89.20807648]
[-199.72338867 73.93301392]
[-193.46855164 59.96392059]
[-181.43124390 50.51078033]
[-166.37754822 47.74586487]
[-151.76669312 52.30452347]
[-140.95614624 63.13921738]
[-136.43008423 77.76020813]
[-121.66961670 80.43017578]
[-106.90915680 83.10014343]
[-92.14868927 85.77011108]
[-77.38822937 88.44007874]
[-62.62776566 91.11004639]
[-47.86730194 93.78002167]
[-33.10684204 96.44998932]
[-22.81684113 79.28968048]
[-6.40580368 67.77225494]
[13.30982304 63.91431427]
[32.93015671 68.41452026]
[49.05816269 80.52729797]
[58.88782120 98.18618011]
[73.74275970 96.10514832]
[88.59770203 94.02411652]
[103.30216217 91.06120300]
[117.80384064 87.22695160]
[132.30551147 83.39270020]
[146.80718994 79.55845642]
[158.17111206 68.55064392]
[172.45333862 72.77759552]
[186.60453796 67.80330658]
[200.31579590 61.72042847]
[214.02705383 55.63755035]
[226.05340576 43.68751907]
[240.86564636 51.93577576]
[237.04017639 68.45249939]
[220.10993958 69.34880829]
[206.39868164 75.43168640]
[192.68742371 81.51456451]
[191.61302185 84.38819122]
[189.17750549 86.94135284]
[185.52537537 88.58703613]
[181.03669739 88.81468201]
[176.28759766 87.27927399]
[165.96092224 98.01282501]
[150.64143372 94.06012726]
[136.13975525 97.89437866]
[121.63808441 101.72863007]
[107.13641357 105.56287384]
[104.61182404 108.87830353]
[100.54227448 110.94747162]
[95.57860565 111.06658173]
[90.67874146 108.87905884]
[75.82379913 110.96009064]
[60.96885300 113.04112244]
[59.53458023 123.86470032]
[55.72602081 134.08715820]
[49.73887634 143.19509888]
[41.87815094 150.73210144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 35]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[41 74]
[42 73]
[43 72]
[44 68]
[45 67]
[46 66]
[47 65]
[49 63]
[50 58]
[51 57]
[52 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
