%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCUCCCGGCGUGCAGCUUGGUGGCGGCUGAGCCGGCAGCGGGCCGCCUCAGGCAGCCCCGGCCGGGCCGCCCGGGUCCCCGGCAGCGGGGUAGG\
) } def
/len { sequence length } bind def

/coor [
[206.79849243 215.53158569]
[196.36325073 204.75634766]
[185.92800903 193.98110962]
[175.49276733 183.20587158]
[165.05754089 172.43063354]
[154.62229919 161.65538025]
[144.18705750 150.88014221]
[133.41181946 140.44491577]
[122.30764771 130.36039734]
[111.20347595 120.27587891]
[100.09931183 110.19136810]
[92.33978271 107.46458435]
[88.80747223 99.60124207]
[80.29814911 95.78238678]
[77.86087036 88.65464020]
[67.42562866 77.87940216]
[52.26700592 73.34876251]
[48.97095108 58.82342911]
[38.53571320 48.04818726]
[28.10047531 37.27294922]
[17.66523743 26.49770737]
[7.22999859 15.72246742]
[-3.20524001 4.94722748]
[-11.58779335 0.85759497]
[-13.79536343 -6.34460783]
[-23.87987709 -17.44877815]
[-33.96438980 -28.55294800]
[-44.04890442 -39.65711975]
[-54.13341522 -50.76128769]
[-64.21793365 -61.86545944]
[-74.30244446 -72.96962738]
[-87.24337769 -74.40669250]
[-95.41389465 -84.02097321]
[-94.78525543 -96.21855927]
[-104.50868225 -107.64025116]
[-120.32077026 -110.35269165]
[-127.93224335 -124.47519684]
[-121.50422668 -139.17417908]
[-105.96775055 -143.17384338]
[-93.24105835 -133.40599060]
[-93.08699036 -117.36367798]
[-83.36357117 -105.94198608]
[-66.59004974 -101.06422424]
[-63.19827271 -83.05413818]
[-53.11376190 -71.94997406]
[-43.02924728 -60.84580231]
[-32.94473267 -49.74163055]
[-22.86021996 -38.63746262]
[-12.77570724 -27.53329086]
[-2.69119358 -16.42912102]
[7.57000017 -5.48801088]
[18.00523949 5.28722954]
[28.44047737 16.06246948]
[38.87571335 26.83770943]
[49.31095505 37.61294937]
[59.74619293 48.38819122]
[74.15841675 52.14811325]
[78.20087433 67.44416046]
[88.63610840 78.21940613]
[99.24271393 88.82600403]
[110.18382263 99.08719635]
[121.28799438 109.17171478]
[132.39216614 119.25622559]
[143.49633789 129.34074402]
[150.16111755 131.19473267]
[154.16064453 135.56188965]
[154.96229553 140.44491577]
[165.39753723 151.22015381]
[175.83277893 161.99539185]
[186.26802063 172.77062988]
[196.70324707 183.54586792]
[207.13848877 194.32110596]
[217.57373047 205.09634399]
[228.18032837 215.70295715]
[238.95556641 226.13818359]
[250.80085754 223.61320496]
[262.25152588 227.16992188]
[270.41513062 235.78588867]
[273.29037476 247.17678833]
[270.25698853 258.40124512]
[280.34152222 269.50540161]
[290.42602539 280.60958862]
[300.51052856 291.71374512]
[310.59506226 302.81793213]
[326.36959839 307.30078125]
[330.11163330 323.26730347]
[317.97171021 334.29244995]
[302.43832397 329.03454590]
[299.49087524 312.90243530]
[289.40637207 301.79827881]
[279.32186890 290.69409180]
[269.23733521 279.58993530]
[259.15283203 268.48574829]
[240.98863220 268.83239746]
[227.98258972 255.70166016]
[228.52033997 236.91343689]
[217.74508667 226.47819519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 64]
[9 63]
[10 62]
[11 61]
[13 60]
[15 59]
[16 58]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[34 42]
[35 41]
[74 97]
[75 96]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
