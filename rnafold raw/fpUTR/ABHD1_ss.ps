%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGGCACCGGCGGUGGGCGGGGCCAGCAGCGCAAACUGCCUGCAGCGGGGACCGGACCUGCACAGGCCGCCUAUGGCGGGCGGCGGGUGGGACCGCGAGUUACAGCCGGCCAACUGGGGCCAGCCAGGAGCCUGAGGGUCGGAAGCCCCCAACACAAG\
) } def
/len { sequence length } bind def

/coor [
[84.24946594 211.77452087]
[92.08919525 198.67866516]
[104.83934021 190.28840637]
[102.79684448 175.42811584]
[100.75434113 160.56782532]
[98.71184540 145.70753479]
[96.66934204 130.84724426]
[77.32469177 121.17726135]
[68.99736786 101.21780396]
[54.31111145 98.16596222]
[39.22537994 102.93370056]
[28.33851242 92.76879120]
[13.65225029 89.71694946]
[-1.43347919 94.48468781]
[-12.32034874 84.31978607]
[-27.00660896 81.26794434]
[-41.69287109 78.21610260]
[-56.37913132 75.16426086]
[-71.06539154 72.11241913]
[-85.75165558 69.06058502]
[-92.21827698 70.78755951]
[-97.73958588 69.19363403]
[-100.94625092 65.59251404]
[-115.50225830 61.96999741]
[-130.05827332 58.34748077]
[-144.61427307 54.72496414]
[-164.76193237 64.54533386]
[-182.98400879 52.59255981]
[-197.82365417 54.77994156]
[-212.66331482 56.96732712]
[-227.50296021 59.15471268]
[-235.58456421 63.52202225]
[-242.65321350 61.23706818]
[-257.53271484 63.13448715]
[-272.41223145 65.03190613]
[-287.35931396 73.03324127]
[-299.18569946 60.88529968]
[-290.78637695 46.15819168]
[-274.30966187 50.15239716]
[-259.43014526 48.25497818]
[-244.55064392 46.35755920]
[-229.69035339 44.31505585]
[-214.85069275 42.12767410]
[-200.01104736 39.94028854]
[-185.17138672 37.75290298]
[-185.13195801 37.56816483]
[-185.09091187 37.38377380]
[-197.67362976 29.21828079]
[-210.25634766 21.05278778]
[-222.83906555 12.88729286]
[-235.42178345 4.72179937]
[-250.32063293 9.47135067]
[-264.76705933 3.48513126]
[-271.93988037 -10.41034985]
[-268.45236206 -25.65407181]
[-255.95114136 -35.04841614]
[-240.33894348 -34.15765762]
[-228.98736572 -23.40238762]
[-227.25628662 -7.86091566]
[-214.67356873 0.30457827]
[-202.09085083 8.47007179]
[-189.50813293 16.63556671]
[-176.92543030 24.80105972]
[-166.34947205 20.28488350]
[-154.78018188 21.77527237]
[-145.43324280 29.02659416]
[-140.99176025 40.16895676]
[-126.43575287 43.79147339]
[-111.87973785 47.41399002]
[-97.32373047 51.03650665]
[-82.69981384 54.37432098]
[-68.01354980 57.42616272]
[-53.32729340 60.47800064]
[-38.64102936 63.52984238]
[-23.95476913 66.58168030]
[-9.26850796 69.63352203]
[4.76676178 64.64749146]
[16.70409012 75.03069305]
[31.39035225 78.08252716]
[45.42562103 73.09650421]
[57.36294937 83.47969818]
[72.04920959 86.53153992]
[80.12358093 72.00349426]
[95.75551605 62.59705734]
[115.62169647 62.14545822]
[121.86502075 48.50650787]
[128.10833740 34.86756134]
[134.35166931 21.22861290]
[128.60755920 6.50513792]
[135.03334045 -7.93386459]
[149.81672668 -13.52198982]
[164.18698120 -6.94390297]
[169.61849976 7.89773464]
[162.88885498 22.19764137]
[147.99061584 27.47193718]
[141.74728394 41.11088562]
[135.50396729 54.74983215]
[129.26063538 68.38877869]
[132.64599609 75.08126831]
[144.66389465 66.10517120]
[152.44847107 53.28330612]
[167.22167969 50.68475723]
[178.91427612 60.08066177]
[179.55676270 75.06689453]
[168.71121216 85.42904663]
[153.76824951 84.10351562]
[139.41670227 88.46623993]
[142.80206299 95.15872955]
[157.48832703 98.21056366]
[172.17457581 101.26240540]
[186.86083984 104.31424713]
[201.54710388 107.36608887]
[216.23336792 110.41793060]
[222.69999695 108.69094849]
[228.22129822 110.28487396]
[231.42796326 113.88599396]
[245.98396301 117.50851440]
[261.24423218 113.33298492]
[271.72622681 123.91491699]
[286.28222656 127.53743744]
[300.83822632 131.15995789]
[315.39422607 134.78247070]
[329.98489380 138.26280212]
[343.23175049 129.64324951]
[358.67611694 132.99693298]
[367.15512085 146.33418274]
[363.63833618 161.74221802]
[350.21218872 170.07974243]
[334.84219360 166.40025330]
[326.64709473 152.88671875]
[319.38946533 154.47224426]
[311.77172852 149.33848572]
[297.21572876 145.71595764]
[282.65969849 142.09344482]
[268.10369873 138.47093201]
[253.88458252 142.90556335]
[242.36145020 132.06451416]
[227.80545044 128.44200134]
[213.18153381 125.10418701]
[198.49526978 122.05234528]
[183.80900574 119.00051117]
[169.12274170 115.94866943]
[154.43647766 112.89682770]
[139.75021362 109.84498596]
[131.92231750 119.94896698]
[122.02690125 126.33803558]
[111.52963257 128.80474854]
[113.57213593 143.66503906]
[115.61463165 158.52532959]
[117.65713501 173.38562012]
[119.69963074 188.24591064]
[134.24063110 192.88508606]
[145.32286072 203.38017273]
[150.74594116 217.64736938]
[149.43309021 232.85392761]
[141.64498901 245.98054504]
[128.92797852 254.42095947]
[113.80702209 256.49926758]
[99.28440094 251.80288696]
[88.24358368 241.26422119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[9 82]
[10 81]
[12 79]
[13 78]
[15 76]
[16 75]
[17 74]
[18 73]
[19 72]
[20 71]
[23 70]
[24 69]
[25 68]
[26 67]
[28 45]
[29 44]
[30 43]
[31 42]
[33 41]
[34 40]
[35 39]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[85 98]
[86 97]
[87 96]
[88 95]
[108 144]
[109 143]
[110 142]
[111 141]
[112 140]
[113 139]
[116 138]
[117 137]
[119 135]
[120 134]
[121 133]
[122 132]
[123 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
