%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGUGUGGGGCAGGACCAGUCCUUCAGCGGCCGGGUUCGCGCCGCGGUCGCCGGCUGCUUACGUGGGCGGGCCUAGUGUGGGGCUGAGGGUGCGGGUCGCU\
) } def
/len { sequence length } bind def

/coor [
[30.63040161 356.22064209]
[20.11378479 357.14730835]
[13.90148258 370.80041504]
[20.80481339 384.83172607]
[17.02372932 400.00531006]
[4.34354115 409.15664673]
[-11.24855328 407.96475220]
[-22.39044380 396.99240112]
[-23.82126999 381.42041016]
[-14.86544037 368.60140991]
[0.24837674 364.58810425]
[6.46067905 350.93499756]
[-1.80113328 333.45788574]
[5.31220341 315.16250610]
[23.76174545 307.63088989]
[28.70050430 293.46725464]
[33.63926697 279.30358887]
[38.57802582 265.13995361]
[35.46260071 250.57482910]
[47.31220627 240.09162903]
[52.25096512 225.92797852]
[56.97315598 211.69067383]
[61.47768402 197.38301086]
[65.98220825 183.07534790]
[70.48673248 168.76768494]
[74.99126434 154.46002197]
[79.49578857 140.15235901]
[84.00031281 125.84469604]
[88.50484467 111.53703308]
[83.73322296 100.79606628]
[87.43326569 89.64051056]
[97.67800903 83.88013458]
[102.61676788 69.71649170]
[106.46221924 55.21778488]
[109.19200134 40.46826553]
[111.92178345 25.71875000]
[114.65156555 10.96923161]
[117.38135529 -3.78028655]
[120.11113739 -18.52980423]
[122.84091949 -33.27932358]
[125.57070160 -48.02883911]
[124.04421234 -57.21230316]
[128.61520386 -63.18354797]
[131.79351807 -77.84295654]
[134.97184753 -92.50236511]
[138.15016174 -107.16178131]
[141.32847595 -121.82118988]
[131.16575623 -133.39811707]
[129.78471375 -148.56208801]
[137.50624084 -161.47882080]
[151.18927002 -167.30229187]
[154.36758423 -181.96170044]
[146.92872620 -196.17587280]
[153.53533936 -210.79545593]
[169.11938477 -214.60556030]
[181.72613525 -204.68339539]
[181.68475342 -188.64039612]
[169.02699280 -178.78338623]
[165.84867859 -164.12396240]
[175.89126587 -153.15653992]
[177.56994629 -138.20173645]
[170.03269958 -124.97134399]
[155.98788452 -118.64286804]
[152.80957031 -103.98345947]
[149.63125610 -89.32405090]
[146.45294189 -74.66464233]
[143.27461243 -60.00522995]
[140.32022095 -45.29905701]
[137.59043884 -30.54953766]
[134.86065674 -15.80002022]
[132.13087463 -1.05050242]
[129.40109253 13.69901562]
[126.67130280 28.44853401]
[123.94152069 43.19805145]
[121.21173096 57.94757080]
[122.71965027 59.94004059]
[123.57401276 62.62348557]
[123.52388000 65.76924896]
[122.39890289 69.06785583]
[120.13327789 72.15683746]
[116.78041077 74.65525055]
[111.84164429 88.81889343]
[115.45815277 105.12712097]
[102.81250763 116.04155731]
[98.30797577 130.34922791]
[93.80345154 144.65689087]
[89.29892731 158.96455383]
[84.79440308 173.27221680]
[80.28987122 187.57987976]
[75.78534698 201.88754272]
[71.28082275 216.19520569]
[71.67832184 225.49618530]
[66.41460419 230.86674500]
[61.47584152 245.03038025]
[64.23801422 260.60861206]
[52.74166489 270.07873535]
[47.80290222 284.24237061]
[42.86414337 298.40600586]
[37.92538452 312.56964111]
[44.99466324 320.95272827]
[47.83361816 331.46014404]
[45.97610855 342.10174561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[15 99]
[16 98]
[17 97]
[18 96]
[20 94]
[21 93]
[22 91]
[23 90]
[24 89]
[25 88]
[26 87]
[27 86]
[28 85]
[29 84]
[32 82]
[33 81]
[34 75]
[35 74]
[36 73]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[51 59]
[52 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
