%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUGGCGCACCUGUCCUUUUUUCUUCUAUUUUUCAGAACCCUGGGCGGAAAGCGCGAGCGAGUUGGGCAG\
) } def
/len { sequence length } bind def

/coor [
[112.81700897 239.90039062]
[114.89484406 224.88511658]
[121.98563385 211.48748779]
[133.23313904 201.32533264]
[127.56751251 187.43644714]
[115.59616089 178.57440186]
[117.54788971 162.87403870]
[111.88227081 148.98516846]
[106.21665192 135.09629822]
[100.55103302 121.20742035]
[85.29312134 115.28941345]
[78.78717804 100.27278900]
[84.90482330 85.09382629]
[78.64691925 71.46156311]
[72.38901520 57.82929611]
[66.13111115 44.19703293]
[59.87321091 30.56476784]
[53.61530685 16.93250275]
[38.39631653 15.40617561]
[26.06610489 6.52571249]
[19.87757301 -7.24267340]
[21.40139961 -22.16024399]
[30.12872124 -34.23084641]
[23.87081718 -47.86310959]
[17.61291313 -61.49537659]
[11.35500908 -75.12763977]
[-3.94442582 -76.47777557]
[-16.50983620 -85.30988312]
[-22.96118927 -99.24816132]
[-21.56310272 -114.54328918]
[-12.69165707 -127.08094788]
[1.26677501 -133.48858643]
[16.55744553 -132.04255676]
[29.06723976 -123.13185883]
[35.43108749 -109.15341187]
[33.93714523 -93.86734772]
[24.98727417 -81.38554382]
[31.24517822 -67.75328064]
[37.50308228 -54.12101364]
[43.76098633 -40.48875046]
[58.60352707 -39.23791504]
[70.90898895 -30.66869354]
[77.31533813 -17.00029755]
[76.01139069 -1.86105871]
[67.24757385 10.67459869]
[73.50547791 24.30686378]
[79.76338196 37.93912888]
[86.02128601 51.57139206]
[92.27919006 65.20365906]
[98.53709412 78.83592224]
[111.02473450 81.87506104]
[119.46614838 91.56629944]
[120.76322174 104.35282135]
[114.43990326 115.54180145]
[120.10552216 129.43067932]
[125.77114105 143.31954956]
[131.43675232 157.20841980]
[143.81335449 167.06390381]
[141.45639038 181.77082825]
[147.12200928 195.65969849]
[162.26831055 195.05517578]
[176.70698547 199.67039490]
[188.69451904 208.94804382]
[196.78332520 221.76783752]
[199.99667358 236.58168030]
[197.94651794 251.60076904]
[190.88043213 265.01144409]
[179.65167236 275.19430542]
[165.61618042 280.91973877]
[150.46879578 281.49636841]
[136.03863525 276.85455322]
[124.06822968 267.55480957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 60]
[5 59]
[7 57]
[8 56]
[9 55]
[10 54]
[13 50]
[14 49]
[15 48]
[16 47]
[17 46]
[18 45]
[23 40]
[24 39]
[25 38]
[26 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
