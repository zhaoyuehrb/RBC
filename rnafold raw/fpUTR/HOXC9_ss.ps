%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCUGUGAGCAGAUAAAAAGUACAUAUACAGUUCAUACAAUAAUCUUAUGUAUGUAAAACCCCGUUACG\
) } def
/len { sequence length } bind def

/coor [
[88.84069824 245.79910278]
[73.43850708 248.50213623]
[59.92821884 240.62773132]
[54.68898392 225.89395142]
[60.19461060 211.25761414]
[73.84550476 203.62957764]
[76.48653412 188.86390686]
[79.12756348 174.09823608]
[81.76859283 159.33256531]
[68.10177612 153.24697876]
[56.28801727 144.06813049]
[47.01360703 132.32923889]
[40.81732178 118.71226501]
[38.05912399 104.00823212]
[38.89924240 89.07135010]
[43.28887177 74.76934814]
[50.97300720 61.93305969]
[61.50525284 51.30818939]
[74.27376556 43.51195526]
[88.53678894 38.99727249]
[103.46574402 38.02640533]
[106.10676575 23.26073456]
[108.74779510 8.49506664]
[111.38882446 -6.27060270]
[114.02985382 -21.03627205]
[116.67088318 -35.80194092]
[119.31190491 -50.56760788]
[105.78783417 -57.29636765]
[94.70823669 -67.56374359]
[86.97127533 -80.53741455]
[83.20415497 -95.16565704]
[83.71225739 -110.26262665]
[88.45439911 -124.60448456]
[97.04615784 -137.02859497]
[108.79103088 -146.52778625]
[122.73690796 -152.33200073]
[137.75328064 -153.97073364]
[152.62281799 -151.31112671]
[166.14012146 -144.56878662]
[177.20939636 -134.29028320]
[184.93331909 -121.30885315]
[188.68574524 -106.67683411]
[188.16247559 -91.58037567]
[183.40592957 -77.24329376]
[174.80169678 -64.82782745]
[163.04728699 -55.34043503]
[149.09558105 -49.55022430]
[134.07757568 -47.92658234]
[131.43655396 -33.16091156]
[128.79551697 -18.39524269]
[126.15449524 -3.62957478]
[123.51346588 11.13609409]
[120.87243652 25.90176201]
[118.23140717 40.66743088]
[131.89822388 46.75301743]
[143.71199036 55.93186569]
[152.98638916 67.67075348]
[159.18267822 81.28773499]
[161.94087219 95.99176788]
[161.10075378 110.92864990]
[156.71113586 125.23065186]
[149.02699280 138.06694031]
[138.49475098 148.69181824]
[125.72623444 156.48803711]
[111.46321106 161.00273132]
[96.53425598 161.97360229]
[93.89323425 176.73925781]
[91.25220490 191.50492859]
[88.61117554 206.27059937]
[98.77156067 218.15759277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 69]
[7 68]
[8 67]
[9 66]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
