%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUCACGCCACCUAAUCCAUUCUCUCGGUCUUCGUCUGCUCCGGUAUUGCAACUGCCUCGAUUGGUCGAUCCUGGGCCAGCAUGGCGGCGCCCAUGUAACCCGGUCCGUGCCGCAAAGCGAACGGCGGCCGCGGCGCGGGCCCCGCGGGGGUUAGAGGUCACC\
) } def
/len { sequence length } bind def

/coor [
[93.07087708 123.14472198]
[82.11682129 133.39208984]
[71.16275787 143.63946533]
[60.20869827 153.88682556]
[55.28750229 171.60943604]
[38.08125687 174.96119690]
[27.32428169 185.41526794]
[16.56730461 195.86932373]
[16.65048981 213.34083557]
[4.33029413 225.24902344]
[-12.45442677 224.59768677]
[-23.01042175 235.25465393]
[-33.56641388 245.91162109]
[-27.65023613 259.91403198]
[-27.54788780 275.11462402]
[-33.27497482 289.19540405]
[-43.95815659 300.00921631]
[-57.96833038 305.90695190]
[-73.16904449 305.98931885]
[-87.24229431 300.24371338]
[-98.04202271 289.54629517]
[-103.92134094 275.52838135]
[-103.98369598 260.32757568]
[-98.21958923 246.26190186]
[-87.50798798 235.47625732]
[-73.48234558 229.61538696]
[-58.28147125 229.57301331]
[-44.22338486 235.35562134]
[-33.66738892 224.69865417]
[-23.11139488 214.04168701]
[-24.97252464 201.26498413]
[-19.03372955 189.58128357]
[-7.27032852 183.37268066]
[6.11324024 185.11235046]
[16.87021637 174.65827942]
[27.62719345 164.20422363]
[28.12251854 152.08938599]
[37.03848267 143.29078674]
[49.96133041 142.93276978]
[60.91539001 132.68539429]
[71.86945343 122.43802643]
[82.82350922 112.19065857]
[69.99237061 119.95995331]
[55.09023666 118.24926758]
[44.35341263 107.77451324]
[42.27508163 92.91918945]
[49.72499084 79.90001678]
[63.58547974 74.16530609]
[78.05615234 78.11494446]
[87.08166504 90.09726715]
[80.72082520 76.51272583]
[68.85673523 71.37741852]
[63.84954834 59.89534378]
[67.89233398 48.46422577]
[61.79128265 34.76104355]
[55.69023514 21.05786324]
[49.58918381 7.35468102]
[43.48813629 -6.34850121]
[29.00721550 -12.08790302]
[23.01509094 -26.07178879]
[28.57597351 -39.84176254]
[22.19780922 -46.44535446]
[22.49197960 -53.86440277]
[16.65292931 -67.68125916]
[10.81387711 -81.49811554]
[4.97482538 -95.31496429]
[-0.86422622 -109.13182068]
[-6.70327806 -122.94867706]
[-21.70247269 -127.37113953]
[-30.30670166 -140.42875671]
[-28.45331001 -155.95611572]
[-17.01741219 -166.62167358]
[-1.39868987 -167.38949585]
[11.02817345 -157.89701843]
[14.39559364 -142.62631226]
[7.11357689 -128.78773499]
[12.95262814 -114.97087097]
[18.79167938 -101.15402222]
[24.63073158 -87.33716583]
[30.46978378 -73.52030945]
[36.30883408 -59.70345306]
[42.27915573 -45.94281387]
[56.23319626 -40.86144257]
[62.61573792 -27.05138016]
[57.19131851 -12.44955063]
[63.29236603 1.25363123]
[69.39341736 14.95681286]
[75.49446869 28.65999413]
[81.59551239 42.36317825]
[96.32351685 51.86975479]
[94.30536652 70.15188599]
[100.66620636 83.73642731]
[112.96712494 92.32057190]
[127.91209412 93.60419464]
[136.77613831 91.21314240]
[143.12847900 95.05718231]
[157.66181946 88.80477905]
[169.51060486 97.83005524]
[184.42843628 99.39797974]
[199.34625244 100.96591187]
[214.26408386 102.53383636]
[229.18191528 104.10176086]
[244.09974670 105.66969299]
[259.08276367 106.38341522]
[274.08206177 106.24062347]
[289.08139038 106.09782410]
[304.08071899 105.95502472]
[319.08004761 105.81222534]
[334.07934570 105.66943359]
[349.07867432 105.52663422]
[364.07800293 105.38383484]
[379.07733154 105.24103546]
[394.07662964 105.09824371]
[409.07595825 104.95544434]
[424.07528687 104.81264496]
[433.67825317 90.91491699]
[449.51016235 85.51704407]
[465.28680420 90.55297852]
[474.86947632 103.85591888]
[489.86337280 103.42758179]
[501.87994385 92.79833221]
[517.65698242 95.70787048]
[525.09161377 109.92424774]
[518.48071289 124.54187775]
[502.89550781 128.34736633]
[490.29171753 118.42146301]
[475.29782104 118.84980774]
[468.80053711 130.54153442]
[457.27615356 137.54237366]
[443.68899536 137.92605591]
[431.59655762 131.48484802]
[424.21807861 119.81196594]
[409.21875000 119.95476532]
[394.21942139 120.09756470]
[379.22012329 120.24035645]
[364.22079468 120.38315582]
[349.22146606 120.52595520]
[334.22216797 120.66875458]
[319.22283936 120.81154633]
[304.22351074 120.95434570]
[289.22418213 121.09714508]
[274.22488403 121.23994446]
[259.22555542 121.38273621]
[268.91824341 132.83052063]
[267.85290527 147.79263306]
[256.63598633 157.75158691]
[241.65295410 157.03800964]
[231.43325806 146.05812073]
[231.79466248 131.06248474]
[242.53181458 120.58751678]
[227.61398315 119.01959229]
[212.69616699 117.45166779]
[197.77833557 115.88373566]
[182.86050415 114.31581116]
[167.94267273 112.74788666]
[154.47636414 119.11243439]
[141.56054688 109.97501373]
[126.62847137 108.54917145]
[111.68349457 107.26554871]
[126.14468384 111.24977112]
[134.36271667 123.79822540]
[132.23504639 138.64656067]
[120.82383728 148.38227844]
[105.82570648 148.14517212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[6 36]
[7 35]
[8 34]
[11 30]
[12 29]
[13 28]
[50 92]
[51 91]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[61 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[93 159]
[94 158]
[96 157]
[98 155]
[99 154]
[100 153]
[101 152]
[102 151]
[103 150]
[104 143]
[105 142]
[106 141]
[107 140]
[108 139]
[109 138]
[110 137]
[111 136]
[112 135]
[113 134]
[114 133]
[115 132]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
