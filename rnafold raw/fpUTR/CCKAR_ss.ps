%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUGGCUGAAAAAGCCCACACCUGGAAAUCACUCCCUCCCUGCUCCUCCACGGCAGGUUGCAUCUGCGAGACGCUUCGGUCAUUAGAGGAAUGAGCCGGGAGUGAGCAAUUCACCAGCUCUCCAGCACUUGGUGGAAAGCAGCAGGCAAGG\
) } def
/len { sequence length } bind def

/coor [
[79.72901154 268.33535767]
[72.87541199 275.17950439]
[64.59152985 280.17129517]
[55.36515045 283.02471924]
[45.73769379 283.57940674]
[36.27240372 281.80969238]
[29.21832657 295.04751587]
[22.16424751 308.28533936]
[15.11016941 321.52316284]
[18.39254761 337.22683716]
[8.05087376 349.49179077]
[-7.98160505 348.90942383]
[-17.40614319 335.92645264]
[-12.99304199 320.50228882]
[1.87234569 314.46908569]
[8.92642403 301.23126221]
[15.98050308 287.99343872]
[23.03458214 274.75561523]
[10.75658417 258.12152100]
[8.45322990 237.50244141]
[16.81636047 218.43597412]
[33.66329193 206.07943726]
[54.50594711 203.81494141]
[59.60428619 189.70796204]
[64.70262146 175.60096741]
[69.80096436 161.49398804]
[60.93394852 156.27909851]
[52.94771576 149.79533386]
[46.02231598 142.18888855]
[40.31389618 133.63125610]
[35.95115280 124.31538391]
[33.03244781 114.45129395]
[31.62359047 104.26139069]
[31.75634003 93.97540283]
[33.42770767 83.82524872]
[36.60000610 74.03976440]
[41.20171738 64.83958435]
[47.12908936 56.43212509]
[54.24848175 49.00694656]
[62.39938736 42.73144913]
[71.39803314 37.74712372]
[81.04153442 34.16635132]
[91.11247253 32.06985474]
[90.80649567 17.07297516]
[90.50051880 2.07609582]
[90.19454193 -12.92078304]
[89.88856506 -27.91766167]
[89.42963409 -42.91064072]
[88.81781006 -57.89815521]
[88.20597839 -72.88567352]
[87.59414673 -87.87319183]
[84.09972382 -96.37950134]
[87.12586212 -103.17201996]
[86.81988525 -118.16889954]
[86.51390076 -133.16577148]
[86.20792389 -148.16265869]
[75.08853912 -159.07122803]
[74.99187469 -174.28456116]
[85.46005249 -184.81796265]
[85.15407562 -199.81484985]
[84.84809875 -214.81172180]
[76.83090210 -228.45120239]
[84.30697632 -241.33364868]
[80.98679352 -249.90946960]
[84.15086365 -256.63885498]
[84.15086365 -271.63885498]
[84.15086365 -286.63885498]
[84.15086365 -301.63885498]
[73.56988525 -310.03106689]
[69.82763672 -322.80422974]
[74.08070374 -335.21060181]
[84.55644226 -342.77294922]
[84.86241913 -357.76983643]
[85.16839600 -372.76672363]
[74.04393768 -383.99264526]
[74.19924927 -399.79617310]
[85.54218292 -410.80133057]
[101.34318542 -410.47894287]
[112.22779083 -399.02029419]
[111.73837280 -383.22360229]
[100.16527557 -372.46072388]
[99.85929871 -357.46386719]
[99.55332184 -342.46697998]
[111.70074463 -330.87536621]
[111.73596191 -313.74780273]
[99.15086365 -301.63885498]
[99.15086365 -286.63885498]
[99.15086365 -271.63885498]
[99.15086365 -256.63885498]
[99.30385590 -241.63963318]
[107.29916382 -229.07283020]
[99.84497833 -215.11770630]
[100.15095520 -200.12081909]
[100.45693207 -185.12394714]
[111.34604645 -175.02629089]
[111.86999512 -159.82167053]
[101.20480347 -148.46862793]
[101.51078033 -133.47175598]
[101.81675720 -118.47487640]
[102.12274170 -103.47799683]
[102.58166504 -88.48502350]
[103.19349670 -73.49750519]
[103.80532074 -58.50998688]
[104.41715240 -43.52246857]
[107.85306549 -36.92774963]
[104.88544464 -28.22364044]
[105.19142151 -13.22676086]
[105.49739838 1.77011764]
[105.80337524 16.76699638]
[106.10935211 31.76387596]
[120.88084412 34.75060654]
[134.64190674 40.89474487]
[146.72665405 49.89897919]
[156.55030823 61.32759476]
[163.63751221 74.62756348]
[167.64529419 89.15529633]
[168.37973022 104.20780945]
[165.80528259 119.05670166]
[160.04652405 132.98344421]
[172.32405090 141.60101318]
[184.60157776 150.21858215]
[200.34214783 151.81384277]
[206.31431580 165.45870972]
[218.59184265 174.07627869]
[230.86936951 182.69384766]
[243.14689636 191.31141663]
[258.88745117 192.90667725]
[264.85964966 206.55154419]
[281.23364258 207.45957947]
[288.39178467 222.21400452]
[278.97039795 235.63671875]
[262.66137695 233.91960144]
[256.24206543 218.82907104]
[241.37966919 217.85018921]
[234.52932739 203.58892822]
[222.25180054 194.97135925]
[209.97427368 186.35380554]
[197.69676208 177.73623657]
[182.83435059 176.75735474]
[175.98400879 162.49609375]
[163.70648193 153.87852478]
[151.42895508 145.26097107]
[132.06271362 160.54316711]
[108.53894043 167.97483826]
[83.90794373 166.59233093]
[78.80960846 180.69931030]
[73.71126556 194.80628967]
[68.61293030 208.91328430]
[76.34154510 214.91380310]
[82.39526367 222.58285522]
[86.42546082 231.46788025]
[88.20270538 241.04663086]
[87.62974548 250.75785828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 18]
[7 17]
[8 16]
[9 15]
[23 148]
[24 147]
[25 146]
[26 145]
[43 110]
[44 109]
[45 108]
[46 107]
[47 106]
[48 104]
[49 103]
[50 102]
[51 101]
[53 100]
[54 99]
[55 98]
[56 97]
[59 94]
[60 93]
[61 92]
[63 90]
[65 89]
[66 88]
[67 87]
[68 86]
[72 83]
[73 82]
[74 81]
[119 142]
[120 141]
[121 140]
[123 138]
[124 137]
[125 136]
[126 135]
[128 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
