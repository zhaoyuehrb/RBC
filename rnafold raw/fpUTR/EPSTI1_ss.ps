%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUCUGCUGCUGAUUCUGAGAAACCGAAACUCAGCUGUUAAAACCGCUGCCUCUGCACUUUGGAAUCCCAUCUUGAGACUCGCUAAGCGUCCCAGCCGCAUCCCUCCCGCAGCGACGGCGGCCCGGGACCCGCGGGCUGUGAACC\
) } def
/len { sequence length } bind def

/coor [
[107.48961639 241.09942627]
[105.90058136 226.18383789]
[104.31154633 211.26823425]
[102.72251129 196.35264587]
[101.13346863 181.43704224]
[99.54443359 166.52145386]
[97.95539856 151.60586548]
[96.36636353 136.69026184]
[94.77732849 121.77466583]
[77.16363525 109.30347443]
[77.21118164 85.65985870]
[64.43824768 93.52446747]
[51.66530991 101.38908386]
[38.89237213 109.25369263]
[26.11943436 117.11830139]
[13.51630497 125.25225067]
[1.08866036 133.65187073]
[-11.33898449 142.05148315]
[-10.87897682 157.47200012]
[-18.84852219 170.68145752]
[-32.70456696 177.46478271]
[-48.02569962 175.65744019]
[-59.92300034 165.83615112]
[-64.60008240 151.13484192]
[-60.56451035 136.24465942]
[-49.10401917 125.91699219]
[-33.87560654 123.44737244]
[-19.73860550 129.62384033]
[-7.31096125 121.22422028]
[5.11668348 112.82460022]
[6.89400148 108.32376862]
[11.55597878 104.92308044]
[18.25482559 104.34535980]
[31.02776337 96.48075104]
[43.80070114 88.61614227]
[56.57363892 80.75153351]
[69.34657288 72.88692474]
[56.44219208 80.53394318]
[41.45042801 81.03091431]
[28.06794167 74.25528717]
[19.59458733 61.87779999]
[18.11971664 46.95048141]
[24.00700378 33.15411377]
[35.80476379 23.89059067]
[50.60391235 21.44411278]
[64.75527954 26.41793251]
[74.76942444 37.58560562]
[78.17708588 52.19219208]
[75.01689911 37.52886200]
[71.85671234 22.86553383]
[68.38600159 8.27258492]
[64.60633087 -6.24340963]
[49.80629730 -19.86265945]
[55.57219696 -38.27675629]
[51.17985535 -52.61925507]
[46.78751373 -66.96175385]
[41.24547195 -74.31189728]
[42.45764160 -81.65547943]
[38.37071609 -96.08798218]
[23.95836258 -101.52767181]
[15.61017418 -114.26192474]
[16.35235214 -129.29232788]
[25.69094658 -140.86508179]
[21.60401917 -155.29759216]
[17.51709175 -169.73008728]
[5.38746262 -180.76657104]
[9.14442348 -196.72956848]
[24.92313576 -201.19770813]
[36.49181366 -189.57455444]
[31.94959068 -173.81701660]
[36.03651810 -159.38450623]
[40.12344360 -144.95201111]
[54.14321136 -139.99377441]
[62.65575027 -127.58406830]
[62.22368240 -112.36346436]
[52.80321503 -100.17490387]
[56.89014053 -85.74240875]
[61.13001633 -71.35409546]
[65.52235413 -57.01159668]
[69.91469574 -42.66909409]
[79.40702057 -38.66365433]
[85.21810913 -29.89040947]
[85.20274353 -19.14672852]
[79.12232208 -10.02308083]
[82.90199280 4.49291372]
[86.55362701 7.66811323]
[88.20697021 13.19669151]
[86.52003479 19.70534515]
[89.68022919 34.36867142]
[92.84041595 49.03200150]
[104.51095581 58.45530319]
[119.51095581 58.45530319]
[134.51095581 58.45530319]
[149.51095581 58.45530319]
[164.51095581 58.45530319]
[180.19731140 48.87201309]
[195.05799866 58.15052032]
[210.05461121 57.83213806]
[225.05123901 57.51375961]
[240.04785156 57.19537735]
[255.04447937 56.87699509]
[270.52389526 46.96291733]
[285.57815552 55.92391205]
[300.56466675 55.28729248]
[314.02401733 46.97126770]
[327.06820679 54.16143799]
[342.05468750 53.52481842]
[353.92245483 42.72964096]
[369.73834229 45.41970062]
[377.36981201 59.53141403]
[370.96261597 74.23948669]
[355.43179321 78.26113129]
[342.69131470 68.51130676]
[327.70480347 69.14791870]
[315.31738281 77.41841125]
[301.20126343 70.27378082]
[286.21478271 70.91039276]
[277.76486206 79.62682343]
[265.23825073 80.24070740]
[255.36285400 71.87361908]
[240.36624146 72.19200134]
[225.36961365 72.51037598]
[210.37300110 72.82875824]
[195.37637329 73.14714050]
[186.74334717 81.68225098]
[174.20652771 82.03011322]
[164.51095581 73.45529938]
[149.51095581 73.45529938]
[134.51095581 73.45529938]
[119.51095581 73.45529938]
[104.51095581 73.45529938]
[121.52420807 86.48730469]
[122.96401215 106.63472748]
[109.69292450 120.18563080]
[111.28195953 135.10122681]
[112.87099457 150.01681519]
[114.46002960 164.93241882]
[116.04906464 179.84800720]
[117.63809967 194.76361084]
[119.22714233 209.67919922]
[120.81617737 224.59480286]
[122.40521240 239.51039124]
[134.85742188 249.24270630]
[136.69772339 264.93948364]
[126.83428955 277.28811646]
[111.11892700 278.96234131]
[98.87528992 268.96890259]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 142]
[2 141]
[3 140]
[4 139]
[5 138]
[6 137]
[7 136]
[8 135]
[9 134]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[16 30]
[17 29]
[18 28]
[48 90]
[49 89]
[50 88]
[51 85]
[52 84]
[54 80]
[55 79]
[56 78]
[58 77]
[59 76]
[63 72]
[64 71]
[65 70]
[91 131]
[92 130]
[93 129]
[94 128]
[95 127]
[97 124]
[98 123]
[99 122]
[100 121]
[101 120]
[103 117]
[104 116]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
