%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCUGCCUUAAGACGUGCAGCCUGGGCCGUGGCUGUCACUGCGUUCGGACCCAGACCCGCUGCAGGCAGCAGCAGCCCCCGCCCGCGCAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[184.80973816 217.13952637]
[175.37623596 205.47724915]
[165.94271851 193.81495667]
[156.50920105 182.15267944]
[147.07569885 170.49038696]
[137.64218140 158.82810974]
[128.20866394 147.16583252]
[118.77516174 135.50354004]
[109.34164429 123.84126282]
[99.90813446 112.17897797]
[97.75637817 127.02384186]
[87.46926117 137.94058228]
[72.77822876 140.96937561]
[59.01215744 135.01156616]
[51.16442108 122.22826385]
[52.08161926 107.25633240]
[61.43106461 95.52655029]
[75.82143402 91.29365540]
[90.03260803 96.09283447]
[83.90198517 82.40286255]
[77.77136230 68.71288300]
[71.64073944 55.02290726]
[65.51011658 41.33293152]
[58.50620270 28.06849670]
[50.65837097 15.28524494]
[42.81053925 2.50199270]
[34.96270752 -10.28125954]
[27.11487579 -23.06451225]
[19.06107330 -35.71900940]
[10.80341148 -48.24142838]
[2.54575014 -60.76385117]
[-14.57116795 -63.89710236]
[-24.02070999 -78.10832977]
[-20.43219757 -94.44990540]
[-29.09102821 -106.69835663]
[-44.68899536 -107.81077576]
[-55.88665771 -118.72619629]
[-57.39682007 -134.29069519]
[-48.50643539 -147.15518188]
[-33.41326904 -151.24543762]
[-19.24384880 -144.63018799]
[-12.68854618 -130.43293762]
[-16.84257317 -115.35718536]
[-8.18374252 -103.10873413]
[4.80556631 -102.69670868]
[15.30614758 -94.71195984]
[19.29122543 -81.93148041]
[15.06817055 -69.02151489]
[23.32583237 -56.49909210]
[31.58349419 -43.97666931]
[38.01604080 -40.05123901]
[39.89812851 -30.91234398]
[47.74596024 -18.12909126]
[55.59379196 -5.34583855]
[63.44162369 7.43741369]
[71.28945160 20.22066689]
[74.18955231 20.93892860]
[76.94725800 22.96151161]
[79.01894379 26.22728920]
[79.89925385 30.46234131]
[79.20009613 35.20230865]
[85.33071899 48.89228439]
[91.46134186 62.58226013]
[97.59196472 76.27223969]
[103.72258759 89.96221161]
[111.57041931 102.74546814]
[121.00392914 114.40775299]
[130.43743896 126.07003021]
[139.87095642 137.73231506]
[149.30445862 149.39459229]
[158.73797607 161.05688477]
[168.17149353 172.71916199]
[177.60499573 184.38145447]
[187.03851318 196.04373169]
[196.47203064 207.70600891]
[211.16661072 213.56945801]
[213.15515137 228.33071899]
[222.58866882 239.99299622]
[238.06065369 241.79725647]
[247.46144104 253.75885010]
[245.64602661 268.49789429]
[260.34060669 274.36135864]
[262.32916260 289.12261963]
[271.76266479 300.78491211]
[287.25524902 306.16183472]
[290.07882690 322.31607056]
[277.32873535 332.62951660]
[262.12115479 326.49258423]
[260.10037231 310.21841431]
[250.66687012 298.55612183]
[236.64703369 293.52685547]
[233.98373413 277.93142700]
[219.19071960 276.62677002]
[209.45765686 264.93395996]
[210.92639160 249.42651367]
[201.49287415 237.76423645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[8 68]
[9 67]
[10 66]
[19 65]
[20 64]
[21 63]
[22 62]
[23 61]
[24 56]
[25 55]
[26 54]
[27 53]
[28 52]
[29 50]
[30 49]
[31 48]
[34 44]
[35 43]
[77 96]
[78 95]
[81 92]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
