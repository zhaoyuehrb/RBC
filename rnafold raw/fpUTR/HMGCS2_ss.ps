%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAGUCCUGCCGGGCACCACUGGGCAUCUCUUUCAAGGUUUCUGCUGGGUUUCUGAACUGCUGGGUUUCUGCUUGCUCCUCUGGAG\
) } def
/len { sequence length } bind def

/coor [
[88.33523560 123.61002350]
[81.93952179 119.16556549]
[77.12350464 113.04476166]
[62.51660156 116.45627594]
[47.90970230 119.86779022]
[33.30279922 123.27930450]
[27.19893265 137.42317200]
[14.09033012 145.17030334]
[-0.88931996 143.73013306]
[-12.01539230 133.86360168]
[-26.62229347 137.27511597]
[-41.22919464 140.68663025]
[-55.83609772 144.09814453]
[-67.51488495 154.77130127]
[-81.66835022 150.13139343]
[-96.27524567 153.54290771]
[-105.92930603 166.35612488]
[-121.96961212 166.65315247]
[-132.09141541 154.20611572]
[-128.53013611 138.56332397]
[-114.01767731 131.72459412]
[-99.68675995 138.93600464]
[-85.07986450 135.52449036]
[-74.44585419 125.09533691]
[-59.24761200 129.49124146]
[-44.64070892 126.07972717]
[-30.03380775 122.66821289]
[-15.42690754 119.25669098]
[-9.82222080 105.48260498]
[2.96982455 97.55622101]
[18.15388107 98.69544983]
[29.89128494 108.67240143]
[44.49818420 105.26088715]
[59.10508728 101.84937286]
[73.71199036 98.43785858]
[80.93112183 81.83746338]
[97.16058350 73.81913757]
[114.73171234 78.17165375]
[126.31636047 68.64297485]
[137.90101624 59.11428833]
[149.48567200 49.58560181]
[147.07882690 34.48082352]
[152.51976013 20.29304314]
[164.25372314 10.79670811]
[179.06642151 8.46434784]
[192.96411133 13.82343197]
[204.54876709 4.29474783]
[216.13342285 -5.23393631]
[221.87634277 -19.97603035]
[236.62083435 -22.08537865]
[248.20549011 -31.61406326]
[259.79013062 -41.14274597]
[257.88522339 -56.45204926]
[264.58010864 -70.35103607]
[277.73852539 -78.40459442]
[293.16165161 -78.04285431]
[305.92800903 -69.38124847]
[311.96392822 -55.18367004]
[309.34335327 -39.98050690]
[298.90249634 -28.62303734]
[283.97299194 -24.73538780]
[269.31881714 -29.55809402]
[257.73416138 -20.02940941]
[246.14952087 -10.50072575]
[241.23519897 3.55981374]
[225.66209412 6.35071659]
[214.07745361 15.87940025]
[202.49279785 25.40808487]
[205.06997681 40.07859039]
[199.92367554 54.16303635]
[188.34194946 63.84447098]
[173.37101746 66.44598389]
[159.01435852 61.17025757]
[147.42970276 70.69894409]
[135.84504700 80.22762299]
[124.26039124 89.75630951]
[125.64424896 105.98934174]
[117.21316528 119.93004608]
[123.37863922 133.60437012]
[129.54411316 147.27868652]
[135.70959473 160.95300293]
[147.73194885 172.90704346]
[139.57318115 187.76876831]
[123.03369141 184.04299927]
[122.03527832 167.11846924]
[115.86979675 153.44415283]
[109.70432281 139.76983643]
[103.53884888 126.09552765]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 35]
[4 34]
[5 33]
[6 32]
[10 28]
[11 27]
[12 26]
[13 25]
[15 23]
[16 22]
[38 76]
[39 75]
[40 74]
[41 73]
[46 68]
[47 67]
[48 66]
[50 64]
[51 63]
[52 62]
[78 88]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
