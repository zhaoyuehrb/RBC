%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGGGAGCAGAGGGCAGCACUUCCUCCAGCUCCAAAAGAGUGCACCCACCCCAACGUUACCAAUACACUCGUGCAGGCGGAAAGCUCCGACGCCGGUGUGCGUCUACGCUGGGGGCGUGGCCUGACUGCGCGGCCAGACGCCAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[95.62366486 143.99253845]
[89.66522980 142.98474121]
[83.89988708 141.17379761]
[78.43536377 138.59355164]
[73.37377167 135.29220581]
[62.43924332 145.56040955]
[51.50471115 155.82861328]
[40.57018280 166.09681702]
[29.63565445 176.36502075]
[24.75935173 194.09002686]
[7.57281876 197.49595642]
[-3.14427161 207.99090576]
[-13.86136150 218.48585510]
[-24.57845116 228.98080444]
[-35.29554367 239.47575378]
[-33.91552353 255.05232239]
[-42.91312790 267.84204102]
[-58.03995514 271.80603027]
[-72.15358734 265.07257080]
[-78.58999634 250.82101440]
[-74.31010437 235.78051758]
[-61.33474731 227.05273438]
[-45.79049301 228.75866699]
[-35.07340240 218.26371765]
[-24.35631180 207.76875305]
[-13.63922119 197.27380371]
[-2.92213154 186.77885437]
[-2.46879792 174.64935303]
[6.43181467 165.81632996]
[19.36744690 165.43049622]
[30.30197716 155.16229248]
[41.23650742 144.89408875]
[52.17103577 134.62588501]
[63.10556412 124.35767365]
[56.70707703 108.95647430]
[56.46945572 92.28070831]
[62.42651749 76.70345306]
[73.73052979 64.44145203]
[88.77286530 57.23965836]
[105.41288757 56.12294388]
[109.74836731 41.76314926]
[102.53662872 27.95631981]
[107.13797760 13.45520973]
[120.34512329 6.66500330]
[124.68059540 -7.69478893]
[129.01608276 -22.05458069]
[125.59769440 -37.50208282]
[136.68334961 -47.44982147]
[136.17103577 -56.63774872]
[141.26290894 -62.06320572]
[145.89816284 -76.32904816]
[150.53341675 -90.59490204]
[155.16867065 -104.86074829]
[159.80392456 -119.12659454]
[156.70980835 -134.64230347]
[168.00135803 -144.35569763]
[172.63661194 -158.62153625]
[177.27186584 -172.88739014]
[173.00592041 -190.76910400]
[186.42578125 -202.03341675]
[190.76126099 -216.39320374]
[185.03819275 -225.74058533]
[185.43408203 -236.47312927]
[191.57324219 -245.01533508]
[201.20726013 -248.65614319]
[206.14025879 -262.82180786]
[211.07325745 -276.98742676]
[216.00625610 -291.15307617]
[220.93925476 -305.31872559]
[220.81214905 -314.52005005]
[226.12673950 -319.72750854]
[231.35533142 -333.78674316]
[231.42094421 -342.98870850]
[236.84342957 -348.08374023]
[242.36529541 -362.03039551]
[242.62361145 -371.22897339]
[248.15161133 -376.20932007]
[246.36665344 -391.92950439]
[258.43139648 -400.66400146]
[264.24414062 -414.49194336]
[270.05688477 -428.31988525]
[275.86959839 -442.14782715]
[273.27856445 -458.34100342]
[286.17559814 -468.47009277]
[301.29336548 -462.11514282]
[303.07998657 -445.81362915]
[289.69757080 -436.33511353]
[283.88482666 -422.50714111]
[278.07208252 -408.67919922]
[272.25936890 -394.85125732]
[274.46008301 -380.12011719]
[261.97955322 -370.39657593]
[256.31195068 -356.50851440]
[250.79006958 -342.56188965]
[245.41455078 -328.55816650]
[240.18597412 -314.49893188]
[235.10490417 -300.38574219]
[230.17190552 -286.22009277]
[225.23890686 -272.05444336]
[220.30590820 -257.88879395]
[215.37290955 -243.72314453]
[220.43377686 -225.10104370]
[205.12104797 -212.05772400]
[200.78556824 -197.69793701]
[206.23175049 -186.85037231]
[202.68742371 -174.82203674]
[191.53771973 -168.25213623]
[186.90246582 -153.98628235]
[182.26721191 -139.72044373]
[185.69287109 -125.22512817]
[174.06977844 -114.49134064]
[169.43452454 -100.22549438]
[164.79927063 -85.95964813]
[160.16401672 -71.69379425]
[155.52874756 -57.42794800]
[151.04313660 -43.11434555]
[154.77162170 -28.69395256]
[143.37586975 -17.71910477]
[139.04039001 -3.35931206]
[134.70491028 11.00048065]
[141.94778442 23.96491051]
[137.75555420 38.58954239]
[124.10816193 46.09862900]
[119.77268219 60.45841980]
[133.75738525 71.45294189]
[142.27644348 87.06950378]
[143.95054626 104.77964020]
[138.50863647 121.71590424]
[126.83181000 135.13615417]
[133.78125000 148.42921448]
[140.73068237 161.72225952]
[147.68013000 175.01531982]
[154.76838684 188.23487854]
[161.99468994 201.37947083]
[169.22099304 214.52407837]
[184.16389465 220.36270142]
[188.77798462 235.72792053]
[179.52374268 248.83282471]
[163.50024414 249.62448120]
[152.99932861 237.49557495]
[156.07640076 221.75038147]
[148.85009766 208.60577393]
[141.62379456 195.46118164]
[135.60548401 191.08593750]
[134.38706970 181.96476746]
[127.43763733 168.67170715]
[120.48819733 155.37864685]
[113.53874969 142.08560181]
[107.67299652 143.53872681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[40 124]
[41 123]
[44 120]
[45 119]
[46 118]
[48 116]
[50 115]
[51 114]
[52 113]
[53 112]
[54 111]
[56 109]
[57 108]
[58 107]
[60 104]
[61 103]
[65 101]
[66 100]
[67 99]
[68 98]
[69 97]
[71 96]
[72 95]
[74 94]
[75 93]
[77 92]
[79 90]
[80 89]
[81 88]
[82 87]
[129 148]
[130 147]
[131 146]
[132 145]
[133 143]
[134 142]
[135 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
