%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUGUGGCGCGCCGCCUGGUUCCCGGGAAGACUCGCCAGCACCAGGGGGUGGGGGAGUGCGAGCUGAAAGCUGCUGGAGAGUGAGCAGCCCUAGCAGGG\
) } def
/len { sequence length } bind def

/coor [
[85.90578461 229.13946533]
[91.95212555 213.30033875]
[91.95212555 198.30033875]
[91.95212555 183.30033875]
[91.95212555 168.30033875]
[91.95212555 153.30033875]
[91.48562622 138.30760193]
[90.55307770 123.33660889]
[81.81196594 111.14674377]
[66.10871124 113.07505035]
[57.26451874 101.09049988]
[43.38410950 95.40416718]
[29.50370407 89.71784210]
[15.62329674 84.03151703]
[-0.07995786 85.95982361]
[-8.92415142 73.97527313]
[-22.80455780 68.28894806]
[-36.68496323 62.60261917]
[-50.56537247 56.91629410]
[-64.44577789 51.22996902]
[-78.32618713 45.54364014]
[-94.02944183 47.47194672]
[-102.87363434 35.48739624]
[-122.55728149 39.24750900]
[-134.00500488 23.79556274]
[-148.21206665 18.98317719]
[-162.41914368 14.17078972]
[-176.62622070 9.35840321]
[-192.59352112 13.09701252]
[-203.61607361 0.95470470]
[-198.35479736 -14.57755470]
[-182.22206116 -17.52150917]
[-171.81382751 -4.84867001]
[-157.60676575 -0.03628350]
[-143.39968872 4.77610302]
[-129.19261169 9.58848953]
[-120.27487946 4.17089891]
[-109.63006592 4.66298485]
[-100.89372253 11.14427376]
[-97.18730927 21.60698891]
[-82.47687531 19.27195740]
[-72.63986206 31.66323471]
[-58.75945282 37.34955978]
[-44.87904739 43.03588486]
[-30.99863815 48.72221375]
[-17.11823273 54.40853882]
[-3.23782516 60.09486389]
[11.47260952 57.75983429]
[21.30962372 70.15110779]
[35.19002914 75.83744049]
[49.07043839 81.52376556]
[62.95084381 87.21009064]
[77.66127777 84.87506104]
[87.49829102 97.26633453]
[83.11571503 86.39880371]
[87.26285553 72.21520996]
[101.30190277 60.57228088]
[110.78395081 48.94942474]
[120.26599121 37.32656860]
[122.35460663 21.06096649]
[137.58761597 14.98746967]
[150.29461670 25.35396767]
[147.40373230 41.49629593]
[131.88885498 46.80861282]
[122.40680695 58.43146896]
[112.92475891 70.05432892]
[115.10887146 77.22925568]
[129.45880127 72.86127472]
[133.82655334 87.21128845]
[119.47708893 91.57912445]
[121.66120148 98.75405884]
[136.01106262 103.12227631]
[150.36093140 107.49050140]
[164.71080017 111.85871887]
[179.06066895 116.22694397]
[193.41052246 120.59516144]
[205.71006775 111.13467407]
[221.22222900 110.74411774]
[233.98226929 119.57367706]
[239.08367920 134.22821045]
[234.56488037 149.07273865]
[222.16343689 158.39924622]
[206.64794922 158.62149048]
[193.98445129 149.65403748]
[189.04231262 134.94502258]
[174.69244385 130.57681274]
[160.34257507 126.20858765]
[145.99270630 121.84036255]
[131.64283752 117.47214508]
[117.29297638 113.10392761]
[105.52406311 122.40406799]
[106.45661163 137.37504578]
[109.93435669 143.33528137]
[109.76550293 149.24131775]
[106.95212555 153.30033875]
[106.95212555 168.30033875]
[106.95212555 183.30033875]
[106.95212555 198.30033875]
[106.95212555 213.30033875]
[112.99846649 229.13946533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[4 97]
[5 96]
[6 95]
[7 92]
[8 91]
[9 54]
[11 52]
[12 51]
[13 50]
[14 49]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[23 40]
[25 36]
[26 35]
[27 34]
[28 33]
[57 66]
[58 65]
[59 64]
[71 90]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
