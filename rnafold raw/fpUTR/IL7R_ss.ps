%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGUUAGAUAAGUAUAAAGCCCUAGAUCUAAGCUUCUCUGUCUUCCUCCCUCCCUCCCUUCCUCUUACUCUCAUUCAUUUCAUACACACUGGCUCACACAUCUACUCUCUCUCUCUAUCUCUCUCAGA\
) } def
/len { sequence length } bind def

/coor [
[238.76225281 256.93551636]
[228.54701233 245.95149231]
[218.33177185 234.96746826]
[207.98455811 224.10766602]
[197.50689697 213.37367249]
[187.02922058 202.63969421]
[176.55155945 191.90570068]
[166.07388306 181.17172241]
[153.04217529 184.32012939]
[140.05960083 180.56333923]
[130.57179260 170.78634644]
[127.15226746 157.48654175]
[130.80494690 144.13626099]
[120.58969879 133.15222168]
[110.37446594 122.16819763]
[100.15922546 111.18416595]
[89.81201935 100.32437134]
[79.33434296 89.59038544]
[68.85667419 78.85639954]
[53.52698135 84.16496277]
[37.47145081 82.28808594]
[23.87734413 73.64910126]
[15.42121220 60.00867844]
[13.74196243 44.10615921]
[19.12343979 29.10953522]
[8.38945484 18.63186455]
[-2.34452987 8.15419388]
[-15.29298592 7.51246500]
[-24.02293205 -1.52057111]
[-24.20913696 -13.67912388]
[-34.68680573 -24.41310883]
[-45.16447830 -35.14709091]
[-55.64214706 -45.88107681]
[-68.20157623 -37.59510803]
[-82.10227203 -31.83600998]
[-96.84172821 -28.81197548]
[-111.88713837 -28.63231850]
[-126.69460297 -31.30353546]
[-140.72885132 -36.72906494]
[-153.48255920 -44.71277237]
[-164.49467468 -54.96605301]
[-173.36711121 -67.11826324]
[-179.77915955 -80.73010254]
[-183.49902344 -95.30950928]
[-184.39221191 -110.32945251]
[-182.42645264 -125.24697113]
[-177.67280579 -139.52279663]
[-170.30311584 -152.64088440]
[-160.58378601 -164.12699890]
[-148.86614990 -173.56594849]
[-135.57382202 -180.61651611]
[-121.18729401 -185.02381897]
[-106.22663879 -186.62854004]
[-91.23265839 -185.37266541]
[-76.74739838 -181.30160522]
[-63.29447174 -174.56251526]
[-51.36020279 -165.39901733]
[-41.37600708 -154.14234924]
[-33.70280838 -141.19946289]
[-28.61798477 -127.03820801]
[-26.30535316 -112.17051697]
[-26.84850883 -97.13385010]
[-30.22782135 -82.47176361]
[-36.32112885 -68.71428680]
[-44.90816498 -56.35874557]
[-34.43049240 -45.62476349]
[-23.95282173 -34.89077759]
[-13.47515202 -24.15679359]
[3.61901236 -20.38355064]
[8.13314056 -2.57979012]
[18.86712456 7.89788008]
[29.60110855 18.37555122]
[42.44249725 12.98767090]
[56.41166687 12.91966915]
[69.38534546 18.21510696]
[79.37886810 28.09979248]
[84.84976959 41.09479141]
[84.93579865 55.23764801]
[79.59066010 68.37873077]
[90.06832886 79.11271667]
[100.54599762 89.84669495]
[108.06066895 92.99884796]
[111.14325714 100.96893311]
[121.35849762 111.95295715]
[131.57373047 122.93698883]
[141.78897095 133.92102051]
[158.49986267 131.63993835]
[173.15046692 139.65618896]
[180.10046387 154.65939331]
[176.80786133 170.69404602]
[187.28553772 181.42803955]
[197.76321411 192.16201782]
[208.24087524 202.89601135]
[218.71855164 213.62998962]
[227.04130554 217.63975525]
[229.31581116 224.75222778]
[239.53103638 235.73625183]
[249.74627686 246.72027588]
[262.45526123 238.67065430]
[276.42706299 233.09358215]
[291.18579102 230.17901611]
[306.22875977 230.02622986]
[321.04364014 232.64041138]
[335.12582397 237.93252563]
[347.99569702 245.72233582]
[359.21490479 255.74452209]
[368.40130615 267.65774536]
[375.24203491 281.05621338]
[379.50411987 295.48358154]
[381.04235840 310.44848633]
[379.80435181 325.44122314]
[375.83230591 339.95114136]
[369.26150513 353.48403931]
[360.31570435 365.57894897]
[349.29962158 375.82400513]
[336.58847046 383.87020874]
[322.61517334 389.44351196]
[307.85568237 392.35409546]
[292.81265259 392.50283813]
[277.99847412 389.88464355]
[263.91772461 384.58874512]
[251.04995728 376.79547119]
[239.83345032 366.77023315]
[230.65025330 354.85455322]
[223.81312561 341.45425415]
[219.55494690 327.02572632]
[218.02075195 312.06039429]
[219.26277161 297.06799316]
[223.23873901 282.55917358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[4 94]
[5 93]
[6 92]
[7 91]
[8 90]
[13 86]
[14 85]
[15 84]
[16 83]
[17 81]
[18 80]
[19 79]
[25 72]
[26 71]
[27 70]
[30 68]
[31 67]
[32 66]
[33 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
