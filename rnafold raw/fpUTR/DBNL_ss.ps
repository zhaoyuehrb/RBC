%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCCGGUUGUCGGAGGCGAGGCUUGUCGGCUGUCAAAGGGGCGGCCCGGCCCGGCCCGGAAGCUACAGCAGCGGCGCGGAGACUGCGGGGCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[80.03047180 120.65357971]
[71.13684845 132.73263550]
[62.24323273 144.81169128]
[53.34961319 156.89074707]
[44.45599365 168.96980286]
[35.56237411 181.04884338]
[26.66875458 193.12789917]
[27.64656258 209.14112854]
[15.64051628 219.78230286]
[-0.13937505 216.88841248]
[-7.58812761 202.67941284]
[-0.99169612 188.05522156]
[14.58970165 184.23428345]
[23.48332024 172.15522766]
[32.37693787 160.07617188]
[41.27055740 147.99711609]
[50.16417694 135.91807556]
[59.05779648 123.83901215]
[67.95141602 111.75996399]
[54.35552216 118.09650421]
[42.28765869 127.00529480]
[27.34596634 128.32658386]
[13.90198898 121.67381287]
[5.88907862 108.99338531]
[5.65160036 93.99526215]
[13.25903416 81.06750488]
[26.48564529 73.99242401]
[41.46168137 74.84000397]
[53.80434036 83.36081696]
[67.59442902 89.26279449]
[58.32204437 77.47200012]
[49.04965973 65.68119812]
[39.77727509 53.89040375]
[30.50489235 42.09960938]
[21.23250771 30.30881119]
[11.96012211 18.51801491]
[-3.73466158 15.19336224]
[-10.79176712 0.78583604]
[-3.79758668 -13.65234280]
[11.88254261 -17.04543877]
[24.22016716 -6.79055834]
[23.75091934 9.24563122]
[33.02330399 21.03642654]
[42.29568863 32.82722473]
[51.56807327 44.61801910]
[60.84045792 56.40881729]
[70.11284637 68.19961548]
[79.38523102 79.99040985]
[104.58240509 75.92031097]
[118.73665619 92.20174408]
[133.73477173 91.96375275]
[148.73287964 91.72576141]
[163.73098755 91.48777771]
[178.72911072 91.24978638]
[193.72721863 91.01179504]
[207.40289307 83.05651855]
[220.25132751 90.59091187]
[235.24943542 90.35292053]
[250.24754333 90.11493683]
[265.24566650 89.87694550]
[278.92132568 81.92166138]
[291.76977539 89.45606232]
[302.72863770 78.38623810]
[317.94223022 78.35854340]
[328.42810059 88.87436676]
[343.42620850 88.63637543]
[351.70593262 77.87386322]
[364.50387573 73.95954132]
[377.01596069 78.12561035]
[384.68182373 88.61462402]
[399.67993164 88.85261536]
[410.85534668 77.67737579]
[426.65939331 77.76103973]
[437.71585083 89.05397034]
[437.46511841 104.85626984]
[426.05590820 115.79271698]
[410.25714111 115.37490845]
[399.44195557 103.85072327]
[384.44381714 103.61273193]
[372.97286987 115.79677582]
[355.90466309 116.00776672]
[343.66418457 103.63449097]
[328.66607666 103.87248230]
[318.51916504 114.71570587]
[303.31231689 115.17071533]
[292.00775146 104.45417023]
[279.40484619 112.39243317]
[265.48364258 104.87505341]
[250.48553467 105.11304474]
[235.48742676 105.35103607]
[220.48930359 105.58902740]
[207.88639832 113.52728271]
[193.96520996 106.00991058]
[178.96708679 106.24789429]
[163.96897888 106.48588562]
[148.97087097 106.72387695]
[133.97276306 106.96186829]
[118.97464752 107.19985199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[50 98]
[51 97]
[52 96]
[53 95]
[54 94]
[55 93]
[57 91]
[58 90]
[59 89]
[60 88]
[62 86]
[65 83]
[66 82]
[70 79]
[71 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
