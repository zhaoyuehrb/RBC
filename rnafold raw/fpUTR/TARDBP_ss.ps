%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGGCGGGGGGAGGAGGCGGCCCUAGCGCCAUUUUGUGGGAGCGAAGCGGUGGCUGGGCUGCGCUUGGGUCCGUCGCUGCUUCGGUGUCCCUGUCGGGCUUCCCAGCAGCGGCCUAGCGGGAAAAGUAAAAG\
) } def
/len { sequence length } bind def

/coor [
[139.76319885 208.80285645]
[128.35939026 199.22149658]
[131.27278137 183.67083740]
[126.47184753 169.45988464]
[121.67092133 155.24893188]
[116.86999512 141.03799438]
[112.06906891 126.82704163]
[93.00433350 126.37928009]
[79.65947723 114.81754303]
[76.99199677 98.79317474]
[63.08423615 93.17407227]
[49.17647934 87.55497742]
[36.04332733 95.60646820]
[20.86485863 94.39505005]
[9.44524097 84.59421539]
[6.02739239 70.12161255]
[-7.88036537 64.50251007]
[-21.78812408 58.88341522]
[-35.76031876 53.42651749]
[-49.79506302 48.13255692]
[-63.82980347 42.83860016]
[-77.86454773 37.54463959]
[-91.89929199 32.25068283]
[-105.93403625 26.95672417]
[-119.96877289 21.66276550]
[-129.19638062 21.55132675]
[-134.26611328 16.07888222]
[-148.17387390 10.45978355]
[-162.08163452 4.84068489]
[-176.05381775 -0.61621296]
[-190.08856201 -5.91017151]
[-204.12330627 -11.20413017]
[-219.76615906 -8.83523083]
[-228.94369507 -20.56647491]
[-242.97843933 -25.86043358]
[-257.01318359 -31.15439224]
[-271.04794312 -36.44835281]
[-285.08267212 -41.74230957]
[-299.11740112 -47.03626633]
[-315.20291138 -43.84421539]
[-325.80505371 -56.35526276]
[-320.01730347 -71.69911194]
[-303.79357910 -74.09133911]
[-293.82345581 -61.07101059]
[-279.78872681 -55.77705383]
[-265.75396729 -50.48309326]
[-251.71922302 -45.18913651]
[-237.68447876 -39.89517593]
[-223.64973450 -34.60121918]
[-209.01074219 -37.34877777]
[-198.82934570 -25.23887253]
[-184.79460144 -19.94491386]
[-170.75987244 -14.65095615]
[-163.32319641 -15.23897743]
[-156.46252441 -9.06707287]
[-142.55476379 -3.44797373]
[-128.64701843 2.17112517]
[-114.67481995 7.62802315]
[-100.64007568 12.92198181]
[-86.60533142 18.21594048]
[-72.57058716 23.50989914]
[-58.53584671 28.80385780]
[-44.50110245 34.09781647]
[-30.46636009 39.39177322]
[-23.02969551 38.80375290]
[-16.16902351 44.97565842]
[-2.26126647 50.59475708]
[11.64649105 56.21385574]
[24.15860176 48.17737198]
[39.18141937 49.05997467]
[50.94141388 58.73240662]
[54.79557800 73.64721680]
[68.70333099 79.26631927]
[82.61109161 84.88541412]
[97.20703125 74.99008942]
[116.14073944 77.99359131]
[128.86546326 94.33101654]
[143.23530579 90.02896881]
[157.60514832 85.72692108]
[171.97499084 81.42487335]
[186.34483337 77.12281799]
[200.71467590 72.82077026]
[215.08451843 68.51872253]
[221.92376709 57.51264191]
[234.05062866 54.25842285]
[244.77137756 59.98398972]
[259.23742676 56.01747894]
[271.81716919 42.62835693]
[288.60049438 47.61992264]
[302.97033691 43.31787491]
[317.34017944 39.01582718]
[331.71002197 34.71377563]
[340.55902100 21.33190346]
[356.55081177 20.05045319]
[367.41784668 31.85244560]
[364.82388306 47.68440247]
[350.75875854 55.40140152]
[336.01205444 49.08361816]
[321.64221191 53.38566971]
[307.27236938 57.68771744]
[292.90252686 61.98976517]
[286.84490967 72.52645111]
[274.83627319 76.19297791]
[263.20394897 70.48353577]
[248.73788452 74.45005035]
[237.14996338 87.57693481]
[219.38656616 82.88856506]
[205.01672363 87.19061279]
[190.64688110 91.49266052]
[176.27703857 95.79471588]
[161.90719604 100.09676361]
[147.53735352 104.39881134]
[133.16751099 108.70085907]
[126.28001404 122.02611542]
[131.08094788 136.23706055]
[135.88186646 150.44801331]
[140.68280029 164.65896606]
[145.48373413 178.86990356]
[157.23092651 189.46772766]
[153.97415161 204.00192261]
[169.13861084 204.63725281]
[183.04797363 210.71130371]
[193.82112122 221.40260315]
[200.00105286 235.26524353]
[200.75201416 250.42440796]
[195.97241211 264.82995605]
[186.30867004 276.53366089]
[173.06773376 283.95266724]
[158.04029846 286.08364868]
[143.25874329 282.63836670]
[130.72212219 274.08282471]
[122.12593079 261.57403564]
[118.63271332 246.80372620]
[120.71491241 231.76947021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 120]
[3 118]
[4 117]
[5 116]
[6 115]
[7 114]
[10 74]
[11 73]
[12 72]
[16 68]
[17 67]
[18 66]
[19 64]
[20 63]
[21 62]
[22 61]
[23 60]
[24 59]
[25 58]
[27 57]
[28 56]
[29 55]
[30 53]
[31 52]
[32 51]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
[77 113]
[78 112]
[79 111]
[80 110]
[81 109]
[82 108]
[83 107]
[86 105]
[87 104]
[89 101]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
