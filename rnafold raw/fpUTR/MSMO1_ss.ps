%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGCUCCACCCCCAAGCCAGGCGAGGCAGGUUCCGAGGUUGGAACACCUGGCGAGUCCUCGGUGUCGGUGGCCGGCAGUCAUCUCGCGGCCGUUCAGAAUUAUAAGGCUGUCUGCAGAGAUUUGAAAA\
) } def
/len { sequence length } bind def

/coor [
[223.28123474 165.70922852]
[235.84567261 157.51538086]
[221.62493896 152.74349976]
[207.40422058 147.97161865]
[193.18348694 143.19972229]
[178.96276855 138.42784119]
[174.28318787 139.76431274]
[168.71684265 138.10371399]
[164.18423462 133.07118225]
[150.20863342 127.62297058]
[136.23304749 122.17475891]
[122.25746918 116.72655487]
[112.99631500 124.62251282]
[101.25191498 127.81375885]
[89.26829529 125.69052124]
[79.33522797 118.65850067]
[73.35066223 108.06133270]
[72.45807648 95.92385101]
[58.75977707 89.81185150]
[45.06147766 83.69985199]
[31.29087639 77.75254059]
[17.44995308 71.97077179]
[3.60902929 66.18900299]
[-10.30022526 60.57360840]
[-24.63007545 66.68041992]
[-38.72569656 60.95606995]
[-44.45929718 47.25711441]
[-60.12729263 49.45358658]
[-69.17507172 37.62197495]
[-83.15065765 32.17376709]
[-97.12624359 26.72555733]
[-111.10182953 21.27734756]
[-125.07741547 15.82913685]
[-139.17962646 10.71761894]
[-153.40036011 5.94573212]
[-167.62107849 1.17384505]
[-181.84181213 -3.59804177]
[-197.79840088 0.18604779]
[-208.85548401 -11.92480469]
[-203.63850403 -27.47199249]
[-187.51422119 -30.46190071]
[-177.06991577 -17.81876945]
[-162.84919739 -13.04688263]
[-148.62846375 -8.27499580]
[-134.40774536 -3.50310898]
[-129.72816467 -4.83958578]
[-124.16181946 -3.17898512]
[-119.62920380 1.85355067]
[-105.65361786 7.30176067]
[-91.67803192 12.74997044]
[-77.70244598 18.19818115]
[-63.72686005 23.64639091]
[-49.05849075 21.06022644]
[-39.01108551 33.28152847]
[-25.51860046 27.07762527]
[-11.26775742 32.40379715]
[-4.85201550 46.59802246]
[2.59653926 46.09136581]
[9.39079762 52.34807587]
[23.23172188 58.12984467]
[37.07264328 63.91161346]
[44.53120422 63.58371735]
[51.17348099 70.00154877]
[64.87178040 76.11354828]
[78.57008362 82.22555542]
[93.34574890 72.96495819]
[110.73170471 74.30947876]
[123.90789795 85.73168182]
[127.70568085 102.75096130]
[141.68125916 108.19917297]
[155.65684509 113.64738464]
[169.63243103 119.09559631]
[183.73464966 124.20711517]
[197.95538330 128.97900391]
[212.17610168 133.75088501]
[226.39683533 138.52276611]
[240.61755371 143.29466248]
[255.14451599 147.03198242]
[269.90252686 149.71539307]
[284.66055298 152.39878845]
[291.15820312 150.48782349]
[296.76925659 151.99043274]
[300.05447388 155.58094788]
[314.66690063 158.96884155]
[329.27929688 162.35673523]
[343.89169312 165.74462891]
[358.50408936 169.13252258]
[373.29321289 171.63879395]
[388.20596313 173.25440979]
[403.11868286 174.87002563]
[418.03143311 176.48564148]
[432.94418335 178.10127258]
[447.85690308 179.71688843]
[455.12213135 166.36454773]
[466.94717407 156.81275940]
[481.52883911 152.51809692]
[496.64346313 154.13548279]
[509.98623657 161.41825867]
[519.52246094 173.25585938]
[523.79791260 187.84313965]
[522.16070557 202.95565796]
[514.86035156 216.28883362]
[503.01022339 225.80947876]
[488.41732788 230.06575012]
[473.30697632 228.40861511]
[459.98342896 221.09075928]
[450.47836304 209.22810364]
[446.24130249 194.62962341]
[431.32855225 193.01400757]
[416.41580200 191.39839172]
[401.50308228 189.78276062]
[386.59033203 188.16714478]
[371.67761230 186.55152893]
[378.39575195 199.96295166]
[372.32272339 213.67858887]
[357.87716675 217.71911621]
[345.56945801 209.14472961]
[344.35449219 194.19401550]
[355.11618042 183.74493408]
[340.50378418 180.35702515]
[325.89138794 176.96913147]
[311.27899170 173.58123779]
[296.66659546 170.19334412]
[281.97714233 167.15681458]
[267.21914673 164.47340393]
[252.46110535 161.79000854]
[259.51126099 175.02990723]
[255.34675598 189.44021606]
[242.32077026 196.87818909]
[227.79379272 193.14093018]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[9 72]
[10 71]
[11 70]
[12 69]
[18 65]
[19 64]
[20 63]
[21 61]
[22 60]
[23 59]
[24 57]
[27 54]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 45]
[35 44]
[36 43]
[37 42]
[78 126]
[79 125]
[80 124]
[83 123]
[84 122]
[85 121]
[86 120]
[87 119]
[88 113]
[89 112]
[90 111]
[91 110]
[92 109]
[93 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
