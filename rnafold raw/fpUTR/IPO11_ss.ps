%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCACCAGGUGUGAAACUGCUGGGUCAUAGAAGAUACAGUCACGAGUUGCUUAAGGCUGGGAUACAUCCUGAGAAAUGGGUCGUUAGGCAAUUUUGUUGUUCUAUGAACAUCAUAUGAACAAACCUAG\
) } def
/len { sequence length } bind def

/coor [
[109.71540070 216.38696289]
[96.93165588 224.80328369]
[81.69980621 226.30310059]
[67.52003479 220.54179382]
[57.65074539 208.84326172]
[54.35982513 193.89573669]
[58.40350723 179.13406372]
[68.85258484 167.95034790]
[83.30593109 162.91453552]
[85.45683289 148.06954956]
[87.60774231 133.22456360]
[89.75864410 118.37957764]
[78.96299744 107.96545410]
[64.20497131 110.64886475]
[49.44694901 113.33227539]
[59.69530869 124.28540802]
[57.76485062 139.16065979]
[45.06014633 147.13504028]
[30.82495308 142.40647888]
[25.41658592 128.41542053]
[32.77001572 115.34161377]
[17.79696655 116.24038696]
[2.82391644 117.13916016]
[-12.14913273 118.03793335]
[-25.46090508 126.58821106]
[-38.62891388 119.62740326]
[-53.60196304 120.52617645]
[-68.57501221 121.42494965]
[-78.87181091 133.41459656]
[-94.63681030 134.52830505]
[-106.51691437 124.10531616]
[-107.46388245 108.32942963]
[-96.91587830 96.56018066]
[-81.13085938 95.78005981]
[-69.47378540 106.45190430]
[-54.50073624 105.55313110]
[-39.52768707 104.65435791]
[-27.28688812 96.16836548]
[-13.04790497 103.06488037]
[1.92514431 102.16610718]
[16.89819336 101.26733398]
[31.87124252 100.36856842]
[46.76353836 98.57424927]
[61.52156448 95.89083862]
[76.27958679 93.20742798]
[87.32185364 83.05517578]
[91.23309326 68.57407379]
[95.14432526 54.09297562]
[99.05555725 39.61187363]
[102.96678925 25.13077545]
[106.87802124 10.64967537]
[110.78926086 -3.83142471]
[114.70049286 -18.31252480]
[118.61172485 -32.79362488]
[122.52295685 -47.27472305]
[126.43418884 -61.75582504]
[130.17150879 -76.28278351]
[133.73437500 -90.85350800]
[137.29722595 -105.42423248]
[140.86009216 -119.99495697]
[143.01100159 -134.83993530]
[143.73017883 -149.82269287]
[144.44934082 -164.80543518]
[145.16851807 -179.78819275]
[137.18235779 -194.11135864]
[145.82463074 -208.04847717]
[162.20492554 -207.26222229]
[169.47257996 -192.56143188]
[160.15126038 -179.06901550]
[159.43209839 -164.08627319]
[158.71292114 -149.10351562]
[157.99374390 -134.12077332]
[168.97607422 -144.33784485]
[183.84298706 -146.33154297]
[197.12915039 -139.36895752]
[203.95036316 -126.00963593]
[201.79899597 -111.16471863]
[191.46595764 -100.29144287]
[176.74983215 -97.38701630]
[163.06053162 -103.51914978]
[155.43081665 -116.43209076]
[151.86795044 -101.86136627]
[148.30509949 -87.29064178]
[144.74223328 -72.71991730]
[146.22409058 -65.40269470]
[140.91529846 -57.84458923]
[137.00405884 -43.36349106]
[133.09281921 -28.88239098]
[129.18159485 -14.40129089]
[125.27035522 0.07980873]
[121.35912323 14.56090832]
[117.44789124 29.04200935]
[113.53665924 43.52310944]
[109.62541962 58.00420761]
[105.71418762 72.48530579]
[101.80295563 86.96640778]
[110.81998444 85.70079803]
[120.79878998 90.89274597]
[127.34841156 102.67720795]
[139.41992188 111.58106232]
[151.49142456 120.48492432]
[163.56294250 129.38877869]
[175.63444519 138.29263306]
[187.70596313 147.19648743]
[199.88336182 155.95497131]
[212.16490173 164.56680298]
[224.44645691 173.17861938]
[236.72799683 181.79045105]
[249.00955200 190.40228271]
[265.44949341 194.54531860]
[266.01937866 211.48968506]
[249.89498901 216.72798157]
[240.39772034 202.68383789]
[228.11616516 194.07200623]
[215.83462524 185.46017456]
[203.55308533 176.84834290]
[191.27153015 168.23651123]
[183.91580200 166.95945740]
[178.80210876 159.26800537]
[166.73059082 150.36415100]
[154.65908813 141.46028137]
[142.58757019 132.55642700]
[130.51606750 123.65257263]
[118.44455719 114.74871826]
[104.60363007 120.53048706]
[102.45272827 135.37547302]
[100.30181885 150.22045898]
[98.15091705 165.06544495]
[110.58060455 173.99636841]
[117.42577362 187.68585205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 128]
[10 127]
[11 126]
[12 125]
[13 45]
[14 44]
[15 43]
[21 42]
[22 41]
[23 40]
[24 39]
[26 37]
[27 36]
[28 35]
[46 96]
[47 95]
[48 94]
[49 93]
[50 92]
[51 91]
[52 90]
[53 89]
[54 88]
[55 87]
[56 86]
[57 84]
[58 83]
[59 82]
[60 81]
[61 72]
[62 71]
[63 70]
[64 69]
[99 124]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
