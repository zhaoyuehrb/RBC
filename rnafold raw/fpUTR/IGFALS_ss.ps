%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUCCAGAGGGCAGGGGUGGCCGGCACAGCAGACGUACCCUCCCUCGCUGCCUGCCUGCAGCCUGCCCUGCAUGCAGG\
) } def
/len { sequence length } bind def

/coor [
[85.45867157 336.37005615]
[80.38841248 350.48715210]
[83.83569336 366.51986694]
[71.49471283 377.31951904]
[56.06081772 371.77633667]
[53.41107559 355.59265137]
[66.27131653 345.41690063]
[71.34156799 331.29977417]
[58.42859650 312.28604126]
[62.65713882 289.45703125]
[81.90638733 276.06317139]
[82.48092651 261.07415771]
[83.05547333 246.08517456]
[83.63001251 231.09617615]
[84.20455170 216.10719299]
[84.77909088 201.11819458]
[85.35363770 186.12919617]
[85.92817688 171.14021301]
[76.32531738 164.44546509]
[71.20120239 153.78538513]
[71.98719788 141.86206055]
[78.59942627 131.76351929]
[89.42969513 126.16388702]
[91.14994812 111.26285553]
[85.77056122 98.35728455]
[93.94902039 87.01689148]
[95.66927338 72.11585999]
[97.38952637 57.21482849]
[99.10977936 42.31379700]
[91.65502167 31.58450508]
[93.55757141 19.06768227]
[103.22646332 11.53575897]
[105.51619720 -3.28844738]
[107.80593872 -18.11265373]
[110.09568024 -32.93685913]
[108.28862000 -42.15888596]
[112.76753235 -48.28061295]
[115.62339783 -63.00624084]
[103.97515106 -73.01692963]
[98.90796661 -87.51586151]
[101.78488159 -102.60291290]
[111.83203888 -114.21971893]
[126.34678650 -119.24143982]
[141.42474365 -116.31723785]
[153.00999451 -106.23372650]
[157.98619080 -91.70330811]
[155.01475525 -76.63459778]
[144.89497375 -65.08099365]
[130.34902954 -60.15037155]
[127.49315643 -45.42474747]
[124.91988373 -30.64712143]
[122.63014221 -15.82291412]
[120.34040833 -0.99870813]
[118.05066681 13.82549858]
[125.33814240 29.66830063]
[114.01081085 44.03404999]
[112.29055786 58.93508148]
[110.57030487 73.83611298]
[108.85005188 88.73714447]
[114.22943878 101.64271545]
[106.05097961 112.98310852]
[104.33072662 127.88414001]
[116.65155792 142.00434875]
[115.03263855 160.36065674]
[100.91716766 171.71475220]
[100.34262848 186.70373535]
[99.76808929 201.69273376]
[99.19354248 216.68173218]
[98.61900330 231.67071533]
[98.04446411 246.65971375]
[97.46992493 261.64871216]
[96.89537811 276.63769531]
[104.43697357 280.06732178]
[110.78197479 285.35961914]
[115.48373413 292.12655640]
[118.21537018 299.87686157]
[118.79253387 308.05175781]
[117.18572998 316.06509399]
[113.52164459 323.34548950]
[108.07321167 329.37704468]
[101.23933411 333.73593140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[11 72]
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[17 66]
[18 65]
[23 62]
[24 61]
[26 59]
[27 58]
[28 57]
[29 56]
[32 54]
[33 53]
[34 52]
[35 51]
[37 50]
[38 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
