%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAACAGGUGGGGGCAACAGCGAGAGAGAAGGGGCCAGGGUAUAAAAAGGGCCCACAAGAGACCAGCUCCAGCAUCCCAAGGCCCGACUCCCCGCACCACUCAGGGUCCUGUGGACAGCUCACCUAGCGGCA\
) } def
/len { sequence length } bind def

/coor [
[81.53463745 285.61190796]
[73.31951141 272.78881836]
[71.03665924 257.73196411]
[75.08159637 243.05007935]
[84.75351715 231.28683472]
[98.37670135 224.48030090]
[97.66833496 209.49703979]
[96.95996857 194.51377869]
[96.25160217 179.53051758]
[95.54323578 164.54725647]
[94.83486938 149.56398010]
[94.12650299 134.58071899]
[84.43345642 131.43257141]
[76.05456543 125.63085175]
[69.69718933 117.66532135]
[65.89801788 108.20846558]
[64.97779083 98.05863190]
[67.01419067 88.07269287]
[71.83530426 79.09368134]
[79.03412628 71.87960815]
[72.84688568 58.21512604]
[66.65964508 44.55064774]
[60.20790482 37.94695282]
[60.49188995 30.48958206]
[47.97623825 20.81130409]
[50.12358475 6.07230186]
[44.26080704 -7.73450184]
[38.39802933 -21.54130554]
[25.35945129 -25.13988876]
[16.92114449 -35.46013260]
[16.01154137 -48.56430435]
[22.74021721 -59.61791229]
[17.20517349 -73.55933380]
[11.67013073 -87.50076294]
[6.13508749 -101.44218445]
[0.60004407 -115.38360596]
[-14.09221077 -126.41043854]
[-10.98330212 -143.64041138]
[-16.84608078 -157.44721985]
[-22.70886040 -171.25402832]
[-36.22208786 -170.38764954]
[-49.31591797 -173.74772644]
[-60.70356369 -180.98937988]
[-69.27046204 -191.38700867]
[-74.18336487 -203.90696716]
[-74.97134399 -217.31031799]
[-71.57093048 -230.27542114]
[-64.33093262 -241.52822876]
[-53.97675323 -249.96754456]
[-59.18096924 -264.03579712]
[-64.38519287 -278.10406494]
[-69.58940887 -292.17233276]
[-84.78926086 -293.11279297]
[-98.28949738 -300.16000366]
[-107.75112915 -312.09304810]
[-111.53486633 -326.84442139]
[-108.98515320 -341.85839844]
[-100.54373932 -354.53366089]
[-87.67316437 -362.67416382]
[-72.60331726 -364.86953735]
[-57.94514847 -360.73941040]
[-46.23827362 -350.99935913]
[-39.51097870 -337.33685303]
[-38.92881012 -322.11907959]
[-44.59262848 -307.98257446]
[-55.52114487 -297.37655640]
[-50.31692505 -283.30828857]
[-45.11270523 -269.24002075]
[-39.90848541 -255.17176819]
[-23.34104538 -254.95056152]
[-8.07985497 -248.40562439]
[3.55137801 -236.50317383]
[9.77009201 -221.02746582]
[9.60802174 -204.31332397]
[3.06185150 -188.89390564]
[-8.90205669 -177.11680603]
[-3.03927779 -163.30999756]
[2.82350111 -149.50320435]
[13.96667194 -144.64477539]
[18.93589592 -133.11138916]
[14.54146767 -120.91865540]
[20.07651138 -106.97722626]
[25.61155510 -93.03580475]
[31.14659691 -79.09438324]
[36.68164062 -65.15295410]
[52.36302567 -59.19614792]
[59.05844116 -43.44929504]
[52.20483017 -27.40408325]
[58.06761169 -13.59728050]
[63.93038940 0.20952308]
[76.02669525 8.90024757]
[74.29869080 24.62680435]
[80.32411957 38.36340332]
[86.51136780 52.02788544]
[92.69860840 65.69236755]
[119.90904999 67.32522583]
[139.98419189 89.07895660]
[154.95803833 89.96423340]
[167.85861206 80.42720795]
[183.32052612 84.70608521]
[189.48272705 99.51847076]
[181.61810303 113.50157166]
[165.75971985 115.92875671]
[154.07276917 104.93808746]
[139.09890747 104.05281067]
[134.73405457 118.40370178]
[147.66497803 126.00574493]
[160.59590149 133.60780334]
[173.52682495 141.20983887]
[190.24543762 144.02485657]
[192.16862488 160.86936951]
[176.51478577 167.38041687]
[165.92477417 154.14077759]
[152.99385071 146.53872681]
[140.06292725 138.93667603]
[127.13199615 131.33462524]
[120.99969482 133.24803162]
[114.93173981 134.07202148]
[109.10976410 133.87236023]
[109.81813049 148.85562134]
[110.52649689 163.83888245]
[111.23486328 178.82214355]
[111.94322968 193.80540466]
[112.65159607 208.78868103]
[113.35996246 223.77194214]
[127.56453705 229.26284790]
[138.30310059 240.06114197]
[143.71513367 254.29594421]
[142.86299133 269.50100708]
[135.89427185 283.04193115]
[124.01638031 292.57269287]
[109.28722382 296.44204712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 125]
[7 124]
[8 123]
[9 122]
[10 121]
[11 120]
[12 119]
[20 95]
[21 94]
[22 93]
[24 92]
[26 90]
[27 89]
[28 88]
[32 85]
[33 84]
[34 83]
[35 82]
[36 81]
[38 78]
[39 77]
[40 76]
[49 69]
[50 68]
[51 67]
[52 66]
[97 105]
[98 104]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
