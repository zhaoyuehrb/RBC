%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGAGCGAGGCUGGAGGAGGGCACGUCGGCGCCUCGGCGAGGAUGGGAGUCCCCAGGACCCGGAGCUGAGCAGCCUGGCGCGCGGCGGGCAGGGCGCGCAGGACAGAAGCCUCGCUGUUCCUCCGGGAGCCCAACACCGUUCCCGCGCGGCCACG\
) } def
/len { sequence length } bind def

/coor [
[150.67849731 323.28118896]
[140.79933167 312.13439941]
[145.95668030 297.17736816]
[143.28669739 282.41690063]
[140.61672974 267.65643311]
[137.94676208 252.89598083]
[135.27679443 238.13551331]
[132.60682678 223.37504578]
[129.93685913 208.61459351]
[117.59002686 200.36283875]
[114.67203522 185.43167114]
[123.41093445 172.53712463]
[113.53176880 161.39031982]
[118.68910980 146.43330383]
[116.01914215 131.67283630]
[113.34916687 116.91237640]
[96.73944855 118.91160583]
[85.74644470 108.95895386]
[70.82051849 110.44776154]
[62.53900528 114.43254852]
[55.58346558 111.81475830]
[40.63088226 113.00651550]
[25.67830086 114.19826508]
[10.72571754 115.39001465]
[-5.28131771 127.58396912]
[-22.39955139 118.66068268]
[-37.29293060 120.44595337]
[-52.18631363 122.23123169]
[-67.07969666 124.01650238]
[-76.83703613 136.15866089]
[-91.96647644 137.75701904]
[-103.48203278 128.38006592]
[-118.37541962 130.16532898]
[-133.26879883 131.95060730]
[-146.06250000 142.20991516]
[-161.24391174 136.00857544]
[-163.19570923 119.72598267]
[-149.91004944 110.11228943]
[-135.05407715 117.05722046]
[-120.16069031 115.27194977]
[-105.26731110 113.48667908]
[-96.29418182 101.65373230]
[-81.21560669 99.63105011]
[-68.86496735 109.12312317]
[-53.97158432 107.33784485]
[-39.07820511 105.55257416]
[-24.18482399 103.76730347]
[-18.57488441 95.14712524]
[-8.93268108 90.97747040]
[1.62415946 92.87153625]
[9.53396511 100.43743896]
[24.48654747 99.24568176]
[39.43912888 98.05393219]
[54.39171219 96.86217499]
[69.33171082 95.52183533]
[84.25764465 94.03302765]
[99.20403290 80.82588959]
[119.44497681 90.71982574]
[117.29762268 75.29171753]
[126.50855255 63.18331528]
[141.23013306 61.23121643]
[150.14314270 49.16646957]
[159.05616760 37.10171890]
[167.96917725 25.03697205]
[176.88220215 12.97222328]
[185.79521179 0.90747440]
[194.70822144 -11.15727425]
[195.84443665 -17.76006126]
[199.60635376 -22.11119843]
[204.22323608 -23.51503372]
[213.60885620 -35.21589279]
[222.99449158 -46.91675186]
[232.38011169 -58.61761093]
[241.76573181 -70.31847382]
[251.15135193 -82.01933289]
[260.53695679 -93.72019196]
[259.00466919 -109.22147369]
[268.68972778 -120.95410919]
[283.47726440 -122.31938171]
[292.86288452 -134.02024841]
[302.24850464 -145.72109985]
[310.55102539 -158.21382141]
[317.70404053 -171.39845276]
[324.85705566 -184.58308411]
[332.01007080 -197.76770020]
[339.16308594 -210.95233154]
[338.94305420 -226.77200317]
[351.81317139 -234.26930237]
[347.07977295 -249.34809875]
[354.46902466 -263.31860352]
[369.59701538 -267.89230347]
[383.48861694 -260.35574341]
[387.90213013 -245.18023682]
[380.21911621 -231.36911011]
[364.99780273 -227.11628723]
[365.72946167 -212.23966980]
[352.34771729 -203.79931641]
[345.19470215 -190.61470032]
[338.04168701 -177.43006897]
[330.88867188 -164.24543762]
[323.73565674 -151.06080627]
[337.71780396 -156.49220276]
[352.44433594 -153.64112854]
[363.38909912 -143.38383484]
[367.18823242 -128.87290955]
[362.67401123 -114.56829834]
[351.23391724 -104.86651611]
[336.38409424 -102.74941254]
[322.68856812 -108.86766815]
[314.35671997 -121.34085083]
[313.94937134 -136.33547974]
[304.56375122 -124.63462067]
[295.17813110 -112.93376160]
[297.05395508 -98.20227051]
[287.70230103 -86.20223236]
[272.23782349 -84.33457184]
[262.85220337 -72.63371277]
[253.46658325 -60.93284988]
[244.08096313 -49.23199081]
[234.69534302 -37.53113174]
[225.30972290 -25.83027077]
[215.92410278 -14.12941170]
[206.77297974 -2.24425864]
[197.85995483 9.82048988]
[188.94694519 21.88523865]
[180.03393555 33.94998550]
[171.12091064 46.01473618]
[162.20790100 58.07948303]
[153.29487610 70.14423370]
[155.75491333 84.78949738]
[146.88771057 97.15184021]
[131.50971985 99.63284302]
[128.10963440 114.24240875]
[130.77960205 129.00286865]
[133.44956970 143.76333618]
[143.51971436 155.96591187]
[138.17140198 169.86715698]
[150.87364197 178.88328552]
[153.37110901 193.89053345]
[144.69732666 205.94462585]
[147.36729431 220.70507812]
[150.03726196 235.46554565]
[152.70722961 250.22601318]
[155.37719727 264.98648071]
[158.04716492 279.74694824]
[160.71713257 294.50738525]
[170.78727722 306.70996094]
[165.43896484 320.61123657]
[179.92158508 325.72485352]
[189.89488220 337.40515137]
[192.67610168 352.51013184]
[187.51708984 366.97662354]
[175.80560303 376.91326904]
[160.69198608 379.64712524]
[146.24169922 374.44281006]
[136.34182739 362.70022583]
[133.65536499 347.57809448]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 140]
[12 137]
[14 135]
[15 134]
[16 133]
[18 56]
[19 55]
[21 54]
[22 53]
[23 52]
[24 51]
[26 47]
[27 46]
[28 45]
[29 44]
[32 41]
[33 40]
[34 39]
[58 132]
[61 129]
[62 128]
[63 127]
[64 126]
[65 125]
[66 124]
[67 123]
[70 122]
[71 121]
[72 120]
[73 119]
[74 118]
[75 117]
[76 116]
[79 113]
[80 112]
[81 111]
[82 101]
[83 100]
[84 99]
[85 98]
[86 97]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
