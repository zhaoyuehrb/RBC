%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGUGGCGUGCUGGGCGUGCGCGGCUGCGGUACGGCGUGUUGGUCCCAGCGGUUCAGCUGAGGUAGGGACGUGCUGUAGGCCGGA\
) } def
/len { sequence length } bind def

/coor [
[96.52306366 112.46298218]
[92.52958679 111.65671539]
[83.19069672 124.42761230]
[68.39937592 122.67661285]
[54.75489426 128.90783691]
[41.11041260 135.13906860]
[31.77152634 147.90995789]
[16.98020172 146.15896606]
[3.33572197 152.39018250]
[-10.30875778 158.62141418]
[-23.95323753 164.85264587]
[-37.59771729 171.08386230]
[-51.24219894 177.31509399]
[-58.17332077 191.78364563]
[-73.83849335 195.24511719]
[-86.22074127 185.04415894]
[-85.82146454 169.00608826]
[-72.94694519 159.43391418]
[-57.47342300 163.67060852]
[-43.82894135 157.43939209]
[-30.18446350 151.20816040]
[-16.53998375 144.97692871]
[-2.89550328 138.74571228]
[10.74897671 132.51448059]
[19.11191940 120.18928528]
[34.87918854 121.49458313]
[48.52367020 115.26335907]
[62.16814804 109.03213501]
[70.53108978 96.70693970]
[86.29836273 98.01223755]
[99.33313751 90.58966064]
[111.65444946 82.03482056]
[123.97576141 73.47998047]
[135.98387146 64.49081421]
[147.66349792 55.07878113]
[159.34312439 45.66674805]
[171.02275085 36.25471115]
[182.70237732 26.84267616]
[194.38198853 17.43064117]
[206.06161499 8.01860619]
[217.74124146 -1.39342856]
[229.42086792 -10.80546379]
[241.10047913 -20.21749878]
[239.98654175 -36.98553085]
[248.92692566 -51.02003098]
[264.28720093 -56.97862625]
[280.03500366 -52.73041534]
[291.37124634 -62.55332565]
[302.53036499 -72.57701111]
[313.50878906 -82.79827881]
[324.48718262 -93.01955414]
[335.46560669 -103.24082184]
[335.77917480 -119.04199982]
[347.23171997 -129.93301392]
[363.02871704 -129.45242310]
[373.79803467 -117.88535309]
[373.15045166 -102.09433746]
[361.47018433 -91.44790649]
[345.68688965 -92.26240540]
[334.70846558 -82.04113007]
[323.73004150 -71.81986237]
[312.75161743 -61.59859467]
[309.93853760 -54.57781982]
[301.19415283 -51.21708298]
[289.85791016 -41.39417267]
[292.22613525 -28.12808609]
[287.63870239 -15.34127617]
[277.21133423 -6.46488333]
[263.64181519 -3.93791938]
[250.51252747 -8.53787613]
[238.83290100 0.87415946]
[227.15327454 10.28619480]
[215.47364807 19.69822884]
[203.79402161 29.11026382]
[192.11441040 38.52230072]
[180.43478394 47.93433380]
[168.75515747 57.34637070]
[157.07553101 66.75840759]
[145.39591980 76.17044067]
[144.00035095 80.95672607]
[139.44523621 84.82083893]
[132.53059387 85.80129242]
[120.20928955 94.35613251]
[107.88797760 102.91097260]
[107.40695190 105.64717102]
[105.95111084 108.30900574]
[103.53873444 110.54878235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[4 28]
[5 27]
[6 26]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[31 84]
[32 83]
[33 82]
[34 79]
[35 78]
[36 77]
[37 76]
[38 75]
[39 74]
[40 73]
[41 72]
[42 71]
[43 70]
[47 65]
[48 64]
[49 62]
[50 61]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
