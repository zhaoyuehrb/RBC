%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGAACCCAGAAAAACAACUCAUUCGCUUUCAUUUCCUCACUGACUAUAAAAGAAUAGAGAAGGAAGGGCUUCAGUGACCGGCUGCCUGGCUGACUUACAGCAGUCAGACUCUGACAGGAUC\
) } def
/len { sequence length } bind def

/coor [
[85.06476593 282.45574951]
[71.74960327 275.24566650]
[61.49882507 264.10116577]
[55.42436600 250.23106384]
[54.18514252 235.13989258]
[57.91556931 220.46466064]
[66.21099854 207.79719543]
[78.17160797 198.51159668]
[92.50000000 193.61506653]
[92.50000000 178.61506653]
[92.50000000 163.61506653]
[92.50000000 148.61506653]
[84.51988983 146.69090271]
[76.97087860 143.46647644]
[70.06319427 139.03155518]
[63.98920822 133.50965881]
[58.91807175 127.05457306]
[54.99101257 119.84605408]
[52.31739044 112.08484650]
[50.97166443 103.98709106]
[50.99130630 95.77830505]
[52.37577438 87.68708038]
[55.08651352 79.93875885]
[59.04802704 72.74911499]
[64.14999390 66.31837463]
[70.25034332 60.82561493]
[77.17916870 56.42380905]
[72.32759857 42.23006821]
[67.47602844 28.03632927]
[53.33816147 16.32083893]
[57.25754929 -0.73476624]
[52.04796982 -14.80104828]
[46.83839035 -28.86733055]
[41.62881088 -42.93361282]
[36.41923141 -56.99989319]
[30.50389481 -70.78426361]
[23.89798164 -84.25132751]
[17.29207039 -97.71839905]
[10.68615818 -111.18546295]
[-3.99798441 -116.38293457]
[-10.50547504 -130.13456726]
[-5.45998621 -144.10162354]
[-12.06589890 -157.56867981]
[-28.67745399 -162.87548828]
[-36.21486664 -178.22732544]
[-30.48485184 -193.98393250]
[-37.42980194 -207.27932739]
[-44.37475204 -220.57473755]
[-51.31970215 -233.87013245]
[-66.47232819 -238.36161804]
[-73.93735504 -252.29176331]
[-69.28591919 -267.39605713]
[-55.27762604 -274.71337891]
[-40.22335434 -269.90252686]
[-33.05453491 -255.81764221]
[-38.02429962 -240.81507874]
[-31.07935143 -227.51968384]
[-24.13440132 -214.22428894]
[-17.18945122 -200.92887878]
[-4.41371965 -198.80320740]
[4.91908264 -189.54397583]
[7.21309090 -176.40072632]
[1.40116954 -164.17460632]
[8.00708199 -150.70753479]
[22.14026451 -146.14807129]
[29.03144264 -132.58464050]
[24.15322495 -117.79137421]
[30.75913811 -104.32431030]
[37.36505127 -90.85723877]
[43.97096252 -77.39017487]
[46.70291138 -76.38061523]
[49.17417526 -74.16557312]
[50.89919281 -70.84838104]
[51.44285583 -66.71500397]
[50.48551559 -62.20947266]
[55.69509506 -48.14319229]
[60.90467072 -34.07690811]
[66.11425018 -20.01062775]
[71.32382965 -5.94434500]
[82.23621368 -0.56111491]
[86.65338898 11.20753574]
[81.66976929 23.18475914]
[86.52133942 37.37849808]
[91.37290955 51.57223892]
[114.15483856 52.89039230]
[133.89041138 64.34730530]
[146.33221436 83.47726440]
[148.80255127 106.16319275]
[163.22381592 110.28963470]
[177.64506531 114.41607666]
[192.06631470 118.54251862]
[206.48756409 122.66896057]
[220.90881348 126.79539490]
[235.33006287 130.92184448]
[247.46887207 121.25598145]
[262.97229004 120.60478973]
[275.87890625 129.21865845]
[281.22589111 143.78538513]
[276.95718384 158.70375061]
[264.71423340 168.23736572]
[249.20468140 168.72033691]
[236.39225769 159.96696472]
[231.20362854 145.34309387]
[216.78237915 141.21664429]
[202.36111450 137.09020996]
[187.93986511 132.96376038]
[173.51861572 128.83732605]
[159.09736633 124.71088409]
[144.67611694 120.58444214]
[135.64079285 133.90293884]
[122.79020691 143.59220886]
[107.50000000 148.61506653]
[107.50000000 163.61506653]
[107.50000000 178.61506653]
[107.50000000 193.61506653]
[121.82839203 198.51159668]
[133.78900146 207.79719543]
[142.08442688 220.46466064]
[145.81486511 235.13989258]
[144.57563782 250.23106384]
[138.50117493 264.10116577]
[128.25039673 275.24566650]
[114.93523407 282.45574951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 115]
[10 114]
[11 113]
[12 112]
[27 84]
[28 83]
[29 82]
[31 79]
[32 78]
[33 77]
[34 76]
[35 75]
[36 70]
[37 69]
[38 68]
[39 67]
[42 64]
[43 63]
[46 59]
[47 58]
[48 57]
[49 56]
[88 109]
[89 108]
[90 107]
[91 106]
[92 105]
[93 104]
[94 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
