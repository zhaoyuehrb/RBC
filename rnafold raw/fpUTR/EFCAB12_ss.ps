%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGUAGCCACGGCAACAGGUUGCUUCUGCAGUCUGAGCUGAGCGCCUUUCGCACGACUUGGAGUUACGGUUUAUCUGAUACCCCGGUACCCCUACGCAAGCAAGCCCACAUCGACACACAUUCACACACGCCCUUCAGCACCCCCUCCCAGCACCACGACC\
) } def
/len { sequence length } bind def

/coor [
[77.03479004 198.25663757]
[77.42623901 207.43046570]
[72.28290558 212.78668213]
[67.48399353 226.99832153]
[62.68507767 241.20994568]
[57.88616562 255.42156982]
[61.63991547 271.38531494]
[49.50806808 282.41937256]
[33.97082520 277.17285156]
[31.01157379 261.04290771]
[43.67453766 250.62266541]
[48.47344971 236.41104126]
[53.27235794 222.19940186]
[58.07126999 207.98777771]
[62.73384476 193.73083496]
[56.90223694 189.01464844]
[45.23902512 179.58229065]
[39.40741730 174.86610413]
[26.36940956 182.28300476]
[13.33140373 189.69990540]
[0.29339790 197.11680603]
[-12.74460793 204.53370667]
[-25.78261375 211.95060730]
[-38.82062149 219.36750793]
[-51.85862732 226.78440857]
[-59.67734909 241.19966125]
[-76.07565308 241.36553955]
[-84.18437958 227.11138916]
[-75.66195679 213.10066223]
[-59.27552414 213.74639893]
[-46.23751831 206.32949829]
[-33.19951248 198.91259766]
[-20.16150856 191.49569702]
[-7.12350178 184.07879639]
[5.91450453 176.66189575]
[18.95251083 169.24501038]
[31.99051666 161.82810974]
[54.62802505 161.39122009]
[69.52256012 172.27940369]
[74.04837036 157.97846985]
[78.57418060 143.67752075]
[83.09998322 129.37657166]
[87.62579346 115.07563019]
[80.71372986 101.76309967]
[66.41278076 97.23728943]
[52.11183929 92.71148682]
[37.26832581 98.79832458]
[23.32536888 90.86273956]
[20.97881126 74.99222565]
[32.02873230 63.36128616]
[47.99857712 64.89218140]
[56.63764572 78.41053772]
[70.93859100 82.93634796]
[85.23954010 87.46215820]
[90.93324280 82.58038330]
[80.55277252 71.75237274]
[68.13938141 63.33168793]
[71.84724426 48.79718781]
[86.77746582 47.35206223]
[93.20410919 60.90512085]
[102.32064819 72.81682587]
[108.01435089 67.93505096]
[105.72461700 53.11084366]
[95.97140503 40.65349960]
[101.67521667 26.89429092]
[99.38547516 12.07008457]
[86.91914368 2.73048091]
[84.80819702 -12.33599091]
[93.78890991 -24.16318130]
[91.49916840 -38.98738861]
[89.20942688 -53.81159210]
[76.74309540 -63.15119553]
[74.63214874 -78.21766663]
[83.61285400 -90.04486084]
[81.32312012 -104.86906433]
[79.03337860 -119.69327545]
[70.64006805 -134.42381287]
[82.47142792 -146.56692505]
[97.41522980 -138.55947876]
[93.85758209 -121.98300934]
[96.14732361 -107.15880585]
[98.43706512 -92.33459473]
[110.56774902 -83.76826477]
[113.10104370 -68.76702881]
[104.03363800 -56.10133362]
[106.32337189 -41.27712631]
[108.61311340 -26.45292091]
[120.74379730 -17.88658524]
[123.27709198 -2.88534975]
[114.20968628 9.78034496]
[116.49942780 24.60455132]
[126.08885956 36.00157166]
[120.54882050 50.82110596]
[122.83856201 65.64530945]
[129.96702576 67.97660065]
[141.13319397 57.96078110]
[144.22396851 72.63917542]
[151.35244751 74.97045898]
[161.95904541 64.36386108]
[161.70841980 48.56155777]
[172.76495361 37.26871109]
[188.56903076 37.18516159]
[199.74433899 48.36048126]
[199.66079712 64.16455078]
[188.36795044 75.22109222]
[172.56564331 74.97045898]
[161.95904541 85.57706451]
[176.35229492 81.35396576]
[191.34608459 81.78561401]
[206.00976562 84.94410706]
[219.85166931 90.72353363]
[232.40763855 98.93009949]
[243.25663757 109.28862762]
[252.03489685 121.45178223]
[258.44805908 135.01170349]
[262.28106689 149.51370239]
[263.40542603 164.47149658]
[261.78341675 179.38354492]
[257.46939087 193.74980164]
[250.60806274 207.08854675]
[241.42948914 218.95251465]
[230.24142456 228.94387817]
[217.41903687 236.72760010]
[203.39228821 242.04269409]
[188.63151550 244.71093750]
[173.63166809 244.64285278]
[158.89572144 241.84071350]
[144.91780090 236.39849854]
[132.16661072 228.49867249]
[121.06971741 218.40615845]
[111.99922180 206.45935059]
[105.25926971 193.05886841]
[101.07586670 178.65403748]
[99.58929443 163.72789001]
[100.84938812 148.78089905]
[104.81121063 134.32148743]
[101.92674255 119.60144043]
[97.40093231 133.90238953]
[92.87512207 148.20332336]
[88.34931183 162.50427246]
[83.82350159 176.80522156]
[92.47830200 164.55390930]
[103.85953522 154.78317261]
[117.27995300 148.08297729]
[131.92915344 144.85794067]
[146.92256165 145.30281067]
[161.35478210 149.39070129]
[174.35433960 156.87477112]
[185.13626099 167.30311584]
[193.04946899 180.04598999]
[197.61614990 194.33395386]
[198.56050110 209.30418396]
[195.82554626 224.05274963]
[189.57640076 237.68902588]
[180.19042969 249.38961792]
[168.23442078 258.44796753]
[154.43031311 264.31707764]
[139.61166382 266.64257812]
[124.67331696 265.28399658]
[110.51731110 260.32339478]
[97.99845123 252.06034851]
[87.87269592 240.99377441]
[80.75148010 227.79193115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[3 14]
[4 13]
[5 12]
[6 11]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[39 141]
[40 140]
[41 139]
[42 138]
[43 137]
[44 54]
[45 53]
[46 52]
[62 94]
[63 93]
[65 91]
[66 90]
[69 87]
[70 86]
[71 85]
[74 82]
[75 81]
[76 80]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
