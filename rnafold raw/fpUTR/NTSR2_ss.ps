%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUGCUCACUAACCAGGCAGCUCGCCCAGACUCCGGGCAGUGAGAGGGAGGGAGCGCCGGCCGCGGGAGCGGG\
) } def
/len { sequence length } bind def

/coor [
[164.44760132 232.88478088]
[168.63327026 219.89787292]
[160.33239746 207.40406799]
[152.03152466 194.91024780]
[143.73065186 182.41642761]
[135.42977905 169.92260742]
[127.12889862 157.42878723]
[118.82802582 144.93496704]
[112.31269073 140.99247742]
[110.45397949 131.73957825]
[102.68357086 118.90911865]
[88.63771057 115.35104370]
[81.13174438 102.95722961]
[84.48596191 88.86128998]
[76.71556091 76.03082275]
[62.60385132 77.03432465]
[49.52272034 71.82405853]
[40.05560303 61.49152374]
[36.04493713 48.13354874]
[38.23377991 34.42689514]
[46.12890625 23.09191704]
[38.90259933 9.94731617]
[31.67629623 -3.19728422]
[24.59240341 -9.43342304]
[24.43577957 -17.04711533]
[17.76625061 -30.48279190]
[11.09672356 -43.91846848]
[4.42719603 -57.35414505]
[-10.81345272 -60.85509491]
[-20.19679642 -73.36456299]
[-19.29230690 -88.97596741]
[-8.52705574 -100.31807709]
[7.01593256 -102.03549194]
[19.99773598 -93.31730652]
[24.28874397 -78.27997589]
[17.86287308 -64.02367401]
[24.53240013 -50.58799744]
[31.20192719 -37.15232086]
[37.87145615 -23.71664238]
[44.82089615 -10.42358971]
[52.04719925 2.72101092]
[59.27350616 15.86561108]
[75.29505920 15.76065922]
[89.30579376 23.72213364]
[97.51000977 37.69990921]
[97.63188934 53.99995041]
[89.54602051 68.26042175]
[97.31642914 81.09088135]
[111.36228943 84.64895630]
[118.86825562 97.04277039]
[115.51403809 111.13871002]
[123.28443909 123.96917725]
[131.32183838 136.63409424]
[139.62271118 149.12791443]
[147.92358398 161.62173462]
[156.22447205 174.11555481]
[164.52534485 186.60937500]
[172.82621765 199.10317993]
[181.12709045 211.59700012]
[198.20989990 214.63386536]
[207.74687195 228.72714233]
[204.35005188 245.06076050]
[213.16683960 257.19601440]
[221.98361206 269.33126831]
[230.80038452 281.46652222]
[245.99368286 287.63873291]
[247.97671509 303.91751099]
[234.70953369 313.55670166]
[219.84025574 306.64028931]
[218.66513062 290.28329468]
[209.84835815 278.14804077]
[201.03157043 266.01278687]
[192.21479797 253.87753296]
[179.16181946 253.61811829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 59]
[3 58]
[4 57]
[5 56]
[6 55]
[7 54]
[8 53]
[10 52]
[11 51]
[14 48]
[15 47]
[21 42]
[22 41]
[23 40]
[25 39]
[26 38]
[27 37]
[28 36]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
