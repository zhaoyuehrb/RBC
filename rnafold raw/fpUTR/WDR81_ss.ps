%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCCUCCGCCCCAGCCCCUGUCCCGCGCCCAUCCCAGCCCCGCCGGCCUGGCACCCCGGAAGCCGUCGCCAGCAGGGCCGUGGCUGGGCUCAGCCCCGCGCUGCCCCCGGGCGGCCUGGAGGAG\
) } def
/len { sequence length } bind def

/coor [
[76.23914337 106.29123688]
[65.76146698 117.02522278]
[55.28379822 127.75920868]
[44.80612946 138.49319458]
[44.16439819 151.44165039]
[35.13136292 160.17160034]
[22.97281075 160.35780334]
[12.23882675 170.83546448]
[15.91916943 185.68142700]
[11.70223045 200.27986145]
[0.81672412 210.73796082]
[-13.74452496 214.31930542]
[-28.04696655 210.15928650]
[-38.78095245 220.63696289]
[-42.69311523 236.56263733]
[-58.51457214 240.87696838]
[-69.96956635 229.14175415]
[-65.27417755 213.42916870]
[-49.25862122 209.90296936]
[-38.52463913 199.42530823]
[-42.33784103 185.02651978]
[-38.40569305 170.55606079]
[-27.68759918 159.92643738]
[-12.99153137 156.06347656]
[1.76115596 160.10148621]
[12.49514008 149.62380981]
[16.26838303 132.52964783]
[34.07214355 128.01551819]
[44.54981613 117.28153992]
[55.02748489 106.54755402]
[65.50515747 95.81356812]
[70.48377228 81.66389465]
[69.03606415 66.73391724]
[67.58835602 51.80394363]
[66.14064789 36.87397003]
[64.69293976 21.94399452]
[55.65985107 8.95500278]
[62.13267136 -4.45961046]
[60.68496323 -19.38958549]
[59.05696487 -34.30097580]
[49.71265030 -47.06790161]
[55.85943222 -60.63500595]
[54.05138397 -75.52564240]
[52.24333191 -90.41627502]
[50.43528366 -105.30690765]
[41.09096909 -118.07382965]
[47.23775101 -131.64093018]
[45.42970276 -146.53157043]
[36.08538818 -159.29849243]
[42.23217392 -172.86560059]
[40.42412186 -187.75622559]
[38.61607361 -202.64686584]
[27.21041107 -217.04347229]
[34.59120941 -232.91708374]
[32.42387390 -247.75967407]
[30.25654030 -262.60226440]
[28.08920479 -277.44485474]
[13.99973583 -283.72900391]
[5.56350756 -296.64541626]
[5.47248840 -312.07250977]
[13.75572205 -325.08755493]
[27.77005959 -331.53750610]
[43.04357529 -329.36422729]
[54.70254898 -319.26113892]
[59.02664185 -304.45217896]
[54.63605118 -289.66278076]
[42.93180084 -279.61221313]
[45.09913635 -264.76959229]
[47.26647186 -249.92701721]
[49.43380737 -235.08441162]
[58.98166656 -227.55424500]
[60.85861969 -215.13310242]
[53.50670624 -204.45491028]
[55.31475449 -189.56428528]
[57.12280655 -174.67364502]
[66.33779907 -162.97180176]
[60.32033539 -148.33961487]
[62.12838745 -133.44898987]
[71.34337616 -121.74713898]
[65.32591248 -107.11495972]
[67.13396454 -92.22431946]
[68.94201660 -77.33368683]
[70.75006866 -62.44305801]
[79.96505737 -50.74121094]
[73.94759369 -36.10902786]
[77.91707611 -29.78417778]
[75.61493683 -20.83729362]
[77.06264496 -5.90731955]
[85.99218750 6.01377964]
[79.62290955 20.49628448]
[81.07062531 35.42625809]
[82.51833344 50.35623550]
[83.96604156 65.28620911]
[85.41374969 80.21618652]
[97.16302490 76.44133759]
[108.81681824 78.88908386]
[117.40537262 86.49977875]
[120.95664978 96.95608521]
[118.94125366 107.37337494]
[129.92527771 117.58861542]
[141.03193665 127.67038727]
[152.25959778 137.61723328]
[163.48725891 147.56407166]
[178.94761658 150.92382812]
[183.34333801 165.15501404]
[194.57099915 175.10185242]
[205.79866028 185.04869080]
[217.02632141 194.99554443]
[228.25398254 204.94238281]
[239.48164368 214.88922119]
[255.64884949 217.63752747]
[261.09790039 233.10491943]
[250.22323608 245.37985229]
[234.21182251 241.83494568]
[229.53480530 226.11688232]
[218.30714417 216.17004395]
[207.07948303 206.22320557]
[195.85182190 196.27635193]
[184.62416077 186.32951355]
[173.39649963 176.38267517]
[158.73921204 173.73439026]
[153.54042053 158.79173279]
[142.31275940 148.84489441]
[131.08509827 138.89805603]
[123.91974640 136.79608154]
[119.71004486 128.57264709]
[108.72601318 118.35740662]
[100.10274506 121.38899994]
[90.55615234 120.37002563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[7 26]
[8 25]
[13 20]
[14 19]
[32 94]
[33 93]
[34 92]
[35 91]
[36 90]
[38 88]
[39 87]
[40 85]
[42 83]
[43 82]
[44 81]
[45 80]
[47 78]
[48 77]
[50 75]
[51 74]
[52 73]
[54 70]
[55 69]
[56 68]
[57 67]
[99 127]
[100 126]
[101 124]
[102 123]
[103 122]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
