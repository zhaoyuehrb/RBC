%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGGCGUGCCUACGCCUCCUCUUGCGCUGUCCUGUUAAUGGCGGGCAGUAGCCGCUGAGGGGAUUGCAGAUAACCGCUUCCCGCACGGGGAAAGUCUACCCUGCCUGCCACUUUCUGCUCGCCGUCAGCGCCGGAGCUCGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[-10.37223721 576.13568115]
[-24.64739799 571.52917480]
[-36.19055176 561.95025635]
[-43.35032654 548.76928711]
[-45.10230255 533.87023926]
[-52.13813019 547.11773682]
[-59.17395401 560.36529541]
[-66.20977783 573.61279297]
[-73.24560547 586.86035156]
[-72.12512207 603.22119141]
[-85.88289642 612.14617920]
[-100.36611938 604.45410156]
[-100.67568207 588.05786133]
[-86.49314117 579.82452393]
[-79.45731354 566.57696533]
[-72.42148590 553.32946777]
[-65.38566589 540.08190918]
[-58.34983826 526.83441162]
[-59.65019989 520.85626221]
[-57.47932053 514.34973145]
[-51.75100327 509.34863281]
[-48.28029251 494.75567627]
[-44.80958176 480.16275024]
[-41.33886719 465.56979370]
[-45.92135620 451.39764404]
[-35.20092773 439.76220703]
[-31.73021507 425.16928101]
[-28.25950432 410.57632446]
[-24.78879166 395.98336792]
[-21.31808090 381.39041138]
[-17.84736824 366.79748535]
[-30.39096451 375.02291870]
[-45.38070297 374.46823120]
[-57.28205872 365.33819580]
[-61.70079041 351.00378418]
[-57.00541306 336.75762939]
[-44.92955780 327.85964966]
[-29.93188858 327.59521484]
[-17.54986572 336.06195068]
[-12.35513210 350.13513184]
[-6.46812296 336.33865356]
[-0.58111352 322.54214478]
[5.30589581 308.74566650]
[11.19290447 294.94918823]
[17.07991409 281.15267944]
[22.96692276 267.35620117]
[28.85393333 253.55970764]
[34.74094009 239.76321411]
[40.62795258 225.96673584]
[46.51496124 212.17024231]
[43.44643784 194.92161560]
[58.18742752 183.93960571]
[63.78027344 170.02127075]
[57.71662521 156.46517944]
[63.19029236 142.27033997]
[77.45028687 136.00213623]
[83.04313660 122.08380127]
[73.81047821 112.97589111]
[69.38757324 100.12385559]
[71.21466064 86.02693939]
[79.45591736 73.68791962]
[92.85615540 65.97459412]
[92.21953583 50.98810959]
[91.58291626 36.00162506]
[90.94629669 21.01513863]
[81.96772003 11.69222069]
[81.78318787 -0.84806520]
[89.94422150 -9.83555222]
[89.62583923 -24.83217239]
[76.80515289 -33.57343674]
[71.60269165 -48.19239807]
[76.01891327 -63.06776810]
[88.35567474 -72.47966766]
[103.86925507 -72.80902100]
[116.59436035 -63.92919159]
[121.63792419 -49.25465393]
[117.06060028 -34.42806625]
[104.62245941 -25.15055275]
[104.94084167 -10.15393257]
[114.84169006 4.29957533]
[105.93278503 20.37852097]
[106.56940460 35.36500549]
[107.20602417 50.35149002]
[107.84263611 65.33797455]
[121.44472504 71.66120911]
[133.31263733 62.48774719]
[145.18055725 53.31428146]
[150.10054016 45.53400803]
[157.39913940 44.07525253]
[169.45910645 35.15575790]
[181.51905823 26.23625755]
[180.40499878 10.84917259]
[187.80673218 -2.68662500]
[201.36241150 -10.05190945]
[216.74644470 -8.89644623]
[229.04985046 0.41106161]
[234.34666443 14.90062141]
[230.94667053 29.94866753]
[219.93482971 40.75342178]
[204.82495117 43.86713028]
[190.43855286 38.29621506]
[178.37860107 47.21571350]
[166.31863403 56.13521194]
[154.35403442 65.18220520]
[142.48611450 74.35566711]
[130.61819458 83.52912903]
[131.59681702 107.43224335]
[117.40114594 124.62287903]
[96.96147156 127.67665100]
[91.36862183 141.59498596]
[97.32649994 155.98739624]
[91.45629120 170.02288818]
[77.69860840 175.61412048]
[72.10575867 189.53245544]
[76.44717407 201.72605896]
[71.44996643 213.22912598]
[60.31145096 218.05725098]
[54.42443848 231.85374451]
[48.53742981 245.65022278]
[42.65042114 259.44671631]
[36.76341248 273.24319458]
[30.87640381 287.03970337]
[24.98939514 300.83618164]
[19.10238457 314.63265991]
[13.21537590 328.42916870]
[7.32836676 342.22564697]
[1.44135761 356.02215576]
[-3.25441957 370.26818848]
[-6.72513151 384.86114502]
[-10.19584370 399.45407104]
[-13.66655540 414.04702759]
[-17.13726616 428.63998413]
[-20.60797882 443.23294067]
[-16.27373886 458.44888306]
[-26.74592018 469.04049683]
[-30.21663284 483.63345337]
[-33.68734360 498.22640991]
[-37.15805435 512.81933594]
[-26.00096512 502.79342651]
[-11.91822624 497.62847900]
[3.07546520 498.06347656]
[16.83509445 504.03613281]
[27.39219475 514.69201660]
[33.23645020 528.50665283]
[33.53177643 543.50372314]
[28.23592758 557.53778076]
[18.10652924 568.60101318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[21 138]
[22 137]
[23 136]
[24 135]
[26 133]
[27 132]
[28 131]
[29 130]
[30 129]
[31 128]
[40 127]
[41 126]
[42 125]
[43 124]
[44 123]
[45 122]
[46 121]
[47 120]
[48 119]
[49 118]
[50 117]
[52 114]
[53 113]
[56 110]
[57 109]
[62 84]
[63 83]
[64 82]
[65 81]
[68 79]
[69 78]
[85 106]
[86 105]
[87 104]
[89 103]
[90 102]
[91 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
