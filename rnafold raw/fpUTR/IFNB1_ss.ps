%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUACCCAUGGAGAAAGGACAUUCUAACUGCAACCUUUCGAAGCCUUUGCUCUGGCACAACAGGUAGUAGGCGACACUGUUCGUGUUGUCAAC\
) } def
/len { sequence length } bind def

/coor [
[113.75804138 145.43768311]
[107.50631714 159.07278442]
[101.25458527 172.70787048]
[95.00286102 186.34297180]
[97.07503510 202.61067200]
[83.86083984 212.32237244]
[68.95391083 205.48750305]
[67.68920898 189.13720703]
[81.36775970 180.09124756]
[87.61949158 166.45614624]
[93.87121582 152.82104492]
[100.12294769 139.18595886]
[76.88399506 124.48999786]
[71.87498474 101.53630066]
[57.22018051 98.33680725]
[42.56538010 95.13731384]
[27.91057587 91.93781281]
[13.25577450 88.73831940]
[-1.39902842 85.53882599]
[-9.75000668 98.21264648]
[-22.11763954 107.01071930]
[-36.82930756 110.74317932]
[-51.89537811 108.90525055]
[-65.27828217 101.74548340]
[-75.16810608 90.23219299]
[-80.22731781 75.92244720]
[-79.77171326 60.75152969]
[-73.86289978 46.77117157]
[-63.29999542 35.87210846]
[-49.51155472 29.52835083]
[-34.36234283 28.59783363]
[-19.90117264 33.20640564]
[-8.08379364 42.73079681]
[-0.50841129 55.88290787]
[1.80046606 70.88402557]
[16.45526886 74.08351898]
[31.11007118 77.28301239]
[45.76487350 80.48250580]
[60.41967773 83.68199921]
[75.07447815 86.88150024]
[87.54705811 71.69667053]
[108.57103729 67.43242645]
[129.18611145 78.19600677]
[139.16825867 101.18368530]
[149.14363098 89.98136139]
[159.11900330 78.77903748]
[169.09437561 67.57672119]
[178.88316345 56.21099472]
[188.48268127 44.68497849]
[198.08221436 33.15896225]
[207.68174744 21.63294601]
[210.85801697 12.85136318]
[217.79421997 9.89138222]
[227.76959229 -1.31094038]
[237.74496460 -12.51326275]
[236.58074951 -28.27461243]
[246.96562195 -40.18805695]
[262.73840332 -41.18555832]
[274.54138184 -30.67531776]
[275.37207031 -14.89287472]
[264.73760986 -3.20167232]
[248.94728088 -2.53789401]
[238.97190857 8.66442776]
[228.99655151 19.86675072]
[219.20776367 31.23247337]
[209.60823059 42.75849152]
[200.00869751 54.28450775]
[190.40917969 65.81052399]
[188.51029968 73.10893250]
[180.29669189 77.55208588]
[170.32131958 88.75440979]
[160.34596252 99.95673370]
[150.37059021 111.15904999]
[151.85627747 126.08529663]
[163.84408569 135.10151672]
[175.83190918 144.11773682]
[187.81973267 153.13394165]
[199.80755615 162.15016174]
[215.82991028 161.33555603]
[226.34820557 173.44938660]
[223.29370117 189.19897461]
[209.00955200 196.50257874]
[194.45333862 189.75750732]
[190.79133606 174.13798523]
[178.80351257 165.12176514]
[166.81568909 156.10554504]
[154.82786560 147.08934021]
[142.84005737 138.07312012]
[135.56954956 139.91426086]
[147.51473999 148.98689270]
[147.86932373 163.98269653]
[136.36630249 173.60977173]
[121.66751099 170.61888123]
[114.84119415 157.26219177]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[14 40]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[44 73]
[45 72]
[46 71]
[47 70]
[48 68]
[49 67]
[50 66]
[51 65]
[53 64]
[54 63]
[55 62]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
