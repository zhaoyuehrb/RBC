%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCUCCCGGCCUGCGGGCCGCUUCCCACCACAGACCCCGCCCCGCGCCCUACCCAUCACGCGUCCCCGGUCCGGCUCCGGCGCUCACCUACCCCCGGCAGGCGCCGCCCCCGUGCCGUCCCUCCCGGAAGCGCCGGCGGAGCGUCCUCGC\
) } def
/len { sequence length } bind def

/coor [
[12.38331699 366.38775635]
[4.18116236 377.93658447]
[-6.13050556 387.64086914]
[-18.14660263 395.12222290]
[-31.39563560 400.08944702]
[-45.35821152 402.35003662]
[-59.48738480 401.81750488]
[-73.23010254 398.51470947]
[-86.04882812 392.57293701]
[-94.96498108 404.63537598]
[-103.88112640 416.69781494]
[-112.79727936 428.76022339]
[-121.71343231 440.82266235]
[-123.02285767 457.16946411]
[-137.94844055 463.96350098]
[-151.13600159 454.21569824]
[-149.01933289 437.95370483]
[-133.77586365 431.90652466]
[-124.85971069 419.84408569]
[-115.94355774 407.78164673]
[-107.02741241 395.71920776]
[-98.11125946 383.65679932]
[-108.55664825 371.74108887]
[-116.12032318 357.80932617]
[-120.42726135 342.54611206]
[-121.26255035 326.70217896]
[-118.58210754 311.05749512]
[-112.51499939 296.38287354]
[-103.35722351 283.40203857]
[-91.55728912 272.75585938]
[-77.69422913 264.97070312]
[-62.44919586 260.43246460]
[-46.57199097 259.36752319]
[-30.84419060 261.83117676]
[-16.04067421 267.70507812]
[-7.62726402 255.28675842]
[0.78614616 242.86843872]
[9.07162094 230.36441040]
[17.09861755 217.69288635]
[24.99510002 204.93963623]
[32.89158249 192.18637085]
[40.78806686 179.43312073]
[48.68454742 166.67985535]
[46.22397614 154.79676819]
[52.75031281 144.09265137]
[65.21429443 140.62094116]
[73.37096405 128.03250122]
[81.52762604 115.44406128]
[89.68429565 102.85562134]
[76.95814514 110.79571533]
[62.48441696 114.73415375]
[47.48966980 114.33717346]
[33.24460983 109.63842010]
[20.95641327 101.03607941]
[11.66642189 89.25915527]
[6.16190386 75.30564880]
[4.90932989 60.35803986]
[8.01484776 45.68303299]
[15.21528530 32.52424622]
[25.90045357 21.99679756]
[39.16485214 14.99281883]
[53.88441086 12.10585213]
[68.81174469 13.58054924]
[82.68185425 19.29193878]
[94.31935120 28.75601768]
[102.73801422 41.17076874]
[107.22443390 55.48412323]
[107.39840698 70.48311615]
[103.24357605 84.90023804]
[113.11927795 73.60995483]
[122.99498749 62.31967545]
[132.87069702 51.02939224]
[136.13270569 35.54811859]
[150.33584595 31.06257629]
[160.21154785 19.77229500]
[170.08724976 8.48201466]
[166.79649353 -6.56714010]
[172.92648315 -20.50545120]
[185.93458557 -28.07204437]
[200.72682190 -26.54629517]
[210.60252380 -37.83657455]
[220.47824097 -49.12685776]
[230.35394287 -60.41713715]
[240.22964478 -71.70742035]
[250.10534668 -82.99769592]
[259.98104858 -94.28797913]
[259.11071777 -109.84047699]
[269.28692627 -121.14974213]
[284.11923218 -121.88363647]
[293.99493408 -133.17391968]
[291.41763306 -148.59764099]
[299.40197754 -162.04324341]
[314.17800903 -167.16212463]
[328.76892090 -161.53727722]
[336.28536987 -147.82461548]
[333.17828369 -132.49882507]
[320.91473389 -122.79626465]
[305.28521729 -123.29821014]
[295.40951538 -112.00792694]
[296.65588379 -97.20988464]
[286.80133057 -85.61924744]
[271.27133179 -84.41226959]
[261.39562988 -73.12199402]
[251.51992798 -61.83171082]
[241.64422607 -50.54143143]
[231.76850891 -39.25114822]
[221.89280701 -27.96087074]
[212.01710510 -16.67058945]
[215.49769592 -2.21294451]
[209.72938538 11.68635941]
[196.73075867 19.61661911]
[181.37753296 18.35772133]
[171.50183105 29.64800072]
[161.62611389 40.93828201]
[159.07048035 55.61199951]
[144.16096497 60.90510178]
[134.28526306 72.19538116]
[124.40956116 83.48565674]
[114.53385162 94.77593994]
[117.74285126 109.42866516]
[131.43347168 115.55783844]
[145.12409973 121.68701172]
[160.56556702 117.33489990]
[173.51118469 126.81066895]
[174.03021240 142.84532166]
[161.72447205 153.13845825]
[146.03388977 149.79403687]
[138.99493408 135.37763977]
[125.30429840 129.24845886]
[111.61367798 123.11929321]
[106.09300232 117.52964020]
[102.27273560 111.01229095]
[94.11606598 123.60073090]
[85.95940399 136.18916321]
[77.80273438 148.77760315]
[77.31208801 167.15666199]
[61.43780518 174.57633972]
[53.54132080 187.32960510]
[45.64484024 200.08285522]
[37.74835587 212.83612061]
[29.85187531 225.58937073]
[27.97567177 234.59356689]
[21.66006088 238.52107239]
[19.59938049 247.48484802]
[13.20446014 251.28184509]
[4.79105043 263.70016479]
[-3.62235975 276.11846924]
[6.26106977 286.31637573]
[13.94037628 298.25625610]
[19.11664200 311.46957397]
[21.58912468 325.43829346]
[21.26303864 339.61520386]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[35 147]
[36 146]
[37 145]
[38 143]
[39 141]
[40 140]
[41 139]
[42 138]
[43 137]
[46 135]
[47 134]
[48 133]
[49 132]
[69 119]
[70 118]
[71 117]
[72 116]
[74 114]
[75 113]
[76 112]
[80 108]
[81 107]
[82 106]
[83 105]
[84 104]
[85 103]
[86 102]
[89 99]
[90 98]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
