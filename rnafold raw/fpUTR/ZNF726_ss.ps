%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGGCCUUUGUCUCUAUCUGCGGCCGGAGCUCCAGGUCUCGUCCUCACUACUCUGUGUCUUCUGCUUUUAGGGGCGCAGCCUCUGUGGCCCUGUGACCUGCCCCCUGGAAGCCUAGAA\
) } def
/len { sequence length } bind def

/coor [
[84.57831573 113.82900238]
[70.54256439 119.12028503]
[56.50681305 124.41156769]
[42.47106171 129.70285034]
[28.43531036 134.99412537]
[14.39955807 140.28541565]
[0.36380580 145.57669067]
[-13.67194653 150.86796570]
[-27.70769882 156.15925598]
[-41.74345016 161.45053101]
[-44.32815552 176.52589417]
[-54.04746628 188.20629883]
[-68.21416473 193.41888428]
[-82.98902130 190.85769653]
[-94.42113495 181.30928040]
[-108.45688629 186.60055542]
[-122.49263763 191.89184570]
[-136.52839661 197.18312073]
[-143.10276794 211.30458069]
[-157.41238403 216.47073364]
[-170.83451843 210.11605835]
[-180.80711365 223.13447571]
[-197.03038025 220.73916626]
[-202.81521606 205.39419556]
[-192.21067810 192.88517761]
[-176.12579346 196.08030701]
[-170.23907471 182.44644165]
[-156.08020020 176.88038635]
[-141.81967163 183.14736938]
[-127.78392029 177.85609436]
[-113.74816895 172.56480408]
[-99.71241760 167.27352905]
[-97.42880249 152.55447388]
[-88.02169800 140.87702942]
[-73.93954468 135.44018555]
[-58.92821884 137.79750061]
[-47.03473282 147.41477966]
[-32.99898148 142.12350464]
[-18.96322823 136.83221436]
[-4.92747545 131.54093933]
[9.10827637 126.24965668]
[23.14402962 120.95837402]
[37.17978287 115.66709137]
[51.21553421 110.37581635]
[65.25128937 105.08453369]
[79.28704071 99.79325104]
[80.17108917 89.07894135]
[86.66521454 79.37419128]
[97.87111664 73.60125732]
[92.94298553 59.43392181]
[88.01484680 45.26658249]
[73.68093872 38.60965729]
[68.33103180 23.73840904]
[75.13913727 9.47568321]
[90.06611633 4.28330469]
[104.25606537 11.24181843]
[109.29033661 26.22286224]
[102.18218994 40.33844757]
[107.11032104 54.50578690]
[112.03845978 68.67312622]
[124.48361206 77.04678345]
[139.46372986 76.27459717]
[154.44383240 75.50241852]
[162.30603027 64.47898865]
[174.91061401 60.09682465]
[187.54025269 63.75690842]
[195.60525513 73.89404297]
[210.60028076 73.50782776]
[225.59530640 73.12160492]
[240.59034729 72.73538971]
[255.58537292 72.34916687]
[270.58038330 71.96295166]
[285.57540894 71.57672882]
[300.57043457 71.19051361]
[315.56549072 70.80429077]
[330.56051636 70.41807556]
[345.55554199 70.03185272]
[354.17156982 66.64965057]
[360.94049072 69.83375549]
[375.94049072 69.83375549]
[390.94049072 69.83375549]
[405.94049072 69.83375549]
[397.91055298 57.16410446]
[402.55953979 42.90272522]
[416.51354980 37.39947510]
[429.64578247 44.64821243]
[432.42584229 59.38833618]
[422.83541870 70.92290497]
[437.71124268 72.84887695]
[452.39065552 66.94754028]
[464.01910400 76.25495911]
[478.89495850 78.18093872]
[495.37933350 74.21836090]
[503.75036621 88.96156311]
[491.90066528 101.08678436]
[476.96899414 93.05677795]
[462.09313965 91.13079834]
[448.47775269 97.16989899]
[435.78527832 87.72472382]
[420.90942383 85.79874420]
[405.94049072 84.83375549]
[390.94049072 84.83375549]
[375.94049072 84.83375549]
[360.94049072 84.83375549]
[345.94174194 85.02688599]
[330.94671631 85.41310120]
[315.95169067 85.79932404]
[300.95666504 86.18553925]
[285.96163940 86.57176208]
[270.96661377 86.95797729]
[255.97158813 87.34419250]
[240.97656250 87.73041534]
[225.98153687 88.11663055]
[210.98651123 88.50285339]
[195.99148560 88.88906860]
[185.00315857 101.54969025]
[167.92507935 102.42025757]
[155.21601868 90.48252869]
[140.23590088 91.25470734]
[125.25579071 92.02689362]
[120.27562714 113.86144257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[15 32]
[16 31]
[17 30]
[18 29]
[21 26]
[49 60]
[50 59]
[51 58]
[61 120]
[62 119]
[63 118]
[67 115]
[68 114]
[69 113]
[70 112]
[71 111]
[72 110]
[73 109]
[74 108]
[75 107]
[76 106]
[77 105]
[79 104]
[80 103]
[81 102]
[82 101]
[88 100]
[89 99]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
