%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGAGGCCGGGCAGGCCGGGCAGGGAGUGCGGGUCGGUUCUGCGUGCGCUGCCGGACGAGGCUCCCGCCGCCGAUUGACCCGCGCUCCGCCCGUAGUCGGGCCGUUCUGUUCCAAGAGAUAACCAUUGGGACCUUGGUAGCUA\
) } def
/len { sequence length } bind def

/coor [
[180.21046448 232.44656372]
[195.02095032 230.06964111]
[209.65646362 233.36419678]
[199.63549805 222.20263672]
[189.61454773 211.04109192]
[175.35455322 206.73968506]
[171.89251709 191.30191040]
[161.87156677 180.14035034]
[151.85060120 168.97879028]
[141.82965088 157.81723022]
[127.56965637 153.51582336]
[124.10762024 138.07804871]
[114.08666229 126.91649628]
[104.06570435 115.75493622]
[92.45099640 114.41390228]
[84.73413849 105.63040924]
[84.89963531 93.93971252]
[75.12115479 82.56513214]
[67.09277344 78.05470276]
[65.25785065 70.83899689]
[55.72636414 59.25664902]
[46.19487762 47.67429733]
[36.66339493 36.09194946]
[30.50935364 33.37060547]
[27.20186424 28.63713074]
[26.98398018 23.80007935]
[17.95961952 11.81838799]
[8.93525887 -0.16330247]
[-0.08910225 -12.14499283]
[-9.11346340 -24.12668419]
[-18.13782501 -36.10837555]
[-27.16218567 -48.09006500]
[-36.18654633 -60.07175446]
[-45.21090698 -72.05344391]
[-54.23526764 -84.03513336]
[-63.25962830 -96.01683044]
[-72.28398895 -107.99851990]
[-81.30834961 -119.98020935]
[-90.33271027 -131.96189880]
[-99.35707092 -143.94358826]
[-108.38143158 -155.92527771]
[-121.06585693 -158.51193237]
[-128.33020020 -168.73802185]
[-126.70315552 -180.77041626]
[-135.46762085 -192.94349670]
[-144.23210144 -205.11657715]
[-151.84301758 -210.30047607]
[-153.05085754 -217.64720154]
[-161.55137634 -230.00605774]
[-170.05191040 -242.36489868]
[-187.27799988 -245.20541382]
[-196.95973206 -259.32714844]
[-193.53611755 -275.75939941]
[-202.30059814 -287.93246460]
[-211.06506348 -300.10556030]
[-226.70230103 -302.39736938]
[-236.07180786 -315.12481689]
[-233.61480713 -330.73693848]
[-220.78901672 -339.97134399]
[-205.20373535 -337.34942627]
[-196.10543823 -324.42672729]
[-198.89198303 -308.87002563]
[-190.12750244 -296.69696045]
[-181.36303711 -284.52386475]
[-168.43887329 -284.24227905]
[-157.89280701 -276.43365479]
[-153.73025513 -263.78359985]
[-157.69306946 -250.86541748]
[-149.19253540 -238.50657654]
[-140.69201660 -226.14773560]
[-132.05900574 -213.88105774]
[-123.29454041 -201.70797729]
[-114.53006744 -189.53488159]
[-98.18060303 -183.24377441]
[-96.39974213 -164.94964600]
[-87.37538147 -152.96795654]
[-78.35102081 -140.98626709]
[-69.32666016 -129.00456238]
[-60.30229950 -117.02288055]
[-51.27793884 -105.04119110]
[-42.25357819 -93.05949402]
[-33.22921753 -81.07780457]
[-24.20485497 -69.09611511]
[-15.18049431 -57.11442566]
[-6.15613365 -45.13273621]
[2.86822748 -33.15104294]
[11.89258862 -21.16935349]
[20.91695023 -9.18766308]
[29.94131088 2.79402709]
[38.96567154 14.77571774]
[48.24574280 26.56046486]
[57.77722549 38.14281464]
[67.30870819 49.72516251]
[76.84019470 61.30751038]
[86.49574280 72.78664398]
[96.27422333 84.16123199]
[112.22361755 89.26076508]
[115.22726440 105.73397827]
[125.24822235 116.89553833]
[135.26918030 128.05709839]
[150.24592590 133.15684509]
[152.99121094 147.79627991]
[163.01216125 158.95783997]
[173.03312683 170.11938477]
[183.05407715 181.28094482]
[198.03082275 186.38070679]
[200.77610779 201.02012634]
[210.79705811 212.18168640]
[220.81802368 223.34324646]
[230.75254822 226.75358582]
[234.83610535 235.13439941]
[247.54922485 243.09535217]
[260.26232910 251.05630493]
[272.97546387 259.01724243]
[285.68856812 266.97821045]
[298.40167236 274.93914795]
[311.11480713 282.90011597]
[326.33264160 279.57522583]
[339.11215210 287.82986450]
[342.18814087 302.35824585]
[358.58721924 302.40518188]
[366.51028442 316.76333618]
[357.80676270 330.66229248]
[341.43008423 329.80395508]
[334.22717285 315.07135010]
[319.81387329 318.64791870]
[306.80755615 310.75549316]
[303.15383911 295.61322021]
[290.44073486 287.65228271]
[277.72760010 279.69131470]
[265.01449585 271.73037720]
[252.30139160 263.76940918]
[239.58827209 255.80847168]
[226.87515259 247.84751892]
[232.62762451 261.70065308]
[232.82345581 276.69937134]
[227.43460083 290.69793701]
[217.23202515 301.69372559]
[203.67530823 308.11367798]
[188.70390320 309.03927612]
[174.45960999 304.33819580]
[162.98027039 294.68289185]
[155.90809631 281.45471191]
[154.25486755 266.54611206]
[158.25709534 252.08988953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 109]
[4 108]
[5 107]
[7 105]
[8 104]
[9 103]
[10 102]
[12 100]
[13 99]
[14 98]
[17 96]
[18 95]
[20 94]
[21 93]
[22 92]
[23 91]
[26 90]
[27 89]
[28 88]
[29 87]
[30 86]
[31 85]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[40 76]
[41 75]
[44 73]
[45 72]
[46 71]
[48 70]
[49 69]
[50 68]
[53 64]
[54 63]
[55 62]
[111 134]
[112 133]
[113 132]
[114 131]
[115 130]
[116 129]
[117 128]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
