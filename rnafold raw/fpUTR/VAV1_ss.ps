%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCAGGGCGACAGUUACAGGCAAAGAAGAGGAAGUGGUAGCACUAGCUGUCGCUCCACAGGCGAGCAGGGCAGGCGUGCGGGCGGGUGGGUGGUGGAGGCUGCGAGGGUGCACGGCCGGCCCUGGGCAGGCGGUAGCC\
) } def
/len { sequence length } bind def

/coor [
[147.94708252 175.53053284]
[138.65083313 163.75854492]
[129.35458374 151.98655701]
[120.05833435 140.21455383]
[110.76208496 128.44256592]
[95.51045990 124.29866028]
[87.36384583 114.20144653]
[87.28268433 103.92308807]
[72.43972015 106.08788300]
[57.59675217 108.25267029]
[42.75378418 110.41746521]
[27.91081619 112.58226013]
[13.06784916 114.74704742]
[-1.77511799 116.91184235]
[-16.61808586 119.07662964]
[-31.46105194 121.24142456]
[-46.30401993 123.40621948]
[-32.67363739 129.66821289]
[-21.74780273 139.94567871]
[-14.66467762 153.16798401]
[-12.16211700 167.95774841]
[-14.50081539 182.77430725]
[-21.43714905 196.07420349]
[-32.24855042 206.47196960]
[-45.80878448 212.88446045]
[-60.70526886 214.64367676]
[-75.38621521 211.56636047]
[-88.32228851 203.97308350]
[-98.16593170 192.65483093]
[-103.89171600 178.79066467]
[-104.90317535 163.82479858]
[-101.09495544 149.31626892]
[-92.86375427 136.77644348]
[-81.06703186 127.51159668]
[-66.93122101 122.48642731]
[-81.52260590 119.00912476]
[-96.11398315 115.53182220]
[-110.70536041 112.05451965]
[-126.25828552 117.25439453]
[-138.35696411 106.18397522]
[-134.55529785 90.23155975]
[-118.76413727 85.80763245]
[-107.22805786 97.46314240]
[-92.63668060 100.94044495]
[-78.04530334 104.41774750]
[-63.45392227 107.89505005]
[-48.46881104 108.56324768]
[-33.62584305 106.39846039]
[-18.78287697 104.23366547]
[-3.93990993 102.06887054]
[10.90305710 99.90408325]
[25.74602509 97.73928833]
[40.58899307 95.57450104]
[55.43195724 93.40970612]
[70.27492523 91.24491119]
[85.11789703 89.08012390]
[95.78340912 78.53276825]
[98.11341858 63.71483612]
[100.44343567 48.89690781]
[102.77344513 34.07897568]
[93.74047852 21.38869095]
[96.31452942 6.39439344]
[108.46844482 -2.13894892]
[110.79845428 -16.95687866]
[101.76549530 -29.64716530]
[104.33954620 -44.64146042]
[116.49346161 -53.17480469]
[118.82347107 -67.99273682]
[121.15348053 -82.81066132]
[115.65373230 -97.64519501]
[125.27409363 -109.01612091]
[117.03009796 -122.77896881]
[122.78501129 -137.75430298]
[138.12416077 -142.45431519]
[151.28065491 -133.27357483]
[152.16197205 -117.25474548]
[140.09202576 -106.68610382]
[145.75843811 -92.91145325]
[135.97140503 -80.48065186]
[133.64140320 -65.66271973]
[131.31138611 -50.84479141]
[140.25993347 -38.99324417]
[138.10804749 -23.93256378]
[125.61638641 -14.62686825]
[123.28637695 0.19106181]
[132.23492432 12.04261017]
[130.08303833 27.10329056]
[117.59136963 36.40898514]
[115.26136017 51.22691727]
[112.93135071 66.04484558]
[110.60134125 80.86277771]
[122.05612183 90.54719543]
[136.28009033 85.78498077]
[150.50405884 81.02277374]
[164.72804260 76.26055908]
[178.95201111 71.49835205]
[189.40490723 58.86232758]
[205.52714539 61.86320496]
[210.73355103 77.41394043]
[199.66822815 89.51726532]
[183.71421814 85.72232056]
[169.49024963 90.48453522]
[155.26628113 95.24674225]
[141.04231262 100.00895691]
[126.81833649 104.77116394]
[122.53408051 119.14632416]
[131.83032227 130.91831970]
[141.12657166 142.69030762]
[150.42282104 154.46229553]
[159.71907043 166.23428345]
[176.95832825 172.59921265]
[178.89889526 190.00587463]
[188.45509338 201.56784058]
[198.13951111 213.02261353]
[207.95094299 224.36880493]
[222.83015442 229.74649048]
[225.30241394 244.43449402]
[235.11383057 255.78068542]
[244.92526245 267.12686157]
[259.80447388 272.50454712]
[262.27673340 287.19256592]
[272.08816528 298.53872681]
[281.89956665 309.88491821]
[296.83340454 317.91094971]
[293.25512695 334.48300171]
[276.34014893 335.63214111]
[270.55340576 319.69635010]
[260.74197388 308.35015869]
[250.93054199 297.00396729]
[236.75311279 292.43783569]
[233.57907104 276.93829346]
[223.76765442 265.59210205]
[213.95622253 254.24591064]
[199.77879333 249.67977905]
[196.60475159 234.18023682]
[186.79333496 222.83404541]
[179.98393250 219.80755615]
[176.89314270 211.12403870]
[167.33692932 199.56208801]
[155.27980042 198.08633423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[2 109]
[3 108]
[4 107]
[5 106]
[8 56]
[9 55]
[10 54]
[11 53]
[12 52]
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[35 46]
[36 45]
[37 44]
[38 43]
[57 91]
[58 90]
[59 89]
[60 88]
[63 85]
[64 84]
[67 81]
[68 80]
[69 79]
[71 77]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
[112 139]
[113 138]
[114 136]
[115 135]
[117 133]
[118 132]
[119 131]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
