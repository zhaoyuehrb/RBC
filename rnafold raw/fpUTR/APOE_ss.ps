%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACAGGGGGAGCCCUAUAAUUGGACAAGUCUGGGAUCCUUGAGUCCUACUCAGCCCCAGCGGAGGUGAAGGACGUCCUUCCCCAGGAGCCGGUGAGAAGCGCAGUCGGGGGCACGGGG\
) } def
/len { sequence length } bind def

/coor [
[-37.85804749 131.22761536]
[-52.30408859 135.26641846]
[-66.75012970 139.30520630]
[-81.19617462 143.34400940]
[-95.64221191 147.38281250]
[-103.43079376 160.87265015]
[-118.13866425 164.76277161]
[-130.95117188 157.25442505]
[-145.39721680 161.29322815]
[-159.84324646 165.33201599]
[-174.28929138 169.37081909]
[-188.73533630 173.40962219]
[-199.94256592 184.57691956]
[-214.28311157 180.55221558]
[-228.72914124 184.59101868]
[-243.17518616 188.62982178]
[-244.03291321 203.74745178]
[-249.75517273 217.76652527]
[-259.72125244 229.16636658]
[-272.85009766 236.71037292]
[-287.71759033 239.58026123]
[-302.71102905 237.46470642]
[-316.20401001 230.59320068]
[-326.73297119 219.71109009]
[-333.15576172 205.99882507]
[-334.77569580 190.94377136]
[-331.41705322 176.17900085]
[-323.44415283 163.30609131]
[-311.72186279 153.72140503]
[-297.52166748 148.46459961]
[-282.38397217 148.10591125]
[-267.95077515 152.68423462]
[-255.78764343 161.70294189]
[-247.21398926 174.18377686]
[-232.76794434 170.14497375]
[-218.32189941 166.10617065]
[-208.14794922 155.22776794]
[-192.77413940 158.96357727]
[-178.32809448 154.92477417]
[-163.88204956 150.88598633]
[-149.43600464 146.84718323]
[-134.98997498 142.80838013]
[-127.92918396 129.74389648]
[-113.33638000 125.44218445]
[-99.68101501 132.93676758]
[-85.23497009 128.89796448]
[-70.78893280 124.85916901]
[-56.34288788 120.82037354]
[-41.89684677 116.78157043]
[-39.99145126 109.61415863]
[-35.62155914 103.53698730]
[-29.31875992 99.37313843]
[-21.88007545 97.70777130]
[-14.26728439 98.80634308]
[-7.48257732 102.57366180]
[-2.43663502 108.56000519]
[12.41068649 106.42527771]
[27.25800896 104.29055786]
[42.10533142 102.15583801]
[55.21867752 90.57171631]
[72.26120758 97.39568329]
[87.04810333 94.87622833]
[99.45212555 86.44175720]
[107.23140717 73.61667633]
[115.01069641 60.79159927]
[115.55229950 44.97966385]
[128.76834106 38.11048889]
[136.54762268 25.28540802]
[134.14356995 9.42350292]
[145.15126038 -2.24740839]
[161.12655640 -0.77440059]
[169.81455994 12.71256065]
[164.55058289 27.86743355]
[149.37271118 33.06469727]
[141.59341431 45.88977814]
[141.60824585 60.78437424]
[127.83577728 68.57088470]
[120.05648804 81.39596558]
[112.27720642 94.22104645]
[114.85251617 101.26502991]
[120.00314331 115.35300446]
[122.57846069 122.39699554]
[136.79539490 127.18015289]
[151.01234436 131.96331787]
[165.22927856 136.74647522]
[174.48516846 136.52667236]
[179.75039673 141.84275818]
[193.83837891 146.99337769]
[206.69479370 138.50698853]
[221.90528870 139.20988464]
[233.64642334 148.62315369]
[237.54658508 162.97329712]
[251.63456726 168.12393188]
[267.25247192 165.59570312]
[276.54910278 177.23280334]
[292.60119629 173.87695312]
[303.33032227 186.27928162]
[297.69927979 201.68133545]
[281.50076294 204.23880005]
[271.39846802 191.32077026]
[256.78823853 194.21740723]
[246.48393250 182.21189880]
[232.39596558 177.06127930]
[220.15972900 185.51188660]
[205.11579895 185.13241577]
[193.03877258 175.85885620]
[188.68774414 161.08135986]
[174.59977722 155.93072510]
[160.44612122 150.96340942]
[146.22918701 146.18025208]
[132.01223755 141.39709473]
[117.79530334 136.61393738]
[89.56755066 109.66313171]
[74.78065491 112.18257904]
[66.63642883 122.28594208]
[54.18260574 124.02520752]
[44.24005127 117.00315857]
[29.39273071 119.13787842]
[14.54540920 121.27260590]
[-0.30191234 123.40732574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[5 45]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[14 36]
[15 35]
[16 34]
[56 120]
[57 119]
[58 118]
[59 117]
[61 114]
[62 113]
[63 79]
[64 78]
[65 77]
[67 75]
[68 74]
[82 112]
[83 111]
[84 110]
[85 109]
[87 108]
[88 107]
[92 103]
[93 102]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
