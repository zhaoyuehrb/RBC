%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGUAGCGACGCCGCGGUCCGCCGGAUCUCCAGCGCUCAGUCCGCGCCGCAGGUGGUGCUUGUCUGCAGAGUC\
) } def
/len { sequence length } bind def

/coor [
[103.60850525 327.30023193]
[101.73129272 312.05648804]
[107.74222565 297.92269897]
[120.02439117 288.70077515]
[118.14439392 273.81903076]
[116.26439667 258.93731689]
[114.38439178 244.05560303]
[112.19314575 229.21652222]
[109.69161987 214.42657471]
[107.19008636 199.63664246]
[104.37936401 184.90232849]
[101.26068878 170.23011780]
[98.14201355 155.55790710]
[95.02333832 140.88568115]
[91.90466309 126.21347046]
[88.78598785 111.54125977]
[78.98468018 100.18633270]
[64.92545319 94.95775604]
[50.86622238 89.72917175]
[36.80699158 84.50059509]
[22.74776268 79.27201080]
[5.79444361 79.41806030]
[0.96095902 63.16770935]
[15.23819447 54.02457809]
[27.97634315 65.21278381]
[42.03557205 70.44136047]
[56.09480286 75.66994476]
[70.15402985 80.89852142]
[84.21326447 86.12710571]
[90.93109894 82.79234314]
[84.26177979 69.35655975]
[97.69766235 62.68744659]
[104.36677551 76.12281036]
[111.08461761 72.78804779]
[115.42008972 58.42825699]
[119.75556946 44.06846237]
[124.09104919 29.70867157]
[115.37765503 16.72364616]
[117.10081482 1.18129385]
[128.44689941 -9.57976341]
[144.05863953 -10.47848320]
[156.56463623 -1.09051764]
[160.05995178 14.15142345]
[152.89421082 28.05056190]
[138.45083618 34.04414749]
[134.11535645 48.40394211]
[129.77987671 62.76373291]
[125.44440460 77.12352753]
[127.50135803 87.93611908]
[125.73054504 97.56195068]
[121.11726379 104.82090759]
[114.95845795 109.03505707]
[108.64798737 110.09156036]
[103.45820618 108.42258453]
[106.57688141 123.09479523]
[109.69555664 137.76701355]
[112.81423187 152.43922424]
[115.93290710 167.11143494]
[119.05158234 181.78366089]
[124.03068542 189.80110168]
[121.98002625 197.13510132]
[124.48155975 211.92504883]
[126.98309326 226.71498108]
[131.62208557 234.93391418]
[129.26611328 242.17561340]
[131.14611816 257.05731201]
[133.02610779 271.93905640]
[134.90611267 286.82077026]
[149.09580994 292.69851685]
[158.43283081 304.89343262]
[160.40556335 320.12509155]
[154.48335266 334.29629517]
[142.25924683 343.59506226]
[127.02146149 345.52005005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 68]
[5 67]
[6 66]
[7 65]
[8 63]
[9 62]
[10 61]
[11 59]
[12 58]
[13 57]
[14 56]
[15 55]
[16 54]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[34 48]
[35 47]
[36 46]
[37 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
