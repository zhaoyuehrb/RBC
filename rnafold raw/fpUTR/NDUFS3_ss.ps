%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUUCCGUUUCCGGUCCGUGCCCUUGGGGCUCCGUGUCCUGCUGUCUUUCCGUCCGCUGCCUAGUCUGCAUCUGAGUAAC\
) } def
/len { sequence length } bind def

/coor [
[108.98763275 234.68489075]
[93.99780273 235.23721313]
[79.26264191 232.43096924]
[65.52512360 226.40762329]
[53.47792053 217.47091675]
[43.72847366 206.07142639]
[36.76837158 192.78395081]
[32.94855118 178.27847290]
[32.46162033 163.28637695]
[35.33213043 148.56359863]
[41.41534042 134.85249329]
[50.40452957 122.84439087]
[61.84643936 113.14476776]
[75.16415405 106.24269867]
[89.68880463 102.48581696]
[76.89179230 94.66044617]
[61.08190918 94.06197357]
[54.26032257 80.82130432]
[41.31751251 73.23950958]
[28.23354340 65.90399933]
[9.95266628 66.66586304]
[1.38643658 51.47381210]
[-11.96574974 44.63867188]
[-25.31793594 37.80353165]
[-38.67012024 30.96839523]
[-55.52442932 29.13300705]
[-58.42650604 12.42928600]
[-43.17894745 5.01657343]
[-31.83498192 17.61620903]
[-18.48279572 24.45134735]
[-5.13061047 31.28648567]
[8.22157574 38.12162399]
[19.98839378 34.70366669]
[31.24280930 40.49569321]
[35.56905365 52.82002640]
[48.65302277 60.15553665]
[56.21536636 60.69266891]
[62.08569717 68.02429199]
[76.98024750 68.06304932]
[84.71716309 81.86343384]
[97.51418304 89.68880463]
[112.47122192 90.82323456]
[126.30210114 85.01748657]
[140.13298035 79.21173096]
[149.86282349 66.73612213]
[164.59283447 68.94427490]
[174.32267761 56.46866989]
[189.05268860 58.67681885]
[202.88357544 52.87106323]
[202.43188477 37.70002747]
[207.49481201 23.39159012]
[217.38760376 11.88085651]
[230.77236938 4.72455740]
[245.83891296 2.89052224]
[260.54962158 6.62679052]
[272.91497803 15.42806149]
[281.26266479 28.10403633]
[284.46374512 42.94039536]
[282.08529663 57.93063736]
[274.44897461 71.04746246]
[262.58752441 80.51692200]
[248.10514832 85.05834961]
[232.96040344 84.05755615]
[219.20155334 77.64989471]
[208.68933105 66.70194244]
[194.85844421 72.50769806]
[186.11788940 84.56803894]
[170.39859009 82.77515411]
[161.65802002 94.83549500]
[145.93873596 93.04261017]
[132.10784912 98.84836578]
[118.27697754 104.65411377]
[132.06652832 110.55736542]
[144.19123840 119.38862610]
[154.03977966 130.70262146]
[161.11555481 143.92886353]
[165.06178284 158.40045166]
[165.67950439 173.38774109]
[162.93756104 188.13499451]
[156.97421265 201.89866638]
[148.09013367 213.98474121]
[136.73329163 223.78382874]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 41]
[16 40]
[18 38]
[19 36]
[20 35]
[22 32]
[23 31]
[24 30]
[25 29]
[42 72]
[43 71]
[44 70]
[46 68]
[48 66]
[49 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
