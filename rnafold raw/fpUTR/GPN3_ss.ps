%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGGGCAGGAGCGCUGCGGUCGCUGAGCGUUUGCACGUUUGCACCUCUCUGUGGAAGCAGUGCGUCACAGGAGGGAAAUAUAC\
) } def
/len { sequence length } bind def

/coor [
[166.98136902 127.98376465]
[152.61735535 123.66228485]
[138.25335693 119.34079742]
[123.88934326 115.01931000]
[109.52533722 110.69782257]
[95.87328339 113.71662140]
[86.15317535 103.66619110]
[71.78916931 99.34470367]
[57.42515945 95.02321625]
[43.06114960 90.70172882]
[36.16772461 91.91210938]
[30.63185692 89.63719177]
[27.82757759 85.50475311]
[13.81733608 80.14629364]
[-0.19290528 74.78782654]
[-9.56865311 74.61592865]
[-14.61105061 68.96932220]
[-28.41624260 63.10275650]
[-42.22143555 57.23618317]
[-56.02662659 51.36961365]
[-69.83181763 45.50304031]
[-85.55885315 47.22672272]
[-94.24625397 35.12803268]
[-108.05144501 29.26146317]
[-121.85663605 23.39489174]
[-138.79887390 22.76485825]
[-142.88354492 6.31031942]
[-128.20280457 -2.16978598]
[-115.99006653 9.58969879]
[-102.18487549 15.45627022]
[-88.37968445 21.32284164]
[-73.64009094 19.17954254]
[-63.96525192 31.69784927]
[-50.16005707 37.56441879]
[-36.35486603 43.43099213]
[-22.54967117 49.29756165]
[-8.74447918 55.16413116]
[5.16555786 60.77758789]
[19.17580032 66.13604736]
[33.18604279 71.49451447]
[47.38263702 76.33771515]
[61.74664688 80.65920258]
[76.11065674 84.98069000]
[90.47466278 89.30217743]
[104.12671661 86.28337860]
[113.84682465 96.33380890]
[128.21083069 100.65529633]
[142.57484436 104.97678375]
[156.93884277 109.29827118]
[171.30285645 113.61975861]
[186.29284668 114.16758728]
[200.93399048 110.90613556]
[215.57511902 107.64468384]
[230.21626282 104.38323212]
[244.85740662 101.12178040]
[259.49853516 97.86032867]
[267.18020630 87.30793762]
[279.61462402 84.99221802]
[289.90060425 91.63444519]
[304.65109253 88.90989685]
[319.12850952 80.08716583]
[331.61419678 91.55642700]
[324.04956055 106.72917175]
[307.37564087 103.66037750]
[292.62515259 106.38493347]
[280.05737305 118.48658752]
[262.75997925 112.50146484]
[248.11885071 115.76291656]
[233.47772217 119.02436829]
[218.83657837 122.28582001]
[204.19543457 125.54727173]
[189.55430603 128.80873108]
[202.60572815 136.20199585]
[211.97924805 147.91255188]
[216.33482361 162.26625061]
[215.04980469 177.21112061]
[208.30787659 190.61061096]
[197.07286072 200.54914856]
[182.95092773 205.60592651]
[167.96093750 205.05802917]
[154.24584961 198.98377991]
[143.76638794 188.25154114]
[138.02067566 174.39561462]
[137.83010864 159.39683533]
[143.22195435 145.39939880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[7 44]
[8 43]
[9 42]
[10 41]
[13 40]
[14 39]
[15 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[23 31]
[24 30]
[25 29]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[59 65]
[60 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
