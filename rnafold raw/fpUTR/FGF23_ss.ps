%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCAAAAAGGAGGGAAUCCAGUCUAGGAUCCUCACACCAGCUACUUGCAAGGGAGAAGGAAAAGGCCAGUAAGGCCUGGGCCAGGAGAGUCCCGACAGGAGUGUCAGGUUUCAAUCUCAGCACCAGCCACUCAGAGCAGGGCACG\
) } def
/len { sequence length } bind def

/coor [
[-79.30184937 272.73419189]
[-85.30195618 269.76702881]
[-97.60453796 278.34878540]
[-109.90712738 286.93054199]
[-106.71360779 301.76553345]
[-109.43577576 316.65286255]
[-117.62816620 329.32955933]
[-130.01625061 337.88076782]
[-144.69456482 341.02905273]
[-159.41986084 338.32510376]
[-171.95382690 330.21163940]
[-184.25640869 338.79336548]
[-196.55900574 347.37512207]
[-208.86158752 355.95687866]
[-212.06173706 361.87310791]
[-217.04058838 364.79421997]
[-221.87826538 364.62921143]
[-234.53631592 372.67745972]
[-247.19435120 380.72567749]
[-259.85241699 388.77389526]
[-263.04174805 404.25305176]
[-276.28808594 412.87332153]
[-291.73266602 409.52050781]
[-300.21240234 396.18374634]
[-296.69650269 380.77551270]
[-283.27084351 372.43722534]
[-267.90063477 376.11584473]
[-255.24258423 368.06762695]
[-242.58453369 360.01940918]
[-229.92649841 351.97119141]
[-217.44332886 343.65429688]
[-205.14074707 335.07254028]
[-192.83816528 326.49078369]
[-180.53558350 317.90905762]
[-183.82104492 303.34417725]
[-181.27299500 288.59112549]
[-173.24903870 275.90328979]
[-160.94560242 267.23077393]
[-146.21955872 263.92053223]
[-131.30812073 266.50744629]
[-118.48887634 274.62796021]
[-106.18628693 266.04620361]
[-93.88370514 257.46444702]
[-86.83348846 235.41815186]
[-63.12015915 232.81741333]
[-52.01598740 222.73289490]
[-40.91181946 212.64839172]
[-29.80764961 202.56387329]
[-18.70347977 192.47935486]
[-21.38084984 179.35995483]
[-17.17522621 166.53353882]
[-7.08862543 157.40090942]
[6.30304909 154.43928528]
[19.50733566 158.53103638]
[30.82447433 148.68611145]
[42.14161301 138.84120178]
[43.31030273 126.75668335]
[52.72023773 118.46384430]
[65.65901947 118.84623718]
[77.18395996 109.24541473]
[73.78875732 97.99156189]
[75.99062347 85.67503357]
[83.97730255 75.07816315]
[96.56692505 68.89073944]
[94.96712494 53.97629547]
[93.36731720 39.06185150]
[91.76750946 24.14740753]
[90.16770935 9.23296452]
[78.63111877 -1.91542959]
[80.29771423 -17.87168312]
[93.88902283 -26.39552307]
[108.97895813 -20.94819069]
[113.99181366 -5.70841074]
[105.08215332 7.63315964]
[106.68195343 22.54760361]
[108.28176117 37.46204758]
[109.88156891 52.37649155]
[111.48136902 67.29093170]
[124.22469330 75.20344543]
[138.30171204 70.02296448]
[152.32258606 64.69236755]
[166.28569031 59.21224976]
[172.66899109 45.00341034]
[186.90763855 39.64470291]
[200.41426086 45.81777573]
[214.37736511 40.33766174]
[228.34046936 34.85754395]
[242.18327332 29.08029366]
[255.89947510 23.00854301]
[269.61566162 16.93679237]
[279.10278320 4.27562761]
[293.87268066 6.19892502]
[307.58886719 0.12717474]
[317.07598877 -12.53398991]
[331.84591675 -10.61069298]
[345.56210327 -16.68244362]
[359.27828979 -22.75419235]
[372.99447632 -28.82594299]
[382.21966553 -42.38426590]
[398.55191040 -40.90451050]
[405.19000244 -25.90892410]
[395.30523682 -12.82367802]
[379.06622314 -15.10975361]
[365.35003662 -9.03800392]
[351.63385010 -2.96625376]
[337.91766357 3.10549641]
[329.41162109 15.33236885]
[313.66061401 13.84336376]
[299.94442749 19.91511345]
[291.43838501 32.14198685]
[275.68740845 30.65298271]
[261.97122192 36.72473145]
[248.25503540 42.79648209]
[245.71003723 46.91393280]
[240.51849365 49.43775940]
[233.82058716 48.82065201]
[219.85748291 54.30076599]
[205.89437866 59.78087997]
[200.19207764 73.49289703]
[186.10957336 79.24942017]
[171.76580811 73.17535400]
[157.80270386 78.65547180]
[152.68911743 84.06533813]
[143.48219299 84.09999084]
[129.40516663 89.28047180]
[125.79382324 113.40996552]
[106.96236420 125.92617035]
[86.78478241 120.77034760]
[75.25984955 130.37117004]
[69.34226990 147.77394104]
[51.98653030 150.15834045]
[40.66939163 160.00325012]
[29.35225296 169.84817505]
[31.07254028 186.64080811]
[22.55188942 201.02073669]
[7.30199766 207.44812012]
[-8.61896515 203.58352661]
[-19.72313499 213.66804504]
[-30.82730484 223.75256348]
[-41.93147659 233.83706665]
[-53.03564453 243.92158508]
[-51.56154633 250.82275391]
[-52.32791138 257.78567505]
[-55.22446823 264.10668945]
[-59.92735291 269.15737915]
[-65.93499756 272.44699097]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 43]
[3 42]
[4 41]
[11 34]
[12 33]
[13 32]
[14 31]
[17 30]
[18 29]
[19 28]
[20 27]
[45 141]
[46 140]
[47 139]
[48 138]
[49 137]
[54 133]
[55 132]
[56 131]
[59 129]
[60 128]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
[79 125]
[80 124]
[81 122]
[82 121]
[85 118]
[86 117]
[87 116]
[88 113]
[89 112]
[90 111]
[92 109]
[93 108]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
