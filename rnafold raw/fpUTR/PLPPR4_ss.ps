%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCCAUUGCAGCAACAGCUUGGAGGAGGGAGCUGGACGUCGUCUCUCGCCAGAAAAACGGGGAGCAGGAGCCAGACUAGGGGAGGAAGAGGACUGGCCCGCUCAGGGAAUAGCUGGGUUGCUGCAAAAAGGGGCGGGGAGAAGGCGGGGGCGCUGC\
) } def
/len { sequence length } bind def

/coor [
[11.33731174 392.06130981]
[8.66786957 407.18646240]
[-1.21878755 418.94015503]
[-15.66319847 424.16073608]
[-30.77989006 421.44390869]
[-42.50254822 411.52044678]
[-47.67783356 397.05975342]
[-44.91362762 381.95166016]
[-34.95347977 370.26016235]
[-20.47662354 365.13021851]
[-17.82327080 350.36676025]
[-15.16991615 335.60330200]
[-12.51656151 320.83984375]
[-9.86320782 306.07638550]
[-13.26774693 304.27322388]
[-16.41994286 302.05828857]
[-19.27026176 299.46640015]
[-32.26064301 306.96640015]
[-45.25102234 314.46640015]
[-58.24140549 321.96640015]
[-71.23178864 329.46640015]
[-84.22216797 336.96640015]
[-85.71015167 352.41195679]
[-96.01782990 364.01074219]
[-111.18167114 367.30273438]
[-125.37088776 361.02215576]
[-133.12942505 347.58395386]
[-131.47396851 332.15545654]
[-121.04107666 320.66918945]
[-105.84241486 317.54187012]
[-91.72216797 323.97601318]
[-78.73178864 316.47601318]
[-65.74140167 308.97601318]
[-52.75102234 301.47601318]
[-39.76064301 293.97601318]
[-26.77026176 286.47601318]
[-25.24056053 264.75247192]
[-9.60481739 249.29112244]
[12.55770111 247.98008728]
[20.43935585 235.21766663]
[28.32101059 222.45524597]
[36.20266342 209.69281006]
[36.30701447 194.79856873]
[50.14134216 187.12251282]
[58.02299500 174.36009216]
[65.90464783 161.59765625]
[73.78630066 148.83523560]
[81.66796112 136.07279968]
[89.54961395 123.31037903]
[77.89773560 97.65814972]
[96.05273438 81.51041412]
[98.99725342 66.80226135]
[101.94177246 52.09410477]
[104.88629150 37.38595200]
[91.53673553 30.33830643]
[80.72488403 19.82516479]
[73.32099915 6.70466471]
[69.91766357 -7.95567656]
[70.78237152 -22.96581459]
[75.83650208 -37.10978317]
[84.66242218 -49.24419403]
[96.53792572 -58.39067459]
[110.49539185 -63.81474304]
[125.40056610 -65.08478546]
[128.34509277 -79.79293823]
[131.28961182 -94.50109100]
[134.23413086 -109.20924377]
[132.84750366 -118.29293823]
[137.38485718 -124.17761230]
[140.61938477 -138.82472229]
[139.41250610 -147.93403625]
[144.06523132 -153.72790527]
[147.58853149 -168.30825806]
[151.11181641 -182.88859558]
[154.63510132 -197.46894836]
[158.15840149 -212.04928589]
[153.87902832 -227.28076172]
[164.38932800 -237.83456421]
[167.91261292 -252.41491699]
[156.06869507 -262.04220581]
[149.58259583 -275.85861206]
[149.74211121 -291.12088013]
[156.51559448 -304.79870605]
[168.55813599 -314.17633057]
[183.47871399 -317.39181519]
[198.31481934 -313.80670166]
[210.12072754 -304.13287354]
[216.55236816 -290.29101562]
[216.33274841 -275.02947998]
[209.50546265 -261.37844849]
[197.42607117 -252.04832458]
[182.49296570 -248.89161682]
[178.96966553 -234.31127930]
[183.50103760 -220.12269592]
[172.73873901 -208.52600098]
[169.21545410 -193.94564819]
[165.69215393 -179.36531067]
[162.16886902 -164.78495789]
[158.64558411 -150.20462036]
[155.26649475 -135.59017944]
[152.03196716 -120.94307709]
[148.94229126 -106.26472473]
[145.99775696 -91.55657196]
[143.05323792 -76.84841919]
[140.10871887 -62.14026260]
[153.37626648 -55.23014450]
[164.16996765 -44.85097885]
[171.60919189 -31.83776093]
[175.08358765 -17.24086952]
[174.30329895 -2.24129391]
[169.32299805 11.94491768]
[160.53823853 24.16524887]
[148.65403748 33.42434311]
[134.62826538 38.96508026]
[119.59444427 40.33047104]
[116.64992523 55.03862381]
[113.70540619 69.74678040]
[110.76088715 84.45493317]
[118.81814575 90.41320801]
[123.32642365 100.53543854]
[122.20611572 112.62825775]
[136.10646057 118.26567078]
[150.00680542 123.90308380]
[163.90715027 129.54049683]
[179.60351562 127.55690765]
[188.48985291 139.51023865]
[203.76641846 134.61064148]
[217.04148865 143.61906433]
[218.13157654 159.62504578]
[206.20045471 170.35014343]
[190.40066528 167.56700134]
[182.85244751 153.41058350]
[168.15031433 155.79740906]
[158.26972961 143.44084167]
[144.36938477 137.80343628]
[130.46903992 132.16601562]
[116.56870270 126.52860260]
[102.31204224 131.19203186]
[94.43038177 143.95446777]
[86.54872894 156.71688843]
[78.66707611 169.47930908]
[70.78542328 182.24174500]
[62.90376663 195.00416565]
[62.23566818 210.81126404]
[48.96509171 217.57446289]
[41.08343506 230.33689880]
[33.20178223 243.09931946]
[25.32012749 255.86175537]
[31.81226349 265.86233521]
[34.11954498 277.50216675]
[31.95393181 289.11141968]
[25.66597748 299.04058838]
[16.18889618 305.89480591]
[4.90025091 308.72973633]
[2.24689674 323.49319458]
[-0.40645736 338.25665283]
[-3.05981159 353.02011108]
[-5.71316576 367.78356934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 158]
[11 157]
[12 156]
[13 155]
[14 154]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[39 148]
[40 147]
[41 146]
[42 145]
[44 143]
[45 142]
[46 141]
[47 140]
[48 139]
[49 138]
[51 118]
[52 117]
[53 116]
[54 115]
[64 105]
[65 104]
[66 103]
[67 102]
[69 101]
[70 100]
[72 99]
[73 98]
[74 97]
[75 96]
[76 95]
[78 93]
[79 92]
[121 137]
[122 136]
[123 135]
[124 134]
[126 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
