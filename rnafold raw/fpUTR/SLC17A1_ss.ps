%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGUGUAAAGUUGAGAGAAAAGUCUUCACAGCGGAAGAAGAAAUCACUUUUUUGUCCCGAAUCAGUGGGUGGAGGCAAAACCCUUCAGCAAGAAGAGAAGCAACUUCAGCCGUGU\
) } def
/len { sequence length } bind def

/coor [
[-79.49016571 367.42266846]
[-78.39949036 382.38296509]
[-83.29187012 396.56268311]
[-93.37570190 407.66748047]
[-107.01935577 413.90051270]
[-122.01521301 414.25326538]
[-135.93684387 408.66860962]
[-146.53166199 398.05023193]
[-152.08534241 384.11624146]
[-151.69929504 369.12121582]
[-145.43441772 355.48934937]
[-158.80865479 362.28125000]
[-167.60969543 375.42858887]
[-182.46092224 374.29272461]
[-195.83515930 381.08462524]
[-209.20938110 387.87652588]
[-222.58360291 394.66842651]
[-227.24870300 409.76852417]
[-241.26359558 417.07318115]
[-256.31350708 412.24871826]
[-263.46960449 398.15737915]
[-258.48626709 383.15930176]
[-244.32005310 376.15258789]
[-229.37551880 381.29421997]
[-216.00128174 374.50228882]
[-202.62705994 367.71038818]
[-189.25283813 360.91848755]
[-181.40840149 348.25695801]
[-165.60055542 348.90701294]
[-152.22633362 342.11511230]
[-147.63893127 334.42718506]
[-137.94467163 331.68017578]
[-127.40951538 321.00262451]
[-116.87435150 310.32507324]
[-106.33918762 299.64749146]
[-106.69567108 284.80133057]
[-96.16362000 273.82269287]
[-80.58918762 273.54943848]
[-70.05402374 262.87188721]
[-59.51885986 252.19432068]
[-48.98369598 241.51675415]
[-54.86517334 227.79315186]
[-55.04484177 212.82273865]
[-49.46418381 198.88641357]
[-38.94469452 188.11943054]
[-25.06710434 182.18426514]
[-9.93389511 182.01397705]
[4.14922333 187.66566467]
[14.68438625 176.98809814]
[25.21954918 166.31053162]
[35.75471497 155.63298035]
[46.28987503 144.95541382]
[56.82503891 134.27784729]
[67.36019897 123.60028839]
[77.75106812 112.78224945]
[87.99576569 101.82569122]
[95.32068634 88.73579407]
[99.30014801 74.27329254]
[103.27960205 59.81079102]
[107.25906372 45.34828949]
[99.23206329 31.73422241]
[103.26355743 16.45277786]
[116.96173096 8.57016373]
[132.19970703 12.76299763]
[139.93705750 26.54374504]
[135.58334351 41.73653412]
[121.72156525 49.32775116]
[117.74210358 63.79024887]
[113.76264954 78.25274658]
[109.78318787 92.71524811]
[121.27385712 102.35706329]
[134.82560730 95.92667389]
[148.37736511 89.49628448]
[161.92912292 83.06589508]
[175.48088074 76.63551331]
[189.03263855 70.20512390]
[194.10145569 55.23573303]
[208.30741882 48.30997086]
[223.22238159 53.53676605]
[229.99755859 67.81516266]
[224.61335754 82.67402649]
[210.26414490 89.29786682]
[195.46302795 83.75688171]
[181.91127014 90.18726349]
[168.35951233 96.61765289]
[154.80775452 103.04804230]
[141.25599670 109.47843170]
[127.70424652 115.90882111]
[98.95232391 112.07038879]
[88.70762634 123.02694702]
[85.06712341 131.55050659]
[78.03776550 134.13545227]
[67.50260162 144.81301880]
[56.96743774 155.49057007]
[46.43227386 166.16813660]
[35.89711380 176.84570312]
[25.36194801 187.52326965]
[14.82678604 198.20082092]
[20.66702461 212.20680237]
[20.69992065 227.34092712]
[14.95160294 241.29695129]
[4.32681656 251.96003723]
[-9.53332901 257.72729492]
[-24.50480080 257.74862671]
[-38.30613327 252.05192566]
[-48.84129715 262.72949219]
[-59.37646103 273.40704346]
[-69.91162109 284.08459473]
[-69.97576141 299.66131592]
[-80.81201935 310.33978271]
[-95.66162872 310.18264771]
[-106.19679260 320.86022949]
[-116.73195648 331.53778076]
[-127.26711273 342.21533203]
[-112.37866974 340.38937378]
[-97.97525024 344.57763672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 30]
[12 29]
[14 27]
[15 26]
[16 25]
[17 24]
[32 114]
[33 113]
[34 112]
[35 111]
[38 108]
[39 107]
[40 106]
[41 105]
[48 98]
[49 97]
[50 96]
[51 95]
[52 94]
[53 93]
[54 92]
[55 90]
[56 89]
[57 70]
[58 69]
[59 68]
[60 67]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
