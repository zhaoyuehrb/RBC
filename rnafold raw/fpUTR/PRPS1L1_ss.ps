%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAGAGUCUGUGCUUCACUUCCGUUCCAGCCUCAGCGGCAGCUGGAUCGCUCGACGGAGUGCCUCUGGUAGUUGGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[105.03070831 151.83146667]
[91.91195679 144.55834961]
[89.41873932 129.76699829]
[99.42975616 118.59481812]
[91.94213867 118.16403961]
[81.13431549 128.56552124]
[70.32649231 138.96701050]
[59.51866531 149.36849976]
[55.49395752 165.26611328]
[39.64237976 169.46842957]
[28.27067947 157.65249634]
[33.07708359 141.97351074]
[49.11717606 138.56068420]
[59.92500305 128.15919495]
[70.73282623 117.75770569]
[81.54064941 107.35621643]
[86.61090088 93.23912048]
[84.89064789 78.33808899]
[83.17040253 63.43705368]
[81.45014954 48.53602219]
[77.26401520 40.12248993]
[79.96068573 33.03276062]
[78.81244659 18.07677460]
[77.66420746 3.12078738]
[76.51596832 -11.83519936]
[75.36772919 -26.79118729]
[66.00657654 -35.90490341]
[65.49122620 -48.55500031]
[73.54924774 -57.79002380]
[72.97470093 -72.77901459]
[72.40016174 -87.76801300]
[60.79203033 -104.03552246]
[69.91990662 -120.90572357]
[68.19965363 -135.80676270]
[66.47940063 -150.70779419]
[64.75915527 -165.60882568]
[63.03890228 -180.50985718]
[52.83552933 -193.34820557]
[59.10307693 -208.50241089]
[75.39402008 -210.38311768]
[84.94964600 -197.05561829]
[77.93993378 -182.23010254]
[79.66018677 -167.32907104]
[81.38043213 -152.42803955]
[83.10068512 -137.52700806]
[84.82093811 -122.62597656]
[93.60211945 -116.81420898]
[97.68950653 -106.86830902]
[95.44154358 -96.12514496]
[87.38916016 -88.34255219]
[87.96369934 -73.35355377]
[88.53823853 -58.36456299]
[98.70874023 -44.19902420]
[90.32371521 -27.93942451]
[91.47195435 -12.98343849]
[92.62019348 1.97254860]
[93.76843262 16.92853546]
[94.91667175 31.88452339]
[96.35118103 46.81577301]
[98.07143402 61.71680450]
[99.79167938 76.61783600]
[101.51193237 91.51886749]
[106.84787750 87.90699005]
[114.46082306 87.40056610]
[122.73622131 90.97445679]
[129.72187805 98.83848572]
[133.46495056 110.34349823]
[143.00859070 121.91584015]
[152.55221558 133.48817444]
[162.09585571 145.06051636]
[177.86360168 148.01988220]
[185.25331116 162.25967407]
[178.59623718 176.85635376]
[162.99911499 180.61257935]
[150.42671204 170.64691162]
[150.52352905 154.60415649]
[140.97988892 143.03181458]
[131.43624878 131.45947266]
[121.89260864 119.88713837]
[114.40499115 119.45635986]
[123.06845856 131.70153809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[8 13]
[17 62]
[18 61]
[19 60]
[20 59]
[22 58]
[23 57]
[24 56]
[25 55]
[26 54]
[29 52]
[30 51]
[31 50]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[67 79]
[68 78]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
