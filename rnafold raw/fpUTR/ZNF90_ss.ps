%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGCCAUUUGUCUCUUGCUGCAGCUGGUGCUCCAAAUCUGGUCUUAGCUGCUUCGUGUCUUCUUCUCCAGCCUCUGUGGCCCUGUGACCUGCAGGUAUUGGGAGAUCCACAGCUGAGGGACCCCCGGAAGCCUAGAA\
) } def
/len { sequence length } bind def

/coor [
[112.71881104 382.20779419]
[124.26268005 371.83868408]
[122.58321381 356.93298340]
[110.81428528 347.87606812]
[108.89872742 332.78350830]
[118.47826385 320.50057983]
[116.79879761 305.59490967]
[103.09242249 299.76385498]
[94.08510590 287.77536011]
[92.27594757 272.78894043]
[98.25023651 258.81735229]
[110.49558258 249.65226746]
[108.81610870 234.74659729]
[107.13664246 219.84091187]
[105.45717621 204.93522644]
[103.77770996 190.02954102]
[102.09824371 175.12385559]
[100.41877747 160.21817017]
[98.57217407 145.33227539]
[96.55867767 130.46803284]
[94.54518127 115.60378265]
[83.82024384 105.11685181]
[68.91455841 103.43738556]
[54.00887680 101.75791931]
[39.10319138 100.07844543]
[24.19750977 98.39897919]
[9.29182625 96.71951294]
[-5.61385727 95.04004669]
[-20.51954079 93.36058044]
[-35.09924316 99.50409698]
[-46.88018417 90.39044952]
[-61.78586960 88.71098328]
[-76.69155121 87.03151703]
[-87.06066895 98.57538605]
[-102.24179077 101.78682709]
[-116.39745331 95.43097687]
[-124.08451843 81.95178223]
[-122.34715271 66.53227234]
[-111.85341644 55.10157013]
[-96.63835907 52.05500031]
[-82.55247498 58.56404114]
[-75.01208496 72.12583160]
[-60.10640335 73.80529785]
[-45.20071793 75.48476410]
[-31.68717003 69.22111511]
[-18.84007263 78.45489502]
[-3.93439007 80.13436127]
[10.97129345 81.81382751]
[25.87697601 83.49330139]
[40.78265762 85.17276764]
[55.68834305 86.85223389]
[70.59402466 88.53170013]
[85.49971008 90.21116638]
[89.91868591 88.03950500]
[94.33046722 87.42961884]
[98.25084686 88.19174194]
[101.30313110 90.00012207]
[110.38997650 78.06575775]
[119.47682953 66.13138580]
[115.37307739 57.13556290]
[114.87855530 47.31863403]
[118.02005005 38.06630707]
[124.31413269 30.66876030]
[132.84100342 26.14073563]
[142.37876892 25.08245850]
[151.57843018 27.60037994]
[161.69850159 16.52859497]
[171.81855774 5.45681000]
[181.93861389 -5.61497498]
[192.05867004 -16.68675995]
[187.92132568 -41.68484879]
[209.15420532 -61.11338806]
[213.78945923 -75.37923431]
[218.42471313 -89.64508057]
[212.45178223 -104.53479767]
[220.49397278 -118.41654205]
[236.38200378 -120.64142609]
[247.92793274 -109.50270844]
[246.27471924 -93.54505920]
[232.69056702 -85.00982666]
[228.05531311 -70.74398041]
[223.42005920 -56.47813034]
[235.75007629 -47.93586349]
[247.47755432 -57.28821182]
[259.20501709 -66.64055634]
[270.93249512 -75.99290466]
[282.65997314 -85.34525299]
[285.87783813 -101.06227875]
[300.23703003 -108.21719360]
[314.72244263 -101.32135010]
[318.22207642 -85.66465759]
[308.05133057 -73.25758362]
[292.01232910 -73.61778259]
[280.28485107 -64.26543427]
[268.55737305 -54.91308594]
[256.82989502 -45.56073761]
[245.10243225 -36.20839310]
[244.30358887 -24.49573708]
[239.46255493 -14.29772949]
[231.54846191 -6.89337063]
[221.88813782 -3.07639146]
[211.95150757 -3.07632494]
[203.13044739 -6.56670189]
[193.01039124 4.50508308]
[182.89033508 15.57686806]
[172.77027893 26.64865303]
[162.65022278 37.72043610]
[165.40065002 57.90272141]
[152.31616211 73.88864136]
[131.41119385 75.21823883]
[122.32434845 87.15261078]
[113.23749542 99.08697510]
[109.40942383 113.59027863]
[111.42292786 128.45452881]
[113.43642426 143.31877136]
[117.72107697 151.48156738]
[115.32446289 158.53871155]
[117.00392914 173.44439697]
[118.68339539 188.35006714]
[120.36286163 203.25575256]
[122.04232788 218.16143799]
[123.72179413 233.06712341]
[125.40126038 247.97280884]
[139.37901306 254.18325806]
[148.31248474 266.47512817]
[149.88346863 281.48840332]
[143.76968384 295.18063354]
[131.70448303 303.91543579]
[133.38395691 318.82110596]
[145.45651245 328.66442871]
[146.94740295 343.80484009]
[137.48889160 355.25354004]
[139.16836548 370.15921021]
[152.73014832 377.69961548]
[159.23919678 391.78549194]
[156.19262695 407.00054932]
[144.76191711 417.49429321]
[129.34240723 419.23162842]
[115.86322021 411.54458618]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 133]
[3 132]
[6 129]
[7 128]
[12 123]
[13 122]
[14 121]
[15 120]
[16 119]
[17 118]
[18 117]
[19 115]
[20 114]
[21 113]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[31 44]
[32 43]
[33 42]
[57 112]
[58 111]
[59 110]
[66 107]
[67 106]
[68 105]
[69 104]
[70 103]
[72 82]
[73 81]
[74 80]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
