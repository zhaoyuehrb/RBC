%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGCGGGAGGCGGAGGCGCCGCGUAGGCCCGGGAGGCCGGGCCGGCCGGGCUGCGAGCGCCUGCCCCAUGCGCCGCCGCCUCUCCGCACG\
) } def
/len { sequence length } bind def

/coor [
[108.63271332 313.18878174]
[107.13127136 298.26412964]
[105.62983704 283.33944702]
[104.12840271 268.41479492]
[102.62696838 253.49012756]
[101.12553406 238.56546021]
[97.24544525 232.09539795]
[99.83186340 223.11824036]
[98.82997131 208.15173340]
[97.82807922 193.18522644]
[89.25797272 181.00317383]
[96.05624390 166.71702576]
[95.05435181 151.75051880]
[94.05246735 136.78402710]
[93.05057526 121.81752014]
[92.04868317 106.85101318]
[88.57138062 92.25963593]
[82.71554565 78.44989014]
[76.85970306 64.64013672]
[71.00386810 50.83039093]
[65.14802551 37.02064133]
[59.29218674 23.21089363]
[53.20640564 9.50092411]
[46.89238739 -4.10543966]
[40.57836533 -17.71180344]
[35.95484924 -20.93111038]
[33.42527771 -25.22249413]
[33.03648376 -29.54636002]
[34.39043045 -33.01112366]
[29.47005653 -47.18115997]
[24.54968262 -61.35119629]
[19.62931061 -75.52123260]
[14.70893669 -89.69126892]
[9.78856468 -103.86130524]
[4.86819124 -118.03134155]
[-9.07549763 -124.97477722]
[-13.86359787 -139.41529846]
[-7.15816402 -152.66567993]
[-12.07853699 -166.83572388]
[-16.99890900 -181.00575256]
[-27.90633011 -193.98515320]
[-18.45365334 -208.05935669]
[-2.31271243 -202.87222290]
[-2.82887363 -185.92613220]
[2.09149933 -171.75608826]
[7.01187229 -157.58605957]
[20.48621750 -151.34284973]
[25.67803383 -137.04251099]
[19.03822708 -122.95171356]
[23.95860100 -108.78167725]
[28.87897301 -94.61164093]
[33.79934692 -80.44160461]
[38.71971893 -66.27156830]
[43.64009094 -52.10153198]
[48.56046677 -37.93149567]
[54.18472672 -24.02582550]
[60.49874878 -10.41946125]
[66.81277466 3.18690276]
[72.60050964 8.02620602]
[73.10193634 17.35505486]
[78.95777130 31.16480446]
[84.81361389 44.97455215]
[90.66945648 58.78430176]
[96.52529144 72.59404755]
[102.38113403 86.40379333]
[115.02451324 94.47502899]
[130.01614380 93.97380829]
[141.98092651 83.28627014]
[157.77189636 86.11907959]
[165.27557373 100.29914856]
[158.73577881 114.94873810]
[143.16928101 118.82994843]
[130.51736450 108.96543121]
[115.52574158 109.46665192]
[111.10661316 107.95053101]
[107.01519012 105.84912872]
[108.01707458 120.81562805]
[109.01896667 135.78213501]
[110.02085876 150.74864197]
[111.02274323 165.71513367]
[119.66452026 178.96769714]
[112.79458618 192.18334961]
[113.79647064 207.14984131]
[114.79836273 222.11634827]
[116.05020142 237.06402588]
[117.55163574 251.98869324]
[119.05307007 266.91336060]
[120.55450439 281.83801270]
[122.05593872 296.76269531]
[123.55738068 311.68734741]
[133.57128906 324.67404175]
[127.08206177 339.73464966]
[110.76527405 341.37612915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[8 84]
[9 83]
[10 82]
[12 80]
[13 79]
[14 78]
[15 77]
[16 76]
[17 65]
[18 64]
[19 63]
[20 62]
[21 61]
[22 60]
[23 58]
[24 57]
[25 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[38 46]
[39 45]
[40 44]
[66 74]
[67 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
