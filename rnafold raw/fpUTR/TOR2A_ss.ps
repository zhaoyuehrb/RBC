%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGCGGUGCACGCCGGGAGUUGCAGUUCCCGGGCGAGGCAGUUGACUGCCCCACAACGAGCUCGGGCCUCACCCGG\
) } def
/len { sequence length } bind def

/coor [
[135.98646545 140.59849548]
[121.28359985 138.21629333]
[115.81484222 123.37030792]
[104.40875244 113.62858582]
[90.69734192 110.89201355]
[85.84952545 97.77750397]
[74.44343567 88.03578186]
[63.03734589 78.29406738]
[51.63125610 68.55234528]
[40.22516632 58.81062317]
[27.91914558 50.23380280]
[14.83170605 42.90448380]
[-3.44116902 43.68125534]
[-12.02647877 28.50779343]
[-25.39157677 21.69793510]
[-38.75667572 14.88807869]
[-52.12177277 8.07822132]
[-65.61799622 1.53208232]
[-79.24014282 -4.74781370]
[-92.86228943 -11.02770996]
[-106.48443604 -17.30760574]
[-120.10659027 -23.58750153]
[-134.84542847 -17.88291359]
[-149.26713562 -24.34741974]
[-154.81556702 -39.14574432]
[-148.19895935 -53.49829865]
[-133.34278870 -58.88997269]
[-119.06099701 -52.12197876]
[-113.82669067 -37.20964813]
[-100.20454407 -30.92975426]
[-86.58239746 -24.64985657]
[-72.96025085 -18.36996078]
[-59.33810043 -12.09006500]
[-51.74505234 -12.15194035]
[-45.31191635 -5.28687716]
[-31.94681740 1.52298057]
[-18.58172035 8.33283806]
[-5.21662188 15.14269543]
[6.55373955 11.70242691]
[17.82358551 17.48597908]
[22.16102409 29.81704521]
[35.24846649 37.14636230]
[37.68333817 36.25122833]
[40.62657928 36.26920700]
[43.73584747 37.39517593]
[46.60623932 39.69902802]
[48.81439972 43.10808945]
[49.96688843 47.40453339]
[61.37297821 57.14625549]
[72.77906799 66.88797760]
[84.18515778 76.62969208]
[95.59124756 86.37141418]
[109.30265808 89.10798645]
[114.15047455 102.22249603]
[125.55656433 111.96421814]
[141.07527161 115.04322052]
[145.72819519 129.19241333]
[154.00436401 125.37133026]
[163.02410889 124.31664276]
[171.89097595 126.11158752]
[179.73037720 130.55723572]
[185.77592468 137.19433594]
[189.44425964 145.35061646]
[190.39137268 154.20887756]
[188.54472351 162.88887024]
[184.10827637 170.53475952]
[192.92506409 182.67001343]
[201.74183655 194.80528259]
[210.55862427 206.94053650]
[226.11544800 210.86029053]
[232.61894226 225.52603149]
[225.08015442 239.68746948]
[209.28221130 242.48115540]
[197.34394836 231.76400757]
[198.42337036 215.75730896]
[189.60658264 203.62205505]
[180.78981018 191.48680115]
[171.97302246 179.35154724]
[150.25064087 178.82511902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[3 55]
[4 54]
[6 52]
[7 51]
[8 50]
[9 49]
[10 48]
[11 42]
[12 41]
[14 38]
[15 37]
[16 36]
[17 35]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
