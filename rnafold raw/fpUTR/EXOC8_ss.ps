%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGUACUCGUCUCGUUCCCAUUCCUGCUUCCUCAGCCCAGGAGCUCGGUUGGCCUUGGGUGGGUCUAGACAGCCGCGGCGGCUGCGGCGCCGAUAGUGACAGUGAGUGCGUGAGACCCGGAGAGAA\
) } def
/len { sequence length } bind def

/coor [
[77.69790649 219.84124756]
[72.99267578 234.08416748]
[68.28745270 248.32708740]
[63.58222580 262.57000732]
[67.44100952 278.50869751]
[55.38208389 289.62240601]
[39.81063080 284.47830200]
[36.74523163 268.36819458]
[49.33930206 257.86477661]
[54.04452896 243.62187195]
[58.74975586 229.37895203]
[63.45498276 215.13601685]
[67.80924988 200.78192139]
[71.80994415 186.32527161]
[67.74744415 171.99540710]
[78.88515472 160.75875854]
[82.88584137 146.30212402]
[86.88653564 131.84547424]
[90.88722229 117.38883972]
[80.44540405 128.15769958]
[74.57093048 141.95953369]
[64.25169373 152.84591675]
[50.78359222 159.44972229]
[35.85797119 160.94161987]
[21.34920883 157.13429260]
[9.07933807 148.50582886]
[0.58922791 136.13983154]
[-3.05492282 121.58921814]
[-1.39547670 106.68128967]
[5.35917091 93.28820801]
[16.36076164 83.09188843]
[30.22770119 77.37279510]
[45.21855927 76.84914398]
[59.45075989 81.58670044]
[71.13490295 90.98808289]
[85.42017365 95.56313324]
[75.07706451 84.69942474]
[64.73395538 73.83572388]
[54.39084625 62.97201538]
[44.04773712 52.10831070]
[33.70463181 41.24460220]
[23.36152267 30.38089752]
[15.08576965 26.26546097]
[12.90194607 19.12135887]
[2.82856226 8.00709248]
[-7.24482203 -3.10717440]
[-23.13351059 -5.32734060]
[-31.17981911 -19.20669365]
[-25.21130943 -34.09818268]
[-9.80651188 -38.57833099]
[3.21733332 -29.21035385]
[3.86944485 -13.18055916]
[13.94282913 -2.06629181]
[24.01621437 9.04797459]
[34.22522736 20.03778839]
[44.56833649 30.90149498]
[54.91144562 41.76520157]
[65.25455475 52.62890625]
[75.59766388 63.49261475]
[85.94077301 74.35632324]
[96.28387451 85.22002411]
[110.74051666 89.22071838]
[125.19715881 85.22002411]
[139.65379333 81.21933746]
[154.11044312 77.21864319]
[168.56707764 73.21794891]
[183.02372742 69.21726227]
[186.80632019 53.40815735]
[197.78138733 41.56995773]
[213.04548645 36.67230988]
[228.63925171 39.86984634]
[238.15515137 28.27469063]
[247.67105103 16.67953491]
[257.18695068 5.08437777]
[266.70285034 -6.51077890]
[276.21875000 -18.10593605]
[281.59310913 -34.18550873]
[298.53204346 -33.47245407]
[302.53601074 -16.99809456]
[287.81390381 -8.59003639]
[278.29800415 3.00512028]
[268.78210449 14.60027695]
[259.26620483 26.19543457]
[249.75030518 37.79059219]
[240.23440552 49.38574600]
[243.21087646 54.23666763]
[245.25914001 59.54660034]
[246.31140137 65.13976288]
[261.14904785 67.34072113]
[275.98669434 69.54167938]
[290.82434082 71.74263763]
[303.43554688 62.59957123]
[318.45166016 65.04302216]
[327.09045410 77.12220764]
[341.92810059 79.32316589]
[353.50784302 68.81393433]
[369.13555908 68.25836182]
[381.43231201 77.91877747]
[384.59197998 93.23381805]
[377.12265015 106.97219849]
[362.55111694 112.64707184]
[347.75759888 107.57893372]
[339.72714233 94.16081238]
[324.88949585 91.95985413]
[313.11627197 101.01120758]
[298.03744507 98.99049377]
[288.62338257 86.58028412]
[273.78573608 84.37932587]
[258.94808960 82.17836761]
[244.11044312 79.97741699]
[233.46726990 93.74738312]
[217.00914001 99.77320862]
[199.75054932 96.07955170]
[187.02441406 83.67390442]
[172.56777954 87.67459106]
[158.11112976 91.67528534]
[143.65449524 95.67597961]
[129.19784546 99.67666626]
[114.74121094 103.67736053]
[105.34386444 121.38952637]
[101.34317780 135.84617615]
[97.34248352 150.30281067]
[93.34178925 164.75944519]
[97.11813354 180.12336731]
[86.26658630 190.32597351]
[82.26589203 204.78260803]
[83.58634186 211.43569946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[13 126]
[14 125]
[16 123]
[17 122]
[18 121]
[19 120]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[44 54]
[45 53]
[46 52]
[62 119]
[63 118]
[64 117]
[65 116]
[66 115]
[67 114]
[71 85]
[72 84]
[73 83]
[74 82]
[75 81]
[76 80]
[88 110]
[89 109]
[90 108]
[91 107]
[94 104]
[95 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
