%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCUCCGAACCUGAAACCGGGAGCUUCCUGCUCGUGUUCGCUGUUGAGAAGCUACCCGCGGGGUUGUAGACCUCGGACCUC\
) } def
/len { sequence length } bind def

/coor [
[164.22042847 364.69604492]
[159.79910278 350.36245728]
[155.37777710 336.02883911]
[150.95645142 321.69525146]
[146.53512573 307.36166382]
[142.11380005 293.02807617]
[130.96881104 283.14685059]
[134.29469299 267.67916870]
[129.87336731 253.34558105]
[125.45204163 239.01199341]
[114.30706024 229.13076782]
[117.63294220 213.66308594]
[113.21160889 199.32948303]
[108.79028320 184.99589539]
[104.36895752 170.66230774]
[101.67352295 169.25219727]
[99.45180511 166.55636597]
[98.25165558 162.78158569]
[98.52178192 158.35009766]
[100.53227234 153.85269165]
[98.29663849 139.02023315]
[96.06100464 124.18776703]
[93.82537079 109.35530853]
[91.31277466 94.56723785]
[88.52410126 79.82874298]
[85.73542786 65.09024811]
[82.94675446 50.35174942]
[80.15808105 35.61325073]
[77.36940765 20.87475586]
[74.30562592 6.19097996]
[63.69149017 -5.54148197]
[68.40271759 -19.67136574]
[65.06490326 -34.29528427]
[52.23567581 -47.34393692]
[57.76084900 -63.88861847]
[53.87856293 -78.37751007]
[41.90632629 -89.58453369]
[45.88879776 -105.49277496]
[61.72916031 -109.73718262]
[73.13220215 -97.95148468]
[68.36745453 -82.25979614]
[72.24974060 -67.77090454]
[82.67337036 -61.33559036]
[85.92495728 -49.10622787]
[79.68881989 -37.63309860]
[83.02663422 -23.00918007]
[93.40203094 -12.32271862]
[88.92954254 2.85316586]
[93.60215759 8.81864834]
[92.10790253 18.08608055]
[94.89657593 32.82457733]
[97.68524933 47.56307602]
[100.47392273 62.30157089]
[103.26260376 77.04006958]
[106.05127716 91.77856445]
[110.62652588 98.67509460]
[108.65782928 107.11967468]
[110.89346313 121.95213318]
[113.12910461 136.78459167]
[115.36473846 151.61706543]
[118.70254517 166.24098206]
[123.12387848 180.57456970]
[127.54520416 194.90815735]
[131.96653748 209.24176025]
[143.42776489 220.14820862]
[139.78562927 234.59065247]
[144.20695496 248.92425537]
[148.62829590 263.25784302]
[160.08950806 274.16430664]
[156.44738770 288.60675049]
[160.86871338 302.94033813]
[165.29003906 317.27392578]
[169.71138000 331.60751343]
[174.13270569 345.94110107]
[178.55403137 360.27471924]
[193.44151306 364.32025146]
[203.76150513 375.78765869]
[206.22091675 391.01773071]
[200.03498840 405.15057373]
[187.17759705 413.67648315]
[171.75151062 413.87487793]
[158.67912292 405.68240356]
[152.13180542 391.71331787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[8 68]
[9 67]
[10 66]
[12 64]
[13 63]
[14 62]
[15 61]
[20 60]
[21 59]
[22 58]
[23 57]
[24 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 48]
[32 46]
[33 45]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
