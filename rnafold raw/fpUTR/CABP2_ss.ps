%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGGAGCAGCUGGGGGCUGGCAGGAGUCCUCAGGCAGCAGCAUCCGCCGAGGCCCACCCGGGCCACCCCCGGGGUUCCAGGCCUGGC\
) } def
/len { sequence length } bind def

/coor [
[97.22073364 110.57560730]
[92.52275848 109.22935486]
[88.54541016 105.76066589]
[73.73425293 103.38800049]
[58.92309189 101.01534271]
[44.07278824 106.47235870]
[32.72961044 96.81929779]
[17.91844940 94.44664001]
[3.06814432 99.90365601]
[-8.27503395 90.25059509]
[-23.08619499 87.87793732]
[-37.89735413 85.50527191]
[-52.70851517 83.13261414]
[-67.65014648 81.81062317]
[-82.64781189 81.54589844]
[-97.64547729 81.28116608]
[-112.64313507 81.01644135]
[-127.64080048 80.75171661]
[-142.63847351 80.48698425]
[-153.83377075 91.64228058]
[-169.63766479 91.53044128]
[-180.67398071 80.21781921]
[-180.39505005 64.41599274]
[-168.96638489 53.49990463]
[-153.16838074 53.94587708]
[-142.37373352 65.48932648]
[-127.37607574 65.75405121]
[-112.37841034 66.01877594]
[-97.38074493 66.28350830]
[-82.38308716 66.54823303]
[-67.38542175 66.81295776]
[-65.21125031 64.71813202]
[-61.98475647 63.46193695]
[-58.06328964 63.48736191]
[-53.97158432 65.08231354]
[-50.33585358 68.32144928]
[-35.52469254 70.69411469]
[-20.71353340 73.06677246]
[-5.90237236 75.43943787]
[7.88853836 69.81270599]
[20.29110909 79.63547516]
[35.10227203 82.00814056]
[48.89318085 76.38141632]
[61.29575348 86.20418549]
[76.10691071 88.57684326]
[90.91807556 90.94950867]
[105.83404541 92.53498077]
[120.81302643 93.32883453]
[135.79200745 94.12268829]
[144.75321960 91.40776062]
[151.28277588 95.21811676]
[166.22441101 96.54010773]
[181.16603088 97.86209106]
[196.10766602 99.18408203]
[211.04930115 100.50606537]
[225.85220337 85.89832306]
[246.36012268 86.46376801]
[259.95758057 101.44857025]
[274.93655396 100.65471649]
[289.91552734 99.86086273]
[304.89450073 99.06701660]
[319.87350464 98.27316284]
[334.85247803 97.47930908]
[346.60629272 86.56018829]
[362.44955444 89.08412170]
[370.22869873 103.11497498]
[363.97616577 117.88947296]
[348.48843384 122.07388306]
[335.64633179 112.45829010]
[320.66732788 113.25214386]
[305.68835449 114.04598999]
[290.70938110 114.83984375]
[275.73040771 115.63369751]
[260.75143433 116.42755127]
[256.71807861 125.41476440]
[249.55598450 132.26359558]
[240.28794861 135.93463135]
[230.26083374 135.84667969]
[220.94984436 131.96836853]
[213.74153137 124.82919312]
[209.72731018 115.44770050]
[194.78567505 114.12570953]
[179.84405518 112.80372620]
[164.90242004 111.48173523]
[149.96078491 110.15975189]
[134.99815369 109.10166931]
[120.01917267 108.30781555]
[105.04019928 107.51396179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 46]
[4 45]
[5 44]
[7 42]
[8 41]
[10 39]
[11 38]
[12 37]
[13 36]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[47 88]
[48 87]
[49 86]
[51 85]
[52 84]
[53 83]
[54 82]
[55 81]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
