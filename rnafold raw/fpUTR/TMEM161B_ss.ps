%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACUUCCUGUCCCGCGCGCGCACAACUUCCGGCAGAGCCGGAAGACCCUCUCUUUCGCUGUUUGAGAGUCUCUCGGCUCAAGGACCGGGAGGUAAGAGGUUUGGGACUGCCCCGGCAACUCCAGGGUGUCUGGUCCACGACCUAUCCUAGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[104.42483521 231.29000854]
[104.64889526 246.41630554]
[100.18576050 260.87091064]
[91.47269440 273.23770142]
[79.36331177 282.30511475]
[65.04396057 287.18481445]
[49.91751099 287.39874268]
[35.46590042 282.92593384]
[23.10494614 274.20455933]
[14.04564857 262.08911133]
[9.17554665 247.76649475]
[8.97176361 232.63990784]
[13.45426273 218.19129944]
[22.18389511 205.83619690]
[34.30541992 196.78501892]
[48.63129807 191.92451477]
[63.75801849 191.73086548]
[68.19300079 177.40148926]
[72.62798309 163.07211304]
[77.06296539 148.74275208]
[65.41092682 141.29841614]
[56.03769302 131.13323975]
[49.56080246 118.91693115]
[46.40697098 105.45433044]
[46.78396988 91.63238525]
[50.66697311 78.36172485]
[57.80015182 66.51663971]
[47.46213913 55.64808273]
[37.12413025 44.77952576]
[26.78611565 33.91097260]
[16.44810486 23.04241562]
[6.11009216 12.17385960]
[-4.22792006 1.30530334]
[-14.67415333 -9.45927811]
[-34.31579208 -13.82810116]
[-38.53814697 -32.66421509]
[-49.50959015 -42.89297104]
[-60.48103333 -53.12172699]
[-71.45247650 -63.35048294]
[-82.42391968 -73.57923889]
[-93.39536285 -83.80799103]
[-104.36680603 -94.03675079]
[-119.73685455 -97.78803253]
[-123.76976013 -112.12626648]
[-134.74119568 -122.35501862]
[-145.71264648 -132.58377075]
[-156.68408203 -142.81253052]
[-172.05413818 -146.56381226]
[-176.08703613 -160.90205383]
[-187.05848694 -171.13079834]
[-198.02992249 -181.35955811]
[-212.03100586 -175.36877441]
[-227.25820923 -175.59715271]
[-241.07333374 -182.00514221]
[-251.08280945 -193.48252869]
[-255.55245972 -208.04075623]
[-253.70787048 -223.15754700]
[-245.86862183 -236.21382141]
[-233.39294434 -244.94749451]
[-218.44229126 -247.84541321]
[-203.60696411 -244.40548706]
[-191.45727539 -235.22370911]
[-184.09823608 -221.89088440]
[-182.80484009 -206.71699524]
[-187.80117798 -192.33100891]
[-176.82972717 -182.10224915]
[-165.85829163 -171.87348938]
[-151.27299500 -168.85383606]
[-146.45533752 -153.78398132]
[-135.48388672 -143.55522156]
[-124.51244354 -133.32646179]
[-113.54100037 -123.09770966]
[-98.95570374 -120.07805634]
[-94.13804626 -105.00819397]
[-83.16660309 -94.77943420]
[-72.19515991 -84.55068207]
[-61.22372055 -74.32192230]
[-50.25227737 -64.09317017]
[-39.28083420 -53.86441422]
[-28.30939102 -43.63565826]
[-18.10200119 -44.90956497]
[-8.69489574 -40.22978973]
[-3.33299208 -30.93886375]
[-4.01462460 -20.01268768]
[2.96533561 -17.45768356]
[6.64063597 -9.03270912]
[16.97864723 1.83584702]
[27.31665993 12.70440292]
[37.65467072 23.57295799]
[47.99268341 34.44151306]
[58.33069611 45.31007004]
[68.66870880 56.17862701]
[86.30428314 47.90019226]
[105.73110962 46.43585968]
[124.40837097 51.97714996]
[139.89328003 63.79932404]
[150.16056824 80.35615540]
[153.86738586 99.48220062]
[168.74067688 101.42769623]
[183.61398315 103.37318420]
[198.48727417 105.31867981]
[213.36058044 107.26416779]
[225.81268311 97.90560150]
[240.86860657 100.09048462]
[249.71383667 112.01934052]
[264.58712769 113.96482849]
[279.46044922 115.91032410]
[294.33374023 117.85581207]
[309.20703125 119.80130768]
[324.14627075 121.15016937]
[339.12750244 121.90023804]
[354.10873413 122.65030670]
[369.08996582 123.40036774]
[383.25979614 116.36282349]
[395.58422852 124.72686005]
[410.56546021 125.47692871]
[423.37942505 115.82383728]
[438.87933350 119.96296692]
[445.17498779 134.71913147]
[437.43692017 148.77265930]
[421.60107422 151.34289551]
[409.81539917 140.45816040]
[394.83416748 139.70809937]
[381.73590088 146.79930115]
[368.33990479 138.38160706]
[353.35867310 137.63154602]
[338.37744141 136.88146973]
[323.39620972 136.13140869]
[321.20883179 137.96856689]
[318.14187622 139.02478027]
[314.49850464 138.95292664]
[310.70443726 137.52554321]
[307.26153564 134.67460632]
[292.38824463 132.72911072]
[277.51495361 130.78363037]
[262.64163208 128.83813477]
[247.76834106 126.89263916]
[236.15251160 136.14509583]
[221.04115295 134.38395691]
[211.41508484 122.13747406]
[196.54179382 120.19197845]
[181.66848755 118.24648285]
[166.79518127 116.30099487]
[151.92189026 114.35549927]
[148.44976807 123.54957581]
[143.36509705 131.95983887]
[136.83708191 139.30638123]
[129.08302307 145.34468079]
[120.36097717 149.87377930]
[110.96125793 152.74290466]
[101.19671631 153.85656738]
[91.39234161 153.17773438]
[86.95735931 167.50709534]
[82.52237701 181.83647156]
[78.08738708 196.16584778]
[90.46002197 204.87062073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 155]
[18 154]
[19 153]
[20 152]
[27 92]
[28 91]
[29 90]
[30 89]
[31 88]
[32 87]
[33 86]
[34 84]
[36 80]
[37 79]
[38 78]
[39 77]
[40 76]
[41 75]
[42 74]
[44 72]
[45 71]
[46 70]
[47 69]
[49 67]
[50 66]
[51 65]
[98 144]
[99 143]
[100 142]
[101 141]
[102 140]
[105 137]
[106 136]
[107 135]
[108 134]
[109 133]
[110 128]
[111 127]
[112 126]
[113 125]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
