%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCAUCACGUGACCGCAGCCCCAGCGCGGCGGGGCCGGCGUCUCCUGGCUGCCGUCACUUCCGGUUCUCUGUCAGUCGCGAGCGAACGACCAAGAGGGUGUUCGACUGCUAGAGCCGAGCGAAGCG\
) } def
/len { sequence length } bind def

/coor [
[99.32133484 211.26617432]
[84.71810913 207.83894348]
[71.62472534 200.52024841]
[61.05509567 189.87680054]
[53.82768250 176.73281860]
[50.50215149 162.10609436]
[51.33602524 147.12928772]
[56.26472855 132.96214294]
[64.90660095 120.70172119]
[76.59244537 111.29741669]
[90.41264343 105.47870636]
[75.60018921 103.11415100]
[60.78772736 100.74959564]
[45.97527313 98.38504028]
[31.16281509 96.02048492]
[16.31550026 101.48563385]
[4.96704006 91.83878326]
[-9.84541702 89.47422791]
[-24.65787315 87.10966492]
[-39.47032928 84.74510956]
[-54.28278732 82.38055420]
[-69.09524536 80.01599884]
[-83.01281738 90.53205872]
[-99.90602875 87.83334351]
[-109.47066498 74.05708313]
[-124.33630371 72.05393219]
[-139.22523499 70.23193359]
[-154.13525391 68.59136200]
[-169.04527283 66.95079803]
[-183.97415161 65.49190521]
[-198.91969299 64.21489716]
[-213.86523438 62.93788528]
[-230.16162109 67.61383057]
[-239.16610718 53.24874878]
[-227.85511780 40.61951065]
[-212.58822632 47.99234390]
[-197.64268494 49.26935196]
[-182.69714355 50.54636002]
[-175.69245911 47.95441818]
[-167.40469360 52.04078293]
[-152.49468994 53.68135071]
[-137.58467102 55.32191849]
[-130.51895142 52.90131760]
[-122.33315277 57.18828583]
[-107.46750641 59.19144440]
[-98.36274719 49.98923874]
[-85.42172241 47.70900345]
[-73.36705017 53.41192627]
[-66.73069000 65.20354462]
[-51.91823196 67.56809998]
[-37.10577393 69.93265533]
[-22.29331779 72.29721069]
[-7.48086119 74.66176605]
[7.33159542 77.02632141]
[21.11942482 71.39205170]
[33.52737045 81.20803070]
[48.33982849 83.57258606]
[63.15228271 85.93714142]
[77.96474457 88.30169678]
[92.77719879 90.66625214]
[96.24932098 88.33382416]
[100.46312714 87.30190277]
[104.92941284 87.79940033]
[109.09195709 89.87097931]
[123.60420990 86.07698059]
[138.11647034 82.28298187]
[152.62872314 78.48898315]
[167.14097595 74.69497681]
[181.65322876 70.90097809]
[196.16549683 67.10697937]
[203.39321899 56.34273529]
[215.63584900 53.52165985]
[226.14941406 59.63401794]
[233.87945557 54.57122803]
[241.14710999 56.29314041]
[255.82687378 53.21020889]
[270.50665283 50.12727356]
[285.18640137 47.04433823]
[299.86618042 43.96140289]
[305.16778564 39.73601913]
[310.93655396 39.01265335]
[315.33505249 41.10416031]
[330.14749146 38.73960495]
[344.95996094 36.37504959]
[359.77239990 34.01049423]
[374.58486938 31.64593887]
[383.86141968 19.13260651]
[398.91702271 16.94561958]
[410.78939819 25.86650085]
[417.69683838 11.97164917]
[431.46783447 4.82042837]
[446.80709839 7.16263008]
[457.81643677 18.09762955]
[460.26251221 33.42069626]
[453.20474243 47.23979950]
[439.35699463 54.24121094]
[424.04403687 51.73274612]
[413.15396118 40.67895889]
[404.64898682 52.85273743]
[389.66073608 55.46174240]
[376.94943237 46.45839691]
[362.13696289 48.82295227]
[347.32449341 51.18750763]
[332.51205444 53.55206299]
[317.69958496 55.91661835]
[302.94909668 58.64117050]
[288.26934814 61.72410583]
[273.58956909 64.80703735]
[258.90982056 67.88997650]
[244.23004150 70.97290802]
[229.58891296 74.23435974]
[217.54026794 86.93267059]
[199.95948792 81.61923218]
[185.44723511 85.41323090]
[170.93498230 89.20723724]
[156.42272949 93.00123596]
[141.91047668 96.79523468]
[127.39821625 100.58923340]
[112.88595581 104.38323975]
[127.21096802 108.83229065]
[139.75532532 117.05658722]
[149.54765320 128.41926575]
[155.82965088 142.04043579]
[158.11486816 156.86534119]
[156.22634888 171.74598694]
[150.31033325 185.53005981]
[140.82493591 197.15019226]
[128.50466919 205.70654297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[25 45]
[26 44]
[27 42]
[28 41]
[29 40]
[30 38]
[31 37]
[32 36]
[64 119]
[65 118]
[66 117]
[67 116]
[68 115]
[69 114]
[70 113]
[73 111]
[75 110]
[76 109]
[77 108]
[78 107]
[79 106]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[89 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
