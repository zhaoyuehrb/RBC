%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCUAAGGCCACCCUCUCGGGGAGGGAGUUGGGGAAGCUGGGUUGGCUGGGUUGGUAGCUCCUACCUACUGUGUGGCAAGAAGGU\
) } def
/len { sequence length } bind def

/coor [
[87.09488678 328.26507568]
[89.97954559 309.09924316]
[90.52108002 294.10903931]
[91.06262207 279.11880493]
[91.60415649 264.12860107]
[78.42012024 254.52890015]
[73.42624664 238.83068848]
[78.74600983 223.06596375]
[92.50000000 213.41389465]
[92.50000000 198.41389465]
[92.50000000 183.41389465]
[92.50000000 168.41389465]
[92.50000000 153.41389465]
[84.76270294 140.68663025]
[92.50000000 126.88645935]
[81.65783691 121.04035950]
[74.38765717 111.09682465]
[72.10527039 98.99227905]
[75.25514984 87.08397675]
[83.22387695 77.69096375]
[94.45961761 72.64244843]
[95.54198456 57.68154907]
[96.62435150 42.72064972]
[89.90300751 28.39814568]
[98.53851318 16.26235771]
[99.62088013 1.30145919]
[100.70324707 -13.65943909]
[101.78560638 -28.62033844]
[102.86797333 -43.58123779]
[103.95034027 -58.54213333]
[105.03270721 -73.50303650]
[106.11507416 -88.46392822]
[96.53633118 -95.96098328]
[91.91597748 -107.08181000]
[93.33329773 -118.91834259]
[100.30524445 -128.43807983]
[110.94119263 -133.26101685]
[113.10028076 -148.10481262]
[115.25936890 -162.94860840]
[117.41846466 -177.79240417]
[111.74812317 -192.56257629]
[121.23680115 -204.04360962]
[123.39589691 -218.88740540]
[116.82659149 -233.91326904]
[126.77121735 -246.95306396]
[142.99958801 -244.59259033]
[148.81735229 -229.26008606]
[138.23968506 -216.72831726]
[136.08059692 -201.88452148]
[141.90538025 -188.17608643]
[132.26225281 -175.63331604]
[130.10316467 -160.78952026]
[127.94407654 -145.94572449]
[125.78498840 -131.10192871]
[137.60183716 -117.34710693]
[135.81495667 -98.98712921]
[121.07597351 -87.38156891]
[119.99360657 -72.42066956]
[118.91123962 -57.45977020]
[117.82887268 -42.49887085]
[116.74650574 -27.53797150]
[115.66413879 -12.57707310]
[114.58177185 2.38382554]
[113.49941254 17.34472466]
[120.29817200 30.59712601]
[111.58525085 43.80301666]
[110.50288391 58.76391602]
[109.42051697 73.72481537]
[123.11268616 84.34959412]
[127.89472961 101.00772095]
[121.92313385 117.27737427]
[107.50000000 126.88645935]
[115.23729706 140.68663025]
[107.50000000 153.41389465]
[107.50000000 168.41389465]
[107.50000000 183.41389465]
[107.50000000 198.41389465]
[107.50000000 213.41389465]
[119.32183838 220.75230408]
[125.86844635 232.90664673]
[125.49692535 246.59790039]
[118.41443634 258.19326782]
[106.59437561 264.67013550]
[106.05284119 279.66033936]
[105.51130676 294.65057373]
[104.96976471 309.64077759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 86]
[3 85]
[4 84]
[5 83]
[9 78]
[10 77]
[11 76]
[12 75]
[13 74]
[15 72]
[21 68]
[22 67]
[23 66]
[25 64]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[37 54]
[38 53]
[39 52]
[40 51]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
