%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGAAAAAUGAUGAUAAAGUAAAAGGCCAGUAACUGGCAGCCACAUGUUAUGCAAACAUUCUCCCCUCUGUAAAUACUACAUGAAUGUUAUUUUUGCUUUCAGAAAUCACUAAACCUUGGCC\
) } def
/len { sequence length } bind def

/coor [
[85.35159302 484.54949951]
[72.36466217 476.90512085]
[61.49113083 466.47137451]
[53.31739044 453.81094360]
[48.28423691 439.60656738]
[46.66310883 424.62429810]
[48.54142761 409.67208862]
[53.81790161 395.55630493]
[62.20796967 383.03817749]
[73.25917816 372.79281616]
[86.37553406 365.37271118]
[100.84970093 361.17803955]
[100.10201263 346.19668579]
[99.35432434 331.21533203]
[98.60663605 316.23397827]
[83.43523407 307.36691284]
[76.48618317 291.05715942]
[80.67353058 273.67001343]
[94.52506256 262.11239624]
[93.03153992 247.18693542]
[91.53802490 232.26147461]
[90.04450226 217.33601379]
[88.55098724 202.41055298]
[87.05747223 187.48509216]
[85.56394958 172.55963135]
[84.07043457 157.63417053]
[82.57691956 142.70869446]
[81.08339691 127.78324127]
[70.88080597 116.78746033]
[56.10869217 114.18273926]
[41.33657455 111.57801819]
[26.56445885 108.97329712]
[11.79234314 106.36856842]
[-4.85609293 109.57261658]
[-12.54366875 94.46177673]
[-0.15149845 82.89153290]
[14.39706612 91.59645844]
[29.16918182 94.20117950]
[43.94129944 96.80590057]
[58.71341324 99.41062164]
[73.48553467 102.01534271]
[76.90615845 94.67812347]
[82.03522491 89.50195312]
[72.68287659 77.77447510]
[57.50769806 80.14291382]
[43.18717957 74.59147644]
[33.57347488 62.61349106]
[31.25262070 47.43096161]
[36.84891129 33.12791443]
[48.85697937 23.55180359]
[64.04670715 21.27854919]
[78.33213806 26.91964722]
[87.87056732 38.95766830]
[90.09619904 54.15444946]
[84.41034698 68.42212677]
[93.76269531 80.14960480]
[99.22199249 79.20728302]
[104.73644257 79.73899078]
[113.18624115 67.34541321]
[121.63603973 54.95183182]
[130.08584595 42.55825043]
[138.53564453 30.16466713]
[146.98544312 17.77108574]
[155.43524170 5.37750435]
[145.70964050 -6.16872025]
[139.46087646 -19.91119194]
[137.15264893 -34.83012772]
[138.95625305 -49.81844330]
[144.73782349 -63.76390839]
[154.06834412 -75.63167572]
[166.25543213 -84.54107666]
[180.39472961 -89.83097076]
[195.43699646 -91.10882568]
[210.26599121 -88.27980042]
[223.78131104 -81.55384064]
[234.98004150 -71.43005371]
[243.03114319 -58.65968323]
[247.33717346 -44.19038391]
[247.57861328 -29.09587097]
[243.73753357 -14.49625969]
[236.09896851 -1.47493660]
[225.22973633 9.00182915]
[211.93643188 16.15659332]
[197.20550537 19.45842171]
[182.13006592 18.66230011]
[167.82882690 13.82730484]
[159.37902832 26.22088623]
[150.92922974 38.61446762]
[142.47943115 51.00804901]
[134.02961731 63.40163040]
[125.57982635 75.79521179]
[117.13002014 88.18879700]
[120.09294128 112.56667328]
[96.00885773 126.28971863]
[97.50238037 141.21517944]
[98.99589539 156.14064026]
[100.48941803 171.06610107]
[101.98293304 185.99156189]
[103.47644806 200.91702271]
[104.96997070 215.84249878]
[106.46348572 230.76795959]
[107.95700073 245.69342041]
[109.45052338 260.61886597]
[121.09217072 265.50573730]
[129.46977234 274.85437012]
[133.01449585 286.82095337]
[131.10255432 299.08068848]
[124.16400146 309.27960205]
[113.58798981 315.48629761]
[114.33567810 330.46765137]
[115.08336639 345.44900513]
[115.83105469 360.43035889]
[130.65095520 363.16302490]
[144.44093323 369.24026489]
[156.45733643 378.33438110]
[166.05210876 389.95492554]
[172.70783997 403.47518921]
[176.06558228 418.16610718]
[175.94427490 433.23532104]
[172.35043335 447.87026978]
[165.47787476 461.28161621]
[155.69723511 472.74618530]
[143.53598022 481.64562988]
[129.64993286 487.50009155]
[114.78796387 489.99377441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 112]
[13 111]
[14 110]
[15 109]
[19 103]
[20 102]
[21 101]
[22 100]
[23 99]
[24 98]
[25 97]
[26 96]
[27 95]
[28 94]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
[43 56]
[44 55]
[58 92]
[59 91]
[60 90]
[61 89]
[62 88]
[63 87]
[64 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
