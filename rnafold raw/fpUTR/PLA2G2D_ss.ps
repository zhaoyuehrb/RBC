%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUAUAAGGGGGCAGCCUGCAUGGAAAGGGACUGCCAGCAUCUGCCUCCACUGCUCUGUGCUGGGAUC\
) } def
/len { sequence length } bind def

/coor [
[159.77520752 271.50518799]
[151.80763245 264.34228516]
[145.92503357 255.37040710]
[142.52355957 245.18017578]
[141.83567810 234.44474792]
[143.91438293 223.87530518]
[148.62915039 214.17387390]
[155.67410278 205.98678589]
[147.88034058 193.17050171]
[140.08657837 180.35420227]
[132.29283142 167.53791809]
[124.49906921 154.72161865]
[116.70530701 141.90533447]
[108.91154480 129.08903503]
[101.11779022 116.27275085]
[89.80379486 112.73143005]
[83.87615967 102.46446228]
[86.46627808 90.89559174]
[79.26392365 77.73785400]
[72.06156921 64.58011627]
[64.96105957 58.30063629]
[64.84642029 50.65550232]
[58.25039673 37.18358612]
[51.65437698 23.71167183]
[36.32602310 22.74360847]
[23.54420280 14.22770500]
[16.74715805 0.45469579]
[17.76326370 -14.87054825]
[26.31919098 -27.62561417]
[40.11343765 -34.37945175]
[55.43542099 -33.31531525]
[68.16360474 -24.71944809]
[74.87416840 -10.90409946]
[73.76201630 4.41447306]
[65.12628937 17.11565018]
[71.72231293 30.58756638]
[78.31833649 44.05948257]
[85.21930695 57.37776184]
[92.42166138 70.53549957]
[99.62401581 83.69323730]
[114.12582397 91.84445190]
[113.93408203 108.47898865]
[121.72783661 121.29528046]
[129.52159119 134.11157227]
[137.31535339 146.92785645]
[145.10911560 159.74415588]
[152.90287781 172.56044006]
[160.69664001 185.37673950]
[168.49038696 198.19302368]
[188.77653503 195.86500549]
[207.69392395 203.37472534]
[220.77519226 218.88180542]
[224.96281433 238.66532898]
[219.32362366 258.01644897]
[230.74079895 267.74517822]
[242.15795898 277.47390747]
[257.89016724 275.96630859]
[270.02722168 286.08892822]
[271.36840820 301.83621216]
[261.11804199 313.86557007]
[245.35746765 315.04019165]
[233.43716431 304.66320801]
[232.42922974 288.89108276]
[221.01205444 279.16235352]
[209.59489441 269.43362427]
[200.57115173 275.07400513]
[190.39253235 278.22775269]
[179.73156738 278.67877197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 49]
[9 48]
[10 47]
[11 46]
[12 45]
[13 44]
[14 43]
[15 42]
[18 40]
[19 39]
[20 38]
[22 37]
[23 36]
[24 35]
[54 65]
[55 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
