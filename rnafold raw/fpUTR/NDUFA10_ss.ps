%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCCCGGCCGUGACGUCACGGCAGCGCGCCGGCCGCGAGAGAGGGCCCCGUCGCGACCGCGUCCCCUUGGGUCCUUGAUCCUGAGCUGACCGGGUAGCC\
) } def
/len { sequence length } bind def

/coor [
[91.35386658 234.11474609]
[90.89193726 219.12185669]
[79.89839935 209.13798523]
[79.21636200 193.93965149]
[89.76290131 182.47630310]
[89.30097198 167.48341370]
[88.83905029 152.49053955]
[88.37712097 137.49765015]
[75.16194153 130.40124512]
[62.40868378 138.29772949]
[49.65542603 146.19421387]
[36.90216827 154.09069824]
[24.14891243 161.98718262]
[11.39565563 169.88365173]
[4.11825085 184.57962036]
[-12.26255512 185.35502625]
[-20.89559364 171.41218567]
[-12.89993477 157.09431458]
[3.49917269 157.13040161]
[16.25242996 149.23391724]
[29.00568771 141.33743286]
[41.75894547 133.44094849]
[54.51219940 125.54447174]
[67.26545715 117.64798737]
[64.23461914 106.87131500]
[64.58460999 95.91503143]
[68.14325714 85.79341125]
[74.44774628 77.40159607]
[82.79969788 71.43665314]
[92.34034729 68.34027100]
[102.13784790 68.26807404]
[111.27801514 71.08715820]
[119.94462585 58.84420395]
[128.61123657 46.60125351]
[137.27783203 34.35829926]
[145.75488281 21.98333549]
[154.04035950 9.47930050]
[155.21325684 -6.29836988]
[168.69319153 -12.63404083]
[176.97866821 -25.13807678]
[174.04649353 -40.43644333]
[182.62725830 -52.99928665]
[197.22999573 -55.70038986]
[205.51545715 -68.20442963]
[213.80093384 -80.70845795]
[222.08641052 -93.21249390]
[230.37188721 -105.71652985]
[238.65736389 -118.22056580]
[246.94284058 -130.72460938]
[255.22831726 -143.22863770]
[254.55558777 -165.53105164]
[273.81872559 -175.24603271]
[273.04385376 -191.04824829]
[285.64303589 -198.99243164]
[292.32910156 -212.41987610]
[299.01519775 -225.84732056]
[297.46612549 -242.17315674]
[310.98516846 -251.45578003]
[325.66510010 -244.14605713]
[326.40444946 -227.76358032]
[312.44262695 -219.16125488]
[305.75656128 -205.73381042]
[299.07049561 -192.30635071]
[300.32360840 -177.46455383]
[287.24618530 -168.55995178]
[291.47198486 -161.46305847]
[292.45587158 -153.16615295]
[289.95065308 -145.09570312]
[284.31576538 -138.67105103]
[276.46789551 -135.05485535]
[267.73236084 -134.94316101]
[259.44686890 -122.43913269]
[251.16139221 -109.93509674]
[242.87593079 -97.43106079]
[234.59045410 -84.92702484]
[226.30497742 -72.42298889]
[218.01950073 -59.91895294]
[209.73402405 -47.41491699]
[212.93850708 -32.91433334]
[204.71397400 -20.11543083]
[189.48269653 -16.85260201]
[181.19721985 -4.34856606]
[180.61695862 10.53473186]
[166.54440308 17.76477432]
[158.25892639 30.26881027]
[157.16940308 37.71194077]
[149.52079773 43.02490616]
[140.85418701 55.26786041]
[132.18757629 67.51081085]
[123.52097321 79.75376892]
[133.07965088 100.64647675]
[125.71447754 123.94575500]
[103.37001038 137.03572083]
[103.83193207 152.02861023]
[104.29386139 167.02149963]
[104.75578308 182.01437378]
[115.98801422 192.80673218]
[116.24289703 208.01821899]
[105.88482666 218.65992737]
[106.34674835 233.65281677]
[109.12959290 252.83367920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[5 96]
[6 95]
[7 94]
[8 93]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[32 90]
[33 89]
[34 88]
[35 87]
[36 85]
[37 84]
[39 82]
[40 81]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[48 73]
[49 72]
[50 71]
[52 65]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
