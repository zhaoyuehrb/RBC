%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCUGUUUCCGCCUCUUGCCUUCGGACGCCGGAUUUUGACGUGCUCUCGCGAGAUUUGGGUCUCUUCCUAAGCCGGCGCUCGGCAAGUUCUCCCAGGAGAAAGCC\
) } def
/len { sequence length } bind def

/coor [
[97.35189056 536.22546387]
[89.81203461 521.66235352]
[98.88075256 507.99890137]
[99.32110596 493.00537109]
[99.76145172 478.01184082]
[92.40111542 465.06292725]
[100.54019928 451.49581909]
[100.98054504 436.50228882]
[101.42089844 421.50875854]
[101.86124420 406.51522827]
[102.30158997 391.52169800]
[85.81964874 382.69866943]
[75.89200592 366.76376343]
[75.23149109 347.92141724]
[84.09335327 331.18997192]
[100.18614960 321.06515503]
[98.86662292 306.12329102]
[97.54710388 291.18142700]
[96.22757721 276.23959351]
[94.90805817 261.29772949]
[93.58853149 246.35589600]
[85.05429077 240.39276123]
[81.21130371 230.47880554]
[83.59371185 219.88919067]
[91.63379669 212.27131653]
[91.19345093 197.27778625]
[87.79766083 190.57885742]
[90.96678925 181.83905029]
[90.96678925 166.83905029]
[90.96678925 151.83905029]
[90.96678925 136.83905029]
[90.96678925 121.83905029]
[90.96678925 106.83905029]
[87.26203918 92.30375671]
[80.08209229 79.13378143]
[72.90214539 65.96379852]
[65.72219849 52.79381943]
[58.54225159 39.62384033]
[51.36230087 26.45386314]
[44.39638138 20.29726982]
[44.17135620 12.79018402]
[37.38113022 -0.58489680]
[22.28163147 -5.25188208]
[14.97872353 -19.26769638]
[19.80508804 -34.31700897]
[33.89733124 -41.47132492]
[48.89477158 -36.48611832]
[55.89970016 -22.31902313]
[50.75621033 -7.37512636]
[57.54644012 5.99995422]
[64.53227997 19.27391434]
[71.71222687 32.44389343]
[78.89217377 45.61387253]
[86.07212830 58.78385162]
[93.25207520 71.95382690]
[100.43202209 85.12380981]
[115.39163208 86.22384644]
[124.42080688 74.24578857]
[133.44999695 62.26772690]
[142.47917175 50.28966522]
[151.50834656 38.31160355]
[149.06344604 22.69757271]
[158.44279480 9.97738361]
[174.08181763 7.69769859]
[186.70211792 17.21101570]
[188.81632996 32.87325287]
[179.17012024 45.39228058]
[163.48640442 47.34078598]
[154.45722961 59.31884384]
[145.42805481 71.29690552]
[136.39886475 83.27496338]
[127.36968994 95.25302124]
[117.36715698 106.15979004]
[105.96678925 106.83905029]
[105.96678925 121.83905029]
[105.96678925 136.83905029]
[105.96678925 151.83905029]
[105.96678925 166.83905029]
[105.96678925 181.83905029]
[106.18698883 196.83743286]
[106.62733459 211.83097839]
[118.04868317 228.31318665]
[108.53038025 245.03637695]
[109.84990692 259.97821045]
[111.16942596 274.92007446]
[112.48895264 289.86190796]
[113.80847168 304.80377197]
[115.12799835 319.74560547]
[126.27708435 322.97451782]
[135.84733582 329.49475098]
[142.89947510 338.64611816]
[146.74766541 349.51119995]
[147.02621460 361.00732422]
[143.72425842 371.99441528]
[137.18516541 381.38815308]
[128.07090759 388.26687622]
[117.29512787 391.96203613]
[116.85477448 406.95556641]
[116.41442871 421.94909668]
[115.97408295 436.94265747]
[115.53373718 451.93618774]
[122.86257935 465.95755005]
[114.75498199 478.45217896]
[114.31463623 493.44573975]
[113.87429047 508.43927002]
[122.12550354 522.61138916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 105]
[4 104]
[5 103]
[7 101]
[8 100]
[9 99]
[10 98]
[11 97]
[16 88]
[17 87]
[18 86]
[19 85]
[20 84]
[21 83]
[25 81]
[26 80]
[28 79]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[34 56]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[41 50]
[42 49]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
