%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUCUCCCCCAUGCCUUCCCUUUCACGCUUCCGUCCUGACGCAAACGUGGGGCCGCCUUCCGCACUGCGGGCUUGUCCUUGGCCCUGCCCUACUCAGUUUCCUGAAGCAUGCGCAGUUGCCUUUCCGUCAAUUCCUGUCCUGGGCGUACGUCAAG\
) } def
/len { sequence length } bind def

/coor [
[-86.06185913 704.13201904]
[-89.04033661 718.88073730]
[-94.75644684 732.79919434]
[-103.00357056 745.38415527]
[-113.48356628 756.18072510]
[-125.81759644 764.79858398]
[-139.55979919 770.92626953]
[-154.21339417 774.34228516]
[-169.24865723 774.92303467]
[-184.12208557 772.64758301]
[-198.29600525 767.59814453]
[-211.25804138 759.95733643]
[-222.53962708 750.00134277]
[-231.73294067 738.08996582]
[-238.50563049 724.65399170]
[-242.61289978 710.17889404]
[-243.90625000 695.18811035]
[-242.33894348 680.22351074]
[-237.96762085 665.82598877]
[-230.95031738 652.51611328]
[-221.54069519 640.77490234]
[-210.07890320 631.02685547]
[-196.97929382 623.62438965]
[-182.71539307 618.83508301]
[-167.80284119 616.83203125]
[-152.78070068 617.68768311]
[-138.19204712 621.37109375]
[-131.83775330 607.78344727]
[-125.48346710 594.19586182]
[-131.63269043 584.51037598]
[-132.32513428 572.93823242]
[-127.27107239 562.37164307]
[-117.63160706 555.50817871]
[-105.75412750 554.16210938]
[-98.86466980 540.83789062]
[-91.97520447 527.51367188]
[-85.08574677 514.18939209]
[-78.19628906 500.86517334]
[-79.97684479 483.43014526]
[-64.44970703 473.57824707]
[-57.82652283 460.11965942]
[-51.20333862 446.66107178]
[-44.58015823 433.20248413]
[-54.86652756 416.63717651]
[-53.13447189 397.07168579]
[-39.90698242 382.35861206]
[-20.35515404 378.50634766]
[-14.82219601 364.56408691]
[-9.28923702 350.62185669]
[-12.79149246 333.44961548]
[1.68113554 322.10525513]
[6.93579817 308.05572510]
[12.19046116 294.00622559]
[17.44512367 279.95672607]
[22.69978714 265.90722656]
[19.91127396 251.27598572]
[31.99263763 241.06074524]
[37.24729919 227.01123047]
[30.34800529 217.84494019]
[28.73833656 206.36437988]
[32.93691254 195.42967224]
[42.00059891 187.82202148]
[53.73358917 185.53656006]
[59.54265594 171.70707703]
[65.35172272 157.87759399]
[71.16078949 144.04809570]
[70.85002899 136.62275696]
[77.22528839 130.00323486]
[83.30816650 116.29197693]
[89.39105225 102.58071899]
[92.50000000 87.90644836]
[92.50000000 72.90644836]
[92.50000000 57.90644455]
[92.50000000 42.90644455]
[92.50000000 27.90644455]
[80.40541840 17.99407387]
[77.56279755 2.61702871]
[85.31433868 -10.96412086]
[100.00000000 -16.33677101]
[114.68566132 -10.96412086]
[122.43720245 2.61702871]
[119.59458160 17.99407387]
[107.50000000 27.90644455]
[107.50000000 42.90644455]
[107.50000000 57.90644455]
[107.50000000 72.90644836]
[107.50000000 87.90644836]
[114.26187897 91.15097046]
[120.75093842 77.62721252]
[127.23999023 64.10344696]
[133.72926331 50.57978439]
[147.25282288 57.06925964]
[140.76374817 70.59250641]
[134.27470398 84.11626434]
[127.78564453 97.64002991]
[134.54753113 100.88455963]
[146.24838257 91.49893188]
[157.94924927 82.11331177]
[169.65010071 72.72769165]
[175.09051514 57.25727081]
[191.25619507 54.49995041]
[201.51727295 67.29222870]
[195.31803894 82.47450256]
[179.03572083 84.42855072]
[167.33486938 93.81417084]
[155.63400269 103.19979095]
[143.93315125 112.58541870]
[120.03020477 118.77135468]
[103.10231018 108.66360474]
[97.01942444 122.37486267]
[90.93654633 136.08612061]
[84.99028015 149.85716248]
[79.18121338 163.68666077]
[73.37214661 177.51614380]
[67.56307983 191.34562683]
[75.40476990 208.54467773]
[68.35843658 225.74151611]
[51.29680252 232.26589966]
[46.04214096 246.31539917]
[48.45480347 261.95156860]
[36.74929047 271.16189575]
[31.49462700 285.21139526]
[26.23996353 299.26089478]
[20.98530006 313.31039429]
[15.73063850 327.35989380]
[20.36404991 339.43530273]
[15.65743256 351.05017090]
[4.65301418 356.15481567]
[-0.87994486 370.09704590]
[-6.41290379 384.03930664]
[1.07353139 391.72750854]
[5.53321791 401.44573975]
[6.47337103 412.05841064]
[3.81081319 422.33496094]
[-2.12136602 431.09234619]
[-10.61524391 437.33145142]
[-20.67246819 440.35083008]
[-31.12157440 439.82565308]
[-37.74475861 453.28424072]
[-44.36793900 466.74282837]
[-50.99112320 480.20141602]
[-47.57912064 492.67706299]
[-53.41531754 503.76745605]
[-64.87204742 507.75463867]
[-71.76151276 521.07885742]
[-78.65097046 534.40313721]
[-85.54042816 547.72735596]
[-92.42988586 561.05157471]
[-85.97944641 578.81927490]
[-94.36980438 595.40191650]
[-111.89586639 600.55017090]
[-118.25015259 614.13775635]
[-124.60443878 627.72534180]
[-112.42487335 636.56018066]
[-102.13761139 647.54058838]
[-94.11452484 660.26953125]
[-88.64566040 674.28698730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[27 153]
[28 152]
[29 151]
[34 148]
[35 147]
[36 146]
[37 145]
[38 144]
[40 141]
[41 140]
[42 139]
[43 138]
[47 130]
[48 129]
[49 128]
[51 125]
[52 124]
[53 123]
[54 122]
[55 121]
[57 119]
[58 118]
[63 115]
[64 114]
[65 113]
[66 112]
[68 111]
[69 110]
[70 109]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
