%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUAAGUGUUCGCCAUAAACCCUGGGCCCAGGCGGGAAAGGGGGGAGGAUGUUGAUUGUUGGAACACACACCUGUCCAGGUGCAGGGGAGCUGGAGGCUCUGUGAGAGGAGGGCCAGCUCAGCCACAGCAGGAGGACUGACAGGGGCCUG\
) } def
/len { sequence length } bind def

/coor [
[102.79547882 184.47206116]
[93.61936188 196.33792114]
[81.99445343 205.81745911]
[68.52479553 212.41809082]
[53.91028214 215.79682922]
[38.91029358 215.77813721]
[24.30424500 212.36297607]
[10.85108089 205.72879028]
[-0.75016034 196.22030640]
[-9.89666843 184.33160400]
[-16.11318207 170.68040466]
[-19.07668495 155.97607422]
[-18.63319206 140.98262024]
[-14.80574799 126.47915649]
[-7.79322767 113.21926880]
[2.03998947 101.89196777]
[14.18296146 93.08581543]
[28.00472832 87.25839996]
[42.78709793 84.71252441]
[57.76196671 85.58045197]
[72.15122986 89.81710815]
[85.20629883 97.20168304]
[73.81522369 87.44241333]
[62.42414856 77.68313599]
[51.03307343 67.92385864]
[39.64200211 58.16458511]
[24.12805367 55.06168365]
[19.49692917 40.90534592]
[8.10585499 31.14607048]
[-3.28521848 21.38679695]
[-18.82796288 22.41675949]
[-30.24110794 12.35719681]
[-31.12723541 -2.46678281]
[-42.51831055 -12.22605705]
[-53.90938187 -21.98533249]
[-65.30045319 -31.74460602]
[-76.69152832 -41.50387955]
[-88.08260345 -51.26315689]
[-103.58891296 -45.60810089]
[-119.74193573 -48.51005554]
[-132.16754150 -59.08738327]
[-137.54922485 -74.39308167]
[-134.51307678 -90.23535156]
[-150.79090881 -85.74844360]
[-166.38922119 -91.76685333]
[-175.25703430 -105.74446106]
[-174.08047485 -122.08966827]
[-185.86260986 -131.37306213]
[-201.49087524 -133.83641052]
[-206.69927979 -147.79069519]
[-218.48141479 -157.07408142]
[-230.26354980 -166.35745239]
[-246.56227112 -168.16966248]
[-252.89346313 -183.29739380]
[-242.74415588 -196.17852783]
[-226.55508423 -193.56205750]
[-220.98017883 -178.13960266]
[-209.19802856 -168.85621643]
[-197.41589355 -159.57283020]
[-182.63037109 -157.77348328]
[-176.57923889 -143.15519714]
[-164.79708862 -133.87181091]
[-152.30625916 -138.68127441]
[-138.96542358 -136.65902710]
[-128.29078674 -128.22946167]
[-123.14942932 -115.51987457]
[-124.98973846 -101.82440186]
[-112.51682281 -107.46731567]
[-98.76372528 -107.17105103]
[-86.42706299 -100.93644714]
[-77.95042419 -89.93430328]
[-75.04042053 -76.28592682]
[-78.32332611 -62.65422821]
[-66.93225861 -52.89495468]
[-55.54118347 -43.13568115]
[-44.15010834 -33.37640381]
[-32.75903320 -23.61713028]
[-21.36795998 -13.85785675]
[-6.58349133 -15.25609112]
[5.10770178 -5.52106905]
[6.47405624 9.99572277]
[17.86512947 19.75499725]
[29.25620270 29.51427269]
[43.95538712 31.91912460]
[49.40127563 46.77351379]
[60.79235077 56.53278732]
[72.18342590 66.29206085]
[83.57449341 76.05133820]
[94.96556854 85.81060791]
[109.73768616 88.41533661]
[123.77966309 83.14059448]
[137.82164001 77.86585236]
[151.86361694 72.59111023]
[165.90559387 67.31636810]
[179.94757080 62.04162598]
[193.98954773 56.76688385]
[198.12539673 43.90980530]
[208.76786804 35.91488266]
[221.87832642 35.53467560]
[232.64135742 42.68378067]
[246.78866577 37.69845963]
[260.93597412 32.71313858]
[275.08331299 27.72781563]
[281.68228149 13.36713600]
[296.53179932 7.95720482]
[310.82189941 14.70763779]
[316.07452393 29.61352348]
[309.17340088 43.83146286]
[294.21279907 48.92620468]
[280.06863403 41.87513351]
[265.92129517 46.86045456]
[251.77398682 51.84577560]
[237.62667847 56.83109665]
[231.04563904 72.27755737]
[215.02459717 78.33213806]
[199.26428223 70.80886078]
[185.22230530 76.08360291]
[171.18032837 81.35834503]
[157.13835144 86.63308716]
[143.09637451 91.90782928]
[129.05439758 97.18257141]
[115.01242828 102.45730591]
[113.80214691 103.28345490]
[112.55551910 103.95084381]
[121.95937347 115.63705444]
[131.36323547 127.32326508]
[147.64463806 124.61376953]
[162.98939514 130.43443298]
[173.25984192 143.11485291]
[175.73748779 159.14881897]
[169.84201050 174.16346741]
[179.48382568 185.65412903]
[189.12564087 197.14479065]
[204.91801453 199.96980286]
[212.42868042 214.14617920]
[205.89611816 228.79899597]
[190.33154297 232.68788147]
[177.67475891 222.82960510]
[177.63497925 206.78660583]
[167.99316406 195.29594421]
[158.35134888 183.80526733]
[145.05392456 187.06021118]
[131.58944702 184.24186707]
[120.60843658 175.84655762]
[114.29776764 163.47418213]
[113.94519043 149.52348328]
[119.67702484 136.72712708]
[110.27316284 125.04090881]
[100.86930847 113.35470581]
[107.84875488 126.63202667]
[111.64003754 141.14498901]
[112.04615021 156.13949585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 89]
[23 88]
[24 87]
[25 86]
[26 85]
[28 83]
[29 82]
[30 81]
[33 78]
[34 77]
[35 76]
[36 75]
[37 74]
[38 73]
[43 67]
[47 62]
[48 61]
[50 59]
[51 58]
[52 57]
[90 122]
[91 121]
[92 120]
[93 119]
[94 118]
[95 117]
[96 116]
[100 113]
[101 112]
[102 111]
[103 110]
[124 149]
[125 148]
[126 147]
[131 141]
[132 140]
[133 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
