%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUGCUUCCUUUCGCAGUAAACGUUCUUCCGAGAAAUUCCAAGGGGAUCUCAGCCAAGCAGAGGGGGAAGGGAUCCUGCCCACGCCUGGGGAGACCGAAGGGCACAGCUCCCCGCGCCGCGCACGCCGCCCGAGCCCGGAGUGCGGACACCCCCGGG\
) } def
/len { sequence length } bind def

/coor [
[-8.05779743 176.51397705]
[-13.03634167 162.36427307]
[-6.71656466 148.76211548]
[-21.23055077 152.54948425]
[-35.74453735 156.33685303]
[-50.25852203 160.12423706]
[-64.77250671 163.91160583]
[-79.28649902 167.69897461]
[-93.80048370 171.48635864]
[-102.52719879 193.79904175]
[-124.06887817 203.77355957]
[-146.31375122 196.13674927]
[-158.44900513 204.95352173]
[-170.58425903 213.77030945]
[-182.71951294 222.58708191]
[-194.85476685 231.40386963]
[-201.92234802 248.38171387]
[-219.40747070 249.59098816]
[-231.36727905 258.64434814]
[-230.92799377 274.15518188]
[-239.71742249 286.94290161]
[-254.35585022 292.09033203]
[-269.21450806 287.61819458]
[-278.57992554 275.24609375]
[-278.85092163 259.73138428]
[-269.92327881 247.03977966]
[-255.22987366 242.05145264]
[-240.42060852 246.68452454]
[-228.46080017 237.63117981]
[-226.47909546 225.66514587]
[-216.54405212 218.02909851]
[-203.67153931 219.26861572]
[-191.53628540 210.45182800]
[-179.40103149 201.63505554]
[-167.26577759 192.81826782]
[-155.13052368 184.00149536]
[-156.58496094 179.48170471]
[-157.34098816 174.79425049]
[-172.15631104 172.44773865]
[-186.97163391 170.10121155]
[-201.78697205 167.75469971]
[-216.60229492 165.40817261]
[-233.19227600 168.90229797]
[-241.14239502 153.92791748]
[-228.95404053 142.14317322]
[-214.25576782 150.59284973]
[-199.44044495 152.93937683]
[-184.62512207 155.28588867]
[-169.80979919 157.63240051]
[-154.99447632 159.97892761]
[-150.55583191 152.34774780]
[-144.14820862 146.22998047]
[-136.26489258 142.12042236]
[-127.51946259 140.35838318]
[-118.59802246 141.09968567]
[-110.20539856 144.30305481]
[-103.00942993 149.73204041]
[-97.58786011 156.97236633]
[-83.07386780 153.18499756]
[-68.55988312 149.39761353]
[-54.04589844 145.61024475]
[-39.53190994 141.82287598]
[-25.01792526 138.03549194]
[-10.50393867 134.24812317]
[3.76190948 129.61286926]
[17.73013306 124.14581299]
[31.69835663 118.67875671]
[45.66658020 113.21169281]
[59.63480377 107.74463654]
[60.77498627 87.72291565]
[71.25325775 70.62393951]
[88.57511139 60.51835632]
[87.10485077 45.59058380]
[85.63459778 30.66281509]
[73.26024628 20.83168221]
[71.54496002 5.12075233]
[81.50637054 -7.14895916]
[97.23455811 -8.69805050]
[109.39826202 1.39252734]
[110.78098297 17.13621330]
[100.56236267 29.19255829]
[102.03262329 44.12032700]
[103.50287628 59.04809952]
[111.76258850 60.61764526]
[119.53012085 63.83506393]
[126.48045349 68.56572723]
[138.07560730 59.04982376]
[143.83479309 44.31407547]
[158.58160400 42.22099304]
[170.17675781 32.70509338]
[181.77192688 23.18919373]
[193.36708069 13.67329407]
[204.96223450 4.15739489]
[216.55738831 -5.35850430]
[228.15254211 -14.87440395]
[234.36380005 -36.37777328]
[255.78405762 -39.34966278]
[266.59686279 -49.74597168]
[270.62918091 -65.64164734]
[286.48278809 -69.83638000]
[297.84881592 -58.01499939]
[293.03491211 -42.33831787]
[276.99316406 -38.93317032]
[266.18035889 -28.53685760]
[267.72735596 -20.69659424]
[265.99981689 -12.79752636]
[261.21084595 -6.16578293]
[254.09371948 -1.94521487]
[245.79039001 -0.90041906]
[237.66844177 -3.27924681]
[226.07328796 6.23665237]
[214.47813416 15.75255203]
[202.88298035 25.26845169]
[191.28781128 34.78435135]
[179.69265747 44.30025101]
[168.09750366 53.81614685]
[163.16767883 67.87126160]
[147.59150696 70.64498138]
[135.99635315 80.16088104]
[140.22250366 91.54553223]
[140.93742371 103.66822052]
[138.07868958 115.47068787]
[150.71194458 123.55776215]
[163.34519958 131.64483643]
[175.97845459 139.73190308]
[188.61172485 147.81898499]
[204.40592957 148.74270630]
[210.95358276 162.12094116]
[223.58685303 170.20802307]
[236.22010803 178.29508972]
[250.62020874 172.51438904]
[265.65969849 176.33451843]
[275.55560303 188.28654480]
[276.50268555 203.77468872]
[268.13684082 216.84342957]
[253.67488098 222.46759033]
[238.67771912 218.48454285]
[228.91206360 206.42585754]
[228.13302612 190.92835999]
[215.49977112 182.84127808]
[202.86651611 174.75421143]
[187.97590637 174.40893555]
[180.52464294 160.45223999]
[167.89138794 152.36517334]
[155.25813293 144.27809143]
[142.62486267 136.19102478]
[129.99160767 128.10394287]
[117.93163300 136.98358154]
[103.49089050 140.95292664]
[88.58666229 139.48498535]
[75.19777679 132.77465820]
[65.10186005 121.71286011]
[51.13364029 127.17991638]
[37.16541672 132.64697266]
[23.19719124 138.11402893]
[9.22896671 143.58108521]
[22.33786201 150.87196350]
[26.62604523 165.24595642]
[19.65448570 178.52742004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 64]
[4 63]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[12 36]
[13 35]
[14 34]
[15 33]
[16 32]
[18 29]
[19 28]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[65 156]
[66 155]
[67 154]
[68 153]
[69 152]
[72 83]
[73 82]
[74 81]
[86 119]
[87 118]
[89 116]
[90 115]
[91 114]
[92 113]
[93 112]
[94 111]
[95 110]
[97 104]
[98 103]
[122 147]
[123 146]
[124 145]
[125 144]
[126 143]
[128 141]
[129 140]
[130 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
