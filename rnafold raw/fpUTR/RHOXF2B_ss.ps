%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGGAUACACUGUUGCUGAGUCUAGACACCAGAAGAACGUUGCAGGCGGCGACUCACAGUUCUAGCACUGCCUAGGAGAGCGUGGUGGCCCCAGCUCAGAAUCUGCAGAAGUGCACAGCUCCAUCCACACCACUCAGGGU\
) } def
/len { sequence length } bind def

/coor [
[164.07461548 401.60217285]
[165.56196594 395.02868652]
[161.94746399 380.47067261]
[158.33294678 365.91268921]
[154.71842957 351.35467529]
[151.10391235 336.79669189]
[147.48939514 322.23867798]
[132.11354065 316.59323120]
[123.01750946 302.77273560]
[123.93172455 286.08688354]
[134.69451904 273.08761597]
[130.75883484 258.61312866]
[126.82315063 244.13865662]
[122.88746643 229.66418457]
[118.05905151 223.99017334]
[119.02861786 214.82589722]
[115.41410065 200.26789856]
[102.58946228 196.40301514]
[93.28922272 186.61360168]
[90.03431702 173.39715576]
[93.78413391 160.19966125]
[103.65705109 150.51724243]
[100.36547089 135.88284302]
[97.07389832 121.24845123]
[92.50118256 115.36640930]
[93.87516785 106.25399017]
[91.39984131 104.32836914]
[89.59571075 101.43140411]
[88.83424377 97.81975555]
[89.38297272 93.88734436]
[91.35674286 90.12239075]
[89.70083618 75.21407318]
[88.04492188 60.30575180]
[86.38901520 45.39743423]
[73.21142578 42.35665894]
[61.64306259 35.39605713]
[52.81417084 25.21222496]
[47.58221054 12.81584358]
[46.44859695 -0.56860656]
[49.51068878 -13.62380409]
[56.45358276 -25.06923294]
[66.58245087 -33.78678131]
[78.89205933 -38.92996979]
[77.89721680 -53.89694214]
[69.26168060 -67.15357208]
[76.13783264 -80.36598206]
[75.14299011 -95.33295441]
[71.42623901 -103.76560974]
[74.29542542 -110.64135742]
[73.63191986 -125.62667847]
[72.96842194 -140.61199951]
[64.62826538 -154.05641174]
[71.79502869 -167.11347961]
[71.13152313 -182.09880066]
[67.60223389 -190.61161804]
[70.62281799 -197.42221069]
[70.29098511 -212.41853333]
[69.95915222 -227.41485596]
[55.79239273 -239.89971924]
[55.17752838 -258.45535278]
[68.03969574 -271.40045166]
[67.04484558 -286.36743164]
[66.05000305 -301.33438110]
[65.05516052 -316.30136108]
[64.06031799 -331.26834106]
[63.06547165 -346.23532104]
[51.00999069 -356.45495605]
[49.79513931 -372.21249390]
[60.14166260 -384.15924072]
[75.91115570 -385.20742798]
[87.74784851 -374.73516846]
[88.62925720 -358.95547485]
[78.03244019 -347.23016357]
[79.02729034 -332.26318359]
[80.02213287 -317.29620361]
[81.01697540 -302.32925415]
[82.01181793 -287.36227417]
[83.00666809 -272.39529419]
[93.09074402 -266.86474609]
[99.28617096 -257.03234863]
[99.93607330 -245.30847168]
[94.76037598 -234.63490295]
[84.95548248 -227.74668884]
[85.28731537 -212.75036621]
[85.61914825 -197.75402832]
[86.11684418 -182.76229858]
[86.78034210 -167.77697754]
[95.07304382 -155.40440369]
[87.95374298 -141.27549744]
[88.61724091 -126.29017639]
[89.28073883 -111.30485535]
[90.10996246 -96.32779694]
[91.10481262 -81.36082458]
[99.66918182 -69.17473602]
[92.86418915 -54.89178848]
[93.85903168 -39.92481232]
[109.69388580 -34.99974442]
[122.47199249 -24.37278366]
[130.23500061 -9.63628387]
[131.77926636 6.98486948]
[126.84246826 22.96914673]
[116.14761353 35.88090515]
[101.29733276 43.74152374]
[102.95323944 58.64984131]
[104.60915375 73.55815887]
[106.26506042 88.46647644]
[108.57879639 103.28695679]
[111.70829010 117.95687103]
[114.99987030 132.59126282]
[118.29144287 147.22566223]
[133.88455200 153.68119812]
[142.49714661 168.00169373]
[140.92176819 184.47172546]
[129.97209167 196.65338135]
[133.58660889 211.21138000]
[137.36193848 225.72850037]
[141.29762268 240.20297241]
[145.23330688 254.67744446]
[149.16899109 269.15191650]
[162.42416382 273.09201050]
[171.91142273 283.00296021]
[175.21630859 296.20700073]
[171.57495117 309.20959473]
[162.04739380 318.62417603]
[165.66191101 333.18215942]
[169.27642822 347.74017334]
[172.89094543 362.29815674]
[176.50544739 376.85617065]
[180.11996460 391.41415405]
[184.05564880 405.88864136]
[188.31057739 420.27249146]
[192.56550598 434.65637207]
[206.56973267 441.98147583]
[211.21278381 457.08834839]
[203.74002075 471.01434326]
[188.58489990 475.49740601]
[174.73869324 467.87783813]
[170.41609192 452.67617798]
[178.18164062 438.91128540]
[173.92671204 424.52743530]
[169.67178345 410.14355469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 129]
[3 128]
[4 127]
[5 126]
[6 125]
[7 124]
[11 119]
[12 118]
[13 117]
[14 116]
[16 115]
[17 114]
[22 110]
[23 109]
[24 108]
[26 107]
[31 106]
[32 105]
[33 104]
[34 103]
[43 96]
[44 95]
[46 93]
[47 92]
[49 91]
[50 90]
[51 89]
[53 87]
[54 86]
[56 85]
[57 84]
[58 83]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[130 141]
[131 140]
[132 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
