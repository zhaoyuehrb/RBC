%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAGGGAGGCGGGGCUCGUUCCACAGGGACACCACGACGGCUCGCGGCCCCCAGCCUCUACCCCGCUCCGGAUCCGGGAUCUGAGCGCCGGCCGCGGUGCCCAGGCACUCCCUUGGCGGGCCGG\
) } def
/len { sequence length } bind def

/coor [
[114.43022919 131.08091736]
[102.28164673 133.46337891]
[90.34932709 131.36354065]
[80.19712067 125.24900818]
[73.08617401 116.10050964]
[69.81905365 105.25928497]
[54.86100006 104.13832855]
[39.90294266 103.01737976]
[24.94488525 101.89642334]
[9.98682880 100.77547455]
[-4.97122860 99.65452576]
[-19.95258331 98.90683746]
[-34.94792175 98.53287506]
[-49.94325638 98.15891266]
[-64.93859863 97.78495789]
[-79.93393707 97.41099548]
[-94.92926788 97.03703308]
[-109.92810822 96.85003662]
[-124.92810822 96.85003662]
[-136.06123352 107.74459076]
[-151.27336121 107.53091431]
[-161.59104919 96.85003662]
[-176.59104919 96.85003662]
[-186.71208191 111.78350830]
[-203.59588623 117.68124390]
[-220.51647949 112.39064789]
[-230.85008240 98.17751312]
[-245.83143616 98.92520142]
[-259.30609131 108.27217865]
[-274.02069092 101.03251648]
[-274.83810425 84.65375519]
[-260.91748047 75.98496246]
[-246.57913208 83.94384766]
[-231.59777832 83.19615936]
[-226.47494507 72.05471802]
[-217.01759338 64.13516235]
[-205.00912476 61.01204300]
[-192.74906921 63.34766006]
[-182.61274719 70.75280762]
[-176.59104919 81.85003662]
[-161.59104919 81.85003662]
[-151.27336121 71.16916656]
[-136.06123352 70.95548248]
[-124.92810822 81.85003662]
[-109.92810822 81.85003662]
[-103.16522217 78.66899872]
[-94.55531311 82.04169464]
[-79.55997467 82.41565704]
[-64.56463623 82.78961945]
[-49.56929779 83.16357422]
[-34.57395935 83.53753662]
[-19.57862282 83.91149902]
[-15.49331284 81.24914551]
[-9.67148304 81.20143890]
[-3.85027719 84.69646454]
[11.10777950 85.81742096]
[26.06583595 86.93836975]
[41.02389526 88.05931854]
[55.98194885 89.18027496]
[70.94001007 90.30122375]
[76.85253143 78.41104889]
[87.52588654 69.80577850]
[101.23519135 66.33631134]
[115.56556702 68.98346710]
[127.83721161 77.61668396]
[137.18955994 65.88921356]
[146.54190063 54.16173935]
[155.89425659 42.43426514]
[165.24659729 30.70679474]
[168.19731140 21.94328880]
[174.98121643 18.80735588]
[184.62303162 7.31668901]
[194.26484680 -4.17397738]
[203.90666199 -15.66464424]
[213.54847717 -27.15531158]
[219.09791565 -43.17530060]
[236.02807617 -42.27751923]
[239.85211182 -25.76046371]
[225.03913879 -17.51349640]
[215.39732361 -6.02283001]
[205.75552368 5.46783638]
[196.11370850 16.95850372]
[186.47189331 28.44916916]
[176.97407532 40.05914307]
[167.62171936 51.78661346]
[158.26937866 63.51408768]
[148.91702271 75.24156189]
[139.56468201 86.96903229]
[141.61523438 101.82820892]
[153.79431152 110.58436584]
[165.97337341 119.34052277]
[178.15245056 128.09667969]
[190.33151245 136.85282898]
[202.51058960 145.60897827]
[214.79786682 154.21263123]
[227.19145203 162.66242981]
[240.18182373 170.16242981]
[253.69636536 176.67068481]
[267.21090698 183.17893982]
[280.72543335 189.68719482]
[294.23995972 196.19546509]
[310.54391479 194.43104553]
[320.00418091 207.82638550]
[312.88885498 222.60150146]
[296.51757812 223.55702209]
[287.73171997 209.70999146]
[274.21716309 203.20173645]
[260.70263672 196.69348145]
[247.18811035 190.18522644]
[233.67356873 183.67697144]
[236.88490295 198.32917786]
[228.98956299 211.08314514]
[214.44268799 214.74215698]
[201.45266724 207.24151611]
[197.34941101 192.81365967]
[204.44828796 179.59979248]
[218.74165344 175.05601501]
[206.34806824 166.60621643]
[198.96836853 165.42485046]
[193.75442505 157.78805542]
[181.57536316 149.03190613]
[169.39628601 140.27574158]
[157.21722412 131.51959229]
[145.03814697 122.76343536]
[132.85908508 114.00727844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 60]
[7 59]
[8 58]
[9 57]
[10 56]
[11 55]
[12 52]
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[18 45]
[19 44]
[22 41]
[23 40]
[27 34]
[28 33]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
[71 83]
[72 82]
[73 81]
[74 80]
[75 79]
[89 125]
[90 124]
[91 123]
[92 122]
[93 121]
[94 120]
[95 118]
[96 117]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
