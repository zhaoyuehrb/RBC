%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGAAGGGGGAAGGCUGAUAAUGGGAACAGAGAGGGGAAAGGCUUGAGCAGGAGAAGGGUCUCAGAGUUCCUCCUUCUGCUCCUUAUAGGC\
) } def
/len { sequence length } bind def

/coor [
[181.24592590 340.91409302]
[175.85481262 326.91638184]
[170.46369934 312.91867065]
[165.07257080 298.92095947]
[159.62098694 293.70587158]
[159.74378967 284.36437988]
[154.82341003 270.19433594]
[149.90304565 256.02429199]
[144.98266602 241.85426331]
[140.06230164 227.68423462]
[135.14192200 213.51419067]
[130.22154236 199.34416199]
[125.30117798 185.17411804]
[120.38080597 171.00408936]
[106.90645599 164.76087952]
[101.71463776 150.46054077]
[108.35444641 136.36973572]
[103.43407440 122.19969940]
[98.51370239 108.02966309]
[95.35821533 110.70647430]
[90.99805450 112.21378326]
[85.83176422 112.16782379]
[80.36325073 110.31128693]
[75.16384888 106.53961945]
[60.69680786 102.57669067]
[44.97882080 107.25395966]
[33.25682068 95.78544617]
[37.58940125 79.96897125]
[53.51957321 76.07517242]
[64.65973663 88.10964966]
[79.12677765 92.07257843]
[68.33068848 81.65891266]
[54.95682144 74.86629486]
[47.17103195 62.04515839]
[47.31146622 47.04581451]
[55.33594513 34.37270355]
[68.83464813 27.83167648]
[83.75379181 29.38706398]
[95.61301422 38.57176971]
[100.85089111 52.62753677]
[97.89344788 67.33519745]
[99.37521362 82.26183319]
[105.23105621 68.45207977]
[111.08689117 54.64233398]
[116.94273376 40.83258438]
[122.79856873 27.02283669]
[128.65440369 13.21308899]
[118.90495300 1.41450012]
[115.76667023 -13.56581211]
[119.96070099 -28.28548050]
[130.52330017 -39.36203384]
[145.02726746 -44.25016022]
[160.13967896 -41.82660675]
[172.38781738 -32.64828491]
[178.95715332 -18.82430649]
[178.33810425 -3.53132153]
[170.67292786 9.71645355]
[157.72300720 17.87477875]
[142.46415710 19.06892776]
[136.60832214 32.87867737]
[130.75248718 46.68842316]
[124.89664459 60.49817276]
[119.04080200 74.30792236]
[113.18495941 88.11766815]
[112.68373871 103.10929108]
[117.60411072 117.27932739]
[122.52448273 131.44937134]
[136.46817017 138.39280701]
[141.25627136 152.83332825]
[134.55084229 166.08370972]
[139.47120667 180.25375366]
[144.39158630 194.42378235]
[149.31195068 208.59382629]
[154.23233032 222.76385498]
[159.15270996 236.93389893]
[164.07307434 251.10392761]
[168.99345398 265.27395630]
[173.91381836 279.44400024]
[179.07028198 293.52984619]
[184.46141052 307.52755737]
[189.85252380 321.52526855]
[195.24363708 335.52297974]
[210.46060181 336.70910645]
[223.65164185 344.38757324]
[232.19769287 357.03384399]
[234.40190125 372.13696289]
[229.82664490 386.69818115]
[219.38034058 397.82641602]
[205.13708496 403.31210327]
[189.92492676 402.06604004]
[176.76420593 394.33569336]
[168.26803589 381.65588379]
[166.12330627 366.54418945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[4 79]
[6 78]
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[17 67]
[18 66]
[19 65]
[24 31]
[25 30]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
