%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCCCUGUGGGGCAGAUCAACACUCAAGGCAGGUGCAGAAUCAACAACCUGUGACAAAGCCAGCCAUCCCUGCCAGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[88.04972839 276.40142822]
[77.97288513 264.71978760]
[75.83390808 249.44143677]
[82.31533051 235.44161987]
[95.34895325 227.18765259]
[95.34895325 212.18765259]
[95.34895325 197.18765259]
[95.34895325 182.18765259]
[95.06509399 167.19033813]
[94.49747467 152.20108032]
[93.92984772 137.21182251]
[93.36222839 122.22256470]
[92.79460907 107.23330688]
[89.29351807 99.72934723]
[92.50000000 91.66837311]
[77.74665070 88.71363831]
[63.85771179 82.93913269]
[51.36627960 74.56851959]
[40.75139618 63.92507172]
[32.41970444 51.41917801]
[26.68986511 37.53252411]
[23.78036499 22.79954147]
[23.80118752 7.78683233]
[26.74966240 -6.92861032]
[32.51063156 -20.78158569]
[40.86095047 -33.24039459]
[51.47812653 -43.82723618]
[63.95278549 -52.13655472]
[77.80443573 -57.85054016]
[92.50000000 -60.75132370]
[92.50000000 -75.75132751]
[92.50000000 -90.75132751]
[92.50000000 -105.75132751]
[92.50000000 -120.75132751]
[92.50000000 -135.75132751]
[78.72612762 -142.32728577]
[69.17620850 -154.23365784]
[65.74636841 -169.10641479]
[69.11760712 -183.99256897]
[78.62057495 -195.93644714]
[92.36843872 -202.56660461]
[107.63156128 -202.56660461]
[121.37942505 -195.93644714]
[130.88238525 -183.99256897]
[134.25363159 -169.10641479]
[130.82379150 -154.23365784]
[121.27387238 -142.32728577]
[107.50000000 -135.75132751]
[107.50000000 -120.75132751]
[107.50000000 -105.75132751]
[107.50000000 -90.75132751]
[107.50000000 -75.75132751]
[107.50000000 -60.75132370]
[122.19556427 -57.85054016]
[136.04721069 -52.13655472]
[148.52186584 -43.82723618]
[159.13905334 -33.24039459]
[167.48936462 -20.78158569]
[173.25033569 -6.92861032]
[176.19880676 7.78683233]
[176.21963501 22.79954147]
[173.31013489 37.53252411]
[167.58029175 51.41917801]
[159.24861145 63.92507172]
[148.63372803 74.56851959]
[136.14228821 82.93913269]
[122.25334930 88.71363831]
[107.50000000 91.66837311]
[107.78385925 106.66568756]
[108.35148621 121.65494537]
[108.91910553 136.64419556]
[109.48672485 151.63345337]
[110.05435181 166.62271118]
[113.57867432 175.32861328]
[110.34895325 182.18765259]
[110.34895325 197.18765259]
[110.34895325 212.18765259]
[110.34895325 227.18765259]
[123.38258362 235.44161987]
[129.86401367 249.44143677]
[127.72502899 264.71978760]
[117.64817810 276.40142822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 78]
[6 77]
[7 76]
[8 75]
[9 73]
[10 72]
[11 71]
[12 70]
[13 69]
[15 68]
[30 53]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
