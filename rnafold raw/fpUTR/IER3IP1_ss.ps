%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGGCUUCCGUAGGAAGGCGCCGGCCGUGGAGGCGCCACGUCCCUUGCGGCGGCGGGAGAGAAAUCGCUUGGACUUCGGGGCGGCCUCGGACGGCC\
) } def
/len { sequence length } bind def

/coor [
[-13.23227406 264.71536255]
[-24.83235931 270.99240112]
[-37.72900772 269.40676880]
[-48.16424561 280.18200684]
[-52.20670319 295.47805786]
[-66.61892700 299.23797607]
[-77.05416870 310.01321411]
[-87.48940277 320.78845215]
[-97.92464447 331.56369019]
[-108.35987854 342.33892822]
[-115.03550720 357.92330933]
[-131.85882568 355.82275391]
[-134.49751282 339.07537842]
[-119.13512421 331.90368652]
[-108.69988251 321.12844849]
[-98.26464081 310.35321045]
[-87.82940674 299.57797241]
[-77.39416504 288.80273438]
[-74.09811401 274.27740479]
[-58.93948746 269.74676514]
[-48.50424957 258.97152710]
[-49.54256058 242.27116394]
[-38.02161407 229.67835999]
[-20.62476730 229.21258545]
[-10.54025364 218.10842896]
[-0.45574060 207.00425720]
[9.62877274 195.90008545]
[19.71328545 184.79591370]
[29.79780006 173.69174194]
[32.49056244 156.43217468]
[49.91905594 150.76516724]
[59.64248276 139.34349060]
[69.36590576 127.92179108]
[79.08933258 116.50010681]
[88.81275940 105.07841492]
[82.07464600 95.19161224]
[85.56124878 79.79704285]
[84.12090302 64.86635590]
[80.11700439 56.44251633]
[82.88155365 49.43520737]
[81.92050171 34.46602631]
[80.95944977 19.49684525]
[79.99839783 4.52766514]
[78.79753876 -10.42418957]
[77.35720062 -25.35487556]
[67.39652252 -38.38242340]
[73.94731903 -53.41635513]
[90.27069092 -54.99105072]
[99.57454681 -41.48659897]
[92.28787994 -26.79522133]
[93.72822571 -11.86453438]
[97.57570648 -5.38827133]
[94.96757507 3.56661177]
[95.92862701 18.53579330]
[96.88968658 33.50497437]
[97.85073853 48.47415543]
[99.05158997 63.42601013]
[100.49193573 78.35669708]
[100.27525330 63.35826111]
[108.52343750 50.82959747]
[122.38614655 45.10026169]
[137.07281494 48.15016174]
[147.50811768 58.92532730]
[150.08592224 73.70216370]
[143.91540527 87.37420654]
[131.12892151 95.21676636]
[116.14479065 94.51955414]
[131.02163696 96.43771362]
[145.89849854 98.35587311]
[160.77534485 100.27402496]
[175.65219116 102.19218445]
[190.32849121 96.28313446]
[201.96185303 105.58444214]
[216.87922668 98.77239990]
[230.07853699 108.50431824]
[227.98146057 124.76882935]
[212.74528503 130.83439636]
[200.04368591 120.46128845]
[186.43148804 126.50753784]
[173.73403931 117.06903839]
[158.85719299 115.15087891]
[143.98033142 113.23271942]
[129.10348511 111.31455994]
[114.22663879 109.39640808]
[100.23445129 114.80184174]
[90.51102448 126.22353363]
[80.78759766 137.64521790]
[71.06417084 149.06690979]
[61.34074402 160.48860168]
[61.57032776 173.50706482]
[53.07980347 182.83993530]
[40.90196991 183.77626038]
[30.81745529 194.88043213]
[20.73294258 205.98460388]
[10.64842892 217.08876038]
[0.56391603 228.19293213]
[-9.52059746 239.29710388]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 21]
[4 20]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[24 97]
[25 96]
[26 95]
[27 94]
[28 93]
[29 92]
[31 89]
[32 88]
[33 87]
[34 86]
[35 85]
[37 58]
[38 57]
[40 56]
[41 55]
[42 54]
[43 53]
[44 51]
[45 50]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
