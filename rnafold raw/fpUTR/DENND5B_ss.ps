%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGACCCCGCCUGGCGCGCCGGCCCCUUCGCUUGCAGCCGCACUCGGAGGCGGCCGGCUGAAGUGCAGUGGCAUGAUCUCAGAUCACUACAACCUCCACCUCUUGGGUUCCAGUAAUUCUCCUGCCUGGCCUUCCUGAGUAACUGGGAUU\
) } def
/len { sequence length } bind def

/coor [
[80.71364594 120.58434296]
[74.44305420 107.93429565]
[75.27495575 94.57736206]
[62.23321152 87.16703796]
[49.19146729 79.75670624]
[35.03584290 89.55243683]
[18.04697990 91.84341431]
[1.93782127 86.19476318]
[-9.80080032 73.89965820]
[-14.65658760 57.68394852]
[-29.49987221 55.52133560]
[-44.34315491 53.35871887]
[-58.13843536 64.06632233]
[-75.08095551 61.56454849]
[-84.80229950 47.87600708]
[-99.68711090 46.02061844]
[-114.57192230 44.16522980]
[-129.45672607 42.30983734]
[-144.40550232 41.07114792]
[-159.39268494 40.45127487]
[-174.37986755 39.83139801]
[-189.36705017 39.21152496]
[-204.35424805 38.59165192]
[-219.34143066 37.97177505]
[-234.32861328 37.35190201]
[-249.32141113 36.88693619]
[-264.31820679 36.57693481]
[-279.31500244 36.26692963]
[-294.31179810 35.95692825]
[-309.30859375 35.64692307]
[-324.30538940 35.33691788]
[-335.66128540 45.99905777]
[-350.86575317 45.47103500]
[-360.96051025 34.57921219]
[-375.95730591 34.26920700]
[-390.95410156 33.95920181]
[-405.05395508 42.33329391]
[-419.22174072 34.07459641]
[-418.88284302 17.67895126]
[-404.38586426 10.01279259]
[-390.64407349 18.96240616]
[-375.64727783 19.27241135]
[-360.65048218 19.58241463]
[-350.11428833 9.11705780]
[-334.90097046 9.21780968]
[-323.99539185 20.34012413]
[-308.99859619 20.65012741]
[-294.00180054 20.96013069]
[-279.00500488 21.27013397]
[-264.00820923 21.58013725]
[-249.01139832 21.89014053]
[-242.21606445 18.86486626]
[-233.70874023 22.36471558]
[-218.72155762 22.98458862]
[-203.73435974 23.60446358]
[-188.74717712 24.22433853]
[-173.75999451 24.84421349]
[-158.77281189 25.46408844]
[-143.78561401 26.08396339]
[-141.61183167 24.22016335]
[-138.54579163 23.13344574]
[-134.89035034 23.17686653]
[-131.07344055 24.58339310]
[-127.60134125 27.42502975]
[-112.71652985 29.28042030]
[-97.83171844 31.13580894]
[-82.94691467 32.99119949]
[-73.95423889 23.71185303]
[-61.06303024 21.28944397]
[-48.96074295 26.83372307]
[-42.18053818 38.51543427]
[-27.33725548 40.67805099]
[-12.49397087 42.84066391]
[0.72896272 25.70775032]
[21.36616898 19.18943596]
[24.44439888 4.50868273]
[27.52263069 -10.17206955]
[30.60086060 -24.85282326]
[33.67908859 -39.53357697]
[31.01186943 -56.27640152]
[46.36201859 -63.47426224]
[57.52793121 -50.71656799]
[48.35984421 -36.45534515]
[45.28161240 -21.77459335]
[42.20338440 -7.09383965]
[39.12515259 7.58691263]
[36.04692078 22.26766586]
[41.27289963 25.00574875]
[45.99604797 28.56443214]
[50.08829498 32.85287476]
[53.43775177 37.76037598]
[55.95179367 43.15923691]
[57.55959320 48.90806580]
[58.21412659 54.85550690]
[57.89352798 60.84420395]
[56.60179520 66.71496582]
[69.64353943 74.12528992]
[82.68527985 81.53562164]
[103.32906342 71.26062775]
[127.10390472 81.97486115]
[140.71304321 75.66682434]
[149.70237732 61.95100021]
[166.05778503 63.14809799]
[172.95420837 78.02664948]
[163.29721069 91.28087616]
[147.02108765 89.27596283]
[133.41194153 95.58399963]
[132.01884460 110.51917267]
[144.22657776 119.23532104]
[156.43429565 127.95147705]
[168.64202881 136.66763306]
[180.84976196 145.38377380]
[193.05749512 154.09992981]
[205.26522827 162.81608582]
[217.47296143 171.53224182]
[233.20018005 173.25421143]
[239.06228638 186.94671631]
[251.27001953 195.66287231]
[263.47775269 204.37902832]
[275.68548584 213.09516907]
[287.99639893 204.27929688]
[302.50350952 199.94081116]
[317.63320923 200.55035400]
[331.74429321 206.04179382]
[343.30612183 215.81945801]
[351.06454468 228.82273865]
[354.17800903 243.64114380]
[352.30877686 258.66726685]
[345.65960693 272.27120972]
[334.95175171 282.97732544]
[321.34671021 289.62423706]
[306.32028198 291.49099731]
[291.50238037 288.37509155]
[278.50036621 280.61453247]
[268.72460938 269.05108643]
[263.23550415 254.93908691]
[262.62844849 239.80931091]
[266.96932983 225.30290222]
[254.76159668 216.58676147]
[242.55386353 207.87060547]
[230.34613037 199.15444946]
[215.49209595 198.05592346]
[208.75680542 183.73997498]
[196.54907227 175.02381897]
[184.34133911 166.30766296]
[172.13360596 157.59150696]
[159.92588806 148.87536621]
[147.71815491 140.15921021]
[135.51042175 131.44305420]
[123.30268860 122.72690582]
[108.62491608 129.88307190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 98]
[4 97]
[5 96]
[10 73]
[11 72]
[12 71]
[15 67]
[16 66]
[17 65]
[18 64]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[24 54]
[25 53]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[34 43]
[35 42]
[36 41]
[75 87]
[76 86]
[77 85]
[78 84]
[79 83]
[100 107]
[101 106]
[108 150]
[109 149]
[110 148]
[111 147]
[112 146]
[113 145]
[114 144]
[115 143]
[117 141]
[118 140]
[119 139]
[120 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
