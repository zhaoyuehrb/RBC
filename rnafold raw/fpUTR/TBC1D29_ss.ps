%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCAGCUGAUGGCUCCACAUCUUGGGGGAAGGCUCUGAUUUCAUGACGGGCUGGGGGCUUCUCAGGAUUCCACAGCCCAAAUGGCGGGACAGUUCAGGGGCUCCAAGACCAUCAGGAGCAUGUGGUACCCACAUCACAACCCAAGACC\
) } def
/len { sequence length } bind def

/coor [
[63.30441666 256.48110962]
[56.12696457 267.50732422]
[45.64287949 275.40255737]
[33.12433243 279.23614502]
[20.08106041 278.56866455]
[13.98001099 292.27185059]
[7.87896156 305.97503662]
[1.77791190 319.67822266]
[0.85916245 336.60723877]
[-15.66261482 340.41082764]
[-23.89123154 325.58767700]
[-11.92527008 313.57717896]
[-5.82422018 299.87399292]
[0.27682927 286.17080688]
[6.37787914 272.46762085]
[-4.89289045 259.95590210]
[-9.60783863 243.73246765]
[-6.78037453 227.02018738]
[3.07275271 213.16085815]
[18.02510452 204.94697571]
[35.11704636 204.05905151]
[40.63891602 190.11241150]
[46.16078186 176.16575623]
[51.68265152 162.21911621]
[57.20452118 148.27246094]
[62.72638702 134.32582092]
[68.24825287 120.37917328]
[67.99479675 107.62384796]
[72.07621002 97.11611176]
[78.96678162 90.10636902]
[86.86203766 87.09549713]
[93.99722290 87.81076050]
[98.94415283 91.30509186]
[99.88600922 76.33469391]
[100.82787323 61.36429214]
[101.76972961 46.39389420]
[102.71158600 31.42349243]
[91.19472504 41.03400040]
[76.19533539 41.16936874]
[64.50688934 31.76828766]
[61.42328644 17.08866310]
[68.34113312 3.77914095]
[82.12722778 -2.13217282]
[96.53761292 2.03205347]
[105.04550934 14.38545704]
[108.16418457 -0.28675729]
[111.28285980 -14.95897102]
[106.58385468 -30.06625175]
[116.79822540 -40.90672684]
[119.91690063 -55.57894135]
[115.21789551 -70.68621826]
[125.43226624 -81.52669525]
[128.55093384 -96.19891357]
[123.85193634 -111.30619049]
[134.06629944 -122.14666748]
[137.18498230 -136.81887817]
[140.30364990 -151.49108887]
[143.42233276 -166.16331482]
[146.54100037 -180.83552551]
[149.65968323 -195.50773621]
[152.77835083 -210.17994690]
[155.89703369 -224.85217285]
[159.01570129 -239.52438354]
[157.31166077 -246.02336121]
[158.94625854 -251.55342102]
[162.58444214 -254.73973083]
[166.31478882 -269.26849365]
[170.04513550 -283.79724121]
[173.77548218 -298.32598877]
[177.20074463 -312.92965698]
[180.31942749 -327.60186768]
[183.43809509 -342.27407837]
[182.15875244 -351.38693237]
[186.77877808 -357.21942139]
[185.69055176 -366.35705566]
[190.43171692 -372.09152222]
[194.16206360 -386.62026978]
[197.89241028 -401.14901733]
[190.99633789 -415.63430786]
[198.15101624 -429.99365234]
[213.86798096 -433.21176147]
[226.09054565 -422.81997681]
[225.44258118 -406.79000854]
[212.42115784 -397.41867065]
[208.69081116 -382.88992310]
[204.96046448 -368.36117554]
[201.38246155 -353.79415894]
[198.11030579 -339.15542603]
[194.99163818 -324.48321533]
[191.87295532 -309.81097412]
[193.71498108 -305.33929443]
[192.72024536 -299.65917969]
[188.30422974 -294.59564209]
[184.57388306 -280.06689453]
[180.84353638 -265.53814697]
[177.11318970 -251.00938416]
[173.68792725 -236.40570068]
[170.56924438 -221.73348999]
[167.45057678 -207.06127930]
[164.33189392 -192.38906860]
[161.21322632 -177.71684265]
[158.09454346 -163.04463196]
[154.97587585 -148.37242126]
[151.85719299 -133.70021057]
[148.73852539 -119.02799225]
[153.66059875 -104.97016907]
[143.22315979 -93.08023834]
[140.10447693 -78.40802002]
[145.02655029 -64.35019684]
[134.58911133 -52.46026611]
[131.47044373 -37.78805161]
[136.39251709 -23.73022652]
[125.95507050 -11.84029579]
[122.83639526 2.83191800]
[119.71772003 17.50413132]
[117.68198395 32.36534882]
[116.74012756 47.33575058]
[115.79827118 62.30615234]
[114.85641479 77.27655029]
[113.91455841 92.24695587]
[120.15876770 105.88549805]
[132.10671997 114.95448303]
[144.05467224 124.02346802]
[156.00260925 133.09245300]
[167.95056152 142.16143799]
[179.89851379 151.23042297]
[196.17047119 155.99066162]
[196.10078430 172.94447327]
[179.79025269 177.57080078]
[170.82952881 163.17837524]
[158.88157654 154.10939026]
[146.93362427 145.04040527]
[134.98567200 135.97142029]
[123.03772736 126.90242767]
[111.08978271 117.83344269]
[103.86605835 119.85034180]
[112.16677856 132.34426880]
[102.84926605 144.09944153]
[88.79023743 138.87033081]
[89.41862488 123.88414001]
[82.19490051 125.90103912]
[76.67303467 139.84768677]
[71.15116882 153.79432678]
[65.62929535 167.74098206]
[60.10742950 181.68762207]
[54.58556366 195.63427734]
[49.06369400 209.58091736]
[58.74169540 218.68139648]
[64.71817780 230.50991821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 15]
[6 14]
[7 13]
[8 12]
[21 147]
[22 146]
[23 145]
[24 144]
[25 143]
[26 142]
[27 141]
[33 120]
[34 119]
[35 118]
[36 117]
[37 116]
[45 115]
[46 114]
[47 113]
[49 111]
[50 110]
[52 108]
[53 107]
[55 105]
[56 104]
[57 103]
[58 102]
[59 101]
[60 100]
[61 99]
[62 98]
[63 97]
[66 96]
[67 95]
[68 94]
[69 93]
[70 90]
[71 89]
[72 88]
[74 87]
[76 86]
[77 85]
[78 84]
[121 135]
[122 134]
[123 133]
[124 132]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
