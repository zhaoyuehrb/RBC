%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGUCCGCGAAACCUAGUGCUGAAGUAGGCGCGGACGUGCCCGGUGCCUGGCGCGUGGUAGCAGGCGCCCGGUGCCCCGGCCGGCGAAGACC\
) } def
/len { sequence length } bind def

/coor [
[89.68492889 152.86677551]
[100.83583832 142.20559692]
[97.87908173 127.49989319]
[94.92232513 112.79418945]
[82.64295959 104.17926025]
[67.80873871 106.40321350]
[52.97452164 108.62716675]
[38.14030075 110.85112762]
[23.30608368 113.07508087]
[8.47186661 115.29903412]
[-6.36235189 117.52298737]
[-10.74808121 121.04654694]
[-15.57144928 122.26482391]
[-19.82542610 121.42458344]
[-22.76879311 119.15600586]
[-37.75034332 119.89975739]
[-52.73189163 120.64351654]
[-67.71343994 121.38727570]
[-81.11299896 129.79931641]
[-94.20825958 122.70260620]
[-105.99852753 133.58236694]
[-121.83326721 131.00544739]
[-129.56542969 116.94866943]
[-123.26354980 102.19515991]
[-107.76190186 98.06256866]
[-94.95201111 107.72105408]
[-82.62403870 99.36220551]
[-68.45719910 106.40572357]
[-53.47565079 105.66196442]
[-38.49409866 104.91821289]
[-23.51255035 104.17445374]
[-8.58630657 102.68877411]
[6.24791145 100.46481323]
[21.08213043 98.24085999]
[35.91634750 96.01690674]
[50.75056458 93.79295349]
[65.58478546 91.56900024]
[80.41899872 89.34503937]
[105.94871521 83.83114624]
[111.05496979 76.01251221]
[118.48526001 74.72281647]
[130.76463318 66.10788727]
[143.04400635 57.49295807]
[150.30659485 40.67240143]
[167.73657227 39.59014511]
[179.72438049 30.57392693]
[191.71220398 21.55771065]
[203.70002747 12.54149246]
[215.68785095 3.52527547]
[227.67565918 -5.49094152]
[234.05384827 -19.96952248]
[248.87608337 -21.43608856]
[260.86389160 -30.45230484]
[272.85171509 -39.46852112]
[284.83953857 -48.48474121]
[296.82736206 -57.50095749]
[303.20553589 -71.97953796]
[318.02777100 -73.44610596]
[330.01559448 -82.46231842]
[335.93572998 -97.75558472]
[352.17953491 -100.00750732]
[362.03674316 -86.90150452]
[355.36712646 -71.91990662]
[339.03179932 -70.47450256]
[327.04400635 -61.45828247]
[321.52325439 -47.62460327]
[305.84356689 -45.51313782]
[293.85574341 -36.49692154]
[281.86795044 -27.48070335]
[269.88012695 -18.46448517]
[257.89230347 -9.44826794]
[252.37156677 4.38541222]
[236.69187927 6.49687815]
[224.70407104 15.51309586]
[212.71624756 24.52931213]
[200.72842407 33.54552841]
[188.74060059 42.56174850]
[176.75277710 51.57796478]
[174.69302368 63.62379456]
[164.60646057 71.21528625]
[151.65893555 69.77233124]
[139.37956238 78.38726044]
[127.10018921 87.00218964]
[114.96493530 95.81896973]
[109.62802887 109.83743286]
[112.58478546 124.54313660]
[115.54154205 139.24884033]
[129.94644165 144.77171326]
[139.06030273 157.21925354]
[139.97491455 172.61947632]
[132.39842224 186.05824280]
[118.74847412 193.24728394]
[103.38069916 191.89259338]
[91.19891357 182.42646790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 87]
[3 86]
[4 85]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[15 31]
[16 30]
[17 29]
[18 28]
[20 26]
[39 84]
[41 83]
[42 82]
[43 81]
[45 78]
[46 77]
[47 76]
[48 75]
[49 74]
[50 73]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
