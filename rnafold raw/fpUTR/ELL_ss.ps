%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGGCGGGGCGUGGCCGGCGUGGCGGCGCUGGAGCCGGGAAGGGGGCGCGGGGGAGAGAUGGUCGCAAG\
) } def
/len { sequence length } bind def

/coor [
[14.27121162 189.16473389]
[2.89662457 198.94322205]
[-8.47796249 208.72169495]
[-13.89877510 223.58526611]
[-28.59387779 226.01490784]
[-34.01469040 240.87847900]
[-48.70979309 243.30813599]
[-60.08438110 253.08660889]
[-68.15368652 267.99710083]
[-84.71527100 264.37078857]
[-85.81537628 247.45256042]
[-69.86286163 241.71202087]
[-58.48827744 231.93354797]
[-53.88105011 217.76940918]
[-38.37236404 214.64033508]
[-33.76513672 200.47619629]
[-18.25644684 197.34710693]
[-6.88186026 187.56863403]
[4.49272680 177.79014587]
[2.57973576 161.62971497]
[10.66064262 147.31573486]
[25.78485489 140.46919250]
[42.19399643 143.90969849]
[53.13735962 133.65090942]
[64.08071899 123.39211273]
[75.02408600 113.13332367]
[85.96744537 102.87452698]
[90.20357513 89.54985809]
[103.77375793 86.18210602]
[113.55224609 74.80751801]
[114.99788666 59.05250168]
[128.58538818 52.95095062]
[137.08592224 40.59210587]
[138.53155518 24.83708382]
[152.11906433 18.73553276]
[153.56471252 2.98051167]
[167.15222168 -3.12103891]
[175.65274048 -15.47988415]
[184.15327454 -27.83872986]
[178.85205078 -42.42216873]
[183.16754150 -57.32706833]
[195.44036865 -66.82219696]
[210.95137024 -67.25647736]
[223.73623657 -58.46292114]
[228.87895203 -43.82283401]
[224.40202332 -28.96562386]
[212.02691650 -19.60419464]
[196.51211548 -19.33820343]
[188.01159668 -6.97935772]
[179.51106262 5.37948751]
[178.67343140 20.25052071]
[164.47792053 27.23605919]
[163.64028931 42.10709381]
[149.44476318 49.09263229]
[140.94424438 61.45147705]
[140.10661316 76.32250977]
[125.91108704 83.30804443]
[126.62584686 85.84540558]
[126.35022736 88.83220673]
[124.90876007 91.88742065]
[122.26769257 94.57431793]
[118.54994202 96.45121002]
[114.03255463 97.12547302]
[109.79642487 110.45014191]
[96.22624207 113.81789398]
[85.28287506 124.07668304]
[74.33951569 134.33547974]
[63.39614868 144.59426880]
[52.45278549 154.85305786]
[55.18486404 168.53970337]
[50.75545502 181.65957642]
[40.45042038 190.74487305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[5 15]
[7 13]
[8 12]
[23 69]
[24 68]
[25 67]
[26 66]
[27 65]
[29 63]
[30 57]
[32 55]
[33 54]
[35 52]
[37 50]
[38 49]
[39 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
