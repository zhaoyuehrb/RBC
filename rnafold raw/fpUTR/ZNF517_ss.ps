%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAACCGGAGCCUGAGAGCCGGGCGCCGUGCGCUCCUCCCCGCGCUGUCUCGGCGGCCCAGGAAUUCACUGUCUGUAGCAUCUGCUCCUCCACAGAGGGACCCUGGA\
) } def
/len { sequence length } bind def

/coor [
[81.57883453 118.45337677]
[68.37581635 125.57238770]
[55.17279434 132.69139099]
[45.56128693 150.29284668]
[26.34393692 149.27970886]
[13.69306469 157.33920288]
[1.16074789 165.58183289]
[-11.37156963 173.82446289]
[-18.64972878 187.87220764]
[-33.53492737 188.40153503]
[-46.06724167 196.64416504]
[-58.59955978 204.88681030]
[-71.13187408 213.12944031]
[-83.66419220 221.37207031]
[-88.30348969 236.72969055]
[-103.25593567 242.54380798]
[-117.05129242 234.35432434]
[-119.10694885 218.44351196]
[-107.84597778 207.01678467]
[-91.90682983 208.83975220]
[-79.37451172 200.59712219]
[-66.84219360 192.35449219]
[-54.30987930 184.11184692]
[-41.77756119 175.86921692]
[-35.39579391 162.41104126]
[-19.61420441 161.29214478]
[-7.08188677 153.04951477]
[5.45043039 144.80688477]
[9.36989689 138.40290833]
[18.46928787 136.51295471]
[19.97534561 126.21495819]
[27.11240387 118.33843994]
[37.64246368 115.72052002]
[48.05379105 119.48837280]
[61.25680923 112.36936188]
[74.45983124 105.25035858]
[74.01004791 97.90508270]
[75.63051605 90.72667694]
[79.19215393 84.28694153]
[84.41127014 79.09885406]
[79.28096771 65.00346375]
[74.15066528 50.90807343]
[69.02036285 36.81268311]
[53.94973373 33.51425171]
[43.07097244 22.57550812]
[39.85544968 7.48697042]
[45.32923126 -6.93666553]
[57.74565125 -16.09287071]
[73.14267731 -17.05993080]
[86.60717010 -9.52926350]
[93.84265900 4.09612417]
[92.54033661 19.46842003]
[83.11575317 31.68238068]
[88.24605560 45.77777100]
[93.37635803 59.87316132]
[98.50666046 73.96855164]
[115.57046509 79.08524323]
[125.36614990 93.96469879]
[140.34077454 94.83687592]
[155.31539917 95.70904541]
[170.29002380 96.58121490]
[185.26464844 97.45339203]
[190.52236938 88.88690948]
[198.54699707 82.93216705]
[208.15612793 80.41217804]
[217.95399475 81.64782715]
[226.53414917 86.41773987]
[232.68136597 93.99636841]
[235.54371643 103.26408386]
[250.31582642 105.86880493]
[265.24990845 100.64542389]
[276.44027710 110.47525024]
[291.21237183 113.07997131]
[305.98449707 115.68469238]
[320.75662231 118.28941345]
[335.52871704 120.89413452]
[350.45104980 122.41866302]
[365.44470215 122.85493469]
[380.43835449 123.29120636]
[394.60824585 115.03614044]
[408.70599365 123.41384125]
[408.22903442 139.80604553]
[393.66802979 147.34986877]
[380.00210571 138.28486633]
[365.00845337 137.84858704]
[350.01480103 137.41232300]
[357.49169922 150.41601562]
[352.26455688 164.47578430]
[338.10873413 169.43688965]
[325.24832153 161.71614075]
[322.97183228 146.88989258]
[332.92401123 135.66625977]
[318.15188599 133.06153870]
[303.37976074 130.45680237]
[288.60766602 127.85208893]
[273.83554077 125.24736023]
[259.95806885 130.65704346]
[247.71110535 120.64092255]
[232.93899536 118.03620148]
[217.50442505 131.22421265]
[197.03462219 129.03515625]
[184.39247131 112.42800903]
[169.41784668 111.55583954]
[154.44322205 110.68367004]
[139.46859741 109.81149292]
[124.49398041 108.93932343]
[113.68190765 122.19621277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[5 30]
[6 28]
[7 27]
[8 26]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[40 56]
[41 55]
[42 54]
[43 53]
[58 106]
[59 105]
[60 104]
[61 103]
[62 102]
[69 99]
[70 98]
[72 96]
[73 95]
[74 94]
[75 93]
[76 92]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
