%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUAAAAGGGUGGGAGCGUCCGGGGGCCCAUCUCUCUCGGGUGGAGUCUUCUGACAGCUGGUGCGCCUGCCCGGGAACAUCCUCCUGGACUCAAUC\
) } def
/len { sequence length } bind def

/coor [
[122.64031219 283.50897217]
[116.82051849 269.68399048]
[115.67612457 254.72772217]
[119.32481384 240.17825317]
[127.39134979 227.53186035]
[139.04617310 218.08912659]
[153.09068298 212.82115173]
[168.08053589 212.26966858]
[182.47358704 216.49113464]
[173.50193787 204.46992493]
[164.53027344 192.44873047]
[155.55862427 180.42752075]
[146.58695984 168.40631104]
[128.47340393 167.00718689]
[116.78832245 152.68823242]
[119.12767792 134.03845215]
[109.40425110 122.61676788]
[99.68083191 111.19507599]
[89.77558899 99.93070221]
[79.69107056 88.82653046]
[69.60655975 77.72235870]
[54.60093689 72.70819092]
[51.77213669 58.08467865]
[41.68762207 46.98051071]
[31.60310745 35.87633896]
[21.51859474 24.77216911]
[11.43408203 13.66799927]
[1.34956825 2.56382895]
[-8.91162586 -8.37728119]
[-19.34686470 -19.15252113]
[-29.78210258 -29.92776108]
[-40.21733856 -40.70300293]
[-50.65258026 -51.47824097]
[-61.08781815 -62.25348282]
[-77.04120636 -63.94726944]
[-85.54187012 -77.55308533]
[-80.06883240 -92.63371277]
[-64.82052612 -97.62059021]
[-51.49416351 -88.68820190]
[-50.31257629 -72.68872070]
[-39.87733841 -61.91348267]
[-29.44210052 -51.13824081]
[-19.00686264 -40.36299896]
[-8.57162380 -29.58776093]
[1.86361456 -18.81251907]
[8.90958023 -16.14803886]
[12.45373821 -7.52068424]
[22.53825188 3.58348560]
[32.62276459 14.68765545]
[42.70727921 25.79182625]
[52.79179001 36.89599609]
[62.87630463 48.00016403]
[77.16061401 52.22009277]
[80.71073151 67.63784790]
[90.79524231 78.74201965]
[100.87975311 89.84619141]
[108.34159088 93.30546570]
[111.10251617 101.47164917]
[120.82594299 112.89334106]
[130.54936218 124.31503296]
[142.58236694 122.93914032]
[153.63859558 127.57894897]
[160.93714905 136.93899536]
[162.70533752 148.55334473]
[158.60816956 159.43466187]
[167.57981873 171.45585632]
[176.55148315 183.47706604]
[185.52313232 195.49827576]
[194.49479675 207.51947021]
[200.16888428 209.20649719]
[204.28189087 212.76914978]
[206.34594727 217.28526306]
[219.86048889 223.79351807]
[233.37501526 230.30177307]
[246.88954163 236.81004333]
[260.40408325 243.31829834]
[273.91860962 249.82655334]
[288.75137329 244.37080383]
[303.06222534 251.07710266]
[308.36083984 265.96670532]
[301.50363159 280.20587158]
[286.55883789 285.34677124]
[272.39294434 278.33938599]
[267.41036987 263.34109497]
[253.89582825 256.83282471]
[240.38128662 250.32456970]
[226.86676025 243.81631470]
[213.35221863 237.30805969]
[199.83769226 230.79980469]
[206.73286438 244.12107849]
[209.05679321 258.93997192]
[206.57048035 273.73248291]
[199.52961731 286.97732544]
[188.65829468 297.31243896]
[175.07450867 303.67489624]
[160.17524719 305.41043091]
[145.49275208 302.34051514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 69]
[10 68]
[11 67]
[12 66]
[13 65]
[16 60]
[17 59]
[18 58]
[19 56]
[20 55]
[21 54]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
