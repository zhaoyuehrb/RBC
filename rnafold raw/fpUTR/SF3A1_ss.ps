%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCCCGGAAGUGCGCCAGUCGUACCUUCGCGGCCGCAACUCGCUCGGCCGCCGCCAUCUUGCGAGCUCGUCGUACUGACCGAGCGGGGAGGCUGUCUUGAGGCGGCACCGCUCACCGACACCGAGGCGGACUGGCAGCCCUGAGCGUCGCAGUC\
) } def
/len { sequence length } bind def

/coor [
[-84.63141632 345.77206421]
[-94.57825470 356.99972534]
[-104.52510071 368.22738647]
[-114.47193909 379.45504761]
[-117.83168793 394.91540527]
[-132.06288147 399.31112671]
[-142.00971985 410.53878784]
[-151.95657349 421.76644897]
[-161.90341187 432.99411011]
[-165.26315308 448.45446777]
[-179.49435425 452.85018921]
[-189.44119263 464.07785034]
[-199.38803101 475.30551147]
[-209.33486938 486.53317261]
[-219.28170776 497.76083374]
[-219.75221252 513.79699707]
[-232.66909790 523.31188965]
[-248.12365723 519.00653076]
[-254.26046753 504.18359375]
[-246.37190247 490.21398926]
[-230.50936890 487.81399536]
[-220.56253052 476.58633423]
[-210.61569214 465.35867310]
[-200.66885376 454.13101196]
[-190.72201538 442.90335083]
[-188.07373047 428.24606323]
[-173.13107300 423.04727173]
[-163.18423462 411.81961060]
[-153.23738098 400.59194946]
[-143.29054260 389.36428833]
[-140.64225769 374.70700073]
[-125.69960022 369.50820923]
[-115.75276184 358.28054810]
[-105.80591583 347.05288696]
[-95.85907745 335.82522583]
[-86.48986816 324.11120605]
[-77.72203827 311.94055176]
[-81.96575928 301.27813721]
[-80.49427795 289.77578735]
[-73.56084442 280.33117676]
[-62.80932236 275.38049316]
[-50.88565826 276.27032471]
[-41.63487625 264.46255493]
[-32.38409042 252.65481567]
[-23.13330841 240.84706116]
[-13.88252640 229.03930664]
[-4.63174295 217.23156738]
[4.61904001 205.42381287]
[3.47938275 193.34498596]
[11.13930035 183.42390442]
[23.90591621 181.33959961]
[33.39259720 169.72052002]
[35.44855118 154.96850586]
[50.16975784 149.17224121]
[59.65643692 137.55316162]
[69.14311981 125.93408966]
[78.62979889 114.31501770]
[72.28566742 90.27045441]
[90.07256317 68.50403595]
[88.26451874 53.61340332]
[86.45646667 38.72277069]
[77.11215210 25.95584297]
[83.25893402 12.38873959]
[73.58271027 3.80378580]
[72.41110229 -8.67537880]
[79.83004761 -18.27516937]
[78.32221222 -33.19919205]
[76.81438446 -48.12321472]
[75.30655670 -63.04723740]
[73.79872131 -77.97126007]
[72.14070129 -92.87934113]
[70.33264923 -107.76997375]
[58.64141083 -118.75608063]
[60.08488464 -134.73406982]
[73.55576324 -143.44699097]
[88.72033691 -138.21102905]
[93.94564819 -123.04279327]
[85.22328186 -109.57802582]
[87.03133392 -94.68739319]
[90.98226166 -88.39026642]
[88.72274780 -79.47908783]
[90.23057556 -64.55506897]
[91.73841095 -49.63104630]
[93.24623871 -34.70702362]
[94.75406647 -19.78299904]
[105.76986694 -6.15356874]
[98.14956665 10.58068943]
[107.36455536 22.28253746]
[101.34709930 36.91471863]
[103.15515137 51.80535126]
[104.96319580 66.69598389]
[118.93417358 72.15600586]
[130.35986328 62.43727875]
[141.78553772 52.71854782]
[153.21122742 42.99981689]
[164.63691711 33.28108597]
[176.06259155 23.56235504]
[181.05517578 7.94165945]
[197.13473511 4.71988535]
[207.75999451 17.21131706]
[202.00061035 32.56584167]
[185.78132629 34.98804092]
[174.35563660 44.70677185]
[162.92996216 54.42550278]
[151.50427246 64.14423370]
[140.07858276 73.86296082]
[128.65290833 83.58169556]
[127.51279449 89.71434784]
[125.23326111 95.01123047]
[140.15728760 96.51905823]
[155.08129883 98.02688599]
[170.00532532 99.53472137]
[184.92935181 101.04254913]
[193.00022888 93.64353180]
[203.59849548 91.97451782]
[213.15205383 96.35169983]
[218.57611084 105.09403992]
[233.42730713 107.20157623]
[248.43026733 100.58014679]
[261.50451660 110.47943878]
[259.20040894 126.71591187]
[243.88818359 132.58686829]
[231.31977844 122.05278015]
[216.46856689 119.94524384]
[199.16380310 128.49748230]
[183.42152405 115.96656799]
[168.49749756 114.45874023]
[153.57347107 112.95091248]
[138.64944458 111.44308472]
[123.72542572 109.93524933]
[115.63200378 120.42658997]
[103.39028168 125.49727631]
[90.24887085 123.80169678]
[80.76219177 135.42077637]
[71.27551270 147.03984070]
[61.78882980 158.65892029]
[59.05432510 174.24201965]
[45.01167297 179.20721436]
[35.52499008 190.82627869]
[33.02170181 209.04269409]
[16.42679214 214.67459106]
[7.17600918 226.48234558]
[-2.07477379 238.29010010]
[-11.32555676 250.09785461]
[-20.57633972 261.90560913]
[-29.82712364 273.71334839]
[-39.07790756 285.52111816]
[-36.04848862 304.17691040]
[-47.37584686 318.90762329]
[-65.55137634 320.70837402]
[-74.31920624 332.87902832]
[-59.32884216 333.41665649]
[-50.23762131 345.34771729]
[-53.69667053 359.94342041]
[-67.17535400 366.52560425]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[6 30]
[7 29]
[8 28]
[9 27]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[36 151]
[37 150]
[42 147]
[43 146]
[44 145]
[45 144]
[46 143]
[47 142]
[48 141]
[51 139]
[52 138]
[54 136]
[55 135]
[56 134]
[57 133]
[59 91]
[60 90]
[61 89]
[63 87]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[71 79]
[72 78]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
[109 130]
[110 129]
[111 128]
[112 127]
[113 126]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
