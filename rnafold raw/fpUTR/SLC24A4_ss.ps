%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAGAAAGUUCCCGGGGAGAGCUCGCCCCUGGGAGGGCCGACGUCGAGCCUGCUCGCCGCGAGGGUCUCAGAGACGGCACCCAGGCGCUCCGGG\
) } def
/len { sequence length } bind def

/coor [
[-38.63434982 381.55798340]
[-39.73858643 396.74682617]
[-46.93093491 410.17031860]
[-58.96527863 419.50274658]
[-73.75659180 423.12725830]
[-88.74218750 420.41583252]
[-101.32572174 411.83828735]
[-109.32702637 398.88070679]
[-111.35982513 383.78805542]
[-107.07192230 369.17526245]
[-97.20622253 357.57406616]
[-83.47201538 350.99444580]
[-68.24884033 350.57635498]
[-62.56473923 336.69503784]
[-56.88063812 322.81372070]
[-51.19653702 308.93240356]
[-45.51243973 295.05108643]
[-39.82833862 281.16976929]
[-34.14423752 267.28845215]
[-48.71434402 270.85382080]
[-61.69018555 263.32870483]
[-65.83174896 248.91177368]
[-58.82820129 235.64715576]
[-44.58725357 230.93594360]
[-31.05479240 237.40684509]
[-25.78142357 251.45045471]
[-17.52376175 238.92802429]
[-9.26610088 226.40560913]
[-1.00843871 213.88319397]
[-1.12661123 208.93284607]
[1.99801445 203.89695740]
[8.21117115 200.84147644]
[17.26208878 188.87983704]
[26.31300735 176.91819763]
[35.36392593 164.95654297]
[33.03685379 154.76747131]
[36.87970352 144.80982971]
[45.81218338 138.57115173]
[56.92801285 138.38351440]
[66.73422241 127.03282166]
[76.54043579 115.68212891]
[86.34664917 104.33143616]
[89.16088867 90.63575745]
[102.30265808 85.86235046]
[105.63359833 77.14646912]
[112.61488342 74.30952454]
[122.78350830 63.28232956]
[132.77223206 52.09191895]
[142.57844543 40.74122620]
[152.38465881 29.39053345]
[162.00578308 17.88253593]
[171.43930054 6.22025251]
[172.91065979 -0.54542255]
[177.04716492 -4.78957558]
[181.88059998 -5.86555338]
[192.04922485 -16.89274979]
[202.21784973 -27.91994476]
[212.38647461 -38.94713974]
[218.67901611 -54.69008636]
[235.54866028 -53.00154495]
[238.59609985 -36.32373047]
[223.41366577 -28.77851486]
[213.24504089 -17.75131989]
[203.07641602 -6.72412348]
[192.90779114 4.30307245]
[183.10157776 15.65376472]
[173.66807556 27.31604767]
[171.87507629 34.63532639]
[163.73535156 39.19674301]
[153.92913818 50.54743576]
[144.12292480 61.89812851]
[142.09387207 69.15550995]
[133.81069946 73.45095062]
[123.64208221 84.47814941]
[113.65335083 95.66856384]
[110.83911133 109.36424255]
[97.69734192 114.13764954]
[87.89112854 125.48834229]
[78.08491516 136.83903503]
[68.27870178 148.18972778]
[65.59743500 168.03932190]
[47.32556534 174.00746155]
[38.27465057 185.96911621]
[29.22373009 197.93075562]
[20.17281342 209.89239502]
[11.51398182 222.14085388]
[3.25632048 234.66326904]
[-5.00134134 247.18568420]
[-13.25900269 259.70809937]
[-20.26291847 272.97253418]
[-25.94701958 286.85385132]
[-31.63111877 300.73516846]
[-37.31521988 314.61648560]
[-42.99932098 328.49783325]
[-48.68342209 342.37915039]
[-54.36752319 356.26046753]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 96]
[14 95]
[15 94]
[16 93]
[17 92]
[18 91]
[19 90]
[26 89]
[27 88]
[28 87]
[29 86]
[32 85]
[33 84]
[34 83]
[35 82]
[39 80]
[40 79]
[41 78]
[42 77]
[44 75]
[46 74]
[47 73]
[48 71]
[49 70]
[50 69]
[51 67]
[52 66]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
