%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCGCCUUCCUCCGGCUCAGCCGCCGCGCCGCCGGGCUGCUCCUUCUUCCUCCUCGGGCGCCCGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[48.33189774 150.84930420]
[54.51376724 164.51622009]
[55.84107208 179.45738220]
[52.16521835 194.00000000]
[43.89773560 206.51594543]
[31.96423912 215.60394287]
[17.70077324 220.24652100]
[2.70424366 219.92391968]
[-11.34637451 214.67224121]
[-22.87800598 205.07945251]
[-30.59959602 192.21955872]
[-33.64665604 177.53230286]
[-31.67803764 162.66204834]
[-24.91414833 149.27362061]
[-14.11225605 138.86598206]
[-0.48094773 132.60411072]
[-14.48850632 127.23863983]
[-28.49606514 121.87316132]
[-42.50362396 116.50769043]
[-56.83302307 123.17430878]
[-71.65060425 117.67749786]
[-78.16535187 103.27841187]
[-72.51218414 88.51977539]
[-58.04502487 82.15763092]
[-43.34698486 87.96651459]
[-37.13814926 102.50012970]
[-23.13059044 107.86560059]
[-9.12303257 113.23107910]
[4.88452578 118.59654999]
[19.88105392 118.91929626]
[34.10647583 114.16142273]
[48.33190155 109.40355682]
[62.55732346 104.64568329]
[76.78274536 99.88781738]
[91.00817108 95.12994385]
[97.26660919 89.63156128]
[105.94908905 90.48773193]
[120.36603546 86.34627533]
[134.78297424 82.20481873]
[149.19992065 78.06336975]
[156.85916138 72.52696228]
[164.32673645 74.06824493]
[178.90850830 70.55087280]
[193.49028015 67.03350067]
[208.07205200 63.51612854]
[210.78967285 48.53165817]
[219.37245178 35.95167542]
[232.33334351 27.95574570]
[247.42681885 25.92920685]
[262.03784180 30.22316933]
[273.63494873 40.09368134]
[280.20886230 53.83061600]
[280.62066650 69.05396271]
[274.79895020 83.12619019]
[263.75238037 93.60919189]
[249.39486694 98.68673706]
[234.21389771 97.47909546]
[220.83970642 90.19551086]
[211.58941650 78.09790039]
[197.00764465 81.61527252]
[182.42587280 85.13264465]
[167.84410095 88.65001678]
[153.34138489 92.48031616]
[138.92443848 96.62176514]
[124.50749207 100.76322174]
[110.09054565 104.90467834]
[95.76604462 109.35536957]
[81.54061890 114.11323547]
[67.31519318 118.87110901]
[53.08977127 123.62897491]
[38.86434555 128.38684082]
[24.63892365 133.14471436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 29]
[17 28]
[18 27]
[19 26]
[30 72]
[31 71]
[32 70]
[33 69]
[34 68]
[35 67]
[37 66]
[38 65]
[39 64]
[40 63]
[42 62]
[43 61]
[44 60]
[45 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
