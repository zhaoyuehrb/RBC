%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUCCCGCCAGGGCAGCCCGGGAGGCCAGACGCUGGCGCUGCAGGGAGAGGGCGGUGGGCGCAUCCGCUAGGGGGCGCGGCGGGGCGGGGCGCACCUUUCGGCGGGCCUCGCGG\
) } def
/len { sequence length } bind def

/coor [
[74.74170685 104.12791443]
[59.87902069 102.10292053]
[45.01633453 100.07791901]
[30.15365219 98.05291748]
[15.29096794 96.02791595]
[0.40222579 94.20436096]
[-14.50984383 92.58257294]
[-29.42191315 90.96078491]
[-44.33398056 89.33900452]
[-59.24605179 87.71721649]
[-65.16465759 98.42980957]
[-74.36143494 106.45197296]
[-85.71337128 110.83581543]
[-97.84506226 111.07576752]
[-109.29535675 107.16680908]
[-118.69330597 99.60218048]
[-124.92234802 89.31128693]
[-127.25290680 77.54553986]
[-141.98416138 74.71886444]
[-156.71542358 71.89218140]
[-171.72639465 76.89028168]
[-182.76759338 66.89321136]
[-197.77856445 71.89131165]
[-208.81976318 61.89423752]
[-223.55101013 59.06755829]
[-238.31919861 56.44061279]
[-253.12159729 54.01388168]
[-267.92398071 51.58715057]
[-282.72637939 49.16042328]
[-297.52877808 46.73369217]
[-314.13745117 50.13789368]
[-322.00634766 35.12067795]
[-309.75433350 23.40212059]
[-295.10205078 31.93129539]
[-280.29965210 34.35802460]
[-265.49725342 36.78475571]
[-250.69487000 39.21148300]
[-235.89247131 41.63821411]
[-228.68701172 39.58780670]
[-220.72433472 44.33630371]
[-205.99307251 47.16298294]
[-192.03578186 41.96269989]
[-179.94090271 52.16195679]
[-165.98361206 46.96167374]
[-153.88873291 57.16092682]
[-139.15748596 59.98760986]
[-124.42623138 62.81428909]
[-113.36882782 48.64577866]
[-96.61809540 41.90484238]
[-78.66313934 44.48850632]
[-64.36133575 55.78260803]
[-57.62426758 72.80514526]
[-42.71219635 74.42693329]
[-27.80012703 76.04872131]
[-12.88805866 77.67050171]
[2.02401114 79.29228973]
[9.10788727 76.85478973]
[17.31596756 81.16522980]
[32.17864990 83.19023132]
[47.04133606 85.21523285]
[61.90401840 87.24023438]
[76.76670074 89.26523590]
[88.02809906 74.96454620]
[107.27946472 70.99143219]
[125.85261536 81.03094482]
[137.79400635 71.95333099]
[149.73539734 62.87572098]
[161.67680359 53.79810715]
[173.61819458 44.72049332]
[185.55958557 35.64288330]
[192.21154785 18.53862572]
[209.62295532 16.86232185]
[215.04745483 1.38631344]
[231.21029663 -1.38763106]
[241.48452759 11.39408398]
[235.30090332 26.58272552]
[219.02059937 28.55352211]
[217.36694336 40.62062073]
[207.58728027 48.53751755]
[194.63720703 47.58427811]
[182.69581604 56.66189194]
[170.75440979 65.73950195]
[158.81301880 74.81711578]
[146.87162781 83.89472961]
[134.93022156 92.97234344]
[134.72711182 107.97097015]
[146.41830444 117.36862183]
[158.10951233 126.76626587]
[169.80072021 136.16392517]
[181.49191284 145.56156921]
[193.18312073 154.95921326]
[204.87431335 164.35687256]
[220.47784424 166.97225952]
[225.55015564 180.97657776]
[241.15370178 183.59196472]
[246.22601318 197.59628296]
[257.91720581 206.99394226]
[274.19750977 208.96473694]
[280.38113403 224.15338135]
[270.10690308 236.93508911]
[253.94406128 234.16114807]
[248.51956177 218.68513489]
[236.82835388 209.28749084]
[222.06105042 207.34428406]
[216.15251160 192.66778564]
[201.38520813 190.72456360]
[195.47666931 176.04806519]
[183.78546143 166.65042114]
[172.09426880 157.25276184]
[160.40306091 147.85511780]
[148.71186829 138.45747375]
[137.02066040 129.05981445]
[125.32946014 119.66217041]
[109.89002991 128.79627991]
[92.89406586 127.93986511]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[4 59]
[5 58]
[6 56]
[7 55]
[8 54]
[9 53]
[10 52]
[18 47]
[19 46]
[20 45]
[22 43]
[24 41]
[25 40]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
[72 77]
[86 113]
[87 112]
[88 111]
[89 110]
[90 109]
[91 108]
[92 107]
[94 105]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
