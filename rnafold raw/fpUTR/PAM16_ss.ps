%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCCGGUGGCCCGCCCUUAGACUGAGGCAAUGCGCAUGCCCAGCGCCGUAUCGCGCACGCGCUCUCUGCGGCUUUCCUUGACCUCUGACCCGCCGACCACGCUUGAUCCCCGGCCGCGGGGCCAGGAAGUCGGAGUUUGAGCCCCGGAGGCAGAGCGGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[141.56689453 276.24633789]
[132.32641602 288.86172485]
[117.12657928 292.53576660]
[103.14425659 285.53372192]
[96.98148346 271.16171265]
[101.54813385 256.20578003]
[114.68797302 247.72766113]
[116.38758850 232.82426453]
[118.08720398 217.92086792]
[119.78681946 203.01747131]
[121.48643494 188.11407471]
[123.18605042 173.21067810]
[124.88566589 158.30726624]
[118.24221039 154.82669067]
[98.31184387 144.38491821]
[87.02645111 154.26620483]
[75.74105835 164.14750671]
[64.54967499 174.13513184]
[65.35502625 189.75196838]
[55.89244461 202.20161438]
[40.62987518 205.60572815]
[26.77383423 198.35699463]
[20.86672020 183.87803650]
[25.69769096 169.00538635]
[38.98571014 160.76144409]
[54.45658493 163.03875732]
[57.30134964 156.18150330]
[65.85976410 152.86210632]
[77.14515686 142.98081970]
[88.43054962 133.09951782]
[86.39816284 125.88014984]
[82.33338928 111.44139099]
[80.30100250 104.22201538]
[65.51805878 101.67944336]
[50.73511887 99.13687134]
[35.95217896 96.59429932]
[21.16923904 94.05171967]
[6.36290169 91.64914703]
[-8.46550751 89.38677979]
[-23.29391670 87.12441254]
[-38.12232590 84.86205292]
[-48.93590927 95.99066162]
[-64.23122406 98.60465240]
[-78.12690735 91.69889069]
[-85.27979279 77.92878723]
[-82.93943787 62.58921432]
[-72.00576782 51.57856369]
[-56.68299484 49.13064957]
[-42.86304092 56.18674850]
[-35.85995865 70.03364563]
[-21.03155136 72.29600525]
[-6.20314264 74.55837250]
[8.62526608 76.82073212]
[15.74330044 74.71163177]
[23.71181297 79.26878357]
[38.49475479 81.81135559]
[53.27769470 84.35392761]
[68.06063080 86.89650726]
[82.84357452 89.43907928]
[86.87664795 83.11576080]
[94.94278717 70.46913147]
[98.97586060 64.14581299]
[90.43692780 51.81347275]
[81.89799500 39.48113251]
[66.43418121 35.20911789]
[60.26541138 20.39946556]
[68.12383270 6.41287184]
[83.98113251 3.97865558]
[95.67295837 14.96413803]
[94.23033142 30.94219780]
[102.76926422 43.27453613]
[111.30819702 55.60687637]
[125.58279419 60.21512604]
[139.72084045 55.20356369]
[153.85888672 50.19200134]
[167.99691772 45.18043900]
[182.13496399 40.16887665]
[196.22494507 35.02375793]
[210.26562500 29.74554062]
[224.30628967 24.46732521]
[238.34696960 19.18911171]
[242.60890198 1.60305870]
[256.43130493 -9.83061695]
[274.19155884 -10.70446110]
[288.80969238 -0.85794228]
[302.64056396 -6.66369677]
[316.47143555 -12.46945095]
[326.20129395 -24.94505692]
[340.93130493 -22.73690605]
[354.76217651 -28.54266167]
[368.59304810 -34.34841537]
[372.14138794 -44.68906021]
[380.63589478 -51.21577454]
[391.10244751 -51.94969177]
[400.04138184 -46.88891220]
[414.08206177 -52.16712570]
[428.12271118 -57.44534302]
[442.16339111 -62.72355652]
[456.20407104 -68.00177002]
[458.93060303 -79.62737274]
[466.86499023 -88.38973999]
[477.93643188 -92.17527771]
[489.33804321 -90.14718628]
[498.23831177 -82.92728424]
[512.46868896 -87.67040253]
[526.69903564 -92.41351318]
[540.92938232 -97.15663147]
[547.40490723 -108.34477997]
[559.38903809 -111.98753357]
[570.27423096 -106.64820862]
[584.59179688 -111.12117767]
[598.90936279 -115.59414673]
[613.22692871 -120.06711578]
[627.54449463 -124.54008484]
[638.25128174 -136.96166992]
[654.30944824 -133.63467407]
[659.19958496 -117.98162079]
[647.89129639 -106.10503387]
[632.01745605 -110.22251892]
[617.69989014 -105.74954987]
[603.38232422 -101.27658081]
[589.06475830 -96.80361176]
[574.74719238 -92.33065033]
[563.59808350 -78.80271149]
[545.67248535 -82.92627716]
[531.44213867 -78.18316650]
[517.21179199 -73.44004822]
[502.98144531 -68.69693756]
[495.83474731 -51.87815857]
[478.38067627 -45.47256470]
[461.48226929 -53.96110153]
[447.44161987 -48.68288422]
[433.40093994 -43.40467072]
[419.36026001 -38.12645721]
[405.31961060 -32.84823990]
[394.22604370 -17.04224396]
[374.39880371 -20.51753616]
[360.56793213 -14.71178150]
[346.73706055 -8.90602779]
[337.99649048 3.15431142]
[322.27719116 1.36142790]
[308.44631958 7.16718245]
[294.61544800 12.97293663]
[293.60955811 25.12066650]
[287.48309326 35.74206924]
[277.35263062 42.77777863]
[265.11776733 44.83339310]
[253.10496521 41.45548248]
[243.62518311 33.22978210]
[229.58450317 38.50799561]
[215.54383850 43.78621292]
[201.50317383 49.06442642]
[196.32577515 54.38508606]
[187.14653015 54.30691910]
[173.00848389 59.31848145]
[158.87043762 64.33003998]
[144.73240662 69.34160614]
[130.59436035 74.35316467]
[139.78906250 160.00688171]
[138.08944702 174.91029358]
[136.38983154 189.81369019]
[134.69021606 204.71708679]
[132.99060059 219.62048340]
[131.29098511 234.52388000]
[129.59136963 249.42727661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 165]
[8 164]
[9 163]
[10 162]
[11 161]
[12 160]
[13 159]
[15 30]
[16 29]
[17 28]
[18 26]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[38 53]
[39 52]
[40 51]
[41 50]
[62 72]
[63 71]
[64 70]
[73 158]
[74 157]
[75 156]
[76 155]
[77 154]
[78 152]
[79 151]
[80 150]
[81 149]
[85 143]
[86 142]
[87 141]
[89 139]
[90 138]
[91 137]
[95 135]
[96 134]
[97 133]
[98 132]
[99 131]
[104 128]
[105 127]
[106 126]
[107 125]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
