%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGGCGCCAAAAUCAAACGCGUCCUGGCCUGUCCCGCCCCUCUCCCCAAGCGCGGGCCCGGCCAGCGGAAGCCCCUGCGCCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[86.87886810 161.38558960]
[74.92871094 152.31951904]
[70.13748169 138.10528564]
[74.16090393 123.65496063]
[85.60891724 113.96202087]
[72.61853790 121.46202087]
[59.62815475 128.96202087]
[46.63777542 136.46202087]
[33.64739227 143.96202087]
[34.32740784 159.25241089]
[27.81323433 173.10247803]
[15.60178280 182.32955933]
[0.49915475 184.81333923]
[-14.02417660 179.98307800]
[-24.63085556 168.94873047]
[-28.88354683 154.24589539]
[-25.80500984 139.25318909]
[-16.10267258 127.41582489]
[-2.00605917 121.45394135]
[13.24553013 122.73753357]
[26.14739227 130.97163391]
[39.13777542 123.47164154]
[52.12815475 115.97164154]
[65.11853790 108.47164154]
[78.10891724 100.97164154]
[85.62725830 90.14472198]
[95.87598419 87.73321533]
[97.44390869 72.81538391]
[99.01183319 57.89756012]
[100.57976532 42.97972870]
[102.14768982 28.06190300]
[95.89528656 13.52856064]
[104.92056274 1.67977798]
[98.66815948 -12.85356331]
[107.69343567 -24.70234680]
[109.26136017 -39.62017441]
[110.82929230 -54.53800201]
[112.39721680 -69.45583344]
[113.96514130 -84.37365723]
[100.58963776 -91.59614563]
[91.00009155 -103.39059448]
[86.65882874 -117.95843506]
[88.22787476 -133.07817078]
[95.46794891 -146.44416809]
[107.27500153 -156.01818848]
[121.84853363 -160.34028625]
[136.96620178 -158.75135803]
[150.32266235 -151.49369812]
[159.88114929 -139.67407227]
[164.18406677 -125.09485626]
[162.57524109 -109.97929382]
[155.30003357 -96.63240051]
[143.46783447 -87.08946991]
[128.88296509 -82.80573273]
[127.31504822 -67.88790131]
[125.74711609 -52.97007751]
[124.17919159 -38.05224609]
[122.61126709 -23.13441849]
[128.97581482 -9.66810036]
[119.83839417 3.24770498]
[126.20294189 16.71402359]
[117.06552124 29.62982941]
[115.49758911 44.54765701]
[113.92966461 59.46548462]
[112.36174011 74.38331604]
[110.79380798 89.30113983]
[116.89485931 103.00432587]
[129.03012085 111.82110596]
[141.16537476 120.63788605]
[153.30062866 129.45466614]
[168.71116638 127.18466949]
[180.89244080 136.29901123]
[182.96156311 151.00459290]
[195.09681702 159.82138062]
[211.45381165 160.99650574]
[218.37022400 175.86576843]
[208.73104858 189.13296509]
[192.45223999 187.14991760]
[186.28004456 171.95663452]
[174.14479065 163.13984680]
[159.51954651 165.71627808]
[147.08708191 156.94767761]
[144.48384094 141.58992004]
[132.34858704 132.77313232]
[120.21333313 123.95635986]
[108.07807922 115.13957977]
[118.45003510 125.97574615]
[120.94114685 140.76744080]
[114.69056702 154.40307617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[27 66]
[28 65]
[29 64]
[30 63]
[31 62]
[33 60]
[35 58]
[36 57]
[37 56]
[38 55]
[39 54]
[67 86]
[68 85]
[69 84]
[70 83]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
