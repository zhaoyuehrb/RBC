%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGAGGCCGCGCCGGGAGCGCGGUGGGGCUAGGCGUGGGGCGCUCCCGGCAUGUCCCUGUACCGCAGCGUCGUGUGGUUCGCCAAGGGGCUGCGCGAGUACACCAAGAGUGGCU\
) } def
/len { sequence length } bind def

/coor [
[67.62779999 100.67227173]
[52.96674728 97.50153351]
[38.26478577 94.52622986]
[23.52452469 91.74690247]
[8.78426266 88.96756744]
[-5.95599890 86.18824005]
[-15.10081959 87.68129730]
[-21.04936600 83.13372803]
[-35.71041870 79.96298981]
[-50.83428192 84.60833740]
[-61.63843155 74.35555267]
[-76.29948425 71.18480682]
[-91.42334747 75.83015442]
[-102.22749329 65.57736969]
[-116.88854980 62.40663147]
[-131.54959106 59.23588943]
[-146.21064758 56.06515121]
[-160.87170410 52.89441299]
[-175.53274536 49.72367096]
[-190.19380188 46.55293274]
[-204.85485840 43.38219452]
[-219.51589966 40.21145248]
[-234.17695618 37.04071426]
[-248.83799744 33.86997604]
[-260.16452026 40.21335602]
[-272.37329102 37.18281937]
[-278.98083496 26.95474052]
[-294.22299194 31.19583511]
[-304.75039673 20.65906906]
[-319.99255371 24.90016556]
[-330.51992798 14.36339855]
[-345.09140015 10.80349827]
[-361.91296387 12.91804409]
[-368.60153198 -2.66076231]
[-355.48312378 -13.40059376]
[-341.53149414 -3.76795006]
[-326.96005249 -0.20804954]
[-312.76013184 -4.70377302]
[-301.19049072 6.08762121]
[-286.99057007 1.59189785]
[-275.42092896 12.38329220]
[-258.93612671 6.52715683]
[-245.66726685 19.20892525]
[-231.00621033 22.37966347]
[-216.34516907 25.55040359]
[-201.68411255 28.72114182]
[-187.02305603 31.89188194]
[-172.36201477 35.06262207]
[-157.70095825 38.23336029]
[-143.03990173 41.40409851]
[-128.37886047 44.57484055]
[-113.71780396 47.74557877]
[-99.05675507 50.91631699]
[-84.98154449 46.04417801]
[-73.12874603 56.52375793]
[-58.46769333 59.69449997]
[-44.39248276 54.82235718]
[-32.53967667 65.30194092]
[-17.87862778 68.47267914]
[-3.17666793 71.44797516]
[11.56359386 74.22731018]
[26.30385590 77.00663757]
[41.04411697 79.78597260]
[48.29278946 77.90917969]
[56.13748550 82.84047699]
[70.79853821 86.01121521]
[83.29554749 72.26242828]
[101.29273224 67.64663696]
[118.86427307 73.68363953]
[130.22448730 88.38568878]
[145.09176636 86.39480591]
[153.30491638 82.10512543]
[160.38073730 84.55427551]
[175.29574585 82.95986938]
[190.21076965 81.36547089]
[205.12579346 79.77106476]
[220.04081726 78.17666626]
[234.95584106 76.58226013]
[249.87086487 74.98786163]
[264.78588867 73.39345551]
[279.70089722 71.79905701]
[294.61593628 70.20465088]
[309.53094482 68.61025238]
[319.25878906 56.15454102]
[334.95489502 54.30859756]
[347.30706787 64.16757965]
[348.98696899 79.88233185]
[338.99792480 92.12957764]
[323.26629639 93.64322662]
[311.12536621 83.52526855]
[296.21032715 85.11967468]
[281.29531860 86.71407318]
[266.38027954 88.30847931]
[251.46527100 89.90287781]
[236.55024719 91.49728394]
[221.63522339 93.09168243]
[206.72019958 94.68608856]
[191.80517578 96.28048706]
[176.89015198 97.87489319]
[161.97512817 99.46929169]
[147.08265686 101.26209259]
[132.21536255 103.25297546]
[128.73173523 114.92980194]
[121.17890930 124.49214935]
[128.09529114 137.80242920]
[135.01168823 151.11271667]
[149.81369019 157.29980469]
[154.06655884 172.76889038]
[144.50785828 185.65341187]
[128.47019958 186.06945801]
[118.25630951 173.69789124]
[121.70140076 158.02909851]
[114.78501129 144.71882629]
[107.86862183 131.40853882]
[96.32872009 132.17037964]
[85.25717926 128.82812500]
[76.06642914 121.80815887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 63]
[4 62]
[5 61]
[6 60]
[8 59]
[9 58]
[11 56]
[12 55]
[14 53]
[15 52]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[27 41]
[29 39]
[31 37]
[32 36]
[70 102]
[71 101]
[73 100]
[74 99]
[75 98]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
