%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAGGCCCCGGCCAGGCCGGGAGUGGCGUGCUGGGCGUGCGCGGCUGCGGUACGGCGUGUUGGUCCCAGCGGUUCAGCUGAGGUAGGGACGUGCUGUAGGCCGGA\
) } def
/len { sequence length } bind def

/coor [
[102.16510773 229.87347412]
[91.95672607 241.34886169]
[77.37326813 246.16740417]
[62.33761978 243.03295898]
[50.89429092 232.78865051]
[46.12147903 218.19015503]
[49.30305099 203.16441345]
[59.58317566 191.75325012]
[74.19654846 187.02621460]
[77.25776672 172.34190369]
[80.31897736 157.65759277]
[83.38019562 142.97328186]
[86.44140625 128.28898621]
[89.50261688 113.60466766]
[82.06245422 104.97495270]
[81.32928467 92.70422363]
[88.67919159 81.74960327]
[75.20587921 75.15644836]
[61.73255920 68.56330109]
[48.25923920 61.97014236]
[35.72241211 65.41429901]
[24.58707047 59.52170181]
[20.64482498 47.98104858]
[7.37086487 40.99520493]
[-5.90309525 34.00936508]
[-21.71872711 34.42928314]
[-29.37804413 21.65493011]
[-42.65200424 14.66908836]
[-55.92596436 7.68324614]
[-69.19992065 0.69740444]
[-82.47388458 -6.28843737]
[-95.74784088 -13.27427864]
[-111.43441772 -9.91110706]
[-123.75245667 -20.18950844]
[-123.25260925 -36.22477341]
[-110.31832123 -45.71601868]
[-94.87166595 -41.38237381]
[-88.76200104 -26.54823875]
[-75.48804474 -19.56239700]
[-62.21408081 -12.57655525]
[-48.94012070 -5.59071398]
[-35.66616440 1.39512789]
[-22.39220238 8.38097000]
[-7.52601242 7.46137571]
[1.08274651 20.73540497]
[14.35670662 27.72124672]
[27.63066673 34.70708847]
[45.02912140 33.00879669]
[54.85239410 48.49682617]
[68.32571411 55.08997726]
[81.79903412 61.68313217]
[95.27234650 68.27629089]
[110.21419525 69.59580994]
[124.63447571 65.46595764]
[139.05474854 61.33609772]
[153.47502136 57.20624161]
[167.89529419 53.07638550]
[182.31556702 48.94652939]
[196.73583984 44.81667328]
[211.15611267 40.68681717]
[225.57638550 36.55696106]
[239.99665833 32.42710495]
[245.51470947 16.51839066]
[259.25833130 7.07843113]
[275.75738525 7.62675190]
[288.58462524 17.75369835]
[302.87744141 13.20229435]
[317.10189819 8.44156456]
[331.25494385 3.47253513]
[345.40798950 -1.49649429]
[359.56103516 -6.46552372]
[366.17654419 -20.81859589]
[381.03228760 -26.21142578]
[395.31460571 -19.44454384]
[400.55007935 -4.53262138]
[393.63256836 9.67736340]
[378.66613770 14.75487804]
[364.53009033 7.68752337]
[350.37701416 12.65655327]
[336.22396851 17.62558174]
[322.07092285 22.59461212]
[316.71820068 27.86294556]
[307.42883301 27.49511528]
[293.13601685 32.04652023]
[290.09265137 45.13518524]
[280.87594604 55.06307983]
[267.84152222 59.13407516]
[254.40040588 56.16963959]
[244.12651062 46.84737778]
[229.70623779 50.97723389]
[215.28596497 55.10709000]
[200.86569214 59.23694611]
[186.44541931 63.36680222]
[172.02514648 67.49665833]
[157.60487366 71.62651825]
[143.18460083 75.75637054]
[128.76432800 79.88623047]
[114.34405518 84.01608276]
[118.76394653 104.64405060]
[104.18692780 116.66587830]
[101.12571716 131.35018921]
[98.06450653 146.03450012]
[95.00328827 160.71881104]
[91.94207764 175.40312195]
[88.88085938 190.08743286]
[100.38819122 200.25979614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 105]
[10 104]
[11 103]
[12 102]
[13 101]
[14 100]
[17 52]
[18 51]
[19 50]
[20 49]
[23 47]
[24 46]
[25 45]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[53 98]
[54 97]
[55 96]
[56 95]
[57 94]
[58 93]
[59 92]
[60 91]
[61 90]
[62 89]
[66 84]
[67 83]
[68 81]
[69 80]
[70 79]
[71 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
