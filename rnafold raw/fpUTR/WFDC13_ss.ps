%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACUGGGCCUCCACUUUGCCCUCUUUCCUUCUCUUCUCCUCACAGCAGUGCCUGGUCAAACCCAGCAACCCUUGGCCAGAACUUACUCACCCAUCCCACUGACACC\
) } def
/len { sequence length } bind def

/coor [
[138.32377625 183.12657166]
[120.82804108 189.13433838]
[102.48166656 191.50180054]
[84.03394318 190.13226318]
[66.23828888 185.08163452]
[49.82148361 176.55622864]
[35.45401001 164.90419006]
[24.04090309 174.63769531]
[12.62779617 184.37118530]
[1.21469057 194.10469055]
[3.39198112 209.37763977]
[-3.05431247 223.39366150]
[-16.06720161 231.68028259]
[-31.49431992 231.59329224]
[-44.41292953 223.16044617]
[-50.70075226 209.07261658]
[-48.35136032 193.82519531]
[-38.11444473 182.28356934]
[-23.25656128 178.13064575]
[-8.51880932 182.69157410]
[2.89429688 172.95808411]
[14.30740261 163.22457886]
[25.72050858 153.49108887]
[19.28590775 143.17376709]
[14.27558708 132.09460449]
[10.77795792 120.44910431]
[8.85473919 108.44276428]
[8.53986835 96.28743744]
[9.83890152 84.19762421]
[12.72891617 72.38665771]
[17.15891457 61.06295776]
[23.05072594 50.42633820]
[30.30038071 40.66449738]
[38.77995682 31.94968796]
[48.33982086 24.43569374]
[58.81127548 18.25510597]
[70.00955200 13.51698685]
[81.73703003 10.30494499]
[93.78678131 8.67566204]
[105.94617462 8.65788651]
[118.00064087 10.25193214]
[129.73745728 13.42967033]
[140.94953918 18.13502693]
[151.43902588 24.28497314]
[161.02081299 31.77098465]
[169.52583313 40.46096420]
[176.80400085 50.20156860]
[182.72688293 60.82091522]
[196.76388550 55.53294754]
[210.80088806 50.24498367]
[224.83789062 44.95701981]
[238.87489319 39.66905212]
[244.28205872 32.82558823]
[251.86660767 30.95437241]
[262.08428955 19.97260666]
[272.30197144 8.99084187]
[282.51962280 -1.99092317]
[292.73730469 -12.97268772]
[302.95498657 -23.95445251]
[313.17263794 -34.93621826]
[323.39031982 -45.91798401]
[317.78564453 -60.11482239]
[318.90432739 -75.33688354]
[326.52429199 -88.56182861]
[339.13253784 -97.16382599]
[354.22573853 -99.43493652]
[368.80712891 -94.92424774]
[379.98150635 -84.52734375]
[385.53024292 -70.30854797]
[384.35162354 -55.09100342]
[376.67965698 -41.89617157]
[364.03762817 -33.34389114]
[348.93557739 -31.13223076]
[334.37210083 -35.70030975]
[324.15441895 -24.71854591]
[313.93673706 -13.73678017]
[303.71908569 -2.75501537]
[293.50140381 8.22674942]
[283.28372192 19.20851517]
[273.06604004 30.19027901]
[262.84838867 41.17204285]
[277.58712769 38.38463593]
[292.45031738 40.40593338]
[305.90939331 47.02806091]
[316.58026123 57.57000351]
[323.36550903 70.94761658]
[325.56732178 85.78513336]
[322.95928955 100.55666351]
[315.80957031 113.74308777]
[304.85351562 123.98831177]
[291.21780396 130.23869324]
[276.30474854 131.85147095]
[261.64804077 128.66075134]
[248.75495911 120.99468994]
[238.95144653 109.64166260]
[233.24569702 95.76922607]
[232.22451782 80.80402374]
[235.99288940 66.28509521]
[244.16285706 53.70605469]
[230.12585449 58.99401855]
[216.08885193 64.28198242]
[202.05184937 69.56995392]
[188.01484680 74.85791779]
[191.27253723 93.06729889]
[190.80258179 111.55982208]
[186.62417603 129.58023071]
[178.90797424 146.39256287]
[167.96911621 161.31018066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 23]
[8 22]
[9 21]
[10 20]
[48 103]
[49 102]
[50 101]
[51 100]
[52 99]
[54 81]
[55 80]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
