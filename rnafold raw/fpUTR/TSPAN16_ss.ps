%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCGCCUUGGACAACCAUCAGGCAGCCAGGACACAGAGGGGCAGAGCAAGUCAGCAUUGGCGCCCCUUCCUCAGAUCCCUAUCAUCUUGGGAAACAGUAGCCCAGAGGUUCAGGAAGAUGUUAACUUAAAUGUUCAGGGUGCCCCAGUCUGUUCAGC\
) } def
/len { sequence length } bind def

/coor [
[-161.12361145 667.45361328]
[-169.10935974 667.15216064]
[-177.68617249 679.45819092]
[-186.26300049 691.76422119]
[-187.80607605 707.51000977]
[-201.43106079 713.52734375]
[-210.00788879 725.83337402]
[-218.58470154 738.13940430]
[-227.16152954 750.44543457]
[-235.49507141 762.91748047]
[-243.58215332 775.55072021]
[-251.66923523 788.18395996]
[-251.87936401 804.58178711]
[-266.31567383 812.36157227]
[-280.12731934 803.52014160]
[-279.10604858 787.15283203]
[-264.30249023 780.09692383]
[-256.21542358 767.46368408]
[-248.12834167 754.83038330]
[-248.27310181 750.00946045]
[-245.35531616 745.05651855]
[-239.46754456 741.86859131]
[-230.89073181 729.56256104]
[-222.31390381 717.25659180]
[-213.73709106 704.95056152]
[-212.80747986 690.08496094]
[-198.56901550 683.18737793]
[-189.99220276 670.88134766]
[-181.41537476 658.57531738]
[-181.83094788 636.95391846]
[-161.56396484 627.45526123]
[-153.97911072 614.51422119]
[-146.39424133 601.57324219]
[-138.80938721 588.63220215]
[-131.22453308 575.69116211]
[-131.46412659 560.79852295]
[-117.81072998 552.80505371]
[-121.80827332 538.50274658]
[-114.30049896 525.27069092]
[-99.27184296 521.17468262]
[-91.68698120 508.23364258]
[-84.10211945 495.29263306]
[-76.51726532 482.35162354]
[-68.93240356 469.41061401]
[-61.34754181 456.46957397]
[-54.27658844 443.24078369]
[-47.73044968 429.74453735]
[-41.18431473 416.24832153]
[-34.63817596 402.75210571]
[-28.09203529 389.25585938]
[-22.08080292 375.51306152]
[-16.61374474 361.54483032]
[-11.14668846 347.57659912]
[-13.71306229 332.90475464]
[-1.47821724 322.87384033]
[3.98884034 308.90563965]
[9.45589733 294.93740845]
[14.92295551 280.96917725]
[20.39001274 267.00094604]
[25.85707092 253.03273010]
[19.09904671 243.76570129]
[17.66233063 232.26542664]
[22.02225304 221.39747620]
[31.19504166 213.92681885]
[42.95715714 211.81455994]
[48.96839142 198.07173157]
[40.02497101 186.16036987]
[38.23257446 171.27267456]
[44.17199326 157.39500427]
[56.34017944 148.29379272]
[71.52919006 146.49346924]
[77.54042053 132.75064087]
[83.55165863 119.00782776]
[89.56288910 105.26500702]
[93.20758820 90.71453857]
[94.38447571 75.76078033]
[95.56136322 60.80701828]
[96.73825073 45.85326004]
[85.45866394 35.02251434]
[83.83127594 19.46984100]
[92.62448883 6.53873682]
[107.68640900 2.33487248]
[121.90526581 8.84318447]
[128.56735229 22.99064636]
[124.52702332 38.09725952]
[111.69200897 47.03014374]
[110.51512146 61.98390579]
[109.33823395 76.93766785]
[108.16134644 91.89142609]
[122.01954651 97.63167572]
[131.76126099 86.22558594]
[141.50299072 74.81949615]
[151.24470520 63.41340637]
[146.69438171 48.67237473]
[150.85801697 33.81748581]
[162.40701294 23.58888626]
[177.65612793 21.25048447]
[191.73942566 27.54845619]
[200.16296387 40.47314072]
[200.23884583 55.90031815]
[191.94282532 68.90723419]
[177.92216492 75.34342194]
[162.65078735 73.15512848]
[152.90907288 84.56121826]
[143.16735840 95.96730804]
[133.42562866 107.37339783]
[103.30570984 111.27623749]
[97.29447174 125.01905823]
[91.28324127 138.76187134]
[85.27201080 152.50469971]
[94.26029968 164.88040161]
[95.83684540 179.99368286]
[89.67784119 193.77529907]
[77.52880096 202.56488037]
[62.71120834 204.08297729]
[56.69997787 217.82579041]
[64.28786469 235.14064026]
[56.98511124 252.23240662]
[39.82529449 258.49978638]
[34.35823822 272.46801758]
[28.89118004 286.43624878]
[23.42412186 300.40444946]
[17.95706367 314.37268066]
[12.49000645 328.34091187]
[14.66534042 344.01184082]
[2.82153583 353.04367065]
[-2.64552164 367.01190186]
[-8.11257935 380.98010254]
[-7.27752686 385.36181641]
[-7.85362625 389.36627197]
[-9.54106903 392.58865356]
[-11.93771076 394.76672363]
[-14.59581089 395.80200195]
[-21.14195061 409.29824829]
[-27.68808937 422.79446411]
[-34.23422623 436.29067993]
[-40.78036499 449.78689575]
[-40.29167175 454.22061157]
[-41.18017960 458.16754150]
[-43.11524963 461.24758911]
[-45.67538834 463.23089600]
[-48.40652466 464.05444336]
[-55.99138641 476.99545288]
[-63.57624817 489.93649292]
[-71.16110992 502.87750244]
[-78.74596405 515.81854248]
[-86.33082581 528.75952148]
[-82.56127167 543.87335205]
[-90.43774414 556.88934326]
[-104.86971283 560.38989258]
[-105.17263794 576.20819092]
[-118.28350830 583.27606201]
[-125.86837006 596.21704102]
[-133.45323181 609.15808105]
[-141.03810120 622.09912109]
[-148.62295532 635.04010010]
[-145.00285339 642.68994141]
[-144.73587036 651.05450439]
[-147.79110718 658.74420166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[4 27]
[6 25]
[7 24]
[8 23]
[9 22]
[10 19]
[11 18]
[12 17]
[31 156]
[32 155]
[33 154]
[34 153]
[35 152]
[37 150]
[40 147]
[41 146]
[42 145]
[43 144]
[44 143]
[45 142]
[46 137]
[47 136]
[48 135]
[49 134]
[50 133]
[51 128]
[52 127]
[53 126]
[55 124]
[56 123]
[57 122]
[58 121]
[59 120]
[60 119]
[65 116]
[66 115]
[71 110]
[72 109]
[73 108]
[74 107]
[75 89]
[76 88]
[77 87]
[78 86]
[90 106]
[91 105]
[92 104]
[93 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
