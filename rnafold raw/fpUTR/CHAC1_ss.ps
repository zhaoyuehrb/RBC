%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGGAGCUACCGAGCGGUGCCAGGCCAGGUGUGUGCGUCCGUCGGUCUUUCCGUGCCCACGCCGGAGACCAGCCCCGGAGGCCGCCUGGGCCUAUCCCUGUGCCAGGCACC\
) } def
/len { sequence length } bind def

/coor [
[47.39996338 338.29498291]
[42.97085571 340.39733887]
[35.47085571 353.38772583]
[27.97085571 366.37811279]
[27.77146912 382.19805908]
[14.70713425 389.35153198]
[19.03916359 404.55053711]
[11.28216648 418.32022095]
[-3.96176696 422.49133301]
[-17.64868355 414.58917236]
[-21.65837669 399.30200195]
[-13.61196709 385.69940186]
[1.71675289 381.85153198]
[1.37969029 366.96075439]
[14.98047543 358.87811279]
[22.48047447 345.88772583]
[29.98047447 332.89733887]
[37.11968613 319.70523071]
[43.89268494 306.32141113]
[50.66568756 292.93762207]
[57.43868637 279.55380249]
[64.21168518 266.16998291]
[70.98468781 252.78616333]
[75.46240997 238.47009277]
[77.52271271 223.61225891]
[79.58301544 208.75442505]
[81.64331818 193.89660645]
[83.70362091 179.03877258]
[85.55901337 164.15396118]
[87.20913696 149.24499512]
[88.85926056 134.33604431]
[90.50938416 119.42707825]
[92.15950775 104.51811981]
[90.08893585 101.08093262]
[89.61376190 96.72436523]
[91.11753082 92.21494293]
[94.61151886 88.46455383]
[97.48718262 73.74277496]
[92.53903198 58.71525574]
[102.57276917 47.70737839]
[105.44843292 32.98560715]
[108.32408905 18.26383400]
[111.19975281 3.54206133]
[104.62801361 -7.66120911]
[107.41967010 -19.93349075]
[117.52362061 -26.74073792]
[120.80383301 -41.37768555]
[124.08405304 -56.01462936]
[117.10591888 -74.82836914]
[130.50650024 -88.65405273]
[132.97543335 -103.44947052]
[135.44435120 -118.24489594]
[137.91326904 -133.04031372]
[140.38218689 -147.83573914]
[142.85110474 -162.63114929]
[141.16534424 -171.75308228]
[145.59729004 -177.79788208]
[148.47294617 -192.51966858]
[142.63928223 -207.84613037]
[153.20394897 -220.38885498]
[169.29891968 -217.24496460]
[174.36706543 -201.64862061]
[163.19471741 -189.64399719]
[160.31906128 -174.92222595]
[157.64651489 -160.16223145]
[155.17759705 -145.36680603]
[152.70867920 -130.57139587]
[150.23976135 -115.77597046]
[147.77084351 -100.98055267]
[145.30192566 -86.18513489]
[152.05545044 -78.29319000]
[153.30149841 -67.75814819]
[148.37429810 -58.11412430]
[138.72099304 -52.73441315]
[135.44078064 -38.09746933]
[132.16056824 -23.46052170]
[138.33422852 -7.09670544]
[125.92152405 6.41772079]
[123.04586029 21.13949394]
[120.17020416 35.86126709]
[117.29454803 50.58303833]
[122.44837952 64.55756378]
[112.20895386 76.61843872]
[109.33329010 91.34020996]
[107.06846619 106.16824341]
[105.41834259 121.07720184]
[103.76821899 135.98616028]
[102.11809540 150.89512634]
[100.46797180 165.80407715]
[102.65368652 174.81930542]
[98.56145477 181.09907532]
[96.50115204 195.95690918]
[94.44084930 210.81472778]
[92.38054657 225.67256165]
[90.32024384 240.53039551]
[101.23973083 230.24620056]
[115.49134827 225.56736755]
[130.38165283 227.37817383]
[143.09648132 235.33636475]
[151.23284912 247.93794250]
[153.25303650 262.80126953]
[148.77525330 277.11734009]
[138.64576721 288.18048096]
[124.77894592 293.89987183]
[109.79553986 293.19461060]
[96.52727509 286.19796753]
[87.48175049 274.23223877]
[84.36849976 259.55917358]
[77.59550476 272.94299316]
[70.82250214 286.32678223]
[64.04949951 299.71060181]
[57.27650070 313.09442139]
[50.50349808 326.47824097]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[6 13]
[18 113]
[19 112]
[20 111]
[21 110]
[22 109]
[23 108]
[24 95]
[25 94]
[26 93]
[27 92]
[28 91]
[29 89]
[30 88]
[31 87]
[32 86]
[33 85]
[37 84]
[38 83]
[40 81]
[41 80]
[42 79]
[43 78]
[46 76]
[47 75]
[48 74]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
