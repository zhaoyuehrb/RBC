%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAUUUAAGCUCCACCCAUGGCACACUCACUCAAGGAAGAUAUAAAUGACAAGGUCGGCUCAGCUCUCAGACAAGGUUUUCCAAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[-28.23999977 283.11389160]
[-40.54275894 288.75433350]
[-53.63097382 292.18612671]
[-67.11160278 293.30746460]
[-80.58004761 292.08587646]
[-93.63226318 288.55923462]
[-105.87690735 282.83450317]
[-116.94705963 275.08453369]
[-126.51123810 265.54287720]
[-134.28327942 254.49670410]
[-147.90814209 260.77072144]
[-161.53298950 267.04473877]
[-164.43461609 282.28811646]
[-175.76492310 292.89016724]
[-191.16720581 294.77420044]
[-204.71894836 287.21575928]
[-211.20924377 273.12124634]
[-208.14242554 257.91024780]
[-196.69776917 247.43173218]
[-181.27597046 245.71488953]
[-167.80700684 253.41987610]
[-154.18215942 247.14585876]
[-140.55729675 240.87184143]
[-144.34774780 224.68653870]
[-144.62130737 208.05966187]
[-141.36302185 191.74685669]
[-134.71852112 176.49000549]
[-124.98752594 162.98353577]
[-112.61025238 151.84277344]
[-98.14756775 143.57589722]
[-82.25555420 138.56082153]
[-65.65574646 137.02786255]
[-49.10235214 139.04917908]
[-33.34802246 144.53540039]
[-19.10960388 153.23953247]
[-7.03552771 164.76811218]
[5.30923033 156.24714661]
[17.65398788 147.72616577]
[29.99874687 139.20520020]
[42.34350586 130.68421936]
[54.68826294 122.16325378]
[67.03302002 113.64228058]
[64.37553406 98.04270172]
[68.72602844 82.82815552]
[79.22867584 70.99162292]
[93.81742859 64.86156464]
[109.62239838 65.64387512]
[123.53446960 73.18466187]
[135.57775879 64.24267578]
[147.62104797 55.30068588]
[148.63356018 44.20006561]
[155.54487610 35.73976135]
[165.79461670 32.66106033]
[175.79934692 35.78077698]
[188.43086243 27.69097710]
[201.06237793 19.60117722]
[202.88673401 4.07037783]
[214.30268860 -6.61654329]
[229.91993713 -7.41354990]
[242.36453247 2.05568027]
[245.76048279 17.32006645]
[238.50434875 31.17223167]
[224.02224731 37.07160950]
[209.15217590 32.23268890]
[196.52066040 40.32249069]
[183.88914490 48.41229248]
[176.54154968 66.15869141]
[156.56303406 67.34397888]
[144.51974487 76.28596497]
[132.47645569 85.22795105]
[135.65797424 98.79914093]
[133.39671326 112.55362701]
[126.03779602 124.39193726]
[114.70450592 132.50709534]
[101.12673950 135.66040039]
[87.37698364 133.37054443]
[75.55399323 125.98703766]
[63.20923233 134.50801086]
[50.86447525 143.02897644]
[38.51971817 151.54995728]
[26.17495918 160.07092285]
[13.83020115 168.59190369]
[1.48544359 177.11286926]
[7.01752377 189.49887085]
[10.32825947 202.65039062]
[11.31946373 216.17247009]
[9.96258831 229.65928650]
[6.29953718 242.70626831]
[0.44137719 254.92221069]
[-7.43502855 265.94110107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 23]
[11 22]
[12 21]
[36 83]
[37 82]
[38 81]
[39 80]
[40 79]
[41 78]
[42 77]
[48 70]
[49 69]
[50 68]
[54 66]
[55 65]
[56 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
