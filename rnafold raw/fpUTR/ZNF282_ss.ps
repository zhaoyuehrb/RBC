%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCCGAAGGGGACUGUUUGCUCCUACGGGCUGUAGAUGGAGCUGUCCGGCCCCGGAGAGGGGGAAGGCGCCUGGAAAACGUUCUUCUUCUCCCUGGCCGACCCGAGCGGGGAACAGCACUCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[-18.02480888 245.36257935]
[-23.48183823 250.61871338]
[-30.38397980 253.57337952]
[-37.81657791 253.88795471]
[-44.81322098 251.57023621]
[-56.10585785 261.44323730]
[-67.39849854 271.31625366]
[-72.69515991 286.22451782]
[-87.36948395 288.77664185]
[-98.66212463 298.64965820]
[-109.95475769 308.52264404]
[-121.24739838 318.39566040]
[-132.54003906 328.26867676]
[-137.00157166 336.36065674]
[-144.22996521 338.24050903]
[-147.11906433 354.02130127]
[-161.32579041 361.47436523]
[-175.95198059 354.88238525]
[-179.77766418 339.30215454]
[-169.86810303 326.68548584]
[-153.82505798 326.71081543]
[-142.41304016 316.97604370]
[-131.12040710 307.10302734]
[-119.82777405 297.23001099]
[-108.53513336 287.35702515]
[-97.24249268 277.48400879]
[-92.75356293 263.28192139]
[-77.27150726 260.02362061]
[-65.97886658 250.15060425]
[-54.68623352 240.27760315]
[-50.09410095 218.30892944]
[-27.47957230 213.27784729]
[-17.46978951 202.10627747]
[-7.46000767 190.93469238]
[-22.26879120 188.54722595]
[-29.85168648 175.60507202]
[-24.69457054 161.51947021]
[-10.54758930 156.53318787]
[2.30186105 164.27215576]
[4.50954628 179.11000061]
[15.80218410 169.23699951]
[27.09482193 159.36398315]
[38.14369202 149.21891785]
[48.94224548 138.80780029]
[59.74079895 128.39668274]
[70.53935242 117.98557281]
[81.33789825 107.57446289]
[84.05873108 87.69055176]
[102.60790253 80.02889252]
[109.94916534 66.94815063]
[117.29043579 53.86740875]
[124.63170624 40.78666687]
[131.97297668 27.70592499]
[127.92113495 12.66530228]
[135.55256653 -0.49585053]
[149.91647339 -4.26596928]
[157.25773621 -17.34671021]
[164.59899902 -30.42745209]
[171.94027710 -43.50819397]
[179.28153992 -56.58893204]
[186.62280273 -69.66967773]
[193.96408081 -82.75041962]
[201.30534363 -95.83115387]
[208.64660645 -108.91189575]
[215.98788452 -121.99263763]
[223.32914734 -135.07337952]
[230.67041016 -148.15412903]
[230.67715454 -163.97532654]
[243.65341187 -171.28736877]
[235.26281738 -184.08801270]
[233.79360962 -199.32283020]
[239.58341980 -213.49099731]
[251.30175781 -223.33676147]
[266.25585938 -226.59762573]
[281.00939941 -222.52427673]
[292.17208862 -212.05273438]
[297.17883301 -197.58929443]
[294.87911987 -182.45755005]
[285.80142212 -170.13464355]
[272.03170776 -163.45231628]
[256.73416138 -163.94609070]
[257.25250244 -149.06051636]
[243.75115967 -140.81285095]
[236.40988159 -127.73210907]
[229.06861877 -114.65137482]
[221.72735596 -101.57063293]
[214.38607788 -88.48989105]
[207.04481506 -75.40914917]
[199.70355225 -62.32840729]
[192.36227417 -49.24766541]
[185.02101135 -36.16692352]
[177.67974854 -23.08618355]
[170.33847046 -10.00544262]
[162.99720764 3.07529855]
[167.26179504 17.30023575]
[160.00305176 30.67054749]
[145.05371094 35.04719162]
[137.71244812 48.12793350]
[130.37117004 61.20867538]
[123.02990723 74.28941345]
[115.68864441 87.37015533]
[119.48576355 94.90575409]
[119.86254120 103.33554840]
[132.66644287 111.14965057]
[145.47033691 118.96375275]
[161.33871460 116.60280609]
[172.97967529 127.64217377]
[171.46325684 143.61340332]
[157.95274353 152.26472473]
[142.81222534 146.95959473]
[137.65623474 131.76765442]
[124.85233307 123.95354462]
[112.04843903 116.13944244]
[102.20281219 120.01984406]
[91.74901581 118.37301636]
[80.95046234 128.78411865]
[70.15190887 139.19523621]
[59.35335922 149.60635376]
[48.55480576 160.01747131]
[46.30827713 166.41387939]
[41.80537033 170.09162903]
[36.96783066 170.65661621]
[25.67519379 180.52963257]
[14.38255692 190.40263367]
[3.71157503 200.94447327]
[-6.29820681 212.11605835]
[-16.30798912 223.28762817]
[-14.13960838 230.76229858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 30]
[6 29]
[7 28]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[15 21]
[32 127]
[33 126]
[34 125]
[40 124]
[41 123]
[42 122]
[43 119]
[44 118]
[45 117]
[46 116]
[47 115]
[49 101]
[50 100]
[51 99]
[52 98]
[53 97]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
[67 83]
[69 81]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
