%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCCUGCGCAGUGGAGGCGGCCCAGGCCCGCCUUCCGCAGGGUGUCGCCGCUGUGCCGCUAGCGGUGCCCCGCCUGCUGCGGUGGCACCAGCCAGGAGGCGGAGUGGAAGUGGCCGUGGGGCGGGU\
) } def
/len { sequence length } bind def

/coor [
[113.64253998 250.38087463]
[105.59761047 237.84577942]
[112.99656677 223.86129761]
[112.63130188 208.86573792]
[112.26603699 193.87019348]
[111.90077209 178.87463379]
[111.53550720 163.87908936]
[108.19300079 157.19990540]
[111.34841156 148.51493835]
[111.34841156 133.51493835]
[111.34841156 118.51493073]
[97.13246918 119.33337402]
[87.01231384 111.53963470]
[72.59674835 115.68589783]
[58.18118668 119.83216095]
[43.76562119 123.97843170]
[29.35005760 128.12469482]
[14.98604774 132.44618225]
[0.67572427 136.94224548]
[-13.63459969 141.43830872]
[-27.94492340 145.93438721]
[-42.25524902 150.43045044]
[-56.50976562 155.10043335]
[-66.89046478 167.79583740]
[-83.02954865 164.88688660]
[-88.32451630 149.36608887]
[-77.32835388 137.19989014]
[-61.35297012 140.90383911]
[-55.98276901 135.71301270]
[-46.75131607 136.12013245]
[-32.44099045 131.62405396]
[-18.13066864 127.12799072]
[-3.82034397 122.63191986]
[10.48997974 118.13585663]
[15.98499298 113.07734680]
[25.20379257 113.70912933]
[39.61935806 109.56286621]
[54.03492355 105.41660309]
[68.45048523 101.27033997]
[82.86605072 97.12406921]
[90.95376587 83.49544525]
[107.92510223 81.34498596]
[120.95255280 94.29212189]
[131.23139954 83.36759949]
[141.51025391 72.44307709]
[136.58258057 56.71134567]
[140.21040344 40.72593689]
[151.31860352 28.79930496]
[166.82720947 24.10038757]
[182.50491333 27.81296349]
[192.51469421 16.64138031]
[202.52447510 5.46979761]
[212.53425598 -5.70178509]
[222.54403687 -16.87336731]
[225.99063110 -32.31459808]
[240.24630737 -36.63027191]
[250.25608826 -47.80185318]
[260.26586914 -58.97343445]
[270.27566528 -70.14501953]
[273.58886719 -88.20986938]
[290.39114380 -93.11903381]
[300.12591553 -104.53105164]
[303.19549561 -120.05162811]
[317.34182739 -124.71316528]
[327.07659912 -136.12518311]
[336.67172241 -147.65489197]
[346.12570190 -159.30056763]
[355.57968140 -170.94625854]
[365.03369141 -182.59194946]
[374.48767090 -194.23762512]
[383.94168091 -205.88331604]
[393.25317383 -217.64324951]
[402.42077637 -229.51570129]
[411.58837891 -241.38815308]
[420.75598145 -253.26060486]
[420.14474487 -269.29199219]
[432.39108276 -279.65573120]
[448.10064697 -276.40164185]
[455.22241211 -262.02597046]
[448.29315186 -247.55650330]
[432.62841797 -244.09298706]
[423.46081543 -232.22055054]
[414.29321289 -220.34809875]
[405.12561035 -208.47564697]
[403.51101685 -201.18341064]
[395.58737183 -196.42932129]
[386.13336182 -184.78364563]
[376.67938232 -173.13795471]
[367.22537231 -161.49226379]
[357.77139282 -149.84657288]
[348.31738281 -138.20089722]
[346.52569580 -130.95013428]
[338.48864746 -126.39040375]
[328.75384521 -114.97838593]
[326.38058472 -100.27407074]
[311.53793335 -94.79627228]
[301.80316162 -83.38425446]
[302.43188477 -71.23926544]
[294.32516479 -61.64128876]
[281.44723511 -60.13523483]
[271.43743896 -48.96365356]
[261.42767334 -37.79207230]
[251.41789246 -26.62048912]
[248.68727112 -11.97832394]
[233.71562195 -6.86358595]
[223.70584106 4.30799723]
[213.69606018 15.47957993]
[203.68627930 26.65116310]
[193.67649841 37.82274628]
[198.78582764 50.54748917]
[197.88772583 64.29676056]
[191.10147095 76.36444092]
[179.71083069 84.35055542]
[165.92166138 86.63848114]
[152.43478394 82.72193146]
[142.15592957 93.64645386]
[131.87707520 104.57097626]
[126.34841156 118.51493073]
[126.34841156 133.51493835]
[126.34841156 148.51493835]
[126.53105927 163.51382446]
[126.89632416 178.50936890]
[127.26158905 193.50492859]
[127.62685394 208.50047302]
[127.99211884 223.49603271]
[136.06317139 237.10369873]
[128.63809204 250.01560974]
[131.29722595 269.21401978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[3 125]
[4 124]
[5 123]
[6 122]
[7 121]
[9 120]
[10 119]
[11 118]
[13 40]
[14 39]
[15 38]
[16 37]
[17 36]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[23 28]
[43 117]
[44 116]
[45 115]
[50 109]
[51 108]
[52 107]
[53 106]
[54 105]
[56 103]
[57 102]
[58 101]
[59 100]
[61 97]
[62 96]
[64 94]
[65 93]
[66 91]
[67 90]
[68 89]
[69 88]
[70 87]
[71 86]
[72 84]
[73 83]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
