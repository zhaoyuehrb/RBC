%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGCGGGGCCGGACUCGAGCGGGGCGGGGCUCGCGCCAGCGCCCCCAGCUCCGUGGCGGCUUCGCCCGCGAGUCCAGAGGCAGGCGAGCAGCUCGGUCGCCCCCACCGGCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.67153168 234.15135193]
[89.38305664 214.96028137]
[89.78924561 199.96577454]
[90.19543457 184.97128296]
[90.60162354 169.97677612]
[91.00781250 154.98228455]
[83.61799622 142.05015564]
[91.72616577 128.46456909]
[92.13235474 113.47006226]
[87.72951508 99.13078308]
[78.97859955 86.94794464]
[70.22767639 74.76511383]
[60.98920059 62.94773102]
[51.27840424 51.51530075]
[41.56761169 40.08287048]
[31.85681725 28.65044022]
[22.14602280 17.21800804]
[12.43522835 5.78557825]
[2.72443366 -5.64685249]
[-22.68967056 -8.82702923]
[-30.55125046 -36.88976669]
[-43.60880661 -44.27219009]
[-56.66636658 -51.65461731]
[-69.72392273 -59.03704071]
[-82.78147888 -66.41946411]
[-95.83903503 -73.80188751]
[-108.89659882 -81.18431091]
[-122.05291748 -88.38925171]
[-135.30560303 -95.41537476]
[-148.55828857 -102.44150543]
[-161.81095886 -109.46762848]
[-174.43623352 -106.43186188]
[-185.36785889 -112.66229248]
[-188.95198059 -124.30288696]
[-202.00953674 -131.68531799]
[-215.06709290 -139.06773376]
[-231.45176697 -138.37870789]
[-240.01116943 -152.36686707]
[-231.94013977 -166.64239502]
[-215.54145813 -166.51983643]
[-207.68467712 -152.12528992]
[-194.62710571 -144.74287415]
[-181.56954956 -137.36044312]
[-164.11631775 -138.52307129]
[-154.78483582 -122.72031403]
[-141.53215027 -115.69418335]
[-128.27947998 -108.66806030]
[-115.02679443 -101.64192963]
[-107.54383087 -101.28429413]
[-101.51416779 -94.24187469]
[-88.45661163 -86.85944366]
[-75.39905548 -79.47702026]
[-62.34149933 -72.09459686]
[-49.28393936 -64.71217346]
[-36.22638321 -57.32975006]
[-23.16882515 -49.94732285]
[-9.38963223 -55.87470245]
[-5.76956367 -70.43132019]
[-2.14949512 -84.98793793]
[1.47057331 -99.54455566]
[-3.57669902 -115.14766693]
[7.61170292 -127.13731384]
[23.52610970 -123.17958069]
[27.79514503 -107.34584045]
[16.02719116 -95.92448425]
[12.40712166 -81.36786652]
[8.78705406 -66.81124878]
[5.16698551 -52.25463486]
[16.15264702 -41.38587189]
[19.04235268 -27.44004440]
[14.15686417 -15.35764694]
[23.86765862 -3.92521620]
[33.57845306 7.50721455]
[43.28924561 18.93964577]
[53.00004196 30.37207603]
[62.71083450 41.80450821]
[72.42163086 53.23693848]
[76.02254486 53.85025787]
[79.47937775 56.32142639]
[81.88281250 60.54973221]
[82.41050720 66.01419830]
[91.16143036 78.19702911]
[99.91234589 90.37985992]
[113.80214691 78.66050720]
[137.73529053 83.44376373]
[151.66993713 88.99583435]
[165.60458374 94.54791260]
[179.53924561 100.09998322]
[193.47389221 105.65205383]
[209.15780640 103.57225037]
[218.11726379 115.47087097]
[233.36351013 110.47768402]
[246.69357300 119.40454865]
[247.88177490 135.40353394]
[236.01664734 146.20159912]
[220.20007324 143.51538086]
[212.56520081 129.40551758]
[197.87799072 131.88244629]
[187.92181396 119.58670807]
[173.98716736 114.03462982]
[160.05252075 108.48255920]
[146.11787415 102.93048859]
[132.18321228 97.37841797]
[125.91912842 101.50287628]
[134.16784668 114.03118134]
[121.63941193 122.27971649]
[113.39094543 109.75179291]
[107.12685394 113.87625122]
[106.72066498 128.87075806]
[114.08142853 142.87538147]
[106.00231171 155.38847351]
[105.59612274 170.38296509]
[105.18993378 185.37747192]
[104.78374481 200.37196350]
[104.37755585 215.36647034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 115]
[3 114]
[4 113]
[5 112]
[6 111]
[8 109]
[9 108]
[10 83]
[11 82]
[12 81]
[13 77]
[14 76]
[15 75]
[16 74]
[17 73]
[18 72]
[19 71]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 48]
[29 47]
[30 46]
[31 45]
[34 43]
[35 42]
[36 41]
[57 68]
[58 67]
[59 66]
[60 65]
[85 103]
[86 102]
[87 101]
[88 100]
[89 99]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
