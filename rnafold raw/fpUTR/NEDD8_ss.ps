%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAGAAGUGGCCCUUGCAGGCAAGAGUGCUGGAGGGCGGCAGCGGCGACCGGAGCGGUAGGAGCAGCAAUUUAUCCGUGUGCAGCCCCAAACUGGAAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[42.93892670 203.89985657]
[34.10007095 191.78067017]
[30.32023239 177.26472473]
[32.12586975 162.37379456]
[39.26549530 149.18191528]
[50.74469757 139.52644348]
[64.96812439 134.75175476]
[77.42703247 126.39856720]
[62.48858643 127.75605011]
[49.44525909 136.71051025]
[36.06999588 130.15675354]
[21.13154602 131.51423645]
[6.19309855 132.87171936]
[-8.74534988 134.22920227]
[-23.68379784 135.58668518]
[-38.62224579 136.94416809]
[-45.23072815 145.84701538]
[-55.47197342 149.47781372]
[-65.78289032 146.83540344]
[-72.72021484 139.05718994]
[-87.71337128 139.51023865]
[-102.70652771 139.96327209]
[-117.69968414 140.41632080]
[-131.35546875 149.49661255]
[-145.92489624 141.96908569]
[-146.42021179 125.57742310]
[-132.33184814 117.18395996]
[-118.15273285 125.42316437]
[-103.15957642 124.97012329]
[-88.16641998 124.51707458]
[-73.17326355 124.06403351]
[-57.70060349 112.63417053]
[-39.97972870 122.00572205]
[-25.04128075 120.64823914]
[-10.10283279 119.29075623]
[4.83561516 117.93327332]
[19.77406311 116.57579041]
[34.71251297 115.21830750]
[46.68733978 106.36095428]
[61.13110352 112.81760406]
[76.06954956 111.46012115]
[83.04351044 84.45405579]
[106.85853577 81.77198792]
[117.13994598 70.84986877]
[120.96511841 55.49804306]
[135.32258606 51.53415298]
[145.60400391 40.61203766]
[149.29159546 32.06766129]
[156.36470032 29.52126122]
[166.97131348 18.91465950]
[177.41650391 8.14907360]
[187.69792175 -2.77304101]
[197.97932434 -13.69515514]
[208.26074219 -24.61726952]
[217.51152039 -36.42502213]
[225.65576172 -49.02150726]
[226.65103149 -64.81137848]
[240.05880737 -71.29834747]
[248.20304871 -83.89482880]
[248.48747253 -100.29151154]
[262.95889282 -108.00579834]
[276.73031616 -99.10189819]
[275.63491821 -82.73937988]
[260.79953003 -75.75059509]
[252.65528870 -63.15410995]
[252.24255371 -48.26522446]
[238.25224304 -40.87727356]
[230.10801697 -28.28078651]
[245.07614136 -29.25796509]
[256.53277588 -19.57571793]
[258.06448364 -4.65412807]
[248.81387329 7.15375090]
[233.95936584 9.23791313]
[221.81646729 0.43165192]
[219.18286133 -14.33585835]
[208.90144348 -3.41374397]
[198.62002563 7.50837040]
[188.33862305 18.43048477]
[186.00700378 25.57727242]
[177.57791138 29.52126122]
[166.97131348 40.12786102]
[156.52610779 50.89344788]
[146.24470520 61.81556320]
[143.15492249 76.38616943]
[128.06205750 81.13127899]
[117.78065491 92.05339813]
[121.27026367 108.76211548]
[109.56965637 124.74716949]
[119.51649475 135.97483826]
[129.46333313 147.20249939]
[144.49237061 155.04878235]
[141.11317444 171.66255188]
[124.21321106 173.01455688]
[118.23567963 157.14933777]
[108.28883362 145.92167664]
[98.34199524 134.69401550]
[101.68833923 149.31597900]
[108.77124023 162.53840637]
[110.51290131 177.43695068]
[106.67074585 191.93653870]
[97.77990723 204.01763916]
[85.07872009 211.99760437]
[70.33621216 214.76496887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 41]
[9 40]
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[16 33]
[20 31]
[21 30]
[22 29]
[23 28]
[43 86]
[44 85]
[46 83]
[47 82]
[49 81]
[50 80]
[51 78]
[52 77]
[53 76]
[54 75]
[55 68]
[56 67]
[58 65]
[59 64]
[88 96]
[89 95]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
