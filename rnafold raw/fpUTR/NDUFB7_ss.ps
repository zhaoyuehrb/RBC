%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGACUGAGGGGUCAGUGGUUCCGGGUAGGAGCUAGGUGACCCUCGGCUGCUGCAGGGAUCUGCAGCGACUGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[141.61718750 193.69515991]
[144.78932190 179.03440857]
[153.17968750 166.60052490]
[165.58795166 158.17228699]
[180.24072266 154.95541382]
[167.25035095 147.45541382]
[154.25996399 139.95541382]
[141.26959229 132.45541382]
[128.27920532 124.95541382]
[115.28882599 117.45541382]
[102.29844666 109.95541382]
[94.05946350 108.91851807]
[88.94474030 101.88282013]
[76.26688385 93.86582947]
[63.58903503 85.84884644]
[45.30592346 85.65452576]
[37.53324890 70.05456543]
[24.54286957 62.55456924]
[11.55248833 55.05456924]
[-1.43789268 47.55456924]
[-14.42827415 40.05456924]
[-27.41865540 32.55456924]
[-40.40903473 25.05456734]
[-56.21521759 27.80122757]
[-68.12154388 17.04860306]
[-66.99449921 1.04518783]
[-53.69865799 -7.93256855]
[-38.43344879 -2.99769926]
[-32.90903473 12.06418705]
[-19.91865540 19.56418610]
[-6.92827368 27.06418610]
[6.06210709 34.56418610]
[19.05248833 42.06418610]
[32.04286957 49.56418610]
[45.03324890 57.06418610]
[56.97463608 54.24498749]
[67.92904663 60.61969757]
[71.60601807 73.17098999]
[84.28387451 81.18798065]
[96.96172333 89.20496368]
[109.79844666 96.96503448]
[122.78882599 104.46503448]
[135.77920532 111.96503448]
[148.76959229 119.46503448]
[161.75996399 126.96503448]
[174.75035095 134.46504211]
[187.74072266 141.96504211]
[195.87466431 141.71662903]
[201.97406006 145.77883911]
[216.97406006 145.77883911]
[231.97406006 145.77883911]
[246.97406006 145.77883911]
[261.97406006 145.77883911]
[276.97406006 145.77883911]
[291.97406006 145.77883911]
[306.97406006 145.77883911]
[320.89785767 137.11514282]
[335.23330688 145.07926941]
[335.23330688 161.47842407]
[320.89785767 169.44255066]
[306.97406006 160.77883911]
[291.97406006 160.77883911]
[276.97406006 160.77883911]
[261.97406006 160.77883911]
[246.97406006 160.77883911]
[231.97406006 160.77883911]
[216.97406006 160.77883911]
[201.97406006 160.77883911]
[213.05424500 170.88969421]
[219.58660889 184.39260864]
[220.63659668 199.35580444]
[216.05401611 213.63865662]
[206.49444580 225.19784546]
[193.32550049 232.37968445]
[178.43113708 234.15673828]
[163.94215393 230.27478027]
[151.93138123 221.28915405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[13 40]
[14 39]
[15 38]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
