%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUUUACCCGGCCUAACAGCUGAGGCGCUUUACGGCGACGGCGGCUGAGUGAGAACCUUGGCGGCUGUGGAGGCUGCCGCGGCUGCGAAGGAGGCGGCGGCGGUGGCGGAGGAAGAGGAGUGGCGGCAGCGGCGGCGGGGACCCGUGCGGGG\
) } def
/len { sequence length } bind def

/coor [
[85.15426636 509.82492065]
[71.30875397 504.05413818]
[61.94610214 492.33489990]
[59.37495041 477.55688477]
[64.22929382 463.36410522]
[75.31214905 453.25616455]
[89.89070892 449.72549438]
[104.37020111 453.64270020]
[115.17962646 464.04080200]
[113.96485901 449.09008789]
[112.75009155 434.13934326]
[104.00749207 422.08047485]
[110.60177612 407.69903564]
[109.38700867 392.74832153]
[108.17224121 377.79757690]
[96.92596436 373.05401611]
[88.73256683 363.90954590]
[85.20621490 352.07312012]
[87.08105469 339.79244995]
[94.05935669 329.42727661]
[104.85681915 322.99584961]
[104.24893951 308.00817871]
[103.64105225 293.02050781]
[103.03317261 278.03280640]
[92.85649109 263.76666260]
[101.46717834 247.52053833]
[92.97077179 235.28697205]
[99.85516357 221.04212952]
[98.94365692 206.06983948]
[98.03214264 191.09756470]
[97.12062836 176.12528992]
[96.20911407 161.15299988]
[95.29759979 146.18072510]
[77.96444702 140.85592651]
[63.99364471 129.29701233]
[55.51697159 113.26772308]
[53.82786560 95.21395111]
[59.18406296 77.89047241]
[43.53517151 75.56176758]
[38.20680237 61.65286255]
[26.34516525 52.47127151]
[14.48353004 43.28968430]
[2.62189364 34.10809326]
[-9.23974228 24.92650223]
[-24.88863182 22.59780502]
[-30.21700096 8.68889618]
[-42.07863617 -0.49269390]
[-53.94027328 -9.67428398]
[-65.80191040 -18.85587311]
[-77.66354370 -28.03746223]
[-89.52518463 -37.21905136]
[-104.76680756 -33.72237015]
[-118.66658783 -40.88687897]
[-124.66146851 -55.32971191]
[-119.92084503 -70.23140717]
[-106.68310547 -78.55583954]
[-91.19869995 -76.37246704]
[-80.77888489 -64.71221161]
[-80.34358978 -49.08068848]
[-68.48195648 -39.89909744]
[-56.62031937 -30.71751022]
[-44.75868225 -21.53591919]
[-32.89704895 -12.35433006]
[-21.03541183 -3.17274022]
[-6.23494625 -1.50077033]
[-0.05815256 13.06486702]
[11.80348396 22.24645615]
[23.66511917 31.42804718]
[35.52675629 40.60963821]
[47.38839340 49.79122543]
[62.18885803 51.46319580]
[68.36565399 66.02883148]
[83.73325348 56.52397156]
[101.56569672 53.60688782]
[119.16090393 57.71960068]
[127.47864532 45.23701096]
[135.79640198 32.75442123]
[144.11413574 20.27182961]
[152.43188477 7.78923798]
[160.74963379 -4.69335270]
[169.06738281 -17.17594337]
[177.38513184 -29.65853500]
[178.59878540 -45.43312073]
[192.09503174 -51.73395157]
[200.41278076 -64.21653748]
[208.73052979 -76.69913483]
[217.04827881 -89.18172455]
[225.36602783 -101.66431427]
[220.79782104 -116.61976624]
[226.95909119 -130.99240112]
[240.94068909 -137.99591064]
[256.14093018 -134.32344055]
[265.38269043 -121.70902252]
[264.30233765 -106.10880280]
[253.40997314 -94.88872528]
[237.84861755 -93.34656525]
[229.53086853 -80.86397552]
[221.21311951 -68.38138580]
[212.89537048 -55.89879227]
[204.57763672 -43.41620255]
[203.95892334 -28.53445244]
[189.86772156 -21.34078789]
[181.54997253 -8.85819626]
[173.23222351 3.62439466]
[164.91447449 16.10698509]
[156.59674072 28.58957672]
[148.27899170 41.07216644]
[139.96124268 53.55475998]
[131.64349365 66.03734589]
[138.20947266 73.64077759]
[142.98580933 82.47879791]
[145.74880981 92.13747406]
[146.36903381 102.16441345]
[144.81745911 112.08997345]
[141.16674805 121.44926453]
[135.58789062 129.80393982]
[128.34217834 136.76266479]
[119.76899719 141.99951172]
[110.26988220 145.26921082]
[111.18138885 160.24150085]
[112.09290314 175.21377563]
[113.00441742 190.18605042]
[113.91593170 205.15832520]
[114.82744598 220.13061523]
[123.38905334 233.43510437]
[116.43945312 246.60902405]
[125.58377075 255.75978088]
[126.00389862 268.28768921]
[118.02085114 277.42492676]
[118.62873077 292.41259766]
[119.23661804 307.40029907]
[119.84449768 322.38796997]
[135.19956970 331.93847656]
[141.73333740 348.63174438]
[137.02381897 365.76623535]
[123.12297058 376.58282471]
[124.33773804 391.53353882]
[125.55250549 406.48428345]
[134.38198853 419.61251831]
[127.70082092 432.92459106]
[128.91558838 447.87530518]
[130.13035583 462.82604980]
[136.36961365 472.48995972]
[133.51910400 482.30096436]
[137.42585754 496.78329468]
[141.33261108 511.26559448]
[153.32376099 522.45239258]
[149.36816406 538.36730957]
[133.53500366 542.63848877]
[122.11206818 530.87207031]
[126.85030365 515.17236328]
[122.94355011 500.69003296]
[119.03680420 486.20773315]
[112.37422943 499.64685059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 142]
[10 141]
[11 140]
[13 138]
[14 137]
[15 136]
[21 132]
[22 131]
[23 130]
[24 129]
[26 126]
[28 124]
[29 123]
[30 122]
[31 121]
[32 120]
[33 119]
[38 72]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[75 109]
[76 108]
[77 107]
[78 106]
[79 105]
[80 104]
[81 103]
[82 102]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
[144 153]
[145 152]
[146 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
