%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACACGGCGAGUCUGGGCGACUGCGCACGCGCGGCUGGUGAGUGGCGGGUUCGGGCGCAGCUGUAGGGUUGGCUGCGCGCCGCCGAGGCGUUUUGGACUGGGUUAUAAACAACUUGUGAA\
) } def
/len { sequence length } bind def

/coor [
[86.76245117 213.81660461]
[95.06477356 199.67434692]
[94.67855072 184.67932129]
[94.29233551 169.68429565]
[93.90611267 154.68927002]
[85.84368134 142.16543579]
[93.22309113 128.17062378]
[79.63755035 121.81190491]
[67.87575531 131.12104797]
[56.11396027 140.43019104]
[44.47299194 149.88998413]
[32.95478439 159.49888611]
[21.43657875 169.10778809]
[9.91837311 178.71669006]
[7.04818344 194.50090027]
[-7.14961386 201.97097778]
[-21.78368378 195.39651489]
[-25.62801933 179.82087708]
[-15.73357677 167.19235229]
[0.30947521 167.19847107]
[11.82768154 157.58958435]
[23.34588814 147.98068237]
[34.86409378 138.37178040]
[38.02210999 131.59063721]
[46.80481720 128.66839600]
[58.56661606 119.35924530]
[70.32841492 110.05010223]
[68.78609467 95.12960815]
[55.36878967 88.42320251]
[39.56541443 89.17414093]
[31.64033508 76.56294250]
[18.22302818 69.85653687]
[4.80572176 63.15013123]
[-10.99765301 63.90107346]
[-18.92273521 51.28987503]
[-32.34004211 44.58346939]
[-45.75734711 37.87705994]
[-62.08549500 39.40138626]
[-71.34764862 25.86829185]
[-64.01568604 11.19946575]
[-47.63211441 10.48493958]
[-39.05094147 24.45975494]
[-25.63363457 31.16616249]
[-12.21632767 37.87257004]
[2.62735176 36.64193726]
[11.51212883 49.73282623]
[24.92943573 56.43923187]
[38.34674072 63.14563751]
[53.19042206 61.91500854]
[62.07519913 75.00589752]
[75.49250031 81.71230316]
[85.92118073 74.05518341]
[98.16197205 71.60095215]
[109.85441589 74.43518829]
[115.14569855 60.39943314]
[120.25582886 46.29671860]
[125.18396759 32.12937927]
[130.11210632 17.96204185]
[135.04023743 3.79470420]
[139.96836853 -10.37263393]
[144.89651489 -24.53997231]
[149.82464600 -38.70730972]
[154.75277710 -52.87464905]
[159.68092346 -67.04198456]
[152.57276917 -81.15756989]
[157.60704041 -96.13861847]
[171.79698181 -103.09712982]
[186.72396851 -97.90475464]
[193.53207397 -83.64202881]
[188.18215942 -68.77077484]
[173.84825134 -62.11385345]
[168.92012024 -47.94651413]
[163.99198914 -33.77917480]
[159.06384277 -19.61183739]
[154.13571167 -5.44449854]
[149.20758057 8.72284031]
[144.27943420 22.89017868]
[139.35130310 37.05751801]
[134.42317200 51.22485352]
[135.20664978 58.66415787]
[129.18145752 65.69071198]
[123.89016724 79.72647095]
[131.77699280 92.48570251]
[146.69749451 94.02801514]
[161.61798096 95.57032776]
[176.14057922 89.29298401]
[188.00483704 98.29791260]
[202.92532349 99.84022522]
[217.44792175 93.56288147]
[229.31217957 102.56780243]
[241.41772461 92.40751648]
[257.15454102 93.86623383]
[267.18627930 106.07852173]
[265.56124878 121.79904175]
[253.24359131 131.70109558]
[237.54113770 129.90997314]
[227.76986694 117.48830414]
[214.31448364 123.87596130]
[201.38301086 114.76071930]
[186.46252441 113.21840668]
[173.00714111 119.60607147]
[160.07566833 110.49082947]
[145.15516663 108.94851685]
[130.23468018 107.40619659]
[124.73053741 112.50074768]
[137.08508301 121.00752258]
[151.42295837 125.41493225]
[157.72955322 139.02474976]
[151.82328796 152.81300354]
[137.62030029 157.63743591]
[124.53784180 150.29920959]
[121.25019073 135.66406250]
[113.72225189 122.68984985]
[108.21811676 127.78440094]
[116.30817413 141.38078308]
[108.90113831 154.30305481]
[109.28736115 169.29808044]
[109.67357635 184.29310608]
[110.05979919 199.28813171]
[119.07913971 212.98423767]
[111.48675537 227.51998901]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 119]
[3 118]
[4 117]
[5 116]
[7 114]
[8 27]
[9 26]
[10 25]
[11 23]
[12 22]
[13 21]
[14 20]
[28 51]
[29 50]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[54 82]
[55 81]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[83 104]
[84 103]
[85 102]
[87 100]
[88 99]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
