%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACUCGGGUUGCGCACUUCCCGGCGCUGGGAACGCGGAGCGGACGCAGUCUGGCCGCCAUUGCGCUGCGGGGAAAGCGGCCUCUUGUGUGAGGGCCUGUGGGAUUCUCCGGAU\
) } def
/len { sequence length } bind def

/coor [
[69.95872498 327.87286377]
[55.58837509 321.70623779]
[48.59005737 307.72207642]
[52.26816177 292.52319336]
[64.88600159 283.28610229]
[65.70514679 268.30847168]
[66.52428436 253.33085632]
[67.34342194 238.35324097]
[68.16255951 223.37562561]
[55.13543701 213.49003601]
[50.47388077 197.64279175]
[56.18664932 181.96736145]
[70.22712708 172.65266418]
[62.84035492 159.71879578]
[70.95172119 146.13511658]
[71.36144257 131.14071655]
[71.77116394 116.14630890]
[67.52730560 101.75917053]
[59.04528809 89.38761902]
[50.56327057 77.01605988]
[42.08125687 64.64450836]
[33.59923935 52.27294922]
[19.41418839 45.26617050]
[18.59882164 30.39389992]
[10.11680508 18.02234459]
[1.63478827 5.65078926]
[-12.55026054 -1.35598969]
[-13.36562729 -16.22826004]
[-21.84764481 -28.59981537]
[-36.03269196 -35.60659409]
[-36.84806061 -50.47886658]
[-45.33007812 -62.85042191]
[-60.61100388 -65.87217712]
[-69.03673553 -78.53952026]
[-66.06179047 -93.08892822]
[-74.54380798 -105.46048737]
[-83.02582550 -117.83203888]
[-91.50784302 -130.20359802]
[-104.10250854 -133.37077332]
[-110.89700317 -143.96299744]
[-108.67041016 -155.93925476]
[-116.81133270 -168.53788757]
[-124.95226288 -181.13650513]
[-133.09318542 -193.73513794]
[-141.23411560 -206.33375549]
[-154.90882874 -216.35565186]
[-149.06413269 -232.27029419]
[-132.15345764 -231.05961609]
[-128.63548279 -214.47468567]
[-120.49456024 -201.87605286]
[-112.35363770 -189.27743530]
[-104.21270752 -176.67880249]
[-96.07178497 -164.08018494]
[-80.07243347 -157.01274109]
[-79.13628387 -138.68560791]
[-70.65426636 -126.31405640]
[-62.17224884 -113.94249725]
[-53.69023132 -101.57094574]
[-39.04664993 -99.10091400]
[-30.26844025 -86.67523193]
[-32.95852280 -71.33243561]
[-24.47650528 -58.96088409]
[-10.89814568 -52.83900070]
[-9.47608852 -37.08183289]
[-0.99407172 -24.71027756]
[12.58428669 -18.58839607]
[14.00634384 -2.83122778]
[22.48836136 9.54032803]
[30.97037888 21.91188431]
[44.54873657 28.03376579]
[45.97079468 43.79093170]
[54.45281219 56.16249084]
[62.93482590 68.53404236]
[71.41684723 80.90560150]
[79.89886475 93.27715302]
[88.05886078 83.65642548]
[99.73115540 80.71518707]
[110.39817810 84.90201569]
[116.32044220 94.03081512]
[131.25192261 95.46283722]
[146.18341064 96.89485931]
[161.11489868 98.32688141]
[170.09452820 96.01003265]
[176.43275452 100.00740051]
[191.31954956 101.84673309]
[206.20635986 103.68607330]
[221.08744812 96.79512024]
[234.33811951 106.45700073]
[232.32720947 122.73238373]
[217.12338257 128.87857056]
[204.36701965 118.57287598]
[189.48022461 116.73353577]
[174.59341431 114.89420319]
[159.68287659 113.25836945]
[144.75138855 111.82634735]
[129.81991577 110.39432526]
[114.88842010 108.96230316]
[103.40140533 118.98438263]
[86.76556396 116.55603027]
[86.35584259 131.55043030]
[85.94612122 146.54483032]
[93.30358887 160.55120850]
[85.22152710 173.06237793]
[96.79883575 180.68310547]
[103.01779175 192.94819641]
[102.33441162 206.57403564]
[95.03666687 217.97225952]
[83.14017487 224.19476318]
[82.32103729 239.17237854]
[81.50189972 254.14999390]
[80.68276215 269.12762451]
[79.86362457 284.10522461]
[91.39884949 294.66326904]
[93.39749908 310.17260742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 112]
[6 111]
[7 110]
[8 109]
[9 108]
[13 103]
[15 101]
[16 100]
[17 99]
[18 75]
[19 74]
[20 73]
[21 72]
[22 71]
[24 69]
[25 68]
[26 67]
[28 65]
[29 64]
[31 62]
[32 61]
[35 58]
[36 57]
[37 56]
[38 55]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
[79 97]
[80 96]
[81 95]
[82 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
