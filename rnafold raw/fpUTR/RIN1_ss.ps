%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGACACACAAGAGUUAACUGGCGGGUGUGACAGGCGGACCGCCCUCAGGAAGUGUUACUCACUGGGGAUGUGCGUGCCUUGCCUUGGGACUGGAUUCUCUUCCUGAAGCGAAGGAGCUCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[18.32407570 270.66799927]
[14.32338428 285.12463379]
[10.32269287 299.58129883]
[14.95890617 315.31143188]
[3.45982623 327.00344849]
[-12.34527969 322.62957764]
[-16.19747353 306.68930054]
[-4.13394785 295.58059692]
[-0.13325654 281.12396240]
[3.86743474 266.66732788]
[-8.57203007 275.04940796]
[-23.44905281 276.96624756]
[-37.60695267 272.01104736]
[-48.04164124 261.23529053]
[-52.53902817 246.92536926]
[-50.14484406 232.11767578]
[-41.36709213 219.95416260]
[-28.06828117 213.01574707]
[-13.07021999 212.77465820]
[0.44473293 219.28202820]
[9.60890770 231.15713501]
[12.47781181 245.88002014]
[19.87128448 232.82872009]
[27.26475716 219.77742004]
[34.49751282 206.63636780]
[41.56846619 193.40754700]
[48.63941574 180.17872620]
[47.81532288 165.30693054]
[61.14436722 156.78361511]
[68.21531677 143.55479431]
[63.65935135 129.42048645]
[70.64185333 115.90384674]
[85.49810791 111.22096252]
[80.54731750 91.24709320]
[98.38051605 75.72771454]
[93.67529297 61.48479462]
[88.97006989 47.24187088]
[84.26483917 32.99895096]
[70.42789459 25.84515572]
[65.85902405 11.33377934]
[72.76434326 -1.81354463]
[67.88468933 -15.99765491]
[62.83134460 -30.12081528]
[50.89719772 -40.50766754]
[53.89451599 -55.09757233]
[48.84117126 -69.22073364]
[43.78782272 -83.34389496]
[38.73447418 -97.46705627]
[33.68112564 -111.59021759]
[28.62777901 -125.71337891]
[14.61944008 -132.52543640]
[9.69581699 -146.92031860]
[16.27640724 -160.23315430]
[11.22305870 -174.35630798]
[6.16971064 -188.47947693]
[-4.85922718 -201.35575867]
[4.46073914 -215.51820374]
[20.64972305 -210.48301697]
[20.29287148 -193.53282166]
[25.34622002 -179.40965271]
[30.39956665 -165.28649902]
[43.93200302 -159.17022705]
[49.25800323 -144.91931152]
[42.75093842 -130.76672363]
[47.80428696 -116.64356232]
[52.85763550 -102.52040100]
[57.91098404 -88.39723969]
[62.96433258 -74.27407837]
[68.01767731 -60.15092087]
[79.59037781 -50.77425003]
[76.95450592 -35.17416382]
[82.00785065 -21.05100250]
[87.27893829 -15.75733566]
[87.00727081 -6.51877069]
[100.38552856 -0.07223597]
[105.36019135 14.30508518]
[98.50776672 28.29372406]
[103.21298981 42.53664780]
[107.91821289 56.77956772]
[112.62344360 71.02249146]
[124.56099701 80.10515594]
[139.54292297 80.84117126]
[154.52485657 81.57718658]
[169.50679016 82.31320190]
[183.66999817 75.26236725]
[196.00228882 83.61484528]
[210.98420715 84.35086060]
[225.96614075 85.08687592]
[240.94807434 85.82289124]
[255.93000793 86.55890656]
[270.91192627 87.29492188]
[277.11404419 84.54885101]
[282.88037109 85.31204224]
[286.60552979 88.45254517]
[301.53332520 89.92280579]
[316.46109009 91.39305878]
[332.81658936 86.92834473]
[341.63449097 101.40871429]
[330.16104126 113.89056396]
[314.99081421 106.32083130]
[300.06304932 104.85057831]
[285.13528442 103.38031769]
[270.17593384 102.27684784]
[255.19400024 101.54083252]
[240.21206665 100.80481720]
[225.23013306 100.06880188]
[210.24819946 99.33278656]
[195.26626587 98.59677124]
[182.17466736 105.70025635]
[168.77078247 97.29513550]
[153.78884888 96.55912018]
[138.80691528 95.82310486]
[123.82498169 95.08708954]
[116.05854034 114.04078674]
[98.72692871 118.29191589]
[103.08694458 133.24610901]
[95.72754669 146.56129456]
[81.44413757 150.62574768]
[74.37318420 163.85456848]
[74.69152069 179.67256165]
[61.86823654 187.24967957]
[54.79728317 200.47850037]
[47.72633362 213.70732117]
[46.41456223 222.85630798]
[40.31606293 227.17088318]
[32.92258835 240.22219849]
[25.52911758 253.27349854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[22 127]
[23 126]
[24 125]
[25 123]
[26 122]
[27 121]
[29 119]
[30 118]
[33 115]
[35 80]
[36 79]
[37 78]
[38 77]
[41 74]
[42 72]
[43 71]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[53 61]
[54 60]
[55 59]
[81 113]
[82 112]
[83 111]
[84 110]
[86 108]
[87 107]
[88 106]
[89 105]
[90 104]
[91 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
