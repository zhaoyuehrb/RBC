%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGAAGUGCUCGUUGGGGGUGCACAAGGCGCGUUCGAGCAGCGGCGACCGACGCGGCGAAGGAGCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[-41.25798416 183.84403992]
[-48.45319748 193.29347229]
[-58.25050735 199.95893860]
[-69.62935638 203.16705322]
[-81.41105652 202.60343933]
[-92.38087463 198.34355164]
[-101.41326904 190.84298706]
[-107.58738708 180.88893127]
[-122.30698395 183.77571106]
[-137.02658081 186.66247559]
[-151.74617004 189.54925537]
[-166.46577454 192.43601990]
[-181.18536377 195.32279968]
[-191.29164124 207.78245544]
[-207.33230591 207.50544739]
[-217.00233459 194.70426941]
[-212.88371277 179.19889832]
[-198.13589478 172.88372803]
[-184.07214355 180.60321045]
[-169.35253906 177.71643066]
[-154.63294983 174.82965088]
[-139.91334534 171.94288635]
[-125.19375610 169.05610657]
[-110.47415924 166.16932678]
[-105.69458771 148.31922913]
[-92.73091888 135.04223633]
[-74.85157776 129.79421997]
[-56.61776733 133.99299622]
[-42.71988297 146.63623047]
[-28.71232605 141.27076721]
[-14.70476818 135.90528870]
[-0.69720936 130.53981018]
[13.31034946 125.17433929]
[27.31790733 119.80886841]
[41.32546616 114.44338989]
[55.33302307 109.07791901]
[69.34058380 103.71244812]
[70.76808929 90.03617859]
[77.99054718 78.33514404]
[89.57615662 70.92895508]
[103.22819519 69.28582001]
[116.24027252 73.73147583]
[126.03287506 83.38460541]
[140.25830078 78.62673187]
[150.89164734 66.91168213]
[165.41590881 70.21246338]
[179.64134216 65.45458984]
[193.86676025 60.69672394]
[202.28475952 47.03960419]
[218.22758484 45.24910355]
[229.46525574 56.69873810]
[227.37721252 72.60533142]
[213.56520081 80.76670074]
[198.62463379 74.92214966]
[184.39920044 79.68001556]
[170.17378235 84.43788147]
[160.55792236 95.81262207]
[145.01617432 92.85215759]
[130.79074097 97.61003113]
[127.88726044 113.26962280]
[117.56730652 125.40023804]
[102.57541656 130.77578735]
[86.89862061 127.96669006]
[74.70605469 117.72000122]
[60.69849777 123.08547974]
[46.69094086 128.45095825]
[32.68338013 133.81642151]
[18.67582321 139.18190002]
[4.66826439 144.54737854]
[-9.33929443 149.91284180]
[-23.34685326 155.27832031]
[-37.35441208 160.64379883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[29 72]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[37 64]
[43 59]
[44 58]
[46 56]
[47 55]
[48 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
