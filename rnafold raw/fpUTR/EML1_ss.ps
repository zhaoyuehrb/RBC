%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCAGUGUGUGGUGAGCGGCGGCGGCGCGGCCGGGCCGGGGAGCGGGCGCGGCCCGGCGGCCUCAGC\
) } def
/len { sequence length } bind def

/coor [
[6.25495386 216.47685242]
[-3.27754951 210.86351013]
[-15.41280460 219.68028259]
[-27.54805946 228.49705505]
[-39.68331528 237.31384277]
[-51.81856918 246.13061523]
[-51.68390274 261.64712524]
[-60.72270966 274.25979614]
[-75.45938110 279.11883545]
[-90.22736359 274.35580444]
[-99.34806824 261.80224609]
[-99.31439972 246.28518677]
[-90.13930511 233.77131653]
[-75.35079193 229.07243347]
[-60.63534927 233.99536133]
[-48.50009155 225.17858887]
[-36.36483765 216.36180115]
[-24.22958374 207.54502869]
[-12.09432793 198.72825623]
[-13.74705124 179.64337158]
[-3.91649199 163.04403687]
[13.86158562 155.21022034]
[33.01102829 159.21211243]
[43.37696838 148.37019348]
[53.74290848 137.52827454]
[56.94577026 122.98210907]
[72.07503510 118.35437012]
[82.44097137 107.51245117]
[82.22079468 93.02459717]
[92.23396301 82.55165100]
[106.71710205 82.12161255]
[117.08303833 71.27968597]
[127.44898224 60.43776321]
[137.81492615 49.59584045]
[148.18086243 38.75391769]
[152.12516785 23.43226624]
[166.51298523 19.58001900]
[176.87892151 8.73809528]
[187.24487305 -2.10382748]
[191.18916321 -17.42547989]
[205.57699585 -21.27772713]
[208.93713379 -37.32894135]
[224.60025024 -42.18680954]
[236.45346069 -30.85397148]
[232.30322266 -14.98867989]
[216.41891479 -10.91178799]
[213.21604919 3.63437796]
[198.08679199 8.26211262]
[187.72085571 19.10403442]
[177.35490417 29.94595909]
[174.15205383 44.49212265]
[159.02278137 49.11985779]
[148.65684509 59.96178055]
[138.29090881 70.80370331]
[127.92496490 81.64562988]
[117.55902863 92.48754883]
[117.77920532 106.97540283]
[107.76603699 117.44834900]
[93.28289795 117.87838745]
[82.91696167 128.72030640]
[78.97265625 144.04196167]
[64.58483124 147.89421082]
[54.21889114 158.73612976]
[43.85295105 169.57806396]
[48.10935593 180.08576965]
[48.44219971 191.37870789]
[44.83716965 202.04454041]
[37.77071762 210.75888062]
[28.14728928 216.44972229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[23 64]
[24 63]
[25 62]
[27 60]
[28 59]
[31 56]
[32 55]
[33 54]
[34 53]
[35 52]
[37 50]
[38 49]
[39 48]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
