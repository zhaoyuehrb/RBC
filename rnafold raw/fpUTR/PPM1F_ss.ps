%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGACGGGAAGUGGGCGGGGCCGGCCGGCAGCAGCUUGCGGGACACGGAGCCGCGAGGAGACAGCUGAGGCCCGCGGAGACCAGGGGGUGAAGCCUGGAGACCCUCUUGCCCUGGCCUAGCUGCAGGCCCCCGGGAUGCUUUGGGC\
) } def
/len { sequence length } bind def

/coor [
[91.70558167 99.63716125]
[82.03668976 88.16926575]
[72.36780548 76.70137787]
[62.69891357 65.23348236]
[54.71684265 60.64813995]
[52.94963837 53.41802597]
[43.52634048 41.74748993]
[34.10303879 30.07695198]
[24.67973900 18.40641594]
[15.25643921 6.73587990]
[10.25273514 4.81688547]
[6.86542368 1.47754526]
[5.36650610 -2.40894055]
[5.63342428 -5.99052143]
[-3.02808666 -18.23708153]
[-11.68959808 -30.48364067]
[-38.07796860 -52.65188599]
[-51.74639511 -58.83040237]
[-65.47962952 -64.86351013]
[-79.27611542 -70.75051880]
[-93.07260895 -76.63752747]
[-106.86909485 -82.52453613]
[-120.66558838 -88.41154480]
[-130.58886719 -83.74880981]
[-141.21643066 -85.32413483]
[-149.03271484 -92.37001038]
[-151.58874512 -102.35070801]
[-165.12295532 -108.81795502]
[-178.65716553 -115.28520203]
[-192.19137573 -121.75244141]
[-207.97892761 -120.72116852]
[-216.12657166 -133.18974304]
[-229.72865295 -139.51298523]
[-244.36094666 -134.17129517]
[-258.13467407 -140.63191223]
[-263.13696289 -154.61448669]
[-276.80538940 -160.79301453]
[-290.47381592 -166.97152710]
[-304.14224243 -173.15003967]
[-317.81066895 -179.32856750]
[-331.47909546 -185.50708008]
[-345.14752197 -191.68560791]
[-358.03735352 -183.20881653]
[-373.46408081 -183.06929016]
[-386.50512695 -191.31156921]
[-392.99908447 -205.30555725]
[-390.87380981 -220.58583069]
[-380.80746460 -232.27650452]
[-366.01214600 -236.64714050]
[-351.20901489 -232.30305481]
[-341.12170410 -220.63046265]
[-338.96902466 -205.35403442]
[-325.30056763 -199.17550659]
[-311.63214111 -192.99699402]
[-297.96371460 -186.81848145]
[-284.29528809 -180.63995361]
[-270.62686157 -174.46144104]
[-256.95843506 -168.28291321]
[-243.15721130 -173.76576233]
[-229.20747375 -167.69458008]
[-223.55012512 -153.18141174]
[-216.10801697 -153.29306030]
[-209.65931702 -146.72395325]
[-194.83981323 -148.21780396]
[-185.72412109 -135.28665161]
[-172.18992615 -128.81941223]
[-158.65571594 -122.35216522]
[-145.12150574 -115.88491821]
[-126.05671692 -118.86120605]
[-114.77857208 -102.20803070]
[-100.98208618 -96.32102203]
[-87.18560028 -90.43401337]
[-73.38910675 -84.54700470]
[-59.59261703 -78.65999603]
[-52.15454865 -78.92958069]
[-45.56787491 -72.49883270]
[-31.89944839 -66.32031250]
[-39.84555054 -79.04270935]
[-34.07608414 -92.88876343]
[-19.44712830 -96.20443726]
[-8.27167988 -86.19897461]
[-9.95600510 -71.29376984]
[-0.28711620 -82.76165771]
[9.38177204 -94.22955322]
[19.05066109 -105.69744873]
[28.71954918 -117.16534424]
[24.87054825 -132.19746399]
[30.62358475 -146.60865784]
[43.76649857 -154.85749817]
[59.24557114 -153.77215576]
[71.10877991 -143.76997375]
[74.79448700 -128.69697571]
[68.88545227 -114.34904480]
[55.65383148 -106.24326324]
[40.18744278 -107.49645233]
[30.51855469 -96.02856445]
[20.84966660 -84.56066895]
[11.18077755 -73.09277344]
[1.51188910 -61.62487793]
[16.48773766 -62.47572708]
[23.86585808 -49.41573715]
[15.40777969 -37.02780151]
[0.55696207 -39.14515305]
[9.21847343 -26.89859200]
[17.87998390 -14.65203285]
[26.92697525 -2.68741989]
[36.35027695 8.98311615]
[45.77357483 20.65365219]
[55.19687653 32.32418823]
[64.62017822 43.99472427]
[74.16680908 55.56459045]
[83.83569336 67.03248596]
[93.50458527 78.50038147]
[103.17346954 89.96827698]
[114.84400940 99.39157104]
[128.09153748 106.42739868]
[141.33908081 113.46322632]
[154.58660889 120.49904633]
[167.83415222 127.53487396]
[182.87039185 122.66795349]
[196.90583801 129.93304443]
[201.61352539 145.01991272]
[194.20043945 158.97776794]
[179.06465149 163.52566528]
[165.18594360 155.96543884]
[160.79832458 140.78240967]
[147.55078125 133.74658203]
[134.30325317 126.71076202]
[121.05571747 119.67493439]
[107.80818176 112.63910675]
[96.76097870 122.78599548]
[102.64799500 136.58248901]
[108.53500366 150.37898254]
[114.42201233 164.17546082]
[120.30902100 177.97195435]
[126.19602966 191.76844788]
[139.62924194 201.17486572]
[137.93029785 217.48576355]
[122.84692383 223.92189026]
[109.89559937 213.86231995]
[112.39953613 197.65545654]
[106.51252747 183.85896301]
[100.62551880 170.06246948]
[94.73851013 156.26599121]
[88.85150146 142.46949768]
[82.96449280 128.67300415]
[80.48432159 115.62821198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[4 111]
[6 110]
[7 109]
[8 108]
[9 107]
[10 106]
[14 105]
[15 104]
[16 103]
[17 77]
[18 76]
[19 74]
[20 73]
[21 72]
[22 71]
[23 70]
[27 68]
[28 67]
[29 66]
[30 65]
[32 63]
[33 61]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[115 130]
[116 129]
[117 128]
[118 127]
[119 126]
[131 146]
[132 145]
[133 144]
[134 143]
[135 142]
[136 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
