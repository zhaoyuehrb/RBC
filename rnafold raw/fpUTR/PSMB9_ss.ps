%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGUUGUGCGCUGUCCCAGGUUGGAAACCAGUGCCCCAGGCGGCGAGGAGAGCGGUGCCUUGCAGGG\
) } def
/len { sequence length } bind def

/coor [
[143.86874390 146.47625732]
[156.97015381 139.17390442]
[143.76121521 132.06587219]
[130.55227661 124.95784760]
[115.67823792 125.74022675]
[107.19232941 112.38732147]
[93.21233368 112.61360168]
[85.69963837 100.82160950]
[69.88080597 101.09557343]
[62.33968735 88.25108337]
[49.13075638 81.14305878]
[35.92182159 74.03502655]
[22.71289062 66.92699432]
[9.50395679 59.81896591]
[-3.70497584 52.71093750]
[-17.36213875 46.50755692]
[-31.40566254 41.23693466]
[-45.44918442 35.96631241]
[-59.73317337 42.72968674]
[-74.58758545 37.33320618]
[-81.19956207 22.97850800]
[-75.64633179 8.18198109]
[-61.22253036 1.72214234]
[-46.48554230 7.43149900]
[-40.17856216 21.92279053]
[-26.13504028 27.19341278]
[-12.09151649 32.46403503]
[-8.49963188 31.09558487]
[-4.01891088 31.62173271]
[0.33748671 34.46016312]
[3.40305424 39.50200272]
[16.61198807 46.61003494]
[29.82092094 53.71806335]
[43.02985382 60.82609177]
[56.23878479 67.93412018]
[69.44771576 75.04215240]
[84.32176208 74.25977325]
[92.80767059 87.61267853]
[106.78766632 87.38639832]
[114.30036163 99.17839050]
[130.11920166 98.90442657]
[137.66030884 111.74891663]
[150.86924744 118.85694122]
[164.07817078 125.96497345]
[178.12170410 131.23559570]
[192.74562073 134.57341003]
[207.36953735 137.91122437]
[221.99345398 141.24903870]
[236.61737061 144.58685303]
[251.24128723 147.92466736]
[262.18856812 137.05450439]
[277.27963257 133.85083008]
[291.69897461 139.33593750]
[300.84542847 151.75955200]
[301.80038452 167.15731812]
[294.25915527 180.61590576]
[280.62808228 187.84068298]
[265.25680542 186.52629089]
[253.05024719 177.09211731]
[247.90347290 162.54858398]
[233.27955627 159.21076965]
[218.65563965 155.87295532]
[204.03172302 152.53514099]
[189.40780640 149.19732666]
[174.78388977 145.85951233]
[179.84565735 159.97966003]
[173.81407166 173.71356201]
[159.99208069 179.54043579]
[145.94868469 174.26945496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 44]
[3 43]
[4 42]
[6 40]
[8 38]
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[15 31]
[16 27]
[17 26]
[18 25]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
