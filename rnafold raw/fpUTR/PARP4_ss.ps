%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCGCCCAGCCCCGGGGGCAGGGAGAGCCUAGAUUACGGAAGUACCGCGAGCAAGGAGCGCGGAAUCGGGGAGCGUCCGGAGCUAGCUGGAUCCUCUAGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[36.17508316 221.22903442]
[24.70317459 221.31239319]
[14.10520744 217.05712891]
[3.11656404 227.26741028]
[-7.87207890 237.47767639]
[-18.70965385 247.84815979]
[-29.39382362 258.37661743]
[-40.07799149 268.90509033]
[-50.76216125 279.43356323]
[-48.31424332 294.75631714]
[-55.37033844 308.57629395]
[-69.21723175 315.57937622]
[-84.53050995 313.07275391]
[-95.42190552 302.02026367]
[-97.70346069 286.67184448]
[-90.49785614 272.92926025]
[-76.57581329 266.07678223]
[-61.29062271 268.74938965]
[-50.60645294 258.22091675]
[-39.92228699 247.69245911]
[-29.23811531 237.16400146]
[-26.64211273 230.11645508]
[-18.08235359 226.48904419]
[-7.09371138 216.27876282]
[3.89493203 206.06848145]
[0.48599678 187.85826111]
[8.63851643 171.05831909]
[25.31352043 162.33149719]
[44.05456543 165.25407410]
[54.10242844 154.11672974]
[64.15029144 142.97938538]
[74.19815826 131.84204102]
[84.24602509 120.70468903]
[94.29388428 109.56734467]
[85.50528717 110.32296753]
[76.06031036 104.97011566]
[69.57444763 93.53234863]
[59.85787201 82.10483551]
[50.14128876 70.67732239]
[34.52153397 65.68179321]
[31.30278778 49.60162735]
[43.79621887 38.97871780]
[59.14965820 44.74100494]
[61.56880188 60.96073914]
[71.28538513 72.38825226]
[81.00196075 83.81576538]
[95.42224121 79.68590546]
[97.61638641 64.84725189]
[99.81053925 50.00859833]
[102.00468445 35.16994095]
[104.19883728 20.33128548]
[95.04998779 7.72429323]
[97.48654938 -7.29295731]
[109.56176758 -15.93729687]
[105.89736176 -32.49049759]
[120.78924561 -40.59408188]
[132.69862366 -28.52746964]
[124.40042877 -13.74314690]
[133.45716858 -1.97408247]
[131.44337463 13.10568142]
[119.03749084 22.52543640]
[116.84334564 37.36408997]
[114.64919281 52.20274734]
[112.45503998 67.04140472]
[110.26089478 81.88005829]
[116.96504211 68.46162415]
[131.39363098 64.36093140]
[144.15287781 72.24774933]
[146.93579102 86.98733521]
[137.93055725 98.98341370]
[123.00049591 100.42601776]
[137.63829041 103.70246124]
[152.27607727 106.97891235]
[166.91386414 110.25535583]
[172.19622803 108.58104706]
[177.06843567 109.15370941]
[180.71066284 111.40564728]
[182.66816711 114.51805115]
[196.96098328 119.06945038]
[211.25381470 123.62085724]
[225.54663086 128.17225647]
[239.83944702 132.72366333]
[253.76194763 125.24437714]
[268.87100220 129.88034058]
[276.20266724 143.88111877]
[271.40722656 158.94032288]
[257.32971191 166.12356567]
[242.32205200 161.16915894]
[235.28804016 147.01649475]
[220.99522400 142.46508789]
[206.70240784 137.91368103]
[192.40959167 133.36227417]
[178.11676025 128.81086731]
[163.63742065 124.89314270]
[148.99963379 121.61669922]
[134.36184692 118.34025574]
[119.72405243 115.06380463]
[105.43122864 119.61521149]
[95.38336945 130.75254822]
[85.33550262 141.88989258]
[75.28763580 153.02723694]
[65.23977661 164.16458130]
[55.19190979 175.30192566]
[59.56365967 186.18849182]
[59.47938156 197.86788940]
[54.99102020 208.59452820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 21]
[7 20]
[8 19]
[9 18]
[29 103]
[30 102]
[31 101]
[32 100]
[33 99]
[34 98]
[37 46]
[38 45]
[39 44]
[47 65]
[48 64]
[49 63]
[50 62]
[51 61]
[54 58]
[71 97]
[72 96]
[73 95]
[74 94]
[78 93]
[79 92]
[80 91]
[81 90]
[82 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
