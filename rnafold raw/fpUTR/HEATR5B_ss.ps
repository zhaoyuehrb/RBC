%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGUGGGGCAUCCGGGUCUCUUGGUGGCUGCUUCUACCCCCGGAGCUCAGCUGAUCUUCCCUUCCAGACUACGAGGUGUGAAUUUCAAACUUCCGUA\
) } def
/len { sequence length } bind def

/coor [
[101.93133545 200.12678528]
[100.51970673 185.19335938]
[99.10808563 170.25991821]
[97.69645691 155.32649231]
[96.28483582 140.39306641]
[94.87320709 125.45963287]
[80.25173187 116.86661530]
[74.05181122 101.08090210]
[59.52305984 97.35055542]
[44.99431229 93.62020874]
[30.46556664 89.88986206]
[21.18897438 90.78577423]
[15.54268646 85.80742645]
[1.13828099 81.62255859]
[-13.26612473 77.43769073]
[-27.67053032 73.25282288]
[-42.07493591 69.06795502]
[-56.47933960 64.88308716]
[-51.32788086 78.97076416]
[-57.38330460 92.69416809]
[-71.26192474 98.38484955]
[-85.20855713 92.86294556]
[-91.43001556 79.21400452]
[-86.44982910 65.06488037]
[-73.05097961 58.32191467]
[-86.41607666 51.51205826]
[-99.78117371 44.70219803]
[-113.14627075 37.89234161]
[-126.51136780 31.08248520]
[-141.46279907 36.20402908]
[-155.61959839 29.17831421]
[-160.58277893 14.17357063]
[-153.40779114 0.09184567]
[-138.35140991 -4.71242142]
[-124.34632874 2.61105490]
[-119.70151520 17.71738625]
[-106.33641815 24.52724457]
[-92.97131348 31.33710098]
[-79.60621643 38.14695740]
[-66.24111938 44.95681763]
[-52.29447174 50.47868347]
[-37.89006805 54.66355133]
[-23.48566246 58.84841919]
[-9.08125782 63.03328323]
[5.32314777 67.21814728]
[19.72755241 71.40301514]
[34.19591522 75.36111450]
[48.72466278 79.09146118]
[63.25341034 82.82180786]
[77.78215790 86.55215454]
[87.42607880 77.27614594]
[100.40792847 74.03250885]
[113.28148651 77.68231201]
[122.62928772 87.25667572]
[137.26803589 83.98452759]
[151.90678406 80.71237946]
[160.39521790 67.65158081]
[175.28761292 64.54169464]
[187.68676758 72.71460724]
[202.32551575 69.44245148]
[216.96426392 66.17030334]
[231.54981995 62.66862488]
[246.01817322 58.71052933]
[260.42257690 54.52566528]
[274.82699585 50.34079742]
[289.23138428 46.15592957]
[294.36071777 31.51114655]
[307.13754272 22.70590591]
[322.64892578 23.12600517]
[334.93041992 32.60990524]
[339.25955200 47.51085281]
[333.97167969 62.09913254]
[321.10006714 70.76525116]
[305.59414673 70.17691040]
[293.41625977 60.56033707]
[279.01187134 64.74520111]
[264.60745239 68.93006897]
[250.20304871 73.11493683]
[244.55676270 78.09328461]
[235.28016663 77.19737244]
[229.48028564 81.99591064]
[220.23641968 80.80905914]
[205.59767151 84.08120728]
[190.95892334 87.35335541]
[183.21968079 100.02773285]
[168.42051697 103.55468750]
[155.17893982 95.35112762]
[140.54019165 98.62327576]
[125.90143585 101.89542389]
[121.01073456 115.26519012]
[109.80664062 124.04801178]
[111.21826172 138.98144531]
[112.62989044 153.91487122]
[114.04151154 168.84829712]
[115.45314026 183.78172302]
[116.86476135 198.71516418]
[126.80036163 211.76184082]
[120.22066498 226.78314209]
[103.89429474 228.32644653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[4 93]
[5 92]
[6 91]
[8 50]
[9 49]
[10 48]
[11 47]
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[54 89]
[55 88]
[56 87]
[59 84]
[60 83]
[61 82]
[62 80]
[63 78]
[64 77]
[65 76]
[66 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
