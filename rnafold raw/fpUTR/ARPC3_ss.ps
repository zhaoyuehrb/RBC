%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAGAAGCGGAACUGCAAGGCCGGAAGCUCCACGUCCGCACCCGCCCCUUCCGUUUCGCUUCCGCCUACCUCGCCCAGGCUGCCAGACCGGAAGCGCUCCGCUGUACCUGGAUCCUGCUCCUCUGGGUUGAAACCCGGGCGCCGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[-0.79070592 210.92053223]
[-10.25378036 199.28222656]
[-14.64445114 184.93920898]
[-13.31788254 169.99798584]
[-6.46889973 156.65289307]
[4.89902735 146.86248779]
[-9.98578167 148.71788025]
[-24.87059021 150.57327271]
[-39.75539780 152.42866516]
[-54.64020920 154.28405762]
[-69.52501678 156.13943481]
[-84.40982819 157.99482727]
[-99.29463196 159.85021973]
[-114.17944336 161.70561218]
[-129.06425476 163.56100464]
[-141.80139160 172.94586182]
[-155.38798523 166.84225464]
[-163.57723999 171.03266907]
[-170.59918213 168.57888794]
[-185.51916504 170.12625122]
[-200.43913269 171.67362976]
[-215.35911560 173.22099304]
[-229.97702026 184.37097168]
[-245.71488953 176.66760254]
[-260.59970093 178.52299500]
[-275.48449707 180.37838745]
[-285.18457031 192.56636047]
[-300.30630493 194.23594666]
[-311.86590576 184.91333008]
[-326.75070190 186.76870728]
[-333.32913208 200.72320557]
[-346.41973877 208.88653564]
[-361.84533691 208.65379333]
[-374.68368530 200.09925842]
[-380.83813477 185.95266724]
[-378.34481812 170.72811890]
[-367.99929810 159.28372192]
[-353.10284424 155.27134705]
[-338.40884399 159.97132874]
[-328.60610962 171.88391113]
[-313.72128296 170.02851868]
[-304.80398560 158.15344238]
[-289.73510742 156.05976868]
[-277.33990479 165.49357605]
[-262.45507812 163.63818359]
[-247.57028198 161.78280640]
[-239.86180115 152.40922546]
[-227.43118286 150.77377319]
[-216.90647888 158.30102539]
[-201.98651123 156.75364685]
[-187.06652832 155.20628357]
[-172.14656067 153.65890503]
[-157.24336243 151.95744324]
[-145.57087708 142.70529175]
[-130.91964722 148.67619324]
[-116.03482819 146.82080078]
[-101.15002441 144.96540833]
[-86.26521301 143.11001587]
[-71.38040924 141.25463867]
[-56.49559784 139.39924622]
[-41.61078644 137.54385376]
[-26.72597885 135.68846130]
[-11.84117031 133.83306885]
[3.04363799 131.97769165]
[17.50543404 127.99567413]
[31.24203491 121.97023773]
[44.97863388 115.94480896]
[58.71523285 109.91938019]
[72.45183563 103.89394379]
[75.55952454 86.70611572]
[88.29985046 74.75775909]
[105.65151215 72.75803375]
[120.77576447 81.49508667]
[134.25163269 74.90714264]
[147.72749329 68.31919098]
[161.13456726 61.59233475]
[174.47138977 54.72728729]
[187.80822754 47.86223984]
[201.14506531 40.99719620]
[214.48190308 34.13214874]
[227.74707031 27.12964630]
[232.35313416 12.24939156]
[245.83351135 5.19714308]
[259.99118042 9.68001652]
[273.18328857 2.54080558]
[277.78933716 -12.33944988]
[291.26971436 -19.39169884]
[305.42736816 -14.90882492]
[318.61947632 -22.04803658]
[331.73709106 -29.32319260]
[344.77883911 -36.73352051]
[357.82058716 -44.14384460]
[370.86233521 -51.55417252]
[380.44760132 -70.67390442]
[401.03796387 -69.90308380]
[413.59545898 -78.10730743]
[426.15295410 -86.31153107]
[438.71044922 -94.51575470]
[448.66339111 -108.24073029]
[464.60726929 -102.47618866]
[463.48168945 -85.55964661]
[446.91467285 -81.95825958]
[434.35717773 -73.75403595]
[421.79968262 -65.54981232]
[409.24218750 -57.34558868]
[408.84777832 -48.36565018]
[404.26431274 -40.47321701]
[396.42645264 -35.53272629]
[387.05346680 -34.77930069]
[378.27264404 -38.51242828]
[365.23092651 -31.10210228]
[352.18917847 -23.69177628]
[339.14743042 -16.28145027]
[334.85845947 -10.20414734]
[325.75869751 -8.85592937]
[312.56658936 -1.71671855]
[308.57598877 12.58750248]
[295.29901123 20.01560402]
[280.32247925 15.73291206]
[267.13037109 22.87212372]
[263.13977051 37.17634201]
[249.86280823 44.60444641]
[234.88629150 40.32175446]
[230.47264099 46.30911636]
[221.34693909 47.46898270]
[208.01011658 54.33403015]
[194.67327881 61.19907379]
[181.33644104 68.06412506]
[167.99960327 74.92916870]
[163.46316528 80.82403564]
[154.31544495 81.79505157]
[140.83958435 88.38300323]
[127.36371613 94.97095490]
[126.90294647 107.09195709]
[121.32857513 117.86494446]
[111.70014954 125.24224091]
[99.84781647 127.82159424]
[88.02440643 125.11273193]
[78.47726440 117.63054657]
[64.74066925 123.65597534]
[51.00406647 129.68141174]
[37.26746750 135.70683289]
[23.53086662 141.73226929]
[38.30550003 144.32269287]
[51.02085876 152.28004456]
[59.80950546 164.43568420]
[63.38068771 179.00437927]
[61.20992661 193.84648132]
[53.61602402 206.78218079]
[41.71427155 215.91171265]
[27.25261497 219.89424133]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 64]
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[13 57]
[14 56]
[15 55]
[17 53]
[19 52]
[20 51]
[21 50]
[22 49]
[24 46]
[25 45]
[26 44]
[29 41]
[30 40]
[65 143]
[66 142]
[67 141]
[68 140]
[69 139]
[73 133]
[74 132]
[75 131]
[76 129]
[77 128]
[78 127]
[79 126]
[80 125]
[81 123]
[84 120]
[85 119]
[88 116]
[89 115]
[90 113]
[91 112]
[92 111]
[93 110]
[95 105]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
