%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGGCACCCAGCAGUUGGCGUGAGGGGCUGCUGGAGCUUGGGGGCUGGUGGCAGGAACAAGCCUUUUCCGACCCC\
) } def
/len { sequence length } bind def

/coor [
[106.23434448 123.59177399]
[95.60148621 124.00191498]
[85.80503082 119.84796143]
[78.70782471 111.91981506]
[75.65943909 101.72505188]
[61.09531021 98.13531494]
[46.53118515 94.54557800]
[34.93202591 100.58832550]
[22.74618721 97.10388947]
[16.50731087 86.53881073]
[2.09953856 82.36554718]
[-12.30823326 78.19228363]
[-26.71600533 74.01902008]
[-41.12377548 69.84575653]
[-55.53154755 65.67250061]
[-69.93932343 61.49923706]
[-84.34709167 57.32597351]
[-98.75485992 53.15271378]
[-110.58792877 58.72350311]
[-122.62358093 54.75122833]
[-128.43199158 43.94349670]
[-144.38273621 47.75210953]
[-155.45843506 35.65827179]
[-150.26535034 20.10308075]
[-134.14569092 17.08838844]
[-123.68196869 29.71544838]
[-106.85099792 25.18869400]
[-94.58160400 38.74494171]
[-80.17382812 42.91820145]
[-65.76605988 47.09146500]
[-51.35828781 51.26472855]
[-36.95051575 55.43798828]
[-22.54274178 59.61125183]
[-8.13497066 63.78451157]
[6.27280045 67.95777130]
[20.68057251 72.13103485]
[37.31561661 66.93023682]
[50.12091827 79.98145294]
[64.68504333 83.57118988]
[79.24917603 87.16091919]
[94.72065735 76.17633057]
[113.38426208 79.59656525]
[123.95516205 95.35359955]
[138.84579468 97.16165161]
[153.73641968 98.96969604]
[168.62705994 100.77774811]
[183.25924683 94.76029205]
[194.96109009 103.97528076]
[209.85171509 105.78332520]
[224.74235535 107.59137726]
[243.52508545 97.68949127]
[260.01947021 109.81893921]
[275.01947021 109.81893921]
[290.01947021 109.81893921]
[299.03091431 97.18667603]
[313.75698853 92.29568481]
[328.53527832 97.02664185]
[337.68319702 109.56039429]
[337.68319702 125.07747650]
[328.53527832 137.61123657]
[313.75698853 142.34219360]
[299.03091431 137.45118713]
[290.01947021 124.81893921]
[275.01947021 124.81893921]
[260.01947021 124.81893921]
[254.53837585 132.40899658]
[245.97900391 136.53656006]
[236.34655762 136.08642578]
[227.96894836 131.03375244]
[222.93431091 122.48200989]
[208.04367065 120.67396545]
[193.15304565 118.86591339]
[179.58593750 125.01269531]
[166.81901550 115.66838074]
[151.92837524 113.86032867]
[137.03775024 112.05228424]
[122.14710999 110.24423218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 40]
[6 39]
[7 38]
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[21 26]
[43 77]
[44 76]
[45 75]
[46 74]
[48 72]
[49 71]
[50 70]
[52 65]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
