%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCAGGGCCUGACAUCUCCCCAGAACAGACGUUUGAACAGAGCAGGCUUCUGAGGUCUCCAAA\
) } def
/len { sequence length } bind def

/coor [
[136.06623840 278.33395386]
[145.73684692 265.83374023]
[143.60212708 250.98641968]
[141.46740723 236.13909912]
[137.93103027 221.56192017]
[133.02500916 207.38691711]
[128.11898804 193.21189880]
[123.21296692 179.03689575]
[117.97100067 164.98265076]
[112.39606476 151.05712891]
[106.82112885 137.13160706]
[101.24619293 123.20608521]
[95.67125702 109.28057098]
[89.79129028 103.31680298]
[90.17980194 94.55740356]
[84.21375275 87.16149139]
[85.39511871 79.58962250]
[81.16912842 65.19722748]
[76.94314575 50.80483627]
[63.01314163 48.14962006]
[51.68702316 39.72811127]
[45.19503784 27.27124596]
[44.78377533 13.29713345]
[50.47721100 0.60208708]
[61.08356094 -8.29893970]
[57.54717636 -22.87611389]
[54.01079178 -37.45328522]
[50.47440720 -52.03046036]
[38.77226257 -63.51922989]
[43.13218689 -79.32818604]
[59.06906891 -83.19442749]
[70.18840790 -71.14070129]
[65.05158234 -55.56684494]
[68.58796692 -40.98966980]
[72.12435150 -26.41249847]
[75.66073608 -11.83532429]
[91.12609100 -7.76318359]
[102.56534576 3.54499698]
[106.86470032 19.14102936]
[102.78917694 34.89276123]
[91.33553314 46.57884598]
[95.56152344 60.97124100]
[99.78751373 75.36363983]
[104.35481262 89.65138245]
[109.59677124 103.70563507]
[115.17170715 117.63114929]
[120.74665070 131.55667114]
[126.32158661 145.48219299]
[131.89651489 159.40771484]
[138.20771790 166.51136780]
[137.38796997 174.13087463]
[142.29399109 188.30587769]
[147.20001221 202.48089600]
[152.10603333 216.65591431]
[156.21461487 219.86018372]
[158.58879089 223.89268494]
[159.19413757 228.00555420]
[158.27990723 231.53614807]
[156.31472778 234.00437927]
[158.44944763 248.85169983]
[160.58416748 263.69903564]
[173.38476562 272.96835327]
[175.79922485 288.58712769]
[166.39508057 301.28900146]
[150.75164795 303.53817749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 61]
[3 60]
[4 59]
[5 54]
[6 53]
[7 52]
[8 51]
[9 49]
[10 48]
[11 47]
[12 46]
[13 45]
[15 44]
[17 43]
[18 42]
[19 41]
[25 36]
[26 35]
[27 34]
[28 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
