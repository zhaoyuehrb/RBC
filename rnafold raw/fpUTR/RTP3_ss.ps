%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUCCCACUACAGACCUGCCAGGGCCCAGGAGAGCUCGACCCACCCAGGCACACCAUAGCCCCAGAG\
) } def
/len { sequence length } bind def

/coor [
[5.35837746 281.82339478]
[-2.69683909 294.61419678]
[-14.16542816 304.46118164]
[-28.02760887 310.48873901]
[-43.05076981 312.16088867]
[-57.89905548 309.32897949]
[-71.25217438 302.24478149]
[-81.92276764 291.53823853]
[-88.96201324 278.16137695]
[-91.74399567 263.30364990]
[-90.02133942 248.28620911]
[-83.94721985 234.44436646]
[-74.06173706 223.00895691]
[-61.24391556 214.99679565]
[-46.63349533 211.12031555]
[-31.52963066 211.72421265]
[-17.27534676 216.75480652]
[-8.34843063 204.70033264]
[0.57848555 192.64587402]
[0.24556850 188.80941772]
[1.98707962 184.63694763]
[5.92674828 181.22448730]
[11.63504124 179.67042542]
[22.12022781 168.94378662]
[32.60541534 158.21714783]
[43.09060287 147.49050903]
[40.41517639 132.86244202]
[46.94358826 119.30354309]
[60.36103058 112.10454559]
[75.62109375 114.21088409]
[86.10627747 103.48424530]
[89.75681305 89.98738098]
[103.16707611 86.03057098]
[107.28055573 70.75346375]
[121.71009064 67.06053925]
[132.19528198 56.33389664]
[142.68046570 45.60725403]
[146.79394531 30.33015251]
[161.22348022 26.63722801]
[159.50340271 11.09453392]
[168.21936035 -1.88876355]
[183.25595093 -6.18234921]
[197.51335144 0.24107763]
[204.25965881 14.34857082]
[200.30947876 29.47900391]
[187.52793884 38.48824692]
[171.95011902 37.12241364]
[168.58660889 51.63227844]
[153.40710449 56.09244156]
[142.92192078 66.81908417]
[132.43673706 77.54573059]
[129.07322693 92.05558777]
[113.89372253 96.51575470]
[110.24318695 110.01261902]
[96.83292389 113.96942902]
[86.34774017 124.69607544]
[88.80090332 139.90423584]
[81.90919495 153.48207092]
[68.50241089 160.31744385]
[53.81724548 157.97569275]
[43.33205795 168.70233154]
[32.84687042 179.42897034]
[22.36168289 190.15560913]
[12.63295269 201.57278442]
[3.70603609 213.62725830]
[-5.22088003 225.68171692]
[3.74821162 237.84916687]
[8.73084164 252.12028503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 66]
[18 65]
[19 64]
[23 63]
[24 62]
[25 61]
[26 60]
[30 56]
[31 55]
[33 53]
[35 51]
[36 50]
[37 49]
[39 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
