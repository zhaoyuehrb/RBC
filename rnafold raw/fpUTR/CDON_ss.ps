%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCUCCAAGGGAAUGAAAGGUGAGGGGAGCGUGAGUGCAGGCAUGAUGGGAAUCUCCGUGACUUGUGAACCAAGGACUGGGUUUUGCUCUGGAAGCCUGUCCUGAUUGCUUCUGUAAUCUGGCGCU\
) } def
/len { sequence length } bind def

/coor [
[29.11178017 217.82026672]
[14.28973866 218.73823547]
[4.55496454 230.15025330]
[-5.17981005 241.56227112]
[-14.91458416 252.97428894]
[-17.98414040 268.49487305]
[-32.13049698 273.15640259]
[-41.86527252 284.56842041]
[-35.65379715 298.51046753]
[-36.11525726 313.76660156]
[-43.15802765 327.30773926]
[-55.38376236 336.44525146]
[-70.36502838 339.36489868]
[-85.12729645 335.48696899]
[-96.73949432 325.58142090]
[-102.89601898 311.61502075]
[-102.37448120 296.36083984]
[-95.27844238 282.84753418]
[-83.01681519 273.75823975]
[-68.02416992 270.89761353]
[-53.27729034 274.83364868]
[-43.54251480 263.42163086]
[-41.16925430 248.71731567]
[-26.32660294 243.23951721]
[-16.59182930 231.82749939]
[-6.85705376 220.41548157]
[2.87772059 209.00346375]
[1.44771993 194.22203064]
[11.15759659 182.50994873]
[26.67141724 181.11026001]
[36.40619278 169.69824219]
[46.14096451 158.28622437]
[55.87574005 146.87420654]
[65.61051178 135.46218872]
[67.98377228 120.75786591]
[82.82643127 115.28006744]
[78.28485870 105.07015228]
[79.16241455 94.26960754]
[84.92255402 85.49316406]
[77.26493835 72.59506989]
[69.60731506 59.69697571]
[61.94969559 46.79888153]
[54.29207611 33.90078735]
[46.47797012 21.09688950]
[38.50853729 8.38909054]
[30.53910637 -4.31870890]
[22.56967545 -17.02650833]
[7.42497778 -20.67011642]
[-0.47613126 -33.67115784]
[3.09082389 -48.08686066]
[-12.16277599 -53.05749893]
[-17.65186882 -68.13229370]
[-9.16569424 -81.74714661]
[6.78588390 -83.45791626]
[17.96617699 -71.95223999]
[15.79862309 -56.05628967]
[30.32905197 -52.98998642]
[38.59221649 -40.21599960]
[35.27747345 -24.99593925]
[43.24690628 -12.28814030]
[51.21633911 0.41965926]
[59.18576813 13.12745857]
[65.46966553 17.16432762]
[67.19017029 26.24316597]
[74.84779358 39.14126205]
[82.50540924 52.03935623]
[90.16303253 64.93745422]
[97.82064819 77.83554840]
[93.66022491 63.42406082]
[100.23768616 49.94307327]
[114.15707397 44.35284805]
[128.23178101 49.53962708]
[135.19500732 62.82546997]
[131.45161438 77.35086060]
[118.93232727 85.61675262]
[133.12892151 80.77354431]
[147.32551575 75.93034363]
[161.52210999 71.08713531]
[175.71871948 66.24392700]
[182.91970825 60.45331573]
[190.32037354 61.46021652]
[204.63069153 56.96414948]
[218.94100952 52.46808243]
[233.25134277 47.97201157]
[247.56166077 43.47594452]
[261.87197876 38.97987747]
[276.18231201 34.48381042]
[283.27102661 20.35845184]
[298.29772949 15.46216297]
[312.34735107 22.69982338]
[317.08450317 37.77745438]
[309.69869995 51.74977112]
[294.57183838 56.32723999]
[280.67837524 48.79413223]
[266.36804199 53.29019928]
[252.05772400 57.78627014]
[237.74740601 62.28233719]
[223.43708801 66.77840424]
[209.12675476 71.27447510]
[194.81643677 75.77053833]
[180.56192017 80.44052887]
[166.36532593 85.28372955]
[152.16873169 90.12693787]
[137.97212219 94.97014618]
[123.77553558 99.81334686]
[120.15851593 114.37072754]
[130.43737793 125.29524994]
[140.71623230 136.21977234]
[150.99508667 147.14428711]
[161.27394104 158.06881714]
[171.55278015 168.99333191]
[187.40396118 173.19720459]
[191.42712402 189.09518433]
[179.48359680 200.33282471]
[163.85986328 195.34977722]
[160.62826538 179.27218628]
[150.34941101 168.34767151]
[140.07055664 157.42314148]
[129.79170227 146.49862671]
[119.51284790 135.57409668]
[109.23400116 124.64958191]
[94.23844910 125.01484680]
[91.16889191 140.53543091]
[77.02253723 145.19696045]
[67.28775787 156.60897827]
[57.55298615 168.02099609]
[47.81821060 179.43301392]
[38.08343506 190.84503174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[4 25]
[5 24]
[7 22]
[8 21]
[30 128]
[31 127]
[32 126]
[33 125]
[34 124]
[36 122]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[44 62]
[45 61]
[46 60]
[47 59]
[50 56]
[75 105]
[76 104]
[77 103]
[78 102]
[79 101]
[81 100]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[106 121]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
