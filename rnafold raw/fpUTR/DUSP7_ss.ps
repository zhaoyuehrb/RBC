%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCUGGGGCCCGCGCGGCCGGGGCGCCGUCCCAGGGCAGGGCUGCCCGGCCCCGGCCCCGGGCCGCCCGCGCUCCCC\
) } def
/len { sequence length } bind def

/coor [
[146.89077759 416.20794678]
[142.81916809 401.77111816]
[138.74757385 387.33428955]
[134.67596436 372.89746094]
[130.78668213 369.71994019]
[129.02093506 363.96051025]
[130.89933777 357.16665649]
[120.82773590 346.19342041]
[125.72408295 331.14892578]
[122.79772949 316.43716431]
[119.87137604 301.72537231]
[116.94501495 287.01358032]
[114.01866150 272.30181885]
[111.09230804 257.59002686]
[106.57917023 251.48348999]
[108.35182190 242.24378967]
[104.08190155 235.96478271]
[106.21593475 226.80180359]
[104.45287323 211.90577698]
[102.68981171 197.00975037]
[100.92675018 182.11372375]
[99.16368866 167.21769714]
[97.40062714 152.32167053]
[95.63756561 137.42564392]
[93.87450409 122.52960968]
[92.11144257 107.63358307]
[87.19699097 93.46149445]
[79.35951233 80.67189026]
[71.52203369 67.88229370]
[56.03050995 65.75000763]
[45.57229233 54.12418365]
[45.08543777 38.49418259]
[54.79981995 26.24000931]
[70.12860870 23.14770889]
[83.83401489 30.67737389]
[89.44476318 45.27372360]
[84.31163788 60.04481125]
[92.14911652 72.83441162]
[99.98659515 85.62401581]
[107.46347046 85.03557587]
[129.89411926 83.27024078]
[135.63436890 69.41204834]
[141.37461853 55.55385971]
[141.84989929 38.60657501]
[158.26644897 34.37180710]
[166.88027954 48.97449493]
[155.23280334 61.29410934]
[149.49255371 75.15230560]
[143.75230408 89.01049805]
[126.43888855 106.06868744]
[107.00746918 105.87052155]
[108.77053070 120.76655579]
[110.53359222 135.66258240]
[112.29665375 150.55860901]
[114.05971527 165.45463562]
[115.82277679 180.35066223]
[117.58583832 195.24668884]
[119.34889984 210.14271545]
[121.11196136 225.03874207]
[123.16714478 239.89727783]
[125.80408478 254.66368103]
[128.73043823 269.37545776]
[131.65679932 284.08724976]
[134.58314514 298.79901123]
[137.50950623 313.51080322]
[140.43586731 328.22256470]
[150.71676636 340.24810791]
[145.61111450 354.24029541]
[149.11279297 368.82583618]
[153.18440247 383.26266479]
[157.25599670 397.69949341]
[161.32760620 412.13632202]
[175.93165588 417.38052368]
[184.63627625 430.22610474]
[184.09437561 445.73370361]
[174.51429749 457.94033813]
[159.57981873 462.15231323]
[145.03350830 456.75003052]
[136.46875000 443.81076050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[7 68]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[16 60]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 39]
[28 38]
[29 37]
[41 49]
[42 48]
[43 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
