%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGCCCGCCCGCCGGCCUCGGGGGGCCCGGGAGGCGUCCGGCGGGGCGGGGCGGCGCGGCCCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[71.69232178 104.40190887]
[56.78400040 102.74599457]
[41.87568283 101.09008789]
[26.96736336 99.43417358]
[17.76397133 101.64148712]
[11.44150162 97.36103058]
[-3.37897897 95.04729462]
[-18.19945908 92.73356628]
[-33.10777664 91.07765198]
[-48.07475281 90.08280945]
[-63.04172516 89.08796692]
[-78.00869751 88.09311676]
[-92.29164124 94.89811707]
[-104.47772980 86.33374023]
[-119.44470978 85.33889771]
[-134.41168213 84.34405518]
[-148.87942505 92.06520844]
[-162.65509033 83.16784668]
[-161.56745911 66.80480957]
[-146.73538208 59.80898666]
[-133.41683960 69.37708282]
[-118.44985962 70.37192535]
[-103.48288727 71.36676788]
[-90.27047729 64.49061584]
[-77.01385498 73.12614441]
[-62.04687881 74.12099457]
[-47.07990646 75.11583710]
[-32.11293411 76.11067963]
[-27.78068542 73.46967316]
[-21.69238472 73.75855255]
[-15.88572502 77.91308594]
[-1.06524491 80.22681427]
[13.75523567 82.54055023]
[28.62327385 84.52585602]
[43.53159332 86.18177032]
[58.43991089 87.83767700]
[73.34822845 89.49359131]
[82.14442444 77.59732056]
[95.70298004 71.67620850]
[110.40761566 73.30949402]
[122.33638000 82.06156158]
[128.30767822 95.59809113]
[143.21600342 97.25400543]
[158.12431335 98.90991211]
[173.03263855 100.56582642]
[187.94094849 102.22173309]
[202.84927368 103.87763977]
[217.41925049 97.71109009]
[229.21458435 106.80611420]
[244.12289429 108.46202087]
[258.69287109 102.29547119]
[270.48818970 111.39049530]
[285.28332520 104.31684875]
[298.65194702 113.81484985]
[296.84158325 130.11375427]
[281.71456909 136.44667053]
[268.83230591 126.29881287]
[255.32865906 132.58380127]
[242.46699524 123.37033844]
[227.55867004 121.71443176]
[214.05503845 127.99942780]
[201.19335938 118.78596497]
[186.28504944 117.13005066]
[171.37672424 115.47414398]
[156.46841431 113.81822968]
[141.56008911 112.16232300]
[126.65177155 110.50640869]
[117.85557556 122.40267944]
[104.29701996 128.32379150]
[89.59238434 126.69050598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[6 33]
[7 32]
[8 31]
[9 28]
[10 27]
[11 26]
[12 25]
[14 23]
[15 22]
[16 21]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[49 60]
[50 59]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
