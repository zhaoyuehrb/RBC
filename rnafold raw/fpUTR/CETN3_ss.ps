%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUGUGGGAGGUCCCUGAGGCCGCUGAGGUCGUUCGUGUCUGUUGAACGGCUGUGGGCGUCUUGCUGCCUUGGGUAGGGGGUUAAAAUCGUUCUUGAGAGGAACGUCUCUGUGCGAAGAGAUA\
) } def
/len { sequence length } bind def

/coor [
[120.78264618 147.29570007]
[122.83948517 162.15402222]
[109.94475555 169.81730652]
[97.87689209 160.90849304]
[101.40280914 146.32849121]
[103.24810028 131.44242859]
[105.09339142 116.55637360]
[97.60271454 116.18252563]
[88.84655762 128.36160278]
[80.09040070 140.54066467]
[78.99686432 156.90332031]
[64.16226196 163.89378357]
[50.84717178 154.32089233]
[52.74901199 138.03239441]
[67.91133118 131.78451538]
[76.66748810 119.60543823]
[85.42364502 107.42636871]
[81.27632141 101.17739105]
[66.30547333 102.11209869]
[72.98168182 88.67943573]
[68.83435822 82.43045807]
[54.21044159 85.76827240]
[39.58652496 89.10608673]
[24.96260452 92.44390106]
[15.24405670 105.20828247]
[-0.79754102 105.42440796]
[-10.85644722 92.92649078]
[-7.21632957 77.30185699]
[7.33042431 70.53639221]
[21.62479019 77.81998444]
[36.24871063 74.48217010]
[50.87262726 71.14435577]
[65.49654388 67.80654144]
[76.74326324 57.88125229]
[81.87356567 43.78586197]
[87.00386810 29.69047356]
[92.13417053 15.59508419]
[89.58342743 -0.01914864]
[101.20709229 -9.33255959]
[98.65634155 -24.94679260]
[110.28001404 -34.26020432]
[115.41031647 -48.35559082]
[108.31842804 -58.05939865]
[106.85826111 -69.86798859]
[111.28234863 -80.78347015]
[120.36420441 -88.09197998]
[131.73564148 -90.03830719]
[137.56216431 -103.86045074]
[143.38868713 -117.68259430]
[149.21520996 -131.50473022]
[155.04173279 -145.32687378]
[160.86825562 -159.14901733]
[151.82409668 -169.89773560]
[148.33335876 -183.43605042]
[151.02687073 -197.08758545]
[159.31866455 -208.17912292]
[171.53236389 -214.56410217]
[185.23973083 -215.03788757]
[191.40904236 -228.71047974]
[197.57835388 -242.38307190]
[196.20158386 -258.14425659]
[208.48873901 -266.56298828]
[214.65805054 -280.23556519]
[220.82736206 -293.90817261]
[226.99665833 -307.58074951]
[233.16596985 -321.25332642]
[239.33528137 -334.92593384]
[245.50457764 -348.59851074]
[239.68075562 -363.29064941]
[246.02818298 -377.76425171]
[260.78106689 -383.43243408]
[275.18676758 -376.93234253]
[280.69863892 -362.12036133]
[274.04660034 -347.78417969]
[259.17718506 -342.42919922]
[253.00787354 -328.75662231]
[246.83856201 -315.08404541]
[240.66925049 -301.41143799]
[234.49995422 -287.73886108]
[228.33064270 -274.06628418]
[222.16133118 -260.39367676]
[223.97937012 -245.61044312]
[211.25093079 -236.21376038]
[205.08163452 -222.54116821]
[198.91232300 -208.86859131]
[208.64697266 -196.03442383]
[210.62370300 -179.95358276]
[204.21359253 -164.97193909]
[191.06713867 -155.18589783]
[174.69039917 -153.32249451]
[168.86387634 -139.50035095]
[163.03735352 -125.67821503]
[157.21083069 -111.85607147]
[151.38430786 -98.03392792]
[145.55778503 -84.21178436]
[153.49787903 -67.80635834]
[146.91670227 -50.47132111]
[129.50570679 -43.22529221]
[124.37540436 -29.12990189]
[127.29309845 -14.52386475]
[115.30248260 -4.20225763]
[118.22018433 10.40377903]
[106.22956085 20.72538567]
[101.09925842 34.82077408]
[95.96895599 48.91616440]
[90.83865356 63.01155472]
[140.55580139 110.17790222]
[148.05580139 123.16828156]
[155.55580139 136.15866089]
[163.05580139 149.14904785]
[170.55580139 162.13941956]
[178.05580139 175.12980652]
[193.38452148 178.97764587]
[201.43093872 192.58026123]
[197.42123413 207.86743164]
[183.73432922 215.76957703]
[168.49038696 211.59848022]
[160.73339844 197.82879639]
[165.06542969 182.62980652]
[157.56542969 169.63941956]
[150.06542969 156.64904785]
[142.56542969 143.65866089]
[135.06542969 130.66828918]
[127.56542206 117.67790222]
[120.07474518 117.30406189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 17]
[9 16]
[10 15]
[21 33]
[22 32]
[23 31]
[24 30]
[34 106]
[35 105]
[36 104]
[37 103]
[39 101]
[41 99]
[42 98]
[47 95]
[48 94]
[49 93]
[50 92]
[51 91]
[52 90]
[58 85]
[59 84]
[60 83]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
