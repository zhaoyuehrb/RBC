%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACGCCGGGUUCCGGUCCUGGCCCCCCCGCCAUCCCCCCAACAGAACAGGGUCAUGAAAAGAGGCCGCCCGGCGGGGCCCGCAGGCG\
) } def
/len { sequence length } bind def

/coor [
[146.92926025 331.22036743]
[144.80760193 320.53598022]
[147.45178223 309.88424683]
[154.42724609 301.30520630]
[149.24169922 287.23004150]
[144.05615234 273.15487671]
[138.87060547 259.07971191]
[133.68507385 245.00456238]
[128.49952698 230.92939758]
[123.31397247 216.85423279]
[120.04706573 215.03359985]
[117.59066772 211.42070007]
[116.83461761 206.46128845]
[118.41134644 201.00759888]
[114.74256897 186.46318054]
[111.07379913 171.91876221]
[107.40502167 157.37434387]
[103.73625183 142.82992554]
[99.81136322 128.35252380]
[95.63157654 113.94664001]
[85.11898804 103.24684906]
[70.78911591 98.81347656]
[56.45924759 94.38010406]
[42.59891510 101.97396851]
[27.45214462 97.46276855]
[20.00524712 83.52292633]
[24.67633438 68.42469788]
[38.69413376 61.12559509]
[53.74213028 65.95604706]
[60.89262009 80.05023193]
[75.22248840 84.48360443]
[89.55236053 88.91697693]
[95.66632843 84.57308960]
[83.62513733 75.62828064]
[88.41124725 61.41233063]
[103.41040039 61.57124710]
[107.89427185 75.88530731]
[114.00823975 71.54141998]
[114.53761292 56.55076599]
[115.06698608 41.56010818]
[102.33277130 32.85130310]
[96.34945679 18.63147354]
[99.02630615 3.43811798]
[109.50913239 -7.88061953]
[124.45291901 -11.71297073]
[139.08914185 -6.83604670]
[148.74745178 5.19394350]
[150.34590149 20.53827477]
[143.37445068 34.30062485]
[130.05764771 42.08948135]
[129.52827454 57.08013535]
[128.99890137 72.07079315]
[143.98753357 71.48701477]
[157.29231262 78.41397095]
[165.40986633 91.02767181]
[166.20268250 106.00670624]
[159.46202087 119.40682983]
[146.96279907 127.69956207]
[131.99627686 128.70127869]
[118.50342560 122.14820862]
[110.03746033 109.76685333]
[114.21723938 124.17273712]
[119.72998810 131.74134827]
[118.28067017 139.16114807]
[121.94944000 153.70556641]
[125.61821747 168.24998474]
[129.28698730 182.79440308]
[132.95576477 197.33882141]
[137.38912964 211.66870117]
[142.57467651 225.74385071]
[147.76022339 239.81901550]
[152.94577026 253.89416504]
[158.13131714 267.96932983]
[163.31686401 282.04449463]
[168.50241089 296.11965942]
[187.05152893 303.25595093]
[194.59313965 321.32379150]
[186.85920715 338.98767090]
[193.50343323 352.43588257]
[200.14764404 365.88409424]
[214.08259583 374.52984619]
[213.29222107 390.90994263]
[198.58961487 398.17391968]
[185.09954834 388.84921265]
[186.69943237 372.52828979]
[180.05522156 359.08007812]
[173.41099548 345.63189697]
[162.78109741 345.02832031]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[9 70]
[10 69]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[19 62]
[20 61]
[21 32]
[22 31]
[23 30]
[38 52]
[39 51]
[40 50]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
