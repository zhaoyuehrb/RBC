%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGGUCGCCGCUCAGGGUGACCCGGAAGCAGUUGCGCCAGCAGCGUCGCGCGGCCCAGUUCCCUUUUCCGGUCGGCGUGGUCUUGCGAGUGGAGUGUCCGCUGUGCCCGGGCCUGCACC\
) } def
/len { sequence length } bind def

/coor [
[29.26550102 324.24005127]
[31.31276131 308.73706055]
[42.88103104 298.21524048]
[42.10884857 283.23510742]
[41.33666992 268.25500488]
[40.56448746 253.27490234]
[26.46177292 248.16476440]
[16.27267265 259.17303467]
[6.08357239 270.18133545]
[-4.10552740 281.18960571]
[-14.29462719 292.19787598]
[-13.43395138 307.97872925]
[-24.04615784 319.69012451]
[-39.83520889 320.38391113]
[-51.43374634 309.64846802]
[-51.96055984 293.85296631]
[-41.10309982 282.36856079]
[-25.30290794 282.00878906]
[-15.11380768 271.00051880]
[-4.92470789 259.99221802]
[5.26439190 248.98394775]
[15.45349216 237.97566223]
[43.81720352 232.39012146]
[49.10848618 218.35437012]
[54.39976883 204.31861877]
[59.69104767 190.28286743]
[64.98233032 176.24710083]
[58.62763977 162.82498169]
[63.79380798 148.51535034]
[77.91526031 141.94097900]
[83.20654297 127.90522766]
[88.49781799 113.86947632]
[83.02626801 99.90300751]
[69.60896301 93.19660187]
[56.19165421 86.49019623]
[42.77434921 79.78379059]
[29.35704231 73.07738495]
[13.02889252 74.60170746]
[3.76674438 61.06861496]
[11.09870148 46.39978790]
[27.48227501 45.68526077]
[36.06344986 59.66007614]
[49.48075485 66.36648560]
[62.89806366 73.07289124]
[76.31536865 79.77929688]
[89.73267365 86.48570251]
[93.87083435 81.74526978]
[100.03969574 78.45975494]
[106.04650116 64.71500397]
[112.05331421 50.97025299]
[118.06011963 37.22549820]
[124.06692505 23.48074341]
[122.50344086 7.73698092]
[134.68994141 -0.82680148]
[140.69676208 -14.57155514]
[146.70356750 -28.31630898]
[152.71037292 -42.06106186]
[147.18580627 -56.62529755]
[153.47337341 -70.47886658]
[167.39219666 -75.65592957]
[173.39900208 -89.40068817]
[179.40580750 -103.14543915]
[176.88838196 -121.33106232]
[191.29223633 -131.26664734]
[196.94316101 -145.16149902]
[190.57109070 -159.62429810]
[196.36988831 -174.32630920]
[210.89923096 -180.54512024]
[225.53912354 -174.59120178]
[231.60397339 -159.99691772]
[225.49560547 -145.42079163]
[210.83801270 -139.51058960]
[205.18710327 -125.61572266]
[209.60513306 -114.27512360]
[204.91683960 -102.60870361]
[193.15055847 -97.13863373]
[187.14375305 -83.39387512]
[181.13694763 -69.64912415]
[186.79225159 -55.91765976]
[180.89628601 -41.89295578]
[166.45512390 -36.05425262]
[160.44831848 -22.30949974]
[154.44151306 -8.56474686]
[148.43470764 5.18000698]
[150.42784119 19.94065285]
[137.81167603 29.48755264]
[131.80487061 43.23230743]
[125.79806519 56.97705841]
[119.79125977 70.72181702]
[113.78444672 84.46656799]
[120.14316559 98.05210114]
[134.54541016 102.24438477]
[148.94766235 106.43666840]
[163.34991455 110.62895203]
[177.75215149 114.82123566]
[194.64996338 113.44265747]
[200.65245056 129.29846191]
[187.07794189 139.45568848]
[173.55987549 129.22348022]
[159.15762329 125.03120422]
[144.75537109 120.83892059]
[130.35313416 116.64663696]
[115.95088196 112.45434570]
[102.53357697 119.16075897]
[97.24229431 133.19650269]
[91.95101166 147.23225403]
[98.21799469 161.49278259]
[92.65193939 175.65165710]
[79.01808167 181.53839111]
[73.72679901 195.57414246]
[68.43551636 209.60989380]
[63.14423752 223.64564514]
[57.85295868 237.68139648]
[55.54459763 252.50271606]
[56.31678009 267.48281860]
[57.08896255 282.46295166]
[57.86114120 297.44305420]
[70.44996643 306.71966553]
[74.08040619 321.92999268]
[67.03828430 335.89218140]
[52.64867401 342.01370239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 117]
[4 116]
[5 115]
[6 114]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[23 113]
[24 112]
[25 111]
[26 110]
[27 109]
[30 106]
[31 105]
[32 104]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[48 90]
[49 89]
[50 88]
[51 87]
[52 86]
[54 84]
[55 83]
[56 82]
[57 81]
[60 78]
[61 77]
[62 76]
[64 73]
[65 72]
[91 103]
[92 102]
[93 101]
[94 100]
[95 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
