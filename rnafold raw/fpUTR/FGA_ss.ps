%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAUGGGAACUAGGAGUGGCAGCAAUCCUUUCUUUCAGCUGGAGUGCUCCUCAGGAGCCAGCCCCACCCUUAGAAAAG\
) } def
/len { sequence length } bind def

/coor [
[128.78627014 212.86553955]
[124.15101624 198.59968567]
[119.51575470 184.33383179]
[108.22420502 174.62043762]
[111.31832886 159.10473633]
[106.68307495 144.83889771]
[102.04782104 130.57304382]
[97.41255951 116.30719757]
[92.24356079 130.38844299]
[77.77064514 134.32983398]
[66.17546844 124.81396484]
[67.21752930 109.85021210]
[80.01982880 102.03334808]
[65.12380219 100.27028656]
[50.22777176 98.50722504]
[35.33174515 96.74416351]
[20.71780777 102.80579376]
[8.98817825 93.62619781]
[-5.90784836 91.86313629]
[-20.75344658 98.83021545]
[-34.05343246 89.23634338]
[-32.12591934 72.95086670]
[-16.95376778 66.72689056]
[-4.14478731 76.96710968]
[10.75123978 78.73017120]
[24.29971313 72.54243469]
[37.09480667 81.84813690]
[51.99083328 83.61119843]
[66.88686371 85.37425995]
[81.78289032 87.13732147]
[70.60383606 77.13587952]
[66.87120819 62.60771561]
[71.84481049 48.45627594]
[83.84598541 39.45784378]
[98.82418823 38.64950943]
[111.72408295 46.30409241]
[118.19179535 59.83807755]
[116.04438782 74.68357086]
[106.00829315 85.82902527]
[117.41438293 76.08730316]
[128.82048035 66.34558105]
[140.22656250 56.60385895]
[141.66421509 51.83852768]
[144.39703369 48.28490829]
[147.81776428 46.21866608]
[151.29464722 45.66241837]
[154.26606750 46.40356827]
[167.05566406 38.56608963]
[179.84526062 30.72861290]
[192.63487244 22.89113426]
[205.42446899 15.05365467]
[215.77035522 1.62237906]
[231.54074097 7.84578753]
[229.92623901 24.72268486]
[213.26194763 27.84325790]
[200.47235107 35.68073654]
[187.68273926 43.51821518]
[174.89314270 51.35569382]
[162.10354614 59.19317245]
[149.96829224 68.00994873]
[138.56219482 77.75167084]
[127.15610504 87.49339294]
[115.75001526 97.23511505]
[111.67841339 111.67194366]
[116.31366730 125.93778992]
[120.94892120 140.20364380]
[125.58417511 154.46948242]
[137.20727539 165.20327759]
[133.78160095 179.69857788]
[138.41685486 193.96443176]
[143.05210876 208.23028564]
[157.99845886 212.05265808]
[168.48883057 223.36439514]
[171.17581177 238.55596924]
[165.20198059 252.77978516]
[152.47358704 261.49707031]
[137.05218506 261.92620850]
[123.85871124 253.93022156]
[117.10314941 240.06062317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[5 67]
[6 66]
[7 65]
[8 64]
[13 30]
[14 29]
[15 28]
[16 27]
[18 25]
[19 24]
[39 63]
[40 62]
[41 61]
[42 60]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
