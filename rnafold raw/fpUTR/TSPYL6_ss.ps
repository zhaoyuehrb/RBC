%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGACUGAAGAGUGGGCGGCGCAAAUGGGCGAGGUGUUUACUCGCCAUUUUGUGUGAGGAACGUUGACGCUACCUACCUCUGGCCUGGCCUCUACCCACUGCUGCCCUGGCCGCUACCAAC\
) } def
/len { sequence length } bind def

/coor [
[169.56550598 296.32202148]
[163.15182495 282.76235962]
[161.13578796 267.89846802]
[163.70591736 253.12028503]
[170.62188721 239.80978394]
[181.23696899 229.21165466]
[194.55850220 222.31697083]
[209.34075928 219.77044678]
[224.20489502 221.81126404]
[213.19660950 211.62216187]
[202.18833923 201.43305969]
[191.18005371 191.24397278]
[180.04150391 181.19744873]
[168.77452087 171.29516602]
[157.50753784 161.39288330]
[146.24055481 151.49060059]
[131.57290649 148.90039062]
[126.31494904 133.97845459]
[115.04797363 124.07616425]
[103.78099060 114.17388153]
[75.34643555 112.09928131]
[61.17910004 107.17115021]
[47.01176071 102.24301147]
[32.84442520 97.31488037]
[18.67708588 92.38674164]
[4.58264637 99.01882935]
[-9.71484566 93.81917572]
[-15.95066547 80.34141541]
[-30.11800385 75.41327667]
[-44.28534317 70.48513794]
[-58.45268250 65.55700684]
[-72.62001801 60.62886810]
[-86.78736115 55.70073318]
[-100.12306976 63.86730194]
[-115.58044434 61.50011444]
[-125.86098480 49.71688461]
[-126.11053467 34.08129120]
[-116.21125793 21.97598648]
[-100.83730316 19.11672401]
[-87.24776459 26.85355759]
[-81.85922241 41.53339386]
[-67.69188690 46.46152878]
[-53.52454376 51.38966751]
[-39.35720825 56.31780243]
[-25.18986893 61.24593735]
[-11.02253056 66.17407227]
[2.23152828 59.47589874]
[16.66942787 64.27191162]
[23.60522079 78.21940613]
[37.77256012 83.14753723]
[51.93989944 88.07567596]
[66.10723877 93.00380707]
[80.27457428 97.93194580]
[92.50000000 89.24063110]
[92.50000000 74.24063110]
[84.76270294 60.44045639]
[92.50000000 47.71318436]
[92.50000000 32.71318436]
[82.21823120 20.39795876]
[85.57711029 4.71046591]
[100.00000000 -2.31519389]
[114.42288971 4.71046591]
[117.78176880 20.39795876]
[107.50000000 32.71318436]
[107.50000000 47.71318436]
[115.23729706 60.44045639]
[107.50000000 74.24063110]
[107.50000000 89.24063110]
[113.68327332 102.90690613]
[124.95025635 112.80918884]
[136.21723938 122.71147156]
[151.69078064 126.00994873]
[156.14283752 140.22361755]
[167.40982056 150.12590027]
[178.67680359 160.02818298]
[189.94378662 169.93046570]
[198.56440735 173.30096436]
[201.36915588 180.23568726]
[212.37742615 190.42478943]
[223.38571167 200.61389160]
[234.39399719 210.80297852]
[247.44827271 218.19120789]
[261.85052490 222.38348389]
[276.25277710 226.57577515]
[290.65502930 230.76806641]
[308.36688232 225.93647766]
[320.06964111 238.94538879]
[334.57507324 242.76545715]
[349.08047485 246.58552551]
[362.62106323 238.88546753]
[377.27719116 242.96620178]
[384.53454590 255.92251587]
[396.46591187 246.00170898]
[411.95205688 245.02229309]
[425.03823853 253.36087036]
[430.69253540 267.81106567]
[426.74078369 282.81652832]
[414.70251465 292.60729980]
[399.20666504 293.41867065]
[386.21170044 284.93862915]
[380.71447754 270.42791748]
[368.01690674 278.12899780]
[353.25192261 274.46154785]
[345.26040649 261.09094238]
[330.75500488 257.27087402]
[316.24957275 253.45080566]
[305.57012939 259.28839111]
[293.39828491 256.13684082]
[286.46273804 245.17030334]
[272.06048584 240.97802734]
[257.65823364 236.78573608]
[243.25598145 232.59346008]
[252.65574646 244.28295898]
[258.08340454 258.26654053]
[259.03143311 273.23654175]
[255.41114807 287.79312134]
[247.56109619 300.57501221]
[236.21536255 310.38696289]
[222.43492126 316.31143188]
[207.50840759 317.79440308]
[192.83163452 314.69720459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 81]
[10 80]
[11 79]
[12 78]
[13 76]
[14 75]
[15 74]
[16 73]
[18 71]
[19 70]
[20 69]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[54 68]
[55 67]
[57 65]
[58 64]
[82 112]
[83 111]
[84 110]
[85 109]
[87 106]
[88 105]
[89 104]
[92 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
