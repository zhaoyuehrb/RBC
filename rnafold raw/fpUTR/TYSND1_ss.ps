%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCGGGCUCGAUGAGGAAGACGUGAGUCAGAGCUUGCGCCUCUCGCUUCCAGCUGUGGGUGGCGCUAGGCAGCUUCAGCCGGACCGGGUAGGGGUCCUCGCUCGCUAGCUUGCUGUUUCUCGGAGAAGCUCCCGAGUGUCCGGCCUAGAGGCC\
) } def
/len { sequence length } bind def

/coor [
[103.17425537 126.75731659]
[91.67256165 127.06462860]
[80.53408813 122.41635895]
[70.76350403 133.79772949]
[67.64519501 149.30859375]
[53.48425674 153.92564392]
[43.71366882 165.30702209]
[33.94308472 176.68838501]
[24.17249489 188.06976318]
[14.40190887 199.45112610]
[11.15952110 208.05508423]
[4.31612635 210.96156311]
[-5.68311977 222.14257812]
[-15.68236542 233.32359314]
[-13.27480125 248.77473450]
[-21.40650177 262.13174438]
[-36.23792267 267.08782959]
[-50.76612473 261.30291748]
[-58.13133621 247.50842285]
[-54.85592270 232.21771240]
[-42.48644257 222.65058899]
[-26.86338043 223.32434082]
[-16.86413383 212.14332581]
[-6.86488771 200.96231079]
[3.02053666 189.68054199]
[12.79112434 178.29917908]
[22.56171036 166.91780090]
[32.33229828 155.53642273]
[42.10288620 144.15505981]
[44.52234268 129.45826721]
[59.38213348 124.02714539]
[69.15271759 112.64577484]
[66.73116302 97.84252930]
[53.84330750 90.16768646]
[40.95544815 82.49285126]
[28.06759262 74.81800842]
[15.10262203 67.27416992]
[2.06186676 59.86210632]
[-10.97888851 52.45003891]
[-24.01964378 45.03797531]
[-37.06039810 37.62591171]
[-52.88133621 37.53340912]
[-60.12292480 24.51770020]
[-73.16368103 17.10563469]
[-86.20443726 9.69357014]
[-99.24519348 2.28150535]
[-112.28594208 -5.13055944]
[-126.36240387 1.39883912]
[-141.58184814 -1.62572682]
[-152.09210205 -13.04125023]
[-153.85176086 -28.45822906]
[-146.18418884 -41.94852066]
[-132.03771973 -48.32483292]
[-116.85198212 -45.13534164]
[-106.46618652 -33.60647583]
[-104.87387848 -18.17131424]
[-91.83312225 -10.75924969]
[-78.79237366 -3.34718466]
[-65.75161743 4.06488037]
[-52.71086121 11.47694492]
[-37.82268524 11.03928757]
[-29.64833260 24.58515549]
[-16.60757828 31.99721909]
[-3.56682324 39.40928650]
[9.47393131 46.82135010]
[22.51468658 54.23341370]
[29.92749214 54.80781555]
[35.74243164 61.93015289]
[48.63028717 69.60498810]
[61.51814651 77.27983093]
[74.40599823 84.95466614]
[100.85262299 73.75482941]
[120.39019775 89.73249817]
[135.26020813 87.76204681]
[150.13023376 85.79159546]
[165.00024414 83.82114410]
[179.87025452 81.85069275]
[195.21426392 68.83660126]
[212.77690125 76.84391022]
[227.55485535 74.27246094]
[242.33279419 71.70101166]
[254.55677795 63.00766373]
[261.83630371 49.89246368]
[269.11584473 36.77726364]
[276.39535522 23.66206551]
[283.67489624 10.54686546]
[277.91052246 -3.98950648]
[282.88760376 -18.81390381]
[296.25610352 -26.92669678]
[311.70382690 -24.49727631]
[321.93679810 -12.67273712]
[322.12338257 2.96373320]
[312.17544556 15.02907181]
[296.79010010 17.82639503]
[289.51055908 30.94159508]
[282.23101807 44.05679321]
[274.95150757 57.17199326]
[267.67196655 70.28719330]
[280.23452759 76.99406433]
[285.50637817 88.67628479]
[300.37637329 90.64673615]
[315.24639893 92.61718750]
[330.11639404 94.58763885]
[344.98641968 96.55809021]
[359.85644531 98.52854156]
[372.32421875 89.19087982]
[387.37646484 91.40103149]
[396.20166016 103.34471130]
[411.07168579 105.31516266]
[425.94168091 107.28561401]
[440.81170654 109.25606537]
[455.68173218 111.22651672]
[472.49728394 103.78900909]
[486.00625610 114.95127106]
[500.91314697 116.61994934]
[515.82006836 118.28862762]
[529.20263672 109.44068909]
[544.41906738 114.52388000]
[549.79663086 129.63880920]
[541.21014404 143.19061279]
[525.24633789 144.78347778]
[514.15136719 133.19552612]
[499.24447632 131.52684021]
[484.33758545 129.85816956]
[474.65747070 137.17349243]
[462.19085693 135.86645508]
[453.71127319 126.09652710]
[438.84124756 124.12607574]
[423.97125244 122.15562439]
[409.10122681 120.18517303]
[394.23120117 118.21472168]
[382.59985352 127.44766998]
[367.49148560 125.66118622]
[357.88598633 113.39855194]
[343.01596069 111.42810059]
[328.14596558 109.45764923]
[313.27593994 107.48719788]
[298.40591431 105.51674652]
[283.53591919 103.54629517]
[273.24868774 113.01277161]
[258.45190430 113.15414429]
[246.75694275 102.80716705]
[244.90423584 86.47895813]
[230.12629700 89.05039978]
[215.34835815 91.62184906]
[210.19958496 100.53109741]
[200.78570557 105.20507812]
[190.13887024 103.86663055]
[181.84071350 96.72070312]
[166.97068787 98.69115448]
[152.10067749 100.66160583]
[137.23066711 102.63205719]
[122.36064911 104.60250854]
[119.70292664 114.05329895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 32]
[4 31]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[12 24]
[13 23]
[14 22]
[33 71]
[34 70]
[35 69]
[36 68]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[73 153]
[74 152]
[75 151]
[76 150]
[77 149]
[79 145]
[80 144]
[81 143]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
[100 139]
[101 138]
[102 137]
[103 136]
[104 135]
[105 134]
[108 131]
[109 130]
[110 129]
[111 128]
[112 127]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
