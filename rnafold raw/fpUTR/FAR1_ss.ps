%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGGGCGUGCCACUGCCCGUCCGCUCUUCAGCAGCCGGUCGCGGGCGGUGGAAAAGCGAGUGAAGAGAGCGCGACGGCGGCGGCGGCGGCGGCGCAGCUAUUGCUGGACGGCCAGUGGGAGAGCGAGGCCUGAGCCUCUGCGUCUAGGAUCAAA\
) } def
/len { sequence length } bind def

/coor [
[200.68420410 433.47360229]
[207.84320068 419.94558716]
[220.47550964 411.30364990]
[218.66744995 396.41299438]
[216.85940552 381.52236938]
[215.05134583 366.63174438]
[213.24330139 351.74111938]
[211.43525696 336.85046387]
[209.62719727 321.95983887]
[190.29231262 305.57345581]
[195.43106079 280.17587280]
[187.93106079 267.18548584]
[180.43106079 254.19509888]
[172.93106079 241.20472717]
[165.43106079 228.21434021]
[157.93106079 215.22396851]
[144.86672974 208.07046509]
[144.66734314 192.25051880]
[137.16734314 179.26014709]
[129.66734314 166.26976013]
[122.16733551 153.27937317]
[114.66733551 140.28900146]
[107.16733551 127.29861450]
[99.66733551 114.30823517]
[73.24405670 109.22615051]
[58.92324448 104.76360321]
[44.60243225 100.30105591]
[30.28161812 95.83851624]
[15.96080589 91.37596893]
[1.63999248 86.91342163]
[-12.68082047 82.45087433]
[-25.11130524 91.54973602]
[-40.33800125 91.58405304]
[-52.52109909 82.75024414]
[-57.11141586 68.60574341]
[-71.43222809 64.14319611]
[-84.82746887 74.42607117]
[-101.54608154 74.71705627]
[-115.02107239 65.09920502]
[-120.07686615 49.50901794]
[-134.48463440 45.33575821]
[-148.89241028 41.16249466]
[-163.30018616 36.98923111]
[-177.98974609 43.43874741]
[-192.12336731 35.84794617]
[-194.85894775 20.03984070]
[-184.09797668 8.14105701]
[-168.09535217 9.27932453]
[-159.12692261 22.58146095]
[-144.71914673 26.75472260]
[-130.31137085 30.92798424]
[-115.90360260 35.10124588]
[-106.13903046 25.95020866]
[-93.01924133 22.80798531]
[-79.96025848 26.60309792]
[-70.41707611 36.44326019]
[-66.96968842 49.82238388]
[-52.64887238 54.28492737]
[-40.83612061 45.25183105]
[-25.79145241 44.90253830]
[-13.27962303 53.58052826]
[-8.21827507 68.13006592]
[6.10253811 72.59260559]
[20.42335129 77.05515289]
[34.74416351 81.51770020]
[49.06497574 85.98024750]
[63.38579178 90.44279480]
[77.70660400 94.90533447]
[70.22589874 81.90383911]
[78.58618927 69.44969940]
[93.45230865 71.44931793]
[98.22434998 85.67105103]
[104.38053894 71.99255371]
[110.53673553 58.31405258]
[116.69292450 44.63555527]
[115.30104828 28.87569427]
[127.58013153 20.44518471]
[133.73632812 6.76668596]
[139.89251709 -6.91181183]
[138.50064087 -22.67167282]
[150.77970886 -31.10218430]
[156.93591309 -44.78068161]
[163.09210205 -58.45917892]
[161.70022583 -74.21903992]
[173.97930908 -82.64955139]
[180.13549805 -96.32804871]
[177.94956970 -112.58085632]
[191.09550476 -122.38475800]
[206.04988098 -115.65433502]
[207.42892456 -99.31327820]
[193.81399536 -90.17185974]
[187.65780640 -76.49336243]
[189.49000549 -61.71187592]
[176.77059937 -52.30298615]
[170.61441040 -38.62448883]
[164.45820618 -24.94599152]
[166.29042053 -10.16450787]
[153.57101440 -0.75561953]
[147.41482544 12.92287827]
[141.25862122 26.60137558]
[143.09083557 41.38286209]
[130.37142944 50.79174805]
[124.21523285 64.47024536]
[118.05903625 78.14874268]
[111.90284729 91.82723999]
[112.65772247 106.80823517]
[120.15772247 119.79861450]
[127.65772247 132.78900146]
[135.15771484 145.77937317]
[142.65771484 158.76976013]
[150.15771484 171.76014709]
[157.65771484 184.75051880]
[171.25849915 192.83317566]
[170.92144775 207.72396851]
[178.42144775 220.71434021]
[185.92144775 233.70472717]
[193.42144775 246.69509888]
[200.92144775 259.68548584]
[208.42144775 272.67587280]
[216.13351440 272.23831177]
[223.57998657 274.10345459]
[230.09335327 278.07470703]
[235.09849548 283.76800537]
[238.16352844 290.64883423]
[239.03688049 298.08236694]
[237.66777039 305.39193726]
[249.83843994 314.15975952]
[262.00909424 322.92758179]
[274.17977905 331.69543457]
[286.35043335 340.46325684]
[302.71203613 341.57247925]
[309.68826294 356.41378784]
[300.10260010 369.71969604]
[283.81594849 367.80221558]
[277.58261108 352.63391113]
[265.41195679 343.86608887]
[253.24127197 335.09826660]
[241.07060242 326.33044434]
[228.89993286 317.56259155]
[226.77593994 318.97067261]
[224.51783752 320.15179443]
[226.32588196 335.04241943]
[228.13394165 349.93304443]
[229.94198608 364.82369995]
[231.75003052 379.71432495]
[233.55809021 394.60494995]
[235.36613464 409.49557495]
[249.69952393 414.86331177]
[259.88796997 426.28497314]
[263.59020996 441.13595581]
[259.95550537 456.00363159]
[249.81910706 467.47149658]
[235.51026917 472.90432739]
[220.31704712 471.05371094]
[207.73075867 462.34487915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[11 119]
[12 118]
[13 117]
[14 116]
[15 115]
[16 114]
[18 112]
[19 111]
[20 110]
[21 109]
[22 108]
[23 107]
[24 106]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[31 62]
[35 58]
[36 57]
[40 52]
[41 51]
[42 50]
[43 49]
[72 105]
[73 104]
[74 103]
[75 102]
[77 100]
[78 99]
[79 98]
[81 96]
[82 95]
[83 94]
[85 92]
[86 91]
[126 139]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
