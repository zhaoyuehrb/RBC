%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCGGCGCGGGCUUGGGAGGGAGCACGUCACUUCCUGUUGCCUUAGGGGAACGUGGCUUUCCCUGCAGAGCCGGUGUCUCCGCCUGCGUCCCUGCUGCAGCAACCGGAGCUGGAGUCGGAUCCCGAACGCACCCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[92.01662445 188.84448242]
[89.71894073 174.02151489]
[87.42125702 159.19853210]
[85.12357330 144.37556458]
[82.82588959 129.55258179]
[71.98145294 101.11013794]
[87.53233337 81.99465179]
[73.50708771 76.67558289]
[59.48184586 71.35650635]
[45.45660019 66.03742981]
[31.43135643 60.71836090]
[15.78428650 63.05925369]
[6.62776566 51.31159973]
[-7.39747810 45.99252319]
[-21.42272186 40.67345047]
[-35.44796371 35.35437775]
[-49.47320938 30.03530502]
[-65.12027740 32.37619781]
[-74.27680206 20.62854385]
[-89.92387390 22.96943665]
[-99.08039093 11.22178173]
[-113.10563660 5.90270853]
[-127.13088226 0.58363527]
[-141.15612793 -4.73543787]
[-155.18136597 -10.05451107]
[-169.20660400 -15.37358475]
[-178.94078064 -10.30580902]
[-189.63325500 -11.45254898]
[-197.73202515 -18.18745804]
[-200.68275452 -28.06899834]
[-214.46081543 -33.99898529]
[-228.23889160 -39.92897415]
[-242.01696777 -45.85896301]
[-255.79502869 -51.78894806]
[-269.63742065 -57.56723785]
[-283.54241943 -63.19312286]
[-297.44744873 -68.81901550]
[-311.35244751 -74.44490051]
[-325.25747681 -80.07078552]
[-340.95217896 -78.07418823]
[-349.84841919 -90.02014923]
[-364.29971313 -83.62204742]
[-379.01214600 -89.39436340]
[-385.25711060 -103.91249084]
[-379.32955933 -118.56307983]
[-364.74624634 -124.65419769]
[-350.15911865 -118.57209015]
[-344.22253418 -103.92516327]
[-329.52239990 -106.32416534]
[-319.63156128 -93.97579956]
[-305.72656250 -88.34991455]
[-291.82156372 -82.72402191]
[-277.91653442 -77.09813690]
[-264.01153564 -71.47225189]
[-256.57373047 -71.88252258]
[-249.86505127 -65.56702423]
[-236.08697510 -59.63703156]
[-222.30889893 -53.70704651]
[-208.53083801 -47.77705765]
[-194.75276184 -41.84706879]
[-175.82615662 -45.57833862]
[-163.88754272 -29.39882851]
[-149.86228943 -24.07975578]
[-135.83705139 -18.76068115]
[-121.81180573 -13.44160843]
[-107.78656006 -8.12253475]
[-93.76132202 -2.80346179]
[-79.11743164 -5.52481031]
[-68.95772552 6.60329962]
[-54.31383514 3.88195086]
[-44.15413666 16.01006126]
[-30.12889290 21.32913399]
[-16.10364914 26.64820671]
[-2.07840490 31.96728134]
[11.94683838 37.28635406]
[26.59072876 34.56500626]
[36.75043106 46.69311523]
[50.77567291 52.01218796]
[64.80091858 57.33126068]
[78.82616425 62.65033722]
[92.85140228 67.96940613]
[107.85050201 68.13417053]
[121.98920441 63.12448120]
[136.12791443 58.11479187]
[150.21073914 52.95009613]
[164.23597717 47.63102341]
[178.20195007 42.15821457]
[192.10696411 36.53232574]
[206.01197815 30.90643692]
[212.85777283 24.73983383]
[220.28475952 25.31339645]
[234.30999756 19.99432182]
[240.85639954 5.85987759]
[255.15576172 0.66537595]
[268.59045410 6.99346495]
[282.61569214 1.67439151]
[296.64093018 -3.64468169]
[309.30673218 -14.91474152]
[323.64257812 -5.86380339]
[318.91390991 10.41735363]
[301.96002197 10.38056183]
[287.93475342 15.69963551]
[273.90951538 21.01870918]
[268.04980469 34.66419983]
[253.90199280 40.25828934]
[239.62907410 34.01956558]
[225.60383606 39.33863831]
[211.63786316 44.81145096]
[197.73284912 50.43733978]
[183.82783508 56.06322479]
[178.76786804 61.53001785]
[169.55505371 61.65626907]
[155.52980042 66.97534180]
[150.35096741 72.32965851]
[141.13760376 72.25349426]
[126.99889374 77.26319122]
[112.86019135 82.27288055]
[125.32509613 87.96211243]
[134.12738037 101.90453339]
[145.24510193 111.97410583]
[156.36282349 122.04367065]
[167.48054504 132.11323547]
[183.27915955 138.26467896]
[181.74160767 155.14877319]
[165.09172058 158.34527588]
[157.41098022 143.23095703]
[146.29325867 133.16139221]
[135.17553711 123.09182739]
[124.05780792 113.02225494]
[117.45557404 116.58042145]
[97.64887238 127.25489807]
[99.94654846 142.07788086]
[102.24423218 156.90084839]
[104.54191589 171.72383118]
[106.83959961 186.54681396]
[120.70313263 193.51687622]
[127.79213715 207.31999207]
[125.38072968 222.64854431]
[114.39615631 233.60841370]
[99.06220245 235.98530579]
[85.27509308 228.86524963]
[78.33625031 214.98605347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 135]
[2 134]
[3 133]
[4 132]
[5 131]
[7 81]
[8 80]
[9 79]
[10 78]
[11 77]
[13 75]
[14 74]
[15 73]
[16 72]
[17 71]
[19 69]
[21 67]
[22 66]
[23 65]
[24 64]
[25 63]
[26 62]
[30 60]
[31 59]
[32 58]
[33 57]
[34 56]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[41 48]
[82 117]
[83 116]
[84 115]
[85 113]
[86 112]
[87 110]
[88 109]
[89 108]
[91 107]
[92 106]
[95 103]
[96 102]
[97 101]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
