%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACGAAGCGGGCCCGCCAGCGAGUCGCAGUCCCAGGAGCCGAGCUCCAGCACUAGAGCCAGCUGCGAGCGGAGGGCACCAACUCCGCAGAACUGGCUUUUCA\
) } def
/len { sequence length } bind def

/coor [
[71.56929016 123.81617737]
[58.36035919 130.92420959]
[45.15142822 138.03224182]
[31.94249344 145.14027405]
[18.73356056 152.24830627]
[16.14786720 163.02601624]
[8.15570641 170.38171387]
[-2.36098957 171.99850464]
[-11.79211521 167.57118225]
[-25.40249634 173.87654114]
[-39.01287460 180.18190002]
[-52.62325668 186.48725891]
[-59.22615051 193.04060364]
[-66.73641968 192.77084351]
[-76.38510895 205.30931091]
[-91.12914276 203.19679260]
[-104.92205811 209.09216309]
[-114.32032776 222.53108215]
[-130.63226318 220.84202576]
[-137.07754517 205.76255798]
[-127.02581024 192.80513000]
[-110.81743622 195.29925537]
[-97.02452087 189.40386963]
[-88.36238861 177.28707886]
[-72.63179779 178.97792053]
[-58.92861557 172.87687683]
[-45.31823349 166.57151794]
[-31.70785522 160.26615906]
[-18.09747314 153.96080017]
[-8.35354233 137.37240601]
[11.62553120 139.03936768]
[24.83446312 131.93133545]
[38.04339600 124.82330322]
[51.25233078 117.71527863]
[64.46126556 110.60724640]
[64.10500336 90.66916656]
[74.12578583 73.42857361]
[66.05052948 60.78776169]
[57.97526932 48.14694595]
[49.90000916 35.50613403]
[41.82474899 22.86531830]
[28.20236588 12.77240086]
[34.12979889 -3.11161304]
[51.03393555 -1.81296003]
[54.46556473 14.79005909]
[62.54082108 27.43087387]
[70.61608124 40.07168961]
[78.69133759 52.71250153]
[86.76660156 65.35331726]
[95.57640839 63.17681122]
[104.65104675 63.20484543]
[113.44723511 65.43575287]
[121.43836212 69.73595428]
[128.14601135 75.84802246]
[133.16859436 83.40602875]
[136.20542908 91.95748901]
[151.20375061 91.73310089]
[166.20207214 91.50870514]
[181.20039368 91.28431702]
[196.19871521 91.05992126]
[211.19703674 90.83553314]
[226.19535828 90.61114502]
[241.19367981 90.38674927]
[254.87657166 82.44387054]
[267.71817017 89.98991394]
[276.41567993 86.68877411]
[283.16693115 89.98991394]
[293.04510498 81.53063965]
[305.63354492 82.12089539]
[314.11557007 90.88878632]
[329.10046387 91.56175995]
[344.08535767 92.23473358]
[359.07028198 92.90770721]
[374.05517578 93.58068085]
[389.04006958 94.25364685]
[398.60916138 82.03840637]
[413.53985596 77.81301880]
[428.09100342 83.20223999]
[436.66738892 96.13379669]
[435.97122192 111.63524628]
[426.27017212 123.74596405]
[411.29452515 127.80913544]
[396.80267334 122.26238251]
[388.36709595 109.23854828]
[373.38220215 108.56557465]
[358.39730835 107.89260101]
[343.41238403 107.21962738]
[328.42749023 106.54665375]
[313.44259644 105.87368011]
[298.42459106 114.81557465]
[282.94256592 104.98823547]
[267.94256592 104.98823547]
[255.33244324 112.91506195]
[241.41807556 105.38507080]
[226.41975403 105.60946655]
[211.42143250 105.83385468]
[196.42311096 106.05824280]
[181.42478943 106.28263855]
[166.42646790 106.50702667]
[151.42814636 106.73142242]
[136.42982483 106.95581055]
[129.75271606 122.14251709]
[117.12254333 132.89884949]
[101.06639862 137.07260132]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[9 29]
[10 28]
[11 27]
[12 26]
[14 25]
[16 23]
[17 22]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[56 101]
[57 100]
[58 99]
[59 98]
[60 97]
[61 96]
[62 95]
[63 94]
[65 92]
[67 91]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
