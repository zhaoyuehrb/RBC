%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCAAGGGGUUGGGGGUGGGAAGGGAAACAGAGAAAAGGCAAGUGAAACAGAAGGGGAGGUGCAGUUUCAGAACCCAGCCAGCCUCUCUCUUGCUGCCUAGCCUCCUGCCGGCCUCAUCUUCGCCCAGCCAACCCCGCCUGGAGCCCU\
) } def
/len { sequence length } bind def

/coor [
[146.03939819 530.81054688]
[158.13493347 521.34515381]
[155.95809937 506.50396729]
[153.78126526 491.66275024]
[151.60443115 476.82156372]
[148.32391357 473.26995850]
[147.28158569 467.60031128]
[149.65910339 461.31900024]
[148.10153198 446.40011597]
[146.54394531 431.48120117]
[144.98635864 416.56228638]
[143.42878723 401.64337158]
[141.87120056 386.72445679]
[140.31361389 371.80554199]
[138.75604248 356.88662720]
[136.88842773 342.00335693]
[134.71159363 327.16213989]
[132.53475952 312.32092285]
[130.35791016 297.47973633]
[128.18107605 282.63851929]
[126.00424194 267.79733276]
[123.67313385 252.97956848]
[121.18801880 238.18685913]
[118.39569092 223.44905090]
[115.29737091 208.77252197]
[112.19905090 194.09599304]
[97.99752808 189.60351562]
[87.88418579 178.53210449]
[84.64904022 163.78759766]
[89.25874329 149.30839539]
[100.57071686 139.01342773]
[97.47239685 124.33689880]
[94.37407684 109.66037750]
[91.12324524 95.01687622]
[87.72026825 80.40798187]
[73.57997131 74.29585266]
[65.84050751 61.18272018]
[67.28942871 46.20391464]
[77.16246796 35.08361053]
[73.75949097 20.47471809]
[70.35650635 5.86582613]
[66.95352936 -8.74306583]
[63.55055237 -23.35195923]
[58.52538300 -31.05906677]
[60.23209381 -38.30011749]
[57.13377380 -52.97664261]
[54.03544998 -67.65316772]
[50.93712997 -82.32969666]
[41.42795181 -87.77587891]
[36.61769104 -97.37613678]
[37.89469528 -107.81588745]
[44.59075546 -115.63858795]
[42.10563660 -130.43128967]
[39.62052155 -145.22399902]
[29.70380783 -157.55158997]
[35.22559738 -171.38485718]
[32.74047852 -186.17755127]
[30.25535965 -200.97026062]
[17.66688919 -210.14459229]
[15.35735226 -225.18190002]
[24.18124390 -237.12654114]
[21.69612503 -251.91925049]
[19.21100616 -266.71194458]
[5.47948742 -273.69418335]
[-1.42696846 -287.26452637]
[0.95343608 -302.12380981]
[11.50087833 -312.60659790]
[9.01575947 -327.39932251]
[6.53064108 -342.19201660]
[-4.32015371 -354.48806763]
[1.15889788 -369.94482422]
[17.33141708 -372.66174316]
[27.56050301 -359.84387207]
[21.32334900 -344.67715454]
[23.80846596 -329.88442993]
[26.29358482 -315.09173584]
[39.68748474 -308.63098145]
[46.79277420 -295.36526489]
[44.69984055 -280.28305054]
[34.00371170 -269.19708252]
[36.48883057 -254.40437317]
[38.97394943 -239.61166382]
[51.21659470 -231.20611572]
[53.94758606 -216.23960876]
[45.04806519 -203.45538330]
[47.53318405 -188.66267395]
[50.01830292 -173.86996460]
[59.75726318 -162.60044861]
[54.41322708 -147.70912170]
[56.89834595 -132.91641235]
[59.38346481 -118.12371063]
[72.77365112 -104.22649384]
[65.61365509 -85.42801666]
[68.71197510 -70.75148773]
[71.81029510 -56.07496262]
[74.90862274 -41.39843750]
[78.15944672 -26.75493622]
[81.56242371 -12.14604378]
[84.96540070 2.46284819]
[88.36837769 17.07174110]
[91.77135468 31.68063354]
[105.54216766 37.29336929]
[113.46107483 50.09004593]
[112.31297302 65.27342987]
[102.32916260 77.00500488]
[105.73213959 91.61389160]
[110.51126099 98.17469025]
[109.05059814 106.56204987]
[112.14891815 121.23857880]
[115.24724579 135.91510010]
[129.75520325 140.75929260]
[139.82406616 152.13975525]
[142.82472229 166.93374634]
[138.04942322 181.14826965]
[126.87557983 190.99768066]
[129.97389221 205.67420959]
[133.07221985 220.35072327]
[137.26350403 225.59864807]
[138.01231384 231.31446838]
[135.98072815 235.70173645]
[138.46585083 250.49444580]
[143.00048828 258.50000000]
[140.84544373 265.62048340]
[143.02227783 280.46170044]
[145.19912720 295.30288696]
[147.37596130 310.14410400]
[149.55279541 324.98532104]
[151.72962952 339.82650757]
[155.58541870 345.32565308]
[155.97624207 351.07702637]
[153.67495728 355.32904053]
[155.23252869 370.24795532]
[156.79011536 385.16687012]
[158.34768677 400.08578491]
[159.90527344 415.00469971]
[161.46286011 429.92361450]
[163.02043152 444.84252930]
[164.57801819 459.76144409]
[166.44563293 474.64471436]
[168.62246704 489.48593140]
[170.79930115 504.32711792]
[172.97613525 519.16833496]
[187.28039551 524.76153564]
[196.85911560 536.76751709]
[199.13565063 551.95672607]
[193.49765015 566.24340820]
[181.46168518 575.78442383]
[166.26539612 578.01336670]
[151.99647522 572.33062744]
[142.49322510 560.26477051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 142]
[3 141]
[4 140]
[5 139]
[8 138]
[9 137]
[10 136]
[11 135]
[12 134]
[13 133]
[14 132]
[15 131]
[16 128]
[17 127]
[18 126]
[19 125]
[20 124]
[21 123]
[22 121]
[23 120]
[24 117]
[25 116]
[26 115]
[31 110]
[32 109]
[33 108]
[34 106]
[35 105]
[39 101]
[40 100]
[41 99]
[42 98]
[43 97]
[45 96]
[46 95]
[47 94]
[48 93]
[52 91]
[53 90]
[54 89]
[56 87]
[57 86]
[58 85]
[61 82]
[62 81]
[63 80]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
