%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAGCAGGAGAUGGGAAUUGAAACCUGCGCAGAGGCGGCUGUGCAGGGUGAGAGUGGAGCCGAAACCACAGAAAGUGAAGUUUGCUUCAACGUCUUGUCCCGGCAGGCCACUCAGAUGUGAGAGUGAGGAAGUGGG\
) } def
/len { sequence length } bind def

/coor [
[245.86804199 325.59118652]
[236.99649048 313.49591064]
[228.12495422 301.40063477]
[216.17131042 299.22906494]
[208.68952942 289.15155029]
[210.15960693 276.28204346]
[201.56367493 263.98934937]
[187.92935181 257.99316406]
[186.36181641 242.24978638]
[177.76588440 229.95710754]
[171.30047607 226.24691772]
[169.11828613 217.28807068]
[160.80235291 204.80427551]
[152.48643494 192.32046509]
[144.17050171 179.83666992]
[135.85458374 167.35285950]
[127.53865051 154.86906433]
[119.22272491 142.38525391]
[108.37342834 145.78109741]
[97.02452087 146.44534302]
[85.85314941 144.33834839]
[75.52586365 139.58584595]
[66.65887451 132.47140503]
[59.78122711 123.41950226]
[55.30329132 112.97023773]
[53.49225235 101.74709320]
[38.60799789 99.88727570]
[23.72373962 98.02745819]
[8.83948421 96.16764069]
[-6.04477215 94.30783081]
[-20.92902756 92.44801331]
[-35.81328583 90.58819580]
[-50.69754028 88.72837830]
[-65.58179474 86.86856079]
[-77.90103912 96.76866150]
[-93.60321808 94.97503662]
[-103.37251282 82.55181122]
[-101.41297150 66.86947632]
[-88.88716125 57.23207092]
[-73.22641754 59.35730362]
[-63.72198105 71.98430634]
[-48.83772659 73.84412384]
[-33.95346832 75.70394135]
[-19.06921196 77.56375885]
[-4.18495607 79.42356873]
[10.69929981 81.28338623]
[25.58355713 83.14320374]
[40.46781158 85.00302124]
[55.35206985 86.86283112]
[58.13198471 79.67533112]
[62.05984116 73.04508972]
[67.02794647 67.15390015]
[72.90007782 62.16328812]
[79.51523590 58.21008301]
[86.69204712 55.40267563]
[94.23373413 53.81804276]
[101.93352509 53.49962997]
[104.96371460 38.80888748]
[107.99390411 24.11814308]
[111.02409363 9.42739964]
[114.05428314 -5.26334429]
[117.08447266 -19.95408821]
[112.29450226 -35.03277206]
[122.44335175 -45.93461227]
[125.47354126 -60.62535858]
[115.19448090 -72.09912109]
[113.66044617 -87.24838257]
[121.25121307 -100.24239349]
[134.87475586 -106.20367432]
[137.90495300 -120.89441681]
[140.93513489 -135.58515930]
[133.35317993 -149.72352600]
[139.81188965 -164.40905762]
[155.35668945 -168.37626648]
[168.06294250 -158.58184814]
[168.18350220 -142.53924561]
[155.62588501 -132.55497742]
[152.59568787 -117.86422729]
[149.56550598 -103.17348480]
[159.71827698 -92.30797577]
[161.54782104 -77.37088013]
[154.14450073 -64.06508636]
[140.16427612 -57.59516907]
[137.13409424 -42.90442657]
[142.14080811 -28.87652016]
[131.77522278 -16.92389870]
[128.74502563 -2.23315525]
[125.71483612 12.45758820]
[122.68464661 27.14833260]
[119.65445709 41.83907700]
[116.62426758 56.52981949]
[135.63153076 70.05977631]
[145.68435669 91.11390686]
[144.25640869 114.40116882]
[131.70652771 134.06932068]
[140.02246094 146.55313110]
[148.33837891 159.03694153]
[156.65431213 171.52073669]
[164.97023010 184.00454712]
[173.28616333 196.48834229]
[181.60209656 208.97215271]
[190.05856323 221.36117554]
[198.65449524 233.65385437]
[212.90365601 240.52931213]
[213.85636902 255.39341736]
[222.45228577 267.68609619]
[239.29133606 275.04077148]
[240.22023010 292.52911377]
[249.09178162 304.62438965]
[257.96331787 316.71966553]
[268.26608276 327.62164307]
[279.84103394 337.16207886]
[291.41601562 346.70254517]
[302.99096680 356.24298096]
[314.56594849 365.78341675]
[329.55422974 361.76708984]
[344.02865601 367.35913086]
[352.42349243 380.40927124]
[351.51077271 395.89947510]
[341.64144897 407.87344360]
[326.61047363 411.72695923]
[312.19757080 405.97824097]
[303.94479370 392.83779907]
[305.02548218 377.35839844]
[293.45053101 367.81796265]
[281.87554932 358.27749634]
[270.30059814 348.73706055]
[258.72561646 339.19662476]
[262.03918457 353.82604980]
[258.30941772 368.35494995]
[248.35885620 379.57928467]
[234.38183594 385.02383423]
[219.46069336 383.48788452]
[206.88591003 375.31018066]
[199.43057251 362.29409790]
[198.73880005 347.31005859]
[204.96311951 333.66244507]
[216.73092651 324.36090088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[2 109]
[3 108]
[6 106]
[7 105]
[9 103]
[10 102]
[12 101]
[13 100]
[14 99]
[15 98]
[16 97]
[17 96]
[18 95]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[57 91]
[58 90]
[59 89]
[60 88]
[61 87]
[62 86]
[64 84]
[65 83]
[69 79]
[70 78]
[71 77]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
