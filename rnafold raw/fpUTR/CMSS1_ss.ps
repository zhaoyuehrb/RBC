%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGUCAUCGCCGCGGGGCGGAGGCGACAGUGUCUAGCGGGAGCUCCGCGUGUAGCUACGCCGGCCGCCUGGCUUUGAGACAACGUGAUUCUCCGCAGCUGGUCGCCUACCCGUGAUGUUCUGCCCACGUCGAGACCUGAGCUGAA\
) } def
/len { sequence length } bind def

/coor [
[213.99897766 181.83370972]
[198.84646606 168.76744080]
[189.66793823 150.95591736]
[187.81538391 130.97506714]
[173.26612854 127.32551575]
[158.71688843 123.67594910]
[151.41206360 125.10942841]
[143.89738464 119.78981781]
[129.42944336 115.83017731]
[114.96150208 111.87053680]
[102.32302094 118.95678711]
[88.34745026 115.13190460]
[81.07885742 102.59740448]
[66.61091614 98.63775635]
[51.25778198 102.45769501]
[41.02442169 91.63514709]
[26.55648232 87.67550659]
[12.08854389 83.71586609]
[-2.37939405 79.75622559]
[-16.84733200 75.79657745]
[-31.31527138 71.83693695]
[-48.97408295 76.93991852]
[-60.85920334 64.06937408]
[-75.40845490 60.41981125]
[-89.95770264 56.77025223]
[-104.50695801 53.12068939]
[-115.99848175 59.07913971]
[-128.07467651 55.69036865]
[-134.37089539 45.30967712]
[-148.83883667 41.35003281]
[-163.30677795 37.39039230]
[-176.92089844 44.95962906]
[-191.53704834 40.73788834]
[-198.66925049 27.71225166]
[-212.28337097 35.28148651]
[-226.89952087 31.05974579]
[-234.03172302 18.03411102]
[-248.49966431 14.07446957]
[-262.96759033 10.11482716]
[-277.43554688 6.15518570]
[-292.02807617 12.82132721]
[-306.27246094 5.44046307]
[-309.24160767 -10.32543850]
[-298.65786743 -22.38212776]
[-282.64016724 -21.48074532]
[-273.47589111 -8.31275272]
[-259.00796509 -4.35311079]
[-244.54002380 -0.39346898]
[-230.07208252 3.56617284]
[-217.30088806 -4.01221895]
[-202.57192993 -0.20268060]
[-194.70960999 13.24431324]
[-181.93841553 5.66592121]
[-167.20945740 9.47546005]
[-159.34713745 22.92245293]
[-144.87919617 26.88209534]
[-130.41125488 30.84173775]
[-113.73972321 25.45962524]
[-100.85739136 38.57143784]
[-86.30814362 42.22100067]
[-71.75889587 45.87055969]
[-57.20964050 49.52012253]
[-46.62963486 43.56489944]
[-34.44449615 46.53819656]
[-27.35562897 57.36899948]
[-12.88769054 61.32864380]
[1.58024776 65.28828430]
[16.04818535 69.24792480]
[30.51612473 73.20756531]
[44.98406219 77.16720581]
[59.30234909 73.06405640]
[70.57055664 84.16982269]
[85.03849792 88.12946320]
[97.67697906 81.04321289]
[111.65254974 84.86809540]
[118.92114258 97.40259552]
[133.38908386 101.36224365]
[147.85702515 105.32188416]
[162.36643982 109.12670135]
[176.91569519 112.77626038]
[191.46495056 116.42582703]
[196.48352051 107.07931519]
[203.26820374 98.93323517]
[211.54168701 92.31602478]
[220.96669006 87.49372864]
[231.15979004 84.65931702]
[241.70687866 83.92491913]
[252.18016052 85.31743622]
[262.15533447 88.77755737]
[271.22888184 94.16226196]
[279.03439331 101.25072479]
[285.25732422 109.75341797]
[289.64770508 119.32387543]
[292.03012085 129.57286072]
[292.31079102 140.08415222]
[290.48120117 150.43147278]
[304.19738770 156.50323486]
[317.91357422 162.57498169]
[331.62979126 168.64672852]
[345.34597778 174.71847534]
[359.18878174 180.49572754]
[373.15188599 185.97584534]
[387.11499023 191.45596313]
[401.07809448 196.93608093]
[409.52478027 188.22203064]
[420.39755249 182.90972900]
[432.39367676 181.60937500]
[444.08462524 184.45208740]
[454.08636475 191.07698059]
[461.22302246 200.67689514]
[464.66528320 212.09664917]
[464.02658081 223.97196960]
[477.60989380 230.33544922]
[491.19320679 236.69892883]
[504.77651978 243.06240845]
[517.32739258 234.20964050]
[532.62457275 232.83432007]
[546.55322266 239.30642700]
[555.36657715 251.88497925]
[556.69396973 267.18640137]
[550.17822266 281.09469604]
[537.57208252 289.86862183]
[522.26660156 291.14801025]
[508.37878418 284.58871460]
[499.64443970 271.95516968]
[498.41302490 256.64572144]
[484.82974243 250.28222656]
[471.24642944 243.91876221]
[457.66311646 237.55528259]
[443.38125610 248.58151245]
[425.40386963 250.90814209]
[408.63018799 243.81527710]
[397.67474365 229.16184998]
[395.59799194 210.89918518]
[381.63488770 205.41906738]
[367.67175293 199.93894958]
[353.70864868 194.45883179]
[348.99172974 195.54554749]
[343.54629517 193.63006592]
[339.27423096 188.43466187]
[325.55801392 182.36291504]
[311.84182739 176.29116821]
[298.12564087 170.21942139]
[284.40945435 164.14767456]
[270.86654663 178.71669006]
[252.83078003 187.17481995]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 81]
[5 80]
[6 79]
[8 78]
[9 77]
[10 76]
[13 73]
[14 72]
[16 70]
[17 69]
[18 68]
[19 67]
[20 66]
[21 65]
[23 62]
[24 61]
[25 60]
[26 59]
[29 57]
[30 56]
[31 55]
[34 52]
[37 49]
[38 48]
[39 47]
[40 46]
[96 144]
[97 143]
[98 142]
[99 141]
[100 140]
[101 137]
[102 136]
[103 135]
[104 134]
[112 129]
[113 128]
[114 127]
[115 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
