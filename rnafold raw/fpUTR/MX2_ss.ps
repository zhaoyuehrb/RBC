%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGAUGAUUUCUCCAUCCUGAACGUGCAGCGAGCUUGUCAGGAAGAUCGGAGGUGCCAAGUAGCAGAGAAAGCAUCCCCCAGCUCUGACAGGGAGACAGCAC\
) } def
/len { sequence length } bind def

/coor [
[-52.91506195 316.18112183]
[-70.54709625 328.46667480]
[-91.91080475 328.11068726]
[-99.60429382 340.98742676]
[-107.29778290 353.86416626]
[-114.99127197 366.74087524]
[-112.48136902 382.58639526]
[-123.41090393 394.33053589]
[-139.39567566 392.96420288]
[-148.17352295 379.53555298]
[-143.01084900 364.34588623]
[-127.86800385 359.04739380]
[-120.17451477 346.17065430]
[-112.48102570 333.29394531]
[-104.78753662 320.41720581]
[-110.62284851 313.33493042]
[-114.40388489 304.95230103]
[-115.85658264 295.85232544]
[-114.86920166 286.67077637]
[-111.50081635 278.05175781]
[-105.97791290 270.60272217]
[-98.67919159 264.85134888]
[-90.10958099 261.20849609]
[-80.86534119 259.93859863]
[-71.59256744 261.14065552]
[-62.94202042 264.74047852]
[-52.73942947 253.74472046]
[-42.53683853 242.74893188]
[-32.33424759 231.75315857]
[-38.63402939 218.21646118]
[-39.27293777 203.25862122]
[-34.12250519 189.15762329]
[-23.93832397 178.07295227]
[-10.24937248 171.71478271]
[4.87148714 171.08026123]
[19.12138176 176.29718018]
[29.32397270 165.30140686]
[39.52656174 154.30561829]
[49.72915268 143.30984497]
[59.93174362 132.31407166]
[70.13433838 121.31829071]
[80.33692932 110.32250977]
[90.53952026 99.32672882]
[91.55314636 93.99797821]
[95.55803680 89.67512512]
[101.69632721 88.00176239]
[112.53824615 77.63581848]
[110.60076141 62.35340118]
[117.94768524 49.01637650]
[131.57794189 42.63828659]
[146.17552185 45.47529221]
[157.01744080 35.10935211]
[161.64518738 19.98008728]
[176.19134521 16.77722740]
[187.03326416 6.41128683]
[197.87519836 -3.95465302]
[208.71711731 -14.32059288]
[219.55903625 -24.68653297]
[213.71441650 -38.69384766]
[213.32841492 -53.86669922]
[218.45323181 -68.15308380]
[228.39576721 -79.62088776]
[241.81137085 -86.71917725]
[256.88571167 -88.48796844]
[271.58010864 -84.68804932]
[283.90725708 -75.83333588]
[292.20001221 -63.12134171]
[295.33682251 -48.27126694]
[292.89349365 -33.29145813]
[285.20046997 -20.20781517]
[273.29815674 -10.78979301]
[258.79623413 -6.31110048]
[243.65597534 -7.37744379]
[229.92497253 -13.84460926]
[219.08305359 -3.47866964]
[208.24113464 6.88726997]
[197.39921570 17.25321007]
[186.55728149 27.61915016]
[182.70503235 42.00697327]
[167.38339233 45.95127487]
[156.54145813 56.31721497]
[158.72068787 71.02738190]
[151.73750305 84.35775757]
[138.08428955 91.09891510]
[122.90419006 88.47774506]
[112.06226349 98.84368134]
[101.53529358 109.52931976]
[91.33270264 120.52510071]
[81.13011169 131.52087402]
[70.92752075 142.51666260]
[60.72493362 153.51243591]
[50.52234268 164.50820923]
[40.31975174 175.50399780]
[30.11715889 186.49977112]
[36.38438416 200.31996155]
[36.88161469 215.44595337]
[31.56420517 229.57177734]
[21.27158928 240.55583191]
[7.59492254 246.74563599]
[-7.36884594 247.22631836]
[-21.33847046 241.95574951]
[-31.54106140 252.95152283]
[-41.74365234 263.94729614]
[-51.94624329 274.94308472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[6 12]
[26 104]
[27 103]
[28 102]
[29 101]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
[41 89]
[42 88]
[43 87]
[46 86]
[47 85]
[51 81]
[52 80]
[54 78]
[55 77]
[56 76]
[57 75]
[58 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
