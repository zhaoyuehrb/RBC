%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUGAGCGCGCGCGGUCCCGGGAUCUCCGACGAGGCCCUGGACCCCCGGGCGGCGAAGCUGCGGCGCGGCGCCCCCUGGAGGCCGCGGGACCCCUGGCCGGUCCGCGCAGGCGCAGCGGGGUCGCAGGGCGCGGCGGGUUCCAGCGCGGGG\
) } def
/len { sequence length } bind def

/coor [
[154.27001953 109.93811798]
[156.12725830 124.82269287]
[149.99647522 138.51260376]
[137.65519714 147.03862000]
[122.68164062 147.92875671]
[109.41716003 140.92492676]
[101.70764160 128.05778503]
[101.78766632 113.06035614]
[95.00508881 126.43932343]
[96.43655396 142.77587891]
[82.85102081 151.96093750]
[68.22412109 144.54570007]
[67.60274506 128.15832520]
[81.62612152 119.65673828]
[88.40869904 106.27777863]
[78.70192719 94.84193420]
[64.39873505 99.36062622]
[50.09553909 103.87931824]
[35.79234314 108.39801025]
[21.48914528 112.91670227]
[10.66087341 124.45182800]
[-3.80600309 120.90799713]
[-18.10919952 125.42668915]
[-32.41239548 129.94538879]
[-39.70543289 135.54716492]
[-47.05364227 134.40715027]
[-61.44603729 138.63313293]
[-75.83843231 142.85913086]
[-90.23082733 147.08511353]
[-101.14977264 159.32066345]
[-117.14826965 155.71789551]
[-121.76844788 139.98303223]
[-110.25745392 128.30274963]
[-94.45681000 132.69271851]
[-80.06442261 128.46673584]
[-65.67202759 124.24074554]
[-51.27962875 120.01475525]
[-36.93108749 115.64218903]
[-22.62789154 111.12349701]
[-8.32469559 106.60479736]
[1.48051608 95.39288330]
[16.97045326 98.61351013]
[31.27364922 94.09481812]
[45.57684326 89.57612610]
[59.88003922 85.05743408]
[74.18323517 80.53873444]
[107.06092072 83.84316254]
[118.97673035 74.73198700]
[130.89253235 65.62081146]
[142.80833435 56.50963211]
[149.07128906 41.98083115]
[163.88140869 40.39654922]
[175.79721069 31.28536987]
[182.06016541 16.75657082]
[196.87026978 15.17228603]
[201.82513428 7.42518139]
[209.12335205 5.99974537]
[221.22253418 -2.86647153]
[233.32171631 -11.73268890]
[239.87973022 -26.13071060]
[254.71907043 -27.41255951]
[266.81823730 -36.27877808]
[278.91741943 -45.14499283]
[291.01660156 -54.01121140]
[297.57461548 -68.40923309]
[312.41397095 -69.69108582]
[324.51315308 -78.55729675]
[336.61233521 -87.42351532]
[348.71151733 -96.28973389]
[355.92388916 -115.07133484]
[375.17343140 -116.48031616]
[386.90090942 -125.83266449]
[398.62838745 -135.18501282]
[410.25985718 -144.65647888]
[421.79409790 -154.24610901]
[433.32836914 -163.83573914]
[444.86264038 -173.42535400]
[456.29846191 -183.13212585]
[467.63470459 -192.95504761]
[478.97094727 -202.77795410]
[479.12582397 -213.72962952]
[485.18655396 -222.58697510]
[494.93020630 -226.53231812]
[505.01422119 -224.47482300]
[516.74169922 -233.82717896]
[528.46917725 -243.17951965]
[540.10064697 -252.65100098]
[551.63488770 -262.24063110]
[563.16912842 -271.83026123]
[574.60498047 -281.53701782]
[585.94122314 -291.35992432]
[597.27746582 -301.18283081]
[608.61370850 -311.00576782]
[619.94995117 -320.82867432]
[619.52099609 -336.46035767]
[629.28063965 -348.67849731]
[644.62078857 -351.71401978]
[658.29821777 -344.13369751]
[663.85491943 -329.51666260]
[658.66711426 -314.76467896]
[645.18438721 -306.84317017]
[629.77288818 -309.49243164]
[618.43664551 -299.66949463]
[607.10040283 -289.84658813]
[595.76416016 -280.02368164]
[584.42791748 -270.20077515]
[581.41418457 -263.40274048]
[572.75878906 -260.29598999]
[561.22448730 -250.70635986]
[549.69024658 -241.11674500]
[546.53851318 -234.38159180]
[537.82153320 -231.45204163]
[526.09405518 -222.09970093]
[514.36657715 -212.74736023]
[508.70947266 -194.29396057]
[488.79388428 -191.44171143]
[477.45764160 -181.61880493]
[466.12139893 -171.79588318]
[463.10769653 -164.99784851]
[454.45223999 -161.89109802]
[442.91799927 -152.30148315]
[431.38372803 -142.71185303]
[419.84948730 -133.12222290]
[416.69772339 -126.38707733]
[407.98074341 -123.45753479]
[396.25326538 -114.10518646]
[384.52578735 -104.75283813]
[384.28778076 -94.46382141]
[378.27319336 -85.84238434]
[368.28927612 -81.90454102]
[357.57772827 -84.19055176]
[345.47854614 -75.32433319]
[333.37936401 -66.45811462]
[321.28018188 -57.59189987]
[315.58758545 -43.82805252]
[299.88284302 -41.91202927]
[287.78366089 -33.04581451]
[275.68447876 -24.17959595]
[263.58529663 -15.31337833]
[257.89266968 -1.54952824]
[242.18792725 0.36649311]
[230.08874512 9.23270988]
[217.98956299 18.09892654]
[205.98144531 27.08809280]
[200.57078552 40.96519852]
[184.90838623 43.20117569]
[172.99258423 52.31235504]
[167.58192444 66.18946075]
[151.91952515 68.42543793]
[140.00370789 77.53661346]
[128.08790588 86.64779663]
[116.17210388 95.75897217]
[130.90528870 92.94241333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 15]
[9 14]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[22 40]
[23 39]
[24 38]
[26 37]
[27 36]
[28 35]
[29 34]
[47 152]
[48 151]
[49 150]
[50 149]
[52 147]
[53 146]
[55 144]
[57 143]
[58 142]
[59 141]
[61 139]
[62 138]
[63 137]
[64 136]
[66 134]
[67 133]
[68 132]
[69 131]
[71 127]
[72 126]
[73 125]
[74 123]
[75 122]
[76 121]
[77 120]
[78 118]
[79 117]
[80 116]
[84 114]
[85 113]
[86 112]
[87 110]
[88 109]
[89 108]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
