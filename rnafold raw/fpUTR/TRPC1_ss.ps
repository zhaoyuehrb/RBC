%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCCUCGAGCCGAGGCAGCAGUGGGAACGACUCAUCCUUUUUCCAGCCCUGGGGCGUGGCUGGGGUCGGGGUCGGGGUCGGGGCCGGUGGGGGCCCCGCCCCCGUCUCCUGGCCUGCCCCCUUCAUGGGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[143.77984619 152.74084473]
[129.66912842 157.82885742]
[114.88426208 155.29748535]
[114.95159912 140.29763794]
[107.70119476 153.42895508]
[100.45079041 166.56028748]
[93.20038605 179.69160461]
[85.94997406 192.82292175]
[78.69956970 205.95425415]
[76.33665466 222.74272156]
[59.55015564 225.11965942]
[52.61914062 209.64720154]
[65.56824493 198.70384216]
[72.81865692 185.57252502]
[80.06906128 172.44119263]
[87.31946564 159.30987549]
[94.56987762 146.17855835]
[101.82028198 133.04722595]
[98.19507599 126.48157501]
[87.94680786 137.43479919]
[74.36286926 131.07267761]
[76.21612549 116.18759918]
[90.94467163 113.35025024]
[87.31946564 106.78459167]
[72.34410858 105.92513275]
[57.36875153 105.06568146]
[42.39339447 104.20623016]
[27.41803741 103.34677124]
[12.44267941 102.48731995]
[-5.04260826 112.40139008]
[-20.81466103 101.30454254]
[-35.81367493 101.13256073]
[-49.83589554 109.63605499]
[-64.07907867 101.50808716]
[-63.89105225 85.11001587]
[-49.46524811 77.31076813]
[-35.64169312 86.13354492]
[-20.64267921 86.30552673]
[-13.92586327 78.46328735]
[-3.77620196 75.59856415]
[6.46977854 78.90698242]
[13.30213356 87.51196289]
[28.27749062 88.37141418]
[43.25284958 89.23087311]
[58.22820663 90.09032440]
[73.20356750 90.94977570]
[88.17892456 91.80923462]
[102.66036224 87.89926910]
[115.16812134 79.61941528]
[127.67588043 71.33956146]
[140.18363953 63.05971146]
[152.59564209 54.63699722]
[164.91026306 46.07252884]
[177.22488403 37.50806046]
[189.53950500 28.94359016]
[201.85412598 20.37912178]
[208.76599121 6.14758396]
[223.63249207 5.23288965]
[228.95046997 -2.30435181]
[236.32911682 -3.38296413]
[248.83686829 -11.66281605]
[261.34463501 -19.94266701]
[264.70150757 -25.80344963]
[269.77444458 -28.60306358]
[274.62109375 -28.29999924]
[287.49530029 -35.99770355]
[300.36953735 -43.69541168]
[313.24374390 -51.39311981]
[326.11795044 -59.09082794]
[338.99215698 -66.78853607]
[351.86636353 -74.48624420]
[364.74057007 -82.18394470]
[377.52569580 -90.02875519]
[385.08276367 -103.92844391]
[399.97555542 -104.16059875]
[412.66986084 -112.15148163]
[425.36419678 -120.14235687]
[438.05850220 -128.13323975]
[450.75283813 -136.12411499]
[458.30990601 -150.02380371]
[473.20269775 -150.25596619]
[485.89703369 -158.24684143]
[498.59133911 -166.23771667]
[511.28567505 -174.22860718]
[523.97998047 -182.21948242]
[536.67431641 -190.21035767]
[549.36865234 -198.20124817]
[552.62799072 -213.66578674]
[565.91320801 -222.22607422]
[581.34240723 -218.80342102]
[589.76177979 -205.42845154]
[586.17614746 -190.03627014]
[572.71295166 -181.75880432]
[557.35949707 -185.50691223]
[544.66522217 -177.51603699]
[531.97088623 -169.52516174]
[519.27655029 -161.53428650]
[506.58221436 -153.54339600]
[493.88790894 -145.55252075]
[481.19357300 -137.56164551]
[474.54449463 -124.23351288]
[458.74371338 -123.42979431]
[446.04940796 -115.43891907]
[433.35507202 -107.44803619]
[420.66073608 -99.45715332]
[407.96643066 -91.46627808]
[401.31735229 -78.13815308]
[385.51657104 -77.33443451]
[381.49636841 -71.05384064]
[372.43829346 -69.30973816]
[359.56408691 -61.61203003]
[346.68984985 -53.91432190]
[333.81564331 -46.21661377]
[320.94143677 -38.51890945]
[308.06723022 -30.82120132]
[295.19302368 -23.12349510]
[282.31881714 -15.42578697]
[269.62448120 -7.43490744]
[257.11672974 0.84494430]
[244.60896301 9.12479591]
[232.19696045 17.54751015]
[226.16590881 31.16646004]
[210.41859436 32.69374084]
[198.10397339 41.25820923]
[185.78935242 49.82268143]
[173.47473145 58.38714981]
[161.16012573 66.95161438]
[157.43209839 73.40991974]
[148.46350098 75.56747437]
[135.95573425 83.84732056]
[123.44797516 92.12717438]
[110.94021606 100.40702820]
[125.88638306 99.13731384]
[140.53349304 102.37184906]
[151.68125916 112.40814972]
[156.43078613 126.63635254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[31 38]
[32 37]
[48 132]
[49 131]
[50 130]
[51 129]
[52 127]
[53 126]
[54 125]
[55 124]
[56 123]
[58 121]
[60 120]
[61 119]
[62 118]
[65 117]
[66 116]
[67 115]
[68 114]
[69 113]
[70 112]
[71 111]
[72 110]
[73 108]
[75 106]
[76 105]
[77 104]
[78 103]
[79 102]
[81 100]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
