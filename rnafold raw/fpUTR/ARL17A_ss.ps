%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGAUUGGUUGGUUGCUGUUCCUGCCCCCACGCCUGUCGUGGUUUAGCUGAACUGAGCUGAAAUCCUAAAGGCCGCGGAGUCGGCGGUGUUGUAGGUAGCGGUACCUUGAGUGGCAACAGAAUUCGAUUAAAUUACA\
) } def
/len { sequence length } bind def

/coor [
[82.79913330 489.16003418]
[75.15866852 474.64950562]
[84.13261414 460.92361450]
[84.46918488 445.92739868]
[84.80575562 430.93115234]
[85.14232635 415.93493652]
[85.47889709 400.93872070]
[85.81546783 385.94250488]
[85.98376465 370.94345093]
[85.98376465 355.94345093]
[85.98376465 340.94345093]
[85.98376465 325.94345093]
[85.98376465 310.94345093]
[85.98376465 295.94345093]
[73.84535217 287.35293579]
[69.03604126 273.09338379]
[73.59879303 258.56634521]
[85.98376465 249.40565491]
[85.98376465 234.40565491]
[85.98376465 219.40565491]
[85.98376465 204.40565491]
[83.68512726 201.62966919]
[82.66175079 197.57402039]
[83.51299286 192.87182617]
[86.52254486 188.40512085]
[87.53158569 173.43908691]
[88.54061890 158.47306824]
[89.54965210 143.50704956]
[62.42547607 128.50381470]
[50.45343399 98.16068268]
[35.51382065 96.81609344]
[20.57420540 95.47150421]
[5.63459206 94.12691498]
[-9.30502224 92.78232574]
[-22.49232101 101.91877747]
[-37.81557465 97.16719818]
[-43.52009201 82.17259979]
[-35.22985840 68.43754578]
[-19.30443001 66.49840546]
[-7.96043301 77.84271240]
[6.97918177 79.18730164]
[21.91879654 80.53189087]
[36.85840988 81.87648010]
[51.79802322 83.22106934]
[58.75740814 69.93321991]
[49.14427185 58.41854477]
[39.53113937 46.90387344]
[29.91800308 35.38920212]
[20.30487061 23.87453270]
[10.69173527 12.35986137]
[1.07860124 0.84519064]
[-14.68255138 -0.32169279]
[-24.93883705 -12.34600830]
[-23.60538101 -28.09394264]
[-11.47330189 -38.22252655]
[4.25965405 -36.72264862]
[14.25940323 -24.48416328]
[12.59327221 -8.76794338]
[22.20640755 2.74672747]
[31.81954002 14.26139832]
[41.43267441 25.77606964]
[51.04581070 37.29074097]
[60.65894318 48.80541229]
[70.27207947 60.32008362]
[76.63602448 57.05424118]
[83.31347656 54.78167343]
[90.15289307 53.52366638]
[97.00326538 53.27883911]
[103.71742249 54.02375412]
[110.15520477 55.71401978]
[116.18637848 58.28580856]
[123.87986755 45.40907669]
[124.31589508 29.59387970]
[137.48577881 22.63662338]
[145.17926025 9.75989151]
[152.87275696 -3.11684060]
[160.56623840 -15.99357224]
[168.25973511 -28.87030411]
[162.96119690 -43.58287048]
[168.40783691 -58.24125290]
[182.02789307 -65.92421722]
[197.39041138 -63.00409698]
[207.24166870 -50.85968399]
[206.93020630 -35.22520447]
[196.60308838 -23.48277473]
[181.13645935 -21.17681503]
[173.44297791 -8.30008316]
[165.74948120 4.57664871]
[158.05599976 17.45338058]
[150.36250305 30.33011246]
[150.47677612 45.22427750]
[136.75660706 53.10256577]
[129.06311035 65.97929382]
[135.08782959 72.23460388]
[139.79063416 79.53594208]
[142.99438477 87.60823822]
[157.90007019 85.92877197]
[172.80575562 84.24930573]
[187.71142578 82.56983948]
[202.61711121 80.89037323]
[215.48333740 70.72217560]
[230.62034607 77.03116608]
[232.45646667 93.32720184]
[219.10285950 102.84631348]
[204.29658508 95.79605103]
[189.39089966 97.47552490]
[174.48521423 99.15499115]
[159.57952881 100.83445740]
[144.67384338 102.51392365]
[142.85313416 112.87174225]
[138.66510010 122.51849365]
[132.34111023 130.92126465]
[124.23052216 137.61587524]
[114.78137970 142.23249817]
[104.51567841 144.51608276]
[103.50663757 159.48210144]
[102.49760437 174.44812012]
[101.48857117 189.41415405]
[100.98376465 204.40565491]
[100.98376465 219.40565491]
[100.98376465 234.40565491]
[100.98376465 249.40565491]
[113.36874390 258.56634521]
[117.93149567 273.09338379]
[113.12218475 287.35293579]
[100.98376465 295.94345093]
[100.98376465 310.94345093]
[100.98376465 325.94345093]
[100.98376465 340.94345093]
[100.98376465 355.94345093]
[100.98376465 370.94345093]
[104.13392639 379.60748291]
[100.81169128 386.27905273]
[100.47512054 401.27529907]
[100.13854980 416.27151489]
[99.80197906 431.26773071]
[99.46540833 446.26397705]
[99.12883759 461.26019287]
[107.47793579 475.37487793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 138]
[4 137]
[5 136]
[6 135]
[7 134]
[8 133]
[9 131]
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[18 122]
[19 121]
[20 120]
[21 119]
[25 118]
[26 117]
[27 116]
[28 115]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[71 93]
[72 92]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
