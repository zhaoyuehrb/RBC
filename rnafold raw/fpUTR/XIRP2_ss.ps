%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGAAAUCUGGCAGGUCUCUAGGCAGACAAAAGGGAACAUCUGGUAGGGACUGGGACAUGUAGAAAAAAGGACAACCUGGACCCAUCC\
) } def
/len { sequence length } bind def

/coor [
[119.83596039 135.55221558]
[113.36977386 149.08692932]
[100.74397278 157.18563843]
[85.74578857 157.41906738]
[72.87406921 149.71719360]
[65.98982239 136.39025879]
[67.15803528 121.43581390]
[76.02828979 109.33959961]
[89.93852997 103.73011780]
[76.23535156 97.62906647]
[62.53216934 91.52801514]
[46.77804184 92.98336029]
[38.29814148 80.73833466]
[24.59496117 74.63728333]
[10.89177895 68.53623962]
[-2.81140304 62.43518448]
[-16.81510925 57.05966568]
[-31.08095741 52.42441177]
[-45.34680557 47.78915787]
[-59.61265182 43.15390396]
[-73.87850189 38.51864624]
[-84.78646088 49.25526810]
[-99.43788910 53.68179321]
[-114.46600342 50.78103638]
[-126.41744995 41.21957779]
[-132.54586792 27.19456100]
[-131.44300842 11.92883968]
[-123.36227417 -1.06963837]
[-110.16058350 -8.81391811]
[-94.87157440 -9.52441978]
[-81.00855255 -3.03787541]
[-71.75714111 9.15515423]
[-69.24324799 24.25279999]
[-54.97739792 28.88805389]
[-40.71155167 33.52330780]
[-26.44570160 38.15856552]
[-12.17985439 42.79381943]
[-8.73126888 41.35740662]
[-4.37884808 41.66237259]
[-0.01970715 44.13042068]
[3.28964663 48.73200607]
[16.99282837 54.83305359]
[30.69601059 60.93410492]
[44.39919281 67.03515625]
[59.17317581 65.14342499]
[68.63321686 77.82483673]
[82.33640289 83.92588806]
[96.03958130 90.02693939]
[110.52847290 93.90922546]
[125.44629669 95.47714996]
[140.36412048 97.04507446]
[149.44943237 94.79812622]
[155.77198792 98.93692017]
[170.62600708 101.02452087]
[185.48002625 103.11211395]
[200.33404541 105.19971466]
[217.11180115 97.86241913]
[230.59483337 108.94742584]
[245.51266479 110.51535034]
[260.04602051 104.26294708]
[271.89477539 113.28822327]
[286.81262207 114.85615540]
[294.39050293 101.64647675]
[306.68994141 92.66628265]
[321.57995605 89.47143555]
[336.48080444 92.61547852]
[348.81079102 101.55367279]
[356.43365479 114.73743439]
[358.02874756 129.88258362]
[353.31967163 144.36514282]
[343.12231445 155.67590332]
[329.20339966 161.85523987]
[313.97448730 161.83251953]
[300.07409668 155.61167908]
[289.91052246 144.27052307]
[285.24468994 129.77398682]
[270.32687378 128.20605469]
[256.86053467 134.57060242]
[243.94473267 125.43318176]
[229.02691650 123.86525726]
[219.29995728 131.28393555]
[206.73307800 129.95512390]
[198.24645996 120.05373383]
[183.39244080 117.96614075]
[168.53840637 115.87854004]
[153.68438721 113.79094696]
[138.79620361 111.96290588]
[123.87837219 110.39497375]
[108.96054077 108.82704926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 48]
[10 47]
[11 46]
[13 44]
[14 43]
[15 42]
[16 41]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[49 89]
[50 88]
[51 87]
[53 86]
[54 85]
[55 84]
[56 83]
[58 80]
[59 79]
[61 77]
[62 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
