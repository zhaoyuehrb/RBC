%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAACGCCUUGCGGGGCAGUGUGGGAGGGAGAAGUCCAGGGCGGACAGGCUGGGCGCACCCGUGCUCGCGCACCCCAAG\
) } def
/len { sequence length } bind def

/coor [
[65.72262573 299.96331787]
[57.15786743 312.90258789]
[42.61156845 318.30487061]
[27.67707634 314.09292603]
[18.09701157 301.88629150]
[17.55510139 286.37869263]
[26.25972176 273.53308105]
[40.86376953 268.28890991]
[44.93537521 253.85208130]
[49.00698090 239.41525269]
[53.07859039 224.97842407]
[51.82966232 217.48854065]
[57.60383987 210.06066895]
[62.23909378 195.79481506]
[66.87435150 181.52897644]
[71.22862244 167.17486572]
[75.30022430 152.73803711]
[74.05130005 145.24815369]
[79.82547760 137.82028198]
[84.46073151 123.55443573]
[89.09598541 109.28858948]
[86.37712097 95.57365417]
[96.63816833 86.07615662]
[93.54404449 70.56045532]
[104.83559418 60.84705734]
[101.74147034 45.33135605]
[113.03302765 35.61795807]
[117.66828156 21.35210991]
[122.30353546 7.08626223]
[113.31822205 -3.56318831]
[110.85681915 -17.16682816]
[115.46751404 -30.08401299]
[125.82048798 -38.91274261]
[139.08918762 -41.38555145]
[144.28094482 -55.45841980]
[149.47268677 -69.53128815]
[154.66444397 -83.60416412]
[159.85620117 -97.67703247]
[165.04795837 -111.74990082]
[155.16532898 -123.50698853]
[152.50106812 -138.63304138]
[157.77185059 -153.05920410]
[169.55986023 -162.90493774]
[184.69418335 -165.52177429]
[199.10375977 -160.20579529]
[208.91249084 -148.38697815]
[211.48187256 -133.24453735]
[206.12075806 -118.85168457]
[194.27125549 -109.08004761]
[179.12083435 -106.55814362]
[173.92907715 -92.48527527]
[168.73731995 -78.41240692]
[163.54556274 -64.33953094]
[158.35380554 -50.26666260]
[153.16204834 -36.19379425]
[162.68910217 -22.97705460]
[162.55564880 -6.52055836]
[152.61885071 6.80367899]
[136.56938171 11.72151661]
[131.93412781 25.98736382]
[127.29887390 40.25321198]
[130.72454834 54.74852371]
[119.10144043 65.48230743]
[122.52710724 79.97762299]
[110.90401459 90.71141052]
[113.62287903 104.42634583]
[103.36183167 113.92384338]
[98.72657776 128.18969727]
[94.09132385 142.45553589]
[89.73705292 156.80964661]
[85.66545105 171.24647522]
[86.33980560 180.63047791]
[81.14019775 186.16423035]
[76.50494385 200.43006897]
[71.86968994 214.69592285]
[67.51541901 229.05003357]
[63.44380951 243.48686218]
[59.37220383 257.92367554]
[55.30059814 272.36050415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 79]
[9 78]
[10 77]
[11 76]
[13 75]
[14 74]
[15 73]
[16 71]
[17 70]
[19 69]
[20 68]
[21 67]
[23 65]
[25 63]
[27 61]
[28 60]
[29 59]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
