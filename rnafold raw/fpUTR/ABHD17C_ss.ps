%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGCAGCCGCCCUCCGCGCUCGCCUGCCAGCUCCCUCGCCGCGCGUCCGUCCUCCGUCCUCCCGGGCCAGCCAGCCAGCCAGCCAGCCGGGCCGGCGGCGGGCACCAGGCCGUCCCG\
) } def
/len { sequence length } bind def

/coor [
[147.32910156 418.01504517]
[144.98258972 403.19973755]
[142.63607788 388.38439941]
[140.28955078 373.56909180]
[125.47189331 366.63687134]
[117.58789062 352.11444092]
[119.89169312 335.58435059]
[131.67739868 323.53454590]
[128.94386292 308.78570557]
[126.21032715 294.03689575]
[113.82806396 285.83840942]
[110.84576416 270.91995239]
[119.52903748 257.98788452]
[116.79550934 243.23905945]
[106.86840820 232.13491821]
[111.96126556 217.15582275]
[109.22772980 202.40699768]
[106.49419403 187.65817261]
[102.12770081 181.58000183]
[103.88745117 172.48780823]
[101.54093933 157.67248535]
[99.19441986 142.85716248]
[96.84790039 128.04183960]
[94.50138855 113.22650909]
[85.85240936 102.24076080]
[90.68328857 89.12000275]
[88.33676910 74.30467987]
[85.99025726 59.48935318]
[82.53613281 55.24844360]
[81.27025604 50.56963348]
[81.97733307 46.39276886]
[84.08876038 43.42369843]
[82.91187286 28.46993637]
[81.73498535 13.51617718]
[70.00052643 3.27214861]
[69.02001190 -11.90985584]
[78.85844421 -23.03374290]
[77.68155670 -37.98750305]
[68.88536072 -51.13807297]
[75.60024261 -64.43317413]
[74.42335510 -79.38693237]
[63.63499832 -94.23903656]
[71.65382385 -109.78942108]
[70.08589172 -124.70725250]
[58.08729172 -134.64059448]
[56.70970154 -149.79173279]
[66.25357056 -161.16934204]
[64.68564606 -176.08717346]
[63.11771774 -191.00500488]
[61.54979324 -205.92283630]
[59.98186493 -220.84065247]
[45.48532104 -225.50650024]
[34.14416885 -235.67007446]
[27.92333221 -249.57046509]
[27.90060806 -264.79937744]
[34.07993698 -278.71826172]
[45.39070892 -288.91564941]
[59.87326431 -293.62472534]
[75.01841736 -292.02963257]
[88.20217133 -284.40673828]
[97.14036560 -272.07675171]
[100.28440857 -257.17593384]
[97.08956909 -242.28590393]
[88.10936737 -229.98646545]
[74.89969635 -222.40858459]
[76.46762085 -207.49075317]
[78.03554535 -192.57292175]
[79.60347748 -177.65510559]
[81.17140198 -162.73727417]
[92.87225342 -153.59255981]
[94.67486572 -138.48609924]
[85.00372314 -126.27517700]
[86.57164764 -111.35734558]
[95.81645966 -103.43693542]
[97.18013763 -90.93489075]
[89.37711334 -80.56381989]
[90.55400085 -65.61006165]
[99.26602173 -53.52908325]
[92.63532257 -39.16439056]
[93.81220245 -24.21063042]
[105.26966858 -14.76276588]
[106.67622375 0.38570851]
[96.68874359 12.33929062]
[97.86563110 27.29305077]
[99.04251862 42.24681091]
[100.80558014 57.14283752]
[103.15209961 71.95816040]
[105.49861145 86.77349091]
[114.14759064 97.75923920]
[109.31671143 110.87999725]
[111.66323090 125.69532013]
[114.00974274 140.51065063]
[116.35626221 155.32597351]
[118.70278168 170.14129639]
[121.24301910 184.92463684]
[123.97655487 199.67346191]
[126.71008301 214.42228699]
[136.83270264 226.58135986]
[131.54432678 240.50552368]
[134.27786255 255.25434875]
[147.01882935 264.21566772]
[149.58091736 279.21200562]
[140.95915222 291.30337524]
[143.69268799 306.05218506]
[146.42622375 320.80099487]
[159.33464050 325.82974243]
[167.97903442 336.51574707]
[170.16534424 349.97537231]
[165.42381287 362.64456177]
[155.10488892 371.22256470]
[157.45140076 386.03790283]
[159.79791260 400.85321045]
[162.14443970 415.66854858]
[175.64074707 423.56686401]
[180.85386658 438.30990601]
[175.32232666 452.93646240]
[161.65792847 460.54031372]
[146.31260681 457.53115845]
[136.53195190 445.32980347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[4 110]
[8 105]
[9 104]
[10 103]
[13 100]
[14 99]
[16 97]
[17 96]
[18 95]
[20 94]
[21 93]
[22 92]
[23 91]
[24 90]
[26 88]
[27 87]
[28 86]
[32 85]
[33 84]
[34 83]
[37 80]
[38 79]
[40 77]
[41 76]
[43 73]
[44 72]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
