%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGGCAGGGAGAUAGUGUGAGACAGGAGCCCAGGGGAGAAAGACAGAAACUAAGACUCAAGGAGCAACGCAAAGCAAAGUCAAGGAGUCAAGACCAGAGUAGCUGAGCAGAGGCCAAGAAGGGUCUGAGAGGGCUGUGCAGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[109.59461975 190.67364502]
[85.26538086 189.98143005]
[61.98603821 182.87765503]
[41.41535568 169.86848450]
[30.86481094 180.53085327]
[20.31426620 191.19322205]
[9.76371956 201.85557556]
[17.38595581 214.87725830]
[21.37727547 229.42825317]
[21.46554756 244.51647949]
[17.64475250 259.11318970]
[10.17539597 272.22314453]
[-0.43324640 282.95251465]
[-13.45785999 290.56973267]
[-28.01040649 294.55541992]
[-43.09866714 294.63787842]
[-57.69390106 290.81143188]
[-70.80097961 283.33703613]
[-81.52623749 272.72424316]
[-89.13842010 259.69668579]
[-93.11849976 245.14259338]
[-93.19512177 230.05430603]
[-89.36305237 215.46055603]
[-81.88357544 202.35636902]
[-71.26664734 191.63519287]
[-58.23616028 184.02804565]
[-43.68053818 180.05358887]
[-28.59221840 179.98278809]
[-13.99994564 183.82049561]
[-0.89864290 191.30503845]
[9.65190315 180.64266968]
[20.20244789 169.98030090]
[30.75299454 159.31794739]
[25.50793648 152.58039856]
[20.91611290 145.38177490]
[17.01779366 137.78517151]
[13.84716129 129.85723877]
[11.43202209 121.66748047]
[9.79355240 113.28770447]
[8.94612217 104.79141235]
[8.89716148 96.25310516]
[9.64710140 87.74765778]
[11.18936348 79.34964752]
[13.51042461 71.13272095]
[16.58992958 63.16894531]
[20.40087509 55.52814865]
[24.90984154 48.27732849]
[30.07728958 41.48007965]
[35.85790253 35.19600296]
[42.20099258 29.48020744]
[49.05093384 24.38281250]
[56.34765625 19.94852066]
[64.02717590 16.21621704]
[72.02214813 13.21862888]
[80.26246643 10.98204613]
[88.67586517 9.52607918]
[88.04351807 -5.46058607]
[87.41117096 -20.44725037]
[86.77882385 -35.43391800]
[86.14647675 -50.42058182]
[73.38632202 -59.05103683]
[68.21521759 -73.37280273]
[72.41912079 -87.82241058]
[84.18460083 -96.91699982]
[83.55225372 -111.90366364]
[82.28868103 -126.85034943]
[80.39613342 -141.73048401]
[66.72785187 -149.07606506]
[60.01795578 -163.06738281]
[62.84653091 -178.32447815]
[74.12593842 -188.98068237]
[89.51900482 -190.93846130]
[103.10679626 -183.44503784]
[109.66452026 -169.38174438]
[106.67060089 -154.15625000]
[95.27626038 -143.62303162]
[97.16881561 -128.74290466]
[99.37464142 -126.91030121]
[100.96161652 -124.06407928]
[101.52867889 -120.44517517]
[100.77307129 -116.43904877]
[98.53891754 -112.53601074]
[99.17126465 -97.54934692]
[111.66104126 -89.47818756]
[117.06720734 -75.43406677]
[113.12092590 -60.72760010]
[101.13314056 -51.05292892]
[101.76548767 -36.06626511]
[102.39783478 -21.07959938]
[103.03018188 -6.09293413]
[103.66252899 8.89373112]
[117.77369690 10.56923389]
[131.45317078 14.41691303]
[144.36866760 20.34331322]
[156.20649719 28.20448875]
[166.67913818 37.80949783]
[175.53221130 48.92504883]
[182.55068970 61.28115463]
[187.56410217 74.57769775]
[190.45068359 88.49172211]
[191.14030457 102.68527222]
[189.61622620 116.81359863]
[185.91548157 130.53353882]
[180.12792969 143.51185608]
[192.67631531 151.73001099]
[205.22470093 159.94816589]
[217.77308655 168.16632080]
[236.14680481 168.74420166]
[243.49385071 184.64939880]
[256.21270752 192.60116577]
[268.93157959 200.55293274]
[284.73474121 201.30801392]
[291.42483521 214.61560059]
[304.14367676 222.56738281]
[319.94686890 223.32244873]
[326.63693237 236.63005066]
[339.35580444 244.58181763]
[360.73034668 243.91917419]
[369.85443115 262.39086914]
[383.05050659 269.52276611]
[396.24658203 276.65466309]
[412.61511230 275.65307617]
[421.43991089 289.47534180]
[413.64279175 303.90228271]
[397.24475098 304.09271240]
[389.11468506 289.85073853]
[375.91860962 282.71884155]
[362.72256470 275.58694458]
[354.63204956 279.52151489]
[345.50137329 279.24850464]
[337.41937256 274.70205688]
[332.29434204 266.80862427]
[331.40402222 257.30068970]
[318.68518066 249.34890747]
[303.79171753 249.16259766]
[296.19192505 235.28623962]
[283.47305298 227.33447266]
[268.57962036 227.14814758]
[260.97979736 213.27178955]
[248.26094055 205.32002258]
[235.54208374 197.36825562]
[223.64451599 199.77693176]
[212.96743774 193.19909668]
[209.55493164 180.71469116]
[197.00654602 172.49655151]
[184.45816040 164.27839661]
[171.90977478 156.06024170]
[154.51728821 173.08647156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 33]
[5 32]
[6 31]
[7 30]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[64 83]
[65 82]
[66 77]
[67 76]
[104 147]
[105 146]
[106 145]
[107 144]
[109 141]
[110 140]
[111 139]
[113 137]
[114 136]
[116 134]
[117 133]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
