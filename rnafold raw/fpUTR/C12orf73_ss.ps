%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAUUUUGGGUCCGGCCUGCUCGCCGUCCGCUCCGUCCGCCCUUAGACCUGUUGCCCAGCAUCCCUGCAGUUCGCGGUACAGUCUCUAGUAGAGCGCGUGUAUAGAGGCAGAGAGGAGUGAAGUCCACAGUUCCUCUCCUCCAAGAGCCUGCCGACC\
) } def
/len { sequence length } bind def

/coor [
[79.20214844 339.72344971]
[74.67010498 354.47012329]
[62.87013245 364.40811157]
[47.56754684 366.36630249]
[33.64535522 359.71978760]
[25.54607391 346.58947754]
[25.85415840 331.16519165]
[34.47129822 318.36877441]
[48.64779282 312.28350830]
[51.02376556 297.47286987]
[53.39973450 282.66223145]
[55.77570343 267.85159302]
[53.71881104 260.71008301]
[58.34896469 252.77133179]
[61.01893234 238.01086426]
[63.68890381 223.25039673]
[55.01512146 211.19631958]
[57.51258087 196.18907166]
[70.21482849 187.17294312]
[72.88479614 172.41247559]
[75.55476379 157.65200806]
[78.22473145 142.89155579]
[66.07197571 134.09892273]
[52.88734436 141.25192261]
[46.96560669 156.16207886]
[31.57494926 160.69056702]
[18.52176285 151.36351013]
[17.81933594 135.33584595]
[30.00651360 124.90261078]
[45.73433304 128.06730652]
[58.91896057 120.91429138]
[56.25227737 109.79135895]
[56.45855331 98.67032623]
[59.36822510 88.26145935]
[64.64389038 79.19119263]
[53.32542419 69.34780884]
[41.90965271 59.61743164]
[30.39771461 50.00102615]
[18.88577461 40.38462448]
[7.37383366 30.76821899]
[5.78036356 45.68333817]
[-6.76370716 53.90807724]
[-21.07740593 49.42276382]
[-26.68457413 35.51019287]
[-19.48134041 22.35293388]
[-4.74118328 19.58037376]
[-15.24181461 8.86885071]
[-30.42773438 4.43056154]
[-33.81214142 -10.07444000]
[-44.31277084 -20.78596306]
[-54.81340408 -31.49748802]
[-65.31403351 -42.20901108]
[-76.33393097 -52.38554764]
[-87.84587097 -62.00194931]
[-99.35781097 -71.61835480]
[-115.39002228 -77.13238525]
[-114.52964783 -94.06448364]
[-98.02108002 -97.92500305]
[-89.74140930 -83.13029480]
[-78.22946930 -73.51389313]
[-66.71752930 -63.89748764]
[-65.12406158 -78.81260681]
[-52.57998657 -87.03734589]
[-38.26628876 -82.55203247]
[-32.65911865 -68.63945770]
[-39.86235428 -55.48220444]
[-54.60251236 -52.70964432]
[-44.10187912 -41.99811935]
[-33.60124969 -31.28659439]
[-23.10061836 -20.57507133]
[-8.66577339 -16.90294075]
[-4.53029060 -1.63178039]
[5.97034073 9.07974339]
[16.99023819 19.25627899]
[28.50217819 28.87268257]
[40.01411819 38.48908615]
[51.52605820 48.10549164]
[58.71490479 49.99039078]
[63.16880798 58.02933884]
[74.48728180 67.87272644]
[95.92810059 59.17745209]
[118.66403961 63.46625519]
[127.81516266 51.58110046]
[136.96629333 39.69594955]
[146.11741638 27.81079483]
[155.26853943 15.92564201]
[164.41967773 4.04048872]
[173.57080078 -7.84466505]
[176.34904480 -16.60499191]
[183.02392578 -19.87274742]
[192.40954590 -31.57360840]
[195.00889587 -47.17982483]
[209.00798035 -52.26653290]
[208.69334412 -68.30650330]
[221.12925720 -78.44196320]
[236.77595520 -74.89786530]
[243.63061523 -60.39293289]
[236.43495178 -46.05410767]
[220.70884705 -42.88091278]
[218.78082275 -28.11161995]
[204.11041260 -22.18798637]
[194.72479248 -10.48712730]
[185.45594788 1.30646229]
[176.30482483 13.19161606]
[167.15370178 25.07676888]
[158.00257874 36.96192169]
[148.85144043 48.84707642]
[139.70031738 60.73223114]
[130.54919434 72.61738586]
[138.70364380 86.39527893]
[140.96363831 102.24513245]
[155.53868103 105.79029846]
[170.11372375 109.33547211]
[184.68876648 112.88063812]
[199.26380920 116.42580414]
[213.83885193 119.97097015]
[228.41387939 123.51613617]
[243.08816528 126.62508392]
[257.84863281 129.29505920]
[272.60910034 131.96502686]
[286.55776978 124.03952789]
[301.39688110 130.13711548]
[305.74310303 145.58023071]
[296.26239014 158.52224731]
[280.22753906 159.03514099]
[269.93911743 146.72547913]
[255.17864990 144.05551147]
[240.41819763 141.38554382]
[237.29452515 143.12956238]
[233.15789795 143.41497803]
[228.71829224 141.77665710]
[224.86871338 138.09117126]
[210.29367065 134.54600525]
[195.71864319 131.00083923]
[181.14360046 127.45567322]
[166.56855774 123.91050720]
[151.99351501 120.36534119]
[137.41847229 116.82017517]
[134.26025391 123.85974121]
[129.76869202 130.29716492]
[124.06054688 135.87863159]
[117.30105591 140.37327576]
[109.69933319 143.58261108]
[101.50199890 145.34875488]
[92.98519897 145.56152344]
[90.31523132 160.32197571]
[87.64526367 175.08244324]
[84.97528839 189.84291077]
[93.71419525 202.73745728]
[90.79619598 217.66862488]
[78.44936371 225.92036438]
[75.77939606 240.68083191]
[73.10942841 255.44129944]
[70.58633423 270.22756958]
[68.21036530 285.03820801]
[65.83439636 299.84884644]
[63.45842361 314.65945435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 157]
[10 156]
[11 155]
[12 154]
[14 153]
[15 152]
[16 151]
[19 148]
[20 147]
[21 146]
[22 145]
[23 31]
[24 30]
[35 80]
[36 79]
[37 77]
[38 76]
[39 75]
[40 74]
[46 73]
[47 72]
[49 70]
[50 69]
[51 68]
[52 67]
[53 61]
[54 60]
[55 59]
[82 109]
[83 108]
[84 107]
[85 106]
[86 105]
[87 104]
[88 103]
[90 102]
[91 101]
[93 99]
[111 138]
[112 137]
[113 136]
[114 135]
[115 134]
[116 133]
[117 132]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
