%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCGGCGGCGUGCCAGCCUAGCCACUCUAGCGACGGCGGGGAAGAGUGUGUACGUGGUGGGGGCUUCCUCGGUGGCGGGC\
) } def
/len { sequence length } bind def

/coor [
[4.96924353 248.52378845]
[-2.19655371 261.70147705]
[-9.36235142 274.87915039]
[-16.52814865 288.05685425]
[-15.56865597 304.42788696]
[-29.41356277 313.21713257]
[-43.82041550 305.38293457]
[-43.96867752 288.98446655]
[-29.70583153 280.89105225]
[-22.54003525 267.71334839]
[-15.37423801 254.53567505]
[-8.20843983 241.35800171]
[-12.24417210 232.95182800]
[-11.79887676 223.49742126]
[-6.84649324 215.26754761]
[1.53971457 210.30364990]
[11.41722488 209.91001892]
[20.04700470 197.64108276]
[28.67678452 185.37214661]
[37.30656433 173.10319519]
[38.61157608 165.63104248]
[46.50931931 160.53820801]
[55.60269928 148.60882568]
[64.69608307 136.67942810]
[73.78945923 124.75003815]
[82.88284302 112.82064056]
[91.97622681 100.89125061]
[88.48363495 99.58225250]
[85.27566528 97.27285004]
[82.56874084 94.02898407]
[80.56452942 89.95814514]
[73.39873505 76.78046417]
[59.13588715 68.68704987]
[59.28414917 52.28857422]
[73.69100189 44.45437622]
[87.53591156 53.24361038]
[86.57641602 69.61466217]
[93.74221039 82.79235077]
[108.12722778 87.04339600]
[121.30490875 79.87759399]
[134.48258972 72.71179962]
[147.66027832 65.54600525]
[160.83796692 58.38020325]
[164.84669495 52.60358810]
[170.38696289 50.27335739]
[175.31021118 51.21453476]
[188.99777222 45.07850647]
[202.68531799 38.94247818]
[212.11294556 26.23694420]
[226.89170837 28.09093094]
[236.31933594 15.38539982]
[251.09809875 17.23938560]
[264.78564453 11.10335732]
[278.47320557 4.96732712]
[290.45309448 -7.02927160]
[305.29724121 1.16145778]
[301.53585815 17.69289589]
[284.60922241 18.65488243]
[270.92169189 24.79091072]
[257.23413086 30.92694092]
[248.78553772 43.19358444]
[233.02774048 41.77848434]
[224.57914734 54.04512787]
[208.82135010 52.63003159]
[195.13380432 58.76605988]
[181.44624329 64.90209198]
[168.00375366 71.55789185]
[154.82608032 78.72368622]
[141.64839172 85.88948059]
[128.47070312 93.05528259]
[115.29302216 100.22107697]
[103.90561676 109.98462677]
[94.81223297 121.91402435]
[85.71885681 133.84341431]
[76.62547302 145.77281189]
[67.53208923 157.70220947]
[58.43871307 169.63159180]
[49.57550430 181.73298645]
[40.94572449 194.00192261]
[32.31594467 206.27085876]
[23.68616486 218.53981018]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[17 81]
[18 80]
[19 79]
[20 78]
[22 77]
[23 76]
[24 75]
[25 74]
[26 73]
[27 72]
[31 38]
[32 37]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[46 66]
[47 65]
[48 64]
[50 62]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
