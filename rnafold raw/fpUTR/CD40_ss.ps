%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCUGGGCGGGGCCAAGGCUGGGGCAGGGGAGUCAGCAGAGGCCUCGCUCGGGCGCCCAGUGGUCCUGCCGCCUGGUCUCACCUCGCU\
) } def
/len { sequence length } bind def

/coor [
[137.20129395 299.67507935]
[122.51016998 296.64672852]
[111.61942291 286.33209229]
[107.79785156 271.82705688]
[112.19247437 257.48526001]
[123.48428345 247.61131287]
[138.28408813 245.16879272]
[152.14891052 250.89013672]
[146.58854675 236.95880127]
[141.02818298 223.02745056]
[135.46780396 209.09611511]
[129.90744019 195.16476440]
[124.34707642 181.23342896]
[118.78671265 167.30207825]
[113.22634888 153.37072754]
[107.66598511 139.43939209]
[102.10561371 125.50804901]
[83.11269379 119.23312378]
[74.43387604 101.21136475]
[81.36983490 82.44975281]
[73.94470215 69.41643524]
[66.51956940 56.38311768]
[52.96551895 48.22234344]
[53.38825607 33.33374023]
[45.96312332 20.30042076]
[38.53799057 7.26710033]
[31.11285973 -5.76621914]
[23.99263954 -11.83360863]
[23.66527557 -19.38004303]
[16.69442940 -32.66188431]
[9.72358131 -45.94372559]
[2.75273347 -59.22556686]
[-12.06773567 -64.02050781]
[-18.94796181 -77.58948517]
[-14.28538418 -91.68898773]
[-21.25623131 -104.97082520]
[-35.39827347 -113.27352142]
[-35.00839615 -129.66802979]
[-20.48767281 -137.28909302]
[-6.77377748 -128.29681396]
[-7.97439098 -111.94167328]
[-1.00354362 -98.65983582]
[13.24876499 -94.48762512]
[20.50740051 -81.11725616]
[16.03457451 -66.19641113]
[23.00542068 -52.91457367]
[29.97626877 -39.63273239]
[36.94711685 -26.35089111]
[44.14617920 -13.19135094]
[51.57131195 -0.15803151]
[58.99644089 12.87528801]
[66.42157745 25.90860748]
[79.44453430 33.13714981]
[79.55289459 48.95798492]
[86.97802734 61.99130249]
[94.40315247 75.02462006]
[104.15615082 74.74488831]
[113.30516052 78.13526154]
[120.52065277 84.70304871]
[124.75405884 93.49380493]
[125.39017487 103.23004913]
[122.33655548 112.49689484]
[116.03695679 119.94768524]
[121.59732819 133.87902832]
[127.15769196 147.81036377]
[132.71806335 161.74171448]
[138.27842712 175.67304993]
[143.83879089 189.60440063]
[149.39915466 203.53573608]
[154.95951843 217.46708679]
[160.51988220 231.39843750]
[166.08024597 245.32977295]
[173.72923279 258.23300171]
[183.28262329 269.79727173]
[198.77239990 271.44174194]
[208.29614258 283.30569458]
[206.63294983 298.06268311]
[216.18632507 309.62698364]
[225.73970032 321.19128418]
[240.48895264 329.55166626]
[236.53831482 346.03887939]
[219.60177612 346.80676270]
[214.17539978 330.74465942]
[204.62202454 319.18035889]
[195.06864929 307.61608887]
[180.26293945 306.46417236]
[170.40972900 294.87243652]
[171.71832275 279.35067749]
[162.16494751 267.78637695]
[160.52961731 282.69696045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[13 67]
[14 66]
[15 65]
[16 64]
[17 63]
[20 56]
[21 55]
[22 54]
[24 52]
[25 51]
[26 50]
[27 49]
[29 48]
[30 47]
[31 46]
[32 45]
[35 42]
[36 41]
[73 89]
[74 88]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
