%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAAGGCAGUCUUGUGGGUGCCUCCUCCCCCAGCCGCAACUCAGGUCUGCAGCUGGGUCCUGCCUCCUUCCGAGUGGGCC\
) } def
/len { sequence length } bind def

/coor [
[83.11849976 129.43524170]
[73.67079163 121.40541077]
[60.22830963 128.06120300]
[51.29426575 141.11851501]
[36.45532608 139.83195496]
[23.01284409 146.48776245]
[9.57036114 153.14355469]
[-3.87212253 159.79934692]
[-17.31460571 166.45515442]
[-26.24865150 179.51246643]
[-41.08758926 178.22590637]
[-54.53007126 184.88169861]
[-63.16384888 198.82408142]
[-79.54460907 198.04782104]
[-86.82123566 183.35147095]
[-77.50815582 169.85337830]
[-61.18586731 171.43922424]
[-47.74338531 164.78341675]
[-39.77083588 152.20217896]
[-23.97040367 153.01266479]
[-10.52791977 146.35687256]
[2.91456318 139.70108032]
[16.35704613 133.04527283]
[29.79953003 126.38948059]
[37.77207947 113.80823517]
[53.57251358 114.61872101]
[67.01499176 107.96292877]
[68.33945465 87.79228210]
[80.89942932 71.95384216]
[100.23771667 66.06826782]
[103.65551758 51.46284103]
[107.07331848 36.85740662]
[110.49112701 22.25197601]
[113.90892792 7.64654541]
[117.32672882 -6.95888615]
[112.93737030 -22.15902138]
[123.37110138 -32.78853607]
[126.78890228 -47.39396667]
[130.20671082 -61.99940109]
[133.34411621 -76.66761780]
[136.19998169 -91.39324188]
[130.34571838 -106.71184540]
[140.89350891 -119.26876831]
[156.99269104 -116.14651489]
[162.08180237 -100.55699921]
[150.92561340 -88.53737640]
[148.06974792 -73.81175232]
[149.93554688 -66.45954132]
[144.81213379 -58.58159637]
[141.39433289 -43.97616577]
[137.97653198 -29.37073517]
[142.61035156 -15.21527672]
[131.93215942 -3.54108334]
[128.51435852 11.06434822]
[125.09655762 25.66977882]
[121.67875671 40.27521133]
[118.26094818 54.88064194]
[114.84314728 69.48607635]
[123.98501587 75.99712372]
[130.50286865 85.13414764]
[133.68365479 95.89751434]
[133.17936707 107.10970306]
[129.04521179 117.54408264]
[139.85302734 127.94557190]
[150.66085815 138.34706116]
[161.46867371 148.74855042]
[176.77729797 152.74313354]
[180.58227539 167.14353943]
[191.39009094 177.54502869]
[207.43019104 180.95785522]
[212.23660278 196.63684082]
[200.86489868 208.45277405]
[185.01332092 204.25044250]
[180.98861694 188.35284424]
[170.18078613 177.95135498]
[155.64521790 174.70074463]
[151.06718445 159.55636597]
[140.25936890 149.15487671]
[129.45153809 138.75338745]
[118.64371490 128.35189819]
[107.21354675 133.15695190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[11 18]
[12 17]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[37 51]
[38 50]
[39 49]
[40 47]
[41 46]
[63 80]
[64 79]
[65 78]
[66 77]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
