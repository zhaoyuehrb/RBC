%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGCGGUCGGCUCCUGCUGCCCCUGUGCCGAGACCCCGCGCACCUGGCCAGGCCCCUGGCCCCAAC\
) } def
/len { sequence length } bind def

/coor [
[71.31827545 120.41551971]
[57.52536011 126.31089020]
[43.73244476 132.20626831]
[29.93952560 138.10163879]
[16.14661026 143.99702454]
[2.35369325 149.89239502]
[-11.43922329 155.78776550]
[-25.23213959 161.68315125]
[-39.02505493 167.57852173]
[-43.38628387 182.59564209]
[-56.40868378 191.25306702]
[-71.94347382 189.46304321]
[-82.65560913 178.07075500]
[-83.48714447 162.45529175]
[-74.04544830 149.98980713]
[-58.78860474 146.56010437]
[-44.92043304 153.78559875]
[-31.12751579 147.89022827]
[-17.33459854 141.99485779]
[-3.54168200 136.09947205]
[10.25123405 130.20410156]
[24.04415131 124.30873108]
[37.83706665 118.41335297]
[51.62998581 112.51797485]
[65.42289734 106.62260437]
[67.38101959 86.75475311]
[79.82843018 71.14618683]
[98.76242828 64.81615448]
[101.44078064 50.05720901]
[104.11914062 35.29826736]
[106.79749298 20.53932190]
[109.14400482 5.72399712]
[111.15750885 -9.14024925]
[101.38522339 -21.56111717]
[103.34098053 -37.24392700]
[115.86447144 -46.88434601]
[131.52572632 -44.76288605]
[141.03320312 -32.13816833]
[138.74627686 -16.50021744]
[126.02175140 -7.12675047]
[124.00825500 7.73749590]
[126.30738068 15.02387619]
[121.55643463 23.21767616]
[118.87808228 37.97661972]
[116.19972992 52.73556137]
[113.52137756 67.49450684]
[126.08640289 76.35820770]
[133.67495728 89.73201752]
[134.83940125 105.06463623]
[148.88293457 110.33525848]
[162.92645264 115.60588074]
[176.96997070 120.87650299]
[191.01350403 126.14712524]
[205.05702209 131.41775513]
[221.13717651 128.19895935]
[231.76011658 140.69236755]
[225.99786377 156.04582214]
[209.77813721 158.46501160]
[199.78639221 145.46127319]
[185.74287415 140.19064331]
[171.69935608 134.92002869]
[157.65582275 129.64939880]
[143.61230469 124.37878418]
[129.56878662 119.10816193]
[123.17721558 126.50002289]
[114.99997711 131.85020447]
[105.66706085 134.74649048]
[95.89753723 134.96575928]
[86.44408417 132.49110413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[28 46]
[29 45]
[30 44]
[31 43]
[32 41]
[33 40]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
