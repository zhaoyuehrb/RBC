%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCCCGCCCCGGAAGUGCAAACUGUGUGGUCUGGCAGGUGUGGAUUCCGCCGGUGAAGGCUGAAGGCAGCUACCUUAAAG\
) } def
/len { sequence length } bind def

/coor [
[162.20100403 175.57086182]
[177.15959167 174.45941162]
[165.68922424 164.79345703]
[154.21885681 155.12750244]
[142.74848938 145.46154785]
[131.27812195 135.79559326]
[116.55979156 133.51081848]
[110.99282074 118.70138550]
[99.52245331 109.03543091]
[95.38312531 108.86909485]
[91.37469482 106.74520111]
[88.43096924 102.78862000]
[87.38163757 97.56506348]
[77.08036804 86.66168213]
[66.77909851 75.75829315]
[56.47782516 64.85490417]
[38.80146790 60.13079453]
[35.15520477 43.07548523]
[24.44871330 32.56972122]
[13.74222183 22.06396103]
[3.03572989 11.55819893]
[-10.00703812 10.85692310]
[-18.71939468 1.67519033]
[-18.73390388 -10.57798290]
[-29.03517342 -21.48136902]
[-39.33644104 -32.38475800]
[-49.63771057 -43.28814316]
[-65.00860596 -41.16325378]
[-78.67700195 -48.50864410]
[-85.38710785 -62.49985504]
[-82.55876160 -77.75698853]
[-71.27951813 -88.41336060]
[-55.88647461 -90.37137604]
[-42.29857254 -82.87815094]
[-35.74063492 -68.81496429]
[-38.73432541 -53.58941269]
[-28.43305588 -42.68602753]
[-18.13178635 -31.78263855]
[-7.83051682 -20.87925148]
[9.15273571 -16.91088486]
[13.54149151 0.85170722]
[24.24798393 11.35746956]
[34.95447540 21.86323166]
[45.66096878 32.36899185]
[57.91167068 32.61537933]
[66.92688751 41.49993134]
[67.38121033 54.55363464]
[77.68247986 65.45702362]
[87.98374939 76.36041260]
[98.28501892 87.26379395]
[109.18840790 97.56506348]
[120.65877533 107.23101807]
[136.19754028 110.20716858]
[140.94407654 124.32522583]
[152.41444397 133.99118042]
[163.88481140 143.65713501]
[175.35517883 153.32308960]
[186.82554626 162.98904419]
[196.20045471 164.63726807]
[201.52865601 171.23233032]
[215.75900269 175.97544861]
[229.98934937 180.71856689]
[244.21971130 185.46166992]
[258.45004272 190.20478821]
[274.39895630 186.38844299]
[285.48052979 198.47689819]
[280.29498291 214.03460693]
[264.17678833 217.05712891]
[253.70693970 204.43513489]
[239.47659302 199.69203186]
[225.24624634 194.94891357]
[211.01588440 190.20579529]
[196.78553772 185.46267700]
[203.64112854 198.80438232]
[203.78897095 213.80364990]
[197.19766235 227.27787781]
[185.26582336 236.36802673]
[170.52517700 239.14532471]
[156.10346985 235.02044678]
[145.06079102 224.86865234]
[139.74020386 210.84397888]
[141.27067566 195.92225647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 58]
[3 57]
[4 56]
[5 55]
[6 54]
[8 52]
[9 51]
[13 50]
[14 49]
[15 48]
[16 47]
[18 44]
[19 43]
[20 42]
[21 41]
[24 39]
[25 38]
[26 37]
[27 36]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
