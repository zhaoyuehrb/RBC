%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAGGCCUCUCGGCGAGCCGGUGCCCCAUCGGGUACCGCACGGCUGCCGCGGCGGCCUUACCCUGCCGCGAGCGCCUGUGACAGCGGCGCCGCUGUGCUCGCGACCCCGGCUCCGGGCCUCUGCCGACCUCAGGGGCAGGAAAGAGUCGCCCGGCGGG\
) } def
/len { sequence length } bind def

/coor [
[222.29693604 214.18969727]
[215.38496399 216.89140320]
[208.06791687 218.18748474]
[200.62901306 218.02389526]
[193.35699463 216.40318298]
[186.53485107 213.38447571]
[180.42883301 209.08145142]
[175.27806091 203.65791321]
[171.28515625 197.32168579]
[168.60829163 190.31658936]
[167.35488892 182.91307068]
[167.57734680 175.39776611]
[169.27084351 168.06236267]
[172.37339783 161.19236755]
[161.16076660 151.22857666]
[149.94815063 141.26480103]
[138.73551941 131.30101013]
[127.52289581 121.33722687]
[116.31027222 111.37343597]
[86.36444855 121.88546753]
[72.62163544 127.89670563]
[58.87881088 133.90792847]
[45.13599396 139.91917419]
[31.39317322 145.93040466]
[17.65035439 151.94163513]
[3.90753508 157.95286560]
[-9.83528423 163.96409607]
[-19.12013626 177.48162842]
[-35.44570541 175.92990112]
[-42.01764297 160.90519714]
[-32.07530594 147.86364746]
[-15.84651661 150.22128296]
[-2.10369754 144.21005249]
[11.63912201 138.19880676]
[25.38194084 132.18757629]
[39.12475967 126.17634583]
[52.86758041 120.16511536]
[66.61039734 114.15388489]
[80.35321808 108.14265442]
[83.27957153 93.43087006]
[72.88326263 82.61806488]
[62.48695374 71.80526733]
[51.98498917 61.09504700]
[41.37838745 50.48844528]
[30.77178764 39.88184357]
[22.44499397 35.99914932]
[20.06362343 28.96133232]
[9.66731262 18.14852715]
[-0.83464998 7.43830872]
[-11.44125175 -3.16829324]
[-22.04785347 -13.77489471]
[-32.65445328 -24.38149643]
[-43.26105499 -34.98809814]
[-53.86765671 -45.59469986]
[-64.47425842 -56.20130157]
[-75.08086395 -66.80790710]
[-90.64212799 -65.26484680]
[-103.52537537 -74.12802124]
[-107.64752960 -89.21251678]
[-101.06224060 -103.39588165]
[-86.87886810 -109.98117828]
[-71.79438019 -105.85901642]
[-62.93120193 -92.97576904]
[-64.47425842 -77.41450500]
[-53.86765671 -66.80790710]
[-43.26105499 -56.20130157]
[-32.65445328 -45.59469986]
[-22.04785347 -34.98809814]
[-11.44125175 -24.38149643]
[-0.83464998 -13.77489471]
[9.77195168 -3.16829324]
[16.76165771 -0.64920336]
[20.48011589 7.75221729]
[30.87642670 18.56502151]
[41.37838745 29.27523994]
[51.98498917 39.88184357]
[62.59159088 50.48844528]
[69.58129883 53.00753403]
[73.29975891 61.40895462]
[83.69606781 72.22175598]
[94.09237671 83.03456116]
[108.80415344 80.10820770]
[114.27121735 66.13998413]
[119.73827362 52.17176056]
[125.20532990 38.20353317]
[130.67239380 24.23531151]
[136.13945007 10.26708698]
[133.14648438 -5.85663080]
[145.78764343 -16.30331230]
[161.05877686 -10.32630634]
[163.25025940 5.92575502]
[150.10766602 15.73414421]
[144.64060974 29.70236778]
[139.17355347 43.67059326]
[133.70649719 57.63881683]
[128.23944092 71.60704041]
[122.77237701 85.57526398]
[126.27406311 100.16081238]
[137.48667908 110.12460327]
[148.69931030 120.08838654]
[159.91194153 130.05216980]
[171.12455750 140.01596069]
[182.33718872 149.97975159]
[204.84190369 142.42626953]
[227.35310364 149.58917236]
[241.21884155 168.57263184]
[241.19445801 191.96553040]
[254.28189087 199.29484558]
[267.36932373 206.62416077]
[280.45678711 213.95347595]
[285.78009033 213.87651062]
[290.14328003 215.69702148]
[292.97778320 218.71852112]
[294.08047485 222.11920166]
[306.71371460 230.20628357]
[319.34698486 238.29335022]
[331.98022461 246.38043213]
[344.61349487 254.46749878]
[357.24676514 262.55456543]
[370.03634644 270.39205933]
[382.97738647 277.97692871]
[395.91839600 285.56176758]
[408.85940552 293.14663696]
[427.24664307 292.81802368]
[435.36169434 308.35305786]
[448.44912720 315.68237305]
[463.48605347 311.61679077]
[476.65417480 319.23620605]
[480.43740845 333.59664917]
[493.52484131 340.92599487]
[506.61230469 348.25531006]
[523.38623047 350.71923828]
[525.66210938 367.51971436]
[510.14819336 374.35748291]
[499.28295898 361.34274292]
[486.19552612 354.01342773]
[473.10809326 346.68411255]
[458.88705444 350.96166992]
[445.51013184 343.71514893]
[441.11981201 328.76980591]
[428.03237915 321.44049072]
[416.27508545 324.42025757]
[405.29757690 318.37802124]
[401.27453613 306.08764648]
[388.33352661 298.50277710]
[375.39251709 290.91793823]
[362.45150757 283.33306885]
[357.63995361 283.66699219]
[352.57629395 280.94589233]
[349.15966797 275.18783569]
[336.52642822 267.10076904]
[323.89315796 259.01367188]
[311.25991821 250.92660522]
[298.62664795 242.83953857]
[285.99337769 234.75245667]
[273.12747192 227.04092407]
[260.04000854 219.71159363]
[246.95257568 212.38227844]
[233.86514282 205.05296326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 103]
[15 102]
[16 101]
[17 100]
[18 99]
[19 98]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[40 81]
[41 80]
[42 79]
[43 77]
[44 76]
[45 75]
[47 74]
[48 73]
[49 71]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
[107 159]
[108 158]
[109 157]
[110 156]
[114 155]
[115 154]
[116 153]
[117 152]
[118 151]
[119 150]
[120 147]
[121 146]
[122 145]
[123 144]
[125 141]
[126 140]
[129 137]
[130 136]
[131 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
