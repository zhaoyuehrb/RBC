%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCCGAACCCAGCAGCUGGCCUGGGAGGGAGAAGGGGCUGGAGAGGGCCUGGCCUCUCCGAGGG\
) } def
/len { sequence length } bind def

/coor [
[150.71157837 118.87152100]
[136.11001587 115.43726349]
[121.50843811 112.00300598]
[106.83144379 108.90692902]
[92.02711487 106.49199677]
[77.17095947 104.41964722]
[62.31480408 102.34730530]
[53.67625427 109.64220428]
[42.64956665 110.75548553]
[33.12028885 105.54897308]
[28.30344963 96.06736755]
[13.70187855 92.63311005]
[-0.89969236 89.19885254]
[-15.50126362 85.76459503]
[-30.10283470 82.33033752]
[-44.77983475 79.23426056]
[-58.77463913 87.07804871]
[-73.57782745 80.89378357]
[-77.83366394 65.42551422]
[-68.27743530 52.53916550]
[-52.23985672 52.12004471]
[-42.02359009 64.48966217]
[-34.62039948 62.55564880]
[-26.66857529 67.72876740]
[-12.06700516 71.16302490]
[2.53456593 74.59728241]
[17.13613701 78.03153992]
[31.73770714 81.46579742]
[49.46620178 74.28971100]
[64.38714600 87.49114990]
[79.24330139 89.56349182]
[94.09946442 91.63583374]
[102.18177032 89.49361420]
[109.58768463 94.16233826]
[118.95149231 92.64190674]
[124.94270325 97.40143585]
[139.54426575 100.83569336]
[154.14584351 104.26995087]
[167.19631958 92.10786438]
[184.75297546 89.97080231]
[200.07293701 98.49842072]
[207.37872314 114.26902771]
[222.23487854 116.34137726]
[237.09103394 118.41371918]
[251.94718933 120.48606873]
[266.80334473 122.55841064]
[281.65951538 124.63075256]
[296.51565552 126.70310211]
[311.37182617 128.77545166]
[323.83129883 119.05242157]
[339.50622559 121.07027435]
[349.09698486 133.63185120]
[346.91351318 149.28457642]
[334.25125122 158.74198914]
[318.62246704 156.39315796]
[309.29946899 143.63160706]
[294.44332886 141.55926514]
[279.58715820 139.48690796]
[264.73098755 137.41456604]
[249.87484741 135.34222412]
[235.01869202 133.26988220]
[220.16253662 131.19752502]
[205.30638123 129.12518311]
[198.00808716 139.29879761]
[186.94564819 145.31840515]
[174.29267883 145.92843628]
[162.56718445 140.94348145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 34]
[5 32]
[6 31]
[7 30]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 22]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
