%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAGUCUCCGGCGAGUUGUUGCCUGGGCUGGACGUGGUUUUGUCUGCUGCGCCCGCUCUUCGCGCUCUCGUUUCAUUUUCUGCAGCGCGCCAGCAGG\
) } def
/len { sequence length } bind def

/coor [
[103.55339050 154.49357605]
[90.87942505 146.47042847]
[85.61736298 132.42370605]
[89.90013123 118.04880524]
[76.67832947 125.13287354]
[63.45653152 132.21693420]
[50.23472977 139.30101013]
[37.01293182 146.38507080]
[32.47567368 158.58697510]
[21.16707611 164.17718506]
[9.48895454 160.60733032]
[-3.95095205 167.26832581]
[-17.39085770 173.92932129]
[-30.83076477 180.59031677]
[-44.27067184 187.25132751]
[-52.89905167 201.19703674]
[-69.28011322 200.42712402]
[-76.56243134 185.73358154]
[-67.25457001 172.23188782]
[-50.93167114 173.81141663]
[-37.49176407 167.15042114]
[-24.05185699 160.48941040]
[-10.61195087 153.82841492]
[2.82795548 147.16741943]
[11.63264084 132.07852173]
[29.92886543 133.16326904]
[43.15066528 126.07920837]
[56.37246704 118.99514008]
[69.59426880 111.91107178]
[82.81606293 104.82700348]
[87.72208405 90.65199280]
[81.70812988 76.91036987]
[69.08701324 67.37003326]
[71.07246399 52.60835266]
[65.05850983 38.86672592]
[59.04454803 25.12509727]
[53.03059006 11.38347149]
[47.01663208 -2.35815573]
[41.00267410 -16.09978294]
[25.94855499 -20.33150101]
[17.17927933 -33.27885056]
[18.83543396 -48.82848740]
[30.13503265 -59.63834763]
[45.74275208 -60.60434723]
[58.28910065 -51.27037048]
[61.85007858 -36.04363632]
[54.74430084 -22.11374092]
[60.75825882 -8.37211323]
[66.77221680 5.36951303]
[72.78617859 19.11113930]
[78.80013275 32.85276794]
[84.81409454 46.59439468]
[97.00505066 55.15183640]
[95.44975281 70.89640808]
[101.46371460 84.63803864]
[113.68235016 93.33889008]
[128.63517761 94.52764130]
[143.58799744 95.71639252]
[152.85328674 85.78964233]
[165.96534729 83.10956573]
[178.02476501 88.44612122]
[184.65887451 99.61632538]
[199.56645203 101.27890015]
[214.47402954 102.94147491]
[229.38160706 104.60404968]
[244.28918457 106.26661682]
[259.19677734 107.92919159]
[274.12884521 109.35503387]
[281.00949097 95.80050659]
[292.55670166 85.91465759]
[307.00964355 81.20500946]
[322.16433716 82.38974762]
[335.70980835 89.28820801]
[345.58047485 100.84842682]
[350.27108765 115.30755615]
[349.06643677 130.46067810]
[342.15014648 143.99707031]
[330.57696533 153.85249329]
[316.11166382 158.52410889]
[300.96014404 157.29949951]
[287.43286133 150.36541748]
[277.59268188 138.77928162]
[272.94009399 124.30785370]
[265.89401245 126.96442413]
[257.53417969 122.83676910]
[242.62661743 121.17419434]
[227.71903992 119.51162720]
[212.81146240 117.84905243]
[197.90388489 116.18647766]
[182.99630737 114.52390289]
[170.41911316 125.56239319]
[153.40812683 124.14998627]
[142.39924622 110.66921234]
[127.44642639 109.48046112]
[112.49360657 108.29170990]
[125.89469147 115.03047180]
[132.51173401 128.49208069]
[129.66204834 143.21890259]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[31 55]
[32 54]
[34 52]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[56 95]
[57 94]
[58 93]
[62 90]
[63 89]
[64 88]
[65 87]
[66 86]
[67 85]
[68 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
