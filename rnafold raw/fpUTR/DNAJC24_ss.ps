%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUUCCGGCGGAAGAAGAAGCCGGUCCGGAGUUCUGGCCGACAGCAGGCGAGGAGUGGGUAGCAGCGCCUAUGUGAAGUUAGCUAAUCUGAGAAGGCCCACUUCUGGUUCCAUGG\
) } def
/len { sequence length } bind def

/coor [
[116.26441956 127.66923523]
[104.48274994 134.20274353]
[90.13154602 135.55078125]
[83.16069794 148.83262634]
[76.18984985 162.11447144]
[69.21900177 175.39631653]
[62.24815750 188.67814636]
[60.24111176 205.51287842]
[43.50868607 208.24458313]
[36.25173569 192.92228699]
[48.96631622 181.70730591]
[55.93716431 168.42546082]
[62.90801239 155.14361572]
[69.87886047 141.86178589]
[76.84970856 128.57994080]
[73.45375061 121.89282990]
[60.96860504 130.20674133]
[49.32976913 139.66915894]
[36.21222305 132.39385986]
[38.07632065 117.51014709]
[52.58321762 113.69471741]
[66.66184235 108.51860046]
[63.26589203 101.83148193]
[48.42916870 99.62429810]
[33.59244537 97.41712189]
[24.50965309 99.26297760]
[18.38915062 94.94634247]
[3.61703444 92.34162140]
[-11.15508175 89.73690033]
[-25.92719841 87.13217926]
[-41.14390182 93.24641418]
[-53.87859344 82.91395569]
[-51.03091049 66.76394653]
[-35.53030777 61.41013336]
[-23.32247543 72.36006165]
[-8.55035877 74.96478271]
[6.22175694 77.56950378]
[20.99387360 80.17422485]
[35.79962921 82.58039856]
[50.63634872 84.78758240]
[65.47307587 86.99475861]
[93.62496948 69.76932526]
[117.77053070 82.56379700]
[131.14476013 75.77188873]
[133.70474243 60.58134079]
[144.59127808 49.93537140]
[159.48292542 47.76679230]
[172.63854980 54.69986343]
[186.01278687 47.90795517]
[199.38700867 41.11604691]
[208.18804932 27.96871948]
[223.03929138 29.10458374]
[236.41351318 22.31267548]
[249.78775024 15.52076721]
[263.16195679 8.72885895]
[276.53619385 1.93695152]
[289.91043091 -4.85495663]
[303.28466797 -11.64686394]
[316.65887451 -18.43877220]
[330.03311157 -25.23068047]
[343.40734863 -32.02258682]
[348.45083618 -51.34233475]
[365.71264648 -60.76771927]
[384.12213135 -54.75111008]
[396.90646362 -62.59717178]
[409.69079590 -70.44322968]
[410.49496460 -88.44760895]
[421.76879883 -102.30844116]
[438.93048096 -106.68621063]
[455.17828369 -100.03709412]
[467.52304077 -108.55806732]
[479.86779785 -117.07904053]
[480.10812378 -132.59425354]
[489.44903564 -144.98483276]
[504.29882812 -149.48635864]
[518.94738770 -144.36788940]
[527.76208496 -131.59757996]
[527.35351562 -116.08589172]
[517.87872314 -103.79737091]
[502.98095703 -99.45720673]
[488.38876343 -104.73428345]
[476.04400635 -96.21331024]
[463.69924927 -87.69233704]
[465.20736694 -75.49909973]
[461.31607056 -63.76886749]
[452.71865845 -54.78960800]
[441.03265381 -50.34079361]
[428.49563599 -51.34097672]
[417.53686523 -57.65889359]
[404.75253296 -49.81283188]
[391.96820068 -41.96677017]
[392.34658813 -31.48449707]
[388.24383545 -21.74259377]
[380.35977173 -14.57959938]
[370.11468506 -11.37853909]
[359.39349365 -12.80026150]
[350.19924927 -18.64835930]
[336.82501221 -11.85645199]
[323.45080566 -5.06454372]
[310.07656860 1.72736418]
[296.70233154 8.51927185]
[283.32809448 15.31118011]
[269.95388794 22.10308838]
[256.57965088 28.89499664]
[243.20542908 35.68690491]
[229.83119202 42.47881317]
[221.98677063 55.14033508]
[206.17892456 54.49027634]
[192.80468750 61.28218460]
[179.43046570 68.07408905]
[177.26724243 82.78662109]
[166.73083496 93.53130341]
[151.71232605 96.04084015]
[137.93666077 89.14611816]
[124.56243896 95.93802643]
[126.53154755 106.41406250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[6 12]
[7 11]
[23 41]
[24 40]
[25 39]
[27 38]
[28 37]
[29 36]
[30 35]
[43 115]
[44 114]
[48 110]
[49 109]
[50 108]
[52 106]
[53 105]
[54 104]
[55 103]
[56 102]
[57 101]
[58 100]
[59 99]
[60 98]
[61 97]
[64 91]
[65 90]
[66 89]
[70 83]
[71 82]
[72 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
