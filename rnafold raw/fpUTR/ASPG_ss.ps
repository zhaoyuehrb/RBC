%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUCCUCCGCGCAGUCCCUGAGUCCCGCAGGCCCUGCGUCCCCGCUGCACACCCCCGUCCACUCCCGUGGUCCCCGGUCCGGC\
) } def
/len { sequence length } bind def

/coor [
[85.22634125 126.84664917]
[79.35977173 140.65184021]
[85.50588989 155.21208191]
[79.47888184 169.82203674]
[64.85446930 175.81387329]
[50.30905533 169.63275146]
[44.47217178 154.94580078]
[50.80673981 140.46655273]
[65.55457306 134.78526306]
[71.42115021 120.98007965]
[65.30341339 107.28433228]
[51.10681915 102.44113159]
[36.91022110 97.59792328]
[22.71362686 92.75471497]
[8.51702976 87.91150665]
[-5.67956734 83.06830597]
[-19.73403740 89.78467560]
[-34.06241226 84.67073822]
[-40.37882996 71.23056030]
[-54.57542801 66.38735199]
[-68.77202606 61.54414749]
[-82.96862030 56.70094299]
[-96.25518799 64.94722748]
[-111.72646332 62.67264557]
[-122.07737732 50.95119095]
[-122.42055511 35.31737518]
[-112.59395599 23.15300560]
[-97.23739624 20.20172501]
[-83.60177612 27.85704041]
[-78.12541199 42.50434494]
[-63.92881775 47.34754944]
[-49.73222351 52.19075775]
[-35.53562546 57.03396225]
[-22.32191658 50.25653839]
[-7.85555553 54.96599960]
[-0.83636111 68.87170410]
[13.36023521 73.71491241]
[27.55683136 78.55812073]
[41.75342941 83.40132904]
[55.95002365 88.24452972]
[70.14662170 93.08773804]
[78.74033356 79.68947601]
[92.40203094 72.88305664]
[106.96884918 73.99731445]
[118.36554718 82.05179596]
[123.74456787 94.21781921]
[138.70454407 95.31274414]
[153.66453552 96.40767670]
[168.62451172 97.50260925]
[176.66307068 89.74085236]
[187.45176697 87.85854340]
[197.23765564 92.25738525]
[202.75743103 101.19715881]
[217.59757996 103.38117981]
[232.43774414 105.56519318]
[243.30409241 94.64601135]
[258.34066772 92.24703217]
[271.74798584 99.08129883]
[278.47958374 112.34114838]
[293.25924683 106.69562531]
[304.72433472 116.20357513]
[319.56448364 118.38759613]
[334.40463257 120.57161713]
[349.24478149 122.75563049]
[364.28164673 116.21157837]
[377.30474854 126.17809296]
[374.91699219 142.40248108]
[359.57473755 148.19447327]
[347.06076050 137.59577942]
[332.22061157 135.41175842]
[317.38046265 133.22775269]
[302.54031372 131.04373169]
[288.82211304 136.84547424]
[276.29556274 127.18130493]
[266.02923584 137.93957520]
[251.22142029 140.62142944]
[237.51353455 133.99215698]
[230.25372314 120.40534973]
[215.41357422 118.22132874]
[200.57342529 116.03730774]
[183.40664673 124.62192535]
[167.52958679 112.46259308]
[152.56961060 111.36766052]
[137.60961914 110.27272797]
[122.64963531 109.17780304]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[16 36]
[19 33]
[20 32]
[21 31]
[22 30]
[46 85]
[47 84]
[48 83]
[49 82]
[53 80]
[54 79]
[55 78]
[59 74]
[61 72]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
