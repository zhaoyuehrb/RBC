%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACGCUCAGCCGAGCCCAGUCUGGGAGGGACGCGCCCGGCAGCUGUCCACCGAUCCCGGCCACCGCCCCCGGCCACCCCCACCCCGCGAGCCC\
) } def
/len { sequence length } bind def

/coor [
[22.42645454 325.33395386]
[12.84894276 330.78872681]
[2.12970448 333.26058960]
[-8.82664776 332.55349731]
[-19.09910202 328.73919678]
[-28.69863129 340.26522827]
[-38.29816055 351.79122925]
[-47.89768600 363.31726074]
[-50.15128326 379.56082153]
[-65.44515991 385.47940063]
[-78.04627991 374.98446655]
[-74.99169922 358.87228394]
[-59.42370224 353.71771240]
[-49.82417679 342.19171143]
[-40.22464752 330.66567993]
[-30.62512016 319.13967896]
[-38.59392548 301.56411743]
[-36.84585953 282.27008057]
[-25.76214981 266.28915405]
[-8.16831112 257.82565308]
[11.38584232 259.15072632]
[18.95732498 246.20187378]
[26.31367683 233.12962341]
[33.45288849 219.93751526]
[40.59209824 206.74540710]
[47.73131180 193.55329895]
[45.58905029 174.45584106]
[62.53094482 163.78059387]
[68.78267670 150.14549255]
[75.03440094 136.51039124]
[69.62564087 122.67996216]
[75.77154541 108.76297760]
[90.31484985 103.18354034]
[90.56712341 94.95298004]
[97.00532532 89.20626831]
[103.70445251 75.78533173]
[110.40358734 62.36439133]
[111.48043060 53.08833313]
[117.55253601 48.61597061]
[124.69174957 35.42386246]
[120.40905762 20.44733810]
[127.83715820 7.17036819]
[142.14137268 3.17977118]
[149.28059387 -10.01233482]
[149.04399109 -25.83177185]
[161.90626526 -33.34252548]
[169.04547119 -46.53463364]
[163.71652222 -59.03359604]
[166.58099365 -72.11540222]
[176.35560608 -80.98049927]
[189.26527405 -82.51152039]
[196.83676147 -95.46036530]
[204.40823364 -108.40921021]
[203.95750427 -124.80216217]
[218.06861877 -133.15730286]
[232.22528076 -124.87957764]
[231.86433411 -108.48440552]
[217.35708618 -100.83773041]
[209.78559875 -87.88887787]
[202.21412659 -74.94003296]
[207.19815063 -58.97226715]
[199.01486206 -44.00007248]
[182.23757935 -39.39542007]
[175.09835815 -26.20331573]
[175.84561157 -11.32746601]
[162.47270203 -2.87312412]
[155.33348083 10.31898212]
[159.81636047 24.47664642]
[152.76411438 37.95701981]
[137.88385010 42.56307602]
[130.74464417 55.75518036]
[123.82452393 69.06352234]
[117.12539673 82.48446655]
[110.42626190 95.90540314]
[103.94994354 109.43527222]
[109.21308136 124.09600830]
[102.67870331 137.83488464]
[88.66950226 142.76213074]
[82.41777039 156.39721680]
[76.16604614 170.03231812]
[80.61572266 180.23062134]
[78.64454651 190.95565796]
[71.16999817 198.58776855]
[60.92341614 200.69250488]
[53.78420639 213.88461304]
[46.64499664 227.07672119]
[39.50578308 240.26882935]
[38.12282944 249.50421143]
[31.90617180 253.77336121]
[24.33469009 266.72219849]
[31.46183586 275.29745483]
[35.81976318 285.53768921]
[37.05311966 296.57656860]
[35.07035065 307.48400879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[8 13]
[21 90]
[22 89]
[23 87]
[24 86]
[25 85]
[26 84]
[28 80]
[29 79]
[30 78]
[33 75]
[35 74]
[36 73]
[37 72]
[39 71]
[40 70]
[43 67]
[44 66]
[46 64]
[47 63]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
