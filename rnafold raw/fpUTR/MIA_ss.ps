%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCUGGUUUCAUAGCAACUUCUAGGUGGUGUGGGCGAAGUUUGGGACUGGUUUAGGGCGGGGACAAGACCAAGAACACAAGUUUCCUUGUACUACGGGAGAGAGGGAGGGGAGGAAAUUGGAGACCCCAGCACCCCCUUGCUCACUCUCUUGCUCACAGUCCACG\
) } def
/len { sequence length } bind def

/coor [
[24.40226364 333.68304443]
[18.89089203 347.63385010]
[13.37952042 361.58462524]
[7.99961042 375.58666992]
[2.75163960 389.63867188]
[-2.49633145 403.69067383]
[4.29006386 417.96374512]
[-1.08245838 432.82681274]
[-15.42647552 439.46194458]
[-30.23193741 433.93258667]
[-36.71502686 419.51919556]
[-31.02943802 404.77304077]
[-16.54833412 398.44268799]
[-11.30036354 384.39068604]
[-6.05239296 370.33868408]
[-6.66065359 362.94064331]
[-0.57127827 356.07327271]
[4.94009399 342.12246704]
[10.45146656 328.17166138]
[4.20912743 321.07702637]
[0.98231423 312.13336182]
[1.26031911 302.57131958]
[5.04699898 293.72338867]
[11.85431862 286.83813477]
[20.76484871 282.90405273]
[30.55528069 282.50778198]
[37.09983444 269.01077271]
[43.64438629 255.51379395]
[50.18893814 242.01679993]
[56.47843933 228.39907837]
[62.51066971 214.66546631]
[68.54290009 200.93185425]
[74.57513428 187.19824219]
[80.60736084 173.46463013]
[86.63959503 159.73100281]
[92.67182922 145.99739075]
[98.70405579 132.26377869]
[104.73628998 118.53015900]
[83.93068695 125.21903229]
[60.01985931 107.51998138]
[46.84546280 100.34813690]
[33.67107010 93.17630005]
[20.49667358 86.00445557]
[4.67669964 86.20189667]
[-2.80219364 73.32107544]
[-17.78927422 77.56668854]
[-31.04781723 70.10574341]
[-35.00299454 55.79168701]
[-48.17739105 48.61984634]
[-63.99736404 48.81728363]
[-71.47625732 35.93646622]
[-84.65065002 28.76462555]
[-97.82505035 21.59278107]
[-114.62734222 19.33018875]
[-117.10450745 2.55818844]
[-101.67370605 -4.46512127]
[-90.65320587 8.41838741]
[-77.47881317 15.59022999]
[-64.30441284 22.76207352]
[-49.42676163 22.05165672]
[-41.00554657 35.44544983]
[-27.83115196 42.61729431]
[-13.66243649 38.16947937]
[-0.19956130 45.25507355]
[4.36964893 60.14668274]
[19.24730301 59.43626404]
[27.66851616 72.83006287]
[40.84291077 80.00189972]
[54.01730728 87.17374420]
[67.19170380 94.34558868]
[73.71028137 90.63639069]
[65.58702087 78.02636719]
[54.99753952 67.40267181]
[61.40126038 53.83829498]
[76.33341217 55.26333237]
[80.05628967 69.79306793]
[86.74743652 83.21799469]
[93.26601410 79.50879669]
[93.83023834 64.51941681]
[94.39446259 49.53002930]
[94.95868683 34.54064560]
[95.52291107 19.55125999]
[87.38908386 5.31142569]
[95.88680267 -8.71429348]
[112.27434540 -8.09743977]
[119.69361115 6.52742052]
[110.51229095 20.11548424]
[109.94806671 35.10486984]
[109.38384247 50.09425354]
[108.81961823 65.08364105]
[108.25539398 80.07302094]
[113.63298798 85.30097198]
[120.25363159 71.84114075]
[135.10058594 73.97845459]
[137.65580750 88.75920868]
[124.38817596 95.75687408]
[129.76577759 100.98483276]
[144.73327637 99.99791718]
[159.70077515 99.01100159]
[174.66827393 98.02409363]
[189.63577271 97.03717804]
[202.89697266 88.40866852]
[216.10572815 95.29182434]
[231.07322693 94.30490875]
[246.04072571 93.31800079]
[259.30194092 84.68949127]
[272.51068115 91.57264709]
[287.47817993 90.58573151]
[302.44567871 89.59882355]
[317.41317749 88.61190796]
[332.38067627 87.62499237]
[347.34817505 86.63808441]
[357.74038696 75.03463745]
[372.93362427 74.24698639]
[383.93167114 84.22587585]
[388.33856201 81.27119446]
[392.97357178 80.41780853]
[396.98773193 81.39469147]
[399.76690674 83.62980652]
[414.76623535 83.48872375]
[429.76556396 83.34763336]
[444.76489258 83.20655060]
[456.98287964 72.80940247]
[472.70126343 76.02057648]
[479.86227417 90.37674713]
[472.97259521 104.86507416]
[457.31738281 108.37136078]
[444.90597534 98.20588684]
[429.90664673 98.34696960]
[414.90731812 98.48806000]
[399.90798950 98.62915039]
[384.91860962 99.19337463]
[375.32601929 110.52994537]
[360.16088867 111.74403381]
[348.33508301 101.60558319]
[333.36758423 102.59249115]
[318.40008545 103.57940674]
[303.43261719 104.56632233]
[288.46511841 105.55323029]
[273.49761963 106.54014587]
[261.30697632 115.09806061]
[247.02763367 108.28549957]
[232.06013489 109.27240753]
[217.09265137 110.25932312]
[204.90202332 118.81723785]
[190.62268066 112.00467682]
[175.65518188 112.99158478]
[160.68768311 113.97850037]
[145.72018433 114.96541595]
[130.75268555 115.95232391]
[118.46990204 124.56239319]
[112.43767548 138.29600525]
[106.40544128 152.02961731]
[100.37320709 165.76324463]
[94.34098053 179.49685669]
[88.30874634 193.23046875]
[82.27651978 206.96408081]
[76.24428558 220.69770813]
[70.21205902 234.43132019]
[70.55921936 241.10311890]
[67.86355591 246.16744995]
[63.68592834 248.56135559]
[57.14137650 262.05834961]
[50.59682846 275.55532837]
[44.05227661 289.05233765]
[52.26460648 308.36547852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 15]
[5 14]
[6 13]
[26 165]
[27 164]
[28 163]
[29 162]
[30 159]
[31 158]
[32 157]
[33 156]
[34 155]
[35 154]
[36 153]
[37 152]
[38 151]
[40 70]
[41 69]
[42 68]
[43 67]
[45 65]
[48 62]
[49 61]
[51 59]
[52 58]
[53 57]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
[97 150]
[98 149]
[99 148]
[100 147]
[101 146]
[103 144]
[104 143]
[105 142]
[107 140]
[108 139]
[109 138]
[110 137]
[111 136]
[112 135]
[115 132]
[119 131]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
