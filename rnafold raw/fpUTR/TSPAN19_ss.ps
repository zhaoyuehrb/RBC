%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAAUCUCGAUUCUAAAUUGAAACGAACGCAGCAUUUCAGGGACUGGAUGAGGAGCUUACGGUUUUUUACAGAAUCAUCAAUAUCUUGGAAGAAAAAGA\
) } def
/len { sequence length } bind def

/coor [
[124.97206116 160.29399109]
[113.95688629 163.75088501]
[102.50492096 165.21269226]
[90.97456360 164.63366699]
[79.72666168 162.03193665]
[69.11321259 157.48892212]
[59.46636581 151.14678955]
[51.08801651 143.20402527]
[44.24036789 133.90917969]
[30.61338615 140.17858887]
[16.98640823 146.44799805]
[7.68331528 159.24497986]
[-7.11285400 157.53541565]
[-20.73983383 163.80482483]
[-34.36681366 170.07421875]
[-39.61259842 184.98251343]
[-53.89960480 191.73951721]
[-68.75160217 186.33639526]
[-75.35717010 171.97875977]
[-69.79734039 157.18470764]
[-55.37065506 150.73130798]
[-40.63621902 156.44725037]
[-27.00923729 150.17784119]
[-13.38225937 143.90843201]
[-5.05385923 131.55987549]
[10.71700287 132.82101440]
[24.34398270 126.55161285]
[37.97096252 120.28220367]
[34.75700760 101.52371216]
[37.09174728 82.63562775]
[44.77661514 65.22432709]
[57.15803909 50.77058029]
[73.18302155 40.50362015]
[91.48870087 35.29661942]
[110.51822662 35.59241867]
[128.65322876 41.36585999]
[144.35136414 52.12593079]
[155.74243164 42.36665344]
[167.13349915 32.60737991]
[178.52458191 22.84810638]
[189.91564941 13.08883190]
[201.30673218 3.32955694]
[212.69779968 -6.42971754]
[224.08886719 -16.18899155]
[221.37936401 -31.24242210]
[226.53442383 -45.53654861]
[238.07543945 -55.26647568]
[252.83834839 -57.89566422]
[266.84078979 -52.81659698]
[278.23187256 -62.57587051]
[289.62295532 -72.33514404]
[301.01400757 -82.09442139]
[312.40509033 -91.85369110]
[322.51052856 -102.93882751]
[331.17712402 -115.18177795]
[339.84375000 -127.42473602]
[348.51034546 -139.66769409]
[357.17694092 -151.91064453]
[365.84356689 -164.15359497]
[370.05999756 -180.57485962]
[387.00674438 -181.06907654]
[392.17294312 -164.92141724]
[378.08651733 -155.48698425]
[369.41992188 -143.24403381]
[360.75329590 -131.00108337]
[352.08670044 -118.75812531]
[343.42007446 -106.51517487]
[334.75347900 -94.27221680]
[349.60620117 -96.36898041]
[362.96389771 -89.54460907]
[369.96899414 -76.28079987]
[368.07406616 -61.40097427]
[357.96823120 -50.31621552]
[343.32647705 -47.05752182]
[329.47332764 -52.80993271]
[321.44650269 -65.48155975]
[322.16436768 -80.46261597]
[310.77328491 -70.70334625]
[299.38220215 -60.94406891]
[287.99114990 -51.18479538]
[276.60006714 -41.42552185]
[279.47116089 -26.80969620]
[274.60858154 -12.62479973]
[263.22351074 -2.71286392]
[248.30781555 0.18860310]
[233.84814453 -4.79791832]
[222.45707703 4.96135616]
[211.06599426 14.72063065]
[199.67492676 24.47990608]
[188.28385925 34.23918152]
[176.89277649 43.99845505]
[165.50170898 53.75772858]
[154.11062622 63.51700211]
[159.69262695 73.62272644]
[163.40653992 84.55393219]
[165.13613892 95.96852112]
[164.82731628 107.50926971]
[162.48971558 118.81501770]
[158.19650269 129.53195190]
[152.08203125 139.32467651]
[144.33766174 147.88674927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 28]
[10 27]
[11 26]
[13 24]
[14 23]
[15 22]
[37 93]
[38 92]
[39 91]
[40 90]
[41 89]
[42 88]
[43 87]
[44 86]
[49 81]
[50 80]
[51 79]
[52 78]
[53 77]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
