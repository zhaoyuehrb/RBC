%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCCCCCGCCCCUCUCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCUGCUGCUGCACUGACGGCGGGUGCCCGCGCCUCAGAGUUACUGAUUUAUUCUUGAGAUUCCUCUACUCUCGUUAUCUGACCUC\
) } def
/len { sequence length } bind def

/coor [
[343.57864380 249.79426575]
[330.52014160 243.50729370]
[319.34786987 234.26036072]
[310.71954346 222.59194946]
[305.14450073 209.18319702]
[302.95370483 194.81825256]
[304.28009033 180.33834839]
[290.14138794 175.32865906]
[276.00268555 170.31896973]
[261.86398315 165.30928040]
[247.72528076 160.29959106]
[233.58657837 155.28988647]
[223.65476990 166.43836975]
[210.17480469 172.95266724]
[195.18727112 173.81205750]
[180.97424316 168.85449219]
[169.71182251 158.80604553]
[163.13694763 145.17466736]
[162.27958679 130.02407837]
[148.14088440 125.01438141]
[133.56031799 128.05676270]
[123.13663483 116.15476227]
[108.99793243 111.14507294]
[95.21609497 113.50147247]
[85.99237823 102.99363708]
[71.85366821 97.98394012]
[56.26179886 100.66799927]
[46.84942245 89.12432098]
[32.71071625 84.11463165]
[17.11884499 86.79868317]
[7.70646858 75.25501251]
[-6.43223715 70.24531555]
[-22.02410698 72.92937469]
[-31.43648529 61.38570023]
[-45.57519150 56.37600708]
[-61.16706085 59.06006241]
[-70.57943726 47.51638794]
[-84.71814728 42.50669479]
[-100.31001282 45.19075012]
[-109.72238922 33.64707565]
[-123.86109924 28.63738251]
[-139.87890625 32.15335464]
[-150.73133850 19.85878372]
[-145.25436401 4.40126896]
[-129.08221436 1.68217766]
[-118.85140228 14.49867725]
[-104.71269989 19.50836945]
[-90.13212585 16.46598816]
[-79.70845032 28.36799049]
[-65.56974792 33.37768173]
[-50.98917007 30.33530045]
[-40.56549835 42.23730087]
[-26.42679405 47.24699402]
[-11.84621811 44.20461273]
[-1.42254555 56.10661316]
[12.71615982 61.11630630]
[27.29673576 58.07392502]
[37.72040939 69.97592926]
[51.85911179 74.98561859]
[66.43968964 71.94323730]
[76.86336517 83.84523773]
[91.00206757 88.85492706]
[104.78390503 86.49852753]
[114.00762177 97.00636292]
[128.14633179 102.01605988]
[143.73820496 99.33200073]
[153.15057373 110.87567902]
[167.28927612 115.88536835]
[177.49427795 104.65443420]
[191.18476868 98.20358276]
[206.26127625 97.48765564]
[220.42489624 102.58464813]
[231.52787781 112.68854523]
[237.89923096 126.23664856]
[238.59626770 141.15118408]
[252.73497009 146.16087341]
[266.87368774 151.17057800]
[281.01239014 156.18026733]
[295.15109253 161.18995667]
[309.28979492 166.19964600]
[318.09176636 153.29981995]
[329.91354370 143.11257935]
[343.95205688 136.32237244]
[359.25570679 133.38311768]
[374.78869629 134.48789978]
[389.50128174 139.55633545]
[402.40057373 148.24032593]
[412.61764526 159.94798279]
[419.46606445 173.88398743]
[422.48788452 189.10359192]
[421.48449707 204.57667542]
[435.72982788 209.27456665]
[449.97518921 213.97245789]
[464.22052002 218.67034912]
[478.46588135 223.36824036]
[482.54333496 217.42555237]
[487.61032104 212.31089783]
[493.50238037 208.18649292]
[500.02899170 205.18251038]
[506.97961426 203.39291382]
[514.13061523 202.87254333]
[521.25231934 203.63548279]
[528.11657715 205.65458679]
[534.50384521 208.86254883]
[540.21038818 213.15406799]
[545.05480957 218.38935852]
[548.88348389 224.39863586]
[551.57592773 230.98767090]
[553.04815674 237.94407654]
[553.25549316 245.04411316]
[552.19396973 252.05989075]
[549.90026855 258.76672363]
[562.24505615 267.28768921]
[574.58984375 275.80868530]
[586.93457031 284.32965088]
[599.27935791 292.85061646]
[613.47613525 286.81292725]
[628.67962646 289.43164062]
[640.03839111 299.87106323]
[643.92791748 314.80007935]
[639.10705566 329.45486450]
[627.11407471 339.15911865]
[611.77600098 340.81628418]
[597.98706055 333.89752197]
[590.14727783 320.61062622]
[590.75836182 305.19537354]
[578.41357422 296.67440796]
[566.06884766 288.15344238]
[553.72406006 279.63244629]
[541.37933350 271.11148071]
[519.86810303 282.12203979]
[495.85504150 278.58114624]
[478.28259277 261.68139648]
[473.76797485 237.61358643]
[459.52264404 232.91569519]
[445.27728271 228.21780396]
[431.03195190 223.51991272]
[416.78659058 218.82202148]
[409.07730103 231.02740479]
[398.65396118 241.02900696]
[386.12429810 248.23738098]
[372.22045898 252.22605896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 80]
[8 79]
[9 78]
[10 77]
[11 76]
[12 75]
[19 68]
[20 67]
[22 65]
[23 64]
[25 62]
[26 61]
[28 59]
[29 58]
[31 56]
[32 55]
[34 53]
[35 52]
[37 50]
[38 49]
[40 47]
[41 46]
[91 138]
[92 137]
[93 136]
[94 135]
[95 134]
[112 130]
[113 129]
[114 128]
[115 127]
[116 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
