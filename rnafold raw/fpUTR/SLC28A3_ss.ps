%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAUUAUUGCAGAAGUUUCCAAACUGAAGCAAGCUGUGCCCAGGUCCCUGUAACAGCAGGUGGCUUUCUGACAUCAGCAGAGACUGGUGCUUUUUCCCAGGUACAAAGGACCUCCAGACCAGAGCCAGCCAGCAGCAAAAAGAGC\
) } def
/len { sequence length } bind def

/coor [
[114.32189941 240.72021484]
[99.35370636 241.69657898]
[84.85515594 237.85054016]
[72.33899689 229.58338928]
[63.11114502 217.75770569]
[58.13442230 203.60736084]
[57.92808914 188.60877991]
[62.51364899 174.32695007]
[50.98871231 183.92776489]
[39.46377563 193.52859497]
[27.93883896 203.12942505]
[28.82746696 218.50851440]
[20.58633614 231.31230164]
[6.55209208 236.74406433]
[-7.81749964 232.91616821]
[-19.34243584 242.51698303]
[-30.86737251 252.11781311]
[-42.39231110 261.71862793]
[-47.54512787 277.28720093]
[-63.65694046 280.34359741]
[-74.15329742 267.74365234]
[-68.23644257 252.44912720]
[-51.99313354 250.19369507]
[-40.46819687 240.59288025]
[-28.94326019 230.99205017]
[-17.41832352 221.39122009]
[-18.58724213 206.56652832]
[-10.70944309 193.74450684]
[3.37251067 187.95210266]
[18.33801270 191.60447693]
[29.86295128 182.00366211]
[41.38788605 172.40283203]
[52.91282272 162.80200195]
[62.51364899 151.27706909]
[69.87441254 138.20729065]
[77.23517609 125.13751221]
[84.59593964 112.06773376]
[73.85955048 122.54293823]
[58.87044144 123.11448669]
[47.36752701 113.48728943]
[45.28978348 98.63188934]
[53.70995331 86.21815491]
[68.28068542 82.65533447]
[81.48041534 89.78446960]
[70.81729889 79.23469543]
[60.15417862 68.68491364]
[49.49105835 58.13512802]
[38.71581650 47.69989014]
[27.82968712 37.38038635]
[16.94355774 27.06088448]
[6.05742645 16.74138069]
[-4.82870436 6.42187643]
[-20.89413452 3.13037372]
[-25.81890488 -12.51183414]
[-14.53683376 -24.41338539]
[1.34605098 -20.33098412]
[5.49079943 -4.46425438]
[16.37693024 5.85524940]
[27.26306152 16.17475319]
[38.14919281 26.49425697]
[49.03532028 36.81376266]
[56.10358810 39.14934921]
[60.04084015 47.47201157]
[70.70395660 58.02179337]
[81.36708069 68.57157135]
[92.03019714 79.12135315]
[106.05106354 73.79075623]
[107.01211548 58.82157135]
[107.97317505 43.85239029]
[108.93422699 28.88321114]
[109.89527893 13.91403008]
[107.30888367 5.07778835]
[111.04018402 -1.36369479]
[103.59695435 -15.97637177]
[112.75598145 -29.57946968]
[129.09524536 -28.17928696]
[135.80630493 -13.21621227]
[125.98541260 -0.08297325]
[124.86445618 14.87508392]
[123.90340424 29.84426498]
[122.94235229 44.81344604]
[121.98130035 59.78262711]
[121.02024841 74.75180817]
[117.63449097 87.64308929]
[109.60799408 96.53739166]
[124.58658600 95.73634338]
[139.56518555 94.93529510]
[154.54377747 94.13425446]
[169.52236938 93.33320618]
[184.48043823 92.21225739]
[199.41111755 90.77191162]
[214.34181213 89.33156586]
[229.27249146 87.89122009]
[244.20318604 86.45087433]
[258.89584351 75.40551758]
[274.57901001 83.21228027]
[289.47549438 81.45320129]
[300.01956177 67.53716278]
[317.02722168 65.55600739]
[329.96807861 76.24704742]
[344.82357788 74.17002869]
[359.67907715 72.09301758]
[374.53457642 70.01600647]
[382.67675781 56.66538620]
[397.51205444 51.72092819]
[412.03573608 57.51724625]
[419.39010620 71.31750488]
[416.10269165 86.60563660]
[403.72570801 96.16305542]
[388.10317993 95.47704315]
[376.61160278 84.87150574]
[361.75610352 86.94852448]
[346.90060425 89.02553558]
[332.04507446 91.10255432]
[325.77011108 102.40361786]
[313.94595337 108.09206390]
[300.81509399 105.87708282]
[291.23458862 96.34970093]
[276.33807373 98.10877991]
[268.56503296 107.43512726]
[256.11865234 108.98618317]
[245.64352417 101.38156128]
[230.71284485 102.82190704]
[215.78215027 104.26225281]
[200.85147095 105.70259857]
[185.92077637 107.14294434]
[182.20800781 110.24868774]
[176.48565674 111.00804138]
[170.32342529 108.31180573]
[155.34483337 109.11284637]
[140.36622620 109.91389465]
[125.38763428 110.71493530]
[110.40904236 111.51598358]
[97.66571808 119.42848969]
[90.30495453 132.49827576]
[82.94419098 145.56805420]
[75.58342743 158.63783264]
[88.80190277 151.54756165]
[103.59097290 149.04089355]
[118.40756989 151.37934875]
[131.70576477 158.31895447]
[142.09802246 169.13565063]
[148.50006104 182.70082092]
[150.24388123 197.59912109]
[147.14753723 212.27606201]
[139.53411865 225.20028687]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 33]
[9 32]
[10 31]
[11 30]
[15 26]
[16 25]
[17 24]
[18 23]
[34 137]
[35 136]
[36 135]
[37 134]
[44 66]
[45 65]
[46 64]
[47 63]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
[73 78]
[85 133]
[86 132]
[87 131]
[88 130]
[89 129]
[90 126]
[91 125]
[92 124]
[93 123]
[94 122]
[96 119]
[97 118]
[100 114]
[101 113]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
