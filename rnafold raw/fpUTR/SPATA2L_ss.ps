%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGCCGACUCCCGGCGGAAGCGCGCGGCGCGCGGGGAGGCCCGAACUGAUCCGCGGCGGCCGGAGACCGCUGGGGACAGACAGG\
) } def
/len { sequence length } bind def

/coor [
[138.47053528 121.72188568]
[135.50430298 112.65694427]
[120.65699005 110.52222443]
[105.80966949 108.38749695]
[97.81938934 110.48017883]
[90.47423553 105.90245056]
[75.71257019 103.23915863]
[60.95090103 100.57585907]
[55.60959244 102.52632904]
[50.60269928 102.10884094]
[46.82731247 99.89864349]
[44.79025269 96.75699615]
[30.39785957 92.53100586]
[16.00546455 88.30501556]
[1.61307001 84.07903290]
[-13.80794811 87.61495972]
[-23.83982658 76.60538483]
[-38.23221970 72.37939453]
[-52.62461472 68.15341187]
[-62.10937119 74.03970337]
[-73.04134369 73.61046600]
[-81.67673492 67.26190186]
[-85.19776154 57.37463379]
[-99.25200653 52.13267136]
[-114.38386536 57.46244049]
[-127.90845490 48.83312225]
[-129.45085144 32.86438370]
[-117.82788849 21.80608177]
[-101.95568085 24.14119530]
[-94.01004791 38.07842636]
[-79.95580292 43.32038879]
[-61.36447906 38.52710724]
[-48.39862823 53.76101303]
[-34.00623322 57.98700333]
[-19.61383820 62.21298981]
[-5.22226048 58.37479401]
[5.83905840 69.68663788]
[20.23145294 73.91262817]
[34.62384796 78.13861084]
[49.01624298 82.36460114]
[63.61420059 85.81418610]
[78.37586975 88.47748566]
[93.13753510 91.14078522]
[107.94438934 93.54017639]
[122.79170990 95.67490387]
[137.63903809 97.80962372]
[153.58840942 83.26763916]
[174.86163330 84.60940552]
[188.50970459 100.63198853]
[203.50013733 100.09660339]
[218.49058533 99.56122589]
[227.18061829 96.06234741]
[234.02357483 99.28392792]
[249.02357483 99.28392792]
[264.02359009 99.28392792]
[277.82376099 91.54663086]
[290.55102539 99.28392792]
[305.55102539 99.28392792]
[320.55102539 99.28392792]
[335.55102539 99.28392792]
[350.55102539 99.28392792]
[365.55102539 99.28392792]
[375.46340942 87.18934631]
[390.84045410 84.34672546]
[404.42160034 92.09826660]
[409.79425049 106.78392792]
[404.42160034 121.46958923]
[390.84045410 129.22113037]
[375.46340942 126.37850952]
[365.55102539 114.28392792]
[350.55102539 114.28392792]
[335.55102539 114.28392792]
[320.55102539 114.28392792]
[305.55102539 114.28392792]
[290.55102539 114.28392792]
[277.82376099 122.02123260]
[264.02359009 114.28392792]
[249.02357483 114.28392792]
[234.02357483 114.28392792]
[219.02597046 114.55166626]
[204.03552246 115.08705139]
[189.04508972 115.62243652]
[185.39143372 124.09643555]
[179.05378723 130.86480713]
[170.75915527 135.10725403]
[161.47404480 136.29577637]
[152.29182434 134.26022339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 46]
[3 45]
[4 44]
[6 43]
[7 42]
[8 41]
[12 40]
[13 39]
[14 38]
[15 37]
[17 35]
[18 34]
[19 33]
[23 31]
[24 30]
[49 82]
[50 81]
[51 80]
[53 79]
[54 78]
[55 77]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
