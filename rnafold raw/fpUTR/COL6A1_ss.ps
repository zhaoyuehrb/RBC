%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUCACUCUGGCUGGGAGCAGAAGGCAGCCUCGGUCUCUGGGCGGCGGCGGCGGCCCACUCUGCCCUGGCCGCGCUGUGUGGUGACCGCAGGCCCCAGAC\
) } def
/len { sequence length } bind def

/coor [
[-39.33434296 294.43817139]
[-48.66111755 306.18600464]
[-57.98789215 317.93380737]
[-67.31466675 329.68164062]
[-76.64144135 341.42944336]
[-85.96821594 353.17727661]
[-95.29499054 364.92510986]
[-91.98602295 380.20858765]
[-99.32093811 394.01919556]
[-113.83640289 399.83599854]
[-128.67866516 394.91247559]
[-136.83967590 381.57333374]
[-134.46603394 366.11697388]
[-122.67850494 355.84133911]
[-107.04280853 355.59832764]
[-97.71603394 343.85049438]
[-88.38925934 332.10269165]
[-79.06248474 320.35485840]
[-69.73571014 308.60705566]
[-60.40893555 296.85922241]
[-51.08216095 285.11138916]
[-57.37943649 270.31564331]
[-55.39307785 254.26469421]
[-45.56626129 241.30168152]
[-30.47635460 234.98152161]
[-14.15950203 237.09613037]
[-5.19532871 225.06935120]
[-6.61349773 212.94885254]
[0.90325999 202.82872009]
[13.71009827 200.54179382]
[23.03687286 188.79397583]
[32.36364746 177.04615784]
[41.69042206 165.29833984]
[50.83695984 153.40965271]
[59.80113602 141.38285828]
[68.76530457 129.35607910]
[77.72948456 117.32929230]
[86.69365692 105.30250549]
[88.51526642 91.43984222]
[101.27955627 85.73332214]
[110.24372864 73.70653534]
[119.20790863 61.67974854]
[121.25138855 45.99106598]
[135.06101990 40.41041946]
[144.02519226 28.38363457]
[152.98936462 16.35684776]
[161.95353699 4.33006096]
[170.91770935 -7.69672537]
[179.88188171 -19.72351265]
[182.56889343 -28.63676643]
[189.30738831 -31.97480011]
[198.63415527 -43.72261810]
[207.96093750 -55.47043991]
[217.28770447 -67.21826172]
[226.06742859 -79.38034821]
[234.28173828 -91.93125916]
[242.49603271 -104.48216248]
[237.80438232 -119.39935303]
[243.84666443 -133.82241821]
[257.76989746 -140.94123840]
[272.99993896 -137.39451599]
[282.34567261 -124.85691071]
[281.39428711 -109.24829865]
[270.59503174 -97.93858337]
[255.04693604 -96.26786804]
[246.83264160 -83.71695709]
[238.61834717 -71.16604614]
[239.07147217 -67.50511932]
[237.66096497 -63.44438553]
[234.22123718 -59.91694641]
[229.03552246 -57.89148331]
[219.70875549 -46.14366531]
[210.38197327 -34.39584351]
[201.05520630 -22.64802361]
[191.90866089 -10.75933838]
[182.94448853 1.26744783]
[173.98031616 13.29423428]
[165.01614380 25.32102013]
[156.05197144 37.34780884]
[147.08779907 49.37459564]
[145.68548584 64.20304108]
[131.23469543 70.64392090]
[122.27051544 82.67070770]
[113.30634308 94.69749451]
[111.48473358 108.56015778]
[98.72044373 114.26667786]
[89.75627136 126.29346466]
[80.79209137 138.32025146]
[71.82791901 150.34704590]
[62.86374664 162.37382507]
[60.17673492 171.28707886]
[53.43824387 174.62510681]
[44.11146927 186.37292480]
[34.78469467 198.12075806]
[25.45791817 209.86857605]
[23.25852013 228.07086182]
[6.83145761 234.03352356]
[-2.13271570 246.06030273]
[4.08691359 258.69250488]
[4.21897173 272.70574951]
[-1.70499766 285.33251953]
[-12.46312523 294.10409546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[26 98]
[27 97]
[30 95]
[31 94]
[32 93]
[33 92]
[34 90]
[35 89]
[36 88]
[37 87]
[38 86]
[40 84]
[41 83]
[42 82]
[44 80]
[45 79]
[46 78]
[47 77]
[48 76]
[49 75]
[51 74]
[52 73]
[53 72]
[54 71]
[55 67]
[56 66]
[57 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
