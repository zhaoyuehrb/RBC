%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGCCGCAGCCCCGGGAGCUUCCCGCUCGCGGAGACCCAGACGGCUGCAGGAGCCCGGGCAGCCUCGGGGUCAGCGGCACC\
) } def
/len { sequence length } bind def

/coor [
[83.80107880 454.36822510]
[71.61813354 444.75805664]
[67.44306183 429.81320190]
[72.88126373 415.28027344]
[85.84163666 406.74749756]
[86.40250397 391.75799561]
[86.96337128 376.76849365]
[87.52423859 361.77896118]
[88.08511353 346.78945923]
[79.01692200 331.88906860]
[88.62089539 316.31280518]
[88.62089539 301.31280518]
[88.62089539 286.31280518]
[88.62089539 271.31280518]
[88.62089539 256.31280518]
[88.62089539 241.31278992]
[88.62089539 226.31278992]
[88.62089539 211.31278992]
[85.39288330 204.45712280]
[88.91187286 195.75454712]
[89.47274017 180.76502991]
[90.03360748 165.77552795]
[82.77760315 152.76783752]
[91.02549744 139.26663208]
[91.58636475 124.27712250]
[92.14723206 109.28760529]
[92.14723206 94.28760529]
[91.58636475 79.29809570]
[91.02549744 64.30858612]
[90.46463013 49.31907654]
[79.16141510 38.60109711]
[78.80614471 23.39161301]
[89.09375763 12.68177605]
[80.84586334 -0.81943923]
[88.10186768 -13.82711792]
[87.54100037 -28.81662941]
[84.02201080 -37.51920319]
[87.25002289 -44.37487411]
[87.25002289 -59.37487411]
[76.96825409 -71.69010162]
[80.32714081 -87.37759399]
[94.75002289 -94.40325165]
[109.17291260 -87.37759399]
[112.53179169 -71.69010162]
[102.25002289 -59.37487411]
[102.25002289 -44.37487411]
[102.53050995 -29.37749672]
[103.09137726 -14.38798618]
[111.29915619 -1.95892096]
[104.08326721 12.12090778]
[115.14246368 22.03200340]
[115.92479706 37.22550964]
[105.45413971 48.75820923]
[106.01500702 63.74771881]
[106.57587433 78.73722839]
[107.13674164 93.72673798]
[110.24570465 98.28173828]
[110.43415833 104.27410889]
[107.13674164 109.84848022]
[106.57587433 124.83798981]
[106.01500702 139.82749939]
[113.23089600 153.90733337]
[105.02311707 166.33639526]
[104.46224976 181.32589722]
[103.90138245 196.31541443]
[103.62089539 211.31278992]
[103.62089539 226.31278992]
[103.62089539 241.31278992]
[103.62089539 256.31280518]
[103.62089539 271.31280518]
[103.62089539 286.31280518]
[103.62089539 301.31280518]
[103.62089539 316.31280518]
[112.25369263 326.11059570]
[111.80492401 338.75689697]
[103.07462311 347.35034180]
[102.51375580 362.33984375]
[101.95288849 377.32934570]
[101.39201355 392.31884766]
[100.83114624 407.30838013]
[113.11763000 416.78582764]
[117.45457458 431.68450928]
[112.17434692 446.27554321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 80]
[6 79]
[7 78]
[8 77]
[9 76]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[17 67]
[18 66]
[20 65]
[21 64]
[22 63]
[24 61]
[25 60]
[26 59]
[27 56]
[28 55]
[29 54]
[30 53]
[33 50]
[35 48]
[36 47]
[38 46]
[39 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
