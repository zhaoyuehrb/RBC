%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUUUGGCCCGGCUCAGCCGCCGUGACAGGCCUUUGCGCAUGUGCAGAAGGGAAACGUGAAGAAGGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[136.38626099 239.36531067]
[128.42530823 226.65219116]
[120.46435547 213.93907166]
[112.50340271 201.22596741]
[104.54245758 188.51284790]
[96.58150482 175.79972839]
[91.91632843 173.83711243]
[88.58909607 168.75096130]
[88.53757477 161.63354492]
[81.69897461 148.28312683]
[74.86037445 134.93270874]
[61.36590958 128.38294983]
[46.64631271 131.26971436]
[31.92671394 134.15649414]
[17.54729843 143.13807678]
[4.93610525 131.80696106]
[12.33327007 116.55184937]
[29.03993988 119.43689728]
[43.75953674 116.55012512]
[58.47913361 113.66335297]
[62.30943298 99.16063690]
[50.93484497 89.38214874]
[39.56026077 79.60366058]
[23.82160950 81.04256439]
[11.72886753 70.86705017]
[10.45644379 55.11406708]
[20.75924301 43.12958145]
[36.52479935 42.02378082]
[48.39968491 52.45270920]
[49.33874512 68.22908020]
[60.71333313 78.00756073]
[72.08792114 87.78604889]
[86.60086060 77.80776215]
[101.53652954 78.67555237]
[107.79443359 65.04328156]
[114.05233765 51.41101837]
[120.31024170 37.77875519]
[126.56814575 24.14649010]
[120.83977509 9.41688251]
[127.28099823 -5.01524115]
[142.07035828 -10.58755684]
[156.43356323 -3.99410868]
[161.84921265 10.85332775]
[155.10427856 25.14603233]
[140.20040894 30.40439415]
[133.94250488 44.03665924]
[127.68460083 57.66892242]
[121.42669678 71.30118561]
[115.16879272 84.93345642]
[121.49690247 114.48846436]
[88.21078491 128.09411621]
[95.04938507 141.44453430]
[101.88798523 154.79493713]
[109.29461670 167.83879089]
[117.25556946 180.55189514]
[125.21652222 193.26501465]
[133.17747498 205.97811890]
[141.13842773 218.69123840]
[149.09936523 231.40435791]
[164.08358765 228.84663391]
[178.90487671 232.22270203]
[191.30310059 241.01771545]
[199.38763428 253.89050293]
[201.92564392 268.87805176]
[198.53009033 283.69491577]
[189.71876526 296.08154297]
[176.83535767 304.14913940]
[161.84446716 306.66741943]
[147.03210449 303.25238037]
[134.65705872 294.42477417]
[126.60642242 281.53076172]
[124.10785675 266.53659058]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[4 56]
[5 55]
[6 54]
[9 53]
[10 52]
[11 51]
[12 20]
[13 19]
[14 18]
[21 32]
[22 31]
[23 30]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
