%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUACACUGUCUCUACAGGCCAGGAAAGAGUUGUGUGUCUUUGGGGUCCCUUCCGCUCCGCCUAGGGUUCCCGGCCAGGCCGAGAGACCAAGCAGGGACC\
) } def
/len { sequence length } bind def

/coor [
[90.51252747 388.72586060]
[82.16984558 376.13314819]
[77.71419525 361.69970703]
[77.50676727 346.59561157]
[81.56439209 332.04528809]
[89.55812836 319.22824097]
[100.83995819 309.18347168]
[114.49532318 302.72534180]
[112.14880371 287.91000366]
[109.80228424 273.09466553]
[107.45577240 258.27935791]
[105.10925293 243.46401978]
[102.76273346 228.64869690]
[98.53131104 222.42298889]
[100.58282471 213.33183289]
[96.54904175 206.97627258]
[98.88510132 197.95404053]
[97.47347260 183.02061462]
[96.06185150 168.08717346]
[94.65022278 153.15374756]
[85.74951935 141.21110535]
[92.15377045 126.74403381]
[90.74214935 111.81060791]
[82.31089783 99.40439606]
[68.94580078 92.59454346]
[55.58069992 85.78468323]
[42.21560287 78.97482300]
[28.85050583 72.16497040]
[15.08634758 79.32929230]
[-0.25516179 77.00170135]
[-11.27489948 66.07718658]
[-13.73555183 50.75645065]
[-6.69094658 36.93063736]
[7.15012074 29.91604614]
[22.46547699 32.40993118]
[33.36605835 43.45334625]
[35.66036224 58.79986954]
[49.02545929 65.60972595]
[62.39056015 72.41958618]
[75.75565338 79.22944641]
[89.12075806 86.03929901]
[103.23396301 80.95822906]
[109.19118500 67.19190979]
[115.14839935 53.42559433]
[121.10562134 39.65927505]
[119.48538971 23.92124939]
[131.64094543 15.31358910]
[137.59815979 1.54726970]
[143.55537415 -12.21904945]
[149.51258850 -25.98536873]
[143.11334229 -37.95948792]
[144.81269836 -51.23226166]
[153.75683594 -60.92027664]
[166.46888733 -63.59172058]
[172.85557556 -77.16413116]
[174.12866211 -94.07021332]
[190.72647095 -97.52694702]
[198.64283752 -82.53470612]
[186.42797852 -70.77743530]
[180.04129028 -57.20503235]
[186.42750549 -41.73559570]
[179.59529114 -26.09127426]
[163.27891541 -20.02815056]
[157.32170105 -6.26183128]
[151.36447144 7.50448799]
[145.40725708 21.27080727]
[147.45359802 36.02417374]
[134.87193298 45.61649323]
[128.91471863 59.38281250]
[122.95750427 73.14913177]
[117.00028229 86.91545105]
[118.19200897 98.53700256]
[113.23912811 107.15497589]
[105.67557526 110.39897919]
[107.08720398 125.33241272]
[116.08887482 138.34320068]
[109.58365631 151.74212646]
[110.99527740 166.67555237]
[112.40690613 181.60897827]
[113.81852722 196.54241943]
[115.46454620 211.45182800]
[117.57806396 226.30218506]
[119.92457581 241.11750793]
[122.27109528 255.93283081]
[124.61761475 270.74816895]
[126.96412659 285.56347656]
[129.31065369 300.37881470]
[144.29335022 302.30114746]
[158.12699890 308.36798096]
[169.69018555 318.08752441]
[178.04551697 330.67184448]
[182.51567078 345.10079956]
[182.73826599 360.20468140]
[178.69526672 374.75909424]
[170.71440125 387.58416748]
[159.44267273 397.64022827]
[145.79380798 404.11209106]
[130.87425232 406.47512817]
[115.89350128 404.53775024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 87]
[9 86]
[10 85]
[11 84]
[12 83]
[13 82]
[15 81]
[17 80]
[18 79]
[19 78]
[20 77]
[22 75]
[23 74]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[42 71]
[43 70]
[44 69]
[45 68]
[47 66]
[48 65]
[49 64]
[50 63]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
