%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCCUGCGCACUGCGCCGCCGGCUGGGGUGCUGGGGGCGGGGCAGGGGCAGGUGUAGCCUCUGUGCCUCGUUGUCCCCUGGCGCUACCCGGACAUCUCUCAGGGUGCCGGCACC\
) } def
/len { sequence length } bind def

/coor [
[162.93061829 174.45974731]
[152.39546204 163.78219604]
[141.86029053 153.10462952]
[131.32513428 142.42706299]
[120.78997040 131.74949646]
[110.25480652 121.07193756]
[103.09553528 123.22940826]
[95.62112427 123.02201080]
[88.59250641 120.47087860]
[82.72521973 115.83570862]
[69.00570679 121.89994049]
[55.28619385 127.96417999]
[41.56668091 134.02841187]
[27.84716606 140.09263611]
[18.35310745 152.74861145]
[3.58425474 150.81721497]
[-10.05260944 157.06509399]
[-23.60436630 163.49548340]
[-37.15612411 169.92587280]
[-48.87397385 182.17855835]
[-63.89164352 174.31051636]
[-60.48840332 157.70166016]
[-43.58650970 156.37411499]
[-30.03475380 149.94372559]
[-16.48299789 143.51333618]
[-11.72700500 137.72763062]
[-2.47997808 137.09770203]
[6.03276825 124.87549591]
[21.78293228 126.37313080]
[35.50244522 120.30889893]
[49.22196198 114.24465942]
[62.94147491 108.18042755]
[76.66098785 102.11619568]
[80.02680969 87.74196625]
[91.31907654 78.23238373]
[90.51392365 63.25400543]
[89.70877075 48.27563095]
[88.90362549 33.29725647]
[88.09847260 18.31888008]
[87.29332733 3.34050465]
[85.48527527 -11.55012798]
[82.68247223 -26.28594398]
[72.50282288 -38.39731979]
[77.72571564 -52.34617996]
[74.92291260 -67.08199310]
[72.12010193 -81.81781006]
[69.31729889 -96.55362701]
[66.51448822 -111.28944397]
[63.71168137 -126.02526093]
[60.90887451 -140.76107788]
[58.10606766 -155.49688721]
[44.37233734 -162.97476196]
[38.70652390 -177.54983521]
[43.78385162 -192.34019470]
[57.20696640 -200.36228943]
[72.63787842 -197.82833862]
[82.79058838 -185.93478394]
[82.87129211 -170.29740906]
[72.84188843 -158.29969788]
[75.64469147 -143.56388855]
[78.44750214 -128.82806396]
[81.25030518 -114.09225464]
[84.05310822 -99.35643768]
[86.85591888 -84.62062073]
[89.65872192 -69.88480377]
[92.46153259 -55.14898682]
[102.44069672 -44.09161377]
[97.41828156 -29.08875084]
[100.22109222 -14.35293484]
[111.21441650 -24.55816650]
[126.08581543 -22.59817123]
[134.05964661 -9.89313698]
[129.35818481 4.35102844]
[115.38804626 9.81317997]
[102.27169800 2.53535533]
[103.07685089 17.51373100]
[103.88200378 32.49210739]
[104.68714905 47.47048187]
[105.49230194 62.44885635]
[106.29744720 77.42723083]
[121.43422699 90.52574921]
[120.93236542 110.53677368]
[131.46752930 121.21434021]
[142.00270081 131.89190674]
[152.53785706 142.56945801]
[163.07301331 153.24702454]
[173.60818481 163.92459106]
[193.54689026 162.85815430]
[207.77243042 176.43911743]
[207.63513184 195.80633545]
[218.99531555 205.60154724]
[230.35549927 215.39675903]
[241.71569824 225.19197083]
[250.37892151 228.48631287]
[253.24482727 235.40588379]
[264.33792114 245.50256348]
[275.43103027 255.59924316]
[286.52413940 265.69592285]
[297.61727905 275.79260254]
[313.74612427 278.75772095]
[318.98699951 294.29684448]
[307.94854736 306.42468262]
[291.98617554 302.66513062]
[287.52059937 286.88571167]
[276.42749023 276.78903198]
[265.33438110 266.69235229]
[254.24125671 256.59567261]
[243.14814758 246.49899292]
[231.92048645 236.55215454]
[220.56028748 226.75694275]
[209.20010376 216.96173096]
[197.83992004 207.16653442]
[187.96842957 210.71263123]
[177.44044495 209.76455688]
[168.22024536 204.43028259]
[162.05705261 195.64254761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[5 83]
[6 82]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
[16 27]
[17 25]
[18 24]
[19 23]
[35 80]
[36 79]
[37 78]
[38 77]
[39 76]
[40 75]
[41 69]
[42 68]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[90 112]
[91 111]
[92 110]
[93 109]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
