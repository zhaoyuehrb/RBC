%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGAGCAGUUUACGACAGCGCCGGUCGUGUUUACGGCGGCGCCCGCUGCGCGCGCAUGUUUCCUCUUUUCCUGGUUUCUCAAGAGUGCUGCUGCUAACGCGGUCCCCGGCACGCACCAUCUGUUGCCAUCCCGGCCGGCCGAGGCCAUUGCAGAUUUUGGAAG\
) } def
/len { sequence length } bind def

/coor [
[420.37387085 561.43402100]
[412.06982422 548.94232178]
[403.76580811 536.45056152]
[395.46179199 523.95886230]
[380.85507202 521.27941895]
[372.25564575 508.72933960]
[375.16510010 493.42663574]
[366.86108398 480.93490601]
[358.55706787 468.44317627]
[350.25302124 455.95144653]
[335.42037964 460.70635986]
[319.83468628 461.10028076]
[304.75274658 457.09332275]
[291.39294434 449.00073242]
[280.83700562 437.46820068]
[273.94223022 423.42031860]
[271.27200317 407.98645020]
[273.04971313 392.40988159]
[279.14007568 377.94781494]
[289.05944824 365.76974487]
[275.45303345 359.71047974]
[273.95837402 343.96005249]
[265.41946411 331.62768555]
[256.88052368 319.29534912]
[248.34158325 306.96301270]
[239.80264282 294.63067627]
[230.91711426 282.54568481]
[221.69213867 270.71774292]
[212.46716309 258.88983154]
[203.24218750 247.06190491]
[194.01721191 235.23397827]
[184.79223633 223.40605164]
[175.56726074 211.57812500]
[160.79972839 210.01106262]
[151.27578735 198.14727783]
[153.01960754 182.66836548]
[143.79463196 170.84043884]
[134.56965637 159.01251221]
[125.34467316 147.18458557]
[116.11969757 135.35665894]
[106.89472198 123.52873993]
[97.66973877 111.70081329]
[85.41875458 103.04556274]
[71.18840027 98.30245209]
[55.64972305 101.27902985]
[46.02208328 89.91426849]
[31.79173279 85.17115784]
[17.56138229 80.42803955]
[0.62305766 81.15568542]
[-4.76514769 65.08074951]
[9.18997097 55.45313263]
[22.30449867 66.19769287]
[36.53484726 70.94080353]
[50.76519775 75.68392181]
[65.28602600 72.36808014]
[75.93151855 84.07209778]
[90.16186523 88.81521606]
[95.61356354 83.66458130]
[85.31229401 72.76119232]
[72.14588165 65.57470703]
[74.91202545 50.83195877]
[89.78799438 48.90698242]
[96.21568298 62.45992661]
[106.51695251 73.36331177]
[111.96864319 68.21267700]
[108.04067230 53.73610687]
[104.11270905 39.25953674]
[100.18473816 24.78296661]
[96.25677490 10.30639744]
[81.20149994 8.01323605]
[68.38404083 -0.21066877]
[60.02509689 -12.94047451]
[57.57290649 -27.97066689]
[61.45233154 -42.69717026]
[70.99122620 -54.56853485]
[84.53693390 -61.52797318]
[99.74256897 -62.36971664]
[113.97367096 -56.94792938]
[124.76460266 -46.20197296]
[130.24578857 -31.99364662]
[129.46755981 -16.78462791]
[122.56475830 -3.20997119]
[110.73334503 6.37843037]
[114.66130829 20.85499954]
[118.58927917 35.33156967]
[122.51724243 49.80813980]
[126.44521332 64.28470612]
[125.58177185 90.97329712]
[109.49766541 102.47583771]
[118.72264099 114.30375671]
[127.94762421 126.13168335]
[137.17259216 137.95960999]
[146.39756775 149.78753662]
[155.62254333 161.61546326]
[164.84753418 173.44338989]
[180.28504944 175.52203369]
[189.47198486 187.64865112]
[187.39517212 202.35314941]
[196.62014771 214.18107605]
[205.84513855 226.00900269]
[215.07011414 237.83692932]
[224.29508972 249.66485596]
[233.52006531 261.49276733]
[242.74504089 273.32070923]
[247.66748047 275.30737305]
[250.97831726 278.66430664]
[252.42462158 282.53588867]
[252.13499451 286.09173584]
[260.67391968 298.42407227]
[269.21286011 310.75643921]
[277.75180054 323.08877563]
[286.29071045 335.42111206]
[300.50790405 342.36245728]
[301.39178467 357.23080444]
[315.06246948 352.46826172]
[329.48855591 351.41705322]
[343.68136597 354.14288330]
[356.66979980 360.45281982]
[367.56686401 369.90893555]
[375.63018799 381.85870361]
[380.31259155 395.47994995]
[381.29931641 409.83752441]
[378.52905273 423.94744873]
[372.19772339 436.84432983]
[362.74475098 447.64743042]
[371.04879761 460.13916016]
[379.35281372 472.63088989]
[387.65682983 485.12258911]
[402.89294434 488.36282349]
[411.13644409 501.14950562]
[407.95349121 515.65484619]
[416.25753784 528.14654541]
[424.56155396 540.63824463]
[432.86557007 553.13000488]
[443.16683960 564.03338623]
[455.16723633 573.03289795]
[467.16760254 582.03234863]
[479.16799927 591.03186035]
[494.77590942 588.54827881]
[507.51928711 597.89611816]
[509.83770752 613.52941895]
[500.35565186 626.17327881]
[484.69869995 628.32629395]
[472.15582275 618.71105957]
[470.16848755 603.03222656]
[458.16812134 594.03271484]
[446.16772461 585.03326416]
[434.16735840 576.03375244]
[439.94137573 589.87792969]
[441.23400879 604.82214355]
[437.92285156 619.45208740]
[430.32135010 632.38336182]
[419.14880371 642.39208984]
[405.46258545 648.53106689]
[390.55792236 650.21942139]
[375.84530640 647.29730225]
[362.71707153 640.04132080]
[352.41567993 629.13806152]
[345.91598511 615.61938477]
[343.83306885 600.76470947]
[346.36410522 585.97979736]
[353.26953125 572.66381836]
[363.89587402 562.07696533]
[377.23745728 555.22113037]
[392.03167725 552.74517822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 134]
[2 133]
[3 132]
[4 131]
[7 128]
[8 127]
[9 126]
[10 125]
[20 114]
[22 112]
[23 111]
[24 110]
[25 109]
[26 108]
[27 104]
[28 103]
[29 102]
[30 101]
[31 100]
[32 99]
[33 98]
[36 95]
[37 94]
[38 93]
[39 92]
[40 91]
[41 90]
[42 89]
[43 57]
[44 56]
[46 54]
[47 53]
[48 52]
[65 87]
[66 86]
[67 85]
[68 84]
[69 83]
[135 148]
[136 147]
[137 146]
[138 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
