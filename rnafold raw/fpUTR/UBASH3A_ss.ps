%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUCAGCCUUGCCUCUCCCCCUCUUGCUUUAUCUCCUCAUUUCUGUGUGCAGGCGAGCUUCUUGGCCUAAGGGCAGGAAGAG\
) } def
/len { sequence length } bind def

/coor [
[100.94329071 161.07002258]
[98.53624725 146.26440430]
[107.02587891 133.89807129]
[121.70553589 130.82368469]
[110.80902863 120.51513672]
[99.91252899 110.20658112]
[92.16759491 107.30127716]
[88.81277466 99.31008148]
[78.30462646 88.60592651]
[67.79648590 77.90177917]
[57.28833771 67.19762421]
[48.83092117 63.13595581]
[46.59880447 55.89840698]
[36.49337006 44.81327438]
[26.18482018 33.91677094]
[10.99578953 29.48913956]
[7.60120344 14.98651791]
[-5.04068518 23.15765762]
[-19.06875801 28.61641884]
[-33.90857315 31.13926506]
[-48.95244980 30.62289238]
[-63.58435440 27.08844185]
[-77.20510864 20.68064880]
[-89.25696564 11.66190720]
[-99.24639893 0.40153074]
[-106.76435089 -12.63937664]
[-111.50296783 -26.92679787]
[-113.26820374 -41.87567139]
[-111.98777771 -56.87385178]
[-107.71411896 -71.30716705]
[-100.62222290 -84.58459473]
[-91.00251007 -96.16242218]
[-79.24890137 -105.56654358]
[-65.84269714 -112.41187286]
[-51.33287048 -116.41809082]
[-36.31359100 -117.42115021]
[-21.39988899 -115.37997437]
[-7.20247126 -110.37815094]
[5.69728613 -102.62049866]
[16.77114677 -92.42469788]
[25.56564140 -80.20824432]
[31.72064400 -66.47139740]
[34.98410797 -51.77668381]
[35.22240067 -36.72583389]
[32.42576218 -21.93516922]
[26.70870972 -8.01036453]
[18.30535507 4.47837210]
[32.74277496 8.14037132]
[36.88897324 23.40862656]
[43.99171448 26.03835487]
[47.57850266 34.70783997]
[57.68393707 45.79297256]
[67.99249268 56.68947601]
[78.50063324 67.39363098]
[89.00878143 78.09778595]
[99.51692200 88.80193329]
[110.22107697 99.31008148]
[121.11758423 109.61862946]
[132.01408386 119.92717743]
[143.98434448 128.96670532]
[156.88134766 136.62617493]
[169.77833557 144.28562927]
[182.67533875 151.94509888]
[195.57234192 159.60456848]
[208.46932983 167.26403809]
[221.36633301 174.92350769]
[237.18261719 175.31777954]
[244.17462158 188.46925354]
[257.07162476 196.12872314]
[273.77755737 199.01803589]
[275.62582397 215.87092590]
[259.94317627 222.31231689]
[249.41215515 209.02571106]
[236.51515198 201.36624146]
[221.62133789 201.51983643]
[213.70686340 187.82051086]
[200.80986023 180.16104126]
[187.91287231 172.50157166]
[175.01586914 164.84210205]
[162.11886597 157.18263245]
[149.22187805 149.52316284]
[136.32487488 141.86369324]
[137.38450623 156.82621765]
[127.81240845 168.37503052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 59]
[5 58]
[6 57]
[8 56]
[9 55]
[10 54]
[11 53]
[13 52]
[14 51]
[15 49]
[17 47]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[66 76]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
