%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUCUCCGGCAGCGGAUCUGCGCAGAAGCGUUCCGUGCGUGCAAGUGCUGCGAACCACGUGGGUCCCGGGCGCGUUUCGGGUGCUGGCGGCUGCAGCCGGAGUUCAAACCUAAGCAGCUGGAAGGAACC\
) } def
/len { sequence length } bind def

/coor [
[96.71043396 276.96533203]
[85.78704834 266.90475464]
[85.21141815 251.70201111]
[95.83794403 240.31277466]
[95.48097992 225.31701660]
[87.44298553 212.77748108]
[94.84968567 198.79708862]
[94.49272156 183.80134583]
[94.13575745 168.80558777]
[93.77878571 153.80982971]
[93.42182159 138.81408691]
[93.06485748 123.81832886]
[73.33618164 96.86240387]
[98.58311462 71.14662933]
[84.40810394 76.05265045]
[70.23309326 80.95867157]
[56.05807877 85.86468506]
[41.88306427 90.77070618]
[38.34554672 94.87217712]
[34.00640106 96.93244171]
[29.80469704 96.99536133]
[26.51824379 95.48153687]
[12.02935696 99.36382294]
[-2.45953012 103.24610901]
[-16.94841766 107.12839508]
[-28.15544701 119.10063171]
[-44.06368256 115.11815643]
[-48.30809402 99.27780151]
[-36.52239609 87.87475586]
[-20.83070374 92.63950348]
[-6.34181595 88.75721741]
[8.14707184 84.87493134]
[22.63595963 80.99265289]
[36.97704697 76.59569550]
[51.15205765 71.68967438]
[65.32707214 66.78365326]
[79.50208282 61.87763596]
[93.67709351 56.97161865]
[99.90831757 43.32713699]
[94.33338165 29.40161896]
[88.75844574 15.47609901]
[83.18350983 1.55058050]
[77.60857391 -12.37493896]
[72.03363800 -26.30045700]
[57.78171921 -32.58699799]
[52.32631302 -46.78887177]
[58.40739822 -60.33715439]
[40.76890182 -67.03816223]
[33.65652084 -84.17241669]
[41.10595703 -100.81645203]
[34.87473297 -114.46092987]
[28.64350700 -128.10540771]
[22.41228294 -141.74989319]
[16.18105698 -155.39436340]
[1.71250117 -162.32548523]
[-1.74897242 -177.99066162]
[8.45198250 -190.37290955]
[24.49006653 -189.97363281]
[34.06223297 -177.09912109]
[29.82553673 -161.62559509]
[36.05676270 -147.98110962]
[42.28798676 -134.33663940]
[48.51921082 -120.69215393]
[54.75043869 -107.04767609]
[66.16031647 -105.44120789]
[75.44669342 -98.41835022]
[80.19704437 -87.65676117]
[79.10630035 -75.82302856]
[72.33291626 -65.91209412]
[86.08338928 -60.30316544]
[91.93554688 -46.26012802]
[85.95915222 -31.87539482]
[91.53409576 -17.94987488]
[97.10903168 -4.02435637]
[102.68396759 9.90116215]
[108.25890350 23.82668114]
[113.83383942 37.75220108]
[127.69203186 43.49245071]
[141.48094177 37.58769989]
[155.26983643 31.68294525]
[169.05874634 25.77819252]
[182.84765625 19.87343979]
[192.48780823 7.32840490]
[207.23327637 9.43090439]
[221.02218628 3.52615142]
[234.81108093 -2.37860179]
[238.12223816 -17.53828239]
[249.73400879 -27.83131027]
[265.18142700 -29.29980278]
[278.52468872 -21.37909889]
[284.63296509 -7.11486673]
[281.15756226 8.00800323]
[269.43481445 18.17445755]
[253.97236633 19.47529030]
[240.71583557 11.41030312]
[226.92694092 17.31505585]
[213.13803101 23.21980858]
[204.48414612 35.34249496]
[188.75241089 33.66234207]
[174.96350098 39.56709671]
[161.17459106 45.47185135]
[147.38569641 51.37660217]
[133.59678650 57.28135681]
[132.52670288 72.24314117]
[145.33491516 80.05015564]
[158.14314270 87.85717010]
[172.41250610 81.76087952]
[187.53244019 85.24900055]
[197.68902588 96.98030090]
[198.97685242 112.44384003]
[190.90071106 125.69358063]
[176.56605530 131.63471985]
[161.48484802 127.98278046]
[151.45611572 116.14199829]
[150.33612061 100.66539001]
[137.52789307 92.85837555]
[124.71968079 85.05136108]
[125.23856354 109.15526581]
[108.06060791 123.46136475]
[108.41757202 138.45712280]
[108.77454376 153.45286560]
[109.13150787 168.44862366]
[109.48847198 183.44438171]
[109.84543610 198.44012451]
[117.90895844 212.05226135]
[110.47673035 224.96005249]
[110.83369446 239.95581055]
[121.99010468 250.82652283]
[122.13849640 266.03942871]
[111.70618439 276.60836792]
[114.35469818 295.80825806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 130]
[4 127]
[5 126]
[7 124]
[8 123]
[9 122]
[10 121]
[11 120]
[12 119]
[14 38]
[15 37]
[16 36]
[17 35]
[18 34]
[22 33]
[23 32]
[24 31]
[25 30]
[39 77]
[40 76]
[41 75]
[42 74]
[43 73]
[44 72]
[47 69]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[78 103]
[79 102]
[80 101]
[81 100]
[82 99]
[84 97]
[85 96]
[86 95]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
