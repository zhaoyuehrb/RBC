%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGAUGUUUGAAAAAACUGACUCUGCUAAUGAGCCUGGACUCAGAGCUCAAGUCUGAACUCUACCUCCAGACAGA\
) } def
/len { sequence length } bind def

/coor [
[72.32668304 123.54617310]
[59.14205933 130.69918823]
[45.95743179 137.85220337]
[45.93582916 150.66130066]
[40.40084839 162.13156128]
[30.50157738 170.02761841]
[18.23056030 172.84124756]
[6.02290297 170.07916260]
[-3.72695184 162.34812927]
[-17.43820953 168.43099976]
[-31.14946556 174.51388550]
[-44.86072159 180.59675598]
[-54.07489395 194.16256714]
[-70.40834045 192.69606018]
[-77.05860901 177.70587158]
[-67.18447876 164.61260986]
[-50.94360352 166.88549805]
[-37.23234558 160.80262756]
[-23.52108955 154.71974182]
[-9.80983162 148.63687134]
[-7.08674145 131.41104126]
[5.39698076 119.01403809]
[22.94533348 116.36516571]
[38.80441666 124.66757202]
[51.98904419 117.51455688]
[65.17367554 110.36154938]
[63.66822815 100.48699951]
[64.90845490 90.57565308]
[68.80062866 81.37652588]
[75.05059814 73.58480835]
[83.18605804 67.78935242]
[92.59217834 64.42811584]
[102.55812073 63.75512695]
[106.67993927 49.33255386]
[110.80175781 34.90998077]
[114.92356873 20.48740768]
[119.04538727 6.06483412]
[122.87963867 -8.43683910]
[126.42480469 -23.01187897]
[129.96997070 -37.58691788]
[124.84252930 -53.16386795]
[135.96913147 -65.21089172]
[151.90368652 -61.33504868]
[156.25407410 -45.52346802]
[144.54501343 -34.04175186]
[140.99984741 -19.46671295]
[137.45468140 -4.89167261]
[138.97546387 2.55204010]
[133.46795654 10.18665123]
[129.34614563 24.60922432]
[125.22432709 39.03179932]
[121.10251617 53.45437241]
[116.98069763 67.87694550]
[133.21327209 85.26522064]
[135.21073914 108.96878052]
[148.66931152 115.59196472]
[162.12789917 122.21514893]
[175.58648682 128.83833313]
[189.04505920 135.46151733]
[201.37326050 126.39099884]
[216.50634766 124.10011292]
[230.96685791 129.11529541]
[241.43188477 140.28408813]
[245.49662781 155.03997803]
[242.22703552 169.99218750]
[232.37445068 181.70478821]
[218.20291138 187.48632812]
[202.96894836 186.00823975]
[190.17320251 177.61016846]
[182.75604248 164.22195435]
[182.42187500 148.92008972]
[168.96330261 142.29690552]
[155.50471497 135.67373657]
[142.04612732 129.05055237]
[128.58755493 122.42736816]
[119.03195190 130.95188904]
[107.11252594 135.63209534]
[94.30970764 135.88670349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[9 20]
[10 19]
[11 18]
[12 17]
[33 53]
[34 52]
[35 51]
[36 50]
[37 49]
[38 47]
[39 46]
[40 45]
[55 75]
[56 74]
[57 73]
[58 72]
[59 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
