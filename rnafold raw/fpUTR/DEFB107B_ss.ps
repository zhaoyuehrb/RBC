%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGGGCAGUAGAACAUAUUUUAAUCAAUGCCCCUUGAUAAAAGAGCUUGAUUCCAGCUACUGCACUUCCUUCAUCAGCUCUCCACUG\
) } def
/len { sequence length } bind def

/coor [
[68.28484344 113.87943268]
[53.56664276 116.77332306]
[38.84844208 119.66721344]
[24.24154282 123.07872772]
[9.76413727 127.00361633]
[-4.71326733 130.92849731]
[-19.19067192 134.85339355]
[-33.66807556 138.77827454]
[-33.96933746 153.88079834]
[-38.51457977 168.28625488]
[-46.93534470 180.82688904]
[-58.54899216 190.48606873]
[-72.41406250 196.48078918]
[-87.40657043 198.32505798]
[-102.31114960 195.86938477]
[-115.91954041 189.31283569]
[-127.12857819 179.18692017]
[-135.02960205 166.31250000]
[-138.98210144 151.73326111]
[-138.66566467 136.63105774]
[-134.10595703 122.23016357]
[-125.67259216 109.69799805]
[-114.04924774 100.05048370]
[-100.17816162 94.06970978]
[-85.18380737 92.24050140]
[-70.28170776 94.71114349]
[-56.67990875 101.28136444]
[-45.48104858 111.41853333]
[-37.59296417 124.30088043]
[-23.11556053 120.37599182]
[-8.63815594 116.45109558]
[5.83924866 112.52620697]
[20.31665421 108.60131836]
[23.51629448 104.78327179]
[29.23431587 103.07542419]
[35.95455170 104.94901276]
[50.67275238 102.05512238]
[65.39095306 99.16123199]
[70.37860107 82.08177948]
[83.19081879 69.73548126]
[100.44322205 65.38362885]
[117.57855225 70.17577362]
[130.07046509 82.84607697]
[144.40032959 78.41270447]
[158.73020935 73.97932434]
[173.06007385 69.54595184]
[187.38993835 65.11257935]
[201.71981812 60.67921066]
[215.88429260 55.74287796]
[229.86575317 50.30973434]
[243.84719849 44.87659073]
[244.79014587 27.92652130]
[252.92311096 13.08722496]
[266.61532593 3.23659348]
[283.16314697 0.26192105]
[299.32391357 4.69845963]
[311.95129395 15.63382149]
[325.51467896 9.22797489]
[334.40502930 -4.55221176]
[350.76861572 -3.47288704]
[357.77200317 11.35563183]
[348.21066284 24.67903519]
[331.92053223 22.79134941]
[318.35714722 29.19719505]
[319.30813599 42.38842773]
[315.64398193 55.12981415]
[307.79263306 65.85281372]
[296.69879150 73.22939301]
[283.71054077 76.33644867]
[270.41528320 74.77132416]
[258.44595337 68.70381165]
[249.28034973 58.85803986]
[235.29888916 64.29118347]
[221.31744385 69.72432709]
[218.53929138 73.85918427]
[213.03381348 76.16185760]
[206.15318298 75.00907898]
[191.82331848 79.44245148]
[177.49343872 83.87582397]
[163.16357422 88.30919647]
[148.83370972 92.74256897]
[134.50382996 97.17594147]
[133.36796570 109.22325897]
[128.15530396 120.14369965]
[119.50271606 128.60304260]
[108.46733856 133.56774902]
[96.39744568 134.43125916]
[84.76770782 131.08805847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[43 82]
[44 81]
[45 80]
[46 79]
[47 78]
[48 77]
[49 74]
[50 73]
[51 72]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
