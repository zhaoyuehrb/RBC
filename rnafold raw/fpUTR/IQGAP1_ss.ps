%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACCCCGGCAAGCCCGCGCACUUGGCAGGAGCUGUAGCUACCGCCGUCCGCGCCUCCAAGGUUUCACGGCUUCCUCAGCAGAGACUCGGGCUCGUCCGCC\
) } def
/len { sequence length } bind def

/coor [
[92.59658051 293.58132935]
[77.37406158 296.08700562]
[63.22247696 289.94403076]
[54.65754318 277.11260986]
[54.41230774 261.68719482]
[62.56501389 248.58998108]
[76.51417542 242.00025940]
[78.35749817 227.11395264]
[80.20082092 212.22764587]
[81.81468964 197.31471252]
[75.28472137 183.92782593]
[84.26232910 170.90043640]
[85.64635468 155.96441650]
[87.03038025 141.02839661]
[88.41440582 126.09239197]
[89.79843140 111.15637970]
[83.52902985 97.52939606]
[71.28607178 88.86279297]
[59.04312134 80.19618225]
[46.80016708 71.52957916]
[32.16751099 76.34534454]
[17.67435455 71.67610168]
[8.81445312 59.51197052]
[8.81616783 44.64126205]
[-3.42678571 35.97465515]
[-15.66973972 27.30804634]
[-27.91269302 18.64143753]
[-36.89229584 16.17254066]
[-40.39364624 9.51462936]
[-52.36390686 0.47511023]
[-64.47194672 -8.37900352]
[-76.71489716 -17.04561043]
[-88.95785522 -25.71221733]
[-105.32807922 -26.68573952]
[-112.42715454 -41.46867752]
[-102.95215607 -54.85361099]
[-86.65015411 -53.07126999]
[-80.29124451 -37.95517349]
[-68.04829407 -29.28856468]
[-55.80533981 -20.62195778]
[-48.39929199 -19.30373764]
[-43.32438660 -11.49514866]
[-31.35412788 -2.45562863]
[-19.24608612 6.39848471]
[-7.00313187 15.06509209]
[5.23982191 23.73169899]
[17.48277473 32.39830780]
[31.50758171 27.45433807]
[45.92486954 31.76778412]
[55.14554977 43.88522720]
[55.46677399 59.28662491]
[67.70972443 67.95323181]
[79.95268250 76.61983490]
[92.19563293 85.28644562]
[86.31056213 71.48912811]
[91.19675446 57.30727005]
[104.33145905 50.06299210]
[118.93319702 53.49653244]
[127.46306610 65.83515167]
[125.51706696 80.70838165]
[114.09799194 90.43783569]
[128.92047119 88.13695526]
[143.74295044 85.83608246]
[158.56544495 83.53520966]
[173.38792419 81.23433685]
[188.21040344 78.93345642]
[194.24676514 69.62350464]
[204.24661255 65.35222626]
[214.71054077 67.34551239]
[222.12428284 74.68226624]
[237.06030273 73.29824066]
[251.99630737 71.91421509]
[263.31033325 60.54000092]
[279.24081421 62.43709564]
[287.56729126 76.15021515]
[281.90237427 91.15982056]
[266.59170532 95.95183563]
[253.38034058 86.85022736]
[238.44432068 88.23425293]
[223.50831604 89.61827850]
[208.78340149 101.99037933]
[190.51127625 93.75594330]
[175.68879700 96.05681610]
[160.86631775 98.35768890]
[146.04382324 100.65856171]
[131.22134399 102.95944214]
[116.39886475 105.26031494]
[111.09840393 110.55069733]
[104.73444366 112.54040527]
[103.35041809 127.47641754]
[101.96639252 142.41242981]
[100.58236694 157.34843445]
[99.19834137 172.28445435]
[105.62931824 186.73966980]
[96.75070190 198.69873047]
[99.10237885 207.70974731]
[95.08712769 214.07096863]
[93.24380493 228.95727539]
[91.40048218 243.84358215]
[103.32100677 253.63667297]
[108.03289032 268.32687378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 99]
[8 98]
[9 97]
[10 95]
[12 93]
[13 92]
[14 91]
[15 90]
[16 89]
[17 54]
[18 53]
[19 52]
[20 51]
[24 47]
[25 46]
[26 45]
[27 44]
[29 43]
[30 42]
[31 40]
[32 39]
[33 38]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
[70 80]
[71 79]
[72 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
