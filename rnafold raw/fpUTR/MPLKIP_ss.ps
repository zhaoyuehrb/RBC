%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUAGCAGUUCUCUGCGGAGGGCCGGUUGAUACAGUUCCGGUGGGAGAACGCGGCUGCGAGGUUUUCGGCUUUGGCUCCUGAU\
) } def
/len { sequence length } bind def

/coor [
[59.23830795 212.28427124]
[53.58345795 218.07463074]
[46.62101364 222.15733337]
[38.84992218 224.25346375]
[30.82350922 224.22598267]
[23.11005402 222.08865356]
[16.25257683 218.00416565]
[4.38012886 227.17176819]
[-7.49231863 236.33937073]
[-19.36476517 245.50697327]
[-25.09037971 260.87414551]
[-41.30429077 263.33200073]
[-51.32701874 250.35212708]
[-44.84804153 235.28710938]
[-28.53237152 233.63453674]
[-16.65992355 224.46691895]
[-4.78747702 215.29931641]
[7.08497047 206.13171387]
[6.50922298 183.14099121]
[22.49391937 166.28050232]
[45.95322037 165.61686707]
[54.68110657 153.41752625]
[63.40898895 141.21818542]
[71.91260529 128.86146545]
[80.18912506 116.35149384]
[88.46563721 103.84152985]
[96.27974701 91.03762817]
[103.62100983 77.95689392]
[110.96228027 64.87615204]
[118.30355072 51.79541016]
[125.64481354 38.71466827]
[132.98608398 25.63392639]
[125.17723083 13.87469101]
[123.25746918 -0.04276283]
[127.55025482 -13.35009289]
[137.14907837 -23.42563438]
[150.10818481 -28.31087112]
[163.83677673 -27.09097862]
[171.65087891 -39.89487457]
[179.46498108 -52.69877243]
[187.04393005 -65.64324951]
[194.38520813 -78.72399139]
[201.72647095 -91.80473328]
[209.06773376 -104.88547516]
[209.07447815 -120.70668030]
[222.05075073 -128.01872253]
[216.35496521 -142.58209229]
[221.40185547 -157.38287354]
[234.80844116 -165.43255615]
[250.24453735 -162.93035889]
[260.42169189 -151.05770874]
[260.53454590 -135.42053223]
[250.52984619 -123.40222168]
[235.13148499 -120.67744446]
[235.64984131 -105.79186249]
[222.14848328 -97.54420471]
[214.80720520 -84.46346283]
[207.46594238 -71.38272095]
[200.12467957 -58.30198288]
[199.58468628 -50.75093460]
[192.26887512 -44.88466644]
[184.45477295 -32.08077240]
[176.64067078 -19.27687454]
[184.70060730 -5.39813614]
[184.72964478 10.74426746]
[176.62680054 24.81321335]
[162.48846436 32.98203659]
[146.06681824 32.97519302]
[138.72555542 46.05593491]
[131.38429260 59.13667679]
[124.04302216 72.21741486]
[116.70175171 85.29815674]
[109.36048889 98.37889862]
[109.63512421 103.87631989]
[106.67977142 109.07888031]
[100.97560883 112.11804199]
[92.69908905 124.62801361]
[84.42257690 137.13798523]
[82.21621704 146.25204468]
[75.60833740 149.94606018]
[66.88045502 162.14541626]
[58.15256882 174.34475708]
[62.51720810 181.29299927]
[64.88838959 189.12492371]
[65.10951996 197.28256226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 18]
[8 17]
[9 16]
[10 15]
[21 82]
[22 81]
[23 80]
[24 78]
[25 77]
[26 76]
[27 73]
[28 72]
[29 71]
[30 70]
[31 69]
[32 68]
[38 63]
[39 62]
[40 61]
[41 59]
[42 58]
[43 57]
[44 56]
[46 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
