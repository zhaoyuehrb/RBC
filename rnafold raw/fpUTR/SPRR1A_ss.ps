%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAGGGACCACACAGCCCAUUCUGCUCCGUAUACCAGCUUUCUGUCUCUAGAAAAAAACACAUUUGAAGC\
) } def
/len { sequence length } bind def

/coor [
[154.93031311 221.65762329]
[156.25003052 206.64578247]
[160.99673462 192.34313965]
[168.91441345 179.52101135]
[158.30780029 168.91441345]
[147.70120239 158.30780029]
[137.09460449 147.70120239]
[126.48799896 137.09460449]
[115.88140106 126.48799896]
[102.80649567 130.75640869]
[89.17498016 128.92494202]
[77.69037628 121.35681915]
[70.63040924 109.55303192]
[69.39527893 95.85459900]
[74.22994232 82.97832489]
[64.09609222 71.91916656]
[53.96223831 60.86000443]
[40.43315506 65.48503113]
[26.20993996 64.54753876]
[13.48327637 58.22565079]
[4.20034456 47.52421951]
[-0.23307061 34.11521149]
[0.83459979 20.07656288]
[7.20517731 7.57016039]
[-2.43663669 -3.92050600]
[-12.07845116 -15.41117287]
[-26.89141464 -23.65814018]
[-23.06737709 -40.17519379]
[-6.13721752 -41.07297897]
[-0.58778429 -25.05298615]
[9.05402946 -13.56232071]
[18.69584465 -2.07165360]
[33.95101547 -6.31263161]
[49.59844208 -3.53969717]
[62.56078720 5.75226259]
[70.26701355 19.78135109]
[71.16227722 35.82020187]
[65.02140045 50.72615051]
[75.15525055 61.78531265]
[85.28910828 72.84447479]
[100.77214813 69.12546539]
[116.04993439 73.61377716]
[127.06119537 85.11629486]
[130.87882996 100.57530975]
[126.48799896 115.88140106]
[137.09460449 126.48799896]
[147.70120239 137.09460449]
[158.30780029 147.70120239]
[168.91441345 158.30780029]
[179.52101135 168.91441345]
[192.34313965 160.99673462]
[206.64578247 156.25003052]
[221.65762329 154.93031311]
[236.56906128 157.10871887]
[250.57597351 162.66778564]
[262.92297363 171.30770874]
[272.94418335 182.56257629]
[280.09921265 195.82539368]
[284.00216675 210.38092041]
[284.44259644 225.44421387]
[281.39669800 240.20292664]
[275.02877808 253.86111450]
[265.68222046 265.68222046]
[253.86111450 275.02877808]
[240.20292664 281.39669800]
[225.44421387 284.44259644]
[210.38092041 284.00216675]
[195.82539368 280.09921265]
[182.56257629 272.94418335]
[171.30770874 262.92297363]
[162.66778564 250.57597351]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 50]
[5 49]
[6 48]
[7 47]
[8 46]
[9 45]
[15 40]
[16 39]
[17 38]
[24 32]
[25 31]
[26 30]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
