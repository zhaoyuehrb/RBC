%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGGCCGCGGGCCGGGGGCGGACUGGGGCGGGCGGAAGGAGAGCCAGGCCGGAAGGAGGCUGCCGGAGGGCGGGAGGCAGGAGCGGGCCAGGAGCUGCUGGGCUGGAGCGGCGGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[97.30380249 289.66247559]
[96.92381287 274.66729736]
[96.54381561 259.67208862]
[96.16382599 244.67691040]
[88.10659790 232.14973450]
[95.49181366 218.15797424]
[95.11182404 203.16279602]
[94.73183441 188.16760254]
[94.35184479 173.17242432]
[93.97185516 158.17723083]
[85.91461945 145.65005493]
[93.29984283 131.65830994]
[72.32363129 116.76779175]
[68.83718872 91.28106689]
[55.72199249 84.00153351]
[42.60679245 76.72200775]
[29.49159431 69.44247437]
[13.67053318 69.51030731]
[6.29741335 56.56865692]
[-6.81778622 49.28912735]
[-19.93298531 42.00959778]
[-33.95307159 48.39265060]
[-48.86904526 45.33207703]
[-59.00286102 34.20689011]
[-60.62314224 19.42471695]
[-73.73834229 12.14518738]
[-90.40409851 17.27921867]
[-105.36055756 8.98487091]
[-109.65882111 -7.22095251]
[-122.95421600 -14.16590214]
[-136.24961853 -21.11085129]
[-154.56822205 -19.86162949]
[-163.47824097 -34.92373657]
[-176.94529724 -41.52964783]
[-190.41236877 -48.13555908]
[-203.56275940 -40.06891251]
[-218.98623657 -40.41529465]
[-231.76121521 -49.06418228]
[-237.81126404 -63.25574875]
[-235.20582581 -78.46150970]
[-224.77627563 -89.82936859]
[-209.85066223 -93.73188019]
[-195.19169617 -88.92376709]
[-185.47697449 -76.93928528]
[-183.80645752 -61.60263062]
[-170.33938599 -54.99671555]
[-156.87231445 -48.39080429]
[-145.25424194 -52.00734711]
[-133.94448853 -46.52080536]
[-129.30467224 -34.40625381]
[-116.00926971 -27.46130180]
[-102.71386719 -20.51635361]
[-91.01368713 -26.07004738]
[-78.06416321 -23.80194473]
[-68.67300415 -14.32494164]
[-66.45880890 -0.97001195]
[-53.34361267 6.30951738]
[-39.94173431 -0.13467692]
[-25.13998413 2.58050251]
[-14.65263367 13.61992645]
[-12.65345573 28.89439774]
[0.46174344 36.17392731]
[13.57694244 43.45345688]
[28.45991707 42.86494446]
[36.77112198 56.32727814]
[49.88632202 63.60680771]
[63.00152206 70.88633728]
[76.11672211 78.16586304]
[83.42230225 69.20771027]
[94.10316467 62.88262939]
[107.14717102 60.44601440]
[121.08664703 62.74785233]
[130.85723877 51.36648178]
[131.07766724 35.32494354]
[143.84463501 25.60981369]
[159.36444092 29.67370796]
[165.73161316 44.39915466]
[158.06178284 58.49005127]
[142.23860168 61.13706970]
[132.46801758 72.51844025]
[134.98350525 79.58401489]
[146.86839294 70.43252563]
[159.24458313 78.90776825]
[155.00857544 93.29721832]
[140.01449585 93.71515656]
[142.52998352 100.78073120]
[157.29470825 103.42702484]
[172.05943298 106.07332611]
[187.00816345 100.89200592]
[198.17079163 110.75328827]
[212.93551636 113.39958191]
[227.70024109 116.04588318]
[242.46496582 118.69217682]
[255.29173279 109.45911407]
[270.87673950 112.08267975]
[279.97369385 125.00634766]
[277.18548584 140.56274414]
[264.16635132 149.52253723]
[248.64031982 146.57003784]
[239.81866455 133.45690918]
[225.05393982 130.81060791]
[210.28921509 128.16430664]
[195.52449036 125.51801300]
[181.63183594 130.88861084]
[169.41313171 120.83805084]
[154.64840698 118.19174957]
[139.88368225 115.54545593]
[133.02270508 122.91507721]
[125.04008484 128.02616882]
[116.58811188 130.78668213]
[108.29502869 131.27832031]
[116.37944031 144.87805176]
[108.96704102 157.79724121]
[109.34703064 172.79243469]
[109.72702026 187.78761292]
[110.10700989 202.78280640]
[110.48699951 217.77798462]
[118.57141113 231.37773132]
[111.15901184 244.29692078]
[111.53900146 259.29211426]
[111.91899872 274.28729248]
[112.29898834 289.28247070]
[114.97697449 308.47827148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[4 119]
[6 117]
[7 116]
[8 115]
[9 114]
[10 113]
[12 111]
[14 68]
[15 67]
[16 66]
[17 65]
[19 63]
[20 62]
[21 61]
[25 57]
[26 56]
[29 52]
[30 51]
[31 50]
[33 47]
[34 46]
[35 45]
[72 80]
[73 79]
[86 107]
[87 106]
[88 105]
[90 103]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
