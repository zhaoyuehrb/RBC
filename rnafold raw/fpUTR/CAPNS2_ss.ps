%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAUGUAAACUACUUGAACUCCAUUUCAUCUUUUUUCAUACCAUCUCUAAGAUUGCUGCCGCAUUUGCUUGUUAAACUGAAAGC\
) } def
/len { sequence length } bind def

/coor [
[147.69517517 244.36163330]
[158.37019348 233.53977966]
[152.50361633 219.73458862]
[146.63703918 205.92939758]
[134.53836060 197.24198914]
[136.26203918 181.51495361]
[130.39546204 167.70976257]
[124.52889252 153.90457153]
[118.66232300 140.09938049]
[112.79575348 126.29418945]
[103.55790710 127.01359558]
[95.20643616 124.79225159]
[88.58737183 120.26303864]
[84.24131012 114.27134705]
[82.36224365 107.74917603]
[82.80353546 101.58684540]
[67.84355164 100.49191284]
[52.88356400 99.39698792]
[37.92358017 98.30205536]
[26.12764549 108.82020569]
[10.35420227 107.83327484]
[-0.03864628 95.92679596]
[1.11499274 80.16467285]
[13.13068581 69.89828491]
[28.87973595 71.21850586]
[39.01850891 83.34207153]
[53.97849274 84.43700409]
[68.93847656 85.53192902]
[83.89846039 86.62686157]
[71.29477692 78.49376678]
[56.53227615 75.83509827]
[44.01665115 67.56713867]
[35.77890778 55.03160858]
[33.15585709 40.26273727]
[36.57315445 25.65718651]
[45.47625351 13.58511734]
[58.42037582 6.00555944]
[73.30497742 4.14850569]
[87.71461487 8.31531620]
[99.31092834 17.82980919]
[106.21208191 31.14799309]
[107.29818726 46.10861969]
[102.39118958 60.28691864]
[103.31517792 75.25843048]
[109.68202972 61.67671204]
[116.04888153 48.09498596]
[122.41573334 34.51326370]
[123.66410828 17.60533905]
[140.25685120 14.12435150]
[148.19512939 29.10500908]
[135.99745178 40.88011551]
[129.63059998 54.46183777]
[123.26375580 68.04356384]
[116.89690399 81.62528229]
[127.10905457 92.61218262]
[141.11929321 87.25372314]
[155.12953186 81.89525604]
[165.03965759 68.82920837]
[181.27421570 71.14677429]
[187.13249207 86.46383667]
[176.58799744 99.02352142]
[160.48800659 95.90550232]
[146.47775269 101.26396179]
[132.46751404 106.62242889]
[126.60094452 120.42761993]
[132.46751404 134.23281860]
[138.33409119 148.03800964]
[144.20065308 161.84320068]
[150.06723022 175.64839172]
[162.58554077 185.32322693]
[160.44224548 200.06282043]
[166.30880737 213.86801147]
[172.17538452 227.67320251]
[187.37532043 227.49938965]
[201.48289490 233.16021729]
[212.34678650 243.79244995]
[218.31034851 257.77471924]
[218.46415710 272.97488403]
[212.78479004 287.07501221]
[202.13827515 297.92489624]
[188.14814758 303.87005615]
[172.94779968 304.00387573]
[158.85517883 298.30596924]
[148.01928711 287.64520264]
[142.09254456 273.64724731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 73]
[3 72]
[4 71]
[6 69]
[7 68]
[8 67]
[9 66]
[10 65]
[16 29]
[17 28]
[18 27]
[19 26]
[44 54]
[45 53]
[46 52]
[47 51]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
