%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGACUGCUCGGUUAGGACCUCGGAGAGCGCCAGGCGCCGCGACCAGAGGGCCCAGAGAAGCGGCCGGAGCCCGCCUACCUCGGCCCCCUCAGCUUCCCGGGCUGGCAGGCGGCUAGAGGCGUCUGAGGAAGUGUUUAAA\
) } def
/len { sequence length } bind def

/coor [
[40.84624481 445.71777344]
[35.29952621 459.65454102]
[29.75280762 473.59133911]
[24.20608902 487.52810669]
[18.65937042 501.46490479]
[13.11265087 515.40167236]
[16.01349831 531.54223633]
[3.31290174 541.91656494]
[-11.92385483 535.85247803]
[-14.02250195 519.58813477]
[-0.82413137 509.85494995]
[4.72258759 495.91818237]
[10.26930618 481.98138428]
[15.81602573 468.04461670]
[21.36274338 454.10781860]
[26.90946388 440.17105103]
[14.35305500 419.67483521]
[20.58373260 396.21212769]
[42.07410049 384.41546631]
[44.40410995 369.59753418]
[46.73412323 354.77960205]
[49.06413269 339.96166992]
[51.39414215 325.14373779]
[53.72415543 310.32580566]
[51.88613510 307.22750854]
[51.50519943 303.06439209]
[53.07429886 298.55380249]
[56.73672104 294.60949707]
[60.05125809 279.98028564]
[63.36579514 265.35107422]
[66.68032837 250.72186279]
[69.99486542 236.09265137]
[72.81871796 221.36085510]
[75.14872742 206.54292297]
[69.48232269 192.76826477]
[79.26934052 180.33746338]
[81.59934998 165.51953125]
[83.92936707 150.70159912]
[86.25937653 135.88368225]
[79.37721252 125.87428284]
[81.25254822 113.46620178]
[91.41549683 105.43870544]
[89.62297821 97.50775909]
[94.30226135 90.37867737]
[97.29004669 75.67925262]
[100.27783966 60.97982407]
[98.67400360 56.74573135]
[98.56426239 52.64465332]
[99.71285248 49.14397812]
[101.75277710 46.58120346]
[104.24174500 45.13161850]
[108.52600098 30.75646400]
[112.81026459 16.38130569]
[117.09452057 2.00614977]
[113.62109375 -13.42906570]
[124.67121124 -23.41626167]
[124.12680054 -32.61735153]
[129.21437073 -38.06200027]
[133.81782532 -52.33813858]
[138.42127991 -66.61428070]
[143.02473450 -80.89041901]
[147.62818909 -95.16655731]
[151.26783752 -109.71829987]
[153.92739868 -124.48063660]
[156.58695984 -139.24298096]
[159.24650574 -154.00532532]
[161.90606689 -168.76766968]
[164.56562805 -183.52999878]
[159.39775085 -198.48338318]
[169.26905823 -209.63714600]
[158.43470764 -220.74554443]
[156.23219299 -236.10551453]
[163.50843811 -249.81083679]
[177.46559143 -256.59152222]
[192.73680115 -253.84028625]
[203.45002747 -242.61502075]
[205.48577881 -227.23207092]
[198.06127930 -213.60649109]
[184.03140259 -206.97758484]
[189.38951111 -193.08010864]
[179.32797241 -180.87045288]
[176.66841125 -166.10810852]
[174.00885010 -151.34576416]
[171.34928894 -136.58341980]
[168.68972778 -121.82107544]
[166.03016663 -107.05873871]
[179.20014954 -114.23869324]
[193.64649963 -110.20100403]
[201.18521118 -97.23304749]
[197.54553223 -82.68132019]
[184.78936768 -74.78953552]
[170.14321899 -78.02846527]
[161.90434265 -90.56310272]
[157.30087280 -76.28696442]
[152.69741821 -62.01082230]
[148.09396362 -47.73468018]
[143.49050903 -33.45854187]
[139.04637146 -19.13200378]
[142.82623291 -4.72499561]
[131.46968079 6.29040766]
[127.18541718 20.66556358]
[122.90116119 35.04072189]
[118.61690521 49.41587830]
[114.97726440 63.96761322]
[111.98947144 78.66703796]
[109.00168610 93.36646271]
[106.17783356 108.09826660]
[112.83068085 125.22846222]
[101.07730103 138.21368408]
[98.74729156 153.03161621]
[96.41728210 167.84954834]
[94.08727264 182.66748047]
[99.58702087 197.50201416]
[89.96665955 208.87292480]
[87.63665009 223.69085693]
[89.58094788 228.70986938]
[89.37089539 233.48097229]
[87.47752380 237.20814514]
[84.62407684 239.40718079]
[81.30953979 254.03639221]
[77.99501038 268.66561890]
[74.68047333 283.29483032]
[71.36593628 297.92404175]
[68.54208374 312.65582275]
[66.21207428 327.47375488]
[63.88206482 342.29168701]
[61.55205154 357.10961914]
[59.22204208 371.92755127]
[56.89203262 386.74548340]
[62.87940598 390.16259766]
[67.96060181 394.79873657]
[71.89300537 400.42330933]
[74.49084473 406.75881958]
[75.63403320 413.49447632]
[75.27362823 420.30142212]
[73.43393707 426.84890747]
[70.21100616 432.82022095]
[65.76757812 437.92803955]
[60.32495880 441.92837524]
[54.15194702 444.63204956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[19 129]
[20 128]
[21 127]
[22 126]
[23 125]
[24 124]
[28 123]
[29 122]
[30 121]
[31 120]
[32 119]
[33 115]
[34 114]
[36 112]
[37 111]
[38 110]
[39 109]
[42 107]
[44 106]
[45 105]
[46 104]
[51 103]
[52 102]
[53 101]
[54 100]
[56 98]
[58 97]
[59 96]
[60 95]
[61 94]
[62 93]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[68 81]
[70 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
