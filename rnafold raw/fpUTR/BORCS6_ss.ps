%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCGCUGCCAAUCGGCUCGCCUCUACCAACGCCCCUUAAAGGCGCAGCCACUGCCUCCGGAGCCGGGGCGAACCAAUUCCUCCGUUGCGGCCCCCACCUGCAGU\
) } def
/len { sequence length } bind def

/coor [
[32.44262314 134.27777100]
[36.99571609 148.57005310]
[36.52019119 163.56251526]
[31.07052803 177.53753662]
[21.27107048 188.89405823]
[8.24449825 196.33102417]
[-6.51679373 198.99639893]
[-21.32167053 196.58483887]
[-34.47400665 189.37261963]
[-44.46699524 178.18601990]
[-50.15578461 164.30662537]
[-50.88864136 149.32453918]
[-46.58159637 134.95619202]
[-37.72809982 122.84769440]
[-25.34244537 114.38627625]
[-10.84251404 110.54121399]
[-24.67954636 104.75014496]
[-38.51657867 98.95906830]
[-52.35361099 93.16799927]
[-66.27416229 87.58067322]
[-80.27523804 82.19830322]
[-94.27631378 76.81592560]
[-108.27738953 71.43355560]
[-122.27846527 66.05118561]
[-131.99028015 77.66838074]
[-144.94927979 85.50056458]
[-159.74975586 88.69816589]
[-174.78627014 86.91432953]
[-188.42776489 80.34254456]
[-199.19451904 69.69568634]
[-205.91864014 56.12862778]
[-207.87072754 41.11303329]
[-204.83906555 26.27768135]
[-197.15246582 13.23179817]
[-185.64474487 3.39050364]
[-171.56416321 -2.17869282]
[-156.43807983 -2.87168550]
[-141.90725708 1.38669586]
[-129.54788208 10.13453388]
[-120.70062256 22.42292976]
[-116.32514954 36.91892624]
[-116.89608765 52.05011368]
[-102.89501953 57.43248367]
[-88.89394379 62.81485367]
[-74.89286804 68.19722748]
[-60.89179230 73.57959747]
[-53.40122604 73.03334808]
[-46.56253815 79.33096313]
[-32.72550583 85.12203979]
[-18.88847351 90.91310883]
[-5.05144072 96.70418549]
[9.75340652 99.11592865]
[24.71301651 98.01589203]
[39.67262650 96.91585541]
[54.63223648 95.81581116]
[69.59184265 94.71577454]
[76.32100677 80.20393372]
[89.41065979 71.00957489]
[105.34474945 69.60242462]
[119.84317017 76.36046600]
[129.01144409 89.46839905]
[143.93232727 87.92967224]
[156.86598206 78.81755066]
[170.31982422 85.20845032]
[185.24069214 83.66972351]
[200.16156006 82.13099670]
[215.08242798 80.59227753]
[228.01609802 71.48014832]
[241.46992493 77.87104797]
[256.39080811 76.33232117]
[271.31167603 74.79360199]
[286.23254395 73.25487518]
[291.36087036 58.87909698]
[302.22476196 48.15817642]
[316.66723633 43.22075653]
[331.82067871 45.04717255]
[344.67639160 53.27478409]
[352.68185425 66.26998901]
[354.24755859 81.45259094]
[349.06265259 95.80805969]
[338.15661621 106.48612213]
[323.69482422 111.36662292]
[308.54867554 109.48055267]
[295.72546387 101.20237732]
[287.77127075 88.17574310]
[272.85040283 89.71446991]
[257.92953491 91.25318909]
[243.00865173 92.79191589]
[231.14222717 101.79398346]
[216.62115479 95.51314545]
[201.70028687 97.05187225]
[186.77941895 98.59059143]
[171.85855103 100.12931824]
[159.99212646 109.13138580]
[145.47103882 102.85054779]
[130.55017090 104.38926697]
[125.65686798 117.15529633]
[115.72914886 126.55509186]
[102.71504211 130.74423218]
[89.16818237 128.90071106]
[77.74675751 121.38626099]
[70.69187927 109.67538452]
[55.73227310 110.77542114]
[40.77266312 111.87545776]
[25.81305313 112.97550201]
[10.85344315 114.07553864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 51]
[17 50]
[18 49]
[19 48]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[52 106]
[53 105]
[54 104]
[55 103]
[56 102]
[61 96]
[62 95]
[64 93]
[65 92]
[66 91]
[67 90]
[69 88]
[70 87]
[71 86]
[72 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
