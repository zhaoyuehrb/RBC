%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:46:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUAGAGUUCCAGUCCCAACCGACACCUUGAGCGCCGUUAACUUUUCCCCGAAGAGCAUGGCAGAGUGAAGCACAAGCAAUAAUCCUGUAUUAUUCGCGUUCCCAGAGUCCCUUCGGAUUUGCGCC\
) } def
/len { sequence length } bind def

/coor [
[75.10330200 116.10991669]
[63.57359314 125.70500946]
[58.91633606 133.68595886]
[51.64429855 135.38923645]
[39.88436127 144.70072937]
[28.12442207 154.01222229]
[16.36448479 163.32369995]
[10.34825897 177.95639038]
[-4.43292332 179.79104614]
[-16.19286156 189.10253906]
[-17.70961189 193.42492676]
[-20.30488014 196.66012573]
[-23.48209572 198.59745789]
[-26.72814941 199.21759033]
[-29.58012199 198.68029785]
[-42.18994141 206.80386353]
[-54.79975891 214.92744446]
[-57.89672089 230.42532349]
[-71.09143066 239.12448120]
[-86.55570221 235.86383057]
[-95.11486053 222.57788086]
[-91.69090271 207.14895630]
[-78.31520844 198.73074341]
[-62.92333603 202.31762695]
[-50.31351471 194.19404602]
[-37.70369720 186.07048035]
[-25.50435257 177.34259033]
[-13.74441338 168.03109741]
[-8.56933689 154.06443787]
[7.05299425 151.56376648]
[18.81293297 142.25227356]
[30.57287216 132.94078064]
[42.33280945 123.62929535]
[53.97849655 114.17530823]
[65.50820160 104.58020782]
[66.78520966 89.63466644]
[57.05043793 78.22264862]
[47.31566238 66.81063080]
[37.58088684 55.39861298]
[27.84611320 43.98659134]
[16.84173775 43.74115753]
[8.00395775 37.55760574]
[4.16312885 27.71512032]
[6.38232088 17.61149597]
[-2.78528500 5.73904800]
[-11.95289040 -6.13339949]
[-21.12049675 -18.00584602]
[-30.28810120 -29.87829399]
[-39.45570755 -41.75074005]
[-53.92182541 -50.59199524]
[-49.43070984 -66.94027710]
[-32.47806549 -67.15032959]
[-27.58325958 -50.91834641]
[-18.41565514 -39.04589844]
[-9.24804878 -27.17345238]
[-0.08044332 -15.30100536]
[9.08716202 -3.42855787]
[18.25476837 8.44388962]
[36.60697556 14.33761215]
[39.25813293 34.25181961]
[48.99290466 45.66383743]
[58.72768021 57.07585526]
[68.46245575 68.48787689]
[78.19722748 79.89989471]
[101.70934296 70.31690216]
[124.09207916 82.44365692]
[135.38471985 72.57064819]
[146.67735291 62.69763565]
[157.97000122 52.82462692]
[169.26263428 42.95161438]
[180.55526733 33.07860565]
[185.85192871 18.17035484]
[200.52626038 15.61822414]
[211.81889343 5.74521351]
[223.11152649 -4.12779665]
[218.57736206 -18.66606331]
[220.35488892 -33.79088593]
[228.13613892 -46.88180161]
[240.57296753 -55.67072296]
[255.51062012 -58.63492203]
[270.36105347 -55.26082993]
[282.55136108 -46.13302994]
[289.96945190 -32.83296967]
[291.33013916 -17.66496277]
[286.39767456 -3.25696039]
[276.02661133 7.89476585]
[262.01379395 13.85811138]
[246.78707886 13.59989071]
[232.98454285 7.16484118]
[221.69190979 17.03785133]
[210.39926147 26.91086197]
[205.91033936 41.11293030]
[190.42828369 44.37124252]
[179.13563538 54.24425507]
[167.84300232 64.11726379]
[156.55036926 73.99027252]
[145.25773621 83.86328125]
[133.96508789 93.73629761]
[133.41726685 108.72628784]
[143.95909119 119.39727020]
[154.50091553 130.06825256]
[165.04275513 140.73922729]
[168.32682800 126.10315704]
[181.70640564 119.32178497]
[195.45211792 125.32640076]
[199.56837463 139.75056458]
[191.06190491 152.10531616]
[176.11721802 153.40609741]
[185.28483582 165.27853394]
[194.45243835 177.15098572]
[203.62004089 189.02343750]
[212.78764343 200.89588928]
[221.95524597 212.76832581]
[237.32240295 218.49394226]
[239.78025818 234.70785522]
[226.80039978 244.73059082]
[211.73538208 238.25160217]
[210.08280945 221.93592834]
[200.91520691 210.06349182]
[191.74758911 198.19104004]
[182.57998657 186.31858826]
[173.41238403 174.44615173]
[164.24478149 162.57369995]
[154.37176514 151.28106689]
[143.82994080 140.61007690]
[133.28810120 129.93910217]
[122.74627686 119.26811981]
[107.26141357 128.85874939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[4 33]
[5 32]
[6 31]
[7 30]
[9 28]
[10 27]
[15 26]
[16 25]
[17 24]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[66 98]
[67 97]
[68 96]
[69 95]
[70 94]
[71 93]
[73 91]
[74 90]
[75 89]
[99 127]
[100 126]
[101 125]
[102 124]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
