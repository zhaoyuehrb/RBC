%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCAGGGAGGGGCUCUUCACCCAGUCCGGCAGUUGAAGCUCGGCGCUCGGGUUACCCCUGCAGCGACGCCCCCUGGUCCCACAGAUACCACUGCUGCUCCCGCCCUUUCGCUCCUCGGCCGCGCA\
) } def
/len { sequence length } bind def

/coor [
[128.88529968 359.41842651]
[127.78182983 344.45907593]
[126.67836761 329.49969482]
[125.57489777 314.54034424]
[124.47142792 299.58099365]
[113.82302856 285.68865967]
[121.82921600 269.16043091]
[120.35895538 254.23266602]
[118.88870239 239.30490112]
[117.41844177 224.37713623]
[115.94818878 209.44935608]
[113.56531525 194.63983154]
[110.27879333 180.00430298]
[106.99227905 165.36877441]
[103.70575714 150.73324585]
[88.83096313 149.62707520]
[74.91648102 144.25395203]
[63.15870667 135.07582092]
[54.56856918 122.88186646]
[49.88465881 108.72049713]
[49.50970078 93.80934143]
[35.05305862 89.80865479]
[20.59641838 85.80796051]
[6.13977766 81.80726624]
[-8.36486912 77.98428345]
[-22.91533852 74.33958435]
[-37.46580505 70.69487762]
[-52.05990601 67.22900391]
[-66.69543457 63.94248962]
[-81.33097076 60.65597153]
[-96.00572968 57.54930115]
[-110.71750641 54.62294388]
[-122.79895020 64.55132294]
[-138.43510437 64.33940887]
[-150.24304199 54.08726501]
[-152.64743042 38.63563156]
[-144.51298523 25.28030396]
[-129.68054199 20.32725716]
[-115.15352631 26.11516953]
[-107.79115295 39.91116333]
[-93.07937622 42.83752060]
[-85.82896423 41.03784561]
[-78.04444885 46.02043915]
[-63.40892029 49.30695724]
[-48.77338791 52.59347534]
[-41.48099518 50.97227478]
[-33.82110596 56.14440918]
[-19.27063560 59.78911209]
[-4.72016668 63.43381500]
[2.60981607 61.99206924]
[10.14046955 67.35063171]
[24.59711075 71.35131836]
[39.05375290 75.35201263]
[53.51039124 79.35269928]
[59.34524155 69.42574310]
[67.26326752 61.06542969]
[76.85874176 54.70014954]
[87.63998413 50.65605927]
[99.05456543 49.14038086]
[110.51759338 50.23078537]
[121.44168854 53.87139130]
[131.26710510 59.87565994]
[142.13081360 49.53255081]
[152.99452209 39.18944168]
[163.85823059 28.84633446]
[174.72192383 18.50322723]
[185.58563232 8.16011906]
[179.57568359 -5.73613596]
[178.68438721 -20.82180977]
[183.00004578 -35.27502441]
[191.98329163 -47.35688782]
[204.53440857 -55.62071609]
[219.12794495 -59.08523560]
[233.99812317 -57.35108566]
[247.35240173 -50.64673233]
[258.21609497 -60.98984146]
[269.07980347 -71.33294678]
[269.21707153 -87.13664246]
[280.54742432 -98.15474701]
[296.34878540 -97.85041809]
[307.24649048 -86.40420532]
[306.77511597 -70.60694885]
[295.21432495 -59.83087540]
[279.42291260 -60.46924210]
[268.55920410 -50.12613297]
[257.69552612 -39.78302765]
[263.73651123 -26.11585999]
[264.73895264 -11.17851448]
[260.56253052 3.22745681]
[251.69279480 15.35797215]
[239.18469238 23.73756409]
[224.53713989 27.33883286]
[209.51336670 25.70838928]
[195.92874146 19.02382469]
[185.06503296 29.36693382]
[174.20132446 39.71004105]
[163.33763123 50.05315018]
[152.47392273 60.39625931]
[141.61021423 70.73936462]
[149.28808594 87.41911316]
[150.54373169 105.73814392]
[145.21351624 123.30949402]
[133.99197388 137.84362793]
[118.34129333 147.44673157]
[121.62780762 162.08226013]
[124.91432953 176.71778870]
[128.20085144 191.35331726]
[138.74946594 180.68905640]
[153.68878174 182.03703308]
[162.15806580 194.41731262]
[158.00027466 208.82954407]
[144.23805237 214.79623413]
[130.87596130 207.97909546]
[132.34622192 222.90687561]
[133.81646729 237.83464050]
[135.28672791 252.76242065]
[136.75698853 267.69018555]
[146.25480652 276.51828003]
[147.11921692 289.05331421]
[139.43078613 298.47753906]
[140.53425598 313.43688965]
[141.63772583 328.39624023]
[142.74119568 343.35559082]
[143.84466553 358.31494141]
[153.50918579 371.56369019]
[146.62121582 386.44616699]
[130.26649475 387.65255737]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 124]
[2 123]
[3 122]
[4 121]
[5 120]
[7 117]
[8 116]
[9 115]
[10 114]
[11 113]
[12 107]
[13 106]
[14 105]
[15 104]
[21 54]
[22 53]
[23 52]
[24 51]
[25 49]
[26 48]
[27 47]
[28 45]
[29 44]
[30 43]
[31 41]
[32 40]
[62 99]
[63 98]
[64 97]
[65 96]
[66 95]
[67 94]
[75 86]
[76 85]
[77 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
