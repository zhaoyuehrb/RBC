%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAAGCCUCGAGGUUUAGUCCCGCCCCCCUCUCCUCGCUGCUUAGGCUCCGCGGCCUCCAAGCUGUAGCU\
) } def
/len { sequence length } bind def

/coor [
[95.32971191 144.56025696]
[105.66786957 133.69183350]
[120.52879333 131.65603638]
[110.03691864 120.93594360]
[99.54504395 110.21584320]
[91.86576843 106.98643494]
[88.84479523 98.80155945]
[78.82383728 87.63999939]
[68.80287933 76.47843933]
[58.78191757 65.31688690]
[47.40732956 55.53839874]
[34.86845016 47.30575562]
[22.32956696 39.07310867]
[9.79068470 30.84046555]
[-2.74819732 22.60782051]
[-14.39027500 32.24905777]
[-28.35756874 38.02885818]
[-43.40811539 39.43329239]
[-58.20363235 36.33747101]
[-71.42851257 29.01667976]
[-81.90680695 18.12187576]
[-88.70678711 4.62181520]
[-91.22381592 -10.28308296]
[-89.23407745 -25.26748466]
[-82.91448975 -38.99898911]
[-72.82698822 -50.25659943]
[-59.86855316 -58.03929901]
[-45.19143677 -61.65505219]
[-30.10071945 -60.78234863]
[-15.93825436 -55.49879074]
[-3.96336007 -46.27418518]
[4.75916433 -33.92878342]
[9.45371723 -19.56032372]
[9.70286274 -4.44644499]
[5.48444700 10.06893921]
[18.02332878 18.30158424]
[30.56221199 26.53422737]
[43.10109329 34.76687241]
[55.63997650 42.99951553]
[55.69276428 27.99960899]
[66.05522919 17.15436745]
[81.03720093 16.41906929]
[92.41184998 26.19747734]
[93.93320465 41.12012482]
[84.76586914 52.99277878]
[69.94348145 55.29592514]
[79.96443939 66.45748138]
[89.98539734 77.61904144]
[100.00635529 88.78060150]
[110.26514435 99.72396851]
[120.75701904 110.44406891]
[131.24888611 121.16416931]
[143.23059082 130.18852234]
[156.43077087 137.31278992]
[169.63095093 144.43705750]
[182.83113098 151.56132507]
[196.03131104 158.68559265]
[211.09977722 153.91934204]
[225.08631897 161.27813721]
[229.69299316 176.39614868]
[222.18673706 190.30412292]
[207.02085876 194.75070190]
[193.19303894 187.09780884]
[188.90704346 171.88577271]
[175.70686340 164.76150513]
[162.50668335 157.63723755]
[149.30650330 150.51298523]
[136.10632324 143.38871765]
[138.25265503 158.23435974]
[130.66085815 171.17131042]
[116.65357208 176.53750610]
[102.36130524 171.98437500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 52]
[4 51]
[5 50]
[7 49]
[8 48]
[9 47]
[10 46]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
