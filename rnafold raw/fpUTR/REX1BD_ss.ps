%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUUCCUUCUGGCUGGCCGGCCGCAGGGUAGGGGGUCCGUGGACCUCCCGGCCUGUAGGGGGCGUCGGGCGCAGCGGAAGGGCCUGCUCCGGAGCCUGGCCAGGGCUGCGCAGUC\
) } def
/len { sequence length } bind def

/coor [
[159.08572388 223.45732117]
[144.26667786 225.78028870]
[129.58236694 222.71907043]
[116.92594147 214.66830444]
[107.92910004 202.66593933]
[103.75173950 188.25935364]
[104.93242645 173.30589294]
[111.31893158 159.73339844]
[122.08790588 149.29168701]
[135.85096741 143.32695007]
[150.83450317 142.60824585]
[138.33479309 134.31625366]
[125.83508301 126.02424622]
[113.33537292 117.73224640]
[100.83566284 109.44024658]
[95.45281219 109.29837036]
[90.56755066 106.08373260]
[87.90760803 100.35939789]
[75.86693573 91.41388702]
[63.82626343 82.46837616]
[50.89078522 83.56462860]
[41.02529907 75.76010132]
[39.23461151 63.71574020]
[27.43633652 54.45286942]
[15.51580715 45.34787369]
[3.47513247 36.40236282]
[-8.56554222 27.45685387]
[-20.60621643 18.51134300]
[-32.64689255 9.56583214]
[-48.33872223 7.54668093]
[-53.94078064 -6.25426960]
[-69.63261414 -8.27342129]
[-75.23466492 -22.07437134]
[-87.27534485 -31.01988220]
[-99.31601715 -39.96539307]
[-111.35668945 -48.91090393]
[-123.39736938 -57.85641479]
[-135.43803406 -66.80192566]
[-147.47871399 -75.74743652]
[-163.82226562 -77.09667969]
[-170.57994080 -92.03876495]
[-160.80001831 -105.20255280]
[-144.54325867 -103.04626465]
[-138.53320312 -87.78810883]
[-126.49253082 -78.84259796]
[-114.45185852 -69.89708710]
[-102.41117859 -60.95157623]
[-90.37050629 -52.00606537]
[-78.32983398 -43.06055450]
[-66.28915405 -34.11504745]
[-51.45855331 -32.73573685]
[-44.99526978 -18.29494476]
[-30.16466713 -16.91563606]
[-23.70138168 -2.47484231]
[-11.66070652 6.47066832]
[0.37996826 15.41617870]
[12.42064285 24.36168861]
[24.46131706 33.30719757]
[31.80086708 34.78927994]
[36.69920731 42.65459824]
[48.49747849 51.91746521]
[65.92893219 53.39638519]
[72.77177429 70.42770386]
[84.81244659 79.37321472]
[96.85311890 88.31872559]
[109.12766266 96.94053650]
[121.62737274 105.23253632]
[134.12707520 113.52453613]
[146.62678528 121.81653595]
[159.12649536 130.10853577]
[173.02259827 135.75642395]
[187.76284790 138.53575134]
[202.50311279 141.31509399]
[217.24337769 144.09442139]
[231.98364258 146.87374878]
[246.72390747 149.65307617]
[261.46417236 152.43240356]
[276.30364990 154.62101746]
[291.21865845 156.21542358]
[303.44671631 146.56596375]
[318.54995728 148.39538574]
[327.67388916 160.11245728]
[342.58892822 161.70686340]
[357.50393677 163.30125427]
[372.41894531 164.89566040]
[387.35388184 166.29138184]
[402.30606079 167.48817444]
[417.25823975 168.68496704]
[433.52929688 163.92164612]
[442.61074829 178.23820496]
[431.36767578 190.92794800]
[416.06146240 183.63714600]
[401.10928345 182.44035339]
[386.15710449 181.24356079]
[379.14898682 183.88020325]
[370.82455444 179.81068420]
[355.90954590 178.21627808]
[340.99450684 176.62188721]
[326.07949829 175.02748108]
[314.68496704 184.55113220]
[299.53628540 183.14665222]
[289.62426758 171.13044739]
[274.70922852 169.53604126]
[271.67965698 171.56809998]
[267.47827148 172.15858459]
[262.82995605 170.75643921]
[258.68484497 167.17266846]
[243.94456482 164.39334106]
[229.20429993 161.61401367]
[214.46405029 158.83468628]
[199.72378540 156.05534363]
[184.98352051 153.27601624]
[170.24325562 150.49668884]
[180.47651672 161.46394348]
[186.17620850 175.33885193]
[186.60751343 190.33265686]
[181.71484375 204.51228333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 70]
[12 69]
[13 68]
[14 67]
[15 66]
[18 65]
[19 64]
[20 63]
[23 61]
[24 60]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[31 52]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
[71 113]
[72 112]
[73 111]
[74 110]
[75 109]
[76 108]
[77 107]
[78 103]
[79 102]
[82 99]
[83 98]
[84 97]
[85 96]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
