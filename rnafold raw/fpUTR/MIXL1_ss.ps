%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGCCCGGGAGGGUAUAAGUGCGGCCCGCGCCCCUCCGAGCGGCGCGCUGGGUUCCGGAGCG\
) } def
/len { sequence length } bind def

/coor [
[105.70481873 173.21520996]
[94.72071838 163.00006104]
[93.73593140 148.03240967]
[103.28694153 136.46615601]
[118.17095947 134.60226440]
[108.77817535 122.90715027]
[99.38539886 111.21203613]
[89.71276855 99.74729919]
[72.23520660 94.52169037]
[69.01912689 77.43148041]
[58.54145432 66.69749451]
[48.06378174 55.96351242]
[37.58611298 45.22952652]
[27.10844231 34.49554062]
[16.63077164 23.76155853]
[11.97472858 22.87535477]
[8.22492027 20.74358749]
[5.66464376 17.81072044]
[4.40044641 14.56733036]
[4.36284065 11.48719883]
[5.32777357 8.96961975]
[-2.27662420 -3.95992494]
[-9.88102245 -16.88946915]
[-17.48542023 -29.81901550]
[-25.08981705 -42.74855804]
[-38.33138275 -53.33615875]
[-31.82318115 -68.99118042]
[-14.97831535 -67.07106018]
[-12.16027260 -50.35295868]
[-4.55587482 -37.42341232]
[3.04852295 -24.49386787]
[10.65292072 -11.56432247]
[18.25731850 1.36522233]
[27.36475563 13.28388786]
[37.84242630 24.01787186]
[48.32009888 34.75185776]
[58.79776764 45.48583984]
[69.27543640 56.21982574]
[79.75310516 66.95381165]
[92.06581879 67.48758698]
[100.88813782 76.66475677]
[100.94042969 89.80046082]
[108.49398041 93.43414307]
[111.08051300 101.81925964]
[120.47329712 113.51437378]
[129.86607361 125.20948792]
[140.85009766 135.42472839]
[153.19485474 143.94569397]
[168.94746399 145.41741943]
[175.02651978 159.01499939]
[187.37127686 167.53598022]
[199.71603394 176.05694580]
[212.06079102 184.57792664]
[228.53085327 188.59953308]
[229.22576904 205.53923035]
[213.14045715 210.89637756]
[203.53982544 196.92268372]
[191.19506836 188.40170288]
[178.85031128 179.88073730]
[166.50555420 171.35977173]
[151.63592529 170.49752808]
[144.67388916 156.29045105]
[132.32913208 147.76948547]
[131.54837036 162.74916077]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 46]
[6 45]
[7 44]
[8 42]
[10 39]
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[47 63]
[48 62]
[50 60]
[51 59]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
