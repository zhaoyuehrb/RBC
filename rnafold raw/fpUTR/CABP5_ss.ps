%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGAAGCCAAGAGAGGCAGGAAGAGGUGGCAAAGGAGUGCUGGAGAAGAUAAGGAGGCUGAGCUCCGACAGGGAGCAGGGAGGAGGGGCCAUCUUGAGACUGGUGCCCUGCGAGCUCCACCCCACCCCUCC\
) } def
/len { sequence length } bind def

/coor [
[-17.11385345 366.74642944]
[-17.45411110 373.76443481]
[-19.97989082 380.26525879]
[-24.40067101 385.59201050]
[-30.23631859 389.21768188]
[-36.86908340 390.79724121]
[-43.60894012 390.20016479]
[-51.96089935 402.65988159]
[-60.31285477 415.11959839]
[-57.00697327 430.57427979]
[-65.66747284 443.79440308]
[-81.15622711 446.93667603]
[-94.28403473 438.13690186]
[-97.26239777 422.61578369]
[-88.32431793 409.58175659]
[-72.77258301 406.76766968]
[-64.42062378 394.30792236]
[-56.06866837 381.84820557]
[-57.59334946 358.74609375]
[-36.54293060 347.52175903]
[-30.03467560 334.00723267]
[-23.52642059 320.49270630]
[-24.97533035 305.66873169]
[-12.01659298 296.59231567]
[-11.94808865 289.12985229]
[-5.19169426 282.83819580]
[1.63394344 269.48114014]
[8.45958138 256.12411499]
[15.28521824 242.76705933]
[22.11085701 229.41000366]
[14.96659660 218.06939697]
[14.37838268 204.57028198]
[20.60840607 192.45814514]
[32.11392593 184.96751404]
[45.92785645 184.15852356]
[53.06706619 170.96641541]
[60.20627975 157.77430725]
[67.34548950 144.58219910]
[74.48470306 131.39010620]
[73.73745728 116.51425171]
[87.11036682 108.05990601]
[77.05567932 119.19108582]
[63.99455261 126.56720734]
[49.27021408 129.42968750]
[34.39691925 127.48416901]
[20.90424347 120.93070984]
[10.17978859 110.44329071]
[3.32645965 97.10043335]
[1.04905903 82.27432251]
[3.58179569 67.48969269]
[10.66420174 54.26700592]
[21.56791687 43.96608353]
[35.17159653 37.64628220]
[50.07623291 35.95753860]
[64.74901581 39.07351685]
[77.68099976 46.67377472]
[87.54223633 57.97668839]
[93.31860352 71.81987000]
[94.41610718 86.77902222]
[96.88502502 71.98360443]
[87.97151184 59.20913315]
[90.68611145 44.23964691]
[102.91954803 35.82069778]
[105.38846588 21.02527809]
[107.85738373 6.22985792]
[110.32630157 -8.56556129]
[112.79521942 -23.36098099]
[104.68070221 -37.20056534]
[110.57585144 -52.12125015]
[125.95841217 -56.67715836]
[139.02819824 -47.37339020]
[139.75920105 -31.34700012]
[127.59064484 -20.89206314]
[125.12171936 -6.09664249]
[122.65280151 8.69877720]
[120.18388367 23.49419594]
[117.71496582 38.28961563]
[126.55193329 50.22459030]
[124.25886536 65.26441956]
[111.68044281 74.45252228]
[109.21152496 89.24794006]
[110.27832794 90.54005432]
[111.17078400 91.93182373]
[124.07218933 82.77407074]
[137.54850769 89.11740875]
[152.46385193 87.52599335]
[167.37919617 85.93457794]
[182.29454041 84.34315491]
[197.19003296 82.57569885]
[212.06362915 80.63244629]
[226.93722534 78.68918610]
[241.81082153 76.74593353]
[256.66043091 74.62715149]
[271.48397827 72.33314514]
[283.91900635 61.64193726]
[299.30377197 67.31999969]
[301.81176758 83.52623749]
[288.86297607 93.58905792]
[273.77798462 87.15669250]
[258.95443726 89.45069885]
[252.76643372 93.62224579]
[243.75407410 91.61952972]
[228.88047791 93.56278229]
[214.00688171 95.50603485]
[199.13330078 97.44929504]
[192.84849548 101.47351837]
[183.88595581 99.25849915]
[168.97061157 100.84991455]
[154.05526733 102.44132996]
[139.13992310 104.03274536]
[127.30537415 113.07667542]
[112.76219940 106.84716034]
[100.30247498 115.19911957]
[100.53907013 131.01855469]
[87.67680359 138.52931213]
[80.53759766 151.72142029]
[73.39838409 164.91352844]
[66.25917053 178.10563660]
[59.11996460 191.29772949]
[66.62691498 206.40402222]
[63.71449661 222.85128784]
[51.71695709 234.23327637]
[35.46790314 236.23564148]
[28.64226532 249.59269714]
[21.81662750 262.94973755]
[14.99098969 276.30679321]
[8.16535187 289.66381836]
[1.49793983 303.10055542]
[2.48133612 318.89117432]
[-10.01188660 327.00094604]
[-16.52014351 340.51550293]
[-23.02839851 354.03002930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 18]
[8 17]
[9 16]
[20 132]
[21 131]
[22 130]
[24 128]
[26 127]
[27 126]
[28 125]
[29 124]
[30 123]
[35 119]
[36 118]
[37 117]
[38 116]
[39 115]
[41 113]
[59 81]
[60 80]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[83 112]
[85 110]
[86 109]
[87 108]
[88 107]
[89 105]
[90 104]
[91 103]
[92 102]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
