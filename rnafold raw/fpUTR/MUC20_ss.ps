%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUUUGUGAUCACCUGGUCACACACCUGGGCAGGAGGCUGCCCCUCCUCCCUGGUUUGAGGAAGCAGGAAAAGGUACCCGCGAGAGACAGCCAGCAGUUCUGUGGAGCAGCGGUGGCCGGCUAGG\
) } def
/len { sequence length } bind def

/coor [
[-15.77437305 282.98614502]
[-18.65997124 292.38034058]
[-24.78099442 299.99392700]
[-33.23441315 304.77261353]
[-42.79833221 306.07528687]
[-52.10855865 303.75979614]
[-61.96965408 315.06283569]
[-71.83074951 326.36590576]
[-81.69184113 337.66894531]
[-91.55294037 348.97198486]
[-101.41403198 360.27502441]
[-111.27513123 371.57806396]
[-113.90030670 387.76574707]
[-129.32577515 393.33233643]
[-141.68312073 382.55142212]
[-138.26017761 366.51348877]
[-122.57817078 361.71697998]
[-112.71707916 350.41394043]
[-102.85597992 339.11090088]
[-92.99488831 327.80783081]
[-83.13379669 316.50479126]
[-73.27269745 305.20175171]
[-63.41160202 293.89871216]
[-66.66400909 273.81427002]
[-54.04333115 257.49029541]
[-33.21407700 255.52717590]
[-24.51780128 243.30528259]
[-15.82152843 231.08338928]
[-7.12525511 218.86148071]
[1.57101834 206.63958740]
[2.64537382 191.78378296]
[16.95034599 185.02520752]
[16.54199409 182.14784241]
[17.31182480 178.92842102]
[19.39891624 175.83920288]
[22.75981140 173.39465332]
[27.15925217 172.08349609]
[37.02034760 160.78045654]
[46.88144302 149.47741699]
[56.74253464 138.17436218]
[66.60363007 126.87132263]
[76.46472931 115.56827545]
[86.32582092 104.26523590]
[89.20639038 90.58335114]
[102.37113190 85.87367249]
[112.23223114 74.57062531]
[115.47421265 59.08514786]
[129.67153931 54.58123779]
[139.53263855 43.27819061]
[149.39372253 31.97514725]
[159.25482178 20.67210388]
[167.79927063 8.34358215]
[174.92129517 -4.85780764]
[182.04333496 -18.05919838]
[189.16535950 -31.26058769]
[196.28738403 -44.46197891]
[203.40942383 -57.66336823]
[193.38758850 -69.01186371]
[187.86349487 -83.07801056]
[187.48590088 -98.15705872]
[192.28108215 -112.42857361]
[201.65199280 -124.17623901]
[214.45252991 -131.99421692]
[229.12770081 -134.95538330]
[243.90248108 -132.72128296]
[251.02450562 -145.92268372]
[250.76731873 -161.74179077]
[263.61978149 -169.26928711]
[270.74182129 -182.47067261]
[263.90289307 -196.39938354]
[266.59036255 -211.68196106]
[277.77078247 -222.44195557]
[293.14511108 -224.54191589]
[306.80157471 -217.17437744]
[313.48898315 -203.17230225]
[310.63592529 -187.91978455]
[299.33941650 -177.28170776]
[283.94320679 -175.34864807]
[276.82116699 -162.14726257]
[277.58779907 -147.27238464]
[264.22589111 -138.80064392]
[257.10388184 -125.59925842]
[267.08419800 -114.47819519]
[272.66796875 -100.58751678]
[273.16329956 -85.59654999]
[268.49111938 -71.31396484]
[259.19699097 -59.46957779]
[246.38749695 -51.50484848]
[231.59843445 -48.39745712]
[216.61080933 -50.54133987]
[209.48876953 -37.33994675]
[202.36674500 -24.13855743]
[195.24472046 -10.93716812]
[188.12269592 2.26422167]
[181.00065613 15.46561146]
[195.13796997 10.45198441]
[209.78076172 13.70602512]
[220.46395874 24.23546982]
[223.92991638 38.82954788]
[219.12174988 53.03805161]
[207.50561523 62.52833939]
[192.62367249 64.40651703]
[179.01388550 58.09986877]
[170.82633972 45.53149033]
[170.55786133 30.53319931]
[160.69677734 41.83624268]
[150.83567810 53.13928604]
[140.97457886 64.44232941]
[138.43792725 79.11934662]
[123.53527069 84.43172455]
[113.67417908 95.73476410]
[110.79360962 109.41664886]
[97.62886810 114.12632751]
[87.76776886 125.42937469]
[77.90667725 136.73242188]
[68.04557800 148.03546143]
[58.18448639 159.33850098]
[48.32339096 170.64155579]
[38.46229553 181.94459534]
[29.17224503 193.72148132]
[27.47587395 209.45147705]
[13.79291821 215.33586121]
[5.09664440 227.55775452]
[-3.59962893 239.77966309]
[-12.29590225 252.00155640]
[-20.99217606 264.22344971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[26 126]
[27 125]
[28 124]
[29 123]
[30 122]
[32 120]
[37 119]
[38 118]
[39 117]
[40 116]
[41 115]
[42 114]
[43 113]
[45 111]
[46 110]
[48 108]
[49 107]
[50 106]
[51 105]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[57 90]
[65 82]
[66 81]
[68 79]
[69 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
