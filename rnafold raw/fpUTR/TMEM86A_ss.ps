%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGGGCUAGCUGACAGAACCCCGGCGCCGGGCGCUCGGGAGGUAUUGUCCGUCCCUCCGGGCUUUGUAGAAUCGUCGCCGGCUUACCUGGCCGUGGGCGCGUCCUGGCCGCUGCAGCCCGGAGCAGGGUGCCAGCCGCCGCCGCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[98.45093536 274.00695801]
[106.82693481 259.90820312]
[106.51895142 244.91136169]
[106.21097565 229.91452026]
[105.74905396 214.92164612]
[105.13322449 199.93428040]
[104.51740265 184.94692993]
[95.81517029 176.48919678]
[95.21436310 163.96679688]
[103.58588409 154.10163879]
[103.27790833 139.10479736]
[82.70843506 132.17434692]
[70.34224701 116.23603058]
[55.91486359 120.34097290]
[41.48748016 124.44591522]
[27.06009483 128.55085754]
[12.63271046 132.65580750]
[1.47676384 143.87434387]
[-12.88206577 139.91539001]
[-27.30945015 144.02033997]
[-41.73683548 148.12527466]
[-56.07689667 152.52557373]
[-70.32358551 157.21937561]
[-84.57028198 161.91317749]
[-98.76803589 166.75299072]
[-112.91535187 171.73831177]
[-127.06266785 176.72363281]
[-141.20997620 181.70895386]
[-154.13920593 192.67581177]
[-168.25662231 183.28779602]
[-163.14358521 167.12322998]
[-146.19529724 167.56164551]
[-132.04798889 162.57632446]
[-117.90067291 157.59100342]
[-103.75335693 152.60568237]
[-98.45734406 147.38414001]
[-89.26408386 147.66648865]
[-75.01738739 142.97268677]
[-60.77069473 138.27888489]
[-57.83646011 134.43968201]
[-52.43406677 132.43917847]
[-45.84177780 133.69789124]
[-31.41439438 129.59294128]
[-16.98701096 125.48800659]
[-6.86300659 114.56308746]
[8.52776623 118.22842407]
[22.95515060 114.12348175]
[37.38253403 110.01853180]
[51.80992126 105.91358948]
[66.23730469 101.80864716]
[63.45981216 87.42419434]
[67.21269989 71.44859314]
[56.66068649 60.78768158]
[46.10867310 50.12677383]
[35.55665588 39.46586227]
[19.60418320 35.66447067]
[15.17999172 19.87338066]
[26.83531189 8.33710957]
[42.58015060 12.92318726]
[46.21756744 28.91384888]
[56.76958084 39.57475662]
[67.32159424 50.23566437]
[77.87361145 60.89657593]
[85.25966644 59.59421158]
[75.61794281 48.10347748]
[80.74844360 34.00816345]
[95.52062225 31.40376091]
[105.16210175 42.89470673]
[100.03178406 56.98949051]
[107.41784668 55.68712997]
[113.68724823 42.06015015]
[108.44313049 27.39260101]
[114.99532318 13.66221714]
[129.01091003 8.75314236]
[135.28030396 -4.87383652]
[141.54971313 -18.50081444]
[147.81912231 -32.12779617]
[142.57499695 -46.79534149]
[149.12719727 -60.52572632]
[163.14277649 -65.43479919]
[169.41218567 -79.06178284]
[175.68157959 -92.68875885]
[181.95098877 -106.31574249]
[188.22039795 -119.94271851]
[184.02703857 -135.42803955]
[193.63522339 -148.27571106]
[209.67436218 -148.63008118]
[219.84060669 -136.21931458]
[216.33528137 -120.56389618]
[201.84738159 -113.67330933]
[195.57797241 -100.04633331]
[189.30856323 -86.41935730]
[183.03915405 -72.79237366]
[176.76976013 -59.16539764]
[182.16056824 -45.32796097]
[175.99662781 -31.41895485]
[161.44610596 -25.85838890]
[155.17669678 -12.23141003]
[148.90728760 1.39556885]
[142.63787842 15.02254772]
[148.02870178 28.85998535]
[141.86476135 42.76898956]
[127.31423187 48.32955551]
[121.04482269 61.95653534]
[135.42498779 77.31692505]
[140.54347229 97.01248169]
[135.79243469 116.08824158]
[149.83441162 121.36298370]
[163.87638855 126.63771820]
[179.51599121 124.24741364]
[188.70957947 135.96607971]
[202.75155640 141.24082947]
[216.79353333 146.51556396]
[230.83551025 151.79031372]
[245.08863831 145.50653076]
[259.25405884 151.05589294]
[265.15686035 164.68281555]
[279.19882202 169.95755005]
[293.24078369 175.23229980]
[307.28277588 180.50703430]
[321.56875610 173.74784851]
[336.42156982 179.14869690]
[343.02932739 193.50532532]
[337.47177124 208.30021667]
[323.04608154 214.75582886]
[308.31076050 209.04214478]
[302.00802612 194.54901123]
[287.96606445 189.27426147]
[273.92407227 183.99952698]
[259.88211060 178.72479248]
[246.46746826 185.09527588]
[232.15176392 179.94598389]
[225.56076050 165.83229065]
[211.51878357 160.55754089]
[197.47680664 155.28280640]
[183.43482971 150.00805664]
[168.79960632 152.77565002]
[158.60165405 140.67970276]
[144.55967712 135.40495300]
[130.51770020 130.13021851]
[118.27474213 138.79682922]
[118.58271790 153.79365540]
[128.48522949 169.28465271]
[119.50475311 184.33110046]
[120.12058258 199.31846619]
[120.73640442 214.30581665]
[124.23352051 222.81263733]
[121.20781708 229.60655212]
[121.51579285 244.60337830]
[121.82376862 259.60021973]
[130.77153015 273.34320068]
[123.10340881 287.83914185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 146]
[6 145]
[7 144]
[10 142]
[11 141]
[13 50]
[14 49]
[15 48]
[16 47]
[17 46]
[19 44]
[20 43]
[21 42]
[22 39]
[23 38]
[24 37]
[25 35]
[26 34]
[27 33]
[28 32]
[52 63]
[53 62]
[54 61]
[55 60]
[70 104]
[71 103]
[74 100]
[75 99]
[76 98]
[77 97]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[107 140]
[108 139]
[109 138]
[111 136]
[112 135]
[113 134]
[114 133]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
