%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:31:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCCCGGGGUCCUCCUCCGCGCCACCCCACCCCCGCGGCUCCUUUUUCUGCCUUUUCCUUUGUACCCUCACUGCUACCAGCUCCUUCUGGCGACCCCCAGGUACCCCCUCCCACCUUUCGUUUCUCUCUGGGUCAGCAGACCACGC\
) } def
/len { sequence length } bind def

/coor [
[267.54879761 464.62225342]
[256.62371826 450.08569336]
[248.76632690 433.68182373]
[244.28453064 416.04959106]
[243.35473633 397.87615967]
[246.01487732 379.87005615]
[252.16293335 362.73373413]
[261.56072998 347.13595581]
[273.84323120 333.68582153]
[264.77426147 321.73785400]
[255.70526123 309.78991699]
[246.63627625 297.84197998]
[237.56729126 285.89401245]
[228.37368774 274.04168701]
[219.05645752 262.28628540]
[209.73924255 250.53089905]
[195.40228271 254.69989014]
[180.52111816 253.05778503]
[167.36685181 245.82385254]
[157.95896912 234.07312012]
[153.75540161 219.57679749]
[155.42662048 204.53518677]
[162.74890137 191.24383545]
[153.43168640 179.48843384]
[144.11447144 167.73303223]
[134.79725647 155.97763062]
[125.48004150 144.22222900]
[115.92538452 149.01879883]
[105.48205566 151.75459290]
[94.59378052 152.26852417]
[83.73256683 150.49493408]
[73.37821960 146.46824646]
[63.99720383 140.32333374]
[56.02159500 132.29139709]
[49.82928848 122.69147491]
[45.72622299 111.91786194]
[43.93146896 100.42396545]
[44.56596756 88.70326233]
[47.64541245 77.26808929]
[53.07767868 66.62726593]
[39.37449646 60.52621460]
[25.67131424 54.42516327]
[13.29304218 63.51768494]
[-1.97486961 65.18695068]
[-16.02542877 58.98393631]
[-25.07910538 46.57722473]
[-26.70050430 31.30415726]
[-20.45347977 17.27310944]
[-8.01844978 8.25836754]
[7.25962639 6.68484879]
[21.27102280 12.97582340]
[30.24674225 25.43904877]
[31.77236366 40.72198105]
[45.47554779 46.82303238]
[59.17873001 52.92408371]
[65.86127472 49.51915359]
[56.76060104 37.59532166]
[47.65992737 25.67149353]
[38.55925369 13.74766254]
[29.45858002 1.82383287]
[20.35790443 -10.09999752]
[7.90118980 -18.45644569]
[1.24149001 -31.89699745]
[2.13854957 -46.87014771]
[10.35533142 -59.41943359]
[23.72065163 -66.22885132]
[38.70289230 -65.49910736]
[51.34317398 -57.42301559]
[58.30146408 -44.13459015]
[57.73968124 -29.14696312]
[62.03701782 -14.77571106]
[66.33435822 -0.40445945]
[70.63169861 13.96679211]
[74.92903900 28.33804321]
[79.22637177 42.70929718]
[85.90892029 39.30436707]
[89.02759552 24.63215256]
[92.14627838 9.95993900]
[89.52519989 -6.79017496]
[104.89513397 -13.94570732]
[116.02584076 -1.15729022]
[106.81848907 13.07861423]
[103.69981384 27.75082779]
[100.58113861 42.42304230]
[118.92448425 46.60944366]
[134.64709473 56.37366486]
[146.14344788 70.48393250]
[152.31703186 87.27879333]
[152.68301392 104.86146545]
[147.40083313 121.31369019]
[137.23544312 134.90501404]
[146.55265808 146.66041565]
[155.86987305 158.41581726]
[165.18708801 170.17121887]
[174.50430298 181.92662048]
[189.11653137 177.83288574]
[204.14234924 179.64059448]
[217.29579163 187.04333496]
[226.58773804 198.88594055]
[230.62677002 213.34454346]
[228.82736206 228.20750427]
[221.49464417 241.21368408]
[230.81185913 252.96908569]
[240.12908936 264.72448730]
[247.96612549 269.54745483]
[249.51522827 276.82504272]
[258.58422852 288.77297974]
[267.65319824 300.72094727]
[276.72219849 312.66888428]
[285.79116821 324.61682129]
[296.53375244 318.74230957]
[307.95816040 314.34289551]
[319.86294556 311.49572754]
[332.03826904 310.25048828]
[344.26956177 310.62869263]
[356.34136963 312.62326050]
[368.04104614 316.19854736]
[379.16256714 321.29119873]
[389.51025391 327.81103516]
[398.90194702 335.64282227]
[407.17251587 344.64822388]
[414.17657471 354.66830444]
[419.79107666 365.52621460]
[423.91748047 377.03051758]
[426.48352051 388.97833252]
[427.44445801 401.15902710]
[426.78375244 413.35803223]
[424.51351929 425.36041260]
[420.67419434 436.95477295]
[415.33386230 447.93698120]
[408.58697510 458.11376953]
[400.55282593 467.30603027]
[391.37326050 475.35217285]
[381.21029663 482.11071777]
[387.59701538 495.68310547]
[393.98370361 509.25552368]
[400.37039185 522.82794189]
[414.13800049 531.73773193]
[413.03558350 548.09979248]
[398.19717407 555.08221436]
[384.88729858 545.50207520]
[386.79797363 529.21459961]
[380.41128540 515.64221191]
[374.02459717 502.06979370]
[367.63790894 488.49740601]
[350.09191895 493.17364502]
[331.96481323 494.31112671]
[313.96334839 491.86373901]
[296.78970337 485.92526245]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 110]
[10 109]
[11 108]
[12 107]
[13 106]
[14 104]
[15 103]
[16 102]
[23 95]
[24 94]
[25 93]
[26 92]
[27 91]
[40 55]
[41 54]
[42 53]
[76 84]
[77 83]
[78 82]
[134 145]
[135 144]
[136 143]
[137 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
