%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAGAGCAGAGGCUUAAGGAGCUACACUGGGGGAAGGACAGGGGCAAGCAGGCCAAGGCCUGGCCGGGGCUCGGGGGGAGGGAAU\
) } def
/len { sequence length } bind def

/coor [
[145.20878601 299.25790405]
[151.82987976 285.54364014]
[163.46083069 275.71304321]
[150.30578613 268.82244873]
[145.81500244 254.28671265]
[153.13168335 240.53520203]
[148.90570068 226.14282227]
[144.67970276 211.75042725]
[140.45372009 197.35803223]
[126.38676453 192.53527832]
[117.75489044 180.20829773]
[118.04007721 164.98422241]
[127.34250641 152.70535278]
[123.11652374 138.31295776]
[118.89053345 123.92055511]
[109.10227966 128.47221375]
[98.54721832 129.26727295]
[88.59042358 126.35077667]
[80.46801758 120.23844147]
[75.13381195 111.83253479]
[73.14813995 102.29119110]
[74.62167358 92.86971283]
[79.21950531 84.75556946]
[70.23033905 72.74745178]
[61.24117279 60.73933411]
[53.41099548 55.59664536]
[52.15457916 48.13835526]
[44.51294708 42.71946716]
[43.52353287 35.22108459]
[35.41392136 22.60228157]
[27.30430984 9.98347759]
[11.87728882 10.08630562]
[-1.14409995 1.81303716]
[-7.60477924 -12.19635868]
[-5.44316912 -27.47153473]
[4.65096807 -39.13823700]
[19.45662880 -43.47366333]
[34.24938202 -39.09439468]
[44.30891418 -27.39784241]
[46.42526627 -12.11633015]
[39.92311096 1.87386560]
[48.03272629 14.49266815]
[56.14233780 27.11147118]
[64.47589111 39.58351517]
[73.24929047 51.75016785]
[82.23845673 63.75828934]
[91.22762299 75.76640320]
[102.05145264 73.12876129]
[113.47735596 75.31288147]
[123.37088776 82.32274628]
[129.71836853 93.22768402]
[142.03967285 84.67284393]
[154.36097717 76.11800385]
[166.68229675 67.56316376]
[179.00360107 59.00832748]
[185.49980164 43.95072174]
[201.81735229 42.31679916]
[211.17015076 55.78739929]
[203.93685913 70.50512695]
[187.55844116 71.32963562]
[175.23713684 79.88447571]
[162.91581726 88.43931580]
[150.59451294 96.99415588]
[138.27319336 105.54899597]
[133.28292847 119.69456482]
[137.50891113 134.08695984]
[141.73490906 148.47935486]
[156.19906616 153.77973938]
[164.66973877 166.43284607]
[164.07261658 181.46971130]
[154.84611511 193.13203430]
[159.07209778 207.52442932]
[163.29809570 221.91682434]
[167.52407837 236.30921936]
[181.11389160 243.92202759]
[185.19462585 258.57815552]
[177.85322571 271.48706055]
[192.95263672 273.46893311]
[205.93713379 281.42645264]
[214.55709839 293.98098755]
[217.31904602 308.95736694]
[213.74447632 323.76080322]
[204.45268250 335.82656860]
[191.05352783 343.06417847]
[175.86851501 344.21963501]
[161.52851868 339.09280396]
[150.51803589 328.57189941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 77]
[6 74]
[7 73]
[8 72]
[9 71]
[13 67]
[14 66]
[15 65]
[23 47]
[24 46]
[25 45]
[27 44]
[29 43]
[30 42]
[31 41]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
