%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUUUACGACGCGGCAGGCGCGGCGCGCUUAGUUGCCGGAGCUGAACGGCGCGGAGCUGGUCUGAGGCGAGCCGAGCCGAGCGAGCGCGGCGGUGGGGCCGAGAGGACGCGCAGGUGGCGGCGUUGCC\
) } def
/len { sequence length } bind def

/coor [
[111.42374420 257.10897827]
[98.63999176 265.52526855]
[83.40814209 267.02511597]
[69.22837067 261.26379395]
[59.35908127 249.56526184]
[56.06816101 234.61773682]
[60.11184311 219.85606384]
[70.56092072 208.67234802]
[85.01426697 203.63653564]
[87.16516876 188.79154968]
[89.31607819 173.94656372]
[91.46697998 159.10157776]
[93.61788940 144.25659180]
[95.76879883 129.41160583]
[76.54714966 111.84312439]
[79.88288879 89.20057678]
[69.73063660 78.15830994]
[52.06903839 73.11312866]
[48.81034088 55.91257477]
[38.39621735 45.11692810]
[27.98209190 34.32127762]
[12.83236790 29.76097107]
[9.56475353 15.22921371]
[-0.84937036 4.43356514]
[-11.26349449 -6.36208344]
[-21.67761803 -17.15773201]
[-36.82734299 -21.71803856]
[-40.09495544 -36.24979782]
[-50.50907898 -47.04544449]
[-60.92320633 -57.84109116]
[-71.33732605 -68.63674164]
[-81.75144958 -79.43238831]
[-95.27896118 -76.50883484]
[-108.37298584 -80.64326477]
[-117.62142181 -90.64544678]
[-120.67037201 -103.81111145]
[-116.82262421 -116.65256500]
[-126.97488403 -127.69483185]
[-137.12713623 -138.73710632]
[-147.27938843 -149.77937317]
[-157.43165588 -160.82164001]
[-172.98678589 -161.64367676]
[-183.12530518 -172.98674011]
[-182.24575806 -187.81111145]
[-192.39801025 -198.85337830]
[-202.55027771 -209.89564514]
[-218.16256714 -209.00682068]
[-230.66261292 -218.40272522]
[-234.14826965 -233.64688110]
[-226.97370911 -247.54145813]
[-212.52653503 -253.52589417]
[-197.62828064 -248.77449036]
[-189.31343079 -235.53071594]
[-191.50799561 -220.04789734]
[-181.35574341 -209.00563049]
[-171.20349121 -197.96336365]
[-156.35757446 -197.59698486]
[-145.90443420 -186.54318237]
[-146.38938904 -170.97389221]
[-136.23712158 -159.93162537]
[-126.08486938 -148.88935852]
[-115.93260956 -137.84709167]
[-105.78035736 -126.80482483]
[-89.59025574 -129.22605896]
[-74.98415375 -121.47418976]
[-67.77241516 -106.41021729]
[-70.95580292 -89.84651184]
[-60.54167938 -79.05086517]
[-50.12755585 -68.25521851]
[-39.71343231 -57.45956802]
[-29.29930878 -46.66392136]
[-14.89447117 -42.87578964]
[-10.88196945 -27.57185555]
[-0.46784562 -16.77620697]
[9.94627857 -5.98055840]
[20.36040115 4.81509018]
[34.76523972 8.60321999]
[38.77774048 23.90715408]
[49.19186401 34.70280457]
[59.60598755 45.49845123]
[71.75220490 46.04970169]
[80.51866150 55.04551315]
[80.77290344 68.00605011]
[90.92515564 79.04831696]
[104.08943939 75.78993988]
[117.78193665 80.65837097]
[127.11456299 93.03856659]
[128.16114807 109.48132324]
[142.38188171 114.25320435]
[156.60261536 119.02509308]
[172.14727783 116.07994843]
[181.75190735 127.46415710]
[195.97264099 132.23603821]
[213.87622070 128.13145447]
[225.03121948 141.62382507]
[239.36227417 146.05334473]
[253.69334412 150.48284912]
[269.16293335 147.16580200]
[279.03778076 158.31642151]
[294.50735474 154.99937439]
[304.38223267 166.15000916]
[318.71328735 170.57951355]
[334.57455444 166.41387939]
[345.91885376 178.25611877]
[341.07617188 193.92393494]
[325.02822876 197.29962158]
[314.28378296 184.91058350]
[299.95269775 180.48106384]
[285.50817871 184.11494446]
[274.60827637 172.64749146]
[260.16375732 176.28137207]
[249.26383972 164.81391907]
[234.93276978 160.38441467]
[220.60169983 155.95489502]
[209.69747925 161.33377075]
[197.67810059 157.68548584]
[191.20075989 146.45677185]
[176.98002625 141.68489075]
[162.45251465 144.97134399]
[151.83071899 133.24581909]
[137.61000061 128.47393799]
[123.38926697 123.70204926]
[110.61378479 131.56251526]
[108.46287537 146.40750122]
[106.31196594 161.25248718]
[104.16106415 176.09747314]
[102.01015472 190.94245911]
[99.85925293 205.78744507]
[112.28894043 214.71836853]
[119.13410950 228.40786743]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 128]
[10 127]
[11 126]
[12 125]
[13 124]
[14 123]
[16 84]
[17 83]
[19 80]
[20 79]
[21 78]
[23 76]
[24 75]
[25 74]
[26 73]
[28 71]
[29 70]
[30 69]
[31 68]
[32 67]
[37 63]
[38 62]
[39 61]
[40 60]
[41 59]
[44 56]
[45 55]
[46 54]
[88 122]
[89 121]
[90 120]
[92 118]
[93 117]
[95 114]
[96 113]
[97 112]
[99 110]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
