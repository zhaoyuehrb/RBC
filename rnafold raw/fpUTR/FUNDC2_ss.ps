%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUCUGCGCACGCGCAUCUCGGUGCAUCUGUUGGGCGGGACCGCGGGGCCUGUGACACCGCACGCUGAGCUCUGUGAUGUAGCCGCUUGCGGAGACUGCAAGCAGCCGCGGCGCGCCCGGCCCUCCCUCUUCCGCUGCCGCCGUGGGA\
) } def
/len { sequence length } bind def

/coor [
[96.88871765 152.50213623]
[93.79039764 167.17866516]
[101.30667114 181.35206604]
[94.77989197 196.00746155]
[79.21685028 199.90249634]
[66.55617523 190.04924011]
[66.51005554 174.00624084]
[79.11386871 164.08035278]
[82.21218872 149.40382385]
[68.96960449 142.35868835]
[58.52979279 153.12950134]
[48.08998108 163.90029907]
[37.65016937 174.67111206]
[33.89128494 183.06889343]
[26.87935829 185.55455017]
[16.21773338 196.10583496]
[14.69677258 212.07662964]
[1.18379021 220.72410583]
[-13.95521069 215.41467285]
[-19.10688591 200.22125244]
[-10.31930828 186.79896545]
[5.66644287 185.44421387]
[16.32806969 174.89292908]
[26.87935829 164.23129272]
[37.31917191 153.46049500]
[47.75898361 142.68968201]
[58.19879532 131.91886902]
[49.63408279 111.39041138]
[50.40381241 89.56798553]
[60.02819824 70.42239380]
[76.44712830 57.29587555]
[96.45114899 52.31965256]
[97.69802094 37.37156677]
[98.94489288 22.42347908]
[100.19177246 7.47539139]
[101.43864441 -7.47269583]
[102.68551636 -22.42078209]
[103.93239594 -37.36886978]
[105.17926788 -52.31695557]
[98.61588287 -66.71253204]
[107.38436127 -78.75259399]
[104.96829224 -87.63034058]
[108.81584167 -93.99760437]
[110.37342072 -108.91651917]
[111.93099976 -123.83543396]
[113.48857880 -138.75434875]
[115.04616547 -153.67324829]
[116.60374451 -168.59216309]
[112.14692688 -182.91476440]
[102.39927673 -194.31578064]
[92.65162659 -205.71681213]
[77.80279541 -211.17784119]
[75.41293335 -225.87947083]
[65.66528320 -237.28048706]
[55.91763306 -248.68151855]
[46.16997910 -260.08251953]
[30.53668404 -265.03552246]
[27.27417564 -281.10687256]
[39.73864365 -291.76373291]
[55.10771179 -286.04327393]
[57.57100296 -269.83020020]
[67.31865692 -258.42916870]
[77.06630707 -247.02813721]
[86.81395721 -235.62712097]
[100.96556854 -230.98156738]
[104.05264282 -215.46446228]
[113.80029297 -204.06343079]
[123.54795074 -192.66241455]
[130.70924377 -194.89082336]
[145.03184509 -199.34764099]
[152.19314575 -201.57604980]
[153.75071716 -216.49496460]
[155.30830383 -231.41387939]
[156.71060181 -246.34817505]
[146.31285095 -258.25036621]
[147.45999146 -274.01296997]
[159.47146606 -284.28430176]
[175.22105408 -282.97058105]
[185.36482239 -270.85119629]
[183.88464355 -255.11637878]
[171.65869141 -245.10130310]
[174.25369263 -238.12910461]
[170.22721863 -229.85629272]
[168.66963196 -214.93737793]
[167.11206055 -200.01846313]
[180.42781067 -193.11117554]
[193.74237061 -186.20446777]
[205.04136658 -196.07019043]
[216.34037781 -205.93591309]
[227.63937378 -215.80163574]
[238.93838501 -225.66735840]
[250.23739624 -235.53308105]
[261.53640747 -245.39880371]
[272.83538818 -255.26452637]
[280.78973389 -270.23666382]
[297.37872314 -266.73791504]
[298.60897827 -249.82865906]
[282.70111084 -243.96553040]
[271.40213013 -234.09980774]
[260.10311890 -224.23408508]
[248.80410767 -214.36836243]
[237.50509644 -204.50263977]
[226.20610046 -194.63691711]
[214.90708923 -184.77119446]
[203.60809326 -174.90547180]
[176.92680359 -156.65896606]
[150.24534607 -155.18113708]
[131.52265930 -167.03459167]
[129.96507263 -152.11567688]
[128.40748596 -137.19676208]
[126.84991455 -122.27784729]
[125.29232788 -107.35894012]
[123.73474884 -92.44002533]
[122.33245087 -77.50572205]
[128.98501587 -64.17932892]
[120.12735748 -51.07008362]
[118.88047791 -36.12199402]
[117.63360596 -21.17390823]
[116.38673401 -6.22582102]
[115.13985443 8.72226620]
[113.89298248 23.67035294]
[112.64611053 38.61843872]
[111.39923096 53.56652832]
[122.89375305 58.02517319]
[132.86599731 65.27484894]
[140.65289307 74.83350372]
[145.73664856 86.06555176]
[147.77925110 98.22413635]
[146.64486694 110.50080872]
[142.40892029 122.07925415]
[135.35308838 132.18957520]
[125.94652557 140.15953064]
[132.00953674 153.87957764]
[138.07255554 167.59963989]
[144.13555908 181.31968689]
[150.19857788 195.03974915]
[156.26159668 208.75979614]
[171.33073425 212.93769836]
[180.14620972 225.85363770]
[178.54562378 241.40908813]
[167.28471375 252.25926208]
[151.68054199 253.28100586]
[139.10092163 243.99191284]
[135.48558044 228.77799988]
[142.54153442 214.82281494]
[136.47853088 201.10275269]
[130.41551208 187.38270569]
[124.35250092 173.66264343]
[118.28948975 159.94259644]
[112.22647095 146.22253418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[10 27]
[11 26]
[12 25]
[13 24]
[15 23]
[16 22]
[32 123]
[33 122]
[34 121]
[35 120]
[36 119]
[37 118]
[38 117]
[39 116]
[41 114]
[43 113]
[44 112]
[45 111]
[46 110]
[47 109]
[48 108]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[55 62]
[56 61]
[71 85]
[72 84]
[73 83]
[74 81]
[87 105]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
[132 150]
[133 149]
[134 148]
[135 147]
[136 146]
[137 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
