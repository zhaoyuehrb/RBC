%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCGAUUACCAUGGAGACCGCCUGUACACAGUUUCCUCUUUCCUCUGCCCAGUCCUGGGGUCCCGCGGCCGCCUAGGAGGGAGCCCGCCGGGGCGGGGCGGGGCCGGGUGCCC\
) } def
/len { sequence length } bind def

/coor [
[109.32128906 203.82206726]
[108.50920868 188.84407043]
[107.49438477 173.87843323]
[106.27700043 158.92791748]
[105.05962372 143.97740173]
[103.84223938 129.02688599]
[97.99663544 124.32806396]
[91.89733124 138.03201294]
[86.81491852 152.14474487]
[72.37468719 156.20425415]
[60.68305588 146.80714417]
[61.54207611 131.83175659]
[74.23303986 123.83306885]
[86.30543518 114.93041229]
[80.45983887 110.23158264]
[65.59715271 112.25658417]
[50.73447037 114.28158569]
[35.87178802 116.30658722]
[21.00910187 118.33158875]
[6.14641809 120.35659027]
[-6.48288584 129.88607788]
[-20.13818359 123.93778992]
[-27.36175156 137.67095947]
[-41.29275131 144.50520325]
[-56.57442856 141.81262207]
[-67.33066559 130.62857056]
[-69.42546844 115.25354004]
[-62.05334854 101.59954834]
[-48.04903030 94.91683197]
[-32.79746246 97.77503204]
[-22.16318321 109.07511139]
[-10.59695721 99.69046021]
[4.12141800 105.49390411]
[18.98410225 103.46890259]
[33.84678650 101.44390106]
[48.70946884 99.41889954]
[63.57215500 97.39390564]
[78.43483734 95.36890411]
[82.97364807 89.39820099]
[68.95957184 84.04975891]
[53.99418259 85.06812286]
[41.49653625 76.77301788]
[36.62292099 62.58683014]
[41.38409424 48.36251450]
[53.81568909 39.96873856]
[68.78867340 40.86861420]
[80.12548065 50.69086838]
[83.14860535 65.38441467]
[92.05125427 77.45681000]
[96.59006500 71.48610687]
[94.56506348 56.62342453]
[92.54006195 41.76074219]
[90.51506042 26.89805794]
[80.05095673 14.27131939]
[86.00689697 -1.00804043]
[102.25592041 -3.22192550]
[112.08242798 9.90711880]
[105.37774658 24.87305832]
[107.40274811 39.73574066]
[109.42774963 54.59842682]
[111.45275116 69.46111298]
[123.51596832 78.37619019]
[138.31835938 75.94946289]
[153.12075806 73.52273560]
[167.92315674 71.09600067]
[182.72555542 68.66927338]
[197.52795410 66.24254608]
[212.33035278 63.81581497]
[220.54406738 53.75857162]
[233.01716614 52.10303116]
[242.91505432 59.20101929]
[257.77774048 57.17601776]
[272.64041138 55.15101624]
[287.50311279 53.12601852]
[302.36578369 51.10101700]
[317.22845459 49.07601547]
[329.85775757 39.54652405]
[343.51306152 45.49481201]
[358.37576294 43.46981049]
[371.00506592 33.94031906]
[384.66033936 39.88860703]
[399.52304077 37.86360550]
[412.14978027 27.39949989]
[427.42913818 33.35543823]
[429.64303589 49.60446167]
[416.51397705 59.43096924]
[401.54803467 52.72628784]
[386.68536377 54.75128937]
[375.11914062 64.13594055]
[360.40075684 58.33249664]
[345.53805542 60.35749435]
[333.97183228 69.74214935]
[319.25347900 63.93870163]
[304.39077759 65.96369934]
[289.52810669 67.98870087]
[274.66540527 70.01370239]
[259.80273438 72.03870392]
[244.94004822 74.06370544]
[231.74923706 85.55151367]
[214.75708008 78.61820984]
[199.95468140 81.04494476]
[185.15228271 83.47167206]
[170.34989929 85.89839935]
[155.54750061 88.32513428]
[140.74510193 90.75186157]
[125.94269562 93.17858887]
[118.79275513 127.80950165]
[120.01013947 142.76002502]
[121.22751617 157.71054077]
[122.44490051 172.66105652]
[126.30464172 181.09046936]
[123.48720551 188.03198242]
[124.29929352 203.00999451]
[131.19427490 218.49855042]
[118.21973419 229.41174316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 110]
[4 109]
[5 108]
[6 107]
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[22 31]
[50 61]
[51 60]
[52 59]
[53 58]
[62 106]
[63 105]
[64 104]
[65 103]
[66 102]
[67 101]
[68 100]
[71 98]
[72 97]
[73 96]
[74 95]
[75 94]
[76 93]
[78 91]
[79 90]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
