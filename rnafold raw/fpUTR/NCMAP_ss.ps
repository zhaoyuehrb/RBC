%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAUCCCAGGGUGGCAGCGCCGGGCGGCGGCGGGGACCCUGGCUGGGAGCGCGGCGGUGCCGGCGGGAGGCCGAGCGGGGCUCGACAGAGCAGGAUCGAG\
) } def
/len { sequence length } bind def

/coor [
[188.71421814 187.49812317]
[177.32313538 177.73884583]
[162.53866577 179.13706970]
[150.84747314 169.40205383]
[149.48112488 153.88526917]
[138.09004211 144.12599182]
[126.69897461 134.36671448]
[115.30789948 124.60743713]
[110.39820099 124.10250092]
[105.80577087 120.39188385]
[103.54003143 113.87960815]
[90.02861786 110.28333282]
[86.01795959 96.88906860]
[75.24927521 86.44705963]
[64.48059845 76.00505066]
[53.71192169 65.56304169]
[42.94324112 55.12103271]
[27.64973640 51.06896591]
[23.89887428 36.65437698]
[13.13019466 26.21236801]
[2.36151600 15.77035999]
[-8.40716267 5.32835054]
[-19.17584229 -5.11365891]
[-34.46934891 -9.16572666]
[-38.22021103 -23.58031273]
[-48.98888779 -34.02232361]
[-66.38703918 -33.38702011]
[-78.68106842 -45.23561859]
[-78.68740082 -61.97451019]
[-89.77252960 -72.07994080]
[-100.85766602 -82.18537903]
[-111.94279480 -92.29081726]
[-127.35383606 -95.86999512]
[-131.54681396 -110.16223907]
[-142.63194275 -120.26766968]
[-158.75846863 -123.24552155]
[-163.98707581 -138.78880310]
[-152.93904114 -150.90792847]
[-136.97962952 -147.13575745]
[-132.52651978 -131.35279846]
[-121.44138336 -121.24736786]
[-106.82322693 -118.39099884]
[-101.83736420 -103.37594604]
[-90.75222778 -93.27051544]
[-79.66709900 -83.16507721]
[-68.58196259 -73.05964661]
[-55.81702042 -75.44465637]
[-43.85364914 -69.91025543]
[-37.21249008 -58.29805756]
[-38.54687881 -44.79100037]
[-27.77820015 -34.34899139]
[-13.25494289 -31.04380608]
[-8.73383236 -15.88233757]
[2.03484654 -5.44032860]
[12.80352497 5.00168085]
[23.57220459 15.44369030]
[34.34088135 25.88569832]
[48.86413956 29.19088554]
[53.38525009 44.35235214]
[64.15393066 54.79436111]
[74.92260742 65.23637390]
[85.69129181 75.67838287]
[96.45996857 86.12039185]
[109.97138214 89.71666718]
[113.98204041 103.11093140]
[125.06717682 113.21636200]
[136.45825195 122.97563934]
[147.84931946 132.73490906]
[159.24040222 142.49418640]
[174.78314209 141.46423340]
[186.19628906 151.52378845]
[187.08241272 166.34776306]
[198.47348022 176.10704041]
[210.44374084 185.14656067]
[222.94778442 193.43203735]
[235.21846008 186.52285767]
[249.20477295 185.61706543]
[262.14074707 190.83604431]
[271.49313354 201.09564209]
[275.45745850 214.33074951]
[273.30599976 227.91094971]
[285.54895020 236.57756042]
[297.79190063 245.24415588]
[310.03485107 253.91076660]
[326.40509033 254.88429260]
[333.50415039 269.66723633]
[324.02914429 283.05215454]
[307.72714233 281.26980591]
[301.36825562 266.15371704]
[289.12530518 257.48712158]
[276.88232422 248.82051086]
[264.63937378 240.15390015]
[250.21394348 247.25512695]
[234.07945251 246.15606689]
[220.59556580 237.05989075]
[213.45271301 222.34329224]
[214.66230774 205.93606567]
[202.15826416 197.65060425]
[199.24017334 198.20704651]
[195.91004944 197.53681946]
[192.67561340 195.47035217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[5 69]
[6 68]
[7 67]
[8 66]
[11 65]
[13 63]
[14 62]
[15 61]
[16 60]
[17 59]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[25 51]
[26 50]
[29 46]
[30 45]
[31 44]
[32 43]
[34 41]
[35 40]
[74 98]
[75 97]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
