%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:43:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGAGGGGAAGAGAGAGAAGGAGAGGGAAUCCCAGUUCUUGCAGCCACUGGGAAUCAAGAGGCCCAACUCCGUCUUGGUCUUCAAGCAAACAAACAAACAACAAUGGGCCGUGGGAAGGGUGA\
) } def
/len { sequence length } bind def

/coor [
[179.48600769 303.28549194]
[163.37516785 293.75018311]
[149.55134583 281.11822510]
[138.60025024 265.92214966]
[130.98643494 248.80316162]
[127.03356934 230.48411560]
[126.91070557 211.73895264]
[130.62503052 193.36009216]
[138.02149963 176.12481689]
[148.78927612 160.76252747]
[138.31573486 150.02452087]
[127.84217834 139.28651428]
[117.36862183 128.54850769]
[106.89507294 117.81050873]
[92.40836334 117.52493286]
[82.29124451 107.15236664]
[82.36692810 92.66304016]
[71.89337158 81.92504120]
[61.41982269 71.18703461]
[50.94626999 60.44903564]
[35.77160263 55.97241592]
[32.42383194 41.45891571]
[21.95027733 30.72091484]
[11.47672558 19.98291206]
[1.00317347 9.24490833]
[-16.79594040 4.72838068]
[-20.57111740 -12.36166096]
[-31.30912018 -22.83521271]
[-42.04712296 -33.30876541]
[-64.89126587 -30.57725716]
[-82.37496948 -45.13203812]
[-83.79819489 -67.57830048]
[-96.19177246 -76.02809906]
[-108.58535767 -84.47789764]
[-120.97893524 -92.92770386]
[-133.37252808 -101.37750244]
[-145.76609802 -109.82730103]
[-158.15968323 -118.27710724]
[-171.96257019 -111.54093170]
[-187.28317261 -112.62467957]
[-200.00035095 -121.23683167]
[-206.69322205 -135.06076050]
[-205.56144714 -150.37789917]
[-196.90948486 -163.06800842]
[-183.06463623 -169.71752930]
[-167.75112915 -168.53775024]
[-155.08819580 -159.84603882]
[-148.48211670 -145.98042297]
[-149.70988464 -130.67068481]
[-137.31629944 -122.22088623]
[-124.92272186 -113.77108765]
[-112.52913666 -105.32128143]
[-100.13555908 -96.87148285]
[-87.74197388 -88.42168427]
[-75.34839630 -79.97187805]
[-68.74986267 -84.26488495]
[-61.19853210 -86.58358765]
[-53.27349091 -86.73453522]
[-45.58681107 -84.69110107]
[-38.73628235 -80.59671783]
[-33.25891113 -74.75492096]
[-29.58883667 -67.60686493]
[-28.02294922 -59.69803238]
[-28.69691658 -51.63661957]
[-31.57357025 -44.04676819]
[-20.83556747 -33.57321548]
[-10.09756565 -23.09966278]
[2.06627154 -22.91656303]
[11.10300732 -14.18274689]
[11.74117661 -1.22864377]
[22.21472931 9.50935936]
[32.68828201 20.24736214]
[43.16183472 30.98536491]
[57.58736038 34.69392776]
[61.68427277 49.97548294]
[72.15782166 60.71348572]
[82.63137817 71.45148468]
[93.10492706 82.18949127]
[107.59163666 82.47506714]
[117.70875549 92.84763336]
[117.63307190 107.33695984]
[128.10662842 118.07495880]
[138.58018494 128.81295776]
[149.05372620 139.55096436]
[159.52728271 150.28897095]
[169.22358704 143.30645752]
[179.74771118 137.65151978]
[190.91897583 133.42076111]
[202.54570007 130.68632507]
[214.42843628 129.49467468]
[226.36338806 129.86584473]
[238.14591980 131.79302979]
[249.57408142 135.24276733]
[260.45202637 140.15551758]
[270.59341431 146.44665527]
[279.82461548 154.00793457]
[287.98754883 162.70939636]
[294.94262695 172.40153503]
[300.57086182 182.91793823]
[304.77621460 194.07807922]
[307.48687744 205.69044495]
[308.65682983 217.55583191]
[308.26644897 229.47074890]
[306.32284546 241.23092651]
[302.85971069 252.63475037]
[297.93688965 263.48684692]
[291.63912964 273.60128784]
[284.07482910 282.80490112]
[275.37396240 290.94009399]
[265.68606567 297.86773682]
[272.52920532 311.21582031]
[279.37237549 324.56387329]
[292.55337524 333.31442261]
[291.47448730 348.16992188]
[305.53625488 356.60784912]
[304.98916626 372.99786377]
[290.39602661 380.47930908]
[276.76901245 371.35595703]
[278.12640381 355.01306152]
[265.43487549 347.21725464]
[266.02429199 331.40704346]
[259.18112183 318.05895996]
[252.33796692 304.71087646]
[234.41435242 310.04888916]
[215.77301025 311.60882568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 85]
[11 84]
[12 83]
[13 82]
[14 81]
[17 78]
[18 77]
[19 76]
[20 75]
[22 73]
[23 72]
[24 71]
[25 70]
[27 67]
[28 66]
[29 65]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[110 123]
[111 122]
[112 121]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
