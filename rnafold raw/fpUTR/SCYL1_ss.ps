%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCCGCCCCGCCCCGGCUCGGGCGGCCGGAGGACCCGGAGCUAAGGCGCCCGAACCCGCGGCGGCGGUGGGGACG\
) } def
/len { sequence length } bind def

/coor [
[100.10320282 365.32983398]
[108.19922638 351.06845093]
[107.59523773 336.08062744]
[106.99124908 321.09280396]
[106.38726044 306.10494995]
[105.78327179 291.11712646]
[105.17928314 276.12927246]
[104.57529449 261.14144897]
[103.97129822 246.15361023]
[103.06562805 231.18098450]
[101.85862732 216.22962952]
[100.65162659 201.27825928]
[99.44462585 186.32690430]
[98.23763275 171.37554932]
[89.50129700 159.31213379]
[96.10305786 144.93412781]
[94.89605713 129.98275757]
[93.68906403 115.03140259]
[83.78009033 101.63875580]
[90.80993652 86.53472137]
[89.00188446 71.64408875]
[87.19383240 56.75345612]
[85.38578033 41.86282349]
[83.57773590 26.97219086]
[81.76968384 12.08155727]
[79.96163177 -2.80907583]
[75.71805573 -11.21860504]
[78.39307404 -18.33415031]
[77.18608093 -33.28551102]
[65.43100739 -43.50588608]
[64.41992950 -58.68588638]
[74.23593903 -69.82955933]
[73.02893829 -84.78092194]
[59.37340546 -91.95935822]
[51.78648376 -105.39223480]
[52.68913269 -120.79316711]
[61.79331970 -133.24777222]
[76.19393158 -138.78184509]
[91.29579163 -135.62947083]
[102.27993774 -124.79655457]
[105.64138031 -109.73985291]
[100.30749512 -95.26390076]
[87.98030090 -85.98792267]
[89.18729401 -71.03656006]
[100.66376495 -61.61178970]
[102.10081482 -46.46617889]
[92.13743591 -34.49250793]
[93.34443665 -19.54114914]
[94.85226440 -4.61712599]
[96.66031647 10.27350712]
[98.46836853 25.16414070]
[100.27641296 40.05477142]
[102.08446503 54.94540787]
[103.89251709 69.83603668]
[105.70056915 84.72666931]
[114.52256012 92.59282684]
[115.71069336 104.35260010]
[108.64041901 113.82440186]
[109.84741974 128.77575684]
[111.05442047 143.72712708]
[119.87708282 156.85995483]
[113.18898773 170.16854858]
[114.39598846 185.11990356]
[115.60298920 200.07125854]
[116.80998230 215.02262878]
[118.01698303 229.97398376]
[121.91850281 238.54756165]
[118.95913696 245.54962158]
[119.56312561 260.53747559]
[120.16711426 275.52529907]
[120.77110291 290.51312256]
[121.37509155 305.50097656]
[121.97908020 320.48880005]
[122.58306885 335.47662354]
[123.18705750 350.46447754]
[132.40438843 364.02813721]
[125.02394867 378.67263794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[7 70]
[8 69]
[9 68]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[16 60]
[17 59]
[18 58]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[28 48]
[29 47]
[32 44]
[33 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
