%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAGGCGCAGACGACUCACCCUGGGCCGGGGGUGAGGCUUGGACUGUUUCUUUUUCCAAAAGAGGAGCUCAAAAGAGAAAGUUCAUCUAGAAAUCUCAAAGCCAUGUCUCAGGAUGAACUAGAGU\
) } def
/len { sequence length } bind def

/coor [
[101.98537445 136.58549500]
[97.98468018 151.04212952]
[93.98399353 165.49876404]
[98.62020111 181.22891235]
[87.12112427 192.92092896]
[71.31601715 188.54707336]
[67.46382141 172.60678101]
[79.52735138 161.49807739]
[83.52803802 147.04144287]
[87.52873230 132.58479309]
[82.35717773 127.15294647]
[78.12038422 141.54216003]
[63.54053116 145.06748962]
[53.19765854 134.20355225]
[57.43476868 119.81443787]
[72.01406860 116.28923798]
[66.84251404 110.85738373]
[52.20698547 114.14390564]
[37.57145309 117.43041992]
[22.93592072 120.71694183]
[8.30038834 124.00345612]
[-6.33514357 127.28997803]
[-20.97067642 130.57649231]
[-35.60620880 133.86302185]
[-43.84865189 147.34773254]
[-59.23146057 150.97331238]
[-72.62828064 142.58876038]
[-76.09101868 127.16847992]
[-67.56529236 113.86105347]
[-52.10926819 110.56153870]
[-38.89272690 119.22748566]
[-24.25719452 115.94096375]
[-9.62166214 112.65444946]
[5.01386976 109.36792755]
[19.64940071 106.08140564]
[34.28493500 102.79489136]
[48.92046738 99.50836945]
[63.55599594 96.22185516]
[71.33487701 80.73259735]
[84.71913910 71.38662720]
[99.93870544 69.66258240]
[113.20099640 75.03894806]
[113.56911469 60.04346085]
[113.93723297 45.04798126]
[114.30535126 30.05249786]
[114.67346954 15.05701542]
[115.04158783 0.06153284]
[107.64529419 -13.92436600]
[115.69260406 -26.45792198]
[116.06072235 -41.45340347]
[116.42884064 -56.44888687]
[116.79696655 -71.44436646]
[117.16508484 -86.43984985]
[117.53320312 -101.43533325]
[117.90132141 -116.43081665]
[118.26943970 -131.42630005]
[117.90132141 -146.42178345]
[116.79785156 -161.38113403]
[115.69438171 -176.34049988]
[103.56503296 -186.47235107]
[102.23582458 -202.22064209]
[112.49534607 -214.24218750]
[128.25682068 -215.40483093]
[140.16921997 -205.01876831]
[141.16516113 -189.24589539]
[130.65373230 -177.44396973]
[131.75720215 -162.48460388]
[132.86067200 -147.52525330]
[135.00880432 -145.57086182]
[136.46899414 -142.60319519]
[136.83392334 -138.89642334]
[135.80946350 -134.87312317]
[133.26492310 -131.05818176]
[132.89680481 -116.06269836]
[132.52868652 -101.06721497]
[132.16056824 -86.07173157]
[131.79244995 -71.07624817]
[131.42433167 -56.08076859]
[131.05621338 -41.08528519]
[130.68809509 -26.08980370]
[138.11071777 -13.17648220]
[130.03707886 0.42965126]
[129.66896057 15.42513371]
[129.30084229 30.42061615]
[128.93272400 45.41609955]
[128.56460571 60.41157913]
[128.19648743 75.40706635]
[135.58995056 88.45836639]
[148.64126587 95.85183716]
[161.69256592 103.24531555]
[174.74386597 110.63878632]
[187.79518127 118.03225708]
[204.50970459 113.04468536]
[219.39360046 121.47675323]
[223.54116821 137.72586060]
[236.76998901 144.79681396]
[249.99880981 151.86776733]
[263.22763062 158.93872070]
[276.27038574 150.94911194]
[291.46078491 150.56320190]
[304.71667480 157.78451538]
[312.52597046 170.58572388]
[312.87680054 185.47674561]
[326.10562134 192.54769897]
[342.92471313 194.68182373]
[345.52999878 211.43440247]
[330.15332031 218.57543945]
[319.03466797 205.77651978]
[305.80584717 198.70556641]
[293.22949219 206.68685913]
[278.24707031 207.30566406]
[264.87820435 200.29571533]
[256.75973511 187.45097351]
[256.15667725 172.16752625]
[242.92785645 165.09658813]
[229.69903564 158.02563477]
[216.47021484 150.95468140]
[204.72283936 156.39595032]
[191.79969788 154.00973511]
[182.49769592 144.45233154]
[180.40170288 131.08355713]
[167.35040283 123.69009399]
[154.29908752 116.29661560]
[141.24778748 108.90314484]
[128.19648743 101.50967407]
[127.70992279 112.35001373]
[122.94548798 122.92889404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[42 87]
[43 86]
[44 85]
[45 84]
[46 83]
[47 82]
[49 80]
[50 79]
[51 78]
[52 77]
[53 76]
[54 75]
[55 74]
[56 73]
[57 68]
[58 67]
[59 66]
[88 125]
[89 124]
[90 123]
[91 122]
[92 121]
[95 117]
[96 116]
[97 115]
[98 114]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
