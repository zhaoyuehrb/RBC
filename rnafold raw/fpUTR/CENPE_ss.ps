%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUUUAAAGGCGGGGCGGCCUGUGAGCCCUGAAGUGCCGGCCGCGGAGGGUCCUGGCCAUUUUCCUGGGACCAGUUCAGCCUGAUAGG\
) } def
/len { sequence length } bind def

/coor [
[92.19425201 248.40890503]
[77.11712646 246.84178162]
[63.48660278 240.20968628]
[52.94864273 229.31347656]
[46.77575302 215.46894836]
[45.71334457 200.34786987]
[49.88970566 185.77618408]
[58.80051804 173.51350403]
[71.36975861 165.04061890]
[86.07963562 161.38064575]
[87.63039398 146.46101379]
[89.18115234 131.54139709]
[90.73191071 116.62177277]
[82.59206390 110.34585571]
[78.53168488 100.22147369]
[80.26092529 88.81320953]
[87.92860413 79.36344147]
[75.58383942 70.84246826]
[63.23908615 62.32149887]
[50.89432526 53.80052567]
[38.54956818 45.27955627]
[26.20481110 36.75858307]
[10.45220375 35.28686523]
[4.37315226 21.68927765]
[-7.97160578 13.16830730]
[-14.86775398 12.20966911]
[-19.42644691 8.37561226]
[-20.84627342 3.60903406]
[-32.57374573 -5.74331284]
[-48.24862289 -3.72495961]
[-60.70840454 -13.44758320]
[-62.56092072 -29.14292526]
[-52.70710754 -41.49921417]
[-36.99305725 -43.18568802]
[-24.74163818 -33.20178604]
[-23.22139740 -17.47078514]
[-11.49392605 -8.11843777]
[0.54936540 0.82354921]
[12.89412308 9.34452057]
[27.76375008 10.20676136]
[34.72578049 24.41382599]
[47.07054138 32.93479919]
[59.41529846 41.45576859]
[71.76005554 49.97674179]
[84.10481262 58.49771118]
[96.44956970 67.01868439]
[111.34020233 68.82672882]
[125.36544800 63.50765991]
[139.39068604 58.18858719]
[150.56878662 43.68163681]
[167.72349548 46.91420746]
[181.55679321 41.11420441]
[195.39009094 35.31420517]
[209.22337341 29.51420403]
[223.05667114 23.71420288]
[236.88996887 17.91420174]
[250.72325134 12.11419964]
[264.55654907 6.31419849]
[267.98257446 -8.81993294]
[279.67208862 -19.02459335]
[295.13021851 -20.37588310]
[308.41299438 -12.35420418]
[314.41293335 1.95594537]
[310.82290649 17.05202103]
[299.02340698 27.12927246]
[283.55151367 28.31279182]
[270.35653687 20.14749146]
[256.52325439 25.94749260]
[242.68995667 31.74749374]
[228.85667419 37.54749298]
[215.02337646 43.34749603]
[201.19007874 49.14749527]
[187.35679626 54.94749832]
[173.52349854 60.74749756]
[168.56512451 71.92788696]
[156.91146851 76.80815887]
[144.70976257 72.21382904]
[130.68452454 77.53290558]
[116.65927887 82.85197449]
[120.88078308 104.99307251]
[105.65153503 118.17253113]
[104.10077667 133.09216309]
[102.55001831 148.01177979]
[100.99925995 162.93139648]
[114.64198303 169.53836060]
[125.20000458 180.41513062]
[131.39839172 194.24827576]
[132.48866272 209.36737061]
[128.33917236 223.94671631]
[119.45096588 236.22579956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 84]
[11 83]
[12 82]
[13 81]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[24 39]
[25 38]
[28 37]
[29 36]
[47 79]
[48 78]
[49 77]
[51 74]
[52 73]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
