%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUACGAGCGCGGAGCUUGCGCAGAAGACCCCCAUCAGGGUGCGGGGUGCAGUUGCGGCUCCAGGGCC\
) } def
/len { sequence length } bind def

/coor [
[78.62585449 259.60000610]
[68.59616089 271.16131592]
[54.33827591 276.72650146]
[39.12856293 275.01675415]
[26.46210480 266.42492676]
[19.24955750 252.92536926]
[19.14831161 237.62019348]
[26.18163490 224.02641296]
[38.73331833 215.26777649]
[53.91907883 213.35694885]
[59.11861801 199.28695679]
[56.27276230 184.66674805]
[68.31398010 174.40420532]
[73.20098877 160.22264099]
[77.77307892 145.93641663]
[82.34516144 131.65019226]
[86.91725159 117.36398315]
[91.48933411 103.07776642]
[90.02014160 99.11642456]
[90.48445129 94.50600433]
[93.13214874 90.21271515]
[97.72967529 87.27561951]
[104.15237427 73.72022247]
[110.57507324 60.16481781]
[116.99777985 46.60941315]
[123.42047882 33.05401230]
[115.12971497 18.48887634]
[117.01734161 2.00125194]
[128.16281128 -10.07194233]
[144.12515259 -13.20569992]
[149.94195557 -27.03193283]
[155.75877380 -40.85816574]
[161.57559204 -54.68439484]
[167.39239502 -68.51062775]
[172.90191650 -82.46215820]
[178.10145569 -96.53215027]
[183.30099487 -110.60214996]
[180.00094604 -126.66582489]
[192.44046021 -137.35180664]
[207.82286072 -131.66726685]
[210.32403564 -115.45998383]
[197.37100220 -105.40261078]
[192.17146301 -91.33261108]
[186.97192383 -77.26261902]
[187.62992859 -69.65584564]
[181.21862793 -62.69381714]
[175.40182495 -48.86758423]
[169.58500671 -35.04135132]
[163.76818848 -21.21512032]
[157.95138550 -7.38888788]
[165.96885681 3.50585985]
[167.48667908 17.05727005]
[161.99078369 29.65618134]
[150.84976196 37.89220810]
[136.97587585 39.47671127]
[130.55317688 53.03211594]
[124.13047791 66.58751678]
[117.70777893 80.14292145]
[111.28507996 93.69831848]
[105.77555847 107.64984894]
[101.20346832 121.93606567]
[96.63138580 136.22229004]
[92.05929565 150.50849915]
[87.48721313 164.79472351]
[87.83045959 174.25288391]
[82.38397980 179.60374451]
[84.85793304 195.23033142]
[73.18861389 204.48648071]
[67.98907471 218.55648804]
[78.28291321 229.88323975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 69]
[11 68]
[13 66]
[14 64]
[15 63]
[16 62]
[17 61]
[18 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
