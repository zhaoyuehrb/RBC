%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAGAAUAGUCAGGCCUUUCUGGAAGCCCAGUGCCACAGUCUGCAUUGAGCUUGGCUCAGGAAAGAAGGGAAAUCCAGGCGGGGCCUGUUGGGCCCAGGUCUUGAGCUCUUUUGGCUCCAGAGUUCCCAGCACAGUC\
) } def
/len { sequence length } bind def

/coor [
[297.63348389 381.86346436]
[282.65820312 381.00228882]
[268.57080078 375.85012817]
[256.57339478 366.84667969]
[247.68978882 354.76025391]
[242.67811584 340.62225342]
[241.96601868 325.63916016]
[245.61428833 311.08956909]
[253.31158447 298.21511841]
[264.40106201 288.11444092]
[277.93634033 281.64950562]
[292.76245117 279.37197876]
[307.61688232 281.47702026]
[296.26046753 271.67742920]
[284.90408325 261.87783813]
[273.54766846 252.07824707]
[262.19125366 242.27864075]
[250.83486938 232.47904968]
[239.47846985 222.67944336]
[228.01203918 213.00880432]
[216.43707275 203.46835327]
[204.86210632 193.92791748]
[193.28713989 184.38746643]
[181.71217346 174.84701538]
[170.13720703 165.30657959]
[153.52233887 167.65290833]
[140.06126404 157.08079529]
[138.33636475 139.71322632]
[126.54875183 130.43679810]
[114.76113129 121.16037750]
[88.34636688 127.38011932]
[66.70037842 105.26787567]
[52.04481506 102.07186890]
[37.38925171 98.87586212]
[22.73368835 95.67985535]
[11.23767471 106.10200500]
[-4.19238138 107.74304199]
[-17.62330818 99.97195435]
[-23.89064026 85.77687836]
[-20.58445930 70.61611176]
[-8.97606182 60.31928253]
[6.47088766 58.84572601]
[19.81672287 66.76206207]
[25.92969513 81.02429199]
[40.58525848 84.22029877]
[55.24082184 87.41630554]
[69.89638519 90.61231232]
[77.63970947 77.76548767]
[67.96907043 66.29907227]
[58.29842758 54.83265305]
[48.62778854 43.36623383]
[38.95714951 31.89981651]
[24.12352180 23.69007492]
[27.90606880 7.16346931]
[44.83391953 6.22317171]
[50.42356491 22.22917747]
[60.09420776 33.69559479]
[69.76484680 45.16201019]
[79.43548584 56.62842941]
[89.10612488 68.09484863]
[97.48629761 67.26190948]
[105.58789062 68.53718567]
[112.90298462 71.72943878]
[119.00090790 76.53083801]
[123.55342865 82.54311371]
[126.35189056 89.30879974]
[127.31534576 96.34503174]
[126.48960876 103.17759705]
[124.03755188 109.37275696]
[135.82516479 118.64917755]
[147.61279297 127.92559814]
[160.76593018 124.80001068]
[173.12722778 129.77349854]
[180.23902893 140.80970764]
[179.67765808 153.73159790]
[191.25262451 163.27204895]
[202.82759094 172.81250000]
[214.40255737 182.35295105]
[225.97752380 191.89338684]
[237.55249023 201.43383789]
[246.24346924 204.51434326]
[249.27806091 211.32304382]
[260.63446045 221.12263489]
[271.99087524 230.92224121]
[283.34725952 240.72183228]
[294.70367432 250.52143860]
[306.06005859 260.32104492]
[317.41647339 270.12063599]
[330.60006714 277.27554321]
[345.00543213 281.45715332]
[359.41079712 285.63876343]
[373.81613159 289.82037354]
[388.22149658 294.00198364]
[402.62683105 298.18359375]
[407.85794067 296.88619995]
[412.56979370 297.69961548]
[416.02990723 300.05389404]
[417.84854126 303.16748047]
[431.93750000 308.31549072]
[447.55490112 305.78433228]
[456.85372925 317.41970825]
[470.94265747 322.56768799]
[485.03158569 327.71569824]
[500.64901733 325.18453979]
[509.94781494 336.81991577]
[524.03674316 341.96789551]
[538.12567139 347.11590576]
[552.21466064 352.26388550]
[566.30358887 357.41189575]
[581.39947510 351.98120117]
[594.98138428 360.52001953]
[596.63043213 376.47808838]
[585.08154297 387.61376953]
[569.19409180 385.38467407]
[561.15557861 371.50082397]
[547.06665039 366.35281372]
[532.97772217 361.20483398]
[518.88879395 356.05682373]
[504.79983521 350.90884399]
[490.19015503 353.80819702]
[479.88360596 341.80462646]
[465.79467773 336.65661621]
[451.70571899 331.50863647]
[437.09603882 334.40798950]
[426.78948975 322.40441895]
[412.70056152 317.25640869]
[398.44522095 312.58892822]
[384.03988647 308.40731812]
[369.63452148 304.22570801]
[355.22915649 300.04409790]
[340.82382202 295.86248779]
[326.41845703 291.68087769]
[336.27694702 302.98620605]
[342.44763184 316.65817261]
[344.40396118 331.53005981]
[341.97897339 346.33273315]
[335.37963867 359.80303955]
[325.16906738 370.79141235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 88]
[14 87]
[15 86]
[16 85]
[17 84]
[18 83]
[19 82]
[20 80]
[21 79]
[22 78]
[23 77]
[24 76]
[25 75]
[28 71]
[29 70]
[30 69]
[32 47]
[33 46]
[34 45]
[35 44]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
[89 132]
[90 131]
[91 130]
[92 129]
[93 128]
[94 127]
[98 126]
[99 125]
[101 123]
[102 122]
[103 121]
[105 119]
[106 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
