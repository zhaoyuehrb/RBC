%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUCCCCGGAGCCCAGAGCUCGCAGCUCCGCCGGCGCCUGGUCCCAGCGCCCGCGGCGCCGCGUCCCCGGCCCAACC\
) } def
/len { sequence length } bind def

/coor [
[76.58411407 293.34384155]
[61.67623901 296.31430054]
[46.76738358 293.34875488]
[34.13104630 284.89941406]
[25.69417381 272.25473022]
[22.74332809 257.34295654]
[25.72849464 242.43803406]
[34.19445419 229.81282043]
[46.85020828 221.39259338]
[61.76585007 218.46136475]
[64.69220734 203.74958801]
[62.85947418 196.38076782]
[68.03307343 188.52276611]
[71.53475189 173.93722534]
[75.03643036 159.35166931]
[68.94348145 148.70964050]
[71.93634033 136.40103149]
[82.91414642 129.30480957]
[81.66521454 121.81492615]
[87.43939209 114.38706207]
[80.95497894 101.42948914]
[85.43248749 87.64913940]
[98.29475403 80.97768402]
[102.93001556 66.71183777]
[107.56526947 52.44599152]
[104.47114563 36.93029022]
[115.76269531 27.21689224]
[120.39795685 12.95104504]
[117.30383301 -2.56465650]
[128.59538269 -12.27805424]
[133.23063660 -26.54390144]
[137.86589050 -40.80974960]
[142.50114441 -55.07559586]
[139.40702820 -70.59130096]
[150.69857788 -80.30469513]
[155.33383179 -94.57054138]
[159.96908569 -108.83639526]
[164.60433960 -123.10224152]
[169.23959351 -137.36808777]
[168.93417358 -146.77133179]
[174.34703064 -152.09667969]
[179.53878784 -166.16955566]
[176.22984314 -182.23139954]
[188.66345215 -192.92425537]
[204.04899597 -187.24822998]
[206.55912781 -171.04232788]
[193.61166382 -160.97779846]
[188.41990662 -146.90492249]
[183.50544739 -132.73283386]
[178.87019348 -118.46698761]
[174.23493958 -104.20113373]
[169.59968567 -89.93528748]
[164.96443176 -75.66944122]
[168.39009094 -61.17412949]
[156.76699829 -50.44034195]
[152.13174438 -36.17449570]
[147.49649048 -21.90864754]
[142.86123657 -7.64279938]
[146.28689575 6.85251284]
[134.66380310 17.58629990]
[130.02854919 31.85214806]
[133.45420837 46.34745789]
[121.83111572 57.08124542]
[117.19586182 71.34709167]
[112.56060791 85.61293793]
[119.04502106 98.57051086]
[114.56751251 112.35086060]
[101.70524597 119.02231598]
[97.35097504 133.37641907]
[102.37200165 150.96307373]
[89.62197876 162.85334778]
[86.12030029 177.43890381]
[82.61862183 192.02444458]
[79.40398407 206.67593384]
[76.47763062 221.38771057]
[89.13615417 229.80378723]
[97.60626221 242.42620850]
[100.59632874 257.33016968]
[97.65039062 272.24291992]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 75]
[11 74]
[13 73]
[14 72]
[15 71]
[18 69]
[20 68]
[23 65]
[24 64]
[25 63]
[27 61]
[28 60]
[30 58]
[31 57]
[32 56]
[33 55]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
