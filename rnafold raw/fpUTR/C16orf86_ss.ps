%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGUUUCGGCCGAGGGUGGGCUCCGCGGUCGCCGGUUUCUCUUCCCAGCUCUGCCCUCGCUUGCUGGCCGGUCUCCGGGGUCAGCGCGGGGCCACCAUCCAGCCCCUUGGGGCCCGCCCCAAGCAGCUGUCGAGGACGCACUCAGCCUGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[92.20145416 130.49858093]
[85.67826080 128.03334045]
[79.85786438 124.19245911]
[75.02588654 119.16439819]
[71.41944122 113.19590759]
[69.21549225 106.57986450]
[68.52220154 99.64093781]
[69.37359619 92.71962738]
[71.72788239 86.15557861]
[60.21594238 76.53917694]
[48.70400238 66.92277527]
[37.87604141 68.52373505]
[28.16701508 63.96641541]
[22.70969200 54.99001694]
[23.11539841 44.71313477]
[11.99487400 34.64665604]
[0.87435043 24.58018112]
[-10.24617386 14.51370430]
[-21.36669731 4.44722795]
[-32.48722076 -5.61924839]
[-43.80569077 -15.46263504]
[-55.31763077 -25.07903862]
[-66.82956696 -34.69544220]
[-78.34150696 -44.31184769]
[-89.85344696 -53.92825317]
[-101.36539459 -63.54465866]
[-112.87733459 -73.16106415]
[-124.38927460 -82.77746582]
[-143.13328552 -80.33591461]
[-157.50033569 -92.12446594]
[-158.72311401 -110.35003662]
[-174.37792969 -112.63858032]
[-179.74197388 -126.53377533]
[-191.62712097 -135.68490601]
[-203.51226807 -144.83602905]
[-215.39743042 -153.98715210]
[-226.87870789 -148.88731384]
[-239.36601257 -149.17333984]
[-250.47227478 -154.72872925]
[-258.10079956 -164.43565369]
[-260.84103394 -176.39927673]
[-258.22900391 -188.31744385]
[-269.74096680 -197.93383789]
[-285.26965332 -196.71005249]
[-296.80740356 -206.62644958]
[-297.87838745 -221.43821716]
[-309.39031982 -231.05462646]
[-320.90228271 -240.67103577]
[-332.41421509 -250.28742981]
[-343.92614746 -259.90383911]
[-357.14682007 -257.16357422]
[-369.34680176 -262.47674561]
[-376.14349365 -273.68945312]
[-375.23748779 -286.57452393]
[-386.55596924 -296.41790771]
[-402.74771118 -299.01776123]
[-408.33847046 -314.43447876]
[-397.57693481 -326.80871582]
[-381.53363037 -323.41085815]
[-376.71258545 -307.73638916]
[-365.39410400 -297.89300537]
[-348.70858765 -299.79162598]
[-335.53646851 -288.83993530]
[-334.30975342 -271.41577148]
[-322.79782104 -261.79937744]
[-311.28585815 -252.18296814]
[-299.77392578 -242.56655884]
[-288.26199341 -232.95016479]
[-273.49612427 -234.53273010]
[-261.68438721 -224.94432068]
[-260.12454224 -209.44578552]
[-248.61260986 -199.82937622]
[-231.75466919 -204.94406128]
[-215.04019165 -198.90118408]
[-205.17828369 -183.92713928]
[-206.24630737 -165.87231445]
[-194.36114502 -156.72117615]
[-182.47599792 -147.57005310]
[-170.59083557 -138.41893005]
[-155.78613281 -136.78494263]
[-149.57199097 -122.23519135]
[-138.78300476 -126.13637543]
[-127.33629608 -124.30141449]
[-118.11808777 -117.07502747]
[-113.50968170 -106.17597961]
[-114.77286530 -94.28940582]
[-103.26092529 -84.67300415]
[-91.74898529 -75.05659485]
[-80.23704529 -65.44019318]
[-68.72510529 -55.82378769]
[-57.21316528 -46.20738220]
[-45.70122528 -36.59098053]
[-34.18928528 -26.97457504]
[-29.38605881 -26.51036263]
[-24.83880424 -22.98803520]
[-22.42074585 -16.73977280]
[-11.30022144 -6.67329597]
[-0.17969707 3.39318037]
[10.94082642 13.45965672]
[22.06134987 23.52613258]
[33.18187332 33.59260941]
[52.30834579 36.20737839]
[58.32040787 55.41083145]
[69.83234406 65.02723694]
[81.34428406 74.64363861]
[108.95075989 69.81947327]
[129.46340942 88.91452026]
[144.35679626 87.12924957]
[159.25016785 85.34397888]
[174.14355469 83.55870819]
[189.03694153 81.77342987]
[203.93031311 79.98815918]
[218.82369995 78.20288849]
[231.61740112 67.94358063]
[246.79881287 74.14492035]
[248.75061035 90.42750549]
[235.46495056 100.04120636]
[220.60897827 93.09626770]
[205.71559143 94.88153839]
[190.82220459 96.66680908]
[175.92883301 98.45208740]
[161.03544617 100.23735809]
[146.14207458 102.02262878]
[131.24868774 103.80790710]
[130.02191162 109.46919250]
[127.77856445 114.80985260]
[124.59462738 119.64904022]
[133.74575806 131.53419495]
[142.89688110 143.41935730]
[152.04800415 155.30450439]
[161.19912720 167.18965149]
[176.62341309 169.36442566]
[185.73463440 181.54801941]
[183.56628418 196.23930359]
[192.71740723 208.12445068]
[201.86853027 220.00961304]
[209.62767029 224.93482971]
[211.08064270 232.22326660]
[226.69845581 233.00933838]
[238.12188721 243.68826294]
[239.95712280 259.21777344]
[231.33764648 272.26531982]
[216.33328247 276.67025757]
[202.02865601 270.35266113]
[195.17796326 256.29556274]
[199.01589966 241.13627625]
[189.98338318 229.16073608]
[180.83226013 217.27558899]
[171.68112183 205.39042664]
[156.92364502 203.73141479]
[147.47380066 191.80853271]
[149.31398010 176.34078979]
[140.16285706 164.45562744]
[131.01173401 152.57048035]
[121.86059570 140.68531799]
[112.70947266 128.80017090]
[106.05701447 130.89163208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 105]
[10 104]
[11 103]
[15 101]
[16 100]
[17 99]
[18 98]
[19 97]
[20 96]
[21 93]
[22 92]
[23 91]
[24 90]
[25 89]
[26 88]
[27 87]
[28 86]
[31 81]
[33 79]
[34 78]
[35 77]
[36 76]
[42 72]
[43 71]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[54 61]
[55 60]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
[113 118]
[127 156]
[128 155]
[129 154]
[130 153]
[131 152]
[134 149]
[135 148]
[136 147]
[138 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
