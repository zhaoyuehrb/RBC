%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGGCAGCCAGCAGCUUCCCCUUCUCUGCCCUGCUCCAGGCACCAGGCUCUUUCCCCUUCAGUGUCUCAGAGGAGGGGACGGCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[85.68243408 211.19989014]
[79.94805145 215.57940674]
[73.14969635 217.83561707]
[66.03971100 217.75486755]
[58.68805313 230.82978821]
[59.41566467 247.21278381]
[45.44770432 255.80511475]
[31.15321541 247.76771545]
[31.23714256 231.36878967]
[45.61314774 223.47813416]
[52.96480179 210.40322876]
[49.18445587 187.54635620]
[68.69560242 173.83982849]
[73.23332214 159.54266357]
[69.70874023 145.07107544]
[81.25825500 134.25816345]
[85.79597473 119.96099091]
[90.33369446 105.66381836]
[94.62665558 91.29125977]
[98.67360687 76.84750366]
[102.72055817 62.40374374]
[106.76750946 47.95998383]
[110.81446075 33.51622391]
[114.86141205 19.07246399]
[118.90836334 4.62870502]
[122.95531464 -9.81505394]
[127.00226593 -24.25881386]
[131.04922485 -38.70257187]
[135.09617615 -53.14633179]
[139.14312744 -67.59008789]
[125.98213196 -60.39368439]
[111.00459290 -61.21435547]
[98.70866394 -69.80563354]
[92.78712463 -83.58734131]
[95.01836395 -98.42046356]
[104.73228455 -109.85023499]
[119.01155090 -114.44400024]
[133.56771851 -110.82212830]
[144.02920532 -100.07235718]
[147.25419617 -85.42405701]
[155.48097229 -97.96678162]
[163.70774841 -110.50951385]
[171.93452454 -123.05224609]
[180.16130066 -135.59498596]
[188.38807678 -148.13771057]
[188.41406250 -168.15419006]
[205.71003723 -176.51301575]
[213.06167603 -189.58792114]
[220.41333008 -202.66282654]
[213.81887817 -216.70892334]
[216.77301025 -231.94221497]
[228.13978577 -242.50515747]
[243.54846191 -244.33612061]
[257.07406616 -236.73104858]
[263.51577759 -222.61424255]
[260.39657593 -207.41390991]
[248.91587830 -196.97488403]
[233.48825073 -195.31117249]
[226.13659668 -182.23626709]
[218.78494263 -169.16136169]
[222.47251892 -159.35705566]
[219.99114990 -148.95173645]
[211.94877625 -141.56581116]
[200.93081665 -139.91093445]
[192.70404053 -127.36820221]
[184.47724915 -114.82546997]
[176.25047302 -102.28273773]
[168.02369690 -89.74000549]
[159.79692078 -77.19727325]
[153.58688354 -63.54314041]
[149.53993225 -49.09938049]
[145.49298096 -34.65562057]
[141.44602966 -20.21186256]
[137.39907837 -5.76810265]
[133.35212708 8.67565632]
[129.30517578 23.11941528]
[125.25822449 37.56317520]
[121.21126556 52.00693512]
[117.16431427 66.45069122]
[113.11736298 80.89445496]
[109.07041168 95.33821106]
[110.10611725 103.51771545]
[104.63086700 110.20153809]
[100.09314728 124.49871063]
[95.55542755 138.79588318]
[98.75544739 154.29008484]
[87.53049469 164.08038330]
[82.99277496 178.37754822]
[88.03717041 183.89807129]
[90.98740387 190.71243286]
[91.55307770 198.06376648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 11]
[5 10]
[13 88]
[14 87]
[16 85]
[17 84]
[18 83]
[19 81]
[20 80]
[21 79]
[22 78]
[23 77]
[24 76]
[25 75]
[26 74]
[27 73]
[28 72]
[29 71]
[30 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[47 60]
[48 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
