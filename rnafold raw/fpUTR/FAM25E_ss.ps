%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCCUGGACUCGGGGGCAGCGGGCCUGCUCUGAGCCCUCACCCUGGACUUGUCUCCUCUGUUCAGUUCAUGCC\
) } def
/len { sequence length } bind def

/coor [
[106.56684113 374.76031494]
[99.07029724 361.53646851]
[97.20989227 346.44979858]
[101.26934052 331.80093384]
[110.62960052 319.82369995]
[123.86330414 312.34454346]
[122.00791168 297.45974731]
[120.15251923 282.57495117]
[118.29713440 267.69012451]
[116.44174194 252.80532837]
[114.58635712 237.92051697]
[100.94364929 228.31347656]
[98.28034210 211.50340271]
[108.68538666 197.61517334]
[106.21646881 182.81974792]
[103.74755096 168.02433777]
[101.27863312 153.22891235]
[98.80970764 138.43350220]
[96.34078979 123.63807678]
[93.87187195 108.84265900]
[88.41925049 94.86878967]
[74.39386749 87.54765320]
[73.91011810 72.66090393]
[65.70589447 60.10340500]
[57.50167084 47.54590607]
[49.29745102 34.98841095]
[40.83545685 22.60315132]
[25.20742416 20.24939346]
[15.88844395 7.48490477]
[18.40729904 -8.11736774]
[31.26959991 -17.30087280]
[46.84436798 -14.61720181]
[55.89137268 -1.65852666]
[53.04318619 13.88699913]
[59.68325806 17.60609627]
[61.85494614 26.78418732]
[70.05916595 39.34168625]
[78.26338959 51.89918137]
[86.46761322 64.45668030]
[99.90618134 70.87962341]
[100.97675323 86.66456604]
[104.56196594 72.09932709]
[114.75348663 61.09328461]
[129.00065613 56.40094376]
[143.73782349 59.19666290]
[155.27668762 68.78075409]
[160.72938538 82.75458527]
[158.73127747 97.62091064]
[149.78242493 109.65910339]
[136.12248230 115.85634613]
[121.17013550 114.66165161]
[108.66728973 106.37373352]
[111.13621521 121.16915894]
[113.60513306 135.96456909]
[116.07405090 150.75999451]
[118.54296875 165.55541992]
[121.01188660 180.35083008]
[123.48080444 195.14625549]
[135.40481567 201.77195740]
[141.16635132 213.91972351]
[138.82197571 226.95910645]
[129.47116089 236.06512451]
[131.32655334 250.94993591]
[133.18194580 265.83474731]
[135.03732300 280.71954346]
[136.89271545 295.60437012]
[138.74810791 310.48916626]
[153.41288757 314.49078369]
[165.42695618 323.80368042]
[172.95826721 337.00778198]
[174.85835266 352.08947754]
[170.83746338 366.74899292]
[161.50874329 378.75079346]
[148.29476929 386.26473999]
[133.21057129 388.14498901]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 67]
[7 66]
[8 65]
[9 64]
[10 63]
[11 62]
[14 58]
[15 57]
[16 56]
[17 55]
[18 54]
[19 53]
[20 52]
[21 41]
[23 39]
[24 38]
[25 37]
[26 36]
[27 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
