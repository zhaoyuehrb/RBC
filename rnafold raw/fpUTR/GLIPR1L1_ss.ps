%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUGGUGCGGGGGCGUGGGGAAAUCGGGUUGCCCCAGCCGUUACUGGUCCGCGCAGUCAGGGCAUCCUCCGCAUCCUCCACAUCCUUCC\
) } def
/len { sequence length } bind def

/coor [
[131.19522095 303.57330322]
[137.16143799 289.47851562]
[149.00178528 279.77981567]
[145.91688538 265.10046387]
[142.83198547 250.42111206]
[139.74708557 235.74176025]
[135.65679932 221.31021118]
[130.58059692 207.19525146]
[125.50440216 193.08027649]
[120.42820740 178.96531677]
[115.35201263 164.85035706]
[110.27581787 150.73538208]
[105.19962311 136.62042236]
[100.12342072 122.50546265]
[84.71861267 119.19544220]
[74.07878113 105.81287384]
[74.34277344 87.37631989]
[59.98397827 83.03753662]
[45.62518311 78.69875336]
[31.26638794 74.35997772]
[16.90759468 70.02119446]
[1.45930803 73.43601990]
[-8.48587990 62.34807205]
[-22.84467506 58.00929260]
[-37.20346832 53.67050934]
[-54.11444092 54.87688446]
[-59.95509338 38.96075439]
[-46.27782822 28.94233513]
[-32.86468506 39.31171417]
[-18.50589180 43.65049744]
[-4.14709854 47.98927689]
[10.27415085 44.26411438]
[21.24637604 55.66239929]
[35.60517120 60.00117874]
[49.96396637 64.33995819]
[64.32276154 68.67874146]
[78.68155670 73.01752472]
[92.19608307 66.50926971]
[97.75645447 52.57792664]
[103.31681824 38.64658356]
[101.24635315 22.96143723]
[113.15030670 14.00905228]
[111.07983398 -1.67609155]
[122.98378754 -10.62847710]
[128.54415894 -24.55982018]
[134.10452271 -38.49116516]
[139.66488647 -52.42250824]
[132.10639954 -66.11203766]
[135.16642761 -81.44729614]
[147.40013123 -91.18744659]
[163.03112793 -90.73348999]
[174.67892456 -80.29975891]
[176.84381104 -64.81275940]
[168.50357056 -51.58496475]
[153.59622192 -46.86214066]
[148.03585815 -32.93079758]
[142.47549438 -18.99945450]
[136.91513062 -5.06811142]
[139.38331604 9.62057018]
[127.08164978 19.56941795]
[129.54981995 34.25809860]
[117.24816132 44.20694733]
[111.68779755 58.13829041]
[106.12742615 72.06963348]
[121.80509949 84.82644653]
[124.29897308 103.39787292]
[114.23838806 117.42926025]
[119.31458282 131.54423523]
[124.39077759 145.65919495]
[129.46697998 159.77415466]
[134.54316711 173.88912964]
[139.61936951 188.00408936]
[144.69557190 202.11904907]
[149.77175903 216.23402405]
[153.61082458 219.19526672]
[155.93025208 222.90354919]
[156.68742371 226.73654175]
[156.06491089 230.13098145]
[154.42643738 232.65686035]
[157.51133728 247.33621216]
[160.59623718 262.01556396]
[163.68113708 276.69491577]
[178.42387390 280.80712891]
[189.55894470 291.30801392]
[194.52755737 305.78460693]
[192.18800354 320.91024780]
[183.07786560 333.20919800]
[169.29058838 339.85522461]
[153.99440002 339.32113647]
[140.70425415 331.72967529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 82]
[4 81]
[5 80]
[6 79]
[7 74]
[8 73]
[9 72]
[10 71]
[11 70]
[12 69]
[13 68]
[14 67]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[23 31]
[24 30]
[25 29]
[38 64]
[39 63]
[40 62]
[42 60]
[44 58]
[45 57]
[46 56]
[47 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
