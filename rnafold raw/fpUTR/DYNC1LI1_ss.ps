%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCUGAACGCCCCAUAUCCGGGUUCCCGCCGCCUCCACCGCCACCGCCUCAGCCGCCUCGCACAUUUAGUCUUGCCGGGAGUGGUGUGAUUCCCGACCAAG\
) } def
/len { sequence length } bind def

/coor [
[259.96911621 164.04165649]
[246.35871887 157.73629761]
[232.74833679 151.43093872]
[219.13795471 145.12557983]
[205.01716614 140.06562805]
[190.49964905 136.29182434]
[175.98211670 132.51802063]
[161.46459961 128.74423218]
[146.94708252 124.97042084]
[136.25749207 130.84864807]
[124.05435944 127.70218658]
[117.10845947 116.70709229]
[102.71032715 112.50067902]
[87.73717499 113.39774323]
[73.94425964 119.29312134]
[60.15134430 125.18849182]
[54.50086212 139.94815063]
[40.03486252 146.31294250]
[25.33576775 140.50672913]
[19.12428474 125.97424316]
[25.08558083 111.33734894]
[39.68292236 105.27986145]
[54.25596619 111.39557648]
[68.04888153 105.50019836]
[81.84179688 99.60482788]
[82.84854889 92.17270660]
[68.08959961 94.85103607]
[60.98161316 81.64207458]
[71.34761047 70.80020142]
[84.86204529 77.30845642]
[85.86879730 69.87633514]
[74.14132690 60.52398682]
[58.52779007 57.96898651]
[53.40133667 43.98439407]
[37.72645569 46.00275040]
[25.26667595 36.28012466]
[23.41415977 20.58478355]
[33.26797485 8.22849369]
[48.98202133 6.54202127]
[61.23344421 16.52592087]
[62.75368118 32.25692368]
[77.52838898 34.14298248]
[83.49367523 48.79651260]
[95.22114563 58.14886093]
[105.93194580 65.37146759]
[112.31724548 74.69583130]
[114.20592499 84.32759094]
[112.06575012 92.58431244]
[106.91674042 98.10255432]
[121.31486511 102.30895996]
[139.00575256 97.48164368]
[150.72088623 110.45290375]
[165.23840332 114.22670746]
[179.75592041 118.00050354]
[194.27343750 121.77430725]
[208.79096985 125.54811096]
[203.14074707 111.65296173]
[208.71574402 97.72747040]
[222.39379883 91.57030487]
[236.51481628 96.62964630]
[243.17060852 110.07213593]
[238.63375854 124.36957550]
[225.44331360 131.51519775]
[239.05369568 137.82055664]
[252.66407776 144.12591553]
[266.27444458 150.43127441]
[272.27746582 146.21188354]
[279.26934814 144.16540527]
[286.49551392 144.47756958]
[293.18731689 147.08148193]
[298.64385986 151.66824341]
[302.30526733 157.72323608]
[303.81018066 164.58375549]
[303.03109741 171.51139832]
[315.29690552 180.14566040]
[327.56268311 188.77990723]
[339.82849121 197.41416931]
[358.13009644 198.56381226]
[365.02398682 214.62530518]
[377.54260254 222.88876343]
[390.06118774 231.15222168]
[402.57980347 239.41566467]
[415.09838867 247.67912292]
[427.61700439 255.94258118]
[440.13558960 264.20602417]
[455.56643677 260.79071045]
[468.84759521 269.35733032]
[472.09957886 284.82342529]
[463.39303589 298.01324463]
[447.89343262 301.10153198]
[434.79635620 292.25604248]
[431.87213135 276.72463989]
[419.35354614 268.46118164]
[406.83493042 260.19772339]
[394.31634521 251.93426514]
[381.79772949 243.67082214]
[369.27914429 235.40736389]
[356.76052856 227.14390564]
[344.74478149 229.25166321]
[334.21359253 222.32989502]
[331.19421387 209.67996216]
[318.92843628 201.04570007]
[306.66265869 192.41143799]
[294.39685059 183.77719116]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[5 56]
[6 55]
[7 54]
[8 53]
[9 52]
[12 50]
[13 49]
[14 25]
[15 24]
[16 23]
[31 44]
[32 43]
[34 41]
[74 104]
[75 103]
[76 102]
[77 101]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
