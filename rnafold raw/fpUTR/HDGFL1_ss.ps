%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGGUGGCGCCGGUCCCCUCGAACAGGUCGCUCAACAACUCCCGCCCAGCAGCCGCCCUUACUGCGCGCGCGCAGACUUCGGCGUCUACUUCCGGUGUGGCCCAGGCGGGGUCCGCAGAACCAGCU\
) } def
/len { sequence length } bind def

/coor [
[93.03677368 404.29718018]
[80.00698853 393.45001221]
[86.82323456 377.92663574]
[87.55924988 362.94470215]
[80.45576477 349.85311890]
[88.86088562 336.44921875]
[89.59690094 321.46728516]
[90.33291626 306.48535156]
[80.17117310 295.65603638]
[80.70417786 280.45172119]
[92.13188171 269.86657715]
[92.50000000 254.87110901]
[92.50000000 239.87110901]
[92.50000000 224.87110901]
[84.76270294 212.14382935]
[92.50000000 198.34365845]
[92.50000000 183.34365845]
[92.50000000 168.34365845]
[92.50000000 153.34365845]
[84.76270294 140.61637878]
[92.50000000 126.81621552]
[81.77384186 121.05152130]
[74.53330994 111.26086426]
[72.16310883 99.31664276]
[75.11653137 87.50311279]
[82.82874298 78.07952118]
[93.82484436 72.84808350]
[94.56085968 57.86614990]
[95.29687500 42.88421631]
[96.03289032 27.90228462]
[96.76890564 12.92035294]
[97.50492096 -2.06157875]
[87.82136536 9.39393711]
[74.18479919 15.64245796]
[59.18550491 15.49706554]
[45.67262650 8.98537731]
[36.21295547 -2.65569949]
[32.60337830 -17.21492195]
[35.52954102 -31.92673874]
[44.43560791 -43.99661636]
[57.62985992 -51.13185883]
[72.60602570 -51.97711563]
[86.51935577 -46.37182617]
[96.72698975 -35.38072586]
[101.29004669 -21.09069061]
[106.34339142 -35.21385193]
[111.39674377 -49.33701324]
[106.80937195 -68.89472198]
[121.87310791 -80.91867065]
[126.22737885 -95.27277374]
[122.82922363 -110.72473145]
[133.92788696 -120.65795135]
[138.28216553 -135.01205444]
[134.88400269 -150.46401978]
[145.98266602 -160.39724731]
[150.33694458 -174.75134277]
[154.69120789 -189.10545349]
[159.04548645 -203.45954895]
[147.64126587 -215.36251831]
[143.78771973 -231.29400635]
[148.43794250 -246.91386414]
[160.24142456 -258.01535034]
[175.93453979 -261.65798950]
[179.93522644 -276.11462402]
[183.93592834 -290.57125854]
[187.93661499 -305.02792358]
[191.93730164 -319.48455811]
[187.30108643 -335.21469116]
[198.80017090 -346.90670776]
[214.60527039 -342.53286743]
[218.45747375 -326.59255981]
[206.39395142 -315.48385620]
[202.39324951 -301.02722168]
[198.39256287 -286.57058716]
[194.39187622 -272.11395264]
[190.39117432 -257.65728760]
[200.62490845 -248.52902222]
[205.93186951 -235.81227112]
[205.21588135 -221.98474121]
[198.56039429 -209.76753235]
[187.22329712 -201.58967590]
[173.39958191 -199.10528564]
[169.04531860 -184.75117493]
[164.69104004 -170.39707947]
[160.33677673 -156.04296875]
[164.04638672 -141.61770630]
[152.63626099 -130.65779114]
[148.28199768 -116.30368042]
[151.99159241 -101.87842560]
[140.58148193 -90.91850281]
[136.22721863 -76.56439972]
[141.89064026 -67.90494537]
[141.79362488 -57.33748245]
[135.72387695 -48.41803360]
[125.51989746 -44.28366470]
[120.46655273 -30.16050339]
[115.41320801 -16.03734207]
[112.48684692 -1.32556355]
[111.75083923 13.65636826]
[111.01482391 28.63829994]
[110.27880859 43.62023163]
[109.54279327 58.60216522]
[108.80677795 73.58409882]
[122.78775787 83.99758148]
[127.83689117 100.68335724]
[121.97511292 117.10128021]
[107.50000000 126.81621552]
[115.23729706 140.61637878]
[107.50000000 153.34365845]
[107.50000000 168.34365845]
[107.50000000 183.34365845]
[107.50000000 198.34365845]
[115.23729706 212.14382935]
[107.50000000 224.87110901]
[107.50000000 239.87110901]
[107.50000000 254.87110901]
[110.54708099 260.93099976]
[110.06774902 266.72781372]
[107.11381531 270.60260010]
[117.44896698 282.25689697]
[116.48912048 297.44021606]
[105.31484985 307.22137451]
[104.57883453 322.20330811]
[103.84281921 337.18524170]
[110.89365387 351.34844971]
[102.54117584 363.68072510]
[101.80516052 378.66265869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 127]
[4 126]
[6 124]
[7 123]
[8 122]
[11 119]
[12 116]
[13 115]
[14 114]
[16 112]
[17 111]
[18 110]
[19 109]
[21 107]
[27 103]
[28 102]
[29 101]
[30 100]
[31 99]
[32 98]
[45 97]
[46 96]
[47 95]
[49 91]
[50 90]
[52 88]
[53 87]
[55 85]
[56 84]
[57 83]
[58 82]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
