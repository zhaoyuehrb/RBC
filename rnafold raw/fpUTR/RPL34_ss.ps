%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGUCUGCAGGUAUGGAUGUUGUUCUCUUUUCCCUGUCUUUAUUUCCUUACCAAUCGGCUGCCAUCCGAGGAGCUGAGGAAGCCUAGAGCUCUCAGAAGCAGUCCUUUGAGCUGGUGUAGGGGCACUCAGA\
) } def
/len { sequence length } bind def

/coor [
[99.06315613 154.83047485]
[91.79049683 154.22050476]
[84.66323853 152.65019226]
[77.80761719 150.14735413]
[71.34506989 146.75633240]
[65.39004517 142.53715515]
[60.04801941 137.56459045]
[55.41361237 131.92668152]
[42.13811111 138.90959167]
[28.86260796 145.89251709]
[15.58710575 152.87542725]
[2.31160402 159.85833740]
[0.13610995 176.58619690]
[-11.44088078 188.62646484]
[-27.74407768 191.40071106]
[-42.35624695 184.01654053]
[-55.46311569 191.31105042]
[-68.56998444 198.60557556]
[-70.30100250 214.02578735]
[-80.79003906 225.46081543]
[-96.00384521 228.51364136]
[-110.09240723 222.01039124]
[-117.63837433 208.45170593]
[-115.74017334 193.05116272]
[-105.12770844 181.73060608]
[-89.88168335 178.84300232]
[-75.86450195 185.49870300]
[-62.75762939 178.20419312]
[-49.65076065 170.90966797]
[-49.27070618 157.51170349]
[-42.24304199 145.97117615]
[-30.32407188 139.37908936]
[-16.59626961 139.56326294]
[-4.67130709 146.58282471]
[8.60419464 139.59991455]
[21.87969589 132.61700439]
[35.15519714 125.63409424]
[48.43070221 118.65118408]
[46.05817795 109.87619781]
[45.16779327 100.82984161]
[45.78401566 91.76068878]
[47.88990784 82.91791534]
[51.42760849 74.54450989]
[56.29991150 66.87052917]
[62.37294769 60.10683823]
[69.47985077 54.43927383]
[77.42533875 50.02356339]
[85.99110413 46.98103714]
[94.94178772 45.39529419]
[104.03145599 45.30990219]
[113.01034546 46.72721100]
[121.63175964 49.60827255]
[129.65881348 53.87392807]
[139.42071533 42.48511505]
[149.18263245 31.09630203]
[148.15626526 15.55331898]
[158.21847534 4.14250517]
[173.04266357 3.25981092]
[182.80456543 -8.12900257]
[192.56648254 -19.51781654]
[202.32839966 -30.90662956]
[212.09030151 -42.29544449]
[221.85221863 -53.68425751]
[221.65486145 -66.64321899]
[230.09973145 -75.93818665]
[242.21665955 -76.91519165]
[252.24484253 -88.07026672]
[255.71687317 -103.50579834]
[269.97964478 -107.79796600]
[280.00781250 -118.95304108]
[290.03601074 -130.10810852]
[293.49185181 -138.66911316]
[300.43518066 -141.40464783]
[310.72402954 -152.31974792]
[321.01287842 -163.23484802]
[331.30172729 -174.14996338]
[335.07443237 -192.12828064]
[352.00103760 -196.60346985]
[362.02923584 -207.75854492]
[372.05740356 -218.91360474]
[378.15008545 -234.73497009]
[395.03976440 -233.26017761]
[398.29812622 -216.62228394]
[383.21246338 -208.88543701]
[373.18429565 -197.73036194]
[363.15612793 -186.57528687]
[363.47015381 -174.42309570]
[355.12359619 -165.03974915]
[342.21685791 -163.86111450]
[331.92800903 -152.94599915]
[321.63912964 -142.03089905]
[311.35028076 -131.11579895]
[301.19107056 -120.07993317]
[291.16290283 -108.92485809]
[281.13470459 -97.76979065]
[278.37997437 -83.13214874]
[263.39990234 -78.04208374]
[253.37173462 -66.88701630]
[250.71763611 -49.58114243]
[233.24102783 -43.92234421]
[223.47912598 -32.53353119]
[213.71720886 -21.14471626]
[203.95529175 -9.75590420]
[194.19338989 1.63290966]
[184.43147278 13.02172279]
[185.82627869 27.80651474]
[176.08856201 39.49545288]
[160.57144165 40.85821533]
[150.80953979 52.24702835]
[141.04762268 63.63584137]
[153.96553040 90.25418091]
[151.17416382 119.70950317]
[133.48608398 143.42742920]
[140.93487549 156.44723511]
[148.38368225 169.46704102]
[155.98573303 182.39796448]
[163.73995972 195.23822021]
[171.49420166 208.07846069]
[179.24844360 220.91870117]
[193.86260986 228.35900879]
[194.45587158 244.74742126]
[180.41793823 253.22494507]
[166.18981934 245.07063293]
[166.40818787 228.67292786]
[158.65396118 215.83268738]
[150.89971924 202.99244690]
[143.14549255 190.15220642]
[136.93563843 186.01327515]
[135.36387634 176.91584778]
[127.91507721 163.89604187]
[120.46627045 150.87623596]
[113.52915192 153.14340210]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[16 29]
[17 28]
[18 27]
[53 110]
[54 109]
[55 108]
[58 105]
[59 104]
[60 103]
[61 102]
[62 101]
[63 100]
[66 98]
[67 97]
[69 95]
[70 94]
[71 93]
[73 92]
[74 91]
[75 90]
[76 89]
[78 86]
[79 85]
[80 84]
[113 131]
[114 130]
[115 129]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
