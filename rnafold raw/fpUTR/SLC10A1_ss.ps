%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:01:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUAUUUGCCCAGAGCUUUUGUCCAGAAACUCUCUGUCCUGAGAGGUGAUUAAAGAAGGCAUCCAGCAAGAACUGCACAAGAAACGGAGUCAGCCGGAGAACAAGGAGUGGUCUUCCACUGCCUCACAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[-128.69317627 381.28579712]
[-126.05373383 396.05172729]
[-129.14920044 410.72885132]
[-137.52699280 423.17123413]
[-149.96218872 431.55966187]
[-164.63667297 434.66766357]
[-179.40487671 432.04086304]
[-192.10755920 424.06326294]
[-200.88746643 411.90130615]
[-204.46089172 397.33316040]
[-202.30537415 382.48886108]
[-194.73385620 369.53622437]
[-208.36512756 375.79629517]
[-221.99638367 382.05636597]
[-235.62765503 388.31643677]
[-249.25892639 394.57650757]
[-254.82945251 409.12322998]
[-268.74267578 415.27767944]
[-282.57641602 409.87738037]
[-296.20767212 416.13745117]
[-309.83895874 422.39752197]
[-315.09494019 437.30224609]
[-329.38656616 444.04943848]
[-344.23486328 438.63616943]
[-350.83059692 424.27401733]
[-345.26065063 409.48376465]
[-330.82952881 403.04025269]
[-316.09902954 408.76626587]
[-302.46774292 402.50619507]
[-288.83648682 396.24612427]
[-283.91781616 382.23388672]
[-270.18295288 375.69110107]
[-255.51899719 380.94525146]
[-241.88774109 374.68518066]
[-228.25646973 368.42510986]
[-214.62519836 362.16503906]
[-200.99392700 355.90493774]
[-188.55836487 347.51705933]
[-177.64776611 337.22341919]
[-166.73716736 326.92980957]
[-155.82655334 316.63616943]
[-144.91595459 306.34255981]
[-140.96812439 291.98065186]
[-125.62059021 288.13830566]
[-114.70998383 277.84469604]
[-103.79937744 267.55105591]
[-92.88877106 257.25744629]
[-81.97817230 246.96382141]
[-86.30963135 235.85176086]
[-86.60180664 223.89408875]
[-82.79612732 212.51768494]
[-75.32441711 203.08815002]
[-65.06005096 196.74588013]
[-53.21588135 194.26814270]
[-41.20097733 195.97392273]
[-30.45296669 201.68307495]
[-18.85089302 192.17559814]
[-7.24881935 182.66813660]
[4.35325480 173.16067505]
[15.95532894 163.65321350]
[27.55740166 154.14575195]
[32.93139267 135.62730408]
[52.77342224 132.43075562]
[63.92059326 122.39379883]
[75.06776428 112.35684204]
[70.13220978 84.12931061]
[94.68758392 60.53729248]
[97.80625916 45.86507797]
[100.92493439 31.19286537]
[93.42832184 17.00905800]
[99.97541809 2.36272359]
[115.54384613 -1.51072156]
[128.19084167 8.36009693]
[128.21470642 24.40313339]
[115.59714508 34.31154251]
[112.47846985 48.98375320]
[109.35979462 63.65596771]
[115.26987457 68.27342987]
[124.50479889 56.45326996]
[133.73971558 44.63310623]
[142.97483826 32.81309891]
[154.79469299 42.04841232]
[145.55987549 53.86803055]
[136.32496643 65.68819427]
[127.09003448 77.50835419]
[133.00012207 82.12581635]
[146.48202515 75.55024719]
[159.96394348 68.97467804]
[164.87168884 53.95170975]
[179.00244141 46.87377167]
[193.97268677 51.94007874]
[200.90083313 66.14488220]
[195.67652893 81.06071472]
[181.39927673 87.83829498]
[166.53950500 82.45658875]
[153.05760193 89.03215790]
[139.57568359 95.60772705]
[138.11476135 105.33405304]
[134.38327026 114.07798004]
[128.77061462 121.34040833]
[121.76731110 126.75180817]
[113.92574310 130.09008789]
[105.81861877 131.28735352]
[97.99806976 130.42555237]
[90.95837402 127.72161865]
[85.10472870 123.50401306]
[73.95755005 133.54096985]
[62.81037903 143.57792664]
[62.86097336 154.57005310]
[56.93105698 163.56234741]
[47.21395111 167.67289734]
[37.06486893 165.74781799]
[25.46279335 175.25527954]
[13.86071968 184.76275635]
[2.25864530 194.27021790]
[-9.34342861 203.77767944]
[-20.94550323 213.28514099]
[-17.29964066 231.27565002]
[-23.18134117 248.57522583]
[-36.91033173 260.50491333]
[-54.69617462 263.88323975]
[-71.68454742 257.87442017]
[-82.59514618 268.16806030]
[-93.50575256 278.46166992]
[-104.41635895 288.75531006]
[-115.32696533 299.04891968]
[-120.05518341 314.14709473]
[-134.62232971 317.25317383]
[-145.53292847 327.54678345]
[-156.44354248 337.84042358]
[-167.35414124 348.13403320]
[-178.26473999 358.42767334]
[-163.42227173 356.25946045]
[-148.85108948 359.82043457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 37]
[13 36]
[14 35]
[15 34]
[16 33]
[19 30]
[20 29]
[21 28]
[38 132]
[39 131]
[40 130]
[41 129]
[42 128]
[44 126]
[45 125]
[46 124]
[47 123]
[48 122]
[56 117]
[57 116]
[58 115]
[59 114]
[60 113]
[61 112]
[63 108]
[64 107]
[65 106]
[67 77]
[68 76]
[69 75]
[86 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
