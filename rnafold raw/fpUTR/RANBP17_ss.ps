%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUGCGGACGCGAAGCCUGGCUGAGGCUGCGAAGGACGAGCGGCGCAGGGACCCCGCGGGCGUCUGGGGCUUCCGCGGCGCCCGCCUCUGCUCCCUCCCCUCGGGCGCUGGGUGCCGACCGGCCGGCUGGCCGGCGCCGCCUCCUGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[76.80318451 296.96511841]
[70.21081543 306.09698486]
[61.15511322 312.74856567]
[50.52017593 316.29083252]
[39.33805847 316.39727783]
[34.20775604 330.49267578]
[37.58675003 346.53991699]
[25.19991112 357.28692627]
[9.78975296 351.67810059]
[7.20892763 335.48330688]
[20.11236572 325.36236572]
[25.24266815 311.26696777]
[12.34021568 297.55853271]
[8.09683609 279.13458252]
[13.75102234 261.00881958]
[27.83641434 248.15603638]
[46.56101990 244.14689636]
[50.51762772 229.67813110]
[54.47423935 215.20936584]
[58.43085098 200.74060059]
[62.38745880 186.27183533]
[60.80786514 181.70520020]
[62.12432861 176.09674072]
[66.81494141 171.29667664]
[71.36223602 157.00254822]
[75.90952301 142.70840454]
[80.45681763 128.41427612]
[85.00410461 114.12014771]
[83.18825531 104.35761261]
[86.29567719 96.52855682]
[92.01799011 92.56694031]
[86.59936523 78.57985687]
[81.18074036 64.59277344]
[75.12590027 57.66928864]
[75.79769135 50.26247406]
[70.66738892 36.16708755]
[59.29747772 29.99224091]
[55.33410263 18.09841919]
[60.39340210 7.06820202]
[55.55358505 -7.12955046]
[50.71376801 -21.32730293]
[44.94827271 -28.49353409]
[45.92358780 -35.86651993]
[41.37630081 -50.16065216]
[29.81954193 -60.96583176]
[33.33443451 -75.43976593]
[28.78714371 -89.73389435]
[24.23985291 -104.02803040]
[19.69256401 -118.32215881]
[15.14527321 -132.61628723]
[10.59798336 -146.91041565]
[1.21250057 -135.20944214]
[-13.78655815 -135.04141235]
[-23.43181992 -146.52919006]
[-20.67063141 -161.27285767]
[-7.52198219 -168.49179077]
[6.39935684 -162.90794373]
[3.34096122 -177.59283447]
[0.28256583 -192.27772522]
[-2.77582955 -206.96263123]
[-5.83422518 -221.64752197]
[-8.89262104 -236.33242798]
[-11.95101643 -251.01731873]
[-15.00941181 -265.70220947]
[-18.06780624 -280.38711548]
[-31.00346756 -289.06503296]
[-33.89592361 -304.00119019]
[-25.54312515 -316.27987671]
[-28.60152054 -330.96478271]
[-39.92219162 -342.82962036]
[-35.04825974 -358.48773193]
[-18.99360657 -361.83142090]
[-8.27388382 -349.42095947]
[-13.91662312 -334.02319336]
[-10.85822773 -319.33828735]
[1.70197713 -311.41510010]
[5.01281691 -296.56610107]
[-3.38290954 -283.44552612]
[-0.32451400 -268.76062012]
[2.73388147 -254.07571411]
[5.79227686 -239.39082336]
[8.85067272 -224.70591736]
[11.90906811 -210.02102661]
[14.96746349 -195.33612061]
[18.02585983 -180.65122986]
[21.08425522 -165.96633911]
[24.89211273 -151.45770264]
[29.43940353 -137.16357422]
[33.98669434 -122.86944580]
[38.53398514 -108.57531738]
[43.08127213 -94.28118896]
[47.62856293 -79.98706055]
[58.86006927 -70.20428467]
[55.67042923 -54.70794296]
[60.21772003 -40.41381073]
[64.91152191 -26.16711998]
[69.75133514 -11.96936703]
[74.59115601 2.22838593]
[88.40059662 13.01466084]
[84.76277924 31.03678322]
[89.89308167 45.13217163]
[95.16782379 59.17414856]
[100.58644867 73.16123199]
[106.00507355 87.14831543]
[116.98587799 97.36702728]
[131.32594299 101.76732635]
[145.66600037 106.16762543]
[160.00605774 110.56792450]
[174.34611511 114.96822357]
[188.68618774 119.36852264]
[203.02624512 123.76882935]
[217.36630249 128.16912842]
[232.82908630 124.82056427]
[242.72665405 135.95103455]
[257.11114502 140.20388794]
[271.53851318 144.30883789]
[285.96591187 148.41377258]
[300.39328003 152.51872253]
[314.07656860 144.61029053]
[329.32241821 148.77438354]
[337.08572388 162.54051208]
[332.76068115 177.74148560]
[318.91323853 185.35882568]
[303.75885010 180.87330627]
[296.28833008 166.94610596]
[281.86096191 162.84115601]
[267.43356323 158.73622131]
[253.00617981 154.63127136]
[245.66673279 155.83317566]
[238.32635498 150.29110718]
[223.88926697 153.95440674]
[212.96600342 142.50918579]
[198.62594604 138.10888672]
[184.28588867 133.70858765]
[169.94581604 129.30828857]
[155.60575867 124.90798950]
[141.26570129 120.50768280]
[126.92563629 116.10738373]
[112.58557892 111.70708466]
[99.29823303 118.66744232]
[94.75094604 132.96157837]
[90.20365143 147.25570679]
[85.65636444 161.54983521]
[81.10907745 175.84396362]
[76.85622406 190.22843933]
[72.89962006 204.69720459]
[68.94300842 219.16596985]
[64.98639679 233.63475037]
[61.02978516 248.10351562]
[70.19743347 254.87348938]
[76.82877350 264.10903931]
[80.29683685 274.90881348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 12]
[6 11]
[17 149]
[18 148]
[19 147]
[20 146]
[21 145]
[24 144]
[25 143]
[26 142]
[27 141]
[28 140]
[31 104]
[32 103]
[33 102]
[35 101]
[36 100]
[39 98]
[40 97]
[41 96]
[43 95]
[44 94]
[46 92]
[47 91]
[48 90]
[49 89]
[50 88]
[51 87]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
[62 81]
[63 80]
[64 79]
[65 78]
[68 75]
[69 74]
[105 139]
[106 138]
[107 137]
[108 136]
[109 135]
[110 134]
[111 133]
[112 132]
[114 130]
[115 128]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
