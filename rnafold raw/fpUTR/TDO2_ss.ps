%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGGUCAAUGAUAGCAUCUGCCUAGAGUCAAACCUCCGUGCUUCUCAGACAGUGCCUUUUCACC\
) } def
/len { sequence length } bind def

/coor [
[75.27362823 276.82263184]
[73.17055511 261.97079468]
[71.06748199 247.11897278]
[68.96440887 232.26713562]
[66.86133575 217.41529846]
[64.75826263 202.56346130]
[54.64376831 213.64031982]
[40.23400879 217.80671692]
[25.76891327 213.83670044]
[15.50469971 202.89842224]
[12.46151352 188.21035767]
[17.53478241 174.09434509]
[29.23174667 164.70387268]
[44.11068726 162.80198669]
[57.79361725 168.94831848]
[66.25396729 181.33287048]
[70.41856384 166.92259216]
[74.58316803 152.51231384]
[73.37065125 144.95144653]
[79.29547882 137.53276062]
[84.13094330 123.33352661]
[88.96640778 109.13429260]
[86.44072723 95.38246918]
[96.83435822 86.03024292]
[101.66982269 71.83100891]
[101.50409698 62.33821487]
[107.07907867 57.08879471]
[112.57477570 43.13181686]
[118.07048035 29.17483711]
[108.62791443 17.14216423]
[106.49009705 2.09801126]
[112.13201904 -11.90324116]
[123.94559479 -21.13879585]
[138.69642639 -23.20720291]
[144.19213867 -37.16418076]
[141.23226929 -53.29400635]
[153.89482117 -63.71473312]
[169.15365601 -57.70641327]
[171.31179810 -41.44989014]
[158.14910889 -31.66848183]
[152.65341187 -17.71150208]
[162.03385925 -6.14116001]
[164.37898254 8.66952419]
[158.96006775 22.75858688]
[147.13896179 32.30627441]
[132.02746582 34.67053604]
[126.53176117 48.62751770]
[121.03605652 62.58449554]
[115.86905670 76.66647339]
[111.03359222 90.86570740]
[113.55927277 104.61753082]
[103.16564178 113.96975708]
[98.33017731 128.16899109]
[93.49471283 142.36822510]
[88.99344635 156.67691040]
[84.82884216 171.08718872]
[80.66424561 185.49746704]
[79.61009979 200.46038818]
[81.71317291 215.31222534]
[83.81624603 230.16406250]
[85.91931915 245.01589966]
[88.02239227 259.86773682]
[90.12546539 274.71957397]
[100.65577698 287.29113770]
[94.78021240 302.60159302]
[78.54305267 304.90084839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[5 59]
[6 58]
[16 57]
[17 56]
[18 55]
[20 54]
[21 53]
[22 52]
[24 50]
[25 49]
[27 48]
[28 47]
[29 46]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
