%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUUCAAUGAACAUGACUUCUGGAGUCAAGGUUGUUGGGCCAUUCCCCCCGUUCCACUCACUGGGAAUAUAAAUAGCACCCACAGCGCAGAACACAGAGCCAGAGAGCUGGAAGUGAGAGCAGAUCCCUAACC\
) } def
/len { sequence length } bind def

/coor [
[4.66946793 249.50660706]
[12.84371185 262.08361816]
[15.69822979 276.80950928]
[12.81541061 291.52987671]
[4.61700583 304.09118652]
[-7.69757462 312.65570068]
[-22.32673073 315.97048950]
[-37.13024521 313.55059814]
[-49.94239426 305.75003052]
[-58.88878250 293.70999146]
[-62.66057205 279.19195557]
[-60.70595551 264.31985474]
[-53.31065750 251.26916504]
[-66.83583069 257.75527954]
[-80.36100769 264.24139404]
[-90.34977722 279.66238403]
[-107.75581360 277.74386597]
[-121.12871552 284.53839111]
[-134.50161743 291.33294678]
[-147.87451172 298.12747192]
[-161.24740601 304.92199707]
[-174.62030029 311.71652222]
[-186.00250244 324.28161621]
[-201.22746277 316.82260132]
[-198.27464294 300.12777710]
[-181.41482544 298.34362793]
[-168.04193115 291.54910278]
[-154.66903687 284.75457764]
[-141.29614258 277.96002197]
[-127.92324066 271.16549683]
[-114.55034637 264.37097168]
[-110.46926117 252.92524719]
[-99.30960083 247.17604065]
[-86.84711456 250.71621704]
[-73.32194519 244.23010254]
[-59.79676819 237.74398804]
[-47.48214722 229.17951965]
[-36.69470596 218.75689697]
[-25.90726471 208.33427429]
[-15.11982250 197.91165161]
[-4.33238077 187.48902893]
[6.45506096 177.06640625]
[6.99440050 164.92683411]
[15.97324753 156.15348816]
[28.92585182 155.87713623]
[39.94944000 145.70460510]
[50.97303009 135.53207397]
[51.31211853 120.68550110]
[62.34669495 110.21206665]
[77.91683960 110.66839600]
[88.82307434 100.37014008]
[99.49031067 89.82452393]
[99.56970978 74.24788666]
[110.41642761 63.58002472]
[125.26587677 63.75171280]
[135.81149292 53.08448029]
[146.35711670 42.41724777]
[156.90274048 31.75001335]
[167.44836426 21.08278084]
[177.87098694 10.29533863]
[188.16925049 -0.61089355]
[198.46749878 -11.51712608]
[202.31636047 -26.86303139]
[216.67993164 -30.80475807]
[226.97817993 -41.71099091]
[237.27644348 -52.61722183]
[247.57470703 -63.52345276]
[239.43652344 -76.20634460]
[234.57333374 -90.45982361]
[233.26371765 -105.45395660]
[235.57946777 -120.31678009]
[241.38168335 -134.18501282]
[250.32907104 -146.25418091]
[261.89807129 -155.82530212]
[275.41342163 -162.34538269]
[290.08758545 -165.43933105]
[305.06671143 -164.93153381]
[319.48022461 -160.85586548]
[332.49142456 -153.45339966]
[342.78970337 -164.35961914]
[346.63854980 -179.70553589]
[361.00210571 -183.64726257]
[361.98144531 -199.66038513]
[375.19387817 -208.76045227]
[390.50399780 -203.96664429]
[396.16714478 -188.95635986]
[387.83905029 -175.24423218]
[371.90835571 -173.34899902]
[368.79608154 -158.78318787]
[353.69592285 -154.06137085]
[343.39767456 -143.15513611]
[351.53347778 -130.58943176]
[356.42831421 -116.43313599]
[357.79351807 -101.50772095]
[355.54544067 -86.68038177]
[349.81045532 -72.81365967]
[340.91793823 -60.71526718]
[329.38125610 -51.09103775]
[315.86825562 -44.50374985]
[301.16253662 -41.34021378]
[286.11798096 -41.78856659]
[271.60928345 -45.82708359]
[258.48092651 -53.22519684]
[248.18267822 -42.31896591]
[237.88441467 -31.41273308]
[227.58616638 -20.50650024]
[224.47390747 -5.94068098]
[209.37373352 -1.21886909]
[199.07546997 9.68736362]
[188.77722168 20.59359550]
[186.45175171 27.67878914]
[178.11560059 31.62840271]
[167.56997681 42.29563522]
[157.02435303 52.96286774]
[146.47872925 63.63010025]
[135.93310547 74.29733276]
[136.27503967 89.14383698]
[125.73223877 100.11215210]
[110.15753937 100.37014008]
[107.14522552 107.92924500]
[99.24569702 111.15758514]
[95.20076752 119.44790649]
[88.08937836 121.69198608]
[87.29592896 137.24859619]
[75.97152710 147.40795898]
[61.14556503 146.55566406]
[50.12197495 156.72819519]
[39.09838867 166.90072632]
[34.07950211 184.57537842]
[16.87768555 187.85385132]
[6.09024334 198.27647400]
[-4.69719839 208.69909668]
[-15.48464012 219.12171936]
[-26.27208138 229.54434204]
[-37.05952454 239.96696472]
[-22.25138474 237.57551575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 36]
[14 35]
[15 34]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[37 135]
[38 134]
[39 133]
[40 132]
[41 131]
[42 130]
[45 128]
[46 127]
[47 126]
[50 123]
[51 121]
[52 119]
[55 116]
[56 115]
[57 114]
[58 113]
[59 112]
[60 110]
[61 109]
[62 108]
[64 106]
[65 105]
[66 104]
[67 103]
[79 91]
[80 90]
[82 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
