%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCGCAGUCUCCCCAGGUCCGCCCAGCAGCCGCGCUUCAGCCAGAAUACUGGGAUCUUCAGUGGCAGGAGGAGUAAUCAGAAGACGGAG\
) } def
/len { sequence length } bind def

/coor [
[68.47861481 333.90194702]
[55.65956879 322.80651855]
[62.77271271 307.41693115]
[63.79634857 292.45190430]
[64.81998444 277.48687744]
[62.07794952 270.45196533]
[66.14263916 262.03115845]
[63.64238739 254.90675354]
[67.99220276 246.62963867]
[70.03470612 231.76934814]
[72.07720184 216.90905762]
[74.11970520 202.04876709]
[68.18750000 188.38647461]
[77.73185730 175.76840210]
[70.70462799 168.00047302]
[69.19576263 157.41032410]
[73.96784210 147.58898926]
[83.61051941 142.00749207]
[86.66236115 127.32123566]
[89.71420288 112.63497162]
[83.88545990 102.40039062]
[86.47829437 90.91134644]
[96.13766479 84.17209625]
[99.68913269 69.59858704]
[102.99127197 54.96657181]
[106.04310608 40.28031158]
[97.64152527 27.16348267]
[100.94573975 12.31299973]
[113.50240326 4.38420963]
[108.73466492 -10.70151997]
[118.89957428 -21.58838844]
[121.95141602 -36.27465057]
[125.00325012 -50.96091080]
[128.05509949 -65.64717102]
[131.10693359 -80.33343506]
[117.58688354 -88.57479095]
[107.69338989 -100.90312195]
[102.59243011 -115.83655548]
[102.87528229 -131.58798218]
[108.49008942 -146.27888489]
[118.75018311 -158.16340637]
[132.41802979 -165.83580017]
[147.85444641 -168.39669800]
[150.40310669 -183.17858887]
[152.95176697 -197.96047974]
[155.50041199 -212.74238586]
[149.32849121 -227.93577576]
[159.61254883 -240.70957947]
[175.77325439 -237.92318726]
[181.18583679 -222.44300842]
[170.28230286 -210.19372559]
[167.73365784 -195.41183472]
[165.18499756 -180.62994385]
[162.63633728 -165.84803772]
[175.21661377 -159.12980652]
[185.09976196 -148.81782532]
[191.29663086 -135.92480469]
[193.18092346 -121.72274780]
[190.55259705 -107.61743164]
[183.65895081 -95.00927734]
[173.17143250 -85.15430450]
[160.12025452 -79.03900146]
[145.79319763 -77.28159332]
[142.74134827 -62.59533310]
[139.68951416 -47.90907288]
[136.63768005 -33.22280884]
[133.58583069 -18.53654861]
[138.57185364 -4.50127888]
[128.18865967 7.43604994]
[136.54693604 19.71101570]
[133.66114807 34.64844894]
[120.72937012 43.33214951]
[117.67752838 58.01841354]
[119.43610382 65.36115265]
[114.26264191 73.15005493]
[110.71117401 87.72356415]
[115.89264679 103.58663177]
[104.40045929 115.68681335]
[101.34862518 130.37307739]
[98.29678345 145.05934143]
[105.61573792 163.68977356]
[92.59214783 177.81089783]
[98.37825775 192.53610229]
[88.97999573 204.09126282]
[86.93749237 218.95155334]
[84.89499664 233.81184387]
[82.85249329 248.67213440]
[81.06400299 263.56512451]
[79.78501892 278.51049805]
[78.76138306 293.47552490]
[77.73774719 308.44058228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 91]
[4 90]
[5 89]
[7 88]
[9 87]
[10 86]
[11 85]
[12 84]
[14 82]
[18 80]
[19 79]
[20 78]
[23 76]
[24 75]
[25 73]
[26 72]
[29 69]
[31 67]
[32 66]
[33 65]
[34 64]
[35 63]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
