%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGACCAGCUCAAGGAUCCCAAGGCCCAACUCCCCGAACCACUCAGGGUCCUGUGGACAGCUCACCUAGCUGCA\
) } def
/len { sequence length } bind def

/coor [
[82.32949829 134.44987488]
[85.78665924 119.85436249]
[78.31161499 120.46568298]
[69.20043182 132.38148499]
[60.08925629 144.29730225]
[60.77654648 160.32562256]
[48.57952499 170.74734497]
[32.85470200 167.56779480]
[25.66481400 153.22607422]
[32.52532959 138.72390747]
[48.17345047 135.18611145]
[57.28462601 123.27030945]
[66.39580536 111.35450745]
[69.20563507 101.76369476]
[74.36480713 94.49787903]
[80.84753418 90.02758789]
[87.57006073 88.45060730]
[93.51277924 89.50095367]
[97.83189392 92.59513855]
[98.44372559 77.60762787]
[99.05555725 62.62010574]
[99.36153412 47.62322998]
[99.36153412 32.62322998]
[91.62422943 18.82305527]
[99.36153412 6.09578419]
[99.36153412 -8.90421581]
[99.36153412 -23.90421677]
[99.36153412 -38.90421677]
[99.36153412 -53.90421677]
[84.96836090 -58.56165695]
[72.72005463 -67.44052124]
[63.81658554 -79.67095184]
[59.13022232 -94.05473328]
[59.12008667 -109.18269348]
[63.78717041 -123.57273865]
[72.67424011 -135.81509399]
[84.91063690 -144.71035767]
[99.29755402 -149.38708496]
[114.42551422 -149.38708496]
[128.81243896 -144.71035767]
[141.04882812 -135.81509399]
[149.93589783 -123.57273865]
[154.60298157 -109.18269348]
[154.59284973 -94.05473328]
[149.90647888 -79.67095184]
[141.00300598 -67.44052124]
[128.75469971 -58.56165695]
[114.36153412 -53.90421677]
[114.36153412 -38.90421677]
[114.36153412 -23.90421677]
[114.36153412 -8.90421581]
[114.36153412 6.09578419]
[122.09883118 18.82305527]
[114.36153412 32.62322998]
[114.36153412 47.62322998]
[117.60243225 54.50437546]
[114.04307556 63.23193741]
[113.43124390 78.21945190]
[112.81941223 93.20697021]
[118.48891449 107.09426117]
[129.41506958 117.37138367]
[140.34120178 127.64850616]
[151.26734924 137.92562866]
[162.19349670 148.20275879]
[178.20849609 149.15109253]
[187.33412170 162.34588623]
[182.56996155 177.66523743]
[167.57067871 183.35743713]
[153.84243774 175.05592346]
[151.91638184 159.12890625]
[140.99023438 148.85177612]
[130.06408691 138.57466125]
[119.13793945 128.29753113]
[108.21179199 118.02040863]
[100.73674774 118.63172150]
[106.51920319 132.47236633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[5 11]
[19 59]
[20 58]
[21 57]
[22 55]
[23 54]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
