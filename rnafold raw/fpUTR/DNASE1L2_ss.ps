%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAGUCCUGUGUCGGACACGCCCGCAGCCUGGACCCGGGAUCCCCAUCCCCCUAGGAUCUCUGAGCCUCGGGCCUCUGCACCCACAUCCAAGGCGGCAGCGUCUGUCCCUCCCAGCCUCUCGCUCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[172.48176575 154.27340698]
[158.65745544 148.45204163]
[144.83314514 142.63066101]
[131.00883484 136.80928040]
[117.18451691 130.98789978]
[102.82405090 135.32113647]
[94.52708435 147.81755066]
[86.23011780 160.31396484]
[77.93315125 172.81037903]
[81.30710602 188.25032043]
[72.70494843 201.50846863]
[57.23019791 204.71899414]
[44.06373596 195.97715759]
[41.01699448 180.46931458]
[49.89755630 167.39601135]
[65.43673706 164.51341248]
[73.73370361 152.01699829]
[82.03067017 139.52058411]
[90.32763672 127.02416992]
[79.37658691 117.15843964]
[75.36904144 103.99516296]
[78.50354004 91.60431671]
[67.06326294 81.90277100]
[55.62298584 72.20121765]
[44.18270493 62.49966812]
[32.74242783 52.79812241]
[17.20509148 53.90666580]
[5.74122429 43.90494537]
[4.78014851 29.08563614]
[-6.66012907 19.38408661]
[-18.21334267 9.81730843]
[-36.42694473 7.41915751]
[-42.17219162 -9.12045002]
[-54.05462646 -18.27510452]
[-65.93706512 -27.42975807]
[-81.59119415 -29.72294617]
[-86.95111084 -43.61972809]
[-98.83354950 -52.77438354]
[-111.13202667 -61.36201859]
[-123.81950378 -69.36375427]
[-136.50698853 -77.36549377]
[-149.19447327 -85.36723328]
[-161.88194275 -93.36897278]
[-178.28079224 -93.46858215]
[-186.15769958 -107.85211945]
[-177.40959167 -121.72304535]
[-161.03576660 -120.81213379]
[-153.88020325 -106.05645752]
[-141.19273376 -98.05471802]
[-128.50524902 -90.05297852]
[-115.81776428 -82.05123901]
[-103.13028717 -74.04949951]
[-100.29184723 -74.60644531]
[-97.05283356 -74.01860046]
[-93.86887360 -72.12397766]
[-91.24667358 -68.93611145]
[-89.67889404 -64.65682220]
[-77.79645538 -55.50216675]
[-62.99223709 -53.86378098]
[-56.78240967 -39.31219482]
[-44.89997482 -30.15754128]
[-33.01753616 -21.00288773]
[-20.92524338 -22.23649025]
[-10.93706703 -14.62612820]
[-8.78264999 -1.84725463]
[-1.53569376 -0.07162636]
[3.04141951 7.94380903]
[14.48169708 17.64535713]
[29.25890732 16.17238045]
[40.99917603 25.84815979]
[42.44397736 41.35784531]
[53.88425446 51.05939102]
[65.32453156 60.76094055]
[76.76480865 70.46248627]
[88.20508575 80.16403961]
[103.67336273 75.79302979]
[119.23851776 82.67396545]
[127.26769257 98.74244690]
[123.00589752 117.16358948]
[136.83021545 122.98497009]
[150.65452576 128.80635071]
[164.47883606 134.62773132]
[178.30314636 140.44909668]
[184.77574158 132.94819641]
[192.85893250 127.24384308]
[202.06871033 123.66921997]
[211.85559082 122.43023682]
[221.63748169 123.59369659]
[230.83422852 127.08368683]
[238.90206909 132.68653870]
[245.36573792 140.06385803]
[249.84651184 148.77297974]
[252.08436584 158.29354858]
[251.95304871 168.05854797]
[249.46722412 177.48811340]
[262.15472412 185.48985291]
[274.84219360 193.49159241]
[287.52966309 201.49333191]
[296.54922485 203.45417786]
[300.41772461 209.83430481]
[312.91412354 218.13127136]
[325.41055298 226.42823792]
[337.90695190 234.72520447]
[353.62829590 228.60762024]
[369.74746704 232.98904419]
[380.00323486 245.96363831]
[380.53335571 262.32791138]
[393.22082520 270.32965088]
[407.58163452 264.45199585]
[422.64654541 268.17068481]
[432.62277222 280.05572510]
[433.67425537 295.53713989]
[425.39666748 308.66198730]
[410.97293091 314.38348389]
[395.94927979 310.50161743]
[386.10256958 298.50903320]
[385.21908569 283.01712036]
[372.53161621 275.01538086]
[360.59426880 281.10815430]
[347.09814453 280.47802734]
[335.59704590 273.18328857]
[329.17291260 261.05123901]
[329.60998535 247.22161865]
[317.11358643 238.92465210]
[304.61715698 230.62768555]
[292.12075806 222.33071899]
[279.52792358 214.18080139]
[266.84045410 206.17906189]
[254.15296936 198.17732239]
[241.46548462 190.17558289]
[224.05541992 201.22804260]
[203.38250732 202.15765381]
[184.92308044 192.64665222]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 83]
[2 82]
[3 81]
[4 80]
[5 79]
[6 19]
[7 18]
[8 17]
[9 16]
[22 75]
[23 74]
[24 73]
[25 72]
[26 71]
[29 68]
[30 67]
[31 65]
[33 62]
[34 61]
[35 60]
[37 58]
[38 57]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[95 130]
[96 129]
[97 128]
[98 127]
[100 126]
[101 125]
[102 124]
[103 123]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
