%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCCUGGAGGAGAAAUGACAUCUCUCAGCCCUCUCAGCUGCACCGGACCACCAACAGUUGUGAUUCAAUGGGCAUGAAUUGCUGUGUGAUGCUGGGGAGGUGUUUGUGAUUCUUGACAAAGUCAUUUGAAUCCAUCACUUCAAGAGAGUGAAAGGAGCCCCGUCUGAUCUGUUGGUGUUGUAGGAAGAAAC\
) } def
/len { sequence length } bind def

/coor [
[-101.60962677 469.46127319]
[-108.44952393 471.73565674]
[-115.58533478 471.49237061]
[-123.63913727 484.14685059]
[-131.69294739 496.80136108]
[-128.47953796 512.04315186]
[-136.82749939 524.76184082]
[-151.37802124 527.73144531]
[-159.43182373 540.38592529]
[-167.48562622 553.04040527]
[-175.53942871 565.69488525]
[-183.59323120 578.34942627]
[-184.47537231 594.14599609]
[-197.83634949 600.72882080]
[-194.16448975 616.10064697]
[-202.50869751 629.52264404]
[-217.91848755 633.03179932]
[-231.25151062 624.54614258]
[-234.59751892 609.10009766]
[-225.97137451 595.85754395]
[-210.49084473 592.67504883]
[-210.18475342 577.78356934]
[-196.24772644 570.29559326]
[-188.19392395 557.64111328]
[-180.14012146 544.98663330]
[-172.08631897 532.33209229]
[-164.03251648 519.67761230]
[-167.50347900 505.23849487]
[-159.51603699 492.29031372]
[-144.34744263 488.74755859]
[-136.29364014 476.09304810]
[-128.23983765 463.43856812]
[-129.73832703 441.03771973]
[-109.12216187 430.41439819]
[-102.11824036 417.14996338]
[-95.11432648 403.88552856]
[-100.60391998 392.21902466]
[-98.33345032 379.32928467]
[-88.91185760 369.96612549]
[-75.62436676 367.71063232]
[-68.40657806 354.56134033]
[-61.18878937 341.41207886]
[-53.97100067 328.26278687]
[-46.75321198 315.11352539]
[-50.40013885 308.97518921]
[-51.69765091 301.88482666]
[-50.43726730 294.71853638]
[-46.72959137 288.37866211]
[-40.99632645 283.68011475]
[-33.92274094 281.24572754]
[-26.37591362 281.42398071]
[-18.11825180 268.90155029]
[-9.86059093 256.37911987]
[-1.60292923 243.85670471]
[6.65473270 231.33428955]
[14.91239452 218.81187439]
[23.17005539 206.28944397]
[31.42771721 193.76702881]
[39.68537903 181.24461365]
[32.89458466 167.98750305]
[33.65637589 153.01167297]
[41.86616516 140.34416199]
[55.40314102 133.44148254]
[70.67726898 134.24662781]
[78.93492889 121.72419739]
[87.19258881 109.20178223]
[87.19258881 94.20178223]
[78.93492889 81.67935944]
[70.67726898 69.15693665]
[55.29487610 68.32738495]
[43.48847580 58.71165466]
[39.65338898 44.15981293]
[45.05771637 30.30588722]
[36.80005264 17.78346634]
[28.54239082 5.26104498]
[20.28472900 -7.26137590]
[4.92155600 -11.88224697]
[-0.91048932 -26.82770729]
[7.26243973 -40.63288116]
[23.17077255 -42.70761871]
[34.61099625 -31.46035767]
[32.80715179 -15.51903725]
[41.06481171 -2.99661684]
[49.32247543 9.52580452]
[57.58013535 22.04822540]
[72.44279480 22.53749084]
[84.30776978 31.79417992]
[88.49594879 46.43359756]
[83.19969177 60.89927673]
[91.45735168 73.42169952]
[99.71501160 85.94411469]
[98.20854187 71.01995850]
[109.50247192 61.14842987]
[124.09085846 64.63825989]
[129.69485474 78.55210876]
[121.59757996 91.17892456]
[134.62826538 83.74915314]
[147.65893555 76.31938171]
[160.68960571 68.88961029]
[171.55070496 58.54375458]
[179.60450745 45.88925934]
[187.65830994 33.23476410]
[195.71211243 20.58026695]
[203.76591492 7.92577171]
[211.61373901 -4.85748053]
[219.25354004 -17.76613808]
[226.89334106 -30.67479324]
[234.53314209 -43.58345032]
[242.17294312 -56.49210739]
[242.54310608 -72.30898285]
[255.68391418 -79.32102203]
[255.31980896 -95.71612549]
[269.47488403 -103.99658203]
[283.58761597 -95.64416504]
[283.14001465 -79.25112152]
[268.59255981 -71.68121338]
[268.76885986 -56.78765488]
[255.08160400 -48.85230637]
[247.44180298 -35.94364929]
[239.80200195 -23.03499222]
[232.16220093 -10.12633514]
[224.52239990 2.78232193]
[224.82418823 7.56163931]
[222.11705017 12.57886887]
[216.42041016 15.97957420]
[208.36660767 28.63406944]
[200.31280518 41.28856659]
[192.25900269 53.94306183]
[184.20520020 66.59755707]
[187.81408691 73.17219543]
[202.81059265 73.49573517]
[195.03187561 86.32147217]
[198.64077759 92.89611053]
[213.64077759 92.89611053]
[228.64077759 92.89611053]
[244.36114502 83.31963348]
[259.20861816 92.66344452]
[274.20666504 92.42054749]
[289.20468140 92.17765045]
[304.20272827 91.93475342]
[319.20074463 91.69186401]
[334.19879150 91.44896698]
[346.34591675 80.96912384]
[362.08572388 84.07353210]
[369.34402466 98.38076019]
[362.55282593 112.91552734]
[346.92178345 116.52799988]
[334.44168091 106.44699860]
[319.44363403 106.68989563]
[304.44561768 106.93279266]
[289.44757080 107.17568207]
[274.44955444 107.41857910]
[259.45150757 107.66147614]
[250.80700684 116.13585663]
[238.30453491 116.45268250]
[228.64077759 107.89611053]
[213.64077759 107.89611053]
[198.64077759 107.89611053]
[175.84713745 98.94696808]
[168.11938477 81.92028809]
[155.08869934 89.35005951]
[142.05802917 96.77983093]
[129.02735901 104.20959473]
[99.71501160 117.45944214]
[91.45735168 129.98185730]
[83.19969177 142.50428772]
[89.95585632 156.22657776]
[88.94303894 171.38807678]
[80.53316498 183.92364502]
[67.06797791 190.52247620]
[52.20780182 189.50227356]
[43.95013809 202.02468872]
[35.69247818 214.54710388]
[27.43481445 227.06953430]
[19.17715263 239.59194946]
[10.91949177 252.11437988]
[2.66182971 264.63677979]
[-5.59583187 277.15921021]
[-13.85349369 289.68164062]
[-13.24587727 312.86593628]
[-33.60393524 322.33129883]
[-40.82172394 335.48059082]
[-48.03951263 348.62985229]
[-55.25730133 361.77914429]
[-62.47509003 374.92843628]
[-57.27516556 391.62399292]
[-65.58889008 406.62298584]
[-81.84989166 410.88943481]
[-88.85381317 424.15386963]
[-95.85772705 437.41830444]
[-92.07003784 443.94821167]
[-90.80036163 451.32046509]
[-92.16043854 458.60720825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 32]
[4 31]
[5 30]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[14 21]
[34 190]
[35 189]
[36 188]
[40 185]
[41 184]
[42 183]
[43 182]
[44 181]
[51 179]
[52 178]
[53 177]
[54 176]
[55 175]
[56 174]
[57 173]
[58 172]
[59 171]
[64 166]
[65 165]
[66 164]
[67 91]
[68 90]
[69 89]
[73 85]
[74 84]
[75 83]
[76 82]
[96 163]
[97 162]
[98 161]
[99 160]
[100 129]
[101 128]
[102 127]
[103 126]
[104 125]
[105 122]
[106 121]
[107 120]
[108 119]
[109 118]
[111 116]
[133 158]
[134 157]
[135 156]
[137 153]
[138 152]
[139 151]
[140 150]
[141 149]
[142 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
