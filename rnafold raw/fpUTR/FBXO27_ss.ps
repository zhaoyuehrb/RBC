%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGGGGCCGGCGAGUAAAAAGGACGCAGAGGGGCGUGGGGAGCUUGCGGCACAGCUAGGGCAUCCCGGCGAGGAGCGCCGCCAGGCCCCGGGCCACAGCCGGGCCUGGCGGGGGGACC\
) } def
/len { sequence length } bind def

/coor [
[121.72869110 137.40086365]
[110.84680939 141.87251282]
[99.16248322 143.24649048]
[87.54012299 141.42115784]
[76.83952332 136.53153992]
[67.85231018 128.93936157]
[61.24333572 119.20629120]
[57.50152969 108.05236816]
[42.50279236 108.24709320]
[27.50405693 108.44181061]
[12.50532055 108.63653564]
[3.84447527 111.90906525]
[-2.88412237 108.63653564]
[-17.88285828 108.44181061]
[-32.88159561 108.24709320]
[-47.88032913 108.05236816]
[-62.87906647 107.85765076]
[-67.96569824 120.19333649]
[-76.94808197 130.01693726]
[-88.72333527 136.15493774]
[-101.85681915 137.88432312]
[-114.75686646 135.01771545]
[-125.86770630 127.92340088]
[-133.85708618 117.47812653]
[-137.77600098 104.95887756]
[-152.74440002 103.98592377]
[-167.71281433 103.01297760]
[-182.68122864 102.04002380]
[-194.39103699 112.65397644]
[-210.17199707 111.79565430]
[-220.66156006 99.97428894]
[-219.63644409 84.20327759]
[-207.70483398 73.83929443]
[-191.94554138 75.03109741]
[-181.70828247 87.07160950]
[-166.73986816 88.04456329]
[-151.77145386 89.01751709]
[-136.80303955 89.99046326]
[-129.01014709 75.11542511]
[-115.49084473 65.06210327]
[-98.89452362 61.85996628]
[-82.49942780 66.18997192]
[-69.56509399 77.24049377]
[-62.68434525 92.85890961]
[-47.68560791 93.05363464]
[-32.68687439 93.24835205]
[-17.68813705 93.44307709]
[-2.68940115 93.63779449]
[12.31059933 93.63779449]
[27.30933571 93.44307709]
[42.30807114 93.24835205]
[57.30680847 93.05363464]
[62.22962189 78.92016602]
[71.67425537 67.31034851]
[84.51001740 59.61409760]
[99.20021057 56.75279236]
[101.52749634 41.93443298]
[103.85477448 27.11607361]
[102.08344269 18.02860641]
[106.43963623 11.94526482]
[109.15083313 -2.80768204]
[111.86202240 -17.56062889]
[108.77812958 -34.23173904]
[123.94402313 -41.81013489]
[135.42459106 -29.33484268]
[126.61496735 -14.84943676]
[123.90377808 -0.09648991]
[121.19258118 14.65645695]
[118.67313385 29.44335556]
[116.34585571 44.26171494]
[114.01856995 59.08007431]
[130.83926392 69.67013550]
[141.14772034 86.66485596]
[142.76713562 106.47551727]
[156.98408508 111.25867462]
[172.44020081 103.19029236]
[188.65039062 108.63189697]
[195.81970215 123.78446198]
[211.28530884 120.44901276]
[221.17343140 131.58789062]
[235.50975037 136.00035095]
[249.84606934 140.41282654]
[264.18240356 144.82528687]
[278.51870728 149.23774719]
[292.85504150 153.65022278]
[307.19137573 158.06268311]
[321.52767944 162.47515869]
[335.86401367 166.88761902]
[350.20031738 171.30007935]
[364.53665161 175.71255493]
[371.24981689 174.57855225]
[376.66360474 176.75897217]
[379.49176025 180.74404907]
[393.57974243 185.89468384]
[407.66769409 191.04531860]
[423.71981812 187.68946838]
[434.44894409 200.09179688]
[428.81790161 215.49385071]
[412.61938477 218.05131531]
[402.51708984 205.13328552]
[388.42910767 199.98266602]
[374.34112549 194.83203125]
[360.12417603 190.04887390]
[345.78787231 185.63639832]
[331.45153809 181.22393799]
[317.11523438 176.81147766]
[302.77890015 172.39900208]
[288.44256592 167.98654175]
[274.10626221 163.57408142]
[259.76992798 159.16160583]
[245.43360901 154.74914551]
[231.09729004 150.33666992]
[216.76095581 145.92420959]
[202.32077026 149.57525635]
[191.40722656 138.12078857]
[180.90773010 145.71031189]
[167.75761414 145.83081055]
[156.79997253 138.21203613]
[152.20092773 125.47561646]
[137.98397827 120.69245911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 52]
[9 51]
[10 50]
[11 49]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[25 38]
[26 37]
[27 36]
[28 35]
[56 71]
[57 70]
[58 69]
[60 68]
[61 67]
[62 66]
[74 120]
[75 119]
[78 115]
[80 113]
[81 112]
[82 111]
[83 110]
[84 109]
[85 108]
[86 107]
[87 106]
[88 105]
[89 104]
[90 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
