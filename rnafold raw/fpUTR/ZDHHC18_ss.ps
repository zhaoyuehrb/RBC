%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCGCCGCCGCUGCCACCUCCGCUGCUCGGCCCGGUCCCGGAGUGGCCCGGCCGGCCCGCGGGGCGCGGAGCCGAGGCCCGCGGCUGGCUGC\
) } def
/len { sequence length } bind def

/coor [
[83.81105804 358.33239746]
[70.96049500 347.27349854]
[78.02981567 331.86373901]
[79.01086426 316.89584351]
[79.99190521 301.92797852]
[77.23452759 294.91183472]
[81.25783539 286.48892212]
[82.72809601 271.56115723]
[84.19834900 256.63339233]
[85.42417145 241.68356323]
[86.40521240 226.71568298]
[87.38626099 211.74778748]
[88.36730957 196.77990723]
[89.34835815 181.81202698]
[80.71135712 166.63194275]
[90.81508636 151.34613037]
[91.30587006 136.35417175]
[91.79665375 121.36219788]
[78.93556976 108.94025421]
[78.93556976 91.05974579]
[91.79665375 78.63780212]
[91.30587006 63.64583206]
[90.81508636 48.65386581]
[90.32429504 33.66189575]
[89.83351135 18.66992760]
[89.34272766 3.67795801]
[85.87891388 -4.99006081]
[89.08927155 -11.81082058]
[89.08927155 -26.81081963]
[89.08927155 -41.81082153]
[89.08927155 -56.81082153]
[81.35196686 -70.61099243]
[89.08927155 -83.33826447]
[89.08927155 -98.33826447]
[88.35325623 -113.32019806]
[86.88299561 -128.24797058]
[85.41273499 -143.17573547]
[83.94248199 -158.10351562]
[80.23690796 -163.95948792]
[80.20527649 -169.89065552]
[82.89723969 -174.05085754]
[82.40644836 -189.04283142]
[81.91566467 -204.03480530]
[81.42488098 -219.02676392]
[69.72001648 -229.64617920]
[69.03594208 -245.43565369]
[79.77850342 -257.02758789]
[95.57432556 -257.54467773]
[107.05204010 -246.68017578]
[107.40210724 -230.87976074]
[96.41684723 -219.51756287]
[96.90763092 -204.52558899]
[97.39842224 -189.53361511]
[97.88920593 -174.54165649]
[98.87025452 -159.57376099]
[100.34050751 -144.64599609]
[101.81076813 -129.71823120]
[103.28102112 -114.79045105]
[105.95437622 -112.21445465]
[107.41045380 -108.13541412]
[106.91928101 -103.19135284]
[104.08927155 -98.33826447]
[104.08927155 -83.33826447]
[111.82656860 -70.61099243]
[104.08927155 -56.81082153]
[104.08927155 -41.81082153]
[104.08927155 -26.81081963]
[104.08927155 -11.81082058]
[104.33469391 3.18717170]
[104.82547760 18.17914009]
[105.31626892 33.17110825]
[105.80705261 48.16307831]
[106.29783630 63.15504837]
[106.78862762 78.14701843]
[116.55877686 84.20616150]
[122.14940643 94.25176239]
[122.14940643 105.74823761]
[116.55877686 115.79383850]
[106.78862762 121.85298157]
[106.29783630 136.84495544]
[105.80705261 151.83692932]
[114.09896851 161.88185120]
[113.26702881 174.47618103]
[104.31623840 182.79307556]
[103.33518982 197.76095581]
[102.35414886 212.72883606]
[101.37310028 227.69671631]
[100.39205170 242.66461182]
[102.98956299 251.63040161]
[99.12612152 258.10363770]
[97.65586853 273.03140259]
[96.18560791 287.95919800]
[94.95979309 302.90902710]
[93.97874451 317.87689209]
[92.99769592 332.84478760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 95]
[4 94]
[5 93]
[7 92]
[8 91]
[9 90]
[10 88]
[11 87]
[12 86]
[13 85]
[14 84]
[16 81]
[17 80]
[18 79]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[28 68]
[29 67]
[30 66]
[31 65]
[33 63]
[34 62]
[35 58]
[36 57]
[37 56]
[38 55]
[41 54]
[42 53]
[43 52]
[44 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
