%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGUCUGUCAGCUACGGAGGACAAUGACCUUGCAGACACCACCGCCUGAGUGAGAACCAGGGGUCUGUGCCUCUCCUCAUUCCCCGCUCUUGCCCUUGUCAAGCCUGCACCAGC\
) } def
/len { sequence length } bind def

/coor [
[82.61576843 135.49043274]
[66.94960022 121.66685486]
[53.07221603 127.36056519]
[43.24179459 139.75706482]
[28.53011894 137.42985535]
[14.65273666 143.12356567]
[0.77535528 148.81727600]
[-13.10202599 154.51097107]
[-26.97940826 160.20468140]
[-40.85678864 165.89839172]
[-27.04938126 171.75975037]
[-19.14790535 184.50990295]
[-20.04379654 199.48313904]
[-29.40921783 211.20016479]
[-43.81702042 215.37332153]
[-57.99486542 210.47549438]
[-66.75456238 198.29898071]
[-66.89062500 183.29959106]
[-58.35354233 170.96638489]
[-73.12566376 173.57110596]
[-87.89777374 176.17582703]
[-102.66989136 178.78054810]
[-110.33146667 192.41265869]
[-124.98128510 197.88229370]
[-139.70214844 192.60685730]
[-147.54331970 179.07725525]
[-144.80242920 163.68174744]
[-132.77365112 153.68962097]
[-117.13659668 153.81886292]
[-105.27461243 164.00843811]
[-90.50250244 161.40371704]
[-75.73038483 158.79899597]
[-60.95826721 156.19427490]
[-46.55049515 152.02101135]
[-32.67311478 146.32730103]
[-18.79573250 140.63359070]
[-4.91835022 134.93989563]
[8.95903111 129.24618530]
[22.83641243 123.55248260]
[31.67423248 111.56322479]
[47.37850952 113.48318481]
[61.25588989 107.78947449]
[60.54242706 97.79054260]
[62.36772537 87.93376923]
[66.61434937 78.85336304]
[73.00906372 71.13356018]
[81.14041901 65.27108002]
[90.48522949 61.64310837]
[100.44224548 60.48308945]
[110.37079620 61.86565399]
[116.98254395 48.40144730]
[123.59428406 34.93724060]
[130.20602417 21.47303581]
[136.81777954 8.00882912]
[143.42951965 -5.45537710]
[150.04125977 -18.91958237]
[145.73457336 -27.56847191]
[145.96844482 -37.08852768]
[150.55883789 -45.27316284]
[158.32699585 -50.28598022]
[167.39921570 -51.07234573]
[175.07293701 -63.96086884]
[182.74665833 -76.84938812]
[190.42037964 -89.73790741]
[198.09410095 -102.62643433]
[205.76782227 -115.51495361]
[205.44683838 -131.91096497]
[219.62362671 -140.15415955]
[233.71435547 -131.76466370]
[233.22366333 -115.37285614]
[218.65634155 -107.84123230]
[210.98262024 -94.95271301]
[203.30889893 -82.06418610]
[195.63517761 -69.17566681]
[187.96145630 -56.28714371]
[180.28773499 -43.39862442]
[182.02920532 -22.90640450]
[163.50546265 -12.30783844]
[156.89372253 1.15636706]
[150.28198242 14.62057304]
[143.67024231 28.08477974]
[137.05848694 41.54898453]
[130.44674683 55.01319122]
[123.83499908 68.47739410]
[133.71270752 79.37876892]
[138.91899109 93.13752747]
[138.73245239 107.84719086]
[133.17893982 121.46950531]
[143.99697876 131.86036682]
[154.81501770 142.25123596]
[170.39117432 142.10624695]
[181.21417236 152.79817200]
[181.25642395 167.64854431]
[192.07444763 178.03941345]
[202.89248657 188.43028259]
[222.60269165 192.22102356]
[227.46485901 210.85607910]
[238.82504272 220.65129089]
[250.18524170 230.44648743]
[266.12927246 236.21049500]
[265.00427246 253.12707520]
[248.43737793 256.72903442]
[240.39002991 241.80668640]
[229.02983093 232.01147461]
[217.66964722 222.21626282]
[207.42735291 223.88746643]
[197.78422546 219.48881531]
[192.09928894 210.28240967]
[192.50161743 199.24832153]
[181.68359375 188.85745239]
[170.86555481 178.46658325]
[156.02551270 179.02235413]
[144.90646362 168.63864136]
[144.42414856 153.06927490]
[133.60610962 142.67840576]
[122.78807831 132.28753662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[10 34]
[19 33]
[20 32]
[21 31]
[22 30]
[50 84]
[51 83]
[52 82]
[53 81]
[54 80]
[55 79]
[56 78]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
[88 116]
[89 115]
[90 114]
[93 111]
[94 110]
[95 109]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
