%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCUGAGUUAGGUGUGGCUGGAGCGACUCGAGAUGCGAGGUGGGCGGGGGCAGGCUGAAAGUUGGAGCAAGCAGGAAGUGAACUGAGGGCCACCCUGGGAGGAAGCCGACUAGGCGAAUUCACUUACUGACCGGCCUGGGCUGCUCUGAGAC\
) } def
/len { sequence length } bind def

/coor [
[-181.36372375 395.56188965]
[-194.47396851 388.27343750]
[-202.79844666 375.79534912]
[-204.49336243 360.89141846]
[-199.18403625 346.86383057]
[-211.81021118 354.96194458]
[-224.43638611 363.06008911]
[-237.06256104 371.15820312]
[-240.46238708 388.29077148]
[-254.90188599 397.50616455]
[-271.21777344 393.53356934]
[-283.67938232 401.88272095]
[-296.14099121 410.23187256]
[-299.32611084 425.47958374]
[-312.08288574 433.76928711]
[-326.59960938 430.63882446]
[-333.75778198 444.74807739]
[-348.63793945 445.40423584]
[-361.09954834 453.75338745]
[-368.25772095 467.86264038]
[-383.13787842 468.51882935]
[-395.59948730 476.86798096]
[-402.34472656 491.81567383]
[-418.68713379 493.17852783]
[-427.81506348 479.55453491]
[-420.33847046 464.95889282]
[-403.94860840 464.40637207]
[-391.48699951 456.05722046]
[-385.22018433 442.54513550]
[-369.44869995 441.29177856]
[-356.98709106 432.94262695]
[-350.72024536 419.43057251]
[-334.94876099 418.17721558]
[-332.32217407 403.56088257]
[-319.80328369 394.91613770]
[-304.49014282 397.77026367]
[-292.02853394 389.42111206]
[-279.56692505 381.07196045]
[-278.85263062 368.17404175]
[-270.70483398 357.90008545]
[-257.93463135 354.15667725]
[-245.16069031 358.53204346]
[-232.53451538 350.43389893]
[-219.90834045 342.33578491]
[-207.28216553 334.23764038]
[-195.62182617 324.80172729]
[-185.06842041 314.14221191]
[-174.51501465 303.48266602]
[-163.96159363 292.82315063]
[-153.40818787 282.16360474]
[-142.85478210 271.50408936]
[-144.71844482 258.72152710]
[-138.77536011 247.03305054]
[-127.00405121 240.82601929]
[-113.61531067 242.57502747]
[-102.85072327 232.12878418]
[-92.08614349 221.68255615]
[-81.32156372 211.23632812]
[-70.55698395 200.79008484]
[-59.79240036 190.34385681]
[-49.02782059 179.89761353]
[-63.80535126 182.47143555]
[-78.48178101 179.37265015]
[-90.95747375 171.04455566]
[-99.44764709 158.67860413]
[-102.73768616 144.04386902]
[-100.35691071 129.23400879]
[-92.64592743 116.36774445]
[-80.70786285 107.28574371]
[-66.25060272 103.28728485]
[-51.34242249 104.94439697]
[-38.11609268 112.02000427]
[-28.46379662 123.50186920]
[-23.76639938 137.74737549]
[-24.69591904 152.71855164]
[-31.12042618 166.27502441]
[-18.18035889 158.68853760]
[-5.24029160 151.10206604]
[-1.74153972 136.66966248]
[11.27345657 128.79154968]
[26.38776779 132.55921936]
[39.32783508 124.97274017]
[52.26790237 117.38626099]
[65.20796967 109.79978180]
[78.14803314 102.21330261]
[91.08810425 94.62682343]
[102.36157990 84.73194122]
[111.56229401 72.88513184]
[113.91624451 57.24002457]
[127.83373260 51.93410492]
[137.03445435 40.08730316]
[146.23516846 28.24049759]
[155.43589783 16.39369392]
[160.37599182 0.17544261]
[177.32798767 0.43282971]
[181.77343750 16.79358482]
[167.28269958 25.59441376]
[158.08197021 37.44121552]
[148.88125610 49.28802109]
[139.68054199 61.13482666]
[137.98468018 75.93257141]
[123.40910339 82.08585358]
[114.20838165 93.93265533]
[118.00161743 100.40269470]
[127.96401978 89.18883514]
[141.70758057 95.19839478]
[140.23910522 110.12634277]
[125.58809662 113.34275818]
[129.38133240 119.81278992]
[144.21273804 117.57009125]
[159.04412842 115.32739258]
[169.68367004 103.31990051]
[185.69702148 104.29553986]
[194.80012512 117.50588226]
[190.00985718 132.81707764]
[175.00088501 138.48368835]
[161.28683472 130.15878296]
[146.45542908 132.40148926]
[131.62403870 134.64419556]
[118.16175842 132.35177612]
[107.62766266 126.20726776]
[100.95986176 117.46205139]
[98.67458344 107.56689453]
[85.73451233 115.15337372]
[72.79444885 122.73985291]
[59.85438156 130.32632446]
[46.91431427 137.91281128]
[33.97424698 145.49928284]
[29.88010788 160.52845764]
[16.64896774 168.03788757]
[2.34618735 164.04212952]
[-10.59387970 171.62861633]
[-23.53394699 179.21508789]
[-26.69692421 186.25830078]
[-32.39753342 190.24690247]
[-38.58158875 190.66220093]
[-49.34616852 201.10842896]
[-60.11074829 211.55467224]
[-70.87532806 222.00090027]
[-81.63990784 232.44712830]
[-92.40449524 242.89337158]
[-103.16907501 253.33959961]
[-103.09564972 270.80606079]
[-115.41529083 282.70773315]
[-132.19525146 282.05749512]
[-142.74865723 292.71701050]
[-153.30207825 303.37655640]
[-163.85548401 314.03607178]
[-174.40888977 324.69561768]
[-184.96229553 335.35513306]
[-170.13456726 333.08831787]
[-155.91207886 337.85498047]
[-145.44502258 348.59930420]
[-141.05175781 362.94149780]
[-143.70536804 377.70492554]
[-152.81809998 389.61953735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 45]
[6 44]
[7 43]
[8 42]
[11 38]
[12 37]
[13 36]
[16 33]
[18 31]
[19 30]
[21 28]
[22 27]
[46 150]
[47 149]
[48 148]
[49 147]
[50 146]
[51 145]
[55 142]
[56 141]
[57 140]
[58 139]
[59 138]
[60 137]
[61 136]
[76 133]
[77 132]
[78 131]
[81 128]
[82 127]
[83 126]
[84 125]
[85 124]
[86 123]
[87 103]
[88 102]
[90 100]
[91 99]
[92 98]
[93 97]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
