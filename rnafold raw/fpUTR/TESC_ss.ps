%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAUAUGAGGCCCCGCUCCGGCCCCACGCGGAACCCGCGGCUCCGAGCCUUCGCCGGCGUCCCGACCCGAGGCCGGACCCGAGGCCAGUCCCGCCGCUGCGCAGCCGAAGCCAGUGCGGGGCCUGAGAGGGACGCGCGCCCCGGGGCCCCCGCCGCGGGCACC\
) } def
/len { sequence length } bind def

/coor [
[-153.63542175 545.19738770]
[-154.74015808 555.77362061]
[-159.30574036 565.33489990]
[-166.78195190 572.78863525]
[-176.28762817 577.29248047]
[-186.71449280 578.34985352]
[-196.85627747 575.86413574]
[-205.90251160 587.82934570]
[-208.05325317 603.50366211]
[-221.90071106 608.98974609]
[-230.94692993 620.95495605]
[-239.99316406 632.92010498]
[-249.03938293 644.88531494]
[-245.36975098 660.08624268]
[-252.37585449 674.06652832]
[-266.74963379 680.22509766]
[-281.70425415 675.65411377]
[-290.17855835 662.51184082]
[-288.17126465 647.00360107]
[-276.63015747 636.45196533]
[-261.00457764 635.83911133]
[-251.95835876 623.87390137]
[-242.91212463 611.90869141]
[-233.86590576 599.94354248]
[-232.36221313 585.12500000]
[-217.86770630 578.78314209]
[-208.82147217 566.81793213]
[-215.78744507 548.59417725]
[-210.36302185 529.70483398]
[-194.56080627 517.78143311]
[-174.62184143 517.74853516]
[-166.51222229 505.12973022]
[-169.91938782 490.67541504]
[-161.87484741 477.76263428]
[-146.69073486 474.28689575]
[-138.58113098 461.66809082]
[-130.47151184 449.04928589]
[-122.36190796 436.43048096]
[-114.25229645 423.81167603]
[-106.14268494 411.19287109]
[-98.03306580 398.57409668]
[-89.92345428 385.95529175]
[-95.49056244 372.16595459]
[-91.82712555 357.56994629]
[-80.13478851 347.81585693]
[-64.76322937 346.80520630]
[-63.78797913 339.44464111]
[-56.37717056 334.02539062]
[-48.02878189 321.56326294]
[-39.68039322 309.10116577]
[-31.33200264 296.63903809]
[-22.98361397 284.17691040]
[-23.15885925 264.86791992]
[-5.01334906 256.15563965]
[2.85454655 243.38473511]
[-0.82719034 228.99792480]
[6.97004795 215.93432617]
[22.08522415 212.17012024]
[29.95311928 199.39921570]
[37.82101440 186.62829590]
[45.68891144 173.85739136]
[53.55680466 161.08647156]
[61.42470169 148.31556702]
[69.29259491 135.54464722]
[60.94221115 126.09321594]
[55.40753174 114.76069641]
[53.08755112 102.36407471]
[54.14952850 89.79702759]
[58.51689529 77.96551514]
[65.87480927 67.72248840]
[75.69283295 59.80636597]
[87.26317596 54.78783417]
[85.55330658 39.88560867]
[83.84343719 24.98338127]
[82.13356781 10.08115578]
[68.55641937 2.56844568]
[62.01866150 -11.50412655]
[65.03417969 -26.72537041]
[76.44345856 -37.24240494]
[91.85939026 -39.01121902]
[105.35423279 -31.35166550]
[111.73895264 -17.20899773]
[108.55848694 -2.02136350]
[97.03578949 8.37128448]
[98.74566650 23.27350998]
[100.45553589 38.17573547]
[102.16540527 53.07796097]
[117.87206268 56.56089401]
[131.48214722 65.13968658]
[143.18412781 55.75547791]
[154.88612366 46.37126541]
[166.58811951 36.98705292]
[178.29010010 27.60284233]
[189.99209595 18.21863174]
[201.69407654 8.83442116]
[206.45927429 0.98704547]
[213.70936584 -0.61450678]
[225.58790588 -9.77422523]
[237.46644592 -18.93394279]
[249.34497070 -28.09366226]
[254.25871277 -35.84889221]
[261.53799438 -37.31211853]
[273.58874512 -46.24402618]
[274.35034180 -61.86305237]
[285.01138306 -73.30319214]
[300.53799438 -75.16275787]
[313.59902954 -66.56372070]
[318.02746582 -51.56628418]
[311.73229980 -37.25177765]
[297.68594360 -30.37907410]
[282.52066040 -34.19325256]
[270.46987915 -25.26134872]
[258.50469971 -16.21512794]
[246.62615967 -7.05540943]
[234.74761963 2.10430861]
[222.86909485 11.26402664]
[211.07829285 20.53641129]
[199.37629700 29.92062187]
[187.67431641 39.30483246]
[175.97232056 48.68904495]
[164.27033997 58.07325745]
[152.56834412 67.45746613]
[140.86634827 76.84167480]
[146.36044312 92.44513702]
[146.10450745 108.98561096]
[140.13027954 124.41162109]
[129.17875671 136.80987549]
[114.60821533 144.64265442]
[98.22583771 146.93846130]
[82.06350708 143.41253662]
[74.19561768 156.18345642]
[66.32772064 168.95437622]
[58.45982361 181.72528076]
[50.59193039 194.49620056]
[42.72403336 207.26710510]
[34.85613632 220.03802490]
[38.29207993 235.23118591]
[30.13098907 248.07061768]
[15.62545967 251.25263977]
[7.75756407 264.02355957]
[10.89091110 274.49905396]
[7.78078699 284.75161743]
[-0.30534640 291.43997192]
[-10.52149487 292.52529907]
[-18.86988449 304.98742676]
[-27.21827316 317.44955444]
[-35.56666183 329.91165161]
[-43.91505051 342.37377930]
[-52.14442444 354.91482544]
[-46.67817307 369.31710815]
[-50.69364929 384.00485229]
[-62.44878769 393.40063477]
[-77.30465698 394.06488037]
[-85.41426849 406.68368530]
[-93.52388000 419.30249023]
[-101.63349152 431.92129517]
[-109.74310303 444.54010010]
[-117.85271454 457.15890503]
[-125.96232605 469.77770996]
[-134.07194519 482.39651489]
[-130.92587280 497.65234375]
[-139.32994080 510.33407593]
[-153.89341736 513.23931885]
[-162.00303650 525.85815430]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 27]
[8 26]
[10 24]
[11 23]
[12 22]
[13 21]
[31 164]
[32 163]
[35 160]
[36 159]
[37 158]
[38 157]
[39 156]
[40 155]
[41 154]
[42 153]
[46 149]
[48 148]
[49 147]
[50 146]
[51 145]
[52 144]
[54 140]
[55 139]
[58 136]
[59 135]
[60 134]
[61 133]
[62 132]
[63 131]
[64 130]
[72 87]
[73 86]
[74 85]
[75 84]
[89 123]
[90 122]
[91 121]
[92 120]
[93 119]
[94 118]
[95 117]
[97 116]
[98 115]
[99 114]
[100 113]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
