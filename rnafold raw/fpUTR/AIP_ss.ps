%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGGCUUCUGCCCUCAACCAAAAUGGCGCUAGCUCGGAAGCUGCCGAGGUGCUAGGAGUUGCCGAAGCAAGUCCGGAAGCUACCGAGCGAGUCCGGAAGUUGCCGAAAGGGAGCAGCGGGGAAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[106.02321625 316.57449341]
[92.48517609 324.15744019]
[77.07951355 322.30126953]
[65.73003387 311.71972656]
[62.80084229 296.48162842]
[69.41826630 282.44635010]
[83.03778076 275.01071167]
[84.83209229 260.11843872]
[86.62640381 245.22613525]
[88.42072296 230.33383179]
[90.21503448 215.44154358]
[84.05574036 201.88011169]
[93.38827515 189.10456848]
[95.18258667 174.21228027]
[96.97690582 159.31997681]
[98.77121735 144.42768860]
[88.00961304 142.33908081]
[78.19193268 137.71206665]
[69.89957428 130.87992859]
[63.60885239 122.30451202]
[59.66379547 112.54539490]
[58.25756836 102.22341919]
[59.42365265 91.98126984]
[63.03701401 82.44347382]
[68.82505798 74.17832184]
[76.38748169 67.66403198]
[85.22359467 63.26116180]
[82.36341858 48.53637314]
[77.61164856 40.61620712]
[79.61566162 33.42443466]
[77.10939789 18.63529587]
[74.60314178 3.84615517]
[64.66881561 -8.46724415]
[70.17082977 -22.30838394]
[67.66456604 -37.09752274]
[65.15830994 -51.88666534]
[62.65205002 -66.67580414]
[60.14579010 -81.46494293]
[57.63952637 -96.25408173]
[47.70520401 -108.56748199]
[53.20721817 -122.40862274]
[50.70095444 -137.19776917]
[48.19469452 -151.98690796]
[45.68843460 -166.77604675]
[35.75411224 -179.08944702]
[41.25612259 -192.93058777]
[38.74986267 -207.71972656]
[36.24360275 -222.50886536]
[21.02405167 -229.77903748]
[13.18187046 -244.52462769]
[15.61346436 -260.88058472]
[27.17228699 -272.47262573]
[24.31211281 -287.19741821]
[21.45194054 -301.92221069]
[18.59176636 -316.64700317]
[6.19323587 -330.19918823]
[12.43143463 -346.55654907]
[9.21899414 -361.20852661]
[-3.46168017 -371.03604126]
[-3.54040742 -387.07888794]
[9.04320526 -397.03039551]
[24.63608551 -393.25659180]
[31.27671242 -378.65240479]
[23.87096405 -364.42095947]
[27.08340454 -349.76898193]
[37.13945389 -342.93447876]
[39.89175034 -330.67886353]
[33.31655502 -319.50717163]
[36.17673111 -304.78237915]
[39.03690338 -290.05758667]
[41.89707565 -275.33279419]
[54.51544571 -270.80676270]
[63.30091095 -260.53805542]
[65.86055756 -247.15802002]
[61.41532135 -234.16621399]
[51.03274155 -225.01512146]
[53.53900528 -210.22598267]
[56.04526520 -195.43684387]
[65.80032349 -184.18125916]
[60.47757721 -169.28230286]
[62.98383713 -154.49316406]
[65.49009705 -139.70402527]
[67.99635315 -124.91488647]
[77.75141144 -113.65930176]
[72.42866516 -98.76034546]
[74.93492889 -83.97120667]
[77.44118500 -69.18206024]
[79.94744873 -54.39292526]
[82.45371246 -39.60378265]
[84.95996857 -24.81464386]
[94.71502686 -13.55906296]
[89.39228058 1.33989489]
[91.89854431 16.12903404]
[94.40480042 30.91817474]
[97.08821106 45.67620087]
[99.94838715 60.40098953]
[117.43657684 63.37020111]
[132.27397156 73.85161591]
[141.33468628 90.08842468]
[142.51824951 109.07312775]
[135.22439575 127.10296631]
[147.90472412 135.11605835]
[160.58503723 143.12915039]
[173.26535034 151.14224243]
[185.94566345 159.15531921]
[198.72114563 167.01579285]
[213.98744202 162.92730713]
[227.63137817 170.90344238]
[231.55822754 186.21211243]
[223.43827820 199.77095032]
[208.08894348 203.53573608]
[194.61671448 195.27288818]
[191.01443481 179.88461304]
[183.58592224 179.13960266]
[177.93257141 171.83564758]
[165.25225830 163.82255554]
[152.57194519 155.80946350]
[139.89163208 147.79637146]
[127.21131134 139.78327942]
[113.66351318 146.22200012]
[111.86920166 161.11430359]
[110.07488251 176.00659180]
[108.28057098 190.89888000]
[114.31152344 205.52551270]
[105.10733032 217.23585510]
[103.31301880 232.12814331]
[101.51869965 247.02044678]
[99.72438812 261.91275024]
[97.93006897 276.80502319]
[109.39366913 287.26281738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 129]
[8 128]
[9 127]
[10 126]
[11 125]
[13 123]
[14 122]
[15 121]
[16 120]
[27 96]
[28 95]
[30 94]
[31 93]
[32 92]
[34 90]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[41 83]
[42 82]
[43 81]
[44 80]
[46 78]
[47 77]
[48 76]
[52 71]
[53 70]
[54 69]
[55 68]
[57 65]
[58 64]
[101 119]
[102 118]
[103 117]
[104 116]
[105 115]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
