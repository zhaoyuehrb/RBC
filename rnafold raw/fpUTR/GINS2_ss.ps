%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACGGCGGCCGCGGCGUCUCCUCCGGGACGCUGAGGGGCCCGAGGAGACCGUGAGGCUCUGGCCUGCAGCUCGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[55.42312241 286.65402222]
[47.06870270 299.73010254]
[32.61165619 305.36688232]
[17.61101532 301.39694214]
[7.83482981 289.34680176]
[7.04224348 273.85000610]
[15.53802299 260.86532593]
[30.05536652 255.38571167]
[33.89300919 240.88493347]
[37.73064804 226.38415527]
[41.56829071 211.88337708]
[45.40593338 197.38259888]
[49.24357605 182.88182068]
[47.87773514 175.43206787]
[53.50022888 167.92123413]
[57.87107468 153.57217407]
[62.24192047 139.22309875]
[66.34686279 124.79571533]
[70.18450928 110.29494476]
[68.80048370 95.35893250]
[62.36367416 81.81021881]
[55.92686462 68.26151276]
[49.49005508 54.71280670]
[43.05324554 41.16409683]
[36.61643600 27.61539078]
[30.17962837 14.06668282]
[23.74281883 0.51797438]
[17.07529831 -6.08272266]
[17.32887650 -13.65240669]
[11.39710903 -27.42971039]
[5.46534109 -41.20701599]
[-0.95371997 -48.04957962]
[-0.42060336 -55.60472488]
[-12.62061787 -65.67796326]
[-10.00342178 -80.34082794]
[-23.11194229 -90.19470215]
[-20.86416817 -106.43907166]
[-5.57241917 -112.36312103]
[7.03246641 -101.87270355]
[3.98366189 -85.75945282]
[15.79610062 -76.68666077]
[13.56647968 -61.02334976]
[19.24264526 -47.13878250]
[25.17441368 -33.36148071]
[31.10618210 -19.58417511]
[37.29152679 -5.91883469]
[43.72833633 7.62987328]
[50.16514587 21.17858124]
[56.60195541 34.72728729]
[63.03876495 48.27599716]
[69.47557068 61.82470703]
[75.91238403 75.37341309]
[82.34918976 88.92211914]
[100.32547760 81.30656433]
[114.31858063 91.69382477]
[129.29553223 90.86265564]
[137.92845154 87.18872070]
[144.83927917 90.28789520]
[159.83671570 90.01071167]
[174.83415222 89.73352814]
[189.83158875 89.45634460]
[203.59292603 80.53682709]
[218.07307434 88.23468781]
[218.37611389 104.63103485]
[204.19029236 112.85871124]
[190.10877991 104.45378113]
[175.11134338 104.73096466]
[160.11390686 105.00814819]
[145.11645508 105.28533173]
[130.12670898 105.83960724]
[115.14974976 106.67077637]
[103.07550049 118.44157410]
[84.68528748 114.13258362]
[80.84764099 128.63336182]
[81.67404175 137.97906494]
[76.59098816 143.59394836]
[72.22013855 157.94302368]
[67.84929657 172.29208374]
[63.74435043 186.71946716]
[59.90670776 201.22024536]
[56.06906891 215.72102356]
[52.23142624 230.22180176]
[48.39378357 244.72256470]
[44.55614090 259.22335815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 84]
[9 83]
[10 82]
[11 81]
[12 80]
[13 79]
[15 78]
[16 77]
[17 76]
[18 74]
[19 73]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[29 45]
[30 44]
[31 43]
[33 42]
[35 40]
[55 71]
[56 70]
[58 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
