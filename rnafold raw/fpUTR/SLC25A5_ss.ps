%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCCGGCUCCCCCUAUAUAAAUCGGCCAUUUGCUUCGCUCCGCCCCGCAGCGCCGGAGUCAAAGCCGGUUCCCGGCCCAGUCCCGUCCUGCAGCAGUCUGCCUCCUCUUUCAAC\
) } def
/len { sequence length } bind def

/coor [
[52.32771301 110.05353546]
[51.73705673 101.69490051]
[36.84642410 99.88685608]
[21.95579147 98.07880402]
[7.06515932 96.27075195]
[-7.82547379 94.46269989]
[-22.71610641 92.65465546]
[-37.60673904 90.84660339]
[-52.49737167 89.03855133]
[-40.29644012 97.76421356]
[-27.77340317 106.02094269]
[-18.38565254 117.72009277]
[-13.03776169 131.73437500]
[-12.24503708 146.71340942]
[-16.08386421 161.21388245]
[-24.18434334 173.83854675]
[-35.76594162 183.37094116]
[-49.71268463 188.89256287]
[-64.68071747 189.87135315]
[-79.22776031 186.21299744]
[-91.95211029 178.27001953]
[-101.62768555 166.80776978]
[-107.32218170 152.93070984]
[-108.48688507 137.97599792]
[-105.00978088 123.38510895]
[-91.22928619 117.46075439]
[-106.16309357 116.05313873]
[-121.09690094 114.64552307]
[-134.32263184 123.72624969]
[-149.62570190 118.91005707]
[-155.26690674 103.89152527]
[-146.91879272 90.19157410]
[-130.98532104 88.31964874]
[-119.68928528 99.71171570]
[-104.75547791 101.11933136]
[-89.82167053 102.52694702]
[-86.24740601 95.93341827]
[-79.09887695 82.74636078]
[-75.52461243 76.15283203]
[-84.85444641 64.40744019]
[-94.18428802 52.66205597]
[-108.82634735 46.66867828]
[-110.68406677 31.89037895]
[-120.01390076 20.14499092]
[-134.60011292 11.50329876]
[-130.33399963 -4.90513372]
[-113.38584137 -5.34805393]
[-108.26851654 10.81515408]
[-98.93868256 22.56054306]
[-84.96395111 27.71380806]
[-82.43889618 43.33221817]
[-73.10906219 55.07760620]
[-63.77922058 66.82299042]
[-50.68932343 74.14791870]
[-35.79869080 75.95597076]
[-20.90805626 77.76401520]
[-6.01742363 79.57206726]
[8.87320900 81.38011932]
[23.76384163 83.18817139]
[38.65447617 84.99622345]
[53.54510880 86.80426788]
[62.55719376 67.37444305]
[79.46844482 53.27947998]
[101.35923004 47.61470413]
[124.15781403 51.95901871]
[143.39730835 65.97894287]
[153.34416199 54.75128174]
[163.29100037 43.52362061]
[173.23783875 32.29595947]
[183.18467712 21.06829834]
[189.16221619 5.20307207]
[206.06216431 6.55507374]
[209.44137573 23.16884232]
[194.41233826 31.01513863]
[184.46549988 42.24279785]
[174.51866150 53.47045898]
[164.57182312 64.69812012]
[154.62496948 75.92578125]
[155.82806396 83.32865906]
[169.94006348 78.24423218]
[184.05206299 73.15979767]
[194.13732910 62.05631256]
[208.86018372 59.18618774]
[222.37757874 65.68848419]
[229.32490540 78.98264313]
[226.94496155 93.79264069]
[216.18229675 104.24084473]
[201.30825806 106.18069458]
[188.22587585 98.84230804]
[173.23005676 98.48836517]
[158.23423767 98.13441467]
[159.43731689 105.53729248]
[172.42770386 113.03729248]
[185.41807556 120.53729248]
[198.40846252 128.03729248]
[214.79867554 127.49620819]
[223.23146057 141.56106567]
[215.03189087 155.76313782]
[198.63497925 155.49255371]
[190.90846252 141.02766418]
[177.91807556 133.52766418]
[164.92770386 126.02767181]
[151.93731689 118.52767181]
[147.60726929 126.96797943]
[141.93273926 134.47752380]
[135.10357666 140.84716797]
[127.34118652 145.90507507]
[118.89144135 149.52131653]
[110.01691437 151.61111450]
[100.98871613 152.13665771]
[92.07825470 151.10758972]
[83.54901886 148.57984924]
[75.64884949 144.65336609]
[68.60270691 139.46824646]
[62.60627747 133.19998169]
[57.82058334 126.05359650]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 61]
[3 60]
[4 59]
[5 58]
[6 57]
[7 56]
[8 55]
[9 54]
[26 36]
[27 35]
[28 34]
[39 53]
[40 52]
[41 51]
[43 49]
[44 48]
[66 78]
[67 77]
[68 76]
[69 75]
[70 74]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
