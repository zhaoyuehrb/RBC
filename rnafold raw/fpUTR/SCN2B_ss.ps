%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUUUUAGCAGCAACAUACAAGCCGGCCAUAUUAGAGAGAUGGAAAUAAAGCUUCCUUAAUGUUGUAUAUGUCUUUGAAGUACAUCCGUGCAUUUUUUUUUAGCAUCCAACCAUUCCUCCCUUGUAGUUCUCGCCCCCUCAAAUCACCCUCUCCCGUAGCCCACCCGACUAACAUCUCAGUCUCUGAAA\
) } def
/len { sequence length } bind def

/coor [
[214.46531677 399.11672974]
[204.69317627 383.30569458]
[197.46113586 366.18096924]
[192.94090271 348.14770508]
[191.24006653 329.63247681]
[192.39947510 311.07351685]
[196.39231873 292.91006470]
[203.12466431 275.57214355]
[212.43777466 259.47033691]
[224.11172485 244.98603821]
[213.85783386 234.03807068]
[203.51472473 223.17437744]
[193.08308411 212.39564514]
[186.16107178 209.77134705]
[182.57073975 201.35418701]
[172.31686401 190.40621948]
[162.06297302 179.45826721]
[155.18481445 176.72105408]
[151.73269653 168.24627686]
[141.65931702 157.13201904]
[131.58592224 146.01774597]
[121.51254272 134.90347290]
[111.43915558 123.78921509]
[101.36577606 112.67494202]
[102.89176178 127.59712219]
[98.01745605 141.78306580]
[87.64202118 152.61590576]
[73.67942047 158.09730530]
[58.70532608 157.21611023]
[45.48201370 150.13487244]
[36.44878006 138.15986633]
[33.27198792 123.50012970]
[36.53765869 108.85993958]
[45.64337921 96.93995667]
[58.90941238 89.93907928]
[73.88858032 89.14874268]
[87.81513977 94.71303558]
[79.89411926 81.97499847]
[71.97310638 69.23696899]
[58.11514282 61.60365295]
[57.96481323 46.70980453]
[50.04379272 33.97177124]
[42.12277603 21.23373985]
[34.20175934 8.49570656]
[26.28074074 -4.24232626]
[12.29385090 -1.51201856]
[-1.75501490 -3.71798110]
[-14.17967129 -10.57478809]
[-23.49593735 -21.24005318]
[-28.59891701 -34.41786957]
[-28.89402199 -48.51625443]
[-24.36617088 -61.83947754]
[-15.57915115 -72.79200745]
[-23.29069138 -85.65793610]
[-31.00223351 -98.52386475]
[-44.94218063 -94.67060089]
[-59.39234543 -94.56318665]
[-73.36454010 -98.20268250]
[-85.90488434 -105.33411407]
[-96.15895844 -115.46434021]
[-103.42997742 -127.89615631]
[-107.22615814 -141.77626038]
[-107.29398346 -156.15382385]
[-103.63510895 -170.04563904]
[-96.50582886 -182.50335693]
[-86.39911652 -192.67820740]
[-93.89911652 -205.66857910]
[-101.39911652 -218.65896606]
[-108.89911652 -231.64935303]
[-116.39911652 -244.63972473]
[-124.11066437 -257.50564575]
[-132.03167725 -270.24368286]
[-139.95269775 -282.98171997]
[-147.87371826 -295.71975708]
[-155.89868164 -308.39254761]
[-164.02705383 -320.99929810]
[-178.85363770 -328.00674438]
[-179.92845154 -344.37063599]
[-166.14581299 -353.25717163]
[-151.68412781 -345.52468872]
[-151.42031860 -329.12765503]
[-143.29194641 -316.52093506]
[-137.01490784 -312.59664917]
[-135.13568115 -303.64077759]
[-127.21466064 -290.90274048]
[-119.29364777 -278.16470337]
[-111.37262726 -265.42666626]
[-106.99246979 -263.48678589]
[-103.79196930 -258.76611328]
[-103.40873718 -252.13972473]
[-95.90873718 -239.14935303]
[-88.40873718 -226.15896606]
[-80.90873718 -213.16857910]
[-73.40873718 -200.17820740]
[-58.29288483 -203.98959351]
[-42.70079041 -203.39356995]
[-27.89249039 -198.43009949]
[-15.06696510 -189.49247742]
[-5.26508474 -177.29605103]
[0.71487236 -162.82112122]
[2.38222575 -147.23399353]
[-0.40585464 -131.79310608]
[-7.43215227 -117.74744415]
[-18.13630486 -106.23540497]
[-10.42476273 -93.36947632]
[-2.71322179 -80.50354767]
[12.91702271 -83.07013702]
[28.37374878 -79.43651581]
[41.28584671 -70.12974548]
[49.66093445 -56.54947662]
[52.19276428 -40.75751114]
[48.46487427 -25.16479301]
[39.01877213 -12.16334438]
[46.93979263 0.57468861]
[54.86080933 13.31272125]
[62.78182602 26.05075455]
[70.70284271 38.78878784]
[83.99423981 45.51099396]
[84.71113586 61.31594849]
[92.63215637 74.05398560]
[100.55316925 86.79201508]
[110.24356842 92.02177429]
[112.48004150 102.60156250]
[122.55342865 113.71582794]
[132.62681580 124.83009338]
[142.70019531 135.94436646]
[152.77357483 147.05862427]
[162.84696960 158.17289734]
[173.01094055 169.20437622]
[183.26481628 180.15234375]
[193.51870728 191.10029602]
[203.86181641 201.96400452]
[214.29345703 212.74273682]
[222.52430725 216.74174500]
[224.80580139 223.78419495]
[235.05967712 234.73214722]
[244.64160156 227.58924866]
[254.88119507 221.42741394]
[265.67840576 216.30676270]
[276.92770386 212.27714539]
[288.51913452 209.37782288]
[300.33947754 207.63696289]
[312.27322388 207.07144165]
[324.20382690 207.68664551]
[336.01473999 209.47642517]
[347.59060669 212.42315674]
[358.81842041 216.49794006]
[369.58853149 221.66082764]
[379.79583740 227.86128235]
[389.34063721 235.03860474]
[398.12985229 243.12258911]
[406.07769775 252.03416443]
[413.10662842 261.68618774]
[419.14813232 271.98434448]
[424.14328003 282.82788086]
[428.04339600 294.11093140]
[430.81057739 305.72314453]
[432.41787720 317.55111694]
[432.84973145 329.47930908]
[432.10211182 341.39114380]
[430.18237305 353.17034912]
[427.10946655 364.70181274]
[422.91354370 375.87301636]
[417.63568115 386.57482910]
[411.32757568 396.70278931]
[404.05093384 406.15805054]
[395.87698364 414.84835815]
[386.88565063 422.68887329]
[377.16485596 429.60317993]
[384.45129395 442.71450806]
[391.73776245 455.82586670]
[399.02420044 468.93722534]
[414.44335938 470.67773438]
[425.87191772 481.17379761]
[428.91537476 496.38949585]
[422.40347290 510.47402954]
[408.84014893 518.01165771]
[393.44079590 516.10400391]
[382.12673950 505.48455811]
[379.24853516 490.23675537]
[385.91284180 476.22369385]
[378.62640381 463.11233521]
[371.33993530 450.00097656]
[364.05349731 436.88961792]
[346.73248291 443.58297729]
[328.58782959 447.54071045]
[310.04882812 448.66857910]
[291.55422974 446.93927002]
[273.54183960 442.39309692]
[256.43807983 435.13705444]
[240.64804077 425.34234619]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 136]
[11 135]
[12 133]
[13 132]
[15 131]
[16 130]
[17 129]
[19 128]
[20 127]
[21 126]
[22 125]
[23 124]
[24 123]
[37 121]
[38 120]
[39 119]
[41 117]
[42 116]
[43 115]
[44 114]
[45 113]
[53 106]
[54 105]
[55 104]
[66 94]
[67 93]
[68 92]
[69 91]
[70 90]
[71 87]
[72 86]
[73 85]
[74 84]
[75 82]
[76 81]
[169 184]
[170 183]
[171 182]
[172 181]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
