%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAUAUUAGUGAAGAUUAGGAAGAAGCUUUAAAAUCCCAAGGCUAGUGUGCAUUGCUAGAAUUGUUAAGAGAGAGAGCUCAUAUGAAAUUGGUUAUCGUGGGAUAUUUAAAAUAAAACAAAGAACAGUUUACUUUCAGGCAAAAAG\
) } def
/len { sequence length } bind def

/coor [
[-124.31566620 278.91934204]
[-132.49038696 277.60473633]
[-139.87272644 273.93127441]
[-145.80226135 268.25012207]
[-159.67553711 273.95382690]
[-173.54881287 279.65753174]
[-187.42208862 285.36123657]
[-201.29536438 291.06494141]
[-215.16864014 296.76864624]
[-229.04190063 302.47235107]
[-242.91517639 308.17608643]
[-256.78845215 313.87979126]
[-260.49746704 331.57058716]
[-273.93103027 343.42938232]
[-291.63360596 344.88952637]
[-306.56347656 335.55783081]
[-320.18395996 341.84133911]
[-333.80447388 348.12481689]
[-347.42495728 354.40829468]
[-352.97048950 368.96456909]
[-366.87310791 375.14288330]
[-380.71609497 369.76638794]
[-394.33660889 376.04986572]
[-407.95709229 382.33334351]
[-421.57757568 388.61682129]
[-433.42721558 400.74209595]
[-448.35894775 392.71215820]
[-444.77633667 376.14105225]
[-427.86108398 374.99633789]
[-414.24057007 368.71286011]
[-400.62008667 362.42938232]
[-386.99960327 356.14587402]
[-382.10501099 342.12524414]
[-368.38140869 335.55886841]
[-353.70843506 340.78781128]
[-340.08795166 334.50433350]
[-326.46746826 328.22082520]
[-312.84695435 321.93734741]
[-312.25964355 309.73574829]
[-306.48266602 298.89022827]
[-296.56848145 291.50827026]
[-284.38003540 289.05413818]
[-272.24090576 292.05880737]
[-262.49215698 300.00650024]
[-248.61888123 294.30279541]
[-234.74562073 288.59909058]
[-220.87234497 282.89538574]
[-206.99906921 277.19168091]
[-193.12579346 271.48797607]
[-179.25251770 265.78427124]
[-165.37924194 260.08056641]
[-151.50596619 254.37684631]
[-145.32691956 233.37399292]
[-125.48880768 223.49180603]
[-104.49607849 231.40174866]
[-91.45330811 223.99324036]
[-78.41053772 216.58471680]
[-65.36776733 209.17620850]
[-52.32499695 201.76768494]
[-43.25709915 180.47267151]
[-19.40457344 180.10243225]
[-7.40076303 171.10751343]
[4.60304642 162.11259460]
[16.60685539 153.11767578]
[28.61066628 144.12275696]
[40.61447525 135.12783813]
[52.61828613 126.13292694]
[64.62209320 117.13800812]
[58.73691940 90.74803162]
[71.58913422 64.76189423]
[99.66905212 51.75914383]
[100.93261719 36.81245804]
[102.19618988 21.86577415]
[91.81173706 9.95197201]
[92.97649384 -5.80933809]
[104.99942017 -16.06724930]
[120.74753571 -14.73592663]
[130.87776184 -2.60521817]
[129.38000488 13.12794113]
[117.14287567 23.12934685]
[115.87930298 38.07603073]
[114.61573029 53.02271652]
[120.75685120 57.32813644]
[129.03157043 44.81697464]
[130.65826416 29.90544128]
[144.32173157 23.71597099]
[156.60395813 32.32684326]
[155.44334412 47.28187561]
[141.97973633 53.89468765]
[133.03909302 65.93898010]
[139.18020630 70.24440002]
[152.80070496 63.96091461]
[166.42120361 57.67742538]
[180.04168701 51.39393997]
[189.33154297 38.58734131]
[204.12948608 40.28162003]
[217.74996948 33.99813461]
[231.37046814 27.71464729]
[244.99095154 21.43116188]
[254.00500488 7.73156691]
[270.35821533 8.95815659]
[277.22781372 23.84912109]
[267.54693604 37.08591080]
[251.27444458 35.05165482]
[237.65394592 41.33514023]
[224.03346252 47.61862564]
[210.41296387 53.90211105]
[202.09733582 66.25927734]
[186.32518005 65.01443481]
[172.70468140 71.29792023]
[159.08419800 77.58140564]
[145.46369934 83.86489105]
[147.10693359 93.48771667]
[146.76496887 103.10442352]
[144.50842285 112.31550598]
[140.48626709 120.74967957]
[134.91738892 128.07885742]
[128.07939148 134.03083801]
[120.29511261 138.39929199]
[111.91765594 141.05067444]
[103.31449127 141.92778015]
[94.85137939 141.04991150]
[86.87683868 138.50987244]
[79.70779419 134.46769714]
[73.61701202 129.14181519]
[61.61320496 138.13673401]
[49.60939407 147.13165283]
[37.60558319 156.12657166]
[25.60177422 165.12149048]
[13.59796429 174.11640930]
[1.59415495 183.11132812]
[-10.40965462 192.10624695]
[-9.59317589 199.10630798]
[-11.00823975 205.95733643]
[-14.47943306 211.97122192]
[-19.62653351 216.55442810]
[-25.90592194 219.26654053]
[-32.66789627 219.86244202]
[-39.22386551 218.31416321]
[-44.91648102 214.81045532]
[-57.95925140 222.21897888]
[-71.00202179 229.62748718]
[-84.04479218 237.03601074]
[-97.08756256 244.44453430]
[-96.38066101 252.89837646]
[-98.21509552 261.14624023]
[-102.40483093 268.44464111]
[-108.55240631 274.14178467]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 52]
[5 51]
[6 50]
[7 49]
[8 48]
[9 47]
[10 46]
[11 45]
[12 44]
[16 38]
[17 37]
[18 36]
[19 35]
[22 32]
[23 31]
[24 30]
[25 29]
[55 144]
[56 143]
[57 142]
[58 141]
[59 140]
[61 132]
[62 131]
[63 130]
[64 129]
[65 128]
[66 127]
[67 126]
[68 125]
[71 82]
[72 81]
[73 80]
[91 112]
[92 111]
[93 110]
[94 109]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
