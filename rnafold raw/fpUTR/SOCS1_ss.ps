%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGCUGCACGGCUCCUGGCCCCGGAGCAUGCGCGAGAGCCGCCCCGGAGCGCCCCGGAGCCCCCCGCCGUCCCGCCCGCGGCGUCCCGCGCCCCGCCGCCAGCGCACCCCCGGACGCUAUGGCCCACCCCUCCGGCUGGCCCCUUCUGUAGG\
) } def
/len { sequence length } bind def

/coor [
[44.01532364 290.13034058]
[38.66346359 304.14309692]
[38.51793289 313.33657837]
[33.05852890 318.38381958]
[27.42377472 332.28524780]
[21.78901863 346.18667603]
[16.15426254 360.08807373]
[18.95296669 376.24664307]
[6.18700790 386.54043579]
[-9.01108932 380.38009644]
[-11.00682640 364.10284424]
[2.25284171 354.45333862]
[7.88759756 340.55191040]
[13.52235317 326.65048218]
[19.15710831 312.74905396]
[24.65069771 298.79125977]
[30.00255775 284.77847290]
[52.28210068 267.31369019]
[72.90937805 271.23913574]
[75.03041840 256.38986206]
[77.15145874 241.54057312]
[79.27250671 226.69129944]
[81.09216309 211.80207825]
[82.60968781 196.87904358]
[84.12721252 181.95599365]
[85.64473724 167.03295898]
[87.16226196 152.10992432]
[88.67978668 137.18687439]
[71.94044495 126.90116119]
[62.36917114 109.74329376]
[62.41103363 90.09642029]
[72.05534363 72.97949982]
[63.48632050 60.66804886]
[54.91729736 48.35659790]
[46.34827423 36.04514694]
[37.77925110 23.73369408]
[23.54515648 16.82709122]
[22.62496376 1.96093750]
[14.05594158 -10.35051441]
[5.36259413 -22.57449532]
[-3.45418477 -34.70975113]
[-12.27096367 -46.84500504]
[-21.08774185 -58.98025894]
[-29.90452194 -71.11551666]
[-47.20417786 -73.51502228]
[-57.24251556 -87.39340210]
[-54.22654724 -103.91160583]
[-63.28745651 -115.86568451]
[-72.34837341 -127.81975555]
[-86.85066223 -134.14384460]
[-88.37255859 -148.96049500]
[-97.43347168 -160.91456604]
[-106.49438477 -172.86863708]
[-117.41073608 -173.73870850]
[-125.85215759 -180.36360168]
[-129.15324402 -190.34207153]
[-126.44385529 -200.26899719]
[-135.01287842 -212.58044434]
[-143.58189392 -224.89189148]
[-159.18055725 -227.43302917]
[-168.34568787 -240.30844116]
[-165.63977051 -255.87934875]
[-152.66818237 -264.90783691]
[-137.12673950 -262.03744507]
[-128.23590088 -248.97114563]
[-131.27044678 -233.46092224]
[-122.70142365 -221.14945984]
[-114.13240051 -208.83801270]
[-96.08618927 -201.98983765]
[-94.54031372 -181.92955017]
[-85.47940063 -169.97547913]
[-76.41848755 -158.02140808]
[-62.56428909 -152.55235291]
[-60.39429855 -136.88066101]
[-51.33338547 -124.92659760]
[-42.27247238 -112.97251892]
[-29.35320282 -113.01042175]
[-18.62143135 -105.47296143]
[-14.14196968 -92.94020081]
[-17.76926613 -79.93229675]
[-8.95248699 -67.79703522]
[-0.13570860 -55.66178513]
[8.68107033 -43.52652740]
[17.49784851 -31.39127350]
[24.01208878 -27.80738068]
[26.36739349 -18.91953659]
[34.93641663 -6.60808563]
[48.55759430 -0.58207995]
[50.09070206 15.16467094]
[58.65972519 27.47612190]
[67.22875214 39.78757477]
[75.79777527 52.09902573]
[84.36679840 64.41047668]
[99.24348450 61.13563538]
[114.23635101 63.82905197]
[127.04299927 72.07711029]
[135.69674683 84.61318970]
[150.35833740 81.44496918]
[165.01992798 78.27674866]
[179.68153381 75.10852814]
[187.34205627 64.68398285]
[199.66188049 62.37162399]
[209.90260315 68.87899017]
[224.62539673 66.00856018]
[239.34819031 63.13813782]
[254.07098389 60.26771164]
[262.91357422 47.44404221]
[277.88546753 44.74275589]
[290.05636597 53.25183487]
[302.06497192 42.08375931]
[317.65951538 47.15745544]
[320.79766846 63.25354004]
[308.25119019 73.81373596]
[292.92678833 67.97462463]
[284.84371948 80.43251801]
[269.95358276 83.55326843]
[256.94140625 74.99050903]
[242.21861267 77.86093140]
[227.49581909 80.73135376]
[212.77302551 83.60178375]
[200.21241760 95.82139587]
[182.84974670 89.77012634]
[168.18815613 92.93834686]
[153.52655029 96.10656738]
[138.86495972 99.27478790]
[138.13391113 107.53766632]
[135.66627502 115.45728302]
[131.57446289 122.67299652]
[126.04476929 128.85621643]
[119.32904053 133.72535706]
[111.73308563 137.05868530]
[103.60282898 138.70440674]
[102.08530426 153.62744141]
[100.56777191 168.55047607]
[99.05024719 183.47352600]
[97.53272247 198.39656067]
[96.01519775 213.31961060]
[98.40614319 219.58560181]
[97.38420105 225.25140381]
[94.12178802 228.81234741]
[92.00074005 243.66162109]
[89.87969971 258.51089478]
[87.75865936 273.36019897]
[88.51839447 288.34094238]
[92.13082886 302.89944458]
[95.74327087 317.45794678]
[108.68828583 326.93457031]
[109.20626831 342.96926880]
[96.89987183 353.26159668]
[81.20949554 349.91616821]
[74.17147064 335.49929810]
[81.18475342 321.07040405]
[77.57231903 306.51187134]
[73.95988464 291.95336914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[4 15]
[5 14]
[6 13]
[7 12]
[19 143]
[20 142]
[21 141]
[22 140]
[23 137]
[24 136]
[25 135]
[26 134]
[27 133]
[28 132]
[32 93]
[33 92]
[34 91]
[35 90]
[36 89]
[38 87]
[39 86]
[40 84]
[41 83]
[42 82]
[43 81]
[44 80]
[47 76]
[48 75]
[49 74]
[51 72]
[52 71]
[53 70]
[57 68]
[58 67]
[59 66]
[97 125]
[98 124]
[99 123]
[100 122]
[103 120]
[104 119]
[105 118]
[106 117]
[109 114]
[144 154]
[145 153]
[146 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
