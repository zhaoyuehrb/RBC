%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCAGGCGCGGGAGGUGCGACCGGGGGGCGGUUGGGGUUCACCGCCUCGUGCCGUACUGGCUUCUGGGUGGCCCUUAAUGUCUUGUGCUCUAAGGUGCUGAGGGGAAAGACGCGGGAGGUCUCUGGCCUGACACU\
) } def
/len { sequence length } bind def

/coor [
[80.19279480 211.01573181]
[77.35560608 195.85150146]
[83.18836975 181.56925964]
[95.82987213 172.72642517]
[95.14217377 157.74218750]
[94.45447540 142.75796509]
[93.76677704 127.77374268]
[93.07907867 112.78951263]
[80.76445770 104.22504425]
[66.47750092 108.79482269]
[52.19054413 113.36460114]
[37.90359116 117.93437958]
[23.66996765 122.66766357]
[9.49154854 127.56383514]
[-4.68686914 132.46000671]
[-15.20563507 144.27804565]
[-29.76134872 141.11885071]
[-40.28011322 152.93690491]
[-54.83582687 149.77770996]
[-69.01424408 154.67387390]
[-83.19266510 159.57005310]
[-97.37107849 164.46621704]
[-111.54949951 169.36238098]
[-125.72792053 174.25856018]
[-134.01252747 187.99699402]
[-149.93716431 189.94265747]
[-161.28579712 178.60299683]
[-159.35273743 162.67683411]
[-145.62086487 154.38134766]
[-130.62408447 160.08013916]
[-116.44567108 155.18397522]
[-102.26725006 150.28779602]
[-88.08882904 145.39163208]
[-73.91041565 140.49546814]
[-59.73199463 135.59928894]
[-50.22736740 124.13146210]
[-34.65751648 126.94043732]
[-25.15288544 115.47260284]
[-9.58303738 118.28158569]
[4.59538078 113.38541412]
[18.77379799 108.48925018]
[24.11638451 103.28688812]
[33.33380890 103.64742279]
[47.62076569 99.07764435]
[61.90772247 94.50786591]
[76.19467926 89.93808746]
[103.11430359 81.41539001]
[112.37029266 69.61171722]
[121.62628174 57.80804443]
[124.05332947 42.17410660]
[137.99546814 36.93329620]
[147.25144958 25.12962532]
[156.50744629 13.32595348]
[159.37709045 4.55919695]
[166.11349487 1.36096513]
[175.63769531 -10.22736931]
[178.70761108 -18.92602158]
[185.51557922 -21.96895218]
[195.30299377 -33.33585739]
[194.31146240 -48.88109970]
[204.39923096 -60.26933289]
[219.22535706 -61.11879730]
[229.01277161 -72.48570251]
[238.80018616 -83.85260773]
[248.58760071 -95.21951294]
[258.37500000 -106.58641815]
[261.51626587 -122.09264374]
[275.68402100 -126.68874359]
[285.47143555 -138.05564880]
[295.25885010 -149.42254639]
[293.81787109 -160.31523132]
[298.55792236 -169.98257446]
[307.67053223 -175.29130554]
[317.97747803 -174.67268372]
[328.27575684 -185.57891846]
[338.57400513 -196.48513794]
[348.87225342 -207.39137268]
[359.17053223 -218.29760742]
[358.89273071 -233.87196350]
[369.49200439 -244.78573608]
[384.34146118 -244.95457458]
[394.63973999 -255.86080933]
[395.61907959 -271.87393188]
[408.83151245 -280.97399902]
[424.14160156 -276.18020630]
[429.80474854 -261.16992188]
[421.47668457 -247.45777893]
[405.54595947 -245.56256104]
[395.24771118 -234.65632629]
[395.92996216 -219.82156372]
[385.64144897 -208.61439514]
[370.07675171 -207.99935913]
[359.77850342 -197.09312439]
[349.48022461 -186.18688965]
[339.18197632 -175.28065491]
[328.88372803 -164.37442017]
[325.90509033 -145.32119751]
[306.62576294 -139.63513184]
[296.83834839 -128.26823425]
[287.05093384 -116.90132904]
[284.60971069 -102.20813751]
[269.74191284 -96.79900360]
[259.95449829 -85.43209839]
[250.16708374 -74.06519318]
[240.37966919 -62.69828796]
[230.59225464 -51.33138275]
[231.95391846 -36.54350281]
[222.19001770 -24.87641907]
[206.66989136 -23.54844284]
[196.88247681 -12.18153763]
[187.22602844 -0.70316356]
[177.70182800 10.88517094]
[168.31111145 22.58194351]
[159.05513000 34.38561630]
[149.79913330 46.18928528]
[148.03413391 60.97894669]
[133.42994690 67.06403351]
[124.17396545 78.86770630]
[114.91797638 90.67137909]
[128.58180237 84.48271179]
[143.17486572 87.95299530]
[152.59016418 99.62997437]
[152.88758850 114.62702942]
[143.94264221 126.66812134]
[129.49865723 130.71426392]
[115.60020447 125.07220459]
[108.06330872 112.10181427]
[108.75100708 127.08603668]
[109.43870544 142.07026672]
[110.12640381 157.05448914]
[110.81410217 172.03872681]
[124.21244049 179.68646240]
[131.32888794 193.37440491]
[129.89262390 208.73477173]
[120.36193085 220.86611938]
[105.77803802 225.89738464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 131]
[5 130]
[6 129]
[7 128]
[8 127]
[9 46]
[10 45]
[11 44]
[12 43]
[13 41]
[14 40]
[15 39]
[17 37]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[47 119]
[48 118]
[49 117]
[51 115]
[52 114]
[53 113]
[55 112]
[56 111]
[58 110]
[59 109]
[62 106]
[63 105]
[64 104]
[65 103]
[66 102]
[68 100]
[69 99]
[70 98]
[74 96]
[75 95]
[76 94]
[77 93]
[78 92]
[81 89]
[82 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
