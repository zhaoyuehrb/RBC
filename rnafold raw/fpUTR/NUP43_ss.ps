%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCGCGGGAAGAGGCGGUGCUGAGAGGCGCGUACUGUGCUUGCUUUUUGCAGUACCUGCUGCGGCCGCUUUCGGC\
) } def
/len { sequence length } bind def

/coor [
[2.43455386 225.63049316]
[-4.99563789 231.77697754]
[-14.31795979 233.61920166]
[-23.25946045 230.84411621]
[-35.25110245 239.85523987]
[-47.24274445 248.86637878]
[-59.23438644 257.87750244]
[-58.84976578 273.38983154]
[-67.68420410 286.14648438]
[-82.34068298 291.24227905]
[-97.18348694 286.71780396]
[-106.50524902 274.31280518]
[-106.72156525 258.79724121]
[-97.74925995 246.13716125]
[-83.03836060 241.20063782]
[-68.24552155 245.88587952]
[-56.25387955 236.87474060]
[-44.26223755 227.86360168]
[-32.27059555 218.85247803]
[-26.37093925 199.24679565]
[-5.40673637 195.87921143]
[5.41130066 185.48834229]
[16.22933769 175.09747314]
[27.04737473 164.70660400]
[37.86540985 154.31575012]
[48.68344879 143.92488098]
[59.50148392 133.53401184]
[69.89234924 122.71598053]
[79.83918762 111.48831177]
[89.78602600 100.26065063]
[92.44998169 92.39558411]
[100.36656952 88.79154205]
[110.75743103 77.97351074]
[121.14830017 67.15547180]
[131.53916931 56.33743286]
[141.71008301 45.31235123]
[144.83470154 27.29717064]
[161.47946167 22.12756157]
[170.96614075 10.50848675]
[180.45281982 -1.11058736]
[189.93951416 -12.72966194]
[199.42619324 -24.34873581]
[202.55152893 -33.23470306]
[209.53633118 -36.23458099]
[219.48316956 -47.46224213]
[219.95365906 -63.49839401]
[232.87055969 -73.01329803]
[248.32511902 -68.70793915]
[254.46192932 -53.88501358]
[246.57334900 -39.91540527]
[230.71083069 -37.51539993]
[220.76399231 -26.28774071]
[211.04525757 -14.86205578]
[201.55857849 -3.24298120]
[192.07189941 8.37609291]
[182.58522034 19.99516678]
[173.09854126 31.61424255]
[173.96569824 43.85322189]
[165.91633606 53.64319611]
[152.93774414 55.25918961]
[150.80166626 62.55466080]
[142.35720825 66.72830200]
[131.96633911 77.54633331]
[121.57546997 88.36437225]
[111.18460846 99.18241119]
[101.01368713 110.20749664]
[91.06684875 121.43515778]
[81.12001038 132.66281128]
[79.31087494 139.49446106]
[74.86561584 143.58119202]
[69.89234924 144.35205078]
[59.07431412 154.74291992]
[48.25627518 165.13377380]
[37.43824005 175.52464294]
[26.62020302 185.91551208]
[15.80216599 196.30638123]
[4.98412895 206.69723511]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 19]
[5 18]
[6 17]
[7 16]
[21 77]
[22 76]
[23 75]
[24 74]
[25 73]
[26 72]
[27 71]
[28 68]
[29 67]
[30 66]
[32 65]
[33 64]
[34 63]
[35 62]
[36 60]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[44 52]
[45 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
