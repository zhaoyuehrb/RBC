%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGCUCCCAAGCCCAGAGCUGCUCUGCGCAAGCGCGACCGACCGAGCAGCUCCGAGGAGUCCGCCCGGAAACAAACAUUCCCCAGGGCA\
) } def
/len { sequence length } bind def

/coor [
[112.25531006 118.55283356]
[100.30323029 109.48928833]
[94.84902954 109.00839233]
[90.11843109 105.39839172]
[87.87305450 99.37658691]
[76.56735992 89.51853180]
[65.26165771 79.66047668]
[53.95596695 69.80242157]
[42.65027237 59.94436646]
[29.27987099 62.40294647]
[17.14038849 56.73217010]
[10.63855648 45.24129486]
[11.98845577 32.30461121]
[7.23080063 31.42462921]
[3.48012996 29.19101143]
[1.05703580 26.13498878]
[0.05646475 22.83790970]
[0.35278645 19.84585190]
[-9.11353302 8.21018124]
[-18.57985115 -3.42548776]
[-28.04617119 -15.06115723]
[-37.51248932 -26.69682693]
[-46.97880936 -38.33249664]
[-56.44512939 -49.96816635]
[-65.91144562 -61.60383606]
[-75.37776947 -73.23950195]
[-86.16390991 -83.66347504]
[-98.11598969 -92.72702026]
[-110.06806183 -101.79056549]
[-122.02014160 -110.85411072]
[-138.34962463 -112.36409760]
[-144.95994568 -127.37194824]
[-135.05099487 -140.43887329]
[-118.81622314 -138.12274170]
[-112.95659637 -122.80619049]
[-101.00451660 -113.74263763]
[-89.05243683 -104.67909241]
[-77.10036469 -95.61554718]
[-77.66615295 -110.60487366]
[-68.69159698 -122.62391663]
[-54.15903854 -126.33939362]
[-40.51710129 -120.10261536]
[-33.81919861 -106.68106079]
[-37.03744125 -92.03035736]
[-48.74377441 -82.65156555]
[-63.74209595 -82.70582581]
[-54.27577972 -71.07015228]
[-44.80945969 -59.43448257]
[-35.34313965 -47.79881668]
[-25.87682152 -36.16314697]
[-16.41050148 -24.52747536]
[-6.94418240 -12.89180660]
[2.52213669 -1.25613749]
[11.98845577 10.37953186]
[22.22675323 21.34207153]
[38.89455414 19.99545860]
[51.69794846 31.26558685]
[52.50832748 48.63867188]
[63.81402206 58.49672699]
[75.11972046 68.35478210]
[86.42541504 78.21283722]
[97.73110962 88.07089233]
[109.36677551 97.53720856]
[121.31885529 106.60075378]
[133.57339478 115.25096130]
[146.11613464 123.47773743]
[158.65885925 131.70451355]
[171.20159912 139.93128967]
[184.14907837 147.50511169]
[197.46736145 154.40608215]
[210.78564453 161.30705261]
[224.10391235 168.20803833]
[238.46925354 162.02976990]
[253.43009949 166.58029175]
[261.92239380 179.71098328]
[259.93634033 195.22192383]
[248.40966797 205.78933716]
[232.78495789 206.42361450]
[220.43969727 196.82524109]
[217.20294189 181.52630615]
[203.88465881 174.62533569]
[190.56639099 167.72436523]
[177.24810791 160.82337952]
[173.61834717 161.67208862]
[169.38468933 160.66429138]
[165.49363708 157.53215027]
[162.97482300 152.47402954]
[150.43208313 144.24725342]
[137.88935852 136.02047729]
[125.34662628 127.79369354]
[120.37877655 127.92966461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[13 55]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 38]
[28 37]
[29 36]
[30 35]
[65 90]
[66 89]
[67 88]
[68 87]
[69 83]
[70 82]
[71 81]
[72 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
