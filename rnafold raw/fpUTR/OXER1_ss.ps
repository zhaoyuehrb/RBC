%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGCAGGGUUCCCCUUGGCCUGCAAACAGGAACACAGGGUGUUUCUCAGUGGCUGCGAGAAUGCUGAUGAAAACCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[69.48166656 122.46317291]
[63.98054504 137.03627014]
[50.09681702 143.25694275]
[36.23749161 137.92265320]
[22.63621521 144.24763489]
[9.03494167 150.57260132]
[-4.56633282 156.89758301]
[-18.16760826 163.22256470]
[-31.76888275 169.54753113]
[-41.01966095 182.38240051]
[-55.82268524 180.73323059]
[-59.71088028 195.87971497]
[-72.45540619 204.94123840]
[-88.03868866 203.63920593]
[-99.10278320 192.58842468]
[-100.42355347 177.00671387]
[-91.37738037 164.25129700]
[-76.23558044 160.34487915]
[-62.14766312 167.13195801]
[-53.86973572 154.74951172]
[-38.09386063 155.94625854]
[-24.49258423 149.62129211]
[-10.89130974 143.29631042]
[2.70996451 136.97132874]
[16.31123924 130.64636230]
[29.91251373 124.32138062]
[34.76433563 110.28587341]
[48.46786118 103.67768860]
[63.15669250 108.86189270]
[62.16786194 97.83393860]
[64.40890503 86.99091339]
[69.68849182 77.25852203]
[77.55589294 69.46765137]
[87.33942413 64.28344727]
[98.20384216 62.14849854]
[109.22160339 63.24507523]
[119.45207977 67.47956085]
[128.02186584 74.49044037]
[134.19931030 83.67916107]
[148.74761963 80.02585602]
[163.29592896 76.37255096]
[171.08546448 71.12500763]
[178.46391296 72.86738586]
[193.14006042 69.76721954]
[207.81619263 66.66706085]
[222.49232483 63.56690216]
[230.47485352 58.61788177]
[237.78208923 60.63822556]
[252.56503296 58.09564972]
[267.34796143 55.55307770]
[276.47332764 42.92905426]
[291.50152588 40.56111145]
[303.48037720 49.33852768]
[318.26330566 46.79595184]
[333.04626465 44.25337982]
[338.97152710 30.00926590]
[351.67010498 21.24859810]
[367.08996582 20.76686859]
[380.31063843 28.71780014]
[387.11346436 42.56427765]
[385.32772827 57.88793945]
[375.52319336 69.79906464]
[360.82849121 74.49684906]
[345.93261719 70.48225403]
[335.58883667 59.03631973]
[320.80587769 61.57889175]
[306.02294922 64.12146759]
[297.66503906 76.39667511]
[282.70925903 79.18579865]
[269.89053345 70.33601379]
[255.10760498 72.87859344]
[240.32466125 75.42116547]
[225.59248352 78.24303436]
[210.91635132 81.34320068]
[196.24021912 84.44335938]
[181.56407166 87.54351807]
[166.94923401 90.92086029]
[152.40092468 94.57416534]
[137.85261536 98.22747803]
[133.88786316 116.95805359]
[121.27264404 131.35980225]
[103.22722626 137.75642395]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[11 19]
[39 79]
[40 78]
[41 77]
[43 76]
[44 75]
[45 74]
[46 73]
[48 72]
[49 71]
[50 70]
[53 67]
[54 66]
[55 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
