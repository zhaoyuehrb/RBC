%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUGAGCGGCGAGGGGGCGGGGGAGGGGCUGAGCCGGAGGCGGCUCACCUGGCGGGACAGGUGCCUGGCUGCUACAAACCAUGCAAUGAGCC\
) } def
/len { sequence length } bind def

/coor [
[182.23414612 321.09603882]
[193.27293396 310.64550781]
[187.88182068 296.64779663]
[182.49070740 282.65008545]
[176.63485718 268.84036255]
[170.09436035 255.34140015]
[163.32920837 241.95361328]
[156.56405640 228.56582642]
[149.79890442 215.17803955]
[143.03375244 201.79026794]
[136.26860046 188.40248108]
[123.62278748 180.53274536]
[124.30445862 164.72624207]
[117.53930664 151.33845520]
[110.77415466 137.95066833]
[98.12834167 130.08094788]
[98.81001282 114.27442932]
[87.21560669 106.46024323]
[87.80220795 92.49072266]
[74.67250061 83.66340637]
[75.83805847 68.81447601]
[57.74661255 63.76177979]
[49.05347061 47.46547699]
[54.73680496 30.22172737]
[39.68948746 26.19481468]
[32.12098312 12.99737644]
[36.05276108 -1.32312357]
[28.40851212 -14.22914696]
[20.76426125 -27.13516998]
[13.55131912 -33.07253647]
[13.08851147 -40.60264969]
[5.87978554 -53.75690079]
[-1.32894075 -66.91114807]
[-8.53766727 -80.06539917]
[-15.74639320 -93.21964264]
[-22.95512009 -106.37389374]
[-30.16384697 -119.52814484]
[-44.45300674 -127.57500458]
[-44.35821152 -143.97387695]
[-29.97698021 -151.85501099]
[-16.10348892 -143.11096191]
[-17.00959778 -126.73686981]
[-9.80087090 -113.58261871]
[-2.59214449 -100.42837524]
[4.61658192 -87.27412415]
[11.82530785 -74.11987305]
[19.03403473 -60.96562576]
[26.24276161 -47.81137466]
[33.67028427 -34.77941895]
[41.31453705 -21.87339592]
[48.95878601 -8.96737289]
[63.40668869 -5.53317404]
[71.34289551 7.44647408]
[67.64282990 22.57747841]
[79.28005981 22.98508453]
[89.33010864 29.10263824]
[95.15589142 39.46381760]
[95.16113281 51.47169876]
[89.22584534 62.04932785]
[101.87165833 69.91905975]
[101.18998718 85.72557068]
[112.78439331 93.53975677]
[112.19779205 107.50927734]
[125.32749939 116.33659363]
[124.16194153 131.18551636]
[130.92709351 144.57330322]
[137.69224548 157.96109009]
[150.82194519 166.78840637]
[149.65638733 181.63732910]
[156.42153931 195.02511597]
[163.18669128 208.41288757]
[169.95184326 221.80067444]
[176.71699524 235.18846130]
[183.48214722 248.57624817]
[190.28240967 254.98211670]
[190.24122620 262.52633667]
[195.68157959 266.83920288]
[197.66706848 272.43869019]
[196.48841858 277.25897217]
[201.87953186 291.25668335]
[207.27064514 305.25439453]
[222.46763611 305.60040283]
[236.37341309 311.74029541]
[246.86741638 322.73773193]
[252.34941101 336.91577148]
[251.98341370 352.11230469]
[245.82525635 366.00997925]
[234.81399536 376.48950195]
[220.62876892 381.95285034]
[205.43273926 381.56686401]
[191.54316711 375.39041138]
[181.07814026 364.36538696]
[175.63346863 350.17297363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[5 76]
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[13 67]
[14 66]
[15 65]
[17 63]
[19 61]
[21 59]
[24 54]
[27 51]
[28 50]
[29 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
