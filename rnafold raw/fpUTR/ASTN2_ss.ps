%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUCGCUUCGGCGUCCGCCGUCUCCGCAGCUGCCUCCUCUUCCUCCUUCGCCACCGCCGCCACCGCCGCCGCCGCCCGCAGCACCGCAGCCCCUCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[122.38305664 213.08564758]
[118.27811432 198.65826416]
[114.17317200 184.23088074]
[110.06822205 169.80349731]
[105.12474060 164.13346863]
[106.06636810 154.86836243]
[102.40766144 140.32141113]
[91.33278656 139.45240784]
[80.91345978 135.59939575]
[71.93775940 129.05380249]
[59.69480515 137.72041321]
[47.45185089 146.38702393]
[35.20889664 155.05363464]
[28.84999275 170.16972351]
[12.54798889 171.95207214]
[3.07299089 158.56713867]
[10.17206287 143.78419495]
[26.54228973 142.81068420]
[38.78524399 134.14407349]
[51.02819824 125.47746277]
[63.27114868 116.81085205]
[60.33459473 107.63339996]
[59.65524673 98.02155304]
[61.27177429 88.52229309]
[65.09217834 79.67618561]
[70.89905548 71.98663330]
[78.36196899 65.89122009]
[87.05621338 61.73680878]
[96.48704529 59.75981522]
[106.11778259 60.07274246]
[111.10310364 45.92542648]
[116.08843231 31.77810860]
[121.07375336 17.63079262]
[126.05907440 3.48347521]
[113.59915924 11.83515263]
[99.06935120 15.56138134]
[84.12794495 14.23688698]
[70.48019409 8.01283455]
[59.68371201 -2.40042686]
[52.97070312 -15.81443214]
[51.10732269 -30.69824219]
[54.30624008 -45.35317230]
[62.20235825 -58.10665131]
[73.89450073 -67.50313568]
[88.04824066 -72.47019958]
[103.04821014 -72.44094849]
[117.18247223 -67.41873169]
[128.83787537 -57.97672653]
[136.68420410 -45.19254684]
[139.82594299 -30.52525711]
[137.90379333 -15.64640999]
[148.34580994 -26.41508865]
[148.27462769 -41.99176025]
[159.01771545 -52.76398087]
[173.86811829 -52.73585129]
[177.92019653 -68.02935791]
[192.33477783 -71.78022003]
[202.77677917 -82.54889679]
[206.82885742 -97.84240723]
[221.24343872 -101.59326935]
[231.68545532 -112.36194611]
[235.15850830 -128.38911438]
[250.85543823 -133.13658142]
[262.62857056 -121.72058105]
[258.36672974 -105.88490295]
[242.45413208 -101.91993713]
[232.01211548 -91.15126038]
[228.70693970 -76.62799835]
[213.54547119 -72.10688782]
[203.10345459 -61.33821106]
[199.79826355 -46.81495285]
[184.63679504 -42.29384232]
[185.12223816 -27.45133781]
[174.68595886 -16.38161469]
[159.11448669 -15.97307968]
[148.67247009 -5.20440102]
[148.27862549 -0.01242914]
[145.39349365 4.94653320]
[140.20639038 8.46879673]
[135.22106934 22.61611366]
[130.23574829 36.76343155]
[125.25042725 50.91074753]
[120.26509857 65.05805969]
[135.45770264 80.65148926]
[140.35012817 101.86550140]
[133.52119446 122.53759766]
[116.95462036 136.66270447]
[120.61332703 151.20965576]
[124.49561310 165.69854736]
[128.60055542 180.12593079]
[132.70550537 194.55331421]
[136.81044006 208.98069763]
[151.72482300 212.64907837]
[162.79574585 223.29475403]
[167.04518127 238.05407715]
[163.33007812 252.95687866]
[152.64974976 263.99438477]
[137.87718201 268.19754028]
[122.98609161 264.43572998]
[111.98213196 253.72087097]
[107.82529449 238.93519592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[6 88]
[7 87]
[10 21]
[11 20]
[12 19]
[13 18]
[30 83]
[31 82]
[32 81]
[33 80]
[34 79]
[51 76]
[52 75]
[55 72]
[57 70]
[58 69]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
