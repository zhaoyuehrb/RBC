%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCAUAGCGUUCCUGUCCGGAAGUCCUGAGAGGGAAACGCCCGCAAAGGCUGGUUUUUAAGCGGGAGCAUCUCUUCACUCGCAGCAAGUGCGCGUGCGCUGCCUCUCAGCCCAAAUUGGAAAC\
) } def
/len { sequence length } bind def

/coor [
[-6.29117632 403.29580688]
[-12.41481590 416.98889160]
[-18.53845596 430.68200684]
[-24.66209602 444.37509155]
[-30.61590767 458.14288330]
[-36.39898300 471.98327637]
[-36.92667007 488.92901611]
[-53.35623550 493.11297607]
[-61.92486191 478.48373413]
[-50.23936081 466.20019531]
[-44.45628357 452.35980225]
[-44.78393555 444.89495850]
[-38.35519791 438.25146484]
[-32.23155594 424.55834961]
[-26.10791779 410.86526489]
[-19.98427773 397.17214966]
[-27.56760788 380.59704590]
[-20.60958481 363.40802002]
[-3.04239488 356.54461670]
[2.39657712 342.56542969]
[7.83554935 328.58624268]
[13.27452087 314.60708618]
[18.71349335 300.62789917]
[7.61242676 289.20275879]
[2.56238508 274.03326416]
[4.61511230 258.11911011]
[13.41250038 244.63046265]
[27.24784851 236.27636719]
[43.39676285 234.76074219]
[48.48830032 220.65130615]
[53.57984161 206.54187012]
[58.67138290 192.43243408]
[63.76292419 178.32299805]
[68.85446930 164.21356201]
[73.94600677 150.10412598]
[79.03754425 135.99467468]
[76.07971191 121.39672089]
[88.04191589 111.04219818]
[83.72418213 100.15314484]
[87.83625793 89.18477631]
[98.24835968 83.81798553]
[103.68733215 69.83880615]
[109.12630463 55.85961914]
[114.39196777 41.81423569]
[119.30860901 27.64290428]
[124.04959869 13.41184711]
[128.79060364 -0.81920922]
[133.53158569 -15.05026627]
[124.67689514 -27.65584183]
[124.93955231 -42.88031006]
[134.00927734 -54.88880539]
[148.24061584 -59.20239258]
[152.98161316 -73.43344879]
[157.72261047 -87.66450500]
[162.46360779 -101.89556122]
[151.04138184 -111.88599396]
[144.33238220 -125.45184326]
[143.33102417 -140.51208496]
[148.15882874 -154.76971436]
[158.05061340 -166.06207275]
[171.47561646 -172.68890381]
[186.37428284 -173.66830444]
[191.11526489 -187.89936829]
[195.85626221 -202.13041687]
[192.87736511 -217.66865540]
[204.24069214 -227.29798889]
[208.98168945 -241.52905273]
[203.11941528 -256.46267700]
[211.26440430 -270.28436279]
[227.16850281 -272.39126587]
[238.63145447 -261.16717529]
[236.85986328 -245.22224426]
[223.21275330 -236.78805542]
[218.47175598 -222.55699158]
[221.78974915 -208.03666687]
[210.08732605 -197.38941956]
[205.34632874 -183.15837097]
[200.60533142 -168.92730713]
[211.93992615 -159.20845032]
[218.70837402 -145.85429382]
[219.85148621 -130.88572693]
[215.16401672 -116.58134460]
[205.33068848 -105.13061523]
[191.82629395 -98.29873657]
[176.69465637 -97.15456390]
[171.95365906 -82.92350769]
[167.21266174 -68.69245148]
[162.47167969 -54.46139908]
[171.27267456 -42.47472000]
[171.32847595 -27.42610359]
[162.40812683 -15.08589935]
[147.76264954 -10.30927181]
[143.02165222 3.92178512]
[138.28065491 18.15284157]
[133.53965759 32.38389969]
[134.41987610 39.80390167]
[128.50140381 46.90577698]
[129.19781494 54.34527969]
[123.10549164 61.29859161]
[117.66651917 75.27777863]
[112.22754669 89.25695801]
[115.24068451 105.71378326]
[102.15135956 116.13373566]
[104.74501038 131.74090576]
[93.14698792 141.08622742]
[88.05544281 155.19566345]
[82.96390533 169.30509949]
[77.87236023 183.41453552]
[72.78082275 197.52397156]
[67.68927765 211.63340759]
[62.59774017 225.74284363]
[57.50619888 239.85227966]
[67.81570435 249.60244751]
[73.59433746 262.51473999]
[73.99366760 276.61203003]
[68.98619080 289.74954224]
[59.36446762 299.94125366]
[46.61585999 305.66015625]
[32.69267654 306.06686401]
[27.25370598 320.04605103]
[21.81473351 334.02523804]
[16.37576103 348.00442505]
[10.93678951 361.98358154]
[17.81236458 371.83874512]
[19.01355553 383.67395020]
[14.35362148 394.48809814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 11]
[6 10]
[19 123]
[20 122]
[21 121]
[22 120]
[23 119]
[29 112]
[30 111]
[31 110]
[32 109]
[33 108]
[34 107]
[35 106]
[36 105]
[38 103]
[41 101]
[42 100]
[43 99]
[44 97]
[45 95]
[46 94]
[47 93]
[48 92]
[52 88]
[53 87]
[54 86]
[55 85]
[62 78]
[63 77]
[64 76]
[66 74]
[67 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
