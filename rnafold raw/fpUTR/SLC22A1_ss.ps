%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAUUUCAAACCACUCCUUUUCAAAGAUCUCUGAGGGAGACAUUGCACCUGGCCACUGCAGCCCAGAGCAGGUCUGGCCACGGCCAUGAGCAUGCUGAGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[72.79595947 320.76440430]
[57.84837341 319.51156616]
[43.39648056 315.49377441]
[29.94711304 308.85186768]
[17.97194481 299.81887817]
[7.89094591 288.71151733]
[0.05765789 275.91934204]
[-5.25320387 261.89099121]
[-7.85538626 247.11842346]
[-7.65763092 232.11972046]
[-4.66687250 217.42089844]
[1.01200199 203.53744507]
[9.17983341 190.95625305]
[19.55017471 180.11853027]
[31.75283241 171.40817261]
[16.77917671 170.51956177]
[1.80552065 169.63095093]
[-13.16813564 168.74234009]
[-28.14179230 167.85372925]
[-43.11544800 166.96511841]
[-58.08910370 166.07650757]
[-65.46949005 179.43663025]
[-77.92069244 188.26443481]
[-92.97052002 190.80717468]
[-107.63080597 186.55999756]
[-118.99075317 176.36614990]
[-124.79483032 162.24966431]
[-123.89064026 147.01335144]
[-116.45769501 133.68240356]
[-103.97182465 124.90368652]
[-88.91210175 122.42022705]
[-74.26865387 126.72511292]
[-62.94893646 136.96360779]
[-57.20049286 151.10285950]
[-42.22683716 151.99145508]
[-27.25318146 152.88006592]
[-12.27952576 153.76867676]
[2.69412994 154.65728760]
[17.66778564 155.54589844]
[32.64144135 156.43450928]
[36.58581924 153.81018066]
[41.53585052 152.82730103]
[51.66059494 141.75979614]
[61.78533936 130.69230652]
[64.66719055 116.07914734]
[79.69091034 111.11946869]
[89.81565857 100.05197144]
[92.56059265 92.32351685]
[100.40818024 88.81219482]
[104.46913910 73.52104950]
[118.88590240 69.77856445]
[129.33416748 59.01595688]
[139.78244019 48.25334549]
[150.23069763 37.49073792]
[160.67897034 26.72812843]
[171.12722778 15.96551991]
[181.08686829 4.74920511]
[190.53817749 -6.89865303]
[199.98950195 -18.54651070]
[209.44081116 -30.19436836]
[205.30955505 -45.15138245]
[210.79031372 -59.66830063]
[223.77561951 -68.16307068]
[239.27238464 -67.36928558]
[251.32176208 -57.59216309]
[255.29052734 -42.59121323]
[249.65261841 -28.13460541]
[236.57591248 -19.78119850]
[221.08866882 -20.74305153]
[211.63735962 -9.09519291]
[202.18603516 2.55266452]
[192.73472595 14.20052242]
[192.80758667 17.87952995]
[190.99642944 21.76427460]
[187.23200989 24.91801071]
[181.88983154 26.41378593]
[171.44157410 37.17639542]
[160.99330139 47.93900299]
[150.54504395 58.70161057]
[140.09677124 69.46421814]
[129.64851379 80.22682953]
[126.33488464 94.74816132]
[111.17079163 99.26046753]
[100.88315582 110.17671967]
[90.75841522 121.24421692]
[87.15236664 136.64898682]
[72.85283661 140.81704712]
[62.72809219 151.88455200]
[52.60334778 162.95204163]
[67.43357086 160.70159912]
[82.42333221 161.25567627]
[97.04694366 164.59483337]
[110.79154968 170.60197449]
[123.17512512 179.06643677]
[133.76338196 189.69136047]
[142.18496704 202.10412598]
[148.14456177 215.86941528]
[151.43315125 230.50448608]
[151.93539429 245.49607849]
[149.63368225 260.31842041]
[144.60874939 274.45172119]
[137.03680420 287.40029907]
[127.18340302 298.71005249]
[115.39410400 307.98434448]
[102.08236694 314.89791870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 40]
[16 39]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[42 89]
[43 88]
[44 87]
[46 85]
[47 84]
[49 83]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[57 72]
[58 71]
[59 70]
[60 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
