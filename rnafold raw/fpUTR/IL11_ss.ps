%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCCGCGGCCCUGCUGCUCAGGGCACAUGCCUCCCCUCCCCAGGCCGCGGCCCAGCUGACCCUCGGGGCUCCCCCGGCAGCGGACAGGGAAGGGUUAAAGGCCCCCGGCUCCCUGCCCCCUGCCCUGGGGAACCCCUGGCCCUGUGGGGAC\
) } def
/len { sequence length } bind def

/coor [
[-68.36174011 215.08816528]
[-84.00093842 213.05795288]
[-97.98067474 205.81715393]
[-108.62564087 194.25408936]
[-122.39438629 200.20568848]
[-136.16313171 206.15728760]
[-149.93188477 212.10888672]
[-163.70063782 218.06048584]
[-177.46937561 224.01208496]
[-191.23812866 229.96369934]
[-205.00688171 235.91529846]
[-218.77563477 241.86689758]
[-225.46037292 248.18215942]
[-232.88647461 247.79629517]
[-246.77375793 253.46578979]
[-246.07156372 269.35461426]
[-250.83412170 284.50103760]
[-260.47033691 297.08633423]
[-273.80511475 305.60583496]
[-289.22253418 309.04891968]
[-304.86172485 307.01870728]
[-318.84146118 299.77789307]
[-329.48645020 288.21484375]
[-343.25518799 294.16644287]
[-357.02392578 300.11804199]
[-370.79269409 306.06964111]
[-380.13604736 319.54678345]
[-396.45474243 317.92431641]
[-402.96148682 302.87124634]
[-392.96270752 289.87292480]
[-376.74429321 292.30090332]
[-362.97552490 286.34930420]
[-349.20678711 280.39770508]
[-335.43804932 274.44607544]
[-336.69854736 260.31530762]
[-333.51998901 246.46699524]
[-326.20138550 234.26341248]
[-315.44964600 224.90919495]
[-302.31134033 219.33248901]
[-288.07083130 218.09289551]
[-274.12472534 221.32536316]
[-261.84478760 228.72554016]
[-252.44325256 239.57850647]
[-238.55596924 233.90899658]
[-224.72723389 228.09814453]
[-210.95848083 222.14654541]
[-197.18972778 216.19494629]
[-183.42098999 210.24334717]
[-169.65223694 204.29174805]
[-155.88348389 198.34013367]
[-142.11473083 192.38853455]
[-128.34599304 186.43693542]
[-114.57723999 180.48533630]
[-115.83776093 166.35453796]
[-112.65920258 152.50625610]
[-105.34058380 140.30267334]
[-94.58883667 130.94844055]
[-81.45053864 125.37173462]
[-67.21003723 124.13214874]
[-53.26391220 127.36460876]
[-40.98399734 134.76478577]
[-31.58245659 145.61775208]
[-17.69516754 139.94824219]
[-3.80788064 134.27874756]
[5.05082989 122.30492401]
[20.75173569 124.25225830]
[34.63902283 118.58275604]
[48.52631378 112.91325378]
[62.41360092 107.24375153]
[76.30088806 101.57425690]
[90.18817902 95.90475464]
[103.63562012 89.25898743]
[116.57470703 81.67082977]
[129.51377869 74.08267212]
[142.45286560 66.49450684]
[155.39195251 58.90634918]
[164.08050537 42.70250702]
[181.59678650 43.19885254]
[194.37838745 35.34833527]
[207.15998840 27.49781418]
[219.94158936 19.64729500]
[232.72319031 11.79677582]
[240.43295288 -2.01879907]
[255.32740784 -2.08683968]
[268.10900879 -9.93735981]
[275.81875610 -23.75293350]
[290.71322632 -23.82097435]
[303.49481201 -31.67149353]
[316.27642822 -39.52201462]
[329.05801392 -47.37253189]
[341.83963013 -55.22305298]
[354.62121582 -63.07357407]
[363.67926025 -83.53646851]
[385.30145264 -83.61322021]
[397.40063477 -92.47943878]
[409.49981689 -101.34565735]
[421.59899902 -110.21187592]
[433.69818115 -119.07808685]
[442.90032959 -133.31735229]
[459.13055420 -128.41664124]
[458.91430664 -111.46406555]
[442.56439209 -106.97890472]
[430.46520996 -98.11269379]
[418.36602783 -89.24647522]
[406.26684570 -80.38025665]
[394.16766357 -71.51403809]
[394.65911865 -63.51939774]
[391.88525391 -55.90475082]
[386.23672485 -49.96250153]
[378.59844971 -46.73294067]
[370.21154785 -46.82262802]
[362.47174072 -50.29197311]
[349.69015503 -42.44145203]
[336.90853882 -34.59093094]
[324.12695312 -26.74041176]
[311.34533691 -18.88989258]
[298.56375122 -11.03937244]
[291.76818848 2.21467996]
[275.95953369 2.84424210]
[263.17791748 10.69476223]
[256.38238525 23.94881439]
[240.57369995 24.57837677]
[227.79209900 32.42889786]
[215.01049805 40.27941513]
[202.22889709 48.12993622]
[189.44729614 55.98045731]
[186.31143188 67.70249939]
[175.67535400 74.33740234]
[162.98010254 71.84542847]
[150.04103088 79.43359375]
[137.10194397 87.02175140]
[124.16286469 94.60990906]
[111.22378540 102.19807434]
[125.64293671 106.33184052]
[134.17323303 118.67015839]
[132.94783020 133.62002563]
[122.52223969 144.40458679]
[107.62240601 146.13517761]
[95.00248718 138.02729797]
[90.38315582 123.75629425]
[95.85767365 109.79204559]
[81.97039032 115.46154022]
[68.08309937 121.13104248]
[54.19581223 126.80054474]
[40.30852509 132.47004700]
[26.42123604 138.13954163]
[16.56921387 150.51889038]
[1.86161995 148.16603088]
[-12.02566814 153.83554077]
[-25.91295624 159.50503540]
[-25.21076775 175.39384460]
[-29.97332001 190.54028320]
[-39.60954666 203.12557983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 53]
[5 52]
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[12 45]
[14 44]
[15 43]
[23 34]
[24 33]
[25 32]
[26 31]
[62 150]
[63 149]
[64 148]
[66 146]
[67 145]
[68 144]
[69 143]
[70 142]
[71 141]
[72 133]
[73 132]
[74 131]
[75 130]
[76 129]
[78 126]
[79 125]
[80 124]
[81 123]
[82 122]
[84 120]
[85 119]
[87 117]
[88 116]
[89 115]
[90 114]
[91 113]
[92 112]
[94 106]
[95 105]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
