%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:19:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUAUUGACUGAGGCGGCCAAGCGGCUCCGGGACAGGGGGUACGGGGGGUGGGGGCGGGUGGUUGCCUGCGGGAGGCCGCCGCGGGUCAUGUGACCGGAAGGGCUCCUCACGGACGCCGUCCCUCCUCGGCGCGGCCUGAGCGCCCGGCCCGACCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[110.39997864 855.54351807]
[109.25173950 840.58752441]
[108.10350037 825.63159180]
[106.95526123 810.67559814]
[105.80702209 795.71960449]
[93.04662323 788.08349609]
[87.15986633 774.23394775]
[90.59719849 759.40026855]
[102.24459076 749.31835938]
[98.58001709 742.85974121]
[101.22039795 734.06536865]
[100.35884857 719.09014893]
[99.49729919 704.11486816]
[95.95711517 697.58721924]
[98.76547241 688.84509277]
[98.19092560 673.85607910]
[97.61638641 658.86706543]
[97.04184723 643.87811279]
[85.97361755 633.97711182]
[85.17742920 618.78430176]
[95.63755798 607.24206543]
[95.06301117 592.25305176]
[86.84390259 579.83148193]
[94.04694366 565.74511719]
[93.47239685 550.75610352]
[85.25328827 538.33453369]
[92.45632935 524.24810791]
[91.88178253 509.25912476]
[83.66267395 496.83755493]
[90.86570740 482.75115967]
[90.29116821 467.76217651]
[89.71662903 452.77316284]
[89.14208984 437.78417969]
[88.56755066 422.79519653]
[86.19880676 420.12420654]
[85.03055573 416.15646362]
[85.66556549 411.48025513]
[88.41562653 406.93402100]
[88.70294952 391.93676758]
[88.99027252 376.93951416]
[89.27759552 361.94226074]
[89.56491852 346.94500732]
[86.53480530 340.16552734]
[90.00411987 331.66400146]
[90.57866669 316.67498779]
[91.15320587 301.68600464]
[91.72774506 286.69702148]
[84.48361206 273.68270874]
[92.74382019 260.18902588]
[82.46958923 243.84034729]
[93.34937286 226.90637207]
[93.34937286 211.90637207]
[93.34937286 196.90637207]
[93.34937286 181.90637207]
[93.34937286 166.90637207]
[93.34937286 151.90637207]
[93.20570374 136.90705872]
[92.91838074 121.90980530]
[77.48346710 104.81610107]
[84.57537842 82.90409088]
[78.70265961 69.10150909]
[72.82994080 55.29893494]
[66.95722198 41.49635696]
[61.08449936 27.69377708]
[55.21178055 13.89119911]
[49.33905792 0.08862169]
[36.81644440 -9.58064175]
[38.95317459 -24.32118607]
[33.08045578 -38.12376404]
[19.65698624 -47.54409027]
[21.37281990 -63.85322571]
[36.46285248 -70.27373505]
[49.40375519 -60.20074463]
[46.88303375 -43.99648285]
[52.75575256 -30.19390678]
[64.85831451 -21.51189613]
[63.14163589 -5.78409863]
[69.01435852 8.01847935]
[74.88707733 21.82105637]
[80.75979614 35.62363434]
[86.63251495 49.42621231]
[92.50524139 63.22879028]
[98.37796021 77.03137207]
[100.00000000 76.97416687]
[101.62203979 77.03137207]
[99.90536499 61.30357361]
[112.00792694 52.62155914]
[117.88064575 38.81898499]
[123.75336456 25.01640511]
[129.62608337 11.21382713]
[127.10536194 -4.99043131]
[140.04626465 -15.06342125]
[155.13629150 -8.64291477]
[156.85212708 7.66622257]
[143.42866516 17.08654785]
[137.55593872 30.88912582]
[131.68322754 44.69170380]
[125.81050110 58.49428177]
[127.94723511 73.23482513]
[115.42462158 82.90409088]
[120.97341156 90.49710083]
[123.02354431 99.67533112]
[121.23303223 108.90772247]
[115.90054321 116.65418243]
[107.91562653 121.62248230]
[108.20294952 136.61973572]
[111.50878906 145.18615723]
[108.34937286 151.90637207]
[108.34937286 166.90637207]
[108.34937286 181.90637207]
[108.34937286 196.90637207]
[108.34937286 211.90637207]
[108.34937286 226.90637207]
[116.51287079 234.18278503]
[119.24226379 244.54486084]
[115.86404419 254.48165894]
[107.73281097 260.76358032]
[114.93585205 274.84997559]
[106.71673584 287.27154541]
[106.14219666 302.26055908]
[105.56765747 317.24954224]
[104.99311829 332.23852539]
[104.56216431 347.23233032]
[104.27484131 362.22958374]
[103.98751831 377.22683716]
[103.70019531 392.22409058]
[103.41287231 407.22134399]
[103.55654144 422.22064209]
[104.13108063 437.20962524]
[104.70561981 452.19863892]
[105.28015900 467.18762207]
[105.85470581 482.17660522]
[114.11491394 495.67028809]
[106.87078094 508.68460083]
[107.44532013 523.67358398]
[115.70552826 537.16729736]
[108.46139526 550.18157959]
[109.03593445 565.17053223]
[117.29614258 578.66424561]
[110.05200958 591.67852783]
[110.62654877 606.66754150]
[121.93953705 617.37518311]
[122.30867767 632.58435059]
[112.03083801 643.30358887]
[112.60537720 658.29254150]
[113.17992401 673.28155518]
[113.75446320 688.27056885]
[114.47254181 703.25335693]
[115.33408356 718.22857666]
[116.19563293 733.20379639]
[117.20057678 748.17010498]
[130.25045776 756.35589600]
[135.91184998 770.49102783]
[132.20820618 785.07684326]
[120.76300812 794.57135010]
[121.91124725 809.52734375]
[123.05948639 824.48333740]
[124.20772552 839.43933105]
[125.35596466 854.39532471]
[136.55027771 865.88732910]
[134.40213013 881.78588867]
[120.55936432 889.89501953]
[105.64099121 883.99401855]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 159]
[2 158]
[3 157]
[4 156]
[5 155]
[9 151]
[11 150]
[12 149]
[13 148]
[15 147]
[16 146]
[17 145]
[18 144]
[21 141]
[22 140]
[24 138]
[25 137]
[27 135]
[28 134]
[30 132]
[31 131]
[32 130]
[33 129]
[34 128]
[38 127]
[39 126]
[40 125]
[41 124]
[42 123]
[44 122]
[45 121]
[46 120]
[47 119]
[49 117]
[51 113]
[52 112]
[53 111]
[54 110]
[55 109]
[56 108]
[57 106]
[58 105]
[60 83]
[61 82]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[68 75]
[69 74]
[85 100]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
