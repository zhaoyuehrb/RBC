%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCACCUGCGGCCGCGGGCCCCUGAUCUUCGUGCAGCCGCCGCGGGUCCGUGCGCCCAGCGUCCCAGGGCCCAGGCCGAGCAGACAAAGAUCAUUCCACUCAGCCUGGGACG\
) } def
/len { sequence length } bind def

/coor [
[209.95570374 239.64514160]
[196.19766235 233.66885376]
[187.01054382 221.81149292]
[184.65972900 206.99685669]
[189.72486877 192.87791443]
[200.95700073 182.93612671]
[215.58529663 179.62289429]
[202.66375732 172.00491333]
[189.74220276 164.38693237]
[176.82064819 156.76895142]
[169.35954285 156.07331848]
[163.65425110 148.76229858]
[150.94561768 140.79420471]
[136.05242920 140.58877563]
[128.47042847 126.70267487]
[115.76177979 118.73458862]
[103.05313873 110.76650238]
[90.23684692 102.97274780]
[77.31529999 95.35476685]
[64.39375305 87.73678589]
[51.47220230 80.11881256]
[35.65472412 79.77537537]
[28.62049484 66.64644623]
[15.59609985 59.20566559]
[-0.22485746 59.29441071]
[-7.61507797 46.36251450]
[-20.73988914 39.10033035]
[-33.86470032 31.83814240]
[-46.98950958 24.57595444]
[-60.11431885 17.31376839]
[-75.93527985 17.40251350]
[-83.32550049 4.47061825]
[-96.45030975 -2.79156876]
[-105.60955811 -4.24402094]
[-109.83049011 -10.43560791]
[-122.75204468 -18.05358696]
[-139.14649963 -17.66177177]
[-147.45086670 -31.80283356]
[-139.12231445 -45.92965698]
[-122.72853851 -45.50978088]
[-115.13406372 -30.97513390]
[-102.21251678 -23.35715485]
[-89.18811798 -15.91637897]
[-76.06330872 -8.65419197]
[-61.18112564 -9.26237679]
[-52.85213089 4.18895817]
[-39.72732162 11.45114517]
[-26.60251236 18.71333122]
[-13.47770119 25.97551918]
[-0.35289127 33.23770523]
[14.52929211 32.62952042]
[22.85828590 46.08085632]
[30.33561134 46.57242966]
[36.23847198 53.72489548]
[51.13171387 53.52344131]
[59.09018326 67.19725800]
[72.01172638 74.81523895]
[84.93328094 82.43321991]
[97.85482788 90.05120087]
[105.96203613 91.13393402]
[111.02122498 98.05786133]
[123.72986603 106.02594757]
[136.43850708 113.99403381]
[152.24070740 114.76939392]
[158.91369629 128.08555603]
[171.62234497 136.05364990]
[184.43862915 143.84741211]
[197.36018372 151.46539307]
[210.28172302 159.08335876]
[223.20327759 166.70133972]
[234.04687500 167.02665710]
[240.46641541 174.19978333]
[254.85354614 178.44363403]
[269.24069214 182.68750000]
[283.62780762 186.93135071]
[298.01495361 191.17520142]
[312.40209961 195.41906738]
[326.78921509 199.66291809]
[342.21463013 196.14614868]
[352.23281860 207.16816711]
[366.61996460 211.41201782]
[381.00708008 215.65588379]
[394.76766968 208.35627747]
[409.29782104 212.86509705]
[416.17205811 226.02870178]
[430.55920410 230.27255249]
[441.63265991 219.62951660]
[456.54791260 215.96469116]
[471.29281616 220.26388550]
[481.90109253 231.37065125]
[485.51916504 246.29731750]
[481.17376709 261.02868652]
[470.03378296 271.60208130]
[455.09585571 275.17333984]
[440.37820435 270.78179932]
[429.83975220 259.60873413]
[426.31533813 244.65968323]
[411.92822266 240.41583252]
[399.01022339 247.74119568]
[384.35916138 243.64227295]
[376.76324463 230.04301453]
[362.37609863 225.79916382]
[347.98895264 221.55529785]
[333.59262085 225.37562561]
[322.54537964 214.05006409]
[308.15823364 209.80619812]
[293.77108765 205.56234741]
[279.38397217 201.31848145]
[264.99682617 197.07463074]
[250.60969543 192.83078003]
[236.22254944 188.58691406]
[243.78604126 201.54043579]
[244.18615723 216.53509521]
[237.32421875 229.87351990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 70]
[8 69]
[9 68]
[10 67]
[12 66]
[13 65]
[15 63]
[16 62]
[17 61]
[18 59]
[19 58]
[20 57]
[21 56]
[23 54]
[24 52]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[32 44]
[33 43]
[35 42]
[36 41]
[72 111]
[73 110]
[74 109]
[75 108]
[76 107]
[77 106]
[78 105]
[80 103]
[81 102]
[82 101]
[85 98]
[86 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
