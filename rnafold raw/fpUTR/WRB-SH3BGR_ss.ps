%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGAGGGCGACGCAGUUCGCAGGCGCGUCGGCGCGCCUGUUCUGGGGCGCUUGGCUUCACCGCGCAGGCGCGGUCGCCGCUGUUGUUGUGGUCCCCAUGGAGCUGCCGUAGCGGACCCAGCACAGCCAGGAGCGUCCGGG\
) } def
/len { sequence length } bind def

/coor [
[26.22745895 207.11146545]
[22.61294365 221.66944885]
[18.99842834 236.22744751]
[24.05165100 251.82864380]
[12.86782360 263.82254028]
[-3.04809260 259.87088013]
[-7.32316685 244.03877258]
[4.44043064 232.61293030]
[8.05494595 218.05494690]
[11.66946125 203.49694824]
[6.30782175 198.25262451]
[-8.13715076 202.29524231]
[-4.41545868 187.76400757]
[-9.77709866 182.51969910]
[-24.25157166 186.45538330]
[-38.72604752 190.39106750]
[-43.62683868 200.21273804]
[-52.95547485 205.56677246]
[-63.46791458 204.87272644]
[-71.66107178 198.60643005]
[-86.29546356 201.89801025]
[-100.92985535 205.18959045]
[-115.56425476 208.48117065]
[-130.19865417 211.77273560]
[-144.83303833 215.06431580]
[-159.46743774 218.35589600]
[-174.10183716 221.64747620]
[-188.73622131 224.93905640]
[-200.41950989 236.44700623]
[-216.15316772 231.82273865]
[-219.75177002 215.82330322]
[-207.51338196 204.90754700]
[-192.02780151 210.30465698]
[-177.39341736 207.01307678]
[-162.75901794 203.72149658]
[-148.12461853 200.42993164]
[-133.49021912 197.13835144]
[-118.85583496 193.84677124]
[-104.22143555 190.55519104]
[-89.58704376 187.26361084]
[-74.95264435 183.97203064]
[-61.82669449 169.83663940]
[-42.66173172 175.91658020]
[-28.18725586 171.98089600]
[-13.71278286 168.04521179]
[-0.22925608 161.47296143]
[11.78789616 152.49588013]
[23.80504799 143.51879883]
[35.82220078 134.54171753]
[47.83935165 125.56462860]
[59.85650635 116.58753967]
[71.87365723 107.61045837]
[83.89080811 98.63336945]
[89.24566650 84.62174988]
[86.27864075 69.91812134]
[83.31161499 55.21449280]
[73.83660126 49.67308807]
[69.11304474 40.00989532]
[70.50279236 29.56663513]
[77.29867554 21.80711746]
[74.98494720 6.98663759]
[72.67121124 -7.83384275]
[70.35747528 -22.65432358]
[68.04373932 -37.47480392]
[65.73001099 -52.29528427]
[55.02226257 -64.71607971]
[60.67984772 -80.10840607]
[76.88272858 -82.63795471]
[86.96276855 -69.70254517]
[80.55049133 -54.60901642]
[82.86421967 -39.78853607]
[85.17795563 -24.96805763]
[87.49169159 -10.14757729]
[89.80542755 4.67290354]
[92.11915588 19.49338341]
[105.35288239 33.52793884]
[98.01524353 52.24746323]
[100.98226929 66.95109558]
[103.94930267 81.65472412]
[116.16210175 90.36376953]
[131.03013611 88.37845612]
[145.89817810 86.39315033]
[160.76622009 84.40784454]
[175.63426208 82.42253876]
[183.80183411 78.15468597]
[190.85273743 80.56153870]
[205.76106262 78.90562439]
[220.66937256 77.24971771]
[235.57769775 75.59380341]
[243.83769226 71.50768280]
[250.83363342 74.06992340]
[265.77493286 72.74422455]
[280.71624756 71.41851807]
[295.65753174 70.09281921]
[310.59884644 68.76712036]
[325.52456665 67.27622223]
[338.38623047 58.06275558]
[351.88986206 64.34774780]
[366.79818726 62.69184113]
[381.70651245 61.03593063]
[396.61483765 59.38002014]
[407.71972656 47.80156708]
[423.68212891 49.40811539]
[432.25704956 62.96725845]
[426.86654663 78.07758331]
[411.64572144 83.14773560]
[398.27072144 74.28833771]
[383.36242676 75.94425201]
[368.45410156 77.60015869]
[353.54577637 79.25607300]
[341.75045776 88.35108948]
[327.18048096 82.18453979]
[320.82958984 86.07996368]
[311.92453003 83.70841980]
[296.98324585 85.03411865]
[282.04193115 86.35982513]
[267.10064697 87.68552399]
[252.15933228 89.01123047]
[237.23361206 90.50212097]
[222.32528687 92.15803528]
[207.41697693 93.81394196]
[192.50865173 95.46985626]
[177.61956787 97.29057312]
[162.75152588 99.27587891]
[147.88348389 101.26119232]
[133.01544189 103.24649811]
[118.14740753 105.23180389]
[112.70035553 111.84889221]
[105.43605804 114.89103699]
[98.28363037 114.23198700]
[92.86789703 110.65052795]
[80.85074615 119.62760925]
[68.83358765 128.60469055]
[56.81643677 137.58177185]
[44.79928589 146.55886841]
[32.78213501 155.53594971]
[20.76498032 164.51303101]
[8.74782848 173.49011230]
[14.76523209 176.58972168]
[20.04440880 181.76539612]
[24.03279877 188.81738281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[14 45]
[15 44]
[16 43]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[46 138]
[47 137]
[48 136]
[49 135]
[50 134]
[51 133]
[52 132]
[53 131]
[54 79]
[55 78]
[56 77]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
[80 127]
[81 126]
[82 125]
[83 124]
[84 123]
[86 122]
[87 121]
[88 120]
[89 119]
[91 118]
[92 117]
[93 116]
[94 115]
[95 114]
[96 112]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
