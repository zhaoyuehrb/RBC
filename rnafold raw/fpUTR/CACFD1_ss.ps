%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:29:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUAAUAUGCUCCCUCUCCCACAAGGCAGCGCGCCGGCUCGGACGCGGCCGGCUACCGAGCCCUUUGUGAGGGCUGUGAGCUGCGCCUGACGGUGGCACC\
) } def
/len { sequence length } bind def

/coor [
[95.55699158 205.70050049]
[103.79203796 191.51895142]
[103.33460236 176.52593994]
[102.87715912 161.53291321]
[102.41971588 146.53988647]
[101.96227264 131.54685974]
[95.94887543 127.06478119]
[86.98450470 139.09141541]
[74.95801544 130.12684631]
[83.92208862 118.10060120]
[77.90869904 113.61851501]
[63.40998840 117.46396637]
[48.91128159 121.30941010]
[37.55586243 132.32598877]
[23.27037048 128.11006165]
[8.77166080 131.95552063]
[-5.72704697 135.80096436]
[-11.19886398 150.32124329]
[-24.17894745 158.82402039]
[-39.67619324 158.03977966]
[-51.73159027 148.27008057]
[-55.70959473 133.27157593]
[-50.08058167 118.81149292]
[-37.00902557 110.45003510]
[-21.52120018 111.40235138]
[-9.57249355 121.30225372]
[4.92621517 117.45680237]
[19.42492294 113.61135864]
[29.74329948 102.86983490]
[45.06583405 106.81069946]
[59.56454468 102.96525574]
[74.06325531 99.11981201]
[78.78544617 84.88249969]
[69.45867157 73.13468170]
[60.13189316 61.38686371]
[50.62705231 49.78264236]
[40.94635010 38.32471848]
[31.26564980 26.86679268]
[16.42482376 18.67007256]
[20.19286156 2.14015388]
[37.11988068 1.18499887]
[42.72357559 17.18609238]
[52.40427399 28.64401627]
[62.08497620 40.10194016]
[68.92213440 43.23292160]
[71.87971497 52.06008911]
[81.20648956 63.80790710]
[90.53326416 75.55572510]
[105.23944092 78.51012421]
[118.37963104 71.27580261]
[131.51982117 64.04148102]
[144.54815674 56.60761261]
[157.46160889 48.97592926]
[170.37507629 41.34424591]
[183.28852844 33.71256256]
[196.20199585 26.08087921]
[202.12284851 18.89690208]
[209.62768555 18.42028236]
[214.12612915 3.50714111]
[227.55520630 -3.64230347]
[241.74488831 0.73818028]
[254.88508606 -6.49614191]
[268.02526855 -13.73046398]
[281.16546631 -20.96478653]
[294.30563354 -28.19910812]
[307.44583130 -35.43342972]
[320.58602905 -42.66775131]
[331.54522705 -55.60344696]
[347.00921631 -48.65349197]
[344.61169434 -31.86991882]
[327.82034302 -29.52756310]
[314.68014526 -22.29324150]
[301.53997803 -15.05891895]
[288.39978027 -7.82459688]
[275.25958252 -0.59027457]
[262.11941528 6.64404774]
[248.97921753 13.87837029]
[245.09205627 28.21104431]
[231.86907959 35.73486328]
[216.86201477 31.56047058]
[203.83367920 38.99433899]
[190.92021179 46.62602234]
[178.00675964 54.25770187]
[165.09329224 61.88938522]
[152.17984009 69.52107239]
[147.95121765 75.73947144]
[138.75413513 77.18167114]
[125.61395264 84.41599274]
[112.47376251 91.65031433]
[116.82257080 93.81086731]
[120.70140839 97.60469055]
[123.57710266 102.89426422]
[124.96391296 109.38190460]
[124.46891022 116.62645721]
[121.83173370 124.07241821]
[116.95529175 131.08941650]
[117.41273499 146.08244324]
[117.87017822 161.07546997]
[118.32762146 176.06849670]
[118.78506470 191.06150818]
[127.86936188 204.71463013]
[120.34611511 219.28627014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[11 32]
[12 31]
[13 30]
[15 28]
[16 27]
[17 26]
[33 48]
[34 47]
[35 46]
[36 44]
[37 43]
[38 42]
[49 89]
[50 88]
[51 87]
[52 85]
[53 84]
[54 83]
[55 82]
[56 81]
[58 80]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
[67 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
