%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGGAGCCGCCCGGUCGCCUGCGCGCUCCCUCCGGCGGCGUCCCCAGCCCGCGGCCCCUCUGCUGCCGGCCCCCGGCUCGCCGGCUGCGGGAGUGGCCUCAAG\
) } def
/len { sequence length } bind def

/coor [
[114.55020905 184.42356873]
[113.65314484 169.45040894]
[112.75608063 154.47726440]
[111.85902405 139.50410461]
[110.96195984 124.53096008]
[92.41993713 123.10203552]
[81.07919312 110.74472046]
[66.28182983 113.20198822]
[51.48447418 115.65925598]
[36.68711472 118.11653137]
[21.88975716 120.57379913]
[7.09239769 123.03106689]
[-7.69274664 136.57144165]
[-25.54841232 129.40943909]
[-40.17233276 132.74725342]
[-54.12124252 147.14759827]
[-72.37326813 141.06626892]
[-86.77139282 145.27267456]
[-101.16952515 149.47908020]
[-112.10509491 161.69976807]
[-128.09869385 158.07525635]
[-132.69746399 142.33412170]
[-121.17058563 130.66949463]
[-105.37593079 135.08096313]
[-90.97780609 130.87454224]
[-76.57967377 126.66813660]
[-72.39027405 117.12893677]
[-63.40670395 111.42715454]
[-52.54843903 111.70816040]
[-43.51014709 118.12332916]
[-28.88622665 114.78551483]
[-24.13383865 105.51393890]
[-14.82535648 100.35961914]
[-4.00333357 101.28948975]
[4.63512897 108.23370361]
[19.43248749 105.77643585]
[34.22984695 103.31916809]
[49.02720642 100.86190033]
[63.82456589 98.40463257]
[78.62192535 95.94736481]
[83.44884491 84.34673309]
[94.27050018 76.89704132]
[107.97577667 76.49131775]
[120.20242310 83.87798309]
[126.72541046 97.22785187]
[140.14106750 90.51815796]
[153.55673218 83.80846405]
[163.24165344 68.23693085]
[180.65216064 69.77722168]
[193.86108398 62.66919327]
[207.07002258 55.56116486]
[220.27894592 48.45313263]
[233.48788452 41.34510422]
[246.69682312 34.23707199]
[259.90576172 27.12904358]
[273.11468506 20.02101326]
[286.32360840 12.91298389]
[287.23135376 4.24573374]
[291.53399658 -3.22298002]
[298.42260742 -8.24383736]
[306.66372681 -10.01348782]
[314.81988525 -8.30234623]
[321.50039673 -3.48118019]
[335.46350098 -8.96129608]
[346.50527954 -23.60199165]
[363.70761108 -20.50723267]
[377.50051880 -26.40260887]
[391.29342651 -32.29798508]
[405.08633423 -38.19335938]
[418.87927246 -44.08873367]
[431.06741333 -55.87368774]
[445.76583862 -47.42424393]
[441.71551514 -30.96121597]
[424.77462769 -30.29581833]
[410.98171997 -24.40044212]
[397.18881226 -18.50506783]
[383.39590454 -12.60969162]
[369.60296631 -6.71431637]
[364.74261475 4.47486401]
[353.16430664 9.45073795]
[340.94363403 5.00181055]
[326.98052979 10.48192596]
[315.58792114 28.80820465]
[293.43164062 26.12191582]
[280.22271729 33.22994614]
[267.01379395 40.33797836]
[253.80485535 47.44600677]
[240.59591675 54.55403519]
[227.38697815 61.66206741]
[214.17805481 68.77009583]
[200.96911621 75.87812805]
[187.76017761 82.98615265]
[183.92236328 94.56597137]
[172.83670044 100.55968475]
[160.26643372 97.22412109]
[146.85076904 103.93382263]
[133.43510437 110.64351654]
[125.93511200 123.63389587]
[126.83217621 138.60705566]
[127.72923279 153.58020020]
[128.62629700 168.55335999]
[129.52336121 183.52650452]
[136.50611877 198.97569275]
[123.59371948 209.96232605]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 102]
[2 101]
[3 100]
[4 99]
[5 98]
[7 40]
[8 39]
[9 38]
[10 37]
[11 36]
[12 35]
[14 31]
[15 30]
[17 26]
[18 25]
[19 24]
[45 97]
[46 96]
[47 95]
[49 92]
[50 91]
[51 90]
[52 89]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[63 82]
[64 81]
[66 78]
[67 77]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
