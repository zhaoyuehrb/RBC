%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCAGCCCGCCUCAGGGAAGCGAGCCCGGGCGCCGGCGGGCGGCCGUCGCGUCUGACAGACCACUGCAGACCACGGGCCGAGGCCCAGCGCCCGUCCGCAGCGCGGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[-22.75017357 192.83195496]
[-31.85424805 180.91072083]
[-28.48396301 166.29371643]
[-42.67122269 171.16421509]
[-56.85848236 176.03469849]
[-64.07864380 181.85885620]
[-71.50427246 180.83807373]
[-85.82034302 185.31579590]
[-100.13642120 189.79351807]
[-114.32367706 194.66400146]
[-128.37135315 199.92356873]
[-142.41902161 205.18313599]
[-156.46669006 210.44270325]
[-170.51435852 215.70225525]
[-175.15759277 220.72050476]
[-180.80097961 222.29415894]
[-185.48345947 220.84115601]
[-199.79953003 225.31887817]
[-214.11560059 229.79660034]
[-219.96560669 244.29872131]
[-233.79296875 251.60200500]
[-249.06883240 248.25807190]
[-258.58041382 235.84582520]
[-257.83660889 220.22593689]
[-247.18864441 208.77365112]
[-231.66415405 206.89639282]
[-218.59332275 215.48052979]
[-204.27725220 211.00280762]
[-189.96118164 206.52508545]
[-175.77391052 201.65458679]
[-161.72624207 196.39503479]
[-147.67857361 191.13546753]
[-133.63090515 185.87590027]
[-119.58324432 180.61633301]
[-116.78056335 176.59367371]
[-111.36058044 174.36929321]
[-104.61414337 175.47744751]
[-90.29806519 170.99972534]
[-75.98199463 166.52200317]
[-61.72897339 161.84744263]
[-47.54171371 156.97695923]
[-33.35445404 152.10646057]
[-19.53613853 146.27087402]
[-6.15232468 139.49787903]
[7.23148870 132.72486877]
[20.61530304 125.95187378]
[33.99911499 119.17887115]
[47.38293076 112.40586853]
[51.99370193 106.49633026]
[61.23014832 105.63637543]
[74.79550934 99.23473358]
[88.36086273 92.83308411]
[98.36706543 81.65829468]
[103.23755646 67.47103882]
[108.10804749 53.28377914]
[112.97853851 39.09651947]
[117.84902954 24.90926170]
[117.68768311 15.63427162]
[123.05413055 10.40138531]
[128.31369019 -3.64628291]
[133.57325745 -17.69395065]
[130.34181213 -33.77156830]
[142.82684326 -44.40434265]
[158.18482971 -38.65418625]
[160.61679077 -22.43636703]
[147.62092590 -12.43438816]
[142.36135864 1.61328042]
[137.10180664 15.66094875]
[132.03628540 29.77975273]
[127.16580200 43.96701050]
[122.29531097 58.15427017]
[117.42481232 72.34152985]
[112.55432129 86.52878571]
[117.40156555 92.25191498]
[132.16156006 89.57934570]
[127.09605408 103.69818115]
[131.94329834 109.42131042]
[146.73872375 106.95239258]
[161.53413391 104.48347473]
[176.32955933 102.01454926]
[188.63746643 91.17723083]
[204.08822632 96.67320251]
[206.78744507 112.84868622]
[193.95837402 123.06372833]
[178.79847717 116.80997467]
[164.00305176 119.27889252]
[149.20764160 121.74781036]
[134.41221619 124.21672821]
[132.97439575 131.57762146]
[128.66090393 153.66027832]
[141.43969727 161.51536560]
[154.21847534 169.37046814]
[169.53106689 165.45887756]
[183.08178711 173.59234619]
[186.83126831 188.94541931]
[178.55499268 202.40939331]
[163.16313171 205.99633789]
[149.78739929 197.57817078]
[146.36338806 182.14924622]
[133.58459473 174.29415894]
[120.80580902 166.43907166]
[92.59769440 138.23469543]
[94.76251221 106.39844513]
[81.19715118 112.80008698]
[67.63179779 119.20173645]
[54.15592957 125.78968811]
[40.77211761 132.56268311]
[27.38830185 139.33567810]
[14.00448895 146.10868835]
[0.62067562 152.88168335]
[-12.76313782 159.65469360]
[0.06384433 167.43083191]
[2.26101136 182.26904297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 42]
[4 41]
[5 40]
[7 39]
[8 38]
[9 37]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[17 29]
[18 28]
[19 27]
[43 111]
[44 110]
[45 109]
[46 108]
[47 107]
[48 106]
[50 105]
[51 104]
[52 103]
[53 73]
[54 72]
[55 71]
[56 70]
[57 69]
[59 68]
[60 67]
[61 66]
[77 88]
[78 87]
[79 86]
[80 85]
[90 101]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
