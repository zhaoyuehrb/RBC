%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGACUCAAAGGACCCUCCCGCGCCCCGCGAGGCUCCGGGGUCUCGGGCUUCCGCCUUCUUGCUGCCCUCGUUCUUGCCAGGGCCGCGGUUAGUCCCUGCUGGCCACCCCACUGCGACC\
) } def
/len { sequence length } bind def

/coor [
[95.79621887 182.28392029]
[107.63102722 172.57846069]
[104.53775024 157.90087891]
[101.44448090 143.22328186]
[94.22337341 142.85987854]
[87.16372681 141.29853821]
[80.46286011 138.58288574]
[74.30805969 134.78883362]
[68.87135315 130.02243042]
[64.30470276 124.41688538]
[60.73574066 118.12889099]
[58.26422501 111.33418274]
[43.32611465 112.69539642]
[28.38800621 114.05661011]
[13.44989681 115.41782379]
[-1.48821211 116.77902985]
[-16.42632103 118.14024353]
[-31.36442947 119.50145721]
[-46.21175003 121.63617706]
[-60.92826080 124.53865814]
[-75.60585022 127.63193512]
[-90.24205017 130.91548157]
[-104.87825012 134.19903564]
[-119.51444244 137.48258972]
[-133.64585876 146.84951782]
[-146.55870056 135.86338806]
[-139.57653809 120.41392517]
[-122.79799652 122.84638214]
[-108.16179657 119.56283569]
[-93.52559662 116.27928162]
[-78.88939667 112.99573517]
[-72.98028564 108.40598297]
[-63.83073807 109.82215118]
[-49.11423111 106.91967010]
[-47.43279266 104.53340149]
[-44.64755249 102.71260071]
[-40.98563385 101.90358734]
[-36.83947372 102.45556641]
[-32.72564316 104.56334686]
[-17.78753281 103.20213318]
[-2.84942460 101.84092712]
[12.08868408 100.47971344]
[27.02679253 99.11849976]
[41.96490097 97.75728607]
[56.90301132 96.39607239]
[62.73518372 78.05296326]
[75.94891357 64.05721283]
[69.89533997 50.33299255]
[63.84176636 36.60877228]
[57.78818893 22.88455009]
[44.24209976 13.64141941]
[45.74348831 -2.68885541]
[60.74785614 -9.30708694]
[73.81999207 0.59499347]
[71.51241302 16.83097458]
[77.56598663 30.55519485]
[83.61956024 44.27941513]
[89.67313385 58.00363541]
[99.56058502 55.86464691]
[109.87925720 56.06946945]
[120.07030487 58.70075989]
[129.56051636 63.70732880]
[137.79443359 70.90214539]
[148.33197021 60.22692108]
[152.52012634 44.97012329]
[166.96755981 41.34782791]
[177.50509644 30.67260170]
[188.04261780 19.99737930]
[198.58015442 9.32215405]
[209.11769104 -1.35306990]
[213.30584717 -16.60986900]
[227.75328064 -20.23216438]
[238.29080200 -30.90738869]
[241.90650940 -46.90297318]
[257.64511108 -51.51042175]
[269.31607056 -39.98998260]
[264.91333008 -24.19289970]
[248.96603394 -20.36985588]
[238.42849731 -9.69463158]
[234.99406433 4.79860401]
[219.79290771 9.18446255]
[209.25538635 19.85968590]
[198.71784973 30.53491020]
[188.18031311 41.21013641]
[177.64279175 51.88536072]
[174.20834351 66.37859344]
[159.00720215 70.76445007]
[148.46966553 81.43967438]
[151.75321960 96.07587433]
[165.84118652 101.22650146]
[179.92916870 106.37712860]
[194.01713562 111.52776337]
[208.10511780 116.67839050]
[222.19308472 121.82901764]
[236.28106689 126.97964478]
[252.33317566 123.62380219]
[263.06231689 136.02612305]
[257.43124390 151.42817688]
[241.23274231 153.98564148]
[231.13043213 141.06762695]
[217.04246521 135.91699219]
[202.95448303 130.76635742]
[188.86651611 125.61573792]
[174.77853394 120.46510315]
[160.69056702 115.31447601]
[146.60258484 110.16384888]
[139.65242004 123.73745728]
[129.04486084 134.01844788]
[116.12207031 140.13000488]
[119.21534729 154.80760193]
[122.30861664 169.48518372]
[137.05369568 173.58897400]
[148.19474792 184.08352661]
[153.17163086 198.55726624]
[150.84069824 213.68423462]
[141.73757935 225.98837280]
[127.95410919 232.64228821]
[112.65762329 232.11692810]
[99.36313629 224.53303528]
[91.12564087 211.63334656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 111]
[3 110]
[4 109]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[18 39]
[19 34]
[20 33]
[21 31]
[22 30]
[23 29]
[24 28]
[47 58]
[48 57]
[49 56]
[50 55]
[63 88]
[64 87]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[72 79]
[73 78]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
