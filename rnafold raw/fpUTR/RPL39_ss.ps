%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUUCUAAGCUCGUUCUUCCGCCAGCUUCCCUCCUCUUCCUUUCUCCGCCAUCGUGGUGUGUUCUUGACUCCGCUGCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[135.79006958 163.63209534]
[118.49873352 170.62414551]
[100.00000000 173.00665283]
[81.50126648 170.62414551]
[64.20992279 163.63209534]
[49.25454330 152.48686218]
[37.61124420 137.91590881]
[30.03996658 120.87022400]
[15.30147076 123.65889740]
[0.56297332 126.44757080]
[-14.17552376 129.23625183]
[-28.91402054 132.02491760]
[-41.03515244 142.19294739]
[-54.97900009 136.95668030]
[-69.71749878 139.74536133]
[-78.41216278 152.94300842]
[-93.90899658 156.04522705]
[-107.01399231 147.21151733]
[-109.95219421 131.68275452]
[-100.98041534 118.67187500]
[-85.42145538 115.89801788]
[-72.50617218 125.00685883]
[-57.76767349 122.21818542]
[-46.70073700 112.24962616]
[-31.70269585 117.28642273]
[-16.96419716 114.49774933]
[-2.22570086 111.70907593]
[12.51279640 108.92040253]
[27.25129318 106.13172913]
[27.23508072 94.06376648]
[29.20709419 82.15800476]
[33.11344910 70.73975372]
[38.84741211 60.12101364]
[46.25230408 50.59192657]
[55.12580109 42.41286087]
[65.22543335 35.80730438]
[76.27524567 30.95574951]
[87.97331238 27.99075508]
[100.00000000 26.99333954]
[112.02668762 27.99075508]
[123.72475433 30.95574951]
[134.77456665 35.80730438]
[144.87420654 42.41286087]
[153.74769592 50.59192657]
[161.15258789 60.12101364]
[166.88655090 70.73975372]
[170.79290771 82.15800476]
[172.76492310 94.06376648]
[172.74870300 106.13172913]
[187.48719788 108.92040253]
[198.03713989 96.34190369]
[213.37864685 90.76412201]
[229.36045837 93.59726715]
[241.70739746 103.98890686]
[247.16406250 119.07744598]
[261.99652100 121.31307983]
[276.82897949 123.54871368]
[291.66146851 125.78434753]
[306.46066284 120.19027710]
[317.89260864 129.73805237]
[332.72506714 131.97369385]
[344.32934570 121.49156189]
[359.95831299 120.97251892]
[372.23245239 130.66165161]
[375.35632324 145.98403931]
[367.85488892 159.70491028]
[353.27011108 165.34571838]
[338.48849487 160.24301147]
[330.48944092 146.80615234]
[315.65698242 144.57052612]
[301.91867065 150.32450867]
[289.42581177 140.61680603]
[274.59335327 138.38117981]
[259.76089478 136.14553833]
[244.92843628 133.90991211]
[237.04125977 145.21890259]
[224.96708679 152.01283264]
[211.07389832 152.89283752]
[198.11549377 147.62646484]
[188.68553162 137.20533752]
[184.69853210 123.65889740]
[169.96003723 120.87022400]
[162.38874817 137.91590881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[14 23]
[15 22]
[49 82]
[50 81]
[55 75]
[56 74]
[57 73]
[58 72]
[60 70]
[61 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
