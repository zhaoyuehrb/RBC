%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGCCUUCUGUGCAGUCGCGGCCCGGGCGGACGGUGGCUGGCUGCUCCGCAGCGCUCGGCUGGCUGCAGCGGCACCGCGGGUUGCGCGGCCGGGGAUGCUCCAGCGGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[89.14360046 442.37451172]
[89.14360046 427.37451172]
[89.14360046 412.37451172]
[85.95361328 405.59396362]
[89.35408020 396.96621704]
[89.76380157 381.97180176]
[90.17352295 366.97738647]
[90.58324432 351.98300171]
[83.19647980 339.04913330]
[91.30783844 325.46545410]
[91.71755981 310.47103882]
[92.12728119 295.47665405]
[82.92790222 280.60049438]
[92.51919556 264.95547485]
[92.51919556 249.95547485]
[92.51919556 234.95547485]
[84.78189850 222.22819519]
[92.51919556 208.42802429]
[92.51919556 193.42802429]
[84.78189850 180.70075989]
[92.51919556 166.90058899]
[92.51919556 151.90058899]
[92.51919556 136.90058899]
[92.51919556 121.90058136]
[92.51919556 106.90058136]
[89.33453369 99.36685181]
[92.72967529 91.49225616]
[85.37220764 77.48589325]
[93.45426941 64.97471619]
[93.86399078 49.98030853]
[94.27371216 34.98590469]
[83.68732452 23.55935287]
[84.31643677 8.35873318]
[95.27515411 -1.66335320]
[87.91768646 -15.66971970]
[95.99974060 -28.18090057]
[96.40946198 -43.17530441]
[96.81918335 -58.16970444]
[97.22891235 -73.16410828]
[89.19202423 -80.74456024]
[86.77954865 -91.29888916]
[90.56716919 -101.20470428]
[99.04474640 -107.20114899]
[100.27268982 -122.15080261]
[101.50063324 -137.10046387]
[102.72857666 -152.05010986]
[103.95652008 -166.99977112]
[105.18446350 -181.94941711]
[102.62488556 -188.28442383]
[103.60372162 -194.05734253]
[106.90966034 -197.67451477]
[108.95215607 -212.53480530]
[110.99465942 -227.39509583]
[113.03715515 -242.25538635]
[115.07965851 -257.11566162]
[113.13260651 -266.18267822]
[117.38627625 -272.35180664]
[107.98167419 -285.05334473]
[110.39556122 -300.67221069]
[123.19581604 -309.94198608]
[138.78828430 -307.36312866]
[147.92222595 -294.46557617]
[145.17861938 -278.90124512]
[132.18522644 -269.90417480]
[129.93994141 -255.07316589]
[127.89744568 -240.21287537]
[125.85494995 -225.35258484]
[123.81244659 -210.49230957]
[121.76995087 -195.63201904]
[120.13411713 -180.72148132]
[118.90617371 -165.77182007]
[117.67823029 -150.82217407]
[116.45028687 -135.87251282]
[115.22234344 -120.92285919]
[113.99440002 -105.97320557]
[123.60131836 -89.28507233]
[112.22331238 -72.75438690]
[111.81359100 -57.75998306]
[111.40386963 -42.76557922]
[110.99414825 -27.77117729]
[118.38092041 -14.83731174]
[110.26955414 -1.25363123]
[120.66461945 9.35194683]
[120.46269989 24.56423950]
[109.26811218 35.39562988]
[108.85839081 50.39002991]
[108.44866943 65.38443756]
[115.83544159 78.31829834]
[107.72407532 91.90198517]
[107.51919556 106.90058136]
[107.51919556 121.90058136]
[107.51919556 136.90058899]
[107.51919556 151.90058899]
[107.51919556 166.90058899]
[115.25650024 180.70075989]
[107.51919556 193.42802429]
[107.51919556 208.42802429]
[115.25650024 222.22819519]
[107.51919556 234.95547485]
[107.51919556 249.95547485]
[107.51919556 264.95547485]
[116.11596680 274.68954468]
[115.73030853 287.26776123]
[107.12168884 295.88635254]
[106.71196747 310.88076782]
[106.30223846 325.87518311]
[113.65970612 339.88153076]
[105.57765198 352.39273071]
[105.16793060 367.38711548]
[104.75820923 382.38153076]
[104.34848785 397.37591553]
[104.14360046 412.37451172]
[104.14360046 427.37451172]
[104.14360046 442.37451172]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[5 111]
[6 110]
[7 109]
[8 108]
[10 106]
[11 105]
[12 104]
[14 101]
[15 100]
[16 99]
[18 97]
[19 96]
[21 94]
[22 93]
[23 92]
[24 91]
[25 90]
[27 89]
[29 87]
[30 86]
[31 85]
[34 82]
[36 80]
[37 79]
[38 78]
[39 77]
[43 75]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[57 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
