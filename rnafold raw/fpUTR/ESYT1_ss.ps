%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCUUGAAGUCCCCUCCUCCAUCCCGGGGAUCACGUUUUGCCUGGGGGAGCUGAUCGCAAGACUAGGCAACCUCCAGCCAGUCCCUGGGUCGGGCGGAUCCUCCCAGAGGUGGCACA\
) } def
/len { sequence length } bind def

/coor [
[97.47727203 131.75424194]
[90.07115936 132.93727112]
[84.65253448 146.92436218]
[79.23390961 160.91143799]
[73.81528473 174.89852905]
[73.73157501 191.85226440]
[57.41722107 196.46508789]
[48.46840668 182.06526184]
[59.82820511 169.47990417]
[65.24682617 155.49281311]
[70.66545105 141.50573730]
[76.08407593 127.51864624]
[68.89558411 111.59284210]
[70.37018585 95.76978302]
[78.61739349 84.06706238]
[90.20526886 78.74671173]
[88.62421417 63.83026886]
[87.04315948 48.91382599]
[85.26535034 34.01955032]
[83.29109955 19.15004158]
[81.31684875 4.28053141]
[69.05176544 -5.32183743]
[67.26142120 -20.42975998]
[76.49139404 -32.06346512]
[74.51714325 -46.93297577]
[72.54289246 -61.80248642]
[70.56864166 -76.67199707]
[68.59439087 -91.54150391]
[66.62014008 -106.41101837]
[64.64588928 -121.28052521]
[62.67164230 -136.15003967]
[60.69739151 -151.01954651]
[50.91720963 -139.64642334]
[36.15206146 -137.00247192]
[23.03305244 -144.27513123]
[17.45199585 -158.19819641]
[21.91537476 -172.51875305]
[34.41866302 -180.80535889]
[49.34656525 -179.33645630]
[59.99396133 -168.77366638]
[60.78559113 -183.75276184]
[53.78738403 -197.94204712]
[62.18558502 -210.24324036]
[62.97721481 -225.22233582]
[63.76884842 -240.20143127]
[64.56047821 -255.18052673]
[65.35210419 -270.15963745]
[66.14373779 -285.13873291]
[66.93537140 -300.11782837]
[58.18463135 -316.25338745]
[68.16808319 -330.62039185]
[68.56403351 -345.61517334]
[68.95998383 -360.60992432]
[56.70803070 -373.01153564]
[57.14415359 -390.10290527]
[69.51668549 -401.40982056]
[69.51668549 -416.40982056]
[60.85298157 -430.33364868]
[68.81710815 -444.66906738]
[85.21625519 -444.66906738]
[93.18038940 -430.33364868]
[84.51668549 -416.40982056]
[84.51668549 -401.40982056]
[94.86079407 -393.60525513]
[98.84301758 -381.06912231]
[94.78026581 -368.35357666]
[83.95475769 -360.21398926]
[83.55880737 -345.21920776]
[83.16285706 -330.22442627]
[91.29344177 -321.16189575]
[91.00936890 -308.58737183]
[81.91446686 -299.32620239]
[81.12283325 -284.34707642]
[80.33119965 -269.36798096]
[79.53957367 -254.38890076]
[78.74794006 -239.40980530]
[77.95631409 -224.43070984]
[77.16468048 -209.45161438]
[84.21951294 -196.33374023]
[75.76468658 -182.96113586]
[74.97306061 -167.98204041]
[75.56690216 -152.99380493]
[77.54115295 -138.12428284]
[79.51540375 -123.25477600]
[81.48965454 -108.38526917]
[83.46390533 -93.51575470]
[85.43815613 -78.64624786]
[87.41240692 -63.77673721]
[89.38665771 -48.90722656]
[91.36090088 -34.03771591]
[103.30683899 -25.21557236]
[105.52083588 -10.16389847]
[96.18636322 2.30628109]
[98.16061401 17.17579079]
[100.13485718 32.04530334]
[104.18522644 38.34071732]
[101.95960236 47.33277130]
[103.54065704 62.24921417]
[105.12171173 77.16565704]
[127.49942017 88.18463135]
[131.29859924 118.69879913]
[140.80493164 130.30180359]
[150.31124878 141.90480042]
[159.81758118 153.50781250]
[174.53276062 161.92800903]
[170.51519775 178.39906311]
[153.57566833 179.09814453]
[148.21458435 163.01414490]
[138.70825195 151.41113281]
[129.20191956 139.80813599]
[119.69559479 128.20512390]
[112.28948212 129.38816833]
[115.06929779 144.12834167]
[117.84911346 158.86849976]
[124.01937866 172.54066467]
[113.25576782 182.98789978]
[99.77372742 176.41259766]
[101.37821960 161.49952698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[5 9]
[16 99]
[17 98]
[18 97]
[19 95]
[20 94]
[21 93]
[24 90]
[25 89]
[26 88]
[27 87]
[28 86]
[29 85]
[30 84]
[31 83]
[32 82]
[40 81]
[41 80]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[48 73]
[49 72]
[51 69]
[52 68]
[53 67]
[56 63]
[57 62]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
