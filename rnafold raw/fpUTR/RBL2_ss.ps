%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:23:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGUUUGCGGCGGCGCAGGCGCGGUGCGGGCGGCGGACGGGCGGGCGCUUCGCCGUUUGAAUGGCUGCGGGCCCGGGCCCUCACCUCACCUGAGGUCCGGCCGCCCAGGGGUGCGCU\
) } def
/len { sequence length } bind def

/coor [
[-45.69182205 409.67007446]
[-51.84107208 423.35171509]
[-57.99031830 437.03332520]
[-64.13956451 450.71496582]
[-70.28881073 464.39657593]
[-76.43805695 478.07818604]
[-77.41638947 495.00390625]
[-93.95145416 498.74929810]
[-102.12784576 483.89724731]
[-90.11968231 471.92895508]
[-83.97043610 458.24731445]
[-77.82118225 444.56570435]
[-71.67193604 430.88409424]
[-65.52268982 417.20245361]
[-59.37344360 403.52084351]
[-63.89395523 394.18606567]
[-62.43202972 383.69454956]
[-55.23776245 375.62075806]
[-44.55540085 372.85247803]
[-37.69267273 359.51443481]
[-30.82994080 346.17642212]
[-23.96721268 332.83840942]
[-17.10448265 319.50036621]
[-10.24175262 306.16235352]
[-11.29885197 291.30529785]
[1.89495921 282.57409668]
[0.83786005 267.71704102]
[14.03167152 258.98583984]
[20.71774673 245.55839539]
[27.22600174 232.04385376]
[33.73425674 218.52932739]
[40.24251556 205.01480103]
[46.75077057 191.50025940]
[53.25902557 177.98573303]
[59.76728439 164.47119141]
[66.09658813 150.87193298]
[72.24583435 137.19030762]
[78.39508057 123.50868988]
[84.54432678 109.82707214]
[82.15515137 75.66355133]
[82.94678497 60.68445969]
[83.73841095 45.70536041]
[84.53004456 30.72626686]
[84.92599487 15.73149300]
[84.92599487 0.73149300]
[84.92599487 -14.26850700]
[84.92599487 -29.26850700]
[77.18869781 -43.06867981]
[84.92599487 -55.79595184]
[72.54102325 -64.95665741]
[67.97827148 -79.48368835]
[72.78758240 -93.74323273]
[84.92599487 -102.33374023]
[84.92599487 -117.33374023]
[84.92599487 -132.33374023]
[84.92599487 -147.33374023]
[84.92599487 -162.33374023]
[76.26229858 -176.25753784]
[84.22642517 -190.59297180]
[100.62557220 -190.59297180]
[108.58969879 -176.25753784]
[99.92599487 -162.33374023]
[99.92599487 -147.33374023]
[99.92599487 -132.33374023]
[99.92599487 -117.33374023]
[99.92599487 -102.33374023]
[112.06441498 -93.74323273]
[116.87372589 -79.48368835]
[112.31097412 -64.95665741]
[99.92599487 -55.79595184]
[107.66329956 -43.06867981]
[99.92599487 -29.26850700]
[99.92599487 -14.26850700]
[99.92599487 0.73149300]
[99.92599487 15.73149300]
[102.70118713 19.75897598]
[102.88838196 25.59846878]
[99.50914001 31.51789665]
[98.71751404 46.49699402]
[97.92588043 61.47608948]
[97.13424683 76.45518494]
[104.44888306 63.35953140]
[119.36099243 61.73810196]
[129.31925964 72.95563507]
[125.94194031 87.57048035]
[112.07160187 93.28151703]
[127.03894806 94.27079773]
[142.00628662 95.26007843]
[156.47116089 87.53353882]
[170.25013733 96.42577362]
[169.16857910 112.78922272]
[154.33911133 119.79055786]
[141.01701355 110.22741699]
[126.04966736 109.23813629]
[111.08232117 108.24886322]
[98.22594452 115.97631836]
[92.07669830 129.65794373]
[85.92745209 143.33955383]
[79.77820587 157.02117920]
[79.09181213 166.25910950]
[73.28181458 170.97944641]
[66.77355957 184.49398804]
[60.26530457 198.00851440]
[53.75704956 211.52305603]
[47.24879074 225.03758240]
[40.74053574 238.55212402]
[34.23228073 252.06665039]
[33.30227280 261.28323364]
[27.36969757 265.84857178]
[27.93592834 281.65963745]
[15.23298550 289.43682861]
[15.79921627 305.24789429]
[3.09627366 313.02508545]
[-3.76645613 326.36309814]
[-10.62918568 339.70111084]
[-17.49191475 353.03915405]
[-24.35464478 366.37716675]
[-31.21737480 379.71520996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[6 10]
[19 118]
[20 117]
[21 116]
[22 115]
[23 114]
[24 113]
[26 111]
[28 109]
[29 107]
[30 106]
[31 105]
[32 104]
[33 103]
[34 102]
[35 101]
[36 99]
[37 98]
[38 97]
[39 96]
[40 81]
[41 80]
[42 79]
[43 78]
[44 75]
[45 74]
[46 73]
[47 72]
[49 70]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
