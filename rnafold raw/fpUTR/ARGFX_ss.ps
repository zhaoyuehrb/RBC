%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACACACUAAGGAAACUGCAUUUCCAGAGAGAGACACACCACGUAGGACUGAAAAUGGUUACUCUAAGGGGAUUCGUGACAGAUUUCAGAAACC\
) } def
/len { sequence length } bind def

/coor [
[85.59662628 353.21527100]
[70.60350800 355.05456543]
[55.69974899 352.59393311]
[42.09353256 346.03286743]
[30.88785362 335.90322876]
[22.99110794 323.02621460]
[19.04344940 308.44564819]
[19.36489487 293.34353638]
[23.92938614 278.94418335]
[32.36690140 266.41479492]
[43.99345016 256.77114868]
[57.86651993 250.79498291]
[72.86148071 248.97074890]
[75.30490875 234.17109680]
[77.74834442 219.37144470]
[80.19177246 204.57179260]
[82.39273071 189.73414612]
[84.35062408 174.86247253]
[86.30851746 159.99079895]
[88.02282715 145.08908081]
[89.49308014 130.16131592]
[90.96334076 115.23354340]
[82.32572174 98.84156799]
[93.02902222 83.71726227]
[93.51981354 68.72529602]
[94.01059723 53.73332214]
[81.07627869 45.56933594]
[74.01162720 32.11617661]
[74.62528992 17.03341103]
[82.65238953 4.36764908]
[95.85256958 -2.53314185]
[96.34335327 -17.52511024]
[96.83414459 -32.51707840]
[97.32492828 -47.50904846]
[87.49040222 -54.59265900]
[82.43266296 -65.47354126]
[83.33878326 -77.31672668]
[89.85865021 -87.09992218]
[100.22479248 -92.38474274]
[101.69504547 -107.31251526]
[103.16530609 -122.24028015]
[104.63556671 -137.16806030]
[91.21307373 -144.30284119]
[81.54653931 -156.03427124]
[77.11002350 -170.57339478]
[78.58007812 -185.70307922]
[85.73251343 -199.11616516]
[97.47665405 -208.76725769]
[112.02159119 -213.18464661]
[127.14933014 -211.69468689]
[140.55299377 -204.52461243]
[150.18864441 -192.76779175]
[154.58688354 -178.21705627]
[153.07704163 -163.09129333]
[145.88932800 -149.69706726]
[134.11984253 -140.07690430]
[119.56333160 -135.69779968]
[118.09307861 -120.77002716]
[116.62281799 -105.84225464]
[115.15256500 -90.91448212]
[127.59426117 -77.68341064]
[126.59365082 -59.23454666]
[112.31689453 -47.01826096]
[111.82611084 -32.02629471]
[111.33532715 -17.03432465]
[110.84453583 -2.04235554]
[123.56511688 5.70699310]
[130.74665833 18.87063408]
[130.37254333 33.96124268]
[122.44313812 46.92354584]
[109.00256348 54.22410965]
[108.51177979 69.21607971]
[108.02099609 84.20804596]
[115.39125061 91.23464203]
[117.67427826 101.15843201]
[114.11547089 110.69932556]
[105.89110565 116.70379639]
[104.42085266 131.63157654]
[102.95059204 146.55934143]
[105.25336456 155.60531616]
[101.18019104 161.94869995]
[99.22229767 176.82037354]
[97.26440430 191.69204712]
[99.26996613 200.80851746]
[94.99142456 207.01522827]
[92.54799652 221.81488037]
[90.10456085 236.61453247]
[87.66113281 251.41416931]
[101.27393341 257.96157837]
[112.48977661 268.07992554]
[120.39945984 280.94903564]
[124.36176300 295.52563477]
[124.05548859 310.62802124]
[119.50546265 325.03198242]
[111.08054352 337.56982422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 88]
[14 87]
[15 86]
[16 85]
[17 83]
[18 82]
[19 81]
[20 79]
[21 78]
[22 77]
[24 73]
[25 72]
[26 71]
[31 66]
[32 65]
[33 64]
[34 63]
[39 60]
[40 59]
[41 58]
[42 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
