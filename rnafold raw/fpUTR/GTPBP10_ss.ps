%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAUGACGUAAAAAGGCCGCGCUGUACUGCGGCUUGUGCCGCUUCCGCAAGAAGGUUUCCUGGCCUGUUGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[113.60295868 145.99737549]
[120.27478027 132.56285095]
[133.88392639 126.25386810]
[120.60208130 119.28302002]
[107.32023621 112.31217194]
[93.34333038 112.68321991]
[85.70891571 100.96967316]
[76.37738037 99.68491364]
[72.04098511 93.44132233]
[59.05060577 85.94132233]
[47.17666626 93.61526489]
[33.21353531 95.35559845]
[19.94562721 90.87372589]
[9.99333668 81.11605072]
[5.29555559 68.06477356]
[6.73208952 54.33543396]
[-5.94576168 46.31844330]
[-18.62361336 38.30145645]
[-31.30146408 30.28446960]
[-43.97931671 22.26748276]
[-56.65716553 14.25049496]
[-69.33502197 6.23350811]
[-82.01287079 -1.78347945]
[-97.37396240 1.93303537]
[-110.82014465 -6.37211990]
[-114.37404633 -21.77164459]
[-105.92719269 -35.12927246]
[-90.49095917 -38.52016068]
[-77.22338104 -29.93255615]
[-73.99588013 -14.46133041]
[-61.31803131 -6.44434309]
[-48.64017868 1.57264411]
[-35.96232986 9.58963108]
[-23.28447723 17.60661888]
[-10.60662556 25.62360573]
[2.07122564 33.64059448]
[14.74907684 41.65758133]
[28.73434448 33.82312775]
[44.85608673 34.03224564]
[58.79318237 42.32180786]
[66.76361084 56.55044556]
[66.55060577 72.95094299]
[79.54098511 80.45094299]
[92.67976379 87.68782806]
[106.65666962 87.31678009]
[114.29108429 99.03032684]
[127.57292938 106.00117493]
[140.85476685 112.97202301]
[154.98428345 118.00759125]
[169.68113708 121.00798035]
[184.37799072 124.00836182]
[199.07485962 127.00875092]
[210.42129517 120.50385284]
[222.73754883 123.49478149]
[229.39677429 133.80007935]
[243.96090698 137.38981628]
[258.52502441 140.97955322]
[273.08917236 144.56929016]
[287.65328979 148.15902710]
[303.24584961 143.07925415]
[315.25878906 154.24266052]
[311.33419800 170.16528320]
[295.50939941 174.46728516]
[284.06356812 162.72315979]
[269.49942017 159.13342285]
[254.93530273 155.54368591]
[240.37117004 151.95394897]
[225.80705261 148.36421204]
[209.39491272 154.23062134]
[196.07447815 141.70561218]
[181.37760925 138.70521545]
[166.68075562 135.70483398]
[151.98388672 132.70445251]
[158.53546143 146.19804382]
[155.20715332 160.82412720]
[143.46185303 170.15408325]
[128.46200562 170.08709717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 48]
[4 47]
[5 46]
[7 44]
[9 43]
[10 42]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[49 73]
[50 72]
[51 71]
[52 70]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
