%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:17:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGCUUCCGGUUCUUUAUUCCGGAAGUUGCUCUCAGAGGCAGCGUGCGGGUGUGCUCUUUGUGAAAUUCCACCAUGGCGUACCGUGGCCAGGGUCAGAAAGUGCAGAAGGUUAUGGUGCAGCCCAUCGUAUCCUACGCAGG\
) } def
/len { sequence length } bind def

/coor [
[70.74423218 118.88449860]
[83.47203064 110.95149994]
[69.61383820 116.69174957]
[55.75564575 122.43200684]
[41.89744949 128.17225647]
[28.03925896 133.91250610]
[15.75197792 142.51615906]
[5.61812449 153.57531738]
[-4.51572847 164.63447571]
[-14.64958191 175.69363403]
[-24.78343391 186.75279236]
[-34.91728973 197.81195068]
[-30.88419151 212.70281982]
[-35.56372070 227.40333557]
[-47.46265411 237.22265625]
[-62.78408813 239.02745056]
[-76.63899994 232.24180603]
[-84.60635376 219.03102112]
[-84.14377594 203.61059570]
[-75.39888763 190.90113831]
[-61.16215134 184.95817566]
[-45.97644806 187.67810059]
[-35.84259415 176.61894226]
[-25.70874214 165.55978394]
[-15.57488823 154.50062561]
[-5.44103575 143.44146729]
[4.69281769 132.38229370]
[-1.19825888 118.58754730]
[-16.19468880 118.26032257]
[-31.19112015 117.93309784]
[-46.18754959 117.60587311]
[-61.18397903 117.27865601]
[-76.18041229 116.95143127]
[-87.42211151 128.05998230]
[-103.22539520 127.88227844]
[-114.21446991 116.52376556]
[-113.86969757 100.72323608]
[-102.39563751 89.85486603]
[-86.59963989 90.36666870]
[-75.85318756 101.95500183]
[-60.85675812 102.28222656]
[-45.86032486 102.60944366]
[-30.86389542 102.93666840]
[-15.86746597 103.26389313]
[-0.87103558 103.59111786]
[10.57800770 106.11246490]
[18.59017563 112.30092621]
[22.29900742 120.05431366]
[36.15719986 114.31406403]
[50.01539230 108.57380676]
[63.87358475 102.83355713]
[77.73178101 97.09330750]
[97.17047882 81.75890350]
[95.30324554 66.04827118]
[107.32209778 57.25073624]
[113.06234741 43.39254379]
[118.80259705 29.53435135]
[116.93536377 13.82371902]
[128.95420837 5.02618933]
[134.69445801 -8.83200359]
[140.43470764 -22.69019699]
[146.17497253 -36.54838943]
[144.30772400 -52.25902176]
[156.32658386 -61.05655289]
[162.06683350 -74.91474915]
[167.80708313 -88.77294159]
[167.09602356 -94.09781647]
[168.41421509 -98.67922974]
[171.12057495 -101.85681915]
[174.40278625 -103.32997131]
[181.03712463 -116.78306580]
[187.67144775 -130.23616028]
[185.37663269 -150.21328735]
[201.76982117 -160.38385010]
[207.81103516 -174.11352539]
[213.85223389 -187.84320068]
[219.89343262 -201.57286072]
[225.93463135 -215.30253601]
[231.97583008 -229.03221130]
[229.65361023 -245.26611328]
[242.71681213 -255.17996216]
[257.72714233 -248.57527161]
[259.24325562 -232.24635315]
[245.70550537 -222.99101257]
[239.66430664 -209.26133728]
[233.62310791 -195.53166199]
[227.58189392 -181.80200195]
[221.54069519 -168.07232666]
[215.49949646 -154.34265137]
[220.07409668 -145.10237122]
[218.73899841 -134.65615845]
[211.69888306 -126.52989960]
[201.12454224 -123.60182953]
[194.49021912 -110.14873505]
[187.85588074 -96.69564056]
[181.66528320 -83.03268433]
[175.92501831 -69.17449188]
[170.18476868 -55.31629944]
[172.46258545 -40.59689713]
[160.03315735 -30.80813789]
[154.29290771 -16.94994545]
[148.55265808 -3.09175229]
[142.81240845 10.76644039]
[145.09022522 25.48584366]
[132.66079712 35.27460480]
[126.92053986 49.13279724]
[121.18029022 62.99098969]
[123.45810699 77.71039581]
[111.02867889 87.49915314]
[114.91095734 101.98803711]
[126.81126404 111.11946106]
[138.71156311 120.25088501]
[154.37014771 122.51348114]
[159.75720215 136.39976501]
[171.65750122 145.53118896]
[183.55780029 154.66261292]
[195.45809937 163.79403687]
[207.35839844 172.92546082]
[219.25869751 182.05686951]
[231.15899658 191.18829346]
[247.18846130 190.52825928]
[257.58944702 202.74298096]
[254.38316345 218.46237183]
[240.02923584 225.62786865]
[225.53875732 218.74270630]
[222.02757263 203.08859253]
[210.12727356 193.95716858]
[198.22697449 184.82575989]
[186.32667542 175.69433594]
[174.42637634 166.56291199]
[162.52607727 157.43148804]
[150.62577820 148.30006409]
[135.81838989 146.69061279]
[129.58013916 132.15118408]
[117.67984009 123.01976013]
[105.77954102 113.88833618]
[116.02156067 124.84739685]
[119.09571075 139.52900696]
[114.11067963 153.67642212]
[102.51181030 163.18780518]
[87.66204071 165.30543518]
[73.86686707 159.41534424]
[65.12601471 147.22528076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 52]
[3 51]
[4 50]
[5 49]
[6 48]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[53 109]
[55 107]
[56 106]
[57 105]
[59 103]
[60 102]
[61 101]
[62 100]
[64 98]
[65 97]
[66 96]
[70 95]
[71 94]
[72 93]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
[110 136]
[111 135]
[112 134]
[114 132]
[115 131]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
