%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:57:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGGUGCGAAGCCACCUCCCCCGCCGAAUCGCGCAUCUGCGCAGUUGCUGUUAUUGUGACUUGUCGGGCCACGGCCCCGGAUGUUGUGGCUGCCGCGGGGAG\
) } def
/len { sequence length } bind def

/coor [
[35.34629059 252.28776550]
[21.90369987 252.19488525]
[14.14363194 265.03161621]
[6.38356447 277.86831665]
[-1.37650251 290.70504761]
[-9.13656998 303.54174805]
[-6.70875597 319.40005493]
[-17.69895935 331.08743286]
[-33.67643356 329.63836670]
[-42.38463211 316.16442871]
[-37.14336777 301.00167847]
[-21.97328949 295.78170776]
[-14.21322155 282.94497681]
[-6.45315456 270.10824585]
[1.30691278 257.27154541]
[9.06698036 244.43481445]
[2.21178913 229.60380554]
[5.52136469 213.43524170]
[17.89779663 202.26934814]
[34.64916611 200.60287476]
[42.01798630 187.53762817]
[49.38680267 174.47238159]
[56.75562286 161.40715027]
[64.12444305 148.34190369]
[71.49326324 135.27667236]
[63.63473129 128.18499756]
[57.53732681 119.34820557]
[53.58668518 109.20304871]
[52.06027222 98.27088165]
[53.10900879 87.13092804]
[56.74548721 76.38958740]
[62.83963013 66.64744568]
[51.31666946 57.04425049]
[39.79370499 47.44105911]
[28.27074051 37.83786392]
[12.02789497 35.57910156]
[6.11418629 20.28334999]
[16.61313057 7.68556404]
[32.72431564 10.74526882]
[37.87393188 26.31490135]
[49.39689636 35.91809464]
[60.91986084 45.52128601]
[72.44282532 55.12448120]
[86.21273804 49.17557907]
[87.11841583 34.20294571]
[88.02409363 19.23031235]
[88.92977142 4.25767946]
[89.83544922 -10.71495438]
[90.74112701 -25.68758774]
[79.26710510 -36.31212616]
[77.35811615 -51.83274841]
[85.91551971 -64.92109680]
[100.89878082 -69.39724731]
[115.23326111 -63.14769745]
[122.15065002 -49.12330246]
[118.38477325 -33.94594193]
[105.71376038 -24.78190994]
[104.80808258 -9.80927658]
[103.90240479 5.16335678]
[102.99672699 20.13599014]
[102.09104919 35.10862350]
[101.18537140 50.08125687]
[113.30624390 52.66483688]
[124.23401642 58.09607697]
[133.32432556 65.94956970]
[140.06774902 75.66074371]
[144.11788940 86.56571960]
[145.30850220 97.94636536]
[160.19912720 99.75440979]
[175.08976746 101.56246185]
[189.98039246 103.37051392]
[204.87103271 105.17856598]
[219.76165771 106.98661041]
[234.65229797 108.79466248]
[249.54292297 110.60271454]
[264.43356323 112.41076660]
[275.73150635 101.59916687]
[291.33908081 100.63077545]
[303.88684082 109.96282196]
[307.45016479 125.18901062]
[300.34652710 139.11999512]
[285.93005371 145.17799377]
[271.00778198 140.50259399]
[262.62551880 127.30139923]
[247.73487854 125.49334717]
[232.84425354 123.68529510]
[217.95361328 121.87724304]
[203.06297302 120.06919861]
[188.17234802 118.26114655]
[173.28170776 116.45309448]
[158.39108276 114.64504242]
[143.50044250 112.83699799]
[134.84185791 129.03657532]
[120.46858215 140.47363281]
[102.73809052 145.27229309]
[84.55850220 142.64549255]
[77.18968201 155.71072388]
[69.82086182 168.77597046]
[62.45204544 181.84120178]
[55.08322525 194.90644836]
[47.71440506 207.97169495]
[54.39474106 220.13618469]
[54.15005493 233.90332031]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[20 101]
[21 100]
[22 99]
[23 98]
[24 97]
[25 96]
[32 43]
[33 42]
[34 41]
[35 40]
[44 62]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[68 92]
[69 91]
[70 90]
[71 89]
[72 88]
[73 87]
[74 86]
[75 85]
[76 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
