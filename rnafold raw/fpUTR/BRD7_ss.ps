%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGGGGCAUCGCGCCGCCCGGCGCGCGCCGCCCCCCUGCCUCGCGGCGCGGGGUCUCGCGGGCCCCGCUCCCGCCCUCCGCUCGCCUGGCCCGGACCGGAAGCGGCGCCGCACGGCCUGGGCCUGGCGCGGGGGGCGGGCACCGGGGCCCGGUCGGAC\
) } def
/len { sequence length } bind def

/coor [
[153.66194153 85.45223236]
[139.84611511 91.29373169]
[126.03029633 97.13523865]
[112.21447754 102.97673798]
[104.16410828 130.13029480]
[93.81934357 140.99243164]
[83.58104706 151.95497131]
[73.45019531 163.01687622]
[63.31933975 174.07878113]
[63.09736633 187.00805664]
[54.38928604 196.01705933]
[42.27689743 196.63592529]
[31.93213272 207.49804688]
[21.58736801 218.36018372]
[11.24260426 229.22230530]
[0.89783996 240.08444214]
[-9.44692421 250.94656372]
[-12.77573776 267.00430298]
[-28.42934418 271.89273071]
[-40.30465317 260.58303833]
[-36.18536758 244.70968628]
[-20.30905342 240.60180664]
[-9.96428967 229.73966980]
[0.38047475 218.87754822]
[10.72523880 208.01541138]
[21.07000351 197.15328979]
[31.41476822 186.29115295]
[34.58958817 169.05363464]
[52.25743103 163.94792175]
[62.38828659 152.88601685]
[72.51914215 141.82411194]
[74.72875214 134.73155212]
[82.95721436 130.64765930]
[93.30197906 119.78553009]
[88.69457245 105.51066589]
[73.95156097 102.74596405]
[59.20854950 99.98126221]
[44.46553802 97.21655273]
[29.69625282 94.59581757]
[14.90210247 92.11930084]
[0.10795265 89.64278412]
[-14.68619728 87.16627502]
[-29.84930611 93.41224670]
[-42.67312241 83.19061279]
[-39.96560669 67.01651764]
[-24.51201630 61.52848053]
[-12.20968151 72.37212372]
[2.58446860 74.84864044]
[17.37861824 77.32515717]
[32.17276764 79.80166626]
[39.32518768 77.79424286]
[47.23023987 82.47354126]
[61.97325134 85.23824310]
[76.71626282 88.00295258]
[91.45927429 90.76765442]
[106.37297821 89.16091919]
[120.18879700 83.31941986]
[134.00460815 77.47791290]
[147.82043457 71.63641357]
[160.30502319 50.63398361]
[183.86732483 53.50603867]
[196.75904846 45.83768845]
[209.65077209 38.16934204]
[222.54248047 30.50099373]
[235.43420410 22.83264542]
[248.32592773 15.16429710]
[261.21765137 7.49594879]
[274.10937500 -0.17239943]
[287.00109863 -7.84074736]
[294.90612793 -21.54552269]
[309.80004883 -21.40219307]
[322.61633301 -29.19595146]
[335.35598755 -37.11437988]
[348.09561157 -45.03281021]
[360.83526611 -52.95123672]
[373.57489014 -60.86966705]
[386.31454468 -68.78809357]
[399.05419922 -76.70652008]
[411.79382324 -84.62495422]
[424.53347778 -92.54338074]
[437.27313232 -100.46180725]
[450.01275635 -108.38023376]
[462.75241089 -116.29866791]
[466.24414062 -122.00895691]
[471.34161377 -124.66249847]
[476.14721680 -124.26625824]
[489.18609619 -131.68161011]
[502.22497559 -139.09695435]
[510.39593506 -152.64488220]
[525.28417969 -152.21096802]
[538.32312012 -159.62631226]
[551.36199951 -167.04167175]
[564.40087891 -174.45701599]
[577.43975830 -181.87236023]
[590.47863770 -189.28771973]
[603.51751709 -196.70306396]
[611.68847656 -210.25099182]
[626.57678223 -209.81707764]
[639.61566162 -217.23242188]
[652.65454102 -224.64776611]
[654.94537354 -235.34582520]
[662.60870361 -242.84248352]
[672.92199707 -244.81457520]
[682.40417480 -240.84394836]
[695.72241211 -247.74491882]
[709.04071045 -254.64588928]
[717.41760254 -268.74411011]
[733.80981445 -268.26812744]
[741.35449219 -253.70756531]
[732.29028320 -240.04109192]
[715.94165039 -241.32762146]
[702.62341309 -234.42663574]
[689.30511475 -227.52566528]
[680.16558838 -210.51919556]
[660.06988525 -211.60888672]
[647.03100586 -204.19354248]
[633.99212646 -196.77818298]
[626.75378418 -183.76065063]
[610.93286133 -183.66416931]
[597.89398193 -176.24882507]
[584.85510254 -168.83348083]
[571.81622314 -161.41812134]
[558.77734375 -154.00277710]
[545.73846436 -146.58743286]
[532.69952393 -139.17208862]
[525.46124268 -126.15455627]
[509.64031982 -126.05806732]
[496.60144043 -118.64271545]
[483.56256104 -111.22737122]
[470.67083740 -103.55902100]
[457.93118286 -95.64059448]
[445.19155884 -87.72216797]
[432.45190430 -79.80373383]
[419.71224976 -71.88530731]
[406.97262573 -63.96688080]
[394.23297119 -56.04845047]
[381.49334717 -48.13002396]
[368.75369263 -40.21159363]
[356.01403809 -32.29316711]
[343.27441406 -24.37473869]
[330.53475952 -16.45631027]
[326.49353027 -10.22290325]
[317.46838379 -8.51047325]
[310.48544312 4.64581060]
[294.66943359 5.05097198]
[281.77770996 12.71932030]
[268.88598633 20.38766861]
[255.99427795 28.05601692]
[243.10255432 35.72436523]
[230.21083069 43.39271164]
[217.31912231 51.06106186]
[204.42739868 58.72940826]
[191.53567505 66.39775848]
[191.89239502 72.53480530]
[190.48687744 78.56099701]
[187.41191101 83.97747803]
[182.89941406 88.32923126]
[177.30311584 91.24324799]
[171.07081604 92.46047974]
[164.70863342 91.85869598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[4 56]
[5 34]
[6 33]
[7 31]
[8 30]
[9 29]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[35 55]
[36 54]
[37 53]
[38 52]
[39 50]
[40 49]
[41 48]
[42 47]
[61 153]
[62 152]
[63 151]
[64 150]
[65 149]
[66 148]
[67 147]
[68 146]
[69 145]
[71 143]
[72 141]
[73 140]
[74 139]
[75 138]
[76 137]
[77 136]
[78 135]
[79 134]
[80 133]
[81 132]
[82 131]
[83 130]
[86 129]
[87 128]
[88 127]
[90 125]
[91 124]
[92 123]
[93 122]
[94 121]
[95 120]
[96 119]
[98 117]
[99 116]
[100 115]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
