%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUGCUGGCGGCUGGCCAAUCAUCGGGGGCGGCGCGGGGAGGGGUGGUGUGGACGGAGAAAGUGAAAGGUGAGGCACGGCCCUGCAGAUUUUCCAGCGGAUCCCCCGGUGGCCUC\
) } def
/len { sequence length } bind def

/coor [
[60.96225357 349.77783203]
[50.24083328 360.26834106]
[35.95448303 364.84002686]
[21.13454819 362.52279663]
[8.92559624 353.80834961]
[1.91818118 340.54577637]
[1.59912980 325.54934692]
[-8.04268456 337.04000854]
[-17.68449783 348.53070068]
[-27.32631302 360.02136230]
[-27.36609459 376.06436157]
[-40.02287292 385.92263794]
[-55.58745193 382.03375244]
[-62.12001801 367.38092041]
[-54.60934448 353.20455933]
[-38.81697845 350.37954712]
[-29.17516518 338.88888550]
[-19.53335190 327.39819336]
[-9.89153671 315.90753174]
[-8.56259727 306.57931519]
[-0.01225357 300.28469849]
[6.23562002 286.64782715]
[12.48349380 273.01098633]
[18.73136711 259.37411499]
[24.97924232 245.73724365]
[31.22711563 232.10038757]
[37.47499084 218.46351624]
[43.72286224 204.82666016]
[49.97073746 191.18978882]
[56.21860886 177.55291748]
[48.76144028 164.68713379]
[50.32863235 149.72024536]
[60.52761459 138.41386414]
[75.60276031 135.24429321]
[81.85063171 121.60742188]
[88.09850311 107.97055817]
[86.97775269 94.03372192]
[98.26462555 85.78156281]
[104.51250458 72.14469910]
[110.76037598 58.50783539]
[117.00824738 44.87097168]
[121.94886017 30.70797729]
[125.53858948 16.14385033]
[129.12832642 1.57972288]
[132.71806335 -12.98440456]
[136.30780029 -27.54853249]
[132.09793091 -42.79935455]
[142.65623474 -53.30513763]
[146.24597168 -67.86926270]
[149.83569336 -82.43338776]
[153.42543030 -96.99752045]
[144.10537720 -111.72719574]
[148.17794800 -128.32960510]
[162.67512512 -136.73692322]
[165.87254333 -151.39218140]
[153.37153625 -160.04048157]
[145.13586426 -172.81710815]
[142.42141724 -187.77371216]
[145.64213562 -202.62954712]
[154.30686951 -215.11917114]
[167.09432983 -223.33802795]
[182.05448914 -226.03279114]
[196.90606689 -222.79252625]
[209.38427734 -214.11137390]
[217.58630371 -201.31312561]
[220.26138306 -186.34941101]
[217.00160217 -171.50212097]
[208.30403137 -159.03533936]
[195.49501038 -150.85015869]
[180.52780151 -148.19476318]
[177.33036804 -133.53950500]
[185.77444458 -123.70672607]
[186.99093628 -110.60676575]
[180.30628967 -99.04891968]
[167.98956299 -93.40778351]
[164.39982605 -78.84365845]
[160.81008911 -64.27952576]
[157.22035217 -49.71540070]
[161.68699646 -35.50630569]
[150.87191772 -23.95879745]
[147.28219604 -9.39466953]
[143.69245911 5.16945791]
[140.10272217 19.73358536]
[136.51298523 34.29771423]
[149.78684998 27.31170273]
[164.49186707 30.27184486]
[174.02880859 41.84970474]
[174.11773682 56.84944153]
[164.71873474 68.53956604]
[150.04985046 71.67384338]
[136.69409180 64.84571075]
[130.64511108 51.11884689]
[124.39723969 64.75570679]
[118.14936829 78.39257812]
[111.90149689 92.02944183]
[113.02224731 105.96627808]
[101.73537445 114.21843719]
[95.48749542 127.85530090]
[89.23962402 141.49215698]
[96.68344116 154.97903442]
[94.78067780 170.08641052]
[84.46896362 181.04690552]
[69.85547638 183.80079651]
[63.60760117 197.43766785]
[57.35972595 211.07452393]
[51.11185455 224.71139526]
[44.86397934 238.34825134]
[38.61610413 251.98512268]
[32.36823273 265.62197876]
[26.12035942 279.25885010]
[19.87248421 292.89572144]
[13.62461090 306.53259277]
[27.31009674 300.39193726]
[42.29620743 301.03729248]
[55.40311432 308.33175659]
[63.84973526 320.72750854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 19]
[8 18]
[9 17]
[10 16]
[21 112]
[22 111]
[23 110]
[24 109]
[25 108]
[26 107]
[27 106]
[28 105]
[29 104]
[30 103]
[34 99]
[35 98]
[36 97]
[38 95]
[39 94]
[40 93]
[41 92]
[42 84]
[43 83]
[44 82]
[45 81]
[46 80]
[48 78]
[49 77]
[50 76]
[51 75]
[54 71]
[55 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
