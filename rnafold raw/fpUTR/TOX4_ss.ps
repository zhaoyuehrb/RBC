%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGAGAGAACACACGUCCUUGCGGAAGUGACGGCAGUUCCGAGUCCAGUGGGGGCGGUGGGAGCGAUGAGGGUCUGAGACGGUGGGAGCGGUUGUGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[91.55774689 296.97024536]
[79.78443909 306.54907227]
[65.34468842 311.22430420]
[50.19134140 310.36370850]
[36.37377930 304.08361816]
[25.76070404 293.23339844]
[19.78745079 279.28045654]
[19.26185226 264.11181641]
[24.25499153 249.77886963]
[34.09158707 238.22007751]
[47.44132233 230.99864197]
[62.49874878 229.09121704]
[66.08848572 214.52709961]
[69.67822266 199.96296692]
[73.26795197 185.39883423]
[76.85768890 170.83471680]
[80.44742584 156.27058411]
[75.98078918 142.06149292]
[86.79586029 130.51397705]
[90.38558960 115.94985199]
[82.91862488 111.53836823]
[77.68509674 103.59773254]
[63.01919174 100.44951630]
[48.35328674 97.30130005]
[33.23657608 101.96987152]
[22.41669083 91.73368835]
[9.28254128 100.52400208]
[-6.20394325 97.37053680]
[-14.85490608 84.14418793]
[-11.53788471 68.69190979]
[1.77919161 60.18126678]
[17.19553757 63.66147232]
[25.56490707 77.06778717]
[39.63261795 72.17403412]
[51.50150299 82.63539124]
[66.16740417 85.78360748]
[80.83331299 88.93182373]
[92.50000000 79.50376129]
[92.50000000 64.50376129]
[92.50000000 49.50376511]
[92.50000000 34.50376511]
[92.50000000 19.50376320]
[78.62612915 6.79869413]
[78.27514648 -11.69552135]
[91.20931244 -24.47522545]
[90.30363464 -39.44786072]
[89.39795685 -54.42049408]
[88.49227905 -69.39312744]
[77.48569489 -81.06508636]
[79.89126587 -96.92676544]
[93.86363983 -104.81043243]
[108.68441010 -98.66842651]
[112.98435211 -83.21235657]
[103.46491241 -70.29880524]
[104.37059021 -55.32617188]
[105.27626801 -40.35353851]
[106.18194580 -25.38090324]
[116.31555939 -19.72798157]
[122.45946503 -9.74201870]
[122.94701385 2.09352136]
[117.53590393 12.76673889]
[107.50000000 19.50376320]
[107.50000000 34.50376511]
[107.50000000 49.50376511]
[107.50000000 64.50376129]
[107.50000000 79.50376129]
[111.53070068 65.05545807]
[124.20942688 57.03985977]
[138.99012756 59.59542847]
[148.24148560 71.40272522]
[147.18701172 86.36561584]
[136.37113953 96.75872803]
[121.37617493 97.21539307]
[136.62699890 93.00552368]
[147.13278198 103.56382751]
[161.69689941 107.15355682]
[176.26103210 110.74329376]
[191.51185608 106.53342438]
[202.01763916 117.09172821]
[216.43559265 110.05595398]
[230.86340332 117.07149506]
[234.23329163 132.75663757]
[223.96015930 145.07907104]
[207.92468262 144.58607483]
[198.42790222 131.65585327]
[184.21881104 136.12248230]
[172.67129517 125.30741882]
[158.10717773 121.71768951]
[143.54304504 118.12795258]
[129.33395386 122.59458160]
[117.78643799 111.77951813]
[104.94972229 119.53958893]
[101.35998535 134.10371399]
[105.56985474 149.35453796]
[95.01155090 159.86032104]
[91.42181396 174.42443848]
[87.83208466 188.98857117]
[84.24234772 203.55270386]
[80.65261078 218.11682129]
[77.06288147 232.68095398]
[89.50914764 241.36743164]
[97.97377777 253.96562195]
[101.31201172 268.77172852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 100]
[13 99]
[14 98]
[15 97]
[16 96]
[17 95]
[19 93]
[20 92]
[22 37]
[23 36]
[24 35]
[26 33]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[45 57]
[46 56]
[47 55]
[48 54]
[73 91]
[75 89]
[76 88]
[77 87]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
