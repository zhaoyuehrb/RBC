%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGCGGCUGCGGUGGCGGCAGCCGAGGCGAGCGGGGCGGGGGCGCGGGCGCGGCGCUCGGAGUCCGUUCGGGGCCGGAGGCGGUCGGGGCCGGGCCCGGGAAGCGCGAGGAGCGCGCGUAGCGCCGCCGGAGCCCGCCGCCCGGGAC\
) } def
/len { sequence length } bind def

/coor [
[-0.96004504 415.78939819]
[-15.74396420 413.25250244]
[-27.82226562 404.35787964]
[-34.63211441 390.99276733]
[-34.72861099 375.99328613]
[-44.18447113 387.63745117]
[-53.64032745 399.28161621]
[-63.09618759 410.92578125]
[-65.78939056 426.51608276]
[-79.81884003 431.51846313]
[-89.27469635 443.16262817]
[-98.73056030 454.80679321]
[-108.18641663 466.45098877]
[-117.64228058 478.09515381]
[-119.69426727 494.36541748]
[-134.91357422 500.47317505]
[-147.64387512 490.13531494]
[-144.78932190 473.98651123]
[-129.28645325 468.63928223]
[-119.83058929 456.99511719]
[-110.37473297 445.35095215]
[-100.91886902 433.70678711]
[-91.46301270 422.06259155]
[-89.44615173 407.30517578]
[-74.74035645 401.46994019]
[-65.28450012 389.82574463]
[-55.82863998 378.18157959]
[-46.37278366 366.53741455]
[-45.05012131 356.63806152]
[-35.75910950 350.29199219]
[-28.89406395 336.95513916]
[-22.02901840 323.61831665]
[-15.16397285 310.28146362]
[-14.89736557 302.84793091]
[-8.01674271 296.74212646]
[-0.87753153 283.55001831]
[6.26167917 270.35791016]
[13.40089035 257.16580200]
[20.54010201 243.97370911]
[18.53171539 224.77917480]
[35.74256516 214.36404419]
[42.33051300 200.88818359]
[48.91846466 187.41232300]
[47.55711746 172.58006287]
[60.56922531 163.58030701]
[67.15717316 150.10443115]
[73.74512482 136.62857056]
[80.33307648 123.15270996]
[86.92102051 109.67684174]
[83.80794525 98.41306305]
[89.04864502 87.96800995]
[99.93933868 83.73048401]
[106.80438995 70.39364624]
[113.66943359 57.05681229]
[120.53447723 43.71997833]
[127.39952850 30.38314438]
[128.55938721 21.25744820]
[134.54675293 16.84380150]
[141.68597412 3.65169501]
[148.82518005 -9.54041100]
[155.96438599 -22.73251724]
[163.10359192 -35.92462540]
[156.57135010 -49.87582016]
[159.47264099 -64.82359314]
[170.48908997 -75.07550812]
[185.25314331 -76.85338593]
[192.39234924 -90.04549408]
[192.15574646 -105.86492920]
[205.01802063 -113.37568665]
[204.78141785 -129.19511414]
[217.64369202 -136.70587158]
[224.78289795 -149.89797974]
[231.92210388 -163.09008789]
[231.68551636 -178.90953064]
[244.54777527 -186.42027283]
[251.68698120 -199.61238098]
[258.82620239 -212.80448914]
[265.96539307 -225.99659729]
[273.10461426 -239.18870544]
[269.38278198 -249.49365234]
[271.92965698 -259.92327881]
[279.65850830 -267.05386353]
[289.82400513 -268.68389893]
[297.50228882 -281.56970215]
[305.18057251 -294.45550537]
[299.86465454 -309.16180420]
[305.29397583 -323.82662964]
[318.90496826 -331.52566528]
[334.27090454 -328.62368774]
[344.13650513 -316.49090576]
[343.84350586 -300.85607910]
[333.53027344 -289.10147095]
[318.06637573 -286.77725220]
[310.38809204 -273.89141846]
[302.70980835 -261.00561523]
[303.92327881 -241.74449158]
[286.29672241 -232.04949951]
[279.15750122 -218.85739136]
[272.01831055 -205.66528320]
[264.87908936 -192.47317505]
[257.73986816 -179.28106689]
[258.48712158 -164.40521240]
[245.11421204 -155.95088196]
[237.97500610 -142.75877380]
[230.83578491 -129.56666565]
[231.58303833 -114.69081116]
[218.21012878 -106.23647308]
[218.95736694 -91.36062622]
[205.58445740 -82.90628052]
[198.44525146 -69.71417236]
[205.03202820 -56.38180161]
[202.47489929 -41.55192947]
[191.54798889 -30.94741631]
[176.29570007 -28.78541374]
[169.15649414 -15.59330654]
[162.01728821 -2.40120029]
[154.87806702 10.79090595]
[147.73886108 23.98301315]
[140.73635864 37.24819183]
[133.87130737 50.58502579]
[127.00626373 63.92185974]
[120.14122009 77.25868988]
[113.27617645 90.59552765]
[114.54187012 107.29623413]
[100.39688873 116.26479340]
[93.80893707 129.74066162]
[87.22098541 143.21652222]
[80.63304138 156.69238281]
[74.04508972 170.16824341]
[74.93522644 185.96440125]
[62.39432907 194.00025940]
[55.80638123 207.47613525]
[49.21842957 220.95199585]
[53.36294556 231.09434509]
[51.24924088 241.62030029]
[43.82165527 249.06417847]
[33.73220825 251.11291504]
[26.59299660 264.30502319]
[19.45378494 277.49713135]
[12.31457520 290.68923950]
[5.17536402 303.88134766]
[-1.82713854 317.14651489]
[-8.69218445 330.48336792]
[-15.55723095 343.82019043]
[-22.42227745 357.15701294]
[-8.64718151 351.22012329]
[6.32770252 352.08779907]
[19.32493019 359.57592773]
[27.58668900 372.09564209]
[29.35995483 386.99044800]
[24.26846886 401.09991455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 28]
[6 27]
[7 26]
[8 25]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[30 145]
[31 144]
[32 143]
[33 142]
[35 141]
[36 140]
[37 139]
[38 138]
[39 137]
[41 133]
[42 132]
[43 131]
[45 129]
[46 128]
[47 127]
[48 126]
[49 125]
[52 123]
[53 122]
[54 121]
[55 120]
[56 119]
[58 118]
[59 117]
[60 116]
[61 115]
[62 114]
[66 110]
[67 109]
[69 107]
[71 105]
[72 104]
[73 103]
[75 101]
[76 100]
[77 99]
[78 98]
[79 97]
[83 95]
[84 94]
[85 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
