%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUUAUUUAUUACACACCAAAGUAUAAAACCACUCCGCCGCUGCAGCUCUCAGCUCCAGUCCUGGCAUCUGCCCGAGGAGACCACGCUCCUGGAGCUCUGCUGUCUUCUCAGGGAGACUCUGAGGCUCUGUUGAGAAUC\
) } def
/len { sequence length } bind def

/coor [
[78.56502533 211.20332336]
[92.82791138 215.84506226]
[88.89222717 201.37059021]
[84.95654297 186.89611816]
[81.02085876 172.42163086]
[77.08517456 157.94715881]
[73.14949036 143.47268677]
[58.76562881 139.21775818]
[47.58889389 149.22180176]
[36.41216278 159.22583008]
[25.23543358 169.22985840]
[14.05870152 179.23390198]
[9.70592880 187.35653687]
[2.52229142 189.33226013]
[-8.87301445 199.08659363]
[-7.50425577 214.54318237]
[-15.51091862 227.83502197]
[-29.81427956 233.85112000]
[-44.91440201 230.27818298]
[-55.00498199 218.49005127]
[-56.20598602 203.01953125]
[-48.05560303 189.81532288]
[-33.68782043 183.95474243]
[-18.62734795 187.69128418]
[-7.23204088 177.93695068]
[4.05466843 168.05715942]
[15.23139954 158.05313110]
[26.40813065 148.04910278]
[37.58486176 138.04505920]
[48.76159286 128.04103088]
[49.01044083 120.54515839]
[34.40575027 123.96611786]
[20.05212021 128.32196045]
[8.15361309 119.18819427]
[8.65192509 104.19647217]
[21.13069534 95.87299347]
[35.16249084 101.17137146]
[49.50813675 105.55342102]
[49.75698471 98.05754852]
[39.26836014 87.33426666]
[28.77973557 76.61099243]
[17.94108963 66.24162292]
[6.76435804 56.23759079]
[-4.41237354 46.23355865]
[-15.58910465 36.22952271]
[-31.03210640 32.79088211]
[-35.35511398 18.53742981]
[-46.53184509 8.53339672]
[-57.70857620 -1.47063649]
[-68.88530731 -11.47466946]
[-84.71981049 -17.53312874]
[-83.28153992 -34.42596054]
[-66.65073395 -37.72030258]
[-58.88127518 -22.65140152]
[-47.70454407 -12.64736748]
[-36.52781296 -2.64333487]
[-25.35107994 7.36069822]
[-10.70751286 10.08378601]
[-5.58507204 25.05279350]
[5.59165955 35.05682755]
[16.76839066 45.06085968]
[27.94512177 55.06489182]
[31.54324913 55.20495605]
[35.24386978 57.14489365]
[38.17839432 60.90904999]
[39.50301743 66.12236023]
[49.99164200 76.84564209]
[60.48026657 87.56892395]
[91.50579071 65.68421173]
[120.60319519 79.20375824]
[133.53791809 71.60816193]
[146.47264099 64.01256561]
[154.45477295 50.35254669]
[169.34764099 50.57978821]
[182.28236389 42.98419189]
[190.26448059 29.32417297]
[205.15736389 29.55141258]
[218.09207153 21.95581818]
[231.02679443 14.36022472]
[243.96151733 6.76462984]
[256.89624023 -0.83096462]
[269.83096313 -8.42655945]
[282.76565552 -16.02215385]
[295.70037842 -23.61774826]
[308.46389771 -31.49762726]
[321.04998779 -39.65793228]
[328.99270630 -56.23039627]
[346.50521851 -56.54060745]
[358.90768433 -64.97734833]
[371.31015015 -73.41408539]
[383.71264648 -81.85082245]
[393.40817261 -95.75884247]
[409.45666504 -90.29232788]
[408.64642334 -73.35774994]
[392.14938354 -69.44834900]
[379.74691772 -61.01160812]
[367.34442139 -52.57487106]
[354.94195557 -44.13813019]
[352.34912109 -32.27206802]
[342.01696777 -25.15192604]
[329.21029663 -27.07185173]
[316.62420654 -18.91154671]
[314.75997925 -14.43628407]
[310.02139282 -11.12141800]
[303.29598999 -10.68302917]
[290.36126709 -3.08743501]
[277.42654419 4.50815964]
[264.49182129 12.10375404]
[251.55711365 19.69934845]
[238.62239075 27.29494286]
[225.68766785 34.89053726]
[212.75294495 42.48613358]
[205.69599915 55.60286331]
[189.87794495 55.91891098]
[176.94323730 63.51450729]
[169.88627625 76.63124084]
[154.06823730 76.94728851]
[141.13351440 84.54288483]
[128.19879150 92.13847351]
[131.18800354 108.45133972]
[124.60075378 125.38755035]
[108.86973572 137.35139465]
[87.62397003 139.53700256]
[91.55965424 154.01147461]
[95.49533844 168.48594666]
[99.43102264 182.96043396]
[103.36670685 197.43490601]
[107.30239105 211.90937805]
[112.03222656 226.14414978]
[117.54174805 240.09567261]
[123.05126953 254.04719543]
[136.22363281 263.81555176]
[134.08160400 280.07421875]
[118.82873535 286.09765625]
[106.15585327 275.68948364]
[109.09974670 259.55673218]
[103.59021759 245.60519409]
[98.08069611 231.65367126]
[89.43124390 243.90875244]
[74.47197723 245.01338196]
[64.11625671 234.16169739]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 128]
[3 127]
[4 126]
[5 125]
[6 124]
[7 123]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[14 25]
[15 24]
[39 68]
[40 67]
[41 66]
[42 62]
[43 61]
[44 60]
[45 59]
[47 57]
[48 56]
[49 55]
[50 54]
[70 119]
[71 118]
[72 117]
[74 115]
[75 114]
[77 112]
[78 111]
[79 110]
[80 109]
[81 108]
[82 107]
[83 106]
[84 105]
[85 102]
[86 101]
[88 98]
[89 97]
[90 96]
[91 95]
[129 138]
[130 137]
[131 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
