%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:33:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCGGGGGCGGGGGCGGGGCGGCGGCCGUGGGUCCCUGCCGGCCGGCGGCGGGCGCAGACAGCGGCGGGCGCAGGACGUGCACU\
) } def
/len { sequence length } bind def

/coor [
[71.72296906 220.85226440]
[63.97143173 207.27110291]
[66.81404877 191.89405823]
[78.90863037 181.98168945]
[78.90863037 166.98168945]
[78.90863037 151.98168945]
[71.17133331 139.25442505]
[78.90863037 125.45424652]
[69.83102417 113.51285553]
[55.37776947 109.49993134]
[40.92452240 105.48699951]
[26.47127151 101.47407532]
[12.01802063 97.46115112]
[-2.43522882 93.44822693]
[-16.88847923 89.43530273]
[-31.34172821 85.42237854]
[-45.79497910 81.40945435]
[-61.68191528 91.38603210]
[-79.57316589 86.89324951]
[-88.55184937 71.13837433]
[-103.25698853 68.17882538]
[-117.96212006 65.21927643]
[-133.32159424 70.96545410]
[-145.80387878 60.32945633]
[-142.56826782 44.25267410]
[-126.94329071 39.27352905]
[-115.00257111 50.51413727]
[-100.29743195 53.47368622]
[-85.59230042 56.43323898]
[-77.47287750 48.03924179]
[-66.16274261 44.67556763]
[-54.53915787 47.32214737]
[-45.62038803 55.41387558]
[-41.78205490 66.95619965]
[-27.32880402 70.96912384]
[-12.87555408 74.98205566]
[1.57769620 78.99497986]
[16.03094673 83.00790405]
[30.48419571 87.02082825]
[44.93744659 91.03375244]
[59.39069748 95.04667664]
[73.84394836 99.05960083]
[83.89077759 81.94109344]
[101.73328400 77.84100342]
[115.66838074 87.16613770]
[129.96733093 82.63403320]
[140.78479004 71.08875275]
[155.25497437 74.61901855]
[169.55392456 70.08691406]
[183.85287476 65.55480194]
[194.67033386 54.00952911]
[209.14051819 57.53979111]
[219.95797729 45.99451828]
[234.42816162 49.52478027]
[245.24562073 37.97950363]
[259.71582031 41.50976562]
[274.01477051 36.97766113]
[288.31372070 32.44555283]
[296.94683838 18.92339134]
[312.91598511 17.38546562]
[323.97103882 29.01154137]
[321.63146973 44.88308716]
[307.69201660 52.82481384]
[292.84582520 46.74450684]
[278.54687500 51.27661133]
[264.24792480 55.80871964]
[254.45321655 67.02982330]
[238.96026611 63.82373047]
[229.16557312 75.04483795]
[213.67262268 71.83874512]
[203.87794495 83.05985260]
[188.38497925 79.85375977]
[174.08602905 84.38586426]
[159.78707886 88.91796875]
[149.99238586 100.13907623]
[134.49943542 96.93298340]
[120.20049286 101.46508789]
[113.70883179 118.73294067]
[93.90863037 125.45424652]
[101.64593506 139.25442505]
[93.90863037 151.98168945]
[93.90863037 166.98168945]
[93.90863037 181.98168945]
[106.00321960 191.89405823]
[108.84583282 207.27110291]
[101.09429169 220.85226440]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 83]
[5 82]
[6 81]
[8 79]
[9 42]
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[20 29]
[21 28]
[22 27]
[45 77]
[46 76]
[48 74]
[49 73]
[50 72]
[52 70]
[54 68]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
