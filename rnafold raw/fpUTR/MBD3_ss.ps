%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCGGGCCGGAACAGCCGCGGCAAGUGGCGGCGGCGGCAGCGGCAGCGGAGGCAGCUGAGGCGGCGGCGGCGAGUGGGGGUCCGGGCGGCGGCGGCGGGCCCGGCGGCGGGCCGAGGAGCCGGGCGCA\
) } def
/len { sequence length } bind def

/coor [
[252.24172974 253.40261841]
[241.19946289 243.25036621]
[230.03625488 233.23124695]
[218.87306213 223.21212769]
[207.70985413 213.19299316]
[193.06997681 210.45011902]
[187.96775818 195.47421265]
[173.32789612 192.73133850]
[168.22567749 177.75543213]
[157.06246948 167.73629761]
[145.89926147 157.71717834]
[134.73606873 147.69805908]
[131.83883667 147.77403259]
[128.73719788 146.64865112]
[125.91104126 144.23799133]
[123.86135101 140.64164734]
[123.04291534 136.14428711]
[112.89066315 125.10202026]
[102.73840332 114.05974579]
[89.45541382 109.69469452]
[86.21932983 96.09250641]
[71.18331146 91.17023468]
[68.26509857 76.56430054]
[58.11284256 65.52203369]
[42.55771637 64.69998932]
[32.41918564 53.35693359]
[33.29873657 38.53256226]
[23.14648056 27.49029541]
[8.11046505 22.56801987]
[5.19225264 7.96208572]
[-4.96000433 -3.08018208]
[-19.99601936 -8.00245762]
[-22.91423225 -22.60839081]
[-33.06649017 -33.65066147]
[-48.10250473 -38.57293701]
[-51.02071762 -53.17887115]
[-61.17297363 -64.22113800]
[-76.72810364 -65.04318237]
[-86.86663055 -76.38623047]
[-85.98708344 -91.21060181]
[-96.13933563 -102.25286865]
[-106.29159546 -113.29514313]
[-116.44384766 -124.33740997]
[-131.47987366 -129.25968933]
[-134.39808655 -143.86561584]
[-144.55033875 -154.90788269]
[-160.16264343 -154.01907349]
[-172.66268921 -163.41496277]
[-176.14833069 -178.65911865]
[-168.97377014 -192.55371094]
[-154.52659607 -198.53813171]
[-139.62834167 -193.78672791]
[-131.31349182 -180.54296875]
[-133.50807190 -165.06013489]
[-123.35581207 -154.01786804]
[-109.04595184 -149.88542175]
[-105.40158081 -134.48966980]
[-95.24932861 -123.44739532]
[-85.09706879 -112.40512848]
[-74.94480896 -101.36286163]
[-60.09889221 -100.99648285]
[-49.64575958 -89.94268036]
[-50.13070679 -74.37339783]
[-39.97845078 -63.33112717]
[-25.66859245 -59.19866562]
[-22.02422142 -43.80291748]
[-11.87196541 -32.76064682]
[2.43789339 -28.62818909]
[6.08226347 -13.23243904]
[16.23451996 -2.19017100]
[30.54437828 1.94228804]
[34.18874741 17.33803940]
[44.34100723 28.38030624]
[59.18692780 28.74668312]
[69.64006042 39.80049133]
[69.15511322 55.36977386]
[79.30736542 66.41204071]
[93.61722565 70.54450226]
[97.26159668 85.94025421]
[110.54458618 90.30530548]
[113.78067017 103.90749359]
[123.93292999 114.94976044]
[134.08518982 125.99202728]
[144.75518799 136.53485107]
[155.91839600 146.55397034]
[167.08160400 156.57310486]
[178.24479675 166.59222412]
[193.68313599 170.05172729]
[197.98689270 184.31100464]
[213.42523193 187.77050781]
[217.72897339 202.02978516]
[228.89218140 212.04891968]
[240.05538940 222.06803894]
[251.21858215 232.08715820]
[259.78598022 235.53796387]
[262.52566528 242.48287964]
[278.09963989 242.18464661]
[289.02731323 252.76957703]
[289.21566772 267.61883545]
[304.56658936 271.44754028]
[308.52719116 285.80590820]
[319.44692993 296.08984375]
[330.36666870 306.37377930]
[341.28640747 316.65771484]
[352.20614624 326.94161987]
[363.12588501 337.22555542]
[374.04565430 347.50949097]
[389.61962891 347.21127319]
[400.54730225 357.79617310]
[400.73562622 372.64541626]
[416.24365234 370.63665771]
[429.38677979 379.10971069]
[433.95919800 394.06387329]
[427.80197144 408.43823242]
[413.82235718 415.44567871]
[398.62109375 411.77749634]
[389.37576294 399.16571045]
[390.45169067 383.56518555]
[375.61785889 384.26690674]
[364.39718628 373.99310303]
[363.76171875 358.42922974]
[352.84197998 348.14529419]
[341.92221069 337.86138916]
[331.00247192 327.57745361]
[320.08273315 317.29351807]
[309.16299438 307.00958252]
[298.24325562 296.72564697]
[283.67337036 293.63250732]
[278.93173218 278.53857422]
[264.09786987 279.24029541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 94]
[3 93]
[4 92]
[5 91]
[7 89]
[9 87]
[10 86]
[11 85]
[12 84]
[17 83]
[18 82]
[19 81]
[21 79]
[23 77]
[24 76]
[27 73]
[28 72]
[30 70]
[31 69]
[33 67]
[34 66]
[36 64]
[37 63]
[40 60]
[41 59]
[42 58]
[43 57]
[45 55]
[46 54]
[99 129]
[101 127]
[102 126]
[103 125]
[104 124]
[105 123]
[106 122]
[107 121]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
