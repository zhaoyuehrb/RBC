%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:16:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGCGGUGCCUGAGCGGGCGGGAAGGAGGCGUUCGUCUAGAUUUGUCGGCUUGCGGGGAGACUUCAGGAGUCGCUGUCUCUGAACUUCCAGCCUCAGAGACCGCCGCCCUUGUCCCCGAGGGCC\
) } def
/len { sequence length } bind def

/coor [
[212.05812073 401.93814087]
[211.23362732 397.86047363]
[211.87495422 393.30969238]
[205.70565796 379.63711548]
[199.53634644 365.96453857]
[193.36703491 352.29193115]
[187.19773865 338.61935425]
[181.02842712 324.94677734]
[167.04922485 319.93502808]
[160.59790039 306.15698242]
[165.94943237 291.52828979]
[159.78012085 277.85568237]
[153.61082458 264.18310547]
[147.44151306 250.51051331]
[144.17576599 248.92518616]
[141.55485535 245.61978149]
[140.40638733 240.93432617]
[141.36495972 235.57780457]
[136.23464966 221.48242188]
[131.10435486 207.38702393]
[119.48068237 198.07362366]
[122.03142548 182.45938110]
[116.90112305 168.36399841]
[111.77082062 154.26860046]
[106.64051819 140.17321777]
[101.51022339 126.07782745]
[78.60807800 120.04033661]
[67.74211884 96.00994110]
[52.81666183 94.51641846]
[37.89119720 93.02290344]
[22.96573639 91.52938843]
[8.24849796 98.76367188]
[-5.22272968 89.41177368]
[-3.58990192 73.09411621]
[11.46726799 66.59690857]
[24.45925522 76.60392761]
[39.38471603 78.09744263]
[54.31017685 79.59095764]
[69.23564148 81.08448029]
[79.57451630 70.21674347]
[77.33888245 55.38428116]
[75.10324860 40.55181885]
[72.86761475 25.71935654]
[62.92680359 17.38890648]
[61.42121887 4.91191339]
[68.61984253 -4.89483356]
[64.40663147 -13.12615013]
[66.89849854 -20.17215538]
[65.40498352 -35.09761429]
[63.91146469 -50.02307892]
[62.41794586 -64.94853973]
[60.92442703 -79.87400055]
[59.43091202 -94.79946136]
[47.48199463 -104.79251862]
[46.17997360 -119.95033264]
[55.78046036 -131.28021240]
[54.28694153 -146.20567322]
[52.79342651 -161.13113403]
[51.29990768 -176.05659485]
[43.70654678 -191.21499634]
[56.17050171 -202.70788574]
[70.66459656 -193.91256714]
[66.22537231 -177.55012512]
[67.71888733 -162.62464905]
[69.21240234 -147.69918823]
[70.70592499 -132.77372742]
[82.36103058 -123.57079315]
[84.08828735 -108.45552826]
[74.35636902 -96.29298401]
[75.84989166 -81.36751556]
[77.34340668 -66.44205475]
[78.83692169 -51.51659393]
[80.33044434 -36.59113312]
[81.82395935 -21.66567230]
[83.50342560 -6.75998878]
[94.84698486 6.56837034]
[87.70007324 23.48372078]
[89.93570709 38.31618500]
[92.17134094 53.14864731]
[94.40697479 67.98110962]
[108.47003174 69.72240448]
[119.99494171 77.13249207]
[126.92267609 88.40694427]
[128.22732544 101.10419464]
[124.05255127 112.66928864]
[115.60560608 120.94752502]
[120.73590851 135.04290771]
[125.86621094 149.13830566]
[130.99652100 163.23368835]
[136.12681580 177.32908630]
[148.11743164 187.65069580]
[145.19973755 202.25672913]
[150.33004761 216.35211182]
[155.46034241 230.44750977]
[161.11410522 244.34120178]
[167.28340149 258.01379395]
[173.45271301 271.68637085]
[179.62202454 285.35897827]
[194.13137817 291.02609253]
[200.19316101 304.97991943]
[194.70101929 318.77746582]
[200.87031555 332.45004272]
[207.03962708 346.12261963]
[213.20893860 359.79522705]
[219.37823486 373.46780396]
[225.54754639 387.14038086]
[232.39070129 400.48846436]
[239.89070129 413.47885132]
[247.39070129 426.46923828]
[254.89070129 439.45962524]
[262.39071655 452.44998169]
[269.89071655 465.44036865]
[277.39071655 478.43075562]
[291.85559082 486.15728760]
[292.12615967 502.55419922]
[277.92410278 510.75375366]
[263.85925293 502.32098389]
[264.40032959 485.93075562]
[256.90032959 472.94036865]
[249.40032959 459.94998169]
[241.90032959 446.95962524]
[234.40032959 433.96923828]
[226.90032959 420.97885132]
[219.40032959 407.98846436]
[216.61129761 407.16424561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 106]
[4 105]
[5 104]
[6 103]
[7 102]
[8 101]
[11 98]
[12 97]
[13 96]
[14 95]
[18 94]
[19 93]
[20 92]
[22 90]
[23 89]
[24 88]
[25 87]
[26 86]
[28 39]
[29 38]
[30 37]
[31 36]
[40 80]
[41 79]
[42 78]
[43 77]
[46 75]
[48 74]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[56 66]
[57 65]
[58 64]
[59 63]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
