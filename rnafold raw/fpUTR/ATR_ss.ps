%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGGGAGGAGUUUUGGCCUCCACACGGCUCCGUCGGGCGCCGCGCUCUUCCGGCAGCGGUAGCUUUGGAGACGCCGGGAACCCGCGUUGGCGUGGUUGACUAGUGCCUCGCAGCCUCAGC\
) } def
/len { sequence length } bind def

/coor [
[102.82832336 128.60609436]
[94.99882507 141.40057373]
[80.00372314 141.01716614]
[72.83831024 127.83927917]
[80.66751099 115.04527283]
[73.16996002 114.85373688]
[63.04787827 125.92367554]
[52.92580032 136.99360657]
[42.80372238 148.06355286]
[32.68164444 159.13348389]
[35.92324829 174.30819702]
[29.59553909 188.47645569]
[16.13164902 196.19029236]
[0.70872074 194.48358154]
[-10.74281693 184.01257324]
[-13.81961346 168.80360413]
[-7.33857822 154.70481873]
[6.20819950 147.13748169]
[21.61170769 149.01141357]
[31.73378563 137.94146729]
[41.85586166 126.87153625]
[51.97793961 115.80159760]
[62.10001755 104.73165894]
[78.09529877 91.06118011]
[94.32294464 92.85915375]
[93.55703735 77.87872314]
[92.79113007 62.89828873]
[92.02521515 47.91785431]
[83.59336853 34.53075790]
[90.67071533 21.42501450]
[79.22190857 10.86269474]
[78.65856934 -4.34050512]
[88.79868317 -15.19009972]
[88.03276825 -30.17053223]
[84.43410492 -38.69588089]
[87.44355774 -45.54235458]
[87.06047821 -60.53746414]
[86.67739868 -75.53256989]
[86.29431915 -90.52767944]
[75.11899567 -101.37893677]
[74.94410706 -116.59156799]
[85.35799408 -127.17865753]
[84.97491455 -142.17376709]
[73.79959106 -153.02502441]
[73.62471008 -168.23765564]
[84.03859711 -178.82475281]
[83.65551758 -193.81985474]
[83.08097839 -208.80885315]
[82.31506348 -223.78927612]
[81.54915619 -238.76971436]
[77.95048523 -247.29505920]
[80.95994568 -254.14154053]
[80.57686615 -269.13665771]
[80.19378662 -284.13174438]
[79.81070709 -299.12686157]
[76.43093109 -307.74133301]
[79.61425781 -314.50872803]
[79.61425781 -329.50872803]
[79.61425781 -344.50872803]
[70.95055389 -358.43252563]
[78.91468048 -372.76794434]
[95.31382751 -372.76794434]
[103.27796173 -358.43252563]
[94.61425781 -344.50872803]
[94.61425781 -329.50872803]
[94.61425781 -314.50872803]
[94.80580902 -299.50994873]
[95.18888855 -284.51483154]
[95.57196808 -269.51971436]
[95.95504761 -254.52461243]
[96.52959442 -239.53562927]
[97.29550171 -224.55519104]
[98.06140900 -209.57475281]
[101.58612823 -202.97874451]
[98.65062714 -194.20294189]
[99.03370667 -179.20782471]
[109.97459412 -169.16629028]
[110.57669830 -153.96456909]
[99.97002411 -142.55683899]
[100.35310364 -127.56173706]
[111.29399109 -117.52019501]
[111.89610291 -102.31848145]
[101.28942871 -90.91075897]
[101.67250824 -75.91564941]
[102.05558777 -60.92054367]
[102.43866730 -45.92543411]
[103.01320648 -30.93644142]
[103.77911377 -15.95600891]
[114.97287750 -6.19715738]
[115.96302032 8.98422146]
[105.65114594 20.65910530]
[114.02821350 32.97470474]
[107.00565338 47.15194702]
[107.77156067 62.13238144]
[108.53746796 77.11281586]
[109.30337524 92.09324646]
[114.73251343 106.07625580]
[124.27614594 117.64859009]
[133.81977844 129.22093201]
[143.36341858 140.79327393]
[152.90705872 152.36560059]
[166.63059998 150.50260925]
[179.37026978 155.65141296]
[187.81106567 166.35603333]
[189.81442261 179.73034668]
[184.95927429 192.23582458]
[194.20425415 204.04812622]
[203.44923401 215.86041260]
[217.97280884 224.60696411]
[213.58860779 240.98423767]
[196.63769531 241.30505371]
[191.63693237 225.10539246]
[182.39195251 213.29310608]
[173.14697266 201.48080444]
[156.82398987 202.61413574]
[142.87974548 193.74147034]
[136.87251282 178.16662598]
[141.33471680 161.90924072]
[131.79107666 150.33689880]
[122.24744415 138.76457214]
[112.70381165 127.19223022]
[103.16017151 115.61989594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[25 96]
[26 95]
[27 94]
[28 93]
[30 91]
[33 88]
[34 87]
[36 86]
[37 85]
[38 84]
[39 83]
[42 80]
[43 79]
[46 76]
[47 75]
[48 73]
[49 72]
[50 71]
[52 70]
[53 69]
[54 68]
[55 67]
[57 66]
[58 65]
[59 64]
[97 122]
[98 121]
[99 120]
[100 119]
[101 118]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
