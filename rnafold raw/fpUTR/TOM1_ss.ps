%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCGCGGUGCCACCGCCCCGCCCACGCCUCCUCGCCGGCCUCCGAGUGCGUCACGUGACGGGUCGGUGGCGCUGGCGGUUGCUGUCAGCUGAUUCCCGGGGUUGGUGGCAGCGGCGGUAGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[93.48887634 312.56286621]
[78.34125519 316.44659424]
[64.26351166 309.63842773]
[57.90273285 295.35296631]
[62.26228714 280.33535767]
[75.28372192 271.67648315]
[68.85209656 258.24206543]
[77.92500305 245.28085327]
[79.41851807 230.35539246]
[80.91204071 215.42991638]
[74.48041534 201.99551392]
[83.55332184 189.03430176]
[85.04683685 174.10884094]
[86.54035187 159.18338013]
[88.03387451 144.25791931]
[89.52738953 129.33245850]
[91.02090454 114.40699005]
[86.24360657 100.18807983]
[76.04101562 89.19230652]
[65.83842468 78.19652557]
[55.63583374 67.20074463]
[45.43324280 56.20496750]
[29.87452316 55.45399094]
[19.68428421 44.15736771]
[20.49611092 29.32913208]
[10.29352093 18.33335495]
[0.09092966 7.33757687]
[-10.11166096 -3.65820146]
[-13.88785362 10.85869789]
[-27.48628235 17.18979263]
[-41.02640533 10.73494244]
[-44.67004395 -3.81579256]
[-35.76975250 -15.88993073]
[-20.79277229 -16.71460915]
[-29.54892731 -28.89367867]
[-38.30508041 -41.07275009]
[-47.06123734 -53.25181961]
[-55.81739426 -65.43089294]
[-64.57354736 -77.60996246]
[-73.32970428 -89.78903198]
[-82.08586121 -101.96810150]
[-99.01301575 -109.08699799]
[-100.19889069 -126.54882050]
[-109.25595856 -138.50581360]
[-123.75621796 -144.83456421]
[-125.27334595 -159.65170288]
[-134.33041382 -171.60868835]
[-143.38748169 -183.56567383]
[-157.77095032 -192.54075623]
[-153.12835693 -208.84666443]
[-136.17449951 -208.89942932]
[-131.43048096 -192.62274170]
[-122.37342072 -180.66575623]
[-113.31635284 -168.70877075]
[-99.46392059 -163.23526001]
[-97.29896545 -147.56288147]
[-88.24190521 -135.60589600]
[-76.24121857 -133.61190796]
[-68.60711670 -123.62878418]
[-69.90678406 -110.72425842]
[-61.15063095 -98.54518127]
[-52.39447784 -86.36611176]
[-43.63832092 -74.18704224]
[-34.88216782 -62.00797272]
[-26.12601280 -49.82890320]
[-17.36985779 -37.64983368]
[-8.61370182 -25.47076416]
[0.88411665 -13.86079216]
[11.08670807 -2.86501431]
[21.28929901 8.13076401]
[31.49188995 19.12654114]
[46.33932877 19.42510033]
[56.84284592 30.43104172]
[56.42901993 46.00237656]
[66.63161469 56.99815750]
[76.83420563 67.99393463]
[87.03679657 78.98971558]
[97.23938751 89.98548889]
[102.81298065 86.40614319]
[110.88621521 86.45732880]
[119.04985809 91.47722626]
[133.97532654 92.97074890]
[148.90078735 94.46426392]
[163.82624817 95.95777893]
[178.75170898 97.45130157]
[193.67716980 98.94481659]
[208.60263062 100.43833160]
[217.56509399 98.16239929]
[223.87994385 102.15967560]
[238.76353455 104.02483368]
[253.64712524 105.88998413]
[268.53070068 107.75514221]
[283.41430664 109.62030029]
[298.29788208 111.48545074]
[313.18148804 113.35060883]
[329.64950562 109.32069397]
[338.08074951 124.02955627]
[326.28070068 136.20310974]
[311.31631470 128.23419189]
[296.43273926 126.36904144]
[281.54913330 124.50388336]
[266.66555786 122.63873291]
[251.78196716 120.77357483]
[236.89837646 118.90841675]
[222.01480103 117.04326630]
[207.10911560 115.36380005]
[192.18365479 113.87027740]
[177.25819397 112.37676239]
[162.33273315 110.88324738]
[147.40725708 109.38972473]
[132.48179626 107.89620972]
[117.55634308 106.40268707]
[105.94637299 115.90051270]
[104.45285034 130.82597351]
[102.95933533 145.75143433]
[101.46581268 160.67689514]
[99.97229767 175.60235596]
[98.47878265 190.52781677]
[104.80358124 205.02980042]
[95.83750153 216.92344666]
[94.34397888 231.84890747]
[92.85046387 246.77436829]
[99.17526245 261.27633667]
[90.20918274 273.16998291]
[101.25671387 284.23733521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 124]
[8 122]
[9 121]
[10 120]
[12 118]
[13 117]
[14 116]
[15 115]
[16 114]
[17 113]
[18 78]
[19 77]
[20 76]
[21 75]
[22 74]
[25 71]
[26 70]
[27 69]
[28 68]
[34 67]
[35 66]
[36 65]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[43 57]
[44 56]
[46 54]
[47 53]
[48 52]
[81 112]
[82 111]
[83 110]
[84 109]
[85 108]
[86 107]
[87 106]
[89 105]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
[95 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
