%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGGCGGAGGCGCGGGGCCACCCCCAAGCCGAGCCGGGGUGGGACGGCGCGCCUGGCGACCGCGCACUGAGACUGCCGUGCCGGACCCCCGAGCCGGAGCCGAGCGCGCCGAGGCCGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[106.95087433 174.80050659]
[91.89569855 180.34318542]
[78.25074005 171.90548706]
[76.48324585 155.96009827]
[87.94907379 144.73895264]
[89.45450592 129.81468201]
[90.95993042 114.89041901]
[86.03553772 109.23352814]
[74.72161102 119.08214569]
[64.87317657 107.76806641]
[76.18675232 97.91976166]
[71.26235962 92.26287842]
[56.27301407 91.69752502]
[41.28367233 91.13217163]
[26.29433060 90.56681824]
[12.21234322 97.77848816]
[-0.21426569 89.56699371]
[-11.75009823 100.03419495]
[-26.94336891 99.24732208]
[-36.85115433 88.18515778]
[-51.84049606 87.61980438]
[-66.82984161 87.05445862]
[-81.81918335 86.48910522]
[-96.80852509 85.92375183]
[-111.79786682 85.35839844]
[-126.78720856 84.79304504]
[-134.42802429 92.73094940]
[-144.97438049 95.04301453]
[-154.82353210 91.19039154]
[-160.74887085 82.69843292]
[-175.69087219 81.38066864]
[-191.99993896 86.01214600]
[-200.96522522 71.62255859]
[-189.61981201 59.02421570]
[-174.37310791 66.43866730]
[-159.43110657 67.75643158]
[-142.66050720 58.26488876]
[-126.22185516 69.80370331]
[-111.23251343 70.36905670]
[-96.24317169 70.93441010]
[-81.25382996 71.49976349]
[-66.26448822 72.06510925]
[-51.27514267 72.63046265]
[-36.28580093 73.19581604]
[-25.57288742 62.91141129]
[-10.36350918 63.27122879]
[0.35108706 74.57765198]
[13.36093616 67.32553864]
[26.85968208 75.57747650]
[41.84902573 76.14282990]
[56.83836746 76.70818329]
[71.82770538 77.27353668]
[99.35153198 74.75352478]
[110.66430664 90.45306396]
[124.93016052 85.81780243]
[139.19599915 81.18254852]
[153.46185303 76.54729462]
[167.72770691 71.91204071]
[181.99354553 67.27678680]
[189.21517944 53.47512436]
[203.74880981 48.97753906]
[216.86207581 55.94731522]
[227.59585571 44.32421875]
[242.09117126 47.74988174]
[256.35702515 43.11462784]
[270.62286377 38.47937393]
[284.88873291 33.84412003]
[295.62249756 22.22102165]
[310.11782837 25.64668846]
[324.38366699 21.01143265]
[331.60528564 7.20977259]
[346.13891602 2.71218729]
[359.25219727 9.68196106]
[366.54446411 3.99251723]
[373.93511963 5.11435890]
[388.31295776 0.83906978]
[395.74591064 -4.66532230]
[403.10604858 -3.35810709]
[417.58676147 -7.27072954]
[432.06747437 -11.18335247]
[439.63641357 -16.49921417]
[446.96136475 -15.00745201]
[461.53585815 -18.55493736]
[476.06460571 -22.28528595]
[490.54531860 -26.19790840]
[505.02603149 -30.11053085]
[516.20794678 -42.10621643]
[532.12451172 -38.15706635]
[536.40209961 -22.32563210]
[524.64031982 -10.89793205]
[508.93865967 -15.62980556]
[494.45794678 -11.71718311]
[479.97720337 -7.80456066]
[474.27697754 -2.96849489]
[465.08334351 -3.98046088]
[450.50885010 -0.43297592]
[435.98010254 3.29737234]
[421.49938965 7.20999479]
[407.01864624 11.12261772]
[392.58825684 15.21689701]
[378.21041870 19.49218559]
[363.88745117 23.94780922]
[357.37530518 37.29426193]
[342.97375488 42.19829178]
[329.01892090 35.27727890]
[314.75308228 39.91253662]
[305.03967285 51.20409012]
[289.52398682 48.10996628]
[275.25811768 52.74522018]
[260.99227905 57.38047791]
[246.72642517 62.01573181]
[237.01303101 73.30728149]
[221.49732971 70.21316528]
[214.98519897 83.55961609]
[200.58363342 88.46364594]
[186.62879944 81.54263306]
[172.36296082 86.17788696]
[158.09710693 90.81314087]
[143.83125305 95.44839478]
[129.56541443 100.08365631]
[115.29956818 104.71891022]
[105.88419342 116.39584351]
[104.37876892 131.32011414]
[102.87334442 146.24436951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 124]
[6 123]
[7 122]
[12 52]
[13 51]
[14 50]
[15 49]
[17 47]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[30 36]
[31 35]
[54 121]
[55 120]
[56 119]
[57 118]
[58 117]
[59 116]
[62 113]
[64 111]
[65 110]
[66 109]
[67 108]
[69 106]
[70 105]
[73 102]
[75 101]
[76 100]
[78 99]
[79 98]
[80 97]
[82 96]
[83 95]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
