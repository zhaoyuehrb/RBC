%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCCGCCCCGCUCGCUGGCCUGCCCUCCUCUUGCUACCCUCCCGGCGCAGAGAACCCCGGCUGCUCAGCGCGCUCCGCGGUC\
) } def
/len { sequence length } bind def

/coor [
[81.85901642 344.96713257]
[67.61024475 338.52456665]
[60.88287354 324.40805054]
[64.85336304 309.28292847]
[77.64697266 300.29083252]
[78.75476074 285.33178711]
[79.86254883 270.37274170]
[80.97033691 255.41371155]
[69.49949646 245.95021057]
[65.75642395 231.37443542]
[71.37957001 217.22404480]
[84.40727234 209.00302124]
[85.51506042 194.04397583]
[78.73883057 180.78004456]
[87.47417450 167.58897400]
[88.58196259 152.62994385]
[89.68975067 137.67089844]
[90.79753876 122.71186829]
[91.90532684 107.75283051]
[92.73650360 92.77587128]
[93.29077148 77.78611755]
[85.02737427 67.67884827]
[85.94026947 55.06063080]
[94.97688293 46.79432678]
[96.08467102 31.83528709]
[97.19245148 16.87624931]
[82.16644287 5.45691109]
[76.82225037 -12.49179935]
[83.05706024 -29.99666214]
[98.30393219 -40.36222076]
[97.74965668 -55.35197449]
[97.19538879 -70.34172821]
[96.64111328 -85.33148956]
[95.80994415 -100.30844116]
[94.70215607 -115.26747894]
[93.59436798 -130.22651672]
[92.48657990 -145.18554688]
[79.22329712 -153.23944092]
[73.25810242 -167.56410217]
[76.88472748 -182.65142822]
[88.70866394 -192.70001221]
[104.18336487 -193.84599304]
[117.35848999 -185.64869690]
[123.16793823 -171.26016235]
[119.37786102 -156.21307373]
[107.44561768 -146.29333496]
[108.55340576 -131.33430481]
[109.66119385 -116.37526703]
[110.76898193 -101.41622925]
[114.49258423 -94.82083893]
[111.63086700 -85.88575745]
[112.18514252 -70.89600372]
[112.73941803 -55.90624619]
[113.29368591 -40.91649246]
[123.91989899 -36.36861038]
[132.03439331 -28.06419754]
[136.37408447 -17.23879433]
[136.24168396 -5.52451801]
[131.61746216 5.29598284]
[123.16821289 13.56081009]
[112.15148926 17.98403740]
[111.04370117 32.94307709]
[109.93592072 47.90211487]
[118.45307922 63.12661362]
[108.28053284 78.34039307]
[107.72625732 93.33014679]
[110.65447998 101.06644440]
[106.86436462 108.86061859]
[105.75657654 123.81965637]
[104.64878845 138.77868652]
[103.54100037 153.73773193]
[102.43321228 168.69676208]
[109.13021088 183.03067017]
[100.47409821 195.15176392]
[99.36631012 210.11080933]
[111.04092407 220.16116333]
[114.51835632 234.98548889]
[108.66907501 248.85090637]
[95.92937469 256.52151489]
[94.82158661 271.48052979]
[93.71379852 286.43957520]
[92.60601044 301.39862061]
[103.93550873 312.17712402]
[105.63473511 327.72213745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 82]
[6 81]
[7 80]
[8 79]
[12 75]
[13 74]
[15 72]
[16 71]
[17 70]
[18 69]
[19 68]
[20 66]
[21 65]
[24 63]
[25 62]
[26 61]
[30 54]
[31 53]
[32 52]
[33 51]
[34 49]
[35 48]
[36 47]
[37 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
