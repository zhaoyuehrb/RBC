%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:20:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCCCGGGGCGCAGGCGCACUCGUCGCCGCGGCGGCGUCCGGGGCUGGCGUUCCCCUGGAGGCUGGGACAGAGGGUCUCACGG\
) } def
/len { sequence length } bind def

/coor [
[194.62812805 225.43226624]
[185.03302002 213.90255737]
[175.43792725 202.37284851]
[165.84283447 190.84313965]
[151.75428772 186.00970459]
[148.87394714 170.45289612]
[139.27885437 158.92318726]
[129.68376160 147.39347839]
[120.08866119 135.86376953]
[110.49356079 124.33406830]
[100.89846802 112.80435944]
[90.68631744 101.81745911]
[79.88776398 91.40634918]
[69.08921051 80.99523926]
[53.78416061 76.98699951]
[49.99201584 62.58322144]
[39.19346237 52.17210770]
[28.39490891 41.76099777]
[13.08985710 37.75276184]
[9.29771042 23.34898186]
[-7.19476652 26.55177116]
[-22.23528099 19.44289207]
[-30.07307053 4.95599937]
[-27.83933449 -11.19681835]
[-39.01091766 -21.20660019]
[-50.18249893 -31.21638298]
[-61.35408401 -41.22616577]
[-72.52566528 -51.23594666]
[-83.69725037 -61.24572754]
[-99.84876251 -64.08486176]
[-105.21077728 -79.58262634]
[-94.26731873 -91.79625702]
[-78.27607727 -88.16141510]
[-73.68746185 -72.41731262]
[-62.51588440 -62.40752792]
[-51.34429932 -52.39774704]
[-40.17271805 -42.38796616]
[-29.00113487 -32.37818146]
[-17.82955170 -22.36840057]
[-4.96196795 -26.38792229]
[8.30467796 -23.44194031]
[18.42270470 -14.20703793]
[22.63119507 -1.05616379]
[19.70882416 12.55042934]
[34.24148941 15.81399155]
[38.80602264 30.96244431]
[49.60457611 41.37355804]
[60.40312576 51.78466797]
[74.93579102 55.04823303]
[79.50032806 70.19668579]
[90.29888153 80.60779572]
[101.09742737 91.01891327]
[105.19919586 91.46384430]
[109.04151154 93.83756256]
[111.71185303 97.95613098]
[112.42817688 103.20926666]
[122.02326965 114.73897552]
[131.61836243 126.26868439]
[141.21345520 137.79838562]
[150.80856323 149.32809448]
[160.40365601 160.85780334]
[175.17849731 166.51593018]
[177.37254333 181.24804688]
[186.96763611 192.77775574]
[196.56272888 204.30746460]
[206.15782166 215.83717346]
[216.76443481 226.44377136]
[228.29414368 236.03886414]
[239.82383728 245.63395691]
[251.35354614 255.22904968]
[262.88327026 264.82415771]
[278.92630005 264.79882812]
[288.83584595 277.41546631]
[285.01016235 292.99572754]
[270.38400269 299.58770752]
[256.17724609 292.13461304]
[253.28816223 276.35385132]
[241.75845337 266.75875854]
[230.22874451 257.16366577]
[218.69903564 247.56857300]
[207.16934204 237.97348022]
[204.63742065 238.37831116]
[201.78880310 237.81883240]
[198.97940063 236.17326355]
[196.60124207 233.44599915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[6 61]
[7 60]
[8 59]
[9 58]
[10 57]
[11 56]
[12 52]
[13 51]
[14 50]
[16 48]
[17 47]
[18 46]
[20 44]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
