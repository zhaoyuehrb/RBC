%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:59:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCAGACAGUGGUGGGGACAACCUGAGUGCUCAGUCGUAAAGAGGAAAGGCAGAAUUUUUCCUUGCU\
) } def
/len { sequence length } bind def

/coor [
[166.06742859 178.76968384]
[154.76922607 174.86143494]
[144.94110107 168.02659607]
[137.32456970 158.77027893]
[132.49717712 147.78067017]
[130.82864380 135.87786865]
[132.45265198 123.95274353]
[118.93811035 117.44448853]
[105.42357635 110.93622589]
[91.63066101 105.04085541]
[77.58713531 99.77023315]
[63.54361725 94.49961090]
[49.50009155 89.22898865]
[33.86119843 91.62388611]
[24.66417503 79.90791321]
[9.02527905 82.30281067]
[-0.17174399 70.58683777]
[-14.21526718 65.31621552]
[-28.25879097 60.04558945]
[-44.33894730 63.26437759]
[-54.96188736 50.77096939]
[-49.19963837 35.41751862]
[-32.97991180 32.99833298]
[-22.98816681 46.00206757]
[-8.94464493 51.27268982]
[5.09887838 56.54331207]
[19.73328590 53.77142334]
[29.93479729 65.86438751]
[44.56920624 63.09249878]
[54.77071381 75.18546295]
[68.81423950 80.45608521]
[82.85775757 85.72670746]
[96.90128326 90.99732971]
[102.39156342 89.86183167]
[108.07369232 92.07706451]
[111.93183136 97.42169952]
[125.44636536 103.92995453]
[138.96090698 110.43820953]
[152.88003540 97.96334076]
[170.68151855 92.41656494]
[189.13259888 94.76541901]
[204.89900208 104.54719543]
[215.14755249 119.95944977]
[218.05520630 138.19204712]
[232.67912292 141.52986145]
[247.30303955 144.86767578]
[261.92697144 148.20549011]
[276.55087280 151.54330444]
[291.17480469 154.88111877]
[305.79870605 158.21893311]
[320.42263794 161.55674744]
[335.04656982 164.89456177]
[349.34091187 157.61097717]
[363.88766479 164.37643433]
[367.52780151 180.00106812]
[357.46890259 192.49899292]
[341.42730713 192.28286743]
[331.70874023 179.51847839]
[317.08483887 176.18066406]
[302.46090698 172.84284973]
[287.83697510 169.50503540]
[273.21307373 166.16722107]
[258.58914185 162.82940674]
[243.96522522 159.49159241]
[229.34130859 156.15377808]
[214.71739197 152.81596375]
[208.70689392 163.05743408]
[200.13273621 171.29629517]
[189.63150024 176.90878296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 38]
[8 37]
[9 36]
[10 33]
[11 32]
[12 31]
[13 30]
[15 28]
[17 26]
[18 25]
[19 24]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
