%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:26:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGGGAGGGCGGGCCUGUUUCCGGGAGGCGCGUGGGGCUUGAGGCCGAGAACGGCCCUUGCUGCCACCAAC\
) } def
/len { sequence length } bind def

/coor [
[107.94966888 300.48745728]
[111.90158081 285.57482910]
[123.30391693 275.18298340]
[120.69919586 260.41088867]
[110.86936951 249.22053528]
[116.09275055 234.28645325]
[113.48802948 219.51432800]
[103.65820312 208.32398987]
[108.88158417 193.38989258]
[99.05176544 182.19955444]
[104.27514648 167.26547241]
[101.67041779 152.49334717]
[99.06569672 137.72123718]
[96.46097565 122.94911957]
[93.85625458 108.17700195]
[89.33984375 101.16993713]
[91.47484589 92.70475006]
[89.51695251 77.83307648]
[87.55905914 62.96140289]
[85.60116577 48.08972931]
[76.12877655 35.41754150]
[82.13864136 21.78923225]
[80.18074799 6.91755962]
[78.22285461 -7.95411301]
[61.72675323 -18.86721802]
[58.12866974 -38.01929474]
[69.20245361 -53.69798660]
[65.32016754 -68.18687439]
[61.43788528 -82.67575836]
[50.39247894 -94.00314331]
[54.57207870 -108.29930115]
[44.63229370 -122.03382111]
[55.07845688 -135.38725281]
[70.80181122 -129.04592896]
[69.06096649 -112.18158722]
[79.82868195 -101.89054871]
[75.92677307 -86.55804443]
[79.80905914 -72.06916046]
[83.69134521 -57.58026886]
[94.14440155 -54.85493851]
[102.47676849 -47.85103226]
[107.02744293 -37.87218475]
[106.84969330 -26.82361031]
[101.90715027 -16.84844017]
[93.09452820 -9.91200638]
[95.05242157 4.95966673]
[97.01031494 19.83133888]
[106.34265900 31.43980789]
[100.47283936 46.13183975]
[102.43073273 61.00350952]
[104.38862610 75.87518311]
[106.34651947 90.74685669]
[108.62837219 105.57228088]
[111.23309326 120.34439850]
[113.83781433 135.11651611]
[116.44253540 149.88862610]
[119.04725647 164.66075134]
[129.06338501 176.90769958]
[123.65370178 190.78517151]
[133.66983032 203.03211975]
[128.26014709 216.90960693]
[130.86486816 231.68173218]
[140.88099670 243.92868042]
[135.47131348 257.80615234]
[138.07603455 272.57827759]
[152.34494019 278.44357300]
[161.15893555 291.10522461]
[161.70550537 306.52288818]
[153.81024170 319.77688599]
[139.99250793 326.63790894]
[124.66146851 324.91662598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 65]
[4 64]
[6 62]
[7 61]
[9 59]
[11 57]
[12 56]
[13 55]
[14 54]
[15 53]
[17 52]
[18 51]
[19 50]
[20 49]
[22 47]
[23 46]
[24 45]
[27 39]
[28 38]
[29 37]
[31 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
