%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGGCGUGGUUGCAUGGGGGCUCCGCGGGUCUCGCGAGCCUUCCUGUCUAGCCUCUCCGGAGCUUCUCGGGCCGGGGUCCGGAGCGCGGUUCCUAUGACAACGUCCCUCCCGCG\
) } def
/len { sequence length } bind def

/coor [
[108.17494202 519.38031006]
[106.97815704 504.42813110]
[95.50812531 494.99551392]
[94.08140564 479.84893799]
[104.05296326 467.88204956]
[102.85617065 452.92987061]
[101.65937805 437.97769165]
[91.45482635 432.54995728]
[85.12184143 422.73715210]
[84.36384583 410.96188354]
[89.49018860 400.20013428]
[99.30813599 393.22918701]
[98.90882874 378.23449707]
[98.50952148 363.23980713]
[98.11021423 348.24514771]
[97.51133728 333.25708008]
[96.71300507 318.27835083]
[95.91467285 303.29962158]
[95.11634064 288.32086182]
[94.31800842 273.34213257]
[93.51967621 258.36340332]
[92.72134399 243.38464355]
[91.92301178 228.40591431]
[88.93552399 224.53044128]
[88.43849945 218.70599365]
[91.50244141 212.61289978]
[91.50244141 197.61289978]
[91.50244141 182.61289978]
[91.50244141 167.61289978]
[91.50244141 152.61289978]
[83.13472748 143.76673889]
[83.08824158 131.18753052]
[91.93847656 121.69007111]
[92.33778381 106.69538879]
[89.35661316 99.08599091]
[92.95259857 91.30832672]
[93.75093079 76.32958221]
[91.05733490 67.46383667]
[94.77514648 60.96434021]
[95.97193909 46.01215744]
[89.36036682 31.63865280]
[98.08845520 19.56928444]
[99.28524780 4.61710405]
[100.48204041 -10.33507538]
[92.17085266 -26.70011330]
[102.53667450 -40.79240036]
[103.33500671 -55.77114105]
[104.13333893 -70.74988556]
[104.93167114 -85.72862244]
[93.05180359 -95.53549957]
[89.26867676 -110.28478241]
[94.83009338 -124.26815033]
[107.40851593 -132.20045471]
[108.20684814 -147.17919922]
[109.00518036 -162.15792847]
[106.31158447 -171.02368164]
[110.02938843 -177.52317810]
[111.22618103 -192.47535706]
[103.70102692 -207.04602051]
[112.78353119 -220.70031738]
[129.13040161 -219.39189148]
[135.92536926 -204.46673584]
[126.17835999 -191.27856445]
[124.98157501 -176.32638550]
[123.98392487 -161.35960388]
[123.18558502 -146.38085938]
[122.38725281 -131.40211487]
[134.05126953 -122.17775726]
[138.09483337 -107.68246460]
[132.76539612 -93.41885376]
[119.91041565 -84.93029022]
[119.11208344 -69.95154572]
[118.31375122 -54.97280884]
[117.51541901 -39.99406815]
[125.40045929 -30.71509933]
[124.77738953 -18.15125275]
[115.43421936 -9.13828468]
[114.23742676 5.81389570]
[113.04064178 20.76607513]
[119.73781586 34.07010269]
[110.92411804 47.20895004]
[109.72732544 62.16113281]
[108.72967529 77.12791443]
[107.93134308 92.10665894]
[107.33246613 107.09469604]
[106.93315887 122.08938599]
[116.10355377 137.98889160]
[106.50244141 152.61289978]
[106.50244141 167.61289978]
[106.50244141 182.61289978]
[106.50244141 197.61289978]
[106.50244141 212.61289978]
[106.90174866 227.60757446]
[107.70008087 242.58631897]
[108.49842072 257.56506348]
[109.29675293 272.54379272]
[110.09508514 287.52255249]
[110.89341736 302.50128174]
[111.69174957 317.48001099]
[112.49008179 332.45877075]
[116.11078644 340.98797607]
[113.10489655 347.84582520]
[113.50420380 362.84051514]
[113.90351105 377.83520508]
[114.30281830 392.82986450]
[128.51713562 405.20098877]
[129.29624939 423.71258545]
[116.61155701 436.78091431]
[117.80834961 451.73309326]
[119.00514221 466.68527222]
[130.75323486 476.91366577]
[131.75395203 492.09436035]
[121.93033600 503.23132324]
[123.12712860 518.18353271]
[132.87413025 531.37170410]
[126.07916260 546.29681396]
[109.73229218 547.60528564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[5 110]
[6 109]
[7 108]
[12 105]
[13 104]
[14 103]
[15 102]
[16 100]
[17 99]
[18 98]
[19 97]
[20 96]
[21 95]
[22 94]
[23 93]
[26 92]
[27 91]
[28 90]
[29 89]
[30 88]
[33 86]
[34 85]
[36 84]
[37 83]
[39 82]
[40 81]
[42 79]
[43 78]
[44 77]
[46 74]
[47 73]
[48 72]
[49 71]
[53 67]
[54 66]
[55 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
