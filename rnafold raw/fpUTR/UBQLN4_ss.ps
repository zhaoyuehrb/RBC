%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGGAGGGGAGAGGUGGAGAGAGGGGAGUGUUGGAGGCGCAGAAGCCGAGCCGGGCCGGCCGGGCGGGCGGGGAGGAGGAGGAGCCGGGCGGGCUGGCGGGCGGCCGGGUGGCGGCGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[-48.03978729 295.82562256]
[-44.50032043 310.44708252]
[-43.70804214 325.46997070]
[-45.68994141 340.38259888]
[-50.37850571 354.67706299]
[-57.61405563 367.86651611]
[-67.15013885 379.50170898]
[-78.66197205 389.18634033]
[-91.75746155 396.59060669]
[-105.99057770 401.46224976]
[-120.87654877 403.63540649]
[-135.90835571 403.03601074]
[-150.57403564 399.68450928]
[-164.37406921 393.69506836]
[-176.83843994 385.27163696]
[-187.54261780 374.70114136]
[-196.12200928 362.34359741]
[-202.28440857 348.61990356]
[-205.81993103 333.99749756]
[-206.60815430 318.97442627]
[-204.62223816 304.06231689]
[-199.92982483 289.76910400]
[-192.69071960 276.58160400]
[-183.15148926 264.94897461]
[-171.63705444 255.26744080]
[-158.53956604 247.86672974]
[-144.30514526 242.99890137]
[-129.41859436 240.82977295]
[-114.38694000 241.43321228]
[-99.72216034 244.78866577]
[-85.92374420 250.78184509]
[-73.46164703 259.20864868]
[-62.92189789 248.53559875]
[-52.38214493 237.86256409]
[-41.84239578 227.18952942]
[-42.19250107 212.34321594]
[-31.65573692 201.36909485]
[-16.08118439 201.10253906]
[-12.64373207 186.61001587]
[2.55832410 182.22731018]
[13.09807396 171.55427551]
[23.63782310 160.88124084]
[22.66078758 150.57258606]
[27.67733002 141.26223755]
[37.21435928 136.20097351]
[48.17630768 137.30912781]
[52.33758545 123.00762939]
[67.74064636 119.39427948]
[78.80334473 109.26428986]
[89.86604309 99.13429260]
[93.26094055 91.71595001]
[101.33636475 88.89304352]
[112.65013123 79.04425812]
[123.96390533 69.19547272]
[135.27767944 59.34668350]
[140.83172607 40.04575729]
[159.84477234 36.90780640]
[170.64939880 26.50300598]
[181.45404053 16.09820557]
[192.25868225 5.69340611]
[203.06330872 -4.71139383]
[213.86795044 -15.11619282]
[224.67257690 -25.52099228]
[229.24597168 -40.66677475]
[243.78053284 -43.92184067]
[248.35392761 -59.06762314]
[262.88848877 -62.32269287]
[267.46188354 -77.46847534]
[281.99645996 -80.72354126]
[292.80108643 -91.12834167]
[303.60571289 -101.53314209]
[298.02175903 -115.67130280]
[298.27828979 -130.87007141]
[304.33618164 -144.81175232]
[315.27166748 -155.37033081]
[329.41717529 -160.93568420]
[344.61560059 -160.65917969]
[358.54928589 -154.58293152]
[369.09347534 -143.63356018]
[374.64022827 -129.48075867]
[374.34371948 -114.28271484]
[368.24914551 -100.35702515]
[357.28591919 -89.82726288]
[343.12582397 -84.29913330]
[327.92819214 -84.61563110]
[314.01052856 -90.72850800]
[303.20590210 -80.32370758]
[292.40124512 -69.91890717]
[288.60067749 -55.51734543]
[273.29330444 -51.51805496]
[269.49273682 -37.11649323]
[254.18533325 -33.11720657]
[250.38476562 -18.71564484]
[235.07737732 -14.71635723]
[224.27275085 -4.31155777]
[213.46810913 6.09324169]
[202.66346741 16.49804115]
[191.85884094 26.90284157]
[181.05419922 37.30764008]
[170.24957275 47.71244049]
[170.96723938 58.04239273]
[165.71830750 67.22373199]
[156.05709839 72.04373932]
[145.12646484 70.66045380]
[133.81269836 80.50923920]
[122.49892426 90.35802460]
[111.18515015 100.20681763]
[99.99603271 110.19699097]
[88.93333435 120.32698059]
[77.87063599 130.45697021]
[72.91808319 145.48304749]
[58.30630112 148.37182617]
[53.23903656 167.80622864]
[34.31085968 171.42098999]
[23.77110863 182.09402466]
[13.23135948 192.76705933]
[9.04003334 208.02299500]
[-5.40814877 211.64228821]
[-5.47897530 227.21896362]
[-16.31982231 237.89279175]
[-31.16936111 237.72927856]
[-41.70911026 248.40231323]
[-52.24885941 259.07534790]
[-62.78861237 269.74838257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[32 124]
[33 123]
[34 122]
[35 121]
[38 118]
[40 116]
[41 115]
[42 114]
[46 112]
[48 110]
[49 109]
[50 108]
[52 107]
[53 106]
[54 105]
[55 104]
[57 100]
[58 99]
[59 98]
[60 97]
[61 96]
[62 95]
[63 94]
[65 92]
[67 90]
[69 88]
[70 87]
[71 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
