%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGUGCUGGGCGGGACGGGCGGGCGCGGGGCGGCGGCUGGAGAGCUCCGCUGAGCACCGGGUCGCGCGCGGCCGAGUCGCGGAGGCGCCUCCGCUGCAGUCGCUGCGUCUCCAAGCAAC\
) } def
/len { sequence length } bind def

/coor [
[70.39768219 142.52673340]
[71.27698517 127.55253601]
[78.87944794 114.62184906]
[91.53578949 106.57266235]
[76.63475800 104.85240936]
[61.73372650 103.13215637]
[46.83269501 101.41190338]
[31.93166351 99.69165802]
[17.03063202 97.97140503]
[2.12960124 96.25115204]
[-12.46685886 102.35475159]
[-24.22281647 93.20889282]
[-39.12384796 91.48863983]
[-54.02487946 89.76839447]
[-68.92591095 88.04814148]
[-83.82694244 86.32788849]
[-98.72797394 84.60763550]
[-113.32443237 90.71123505]
[-125.08039093 81.56537628]
[-136.30076599 94.14778137]
[-152.63908386 97.57151031]
[-167.66612244 90.69007874]
[-175.58750916 76.37309265]
[-190.52760315 75.03395844]
[-205.46771240 73.69481659]
[-219.90353394 80.16919708]
[-231.88923645 71.32655334]
[-246.82933044 69.98741913]
[-261.76943970 68.64827728]
[-273.73559570 78.97235107]
[-289.49081421 77.72791290]
[-299.68780518 65.65326691]
[-298.27685547 49.91208649]
[-286.09509277 39.84333420]
[-270.36968994 41.42062378]
[-260.43029785 53.70817566]
[-245.49020386 55.04731369]
[-230.55009460 56.38645172]
[-217.18289185 49.81628418]
[-204.12857056 58.75471115]
[-189.18847656 60.09384918]
[-174.24836731 61.43299103]
[-166.39080811 50.56016159]
[-154.07589722 44.97187424]
[-140.50267029 46.23809814]
[-129.25607300 54.13261414]
[-123.36013794 66.66434479]
[-109.82950592 60.43770599]
[-97.00772095 69.70660400]
[-82.10668945 71.42685699]
[-67.20565796 73.14710999]
[-52.30463028 74.86736298]
[-37.40359879 76.58760834]
[-22.50256538 78.30786133]
[-8.97192764 72.08122253]
[3.84985256 81.35012054]
[18.75088310 83.07037354]
[33.65191650 84.79062653]
[48.55294800 86.51087189]
[63.45397949 88.23112488]
[78.35501099 89.95137787]
[93.25604248 91.67163086]
[108.25115204 91.28855133]
[123.04490662 88.80968475]
[132.22454834 76.22509766]
[147.26283264 73.92192078]
[159.20375061 82.75086212]
[173.99749756 80.27199554]
[188.79125977 77.79313660]
[203.58502197 75.31427002]
[218.34591675 72.64669037]
[233.07153320 69.79082489]
[247.79716492 66.93495941]
[262.52279663 64.07908630]
[277.24841309 61.22322464]
[282.88864136 51.75201035]
[292.63992310 47.10401154]
[303.11157227 48.62367249]
[310.81063843 55.55622482]
[325.66287231 53.45598221]
[338.24374390 43.86265182]
[351.92898560 49.74171066]
[366.78121948 47.64146805]
[381.63348389 45.54122543]
[396.48571777 43.44098282]
[411.33795166 41.34074402]
[426.19018555 39.24050140]
[438.76376343 28.71258545]
[454.07308960 34.59106827]
[456.36923218 50.82867050]
[443.29013062 60.72153854]
[428.29043579 54.09273911]
[413.43820190 56.19298172]
[398.58593750 58.29322433]
[383.73370361 60.39346313]
[368.88146973 62.49370575]
[354.02923584 64.59394836]
[342.51068115 74.03705597]
[327.76309204 68.30821991]
[312.91085815 70.40846252]
[298.73062134 83.45296478]
[280.10427856 75.94884491]
[265.37866211 78.80471802]
[250.65303040 81.66058350]
[235.92739868 84.51644897]
[221.20178223 87.37231445]
[215.16426086 91.78585815]
[206.06387329 90.10803223]
[191.27012634 92.58689117]
[176.47636414 95.06575775]
[161.68260193 97.54461670]
[153.27188110 109.78370667]
[138.30422974 112.50836945]
[125.52376556 103.60344696]
[110.73001099 106.08230591]
[123.78153229 113.47539520]
[132.03395081 126.00127411]
[133.67625427 140.91110229]
[128.34803772 154.93286133]
[117.21859741 164.98947144]
[102.73030090 168.87397766]
[88.06265259 165.73388672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 62]
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[10 56]
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[19 47]
[23 42]
[24 41]
[25 40]
[27 38]
[28 37]
[29 36]
[63 115]
[64 114]
[67 111]
[68 110]
[69 109]
[70 108]
[71 106]
[72 105]
[73 104]
[74 103]
[75 102]
[79 100]
[80 99]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
