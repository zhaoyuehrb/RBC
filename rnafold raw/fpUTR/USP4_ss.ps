%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGUGCGUGGGCGCGGUCUAUAGCACGCCGCGCGCGGGGCGGAUGUCCGGGCCGGCUGGGCCGGGGCCGCGGAGGAG\
) } def
/len { sequence length } bind def

/coor [
[84.65164185 289.36358643]
[73.98518372 277.70159912]
[74.77258301 261.91693115]
[86.54669952 251.37435913]
[79.31503296 238.35313416]
[87.58815765 224.86737061]
[80.35649872 211.84614563]
[88.62962341 198.36038208]
[89.21852112 183.37194824]
[89.80741882 168.38349915]
[90.39631653 153.39506531]
[90.98521423 138.40663147]
[83.75354767 125.38540649]
[92.02667236 111.89964294]
[85.68709564 99.43764496]
[92.98488617 87.51145935]
[93.57378387 72.52302551]
[94.16268158 57.53458786]
[94.75157928 42.54615402]
[95.34047699 27.55771828]
[95.92937469 12.56928253]
[96.51827240 -2.41915274]
[83.77976990 5.50110769]
[69.09420776 2.44591165]
[60.57138824 -9.89757061]
[62.91786575 -24.71290207]
[74.83785248 -33.81861496]
[89.74876404 -32.18626404]
[99.41639709 -20.71718788]
[103.48800659 -35.15401459]
[107.55960846 -49.59084320]
[111.63121796 -64.02767181]
[110.95686340 -73.41168213]
[116.15647125 -78.94542694]
[120.79172516 -93.21127319]
[117.69760132 -108.72697449]
[128.98915100 -118.44037628]
[133.62440491 -132.70622253]
[138.25965881 -146.97206116]
[142.89491272 -161.23791504]
[134.45538330 -174.40257263]
[136.50366211 -189.90542603]
[148.07261658 -200.42651367]
[163.69975281 -200.99809265]
[176.00640869 -191.35028076]
[179.18174744 -176.03848267]
[171.72648621 -162.29244995]
[157.16076660 -156.60266113]
[152.52551270 -142.33680725]
[147.89025879 -128.07096863]
[143.25500488 -113.80511475]
[146.68066406 -99.30980682]
[135.05757141 -88.57601929]
[130.42231750 -74.31017303]
[126.06804657 -59.95606613]
[121.99643707 -45.51923752]
[117.92483521 -31.08240891]
[113.85322571 -16.64558029]
[111.50670624 -1.83025551]
[110.91780853 13.15818024]
[110.32891083 28.14661598]
[109.74001312 43.13505173]
[109.15112305 58.12348557]
[108.56222534 73.11192322]
[107.97332764 88.10035706]
[114.31290436 100.56235504]
[107.01511383 112.48854065]
[114.20465088 126.58184052]
[105.97364807 138.99552917]
[105.38475037 153.98396301]
[104.79585266 168.97239685]
[104.20695496 183.96084595]
[103.61805725 198.94927979]
[110.80760193 213.04257202]
[102.57659912 225.45626831]
[109.76613617 239.54956055]
[101.53513336 251.96325684]
[112.44579315 263.39712524]
[111.99231720 279.19488525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 77]
[6 75]
[8 73]
[9 72]
[10 71]
[11 70]
[12 69]
[14 67]
[16 65]
[17 64]
[18 63]
[19 62]
[20 61]
[21 60]
[22 59]
[29 58]
[30 57]
[31 56]
[32 55]
[34 54]
[35 53]
[37 51]
[38 50]
[39 49]
[40 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
