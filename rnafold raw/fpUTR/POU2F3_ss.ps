%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGACAGUGGCGGCGACGGCUCCGGCAGCGGCUCCCGCGGCGGCGGCGGCCGGGAACUGGAGGAAGGAGACCCUGGCUUCGCAGGGGCCCCGGCUGGGGCAGAGGCGAGGGGCCUGGGGGGGCGCUGGCUUUGGCCCCGCCUGGGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[150.07360840 115.45475006]
[135.25585938 113.12364960]
[120.43810272 110.79254150]
[105.62033844 108.46144104]
[97.74516296 110.42755890]
[90.51987457 105.92461395]
[75.75382233 103.28575134]
[60.98776245 100.64688873]
[46.04164505 105.83573151]
[34.87405014 95.98006439]
[19.92792892 101.16890717]
[8.76033497 91.31324768]
[-6.00572109 88.67438507]
[-20.79842758 86.18926239]
[-33.48937988 95.22129059]
[-48.48348618 92.64613342]
[-57.01593399 80.49158478]
[-70.93113708 91.04167938]
[-87.84364319 88.34883881]
[-97.40998840 74.55235291]
[-112.27303314 72.53002167]
[-127.13607788 70.50768280]
[-141.99913025 68.48535156]
[-156.86216736 66.46301270]
[-171.72521973 64.44068146]
[-183.22332764 76.80376434]
[-199.65730286 79.87062836]
[-214.54232788 72.63169861]
[-222.12371826 58.10490417]
[-237.02561951 56.39221191]
[-251.92752075 54.67952347]
[-266.82943726 52.96683502]
[-281.73132324 51.25414276]
[-296.32470703 57.36515045]
[-308.08529663 48.22525787]
[-322.98718262 46.51256943]
[-337.88909912 44.79987717]
[-352.79098511 43.08718872]
[-367.61294556 50.10442352]
[-380.94531250 40.55556870]
[-379.07284546 24.26366806]
[-363.92184448 17.98843384]
[-351.07830811 28.18528748]
[-336.17639160 29.89797592]
[-321.27450562 31.61066628]
[-306.37258911 33.32335663]
[-292.84512329 27.08984756]
[-280.01864624 36.35224152]
[-265.11672974 38.06492996]
[-250.21484375 39.77762222]
[-235.31292725 41.49031067]
[-220.41102600 43.20299911]
[-212.30575562 32.54933929]
[-199.88871765 27.26458359]
[-186.37626648 28.83433151]
[-175.32661438 36.95333862]
[-169.70288086 49.57763290]
[-154.83984375 51.59996796]
[-139.97679138 53.62230301]
[-125.11374664 55.64463806]
[-110.25069427 57.66697311]
[-95.38764954 59.68930435]
[-86.29064178 50.51100540]
[-73.37207031 48.23395538]
[-61.33247375 53.91515350]
[-54.68482971 65.67382812]
[-42.83261871 56.72616196]
[-27.77209854 58.87915039]
[-18.46732521 71.37150574]
[-11.32479954 69.29064178]
[-3.36685681 73.90832520]
[11.39919853 76.54718781]
[25.28915215 71.16960144]
[37.51291275 81.21401215]
[51.40286636 75.83641815]
[63.62662888 85.88083649]
[78.39268494 88.51969910]
[93.15873718 91.15856171]
[107.95144653 93.64368439]
[122.76920319 95.97478485]
[137.58695984 98.30588531]
[152.40472412 100.63699341]
[162.09765625 88.80508423]
[176.31762695 83.44884491]
[191.21038818 85.91305542]
[202.79261780 95.43712616]
[208.01734924 109.38587189]
[222.83511353 111.71697998]
[237.65286255 114.04808044]
[252.47062683 116.37918854]
[267.28839111 118.71028900]
[282.12957764 120.88713074]
[296.99264526 122.90946198]
[311.85568237 124.93179321]
[320.84704590 122.98054504]
[327.00564575 127.15392303]
[341.82342529 129.48503113]
[356.64117432 131.81613159]
[371.45892334 134.14723206]
[386.27670288 136.47833252]
[401.11163330 130.97969055]
[412.48184204 140.60089111]
[427.29959106 142.93199158]
[442.11737061 145.26309204]
[456.93511963 147.59419250]
[471.75286865 149.92530823]
[486.58779907 144.42665100]
[497.95803833 154.04785156]
[512.77575684 156.37895203]
[527.61071777 150.88029480]
[538.98095703 160.50149536]
[553.81585693 155.00285339]
[565.18609619 164.62405396]
[580.00384521 166.95515442]
[594.82159424 169.28625488]
[611.40795898 165.77488708]
[619.37365723 180.74098206]
[607.19757080 192.53840637]
[592.49047852 184.10401917]
[577.67272949 181.77291870]
[562.85498047 179.44180298]
[549.07989502 185.10719299]
[536.64984131 175.31925964]
[522.87475586 180.98464966]
[510.44467163 171.19671631]
[495.62692261 168.86561584]
[481.85183716 174.53100586]
[469.42178345 164.74305725]
[454.60400391 162.41195679]
[439.78625488 160.08085632]
[424.96850586 157.74975586]
[410.15072632 155.41864014]
[396.37567139 161.08403015]
[383.94558716 151.29609680]
[369.12783813 148.96499634]
[354.31005859 146.63388062]
[339.49230957 144.30278015]
[324.67456055 141.97167969]
[309.83334351 139.79484558]
[294.97030640 137.77250671]
[280.10726929 135.75016785]
[273.00958252 137.97917175]
[264.95727539 133.52804565]
[250.13952637 131.19694519]
[235.32176208 128.86584473]
[220.50401306 126.53473663]
[205.68624878 124.20363617]
[196.43109131 135.87443542]
[182.48405457 141.38227844]
[167.55406189 139.15483093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[4 79]
[6 78]
[7 77]
[8 76]
[10 74]
[12 72]
[13 71]
[14 69]
[17 66]
[20 62]
[21 61]
[22 60]
[23 59]
[24 58]
[25 57]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[35 46]
[36 45]
[37 44]
[38 43]
[87 147]
[88 146]
[89 145]
[90 144]
[91 143]
[92 141]
[93 140]
[94 139]
[96 138]
[97 137]
[98 136]
[99 135]
[100 134]
[102 132]
[103 131]
[104 130]
[105 129]
[106 128]
[108 126]
[109 125]
[111 123]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
