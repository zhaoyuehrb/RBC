%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:13:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGCCCUGCGCGGGCAGACGGGGCGGGGCUGGAGGCUCAGGUGCCGCCUCCUCUGCAACGCCGGGGCCAGAGUCUUAAAACCGAGGGCCCGCAGGGGUCCCCGCGGCCGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[73.35063934 152.66497803]
[56.63096619 140.03642273]
[45.37666702 122.36247253]
[41.00601578 101.87039185]
[44.06980133 81.14260101]
[30.58012009 74.58299255]
[17.09043694 68.02338409]
[3.60075569 61.46377563]
[-9.88892651 54.90416336]
[-23.37860870 48.34455490]
[-36.86828995 41.78494644]
[-46.08374405 40.81937027]
[-50.62623596 34.86694717]
[-63.93651962 27.95056152]
[-77.24679565 21.03417397]
[-95.55569458 22.32824707]
[-104.50860596 7.29866982]
[-117.99829102 0.73906010]
[-131.48797607 -5.82054949]
[-144.97764587 -12.38015938]
[-158.46733093 -18.93976974]
[-174.26158142 -18.01643753]
[-182.32379150 -30.54041481]
[-195.81346130 -37.10002518]
[-209.30314636 -43.65963364]
[-222.79283142 -50.21924591]
[-236.28251648 -56.77885437]
[-249.77220154 -63.33846283]
[-263.26187134 -69.89807129]
[-279.05612183 -68.97473907]
[-287.11831665 -81.49871826]
[-300.60800171 -88.05832672]
[-314.09768677 -94.61793518]
[-329.89193726 -93.69461060]
[-337.95413208 -106.21858215]
[-351.44381714 -112.77819061]
[-368.33227539 -114.26721954]
[-371.57659912 -130.90785217]
[-356.48443604 -138.63198853]
[-344.88421631 -126.26787567]
[-331.39453125 -119.70826721]
[-316.56515503 -121.10078430]
[-307.53808594 -108.10762024]
[-294.04840088 -101.54801178]
[-280.55871582 -94.98840332]
[-265.72933960 -96.38092041]
[-256.70227051 -83.38775635]
[-243.21258545 -76.82814789]
[-229.72290039 -70.26853943]
[-216.23321533 -63.70892715]
[-202.74354553 -57.14931488]
[-189.25386047 -50.58970642]
[-175.76417542 -44.03009796]
[-160.93481445 -45.42261505]
[-151.90773010 -32.42945099]
[-138.41804504 -25.86984062]
[-124.92835999 -19.31023216]
[-111.43867493 -12.75062180]
[-97.94899750 -6.19101191]
[-86.33427429 -9.84771061]
[-75.00131989 -4.38853836]
[-70.33041382 7.72389221]
[-57.02013016 14.64027977]
[-43.70985031 21.55666733]
[-30.30867958 28.29526329]
[-16.81899834 34.85487366]
[-3.32931638 41.41448212]
[10.16036606 47.97409058]
[23.65004730 54.53370285]
[37.13972855 61.09331131]
[50.62940979 67.65292358]
[56.61749268 59.97817230]
[63.78557968 53.39201355]
[71.93869781 48.07359314]
[80.85507965 44.16756821]
[90.29220581 41.78018188]
[99.99337769 40.97637558]
[109.69473267 41.77800751]
[119.13239288 44.16327286]
[128.04965210 48.06729889]
[136.20396423 53.38389206]
[143.37351990 59.96844101]
[149.36332703 67.64184570]
[154.01045227 76.19539642]
[157.18849182 85.39642334]
[158.81101990 94.99467468]
[158.83387756 104.72906494]
[157.25645447 114.33482361]
[171.22650146 119.79723358]
[185.19653320 125.25964355]
[199.16658020 130.72204590]
[213.13662720 136.18446350]
[227.10665894 141.64686584]
[243.22938538 138.64854431]
[253.68026733 151.28622437]
[247.70834351 166.55935669]
[231.45701599 168.75622559]
[221.64425659 155.61691284]
[207.67420959 150.15451050]
[193.70417786 144.69209290]
[179.73413086 139.22969055]
[165.76408386 133.76727295]
[151.79403687 128.30487061]
[141.73600769 141.73600769]
[128.30487061 151.79403687]
[133.76727295 165.76408386]
[139.22969055 179.73413086]
[144.69209290 193.70417786]
[150.15451050 207.67420959]
[161.55366516 220.22393799]
[152.64999390 234.65171814]
[136.32127380 230.09001160]
[136.18446350 213.13662720]
[130.72204590 199.16658020]
[125.25964355 185.19653320]
[119.79723358 171.22650146]
[114.33482361 157.25645447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 71]
[6 70]
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[13 64]
[14 63]
[15 62]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[31 45]
[32 44]
[33 43]
[35 41]
[36 40]
[88 103]
[89 102]
[90 101]
[91 100]
[92 99]
[93 98]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
