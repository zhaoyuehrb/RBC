%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCCGGGCCCGGAGCCAGCGCAUGCGCCCGCCUGUGGGCGCUGUCCCGGCUGCGAGGGCCGUGAGCUCACGGACCGACGGACCGACGGGCGGCCGGCCGGACAGACGGGGCAGCGCAGGGAGCGGGGACGCGGCGGGACAGCGAC\
) } def
/len { sequence length } bind def

/coor [
[153.56031799 530.44213867]
[165.16687012 520.14318848]
[163.57783508 505.22763062]
[161.98880005 490.31201172]
[160.39976501 475.39642334]
[158.81071472 460.48083496]
[157.22167969 445.56524658]
[140.28350830 434.23083496]
[137.02525330 413.81863403]
[149.95062256 397.31777954]
[147.10238647 382.59066772]
[144.25415039 367.86358643]
[134.24092102 356.83703613]
[139.21704102 341.81875610]
[126.77133179 333.71688843]
[123.67301941 318.82208252]
[132.25537109 305.82281494]
[129.40713501 291.09573364]
[117.20603943 278.52337646]
[123.26944733 261.17010498]
[120.10925293 246.50675964]
[116.94906616 231.84344482]
[113.78887939 217.18011475]
[109.27378082 211.26306152]
[110.72071838 202.17211914]
[107.87247467 187.44502258]
[105.02423859 172.71791077]
[100.63574982 166.70635986]
[102.27532196 157.64817810]
[99.74030304 142.86395264]
[97.20529175 128.07971191]
[94.67028046 113.29547119]
[85.88209534 102.42076111]
[90.54547882 89.23954010]
[88.01046753 74.45530701]
[85.47545624 59.67106628]
[82.94044495 44.88682556]
[70.84399414 31.04569054]
[77.47756958 14.83068466]
[74.62932587 0.10358280]
[71.78108215 -14.62351894]
[68.62089539 -29.28684807]
[65.15018463 -43.87979507]
[61.67947388 -58.47274399]
[58.20875931 -73.06569672]
[54.73804855 -87.65864563]
[51.26733780 -102.25159454]
[47.79662323 -116.84454346]
[44.01695251 -131.36053467]
[39.93002701 -145.79302979]
[35.84310150 -160.22554016]
[30.45831490 -167.69165039]
[31.82608414 -175.00785828]
[20.86110306 -186.41310120]
[25.14175034 -200.67933655]
[21.36207962 -215.19532776]
[8.01375771 -223.22402954]
[4.38741970 -237.99916077]
[12.12382221 -250.67526245]
[8.34415150 -265.19125366]
[4.41063118 -279.66632080]
[0.32370427 -294.09881592]
[-3.76322269 -308.53131104]
[-7.85014963 -322.96380615]
[-11.93707657 -337.39630127]
[-24.06670570 -348.43280029]
[-20.30974579 -364.39581299]
[-4.53103399 -368.86395264]
[7.03764343 -357.24078369]
[2.49542236 -341.48324585]
[6.58234930 -327.05075073]
[10.66927624 -312.61825562]
[14.75620365 -298.18572998]
[18.84313011 -283.75323486]
[23.72562218 -278.13552856]
[22.86014557 -268.97091675]
[26.63981628 -254.45492554]
[39.57587814 -247.16151428]
[43.61578751 -232.49407959]
[35.87807465 -218.97499084]
[39.65774536 -204.45899963]
[50.35237885 -194.09202576]
[46.34207916 -178.78752136]
[50.27560043 -164.31245422]
[54.36252594 -149.87995911]
[58.44945145 -135.44746399]
[62.16766357 -132.35047913]
[63.93798065 -126.85824585]
[62.38957214 -120.31525421]
[65.86028290 -105.72230530]
[69.33099365 -91.12935638]
[72.80171204 -76.53640747]
[76.27242279 -61.94345856]
[79.74313354 -47.35050964]
[83.21384430 -32.75756073]
[86.79726410 -29.50556755]
[88.33288574 -23.94314194]
[86.50818634 -17.47176170]
[89.35643005 -2.74465942]
[92.20467377 11.98244190]
[102.07600403 19.04884720]
[104.53759003 31.34654617]
[97.72467804 42.35181427]
[100.25969696 57.13605499]
[102.79470825 71.92029572]
[105.32971954 86.70452881]
[114.11790466 97.57923889]
[109.45452118 110.76045990]
[111.98953247 125.54469299]
[114.52454376 140.32893372]
[117.05955505 155.11317444]
[119.75133514 169.86967468]
[122.59957886 184.59677124]
[125.44782257 199.32388306]
[128.45220947 214.01991272]
[131.61239624 228.68324280]
[134.77258301 243.34657288]
[137.93276978 258.00991821]
[148.35778809 265.68133545]
[150.65898132 278.01004028]
[144.13423157 288.24749756]
[146.98248291 302.97457886]
[159.79281616 311.83648682]
[162.47154236 326.81243896]
[153.94413757 338.97052002]
[164.16108704 351.05041504]
[158.98124695 365.01531982]
[161.82948303 379.74243164]
[164.67773438 394.46954346]
[174.09243774 397.39184570]
[181.72561646 403.53735352]
[186.53273010 412.01000977]
[187.87632751 421.59954834]
[185.61021423 430.95394897]
[180.09411621 438.77032471]
[172.13728333 443.97619629]
[173.72631836 458.89178467]
[175.31535339 473.80740356]
[176.90438843 488.72299194]
[178.49342346 503.63858032]
[180.08245850 518.55419922]
[193.59826660 526.17669678]
[200.02175903 540.30175781]
[196.88298035 555.49810791]
[185.38883972 565.92230225]
[169.95907593 567.56610107]
[156.52674866 559.79742432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 141]
[3 140]
[4 139]
[5 138]
[6 137]
[7 136]
[10 129]
[11 128]
[12 127]
[14 125]
[17 122]
[18 121]
[20 118]
[21 117]
[22 116]
[23 115]
[25 114]
[26 113]
[27 112]
[29 111]
[30 110]
[31 109]
[32 108]
[34 106]
[35 105]
[36 104]
[37 103]
[39 100]
[40 99]
[41 98]
[42 95]
[43 94]
[44 93]
[45 92]
[46 91]
[47 90]
[48 89]
[49 86]
[50 85]
[51 84]
[53 83]
[55 81]
[56 80]
[59 77]
[60 76]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
