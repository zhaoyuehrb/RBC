%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUGACGCAGUGGGCGUCUUGCACGUGCAGCCGUUUAAGUCGCGUGGGCGCCUGCGAGGGCUUGGGAGAGCAAGCCGCGGAGAGAACUUGAAGCCACC\
) } def
/len { sequence length } bind def

/coor [
[126.88752747 226.65158081]
[134.58996582 213.61505127]
[146.10963440 203.78775024]
[140.58775330 189.84109497]
[124.93936157 183.90689087]
[118.21211243 168.21714783]
[124.96161652 152.17253113]
[119.00439453 138.40620422]
[113.04718018 124.63988495]
[85.57822418 119.85665894]
[79.11313629 96.36095428]
[66.20200348 88.72533417]
[53.29087067 81.08971405]
[40.37974167 73.45408630]
[27.46861076 65.81846619]
[14.55748081 58.18284607]
[1.64635015 50.54722595]
[-11.26478004 42.91160583]
[-24.17591095 35.27598190]
[-29.76386070 35.23995972]
[-34.25067139 33.16360855]
[-37.02027130 29.85861206]
[-37.89418030 26.26476479]
[-50.02943420 17.44798660]
[-62.16468811 8.63120747]
[-74.29994202 -0.18557087]
[-86.43519592 -9.00234985]
[-98.57044983 -17.81912804]
[-110.84269714 -26.44420815]
[-124.63549042 -19.68739128]
[-139.95770264 -20.74822235]
[-152.68774414 -29.34133911]
[-159.40129089 -43.15523911]
[-158.29243469 -58.47405243]
[-149.65945435 -71.17709351]
[-135.82458496 -77.84731293]
[-120.50932312 -76.69044495]
[-107.83340454 -68.01769257]
[-101.20658112 -54.16197586]
[-102.41144562 -38.85041428]
[-94.97648621 -37.67319870]
[-89.75367737 -29.95438385]
[-77.61841583 -21.13760376]
[-65.48316193 -12.32082558]
[-53.34790802 -3.50404692]
[-41.21265411 5.31273174]
[-29.07740021 14.12951088]
[-16.54028893 22.36485291]
[-3.62915897 30.00047493]
[9.28197098 37.63609695]
[22.19310188 45.27171707]
[35.10423279 52.90733719]
[48.01536179 60.54295731]
[60.92649460 68.17858124]
[73.83762360 75.81420135]
[86.74875641 83.44982147]
[95.54311371 77.56706238]
[106.85063171 76.43428040]
[118.09413910 81.03616333]
[126.37815094 90.96970367]
[140.14447021 85.01248169]
[153.91078186 79.05526733]
[167.67710876 73.09804535]
[181.44342041 67.14083099]
[195.20974731 61.18360901]
[200.79393005 46.39873886]
[215.23121643 39.96910095]
[229.95622253 45.70928574]
[236.23286438 60.21374512]
[230.33731079 74.87723541]
[215.76730347 81.00017548]
[201.16696167 74.94992828]
[187.40065002 80.90715027]
[173.63432312 86.86436462]
[159.86801147 92.82158661]
[146.10168457 98.77880096]
[132.33537292 104.73602295]
[126.81349945 118.68267059]
[132.77072144 132.44898987]
[138.72793579 146.21530151]
[151.83728027 149.74731445]
[160.34942627 160.07191467]
[161.28900146 173.22381592]
[154.53440857 184.31922913]
[160.05627441 198.26588440]
[175.18101501 197.54391479]
[189.71995544 201.77445984]
[202.09606934 210.49862671]
[210.96684265 222.77005005]
[215.37007141 237.25764465]
[214.82809448 252.38989258]
[209.39973450 266.52536011]
[199.67381287 278.13076782]
[186.70530701 285.94720459]
[171.90095520 289.12680054]
[156.86662292 287.32470703]
[143.23312378 280.73635864]
[132.47930908 270.07641602]
[125.77168274 256.50119019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 85]
[4 84]
[7 80]
[8 79]
[9 78]
[11 56]
[12 55]
[13 54]
[14 53]
[15 52]
[16 51]
[17 50]
[18 49]
[19 48]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[29 40]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
