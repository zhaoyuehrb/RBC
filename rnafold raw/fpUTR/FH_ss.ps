%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAACCGGCGUGGAGGCGUGGCCACAGCCGCCCAGAAAUUCUACCCAAGCUCCCUCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[103.48986816 174.66188049]
[97.46865082 168.78961182]
[93.14853668 161.55154419]
[90.82775879 153.42857361]
[90.67133331 144.96336365]
[92.69935608 136.72392273]
[96.78501129 129.26564026]
[102.66246796 123.09375763]
[96.24914551 109.53392029]
[90.00685883 103.92883301]
[89.87216949 95.14769745]
[84.13191986 81.28950500]
[78.39166260 67.43131256]
[72.65141296 53.57312012]
[66.91116333 39.71492767]
[59.19962311 26.84899712]
[49.68372345 15.25384045]
[41.51013184 10.37473583]
[40.00229263 2.84823394]
[31.06680298 -9.19987869]
[22.13131332 -21.24799156]
[13.19582367 -33.29610443]
[4.26033449 -45.34421921]
[-10.99281693 -51.36695862]
[-13.13557625 -67.62551117]
[0.03634213 -77.39447784]
[14.97279930 -70.62437439]
[16.30844688 -54.27970886]
[25.24393654 -42.23159409]
[34.17942810 -30.18348122]
[43.11491776 -18.13536835]
[52.05040741 -6.08725548]
[61.27888107 5.73794079]
[70.79477692 17.33309746]
[75.72799683 3.16752720]
[89.03177643 -3.76135874]
[103.46673584 0.31686014]
[111.17795563 13.18298149]
[107.96929932 27.83578110]
[95.58678436 36.30179596]
[80.76935577 33.97467422]
[86.50960541 47.83286667]
[92.24986267 61.69105911]
[97.99011230 75.54925537]
[103.73036194 89.40744781]
[109.80898285 103.12059021]
[116.22230530 116.68043518]
[139.72964478 120.75338745]
[154.12501526 139.51470947]
[152.01173401 162.85708618]
[163.60690308 172.37298584]
[175.20205688 181.88888550]
[191.24453735 181.75366211]
[201.24028015 194.30215454]
[197.52140808 209.90823364]
[182.94071960 216.60025024]
[168.68327332 209.24465942]
[165.68615723 193.48403931]
[154.09100342 183.96813965]
[142.49583435 174.45223999]
[135.30377197 178.62959290]
[127.26190948 180.82400513]
[118.90750885 180.87890625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 47]
[9 46]
[11 45]
[12 44]
[13 43]
[14 42]
[15 41]
[16 34]
[17 33]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[50 60]
[51 59]
[52 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
