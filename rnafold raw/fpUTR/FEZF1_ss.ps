%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:21:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUGUGACAAGCAGGGAACAAGGCAACGGACGGCGCAACCCAGCCCCGGCUGACGGACGCUGGCGACUCAGAC\
) } def
/len { sequence length } bind def

/coor [
[87.70198822 314.26229858]
[87.70198822 299.26229858]
[87.70198822 284.26229858]
[87.70198822 269.26229858]
[87.70198822 254.26231384]
[74.40953827 249.31623840]
[63.61230087 240.07351685]
[56.64605713 227.65026855]
[54.38203430 213.55773926]
[57.11799622 199.51849365]
[64.53926086 187.25579834]
[75.75475311 178.28216553]
[89.40393829 173.71273804]
[90.03207397 158.72589111]
[90.66020966 143.73904419]
[83.46265411 130.69892883]
[91.77105713 117.23487091]
[82.04096985 106.49841309]
[82.64772797 92.02160645]
[93.24209595 82.13699341]
[81.20682526 69.63909149]
[81.77507782 52.63171005]
[94.12381744 41.41413116]
[94.12381744 26.41413116]
[94.12381744 11.41413116]
[90.93435669 5.07465792]
[91.56636047 -0.95365882]
[94.80455780 -4.82787895]
[96.05973053 -19.77527237]
[97.31489563 -34.72266388]
[94.66709900 -41.30679321]
[95.80132294 -47.26108170]
[99.35234833 -50.85074997]
[101.85388184 -65.64068604]
[104.35540771 -80.43063354]
[93.40287781 -91.42251587]
[91.03622437 -106.75804901]
[98.16548920 -120.54040527]
[112.04930878 -127.46998596]
[127.34908295 -124.88221741]
[138.18173218 -113.77216339]
[140.38188171 -98.41185760]
[133.10353088 -84.70765686]
[119.14534760 -77.92910004]
[116.64382172 -63.13915634]
[114.14228821 -48.34921646]
[112.26229095 -33.46749878]
[111.00711823 -18.52010345]
[109.75195312 -3.57271123]
[109.12381744 11.41413116]
[109.12381744 26.41413116]
[109.12381744 41.41413116]
[119.53141785 49.29635620]
[123.46905518 61.94978714]
[119.24871826 74.71877289]
[108.22894287 82.76512909]
[117.95903015 93.50158691]
[117.35227203 107.97839355]
[106.75790405 117.86300659]
[113.91052246 131.97508240]
[105.64704895 144.36718750]
[105.01891327 159.35401917]
[104.39077759 174.34086609]
[118.90435028 180.92927551]
[129.79661560 192.51354980]
[135.45249939 207.33367920]
[135.04953003 223.15310669]
[128.67720032 237.59625244]
[117.31927490 248.50524902]
[102.70198822 254.26231384]
[102.70198822 269.26229858]
[102.70198822 284.26229858]
[102.70198822 299.26229858]
[102.70198822 314.26229858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[3 72]
[4 71]
[5 70]
[13 63]
[14 62]
[15 61]
[17 59]
[20 56]
[23 52]
[24 51]
[25 50]
[28 49]
[29 48]
[30 47]
[33 46]
[34 45]
[35 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
