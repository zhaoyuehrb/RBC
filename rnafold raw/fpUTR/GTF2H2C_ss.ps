%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:12:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUCCGCGUGUGGAAGUCUGUGAGGCGCAGAGGUGGGGCAGGCCGUCUGACUAGCUAGGCGGCUGGGAGCGUUUUCGUGGCGGGGAACGGAGGUUGAAUUGCCCUGCCUGGGCUCAUAGGGAAGGAGGAUGUGAAGGAGCUUGUGAAGGCAGAGGAAGAUUAUUGAAUAAUAAAAUACAGUUUUGAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[371.25256348 414.84304810]
[385.42617798 409.93301392]
[400.10205078 406.83163452]
[415.05038452 405.58752441]
[430.03701782 406.22015381]
[444.82717896 408.71957397]
[433.43298340 398.96392822]
[422.03878784 389.20828247]
[410.64462280 379.45263672]
[399.25042725 369.69702148]
[384.55047607 367.29684448]
[379.09985352 352.44421387]
[364.60256958 359.14920044]
[348.57424927 358.86334229]
[334.22149658 351.59317017]
[324.43783569 338.74746704]
[321.22039795 322.86471558]
[325.26232910 307.11148071]
[313.71087646 297.54260254]
[302.15939331 287.97372437]
[290.60794067 278.40481567]
[279.05645752 268.83593750]
[267.50497437 259.26705933]
[255.95352173 249.69818115]
[244.40203857 240.12928772]
[237.23452759 238.28060913]
[232.74208069 230.30943298]
[218.04212952 227.90927124]
[212.59150696 213.05662537]
[201.19731140 203.30097961]
[196.43688965 202.77244568]
[191.96229553 199.23799133]
[189.59771729 193.03759766]
[178.52711487 182.91624451]
[167.45649719 172.79490662]
[156.38589478 162.67355347]
[145.31529236 152.55221558]
[134.24467468 142.43086243]
[123.17407227 132.30952454]
[112.10346222 122.18817902]
[101.03285217 112.06683350]
[87.56404877 105.46445465]
[72.78260803 102.91318512]
[58.00116730 100.36191559]
[43.21972656 97.81063843]
[28.43828392 95.25936890]
[13.65684319 92.70809937]
[-1.12459874 90.15682983]
[-15.90604019 87.60556030]
[-30.68748283 85.05428314]
[-43.45460129 94.36965942]
[-59.05615997 91.84640503]
[-68.23603821 78.98151398]
[-65.54796600 63.40749741]
[-52.58673859 54.36415482]
[-37.04201889 57.21672821]
[-28.13621140 70.27284241]
[-13.35476875 72.82411194]
[1.42667246 75.37538910]
[16.20811462 77.92665863]
[30.98955536 80.47792816]
[45.77099609 83.02919769]
[60.55244064 85.58047485]
[75.33387756 88.13174438]
[90.11531830 90.68301392]
[94.41436768 84.53742981]
[80.06787109 80.15815735]
[79.79967499 65.16056061]
[93.98043060 60.27115250]
[103.01245880 72.24626160]
[107.31150055 66.10067749]
[99.84677124 53.08999252]
[92.38204193 40.07931519]
[84.91731262 27.06863403]
[77.45258331 14.05795288]
[69.98785400 1.04727256]
[62.52312088 -11.96340752]
[47.20489502 -15.85282326]
[39.19541931 -29.47720718]
[43.24657059 -44.75345230]
[56.95487595 -52.61843872]
[72.18743896 -48.40600204]
[79.90705109 -34.61531067]
[75.53379822 -19.42813873]
[82.99852753 -6.41745758]
[90.46326447 6.59322262]
[97.92799377 19.60390282]
[105.39272308 32.61458206]
[112.85745239 45.62526321]
[120.32218170 58.63594437]
[120.00891876 43.63921356]
[134.29002380 39.05120850]
[149.15113831 41.08778763]
[161.67141724 49.34868240]
[169.39015198 62.21030045]
[170.79029846 77.14480591]
[165.59664917 91.21698761]
[154.83000183 101.66107941]
[140.60639954 106.42440033]
[125.72200012 104.57100677]
[111.15419769 100.99622345]
[122.22480774 111.11756897]
[133.29541016 121.23891449]
[144.36602783 131.36026001]
[155.43663025 141.48159790]
[166.50723267 151.60295105]
[177.57785034 161.72428894]
[188.64845276 171.84564209]
[199.71907043 181.96697998]
[210.95295715 191.90679932]
[222.34713745 201.66242981]
[237.86207581 204.76037598]
[242.49771118 218.91523743]
[253.97093201 228.57781982]
[265.52239990 238.14671326]
[277.07388306 247.71559143]
[288.62533569 257.28448486]
[300.17681885 266.85336304]
[311.72827148 276.42224121]
[323.27975464 285.99111938]
[334.83120728 295.55999756]
[347.44989014 289.17703247]
[361.50592041 288.09179688]
[374.87240601 292.43533325]
[385.53945923 301.51974487]
[391.91638184 313.94696045]
[393.06881714 327.82369995]
[388.85546875 341.05001831]
[404.37042236 344.14794922]
[409.00607300 358.30282593]
[420.40023804 368.05847168]
[431.79443359 377.81408691]
[443.18862915 387.56973267]
[454.58282471 397.32537842]
[452.49993896 382.47070312]
[462.06228638 370.91381836]
[477.04428101 370.17892456]
[487.69180298 380.74444580]
[487.07272339 395.73165894]
[475.59054565 405.38296509]
[490.58609009 405.74917603]
[505.58160400 406.11538696]
[520.57714844 406.48159790]
[534.70831299 398.16040039]
[548.84503174 406.47213745]
[548.44464111 422.86639404]
[533.91906738 430.47817993]
[520.21093750 421.47711182]
[505.21539307 421.11090088]
[490.21987915 420.74468994]
[475.22433472 420.37847900]
[487.89248657 428.41082764]
[499.45822144 437.96246338]
[509.74041748 448.88381958]
[518.57806396 461.00387573]
[525.83276367 474.13284302]
[531.39086914 488.06509399]
[535.16540527 502.58242798]
[537.09716797 517.45751953]
[537.15600586 532.45739746]
[535.34094238 547.34716797]
[531.68035889 561.89367676]
[526.23168945 575.86907959]
[519.08020020 589.05450439]
[510.33786011 601.24353027]
[500.14163208 612.24517822]
[488.65115356 621.88720703]
[476.04641724 630.01867676]
[462.52474976 636.51214600]
[448.29797363 641.26593018]
[433.58886719 644.20562744]
[418.62777710 645.28521729]
[403.64898682 644.48779297]
[388.88708496 641.82574463]
[374.57324219 637.34088135]
[360.93164062 631.10333252]
[348.17590332 623.21087646]
[336.50579834 613.78704834]
[326.10403442 602.97949219]
[317.13357544 590.95739746]
[309.73489380 577.90899658]
[304.02383423 564.03875732]
[300.08981323 549.56384277]
[297.99447632 534.71093750]
[297.77062988 519.71258545]
[299.42178345 504.80374146]
[302.92208862 490.21786499]
[308.21667480 476.18334961]
[315.22268677 462.92004395]
[323.83038330 450.63558960]
[333.90496826 439.52239990]
[345.28863525 429.75451660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 134]
[7 133]
[8 132]
[9 131]
[10 130]
[12 128]
[18 121]
[19 120]
[20 119]
[21 118]
[22 117]
[23 116]
[24 115]
[25 114]
[27 113]
[29 111]
[30 110]
[33 109]
[34 108]
[35 107]
[36 106]
[37 105]
[38 104]
[39 103]
[40 102]
[41 101]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[71 90]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
[140 151]
[141 150]
[142 149]
[143 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
