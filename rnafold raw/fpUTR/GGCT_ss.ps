%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCGCCAGUCCCCUAACCCUGAGGCUGCCGCGCGGCGGUCACUGCGCCGGGGUAGUGGGCCCCAGUGUUGCGCUCUCUGGCCGUUCCUUACACUCUGCUUCAGGCUCCAGUGCAGGGGCGUAGUGGGAU\
) } def
/len { sequence length } bind def

/coor [
[112.61157227 498.05718994]
[104.98825073 483.53765869]
[113.97840118 469.82235718]
[114.33267975 454.82653809]
[114.68696594 439.83071899]
[115.04124451 424.83493042]
[115.39553070 409.83911133]
[115.74980927 394.84329224]
[108.31526947 381.93682861]
[116.37635803 368.32324219]
[105.94215393 357.75616455]
[106.08782959 342.54324341]
[117.24229431 331.67053223]
[117.59657288 316.67471313]
[117.95085907 301.67889404]
[118.30513763 286.68307495]
[118.65942383 271.68725586]
[109.41200256 256.82043457]
[118.99846649 241.15029907]
[118.99846649 226.15029907]
[118.11319733 211.17645264]
[116.34573364 196.28094482]
[114.57827759 181.38543701]
[112.81081390 166.48992920]
[111.04335785 151.59442139]
[109.27590179 136.69891357]
[107.50843811 121.80341339]
[105.74098206 106.90790558]
[97.30848694 120.71323395]
[73.29092407 119.02585602]
[58.41733170 117.08259583]
[43.54373932 115.13934326]
[28.67014503 113.19609070]
[13.79655266 111.25283051]
[-2.69240594 115.19625092]
[-11.04631519 100.44333649]
[0.81745988 88.33188629]
[15.73980808 96.37924194]
[30.61340141 98.32249451]
[45.48699188 100.26574707]
[60.36058426 102.20900726]
[75.23417664 104.15225983]
[82.37339020 90.96015167]
[72.61148071 79.57134247]
[62.84956360 68.18252563]
[53.08765411 56.79371643]
[43.32574081 45.40489960]
[33.56382751 34.01608658]
[17.78884697 33.05405807]
[7.37721777 21.16399956]
[8.50597572 5.40007019]
[20.50544930 -4.88526821]
[36.25656128 -3.58990788]
[46.41445923 8.51763725]
[44.95264053 24.25417519]
[54.71455383 35.64299011]
[64.47646332 47.03180313]
[74.23838043 58.42061615]
[84.00028992 69.80943298]
[93.76219940 81.19824219]
[108.46087646 78.20675659]
[112.99492645 63.90842438]
[117.52896881 49.61008835]
[122.06301880 35.31175232]
[115.04329681 21.40631294]
[119.84514618 6.97035551]
[133.14512634 0.36381549]
[137.67916870 -13.93452072]
[134.47517395 -29.42790604]
[145.69761658 -39.22107315]
[150.23165894 -53.51940918]
[149.25584412 -70.44525146]
[165.25009155 -76.06847382]
[175.08119202 -62.25595474]
[164.52999878 -48.98536301]
[159.99595642 -34.68702698]
[163.52424622 -20.21635437]
[151.97750854 -9.40047359]
[147.44345093 4.89786291]
[154.50598145 17.96141434]
[150.11149597 32.52655029]
[136.36135864 39.84579849]
[131.82730103 54.14413452]
[127.29325867 68.44246674]
[122.75921631 82.74080658]
[130.88362122 70.13153076]
[143.11009216 61.44168091]
[157.68948364 57.91444016]
[172.53605652 60.05442429]
[185.52581787 67.55547333]
[194.80047607 79.34449005]
[199.03315735 93.73491669]
[197.61833191 108.66804504]
[190.75842285 122.00752258]
[179.43479919 131.84498596]
[165.26745605 136.77307129]
[150.28315735 136.08677673]
[136.62559509 129.88426208]
[126.24864197 119.05288696]
[120.63648224 105.14044952]
[122.40394592 120.03595734]
[124.17140198 134.93145752]
[125.93886566 149.82696533]
[127.70632172 164.72247314]
[129.47378540 179.61798096]
[131.24124146 194.51348877]
[133.00869751 209.40899658]
[144.55909729 199.83880615]
[159.29039001 202.66528320]
[166.47853088 215.83079529]
[160.89071655 229.75114441]
[146.59474182 234.29264832]
[133.99845886 226.15029907]
[133.99845886 241.15029907]
[142.58192444 250.86100769]
[142.21923828 263.41412354]
[133.65524292 272.04153442]
[133.30094910 287.03735352]
[132.94667053 302.03317261]
[132.59239197 317.02899170]
[132.23811340 332.02481079]
[142.86666870 343.41213989]
[142.29376221 358.61499023]
[131.37217712 368.67752075]
[138.78137207 382.65658569]
[130.74562073 395.19757080]
[130.39134216 410.19338989]
[130.03706360 425.18920898]
[129.68278503 440.18502808]
[129.32850647 455.18081665]
[128.97421265 470.17663574]
[137.30664062 484.30117798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 131]
[4 130]
[5 129]
[6 128]
[7 127]
[8 126]
[10 124]
[13 121]
[14 120]
[15 119]
[16 118]
[17 117]
[19 114]
[20 113]
[21 107]
[22 106]
[23 105]
[24 104]
[25 103]
[26 102]
[27 101]
[28 100]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[61 85]
[62 84]
[63 83]
[64 82]
[67 79]
[68 78]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
