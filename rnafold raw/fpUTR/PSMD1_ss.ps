%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:03:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUCCUGGCGAGAAGCGAGCCGGCGGCCUGAGGAGGCGACUGACUGAGCAGCGCACCCGGGGAGCAAGGAGGCGCGGUGAACUGAGCGGCCCCUGAGCUGACAGAUACACUGCGCAGCUGGAACGGCGAGCGAGCCGACGGGCGAGUGAGGGGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[126.01416779 422.07760620]
[117.31961823 409.98403931]
[123.97107697 395.62896729]
[115.27653503 383.53540039]
[121.92798615 369.18029785]
[120.77272034 354.22485352]
[119.61745453 339.26940918]
[118.46218109 324.31396484]
[109.76763153 312.22042847]
[116.41909027 297.86532593]
[115.26382446 282.90988159]
[103.26016235 278.35830688]
[94.06445312 269.31301880]
[89.27033997 257.27236938]
[89.73641205 244.25961304]
[95.43290710 232.48269653]
[105.43838501 223.95976257]
[101.71924591 209.42814636]
[88.81369019 202.08088684]
[84.83493805 187.39674377]
[92.62892151 173.91001892]
[88.90977478 159.37840271]
[85.19062805 144.84678650]
[81.47148132 130.31517029]
[70.61244965 119.96715546]
[55.91856003 116.95223999]
[42.82289505 125.38677216]
[27.96415329 122.11990356]
[20.00382042 109.58321381]
[5.30993414 106.56830597]
[-9.38395309 103.55339050]
[-24.07784081 100.53848267]
[-33.16261292 101.88136292]
[-39.02461624 97.32128143]
[-53.65766907 94.02374268]
[-64.98751831 100.25317383]
[-77.13083649 97.17247772]
[-83.68592072 86.97031403]
[-98.25270844 83.39138031]
[-112.81949615 79.81243896]
[-121.94927216 80.80422211]
[-127.63117981 76.02161407]
[-142.12628174 72.16260529]
[-156.62139893 68.30359650]
[-170.16821289 76.44357300]
[-185.48266602 72.53933716]
[-193.47895813 58.90721130]
[-189.41304016 43.63489151]
[-175.69712830 35.78317261]
[-160.46864319 40.01034164]
[-152.76237488 53.80849075]
[-138.26727295 57.66749954]
[-123.77217102 61.52651215]
[-109.24055481 65.24565887]
[-94.67376709 68.82459259]
[-80.10698700 72.40353394]
[-63.56947327 66.59307098]
[-50.36013412 79.39068604]
[-35.72708130 82.68822479]
[-21.06292915 85.84459686]
[-6.36904287 88.85950470]
[8.32484436 91.87441254]
[23.01873207 94.88932800]
[35.27264404 86.50021362]
[50.21728516 89.34844208]
[58.93347168 102.25835419]
[73.62735748 105.27326965]
[77.31511688 88.87306213]
[89.47568512 78.83303833]
[104.19935608 78.39315796]
[111.90702057 65.52490997]
[108.28145599 50.37587738]
[116.28144073 37.43544006]
[130.74606323 34.07238007]
[138.45373535 21.20413017]
[146.16139221 8.33587837]
[153.86906433 -4.53237200]
[161.57673645 -17.40062332]
[169.28439331 -30.26887321]
[176.99206543 -43.13712311]
[184.69972229 -56.00537491]
[192.28303528 -68.94730377]
[192.43159485 -84.76781464]
[205.47288513 -91.96323395]
[212.93112183 -104.97763824]
[220.38935852 -117.99204254]
[217.77040100 -130.65350342]
[224.28862000 -141.35226440]
[235.96818542 -144.61434937]
[243.67584229 -157.48258972]
[251.38351440 -170.35084534]
[259.09118652 -183.21910095]
[255.00381470 -198.48570251]
[262.98095703 -212.12902832]
[278.28991699 -216.05476379]
[291.84814453 -207.93382263]
[295.61181641 -192.58421326]
[287.34796143 -179.11259460]
[271.95944214 -175.51142883]
[264.25177002 -162.64318848]
[256.54409790 -149.77493286]
[248.83644104 -136.90667725]
[249.52227783 -119.39152527]
[233.40376282 -110.53381348]
[225.94552612 -97.51940918]
[218.48728943 -84.50499725]
[218.87219238 -69.61537170]
[205.29743958 -61.48907089]
[204.69718933 -54.08656311]
[197.56797791 -48.29771042]
[189.86032104 -35.42945862]
[182.15264893 -22.56120682]
[174.44497681 -9.69295692]
[166.73731995 3.17529392]
[159.02964783 16.04354477]
[151.32197571 28.91179657]
[143.61431885 41.78004837]
[147.47557068 56.11972046]
[139.84222412 69.27975464]
[124.77526855 73.23257446]
[117.06760406 86.10082245]
[122.51694489 95.37093353]
[123.04496765 106.57489014]
[118.10231781 117.15729523]
[108.43564606 124.50675201]
[96.00309753 126.59602356]
[99.72224426 141.12763977]
[103.44139099 155.65925598]
[107.16053772 170.19087219]
[120.47528839 178.27513123]
[124.04002380 193.06524658]
[116.25086212 205.70899963]
[119.97000885 220.24061584]
[140.04232788 227.34059143]
[151.05113220 245.33216858]
[148.28900146 266.04260254]
[159.72789001 275.74578857]
[171.16676331 285.44897461]
[187.38932800 287.84915161]
[193.16958618 303.19583130]
[182.56130981 315.70169067]
[166.47738647 312.50177002]
[161.46357727 296.88787842]
[150.02468872 287.18466187]
[138.58581543 277.48147583]
[135.94592285 279.18576050]
[133.14755249 280.61499023]
[130.21926880 281.75460815]
[131.37454224 296.71005249]
[140.15171814 309.87332153]
[133.41763306 323.15869141]
[134.57289124 338.11413574]
[135.72816467 353.06958008]
[136.88343811 368.02502441]
[145.66061401 381.18832397]
[138.92652893 394.47369385]
[147.70370483 407.63696289]
[140.96961975 420.92233276]
[152.16934204 432.40911865]
[150.02865601 448.30868530]
[136.18971252 456.42431641]
[121.26855469 450.53033447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[3 156]
[5 154]
[6 153]
[7 152]
[8 151]
[10 149]
[11 148]
[17 133]
[18 132]
[21 129]
[22 128]
[23 127]
[24 126]
[25 67]
[26 66]
[29 63]
[30 62]
[31 61]
[32 60]
[34 59]
[35 58]
[38 56]
[39 55]
[40 54]
[42 53]
[43 52]
[44 51]
[70 121]
[71 120]
[74 117]
[75 116]
[76 115]
[77 114]
[78 113]
[79 112]
[80 111]
[81 110]
[82 108]
[84 106]
[85 105]
[86 104]
[89 102]
[90 101]
[91 100]
[92 99]
[136 145]
[137 144]
[138 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
