%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGACACCCGCGCCACCCGCCGGCUCCCGGCGCCGCCGCUUCCUCAGGGCCGGUUCCGGGUCCGAGCGCGCCCCCGGGCUCGGGUCGUC\
) } def
/len { sequence length } bind def

/coor [
[100.24137878 390.62203979]
[87.43918610 379.50717163]
[94.57567596 364.12838745]
[95.62202454 349.16494751]
[96.66837311 334.20147705]
[97.45341492 319.22204590]
[97.97690582 304.23117065]
[98.50039673 289.24032593]
[99.02388763 274.24945068]
[99.54737854 259.25857544]
[92.25897217 246.26904297]
[100.47317505 232.74729919]
[100.99666595 217.75643921]
[101.52015686 202.76557922]
[86.29362488 189.43276978]
[85.37429047 168.93307495]
[99.73476410 153.88349915]
[97.90672302 138.99531555]
[95.81912994 124.14128876]
[93.73153687 109.28726959]
[91.38501740 94.47194672]
[88.78029633 79.69982910]
[86.17556763 64.92771149]
[75.98403168 56.79180908]
[74.21746063 44.27896118]
[81.29215240 34.29902649]
[79.20455170 19.44500542]
[77.11695862 4.59098339]
[75.02935791 -10.26303768]
[72.94176483 -25.11705780]
[63.35914993 -37.70610428]
[69.24985504 -51.38634109]
[67.16226196 -66.24036407]
[65.07466125 -81.09438324]
[62.98706818 -95.94840240]
[60.64055252 -110.76372528]
[58.03582764 -125.53584290]
[53.37167358 -133.64985657]
[55.60740662 -140.86830139]
[53.51980972 -155.72232056]
[41.62415314 -166.48674011]
[42.76707077 -182.48902893]
[56.07181168 -191.45359802]
[71.33212280 -186.50358582]
[76.84159088 -171.43623352]
[68.37383270 -157.80990601]
[70.46142578 -142.95588684]
[72.80794525 -128.14056396]
[75.41266632 -113.36845398]
[79.76959229 -107.19419098]
[77.84108734 -98.03599548]
[79.92868805 -83.18197632]
[82.01628113 -68.32795715]
[84.10388184 -53.47393799]
[93.53717041 -41.94734955]
[87.79578400 -27.20465469]
[89.88338470 -12.35063362]
[91.97097778 2.50338697]
[94.05857086 17.35740852]
[96.14617157 32.21142960]
[107.69497681 45.29939270]
[100.94768524 62.32298660]
[103.55241394 77.09510803]
[106.15713501 91.86721802]
[110.63506317 98.79872131]
[108.58555603 107.19966888]
[110.67314911 122.05369568]
[112.76074982 136.90771484]
[117.13888550 145.17956543]
[114.65259552 152.31558228]
[124.09005737 156.17089844]
[131.34201050 163.25193787]
[135.37413025 172.48686218]
[135.63470459 182.50137329]
[132.12974548 191.82324219]
[125.41556549 199.09870911]
[116.51102448 203.28907776]
[115.98753357 218.27993774]
[115.46403503 233.27079773]
[122.71500397 247.33259583]
[114.53824615 259.78207397]
[114.01474762 274.77294922]
[113.49125671 289.76379395]
[112.96776581 304.75466919]
[112.44427490 319.74554443]
[115.31950378 328.65197754]
[111.63183594 335.24783325]
[110.58548737 350.21127319]
[109.53913879 365.17474365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 89]
[4 88]
[5 87]
[6 85]
[7 84]
[8 83]
[9 82]
[10 81]
[12 79]
[13 78]
[14 77]
[17 70]
[18 68]
[19 67]
[20 66]
[21 64]
[22 63]
[23 62]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[32 54]
[33 53]
[34 52]
[35 51]
[36 49]
[37 48]
[39 47]
[40 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
