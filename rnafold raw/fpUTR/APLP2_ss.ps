%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGAGGGCGUGGUAAUAUGAAGUCAGUUCCGGUUGGUGUAAAACCCCCGGGGCGGCGGCGAACUGGCUUUAGAUGCUUCUGGGUCGCGGUGUGCUAAGCGAGGAGUCCGAGUGUGUGAGCUUGAGAGCCGCGCGCUAGAGCGACCCGGCGAGGG\
) } def
/len { sequence length } bind def

/coor [
[-24.24456978 194.28874207]
[-37.75808716 200.79910278]
[-52.54242706 203.33351135]
[-67.45275116 201.69570923]
[-81.33444214 196.01254272]
[-93.11257172 186.72406006]
[-101.87506866 174.54956055]
[-106.94340515 160.43176270]
[-107.92510223 145.46392822]
[-104.74414062 130.80508423]
[-97.64685059 117.59037781]
[-87.18281555 106.84310150]
[-74.16233063 99.39549255]
[-59.59851074 95.82473755]
[-73.93627930 91.41698456]
[-88.27405548 87.00923157]
[-102.61182404 82.60147858]
[-113.73960114 90.24789429]
[-127.04521179 90.07402039]
[-137.65388489 82.36845398]
[-141.80860901 70.13799286]
[-156.05590820 65.44603729]
[-170.30320740 60.75408936]
[-184.55050659 56.06214142]
[-198.79782104 51.37019348]
[-213.04512024 46.67824554]
[-227.29241943 41.98629379]
[-241.53971863 37.29434586]
[-255.78701782 32.60239792]
[-270.03433228 27.91044807]
[-284.28161621 23.21849823]
[-298.52893066 18.52654839]
[-331.50622559 49.59449005]
[-346.39962769 47.80921555]
[-361.29299927 46.02394485]
[-371.93121338 53.38004303]
[-384.32940674 51.55187607]
[-391.89025879 42.06567001]
[-406.74520874 39.98463821]
[-421.60012817 37.90360641]
[-435.22271729 46.37738419]
[-450.29251099 40.87457275]
[-455.24926758 25.61645317]
[-446.29058838 12.30775166]
[-430.28878784 11.15776443]
[-419.51910400 23.04866219]
[-404.66415405 25.12969589]
[-389.80923462 27.21072960]
[-373.95123291 19.74913597]
[-359.50772095 31.13056374]
[-344.61434937 32.91583633]
[-329.72097778 34.70110703]
[-326.54382324 27.90730667]
[-320.18954468 14.31970024]
[-317.01239014 7.52589703]
[-327.93057251 -2.75968981]
[-344.00616455 -6.00119686]
[-348.97958374 -21.62800789]
[-337.73458862 -33.56460190]
[-321.83908081 -29.53162956]
[-317.64498901 -13.67787170]
[-306.72680664 -3.39228511]
[-293.83697510 4.27924728]
[-279.58969116 8.97119617]
[-265.34237671 13.66314507]
[-251.09507751 18.35509491]
[-236.84777832 23.04704285]
[-222.60046387 27.73899269]
[-208.35316467 32.43094254]
[-194.10586548 37.12289047]
[-179.85856628 41.81483841]
[-165.61126709 46.50679016]
[-151.36396790 51.19873810]
[-137.11665344 55.89068604]
[-122.46847534 47.67839813]
[-106.08293152 52.67429352]
[-98.20407104 68.26371002]
[-83.86630249 72.67146301]
[-69.52852631 77.07921600]
[-55.19075394 81.48696899]
[-47.01640320 79.21421814]
[-38.42467117 83.32784271]
[-23.47208786 82.13608551]
[-8.51950645 80.94433594]
[6.43307638 79.75257874]
[21.38565826 78.56082916]
[36.33824158 77.36907959]
[51.29082489 76.17732239]
[66.24340820 74.98557281]
[81.19599152 73.79382324]
[95.08254242 68.12252808]
[106.59448242 58.50612259]
[108.15431213 43.00758362]
[119.96604919 33.41917419]
[134.73191833 35.00174332]
[140.36270142 20.21645164]
[155.09074402 17.99516869]
[166.60269165 8.37876415]
[169.46258545 -7.40732241]
[183.65550232 -14.88665867]
[198.29385376 -8.32173634]
[202.14834595 7.25139618]
[192.26214600 19.88636589]
[176.21908569 19.89070320]
[164.70715332 29.50710869]
[159.89978027 43.60457230]
[144.34832764 46.51368332]
[143.27732849 61.32545471]
[131.73957825 71.24185181]
[116.21089172 70.01805878]
[104.69895172 79.63446808]
[113.89092255 87.05316925]
[116.86866760 97.33940125]
[131.20643616 101.74715424]
[145.54420471 106.15490723]
[159.88198853 110.56266022]
[174.21975708 114.97042084]
[188.55752563 119.37817383]
[202.89529419 123.78592682]
[217.23307800 128.19367981]
[226.41152954 127.72703552]
[231.81051636 132.83422852]
[246.05781555 137.52616882]
[260.30511475 142.21812439]
[276.24020386 138.34448242]
[287.36514282 150.39305115]
[282.23553467 165.96928406]
[266.12829590 169.04969788]
[255.61315918 156.46542358]
[241.36585999 151.77348328]
[227.11856079 147.08152771]
[212.82531738 142.53144836]
[198.48754883 138.12370300]
[184.14978027 133.71594238]
[169.81199646 129.30819702]
[155.47422791 124.90043640]
[141.13645935 120.49268341]
[126.79868317 116.08493042]
[112.46091461 111.67716980]
[101.41500854 117.97744751]
[88.34619904 114.99224091]
[80.34522247 103.38864136]
[82.38774109 88.74639893]
[67.43515778 89.93815613]
[52.48257828 91.12990570]
[37.52999496 92.32166290]
[22.57741165 93.51341248]
[7.62482882 94.70516205]
[-7.32775354 95.89691925]
[-22.28033638 97.08866882]
[-37.23291779 98.28042603]
[-23.78680992 104.92889404]
[-12.69340897 115.02525330]
[-4.81174994 127.78767395]
[-0.75216001 142.22789001]
[-0.82899886 157.22769165]
[-5.03631639 171.62554932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 80]
[15 79]
[16 78]
[17 77]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[31 64]
[32 63]
[33 52]
[34 51]
[35 50]
[38 48]
[39 47]
[40 46]
[55 62]
[56 61]
[82 151]
[83 150]
[84 149]
[85 148]
[86 147]
[87 146]
[88 145]
[89 144]
[90 143]
[91 111]
[92 110]
[95 107]
[97 105]
[98 104]
[113 139]
[114 138]
[115 137]
[116 136]
[117 135]
[118 134]
[119 133]
[120 132]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
