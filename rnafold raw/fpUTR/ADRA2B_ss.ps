%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:15:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGCGACGCUCUUGUCUAGCCGAGCCGGGCAGCGCUGUCGUCCACGGUGCGCACUGGGCGGGCAGCGCUCCCUCUGCCCACCUCCCGCCCCGUC\
) } def
/len { sequence length } bind def

/coor [
[96.95132446 111.05928802]
[92.87615967 110.13851929]
[89.12674713 107.67707825]
[74.12871552 107.91997528]
[59.13068008 108.16287231]
[44.13264847 108.40576935]
[29.13461494 108.64865875]
[14.13658142 108.89155579]
[-0.86145151 109.13445282]
[-15.85358524 109.62018585]
[-30.83588791 110.34861755]
[-40.17212677 119.42765045]
[-52.79002762 119.62332153]
[-61.80704498 111.38168335]
[-76.80507660 111.62458038]
[-91.80311584 111.86747742]
[-106.80114746 112.11037445]
[-121.79917908 112.35327148]
[-136.79721069 112.59616089]
[-150.47029114 120.55591583]
[-163.32118225 113.02572632]
[-178.31921387 113.26862335]
[-194.05836487 119.57065582]
[-204.47113037 106.19116974]
[-194.49707031 92.48152161]
[-178.56210327 98.27058411]
[-163.56407166 98.02769470]
[-150.96376038 90.08531189]
[-137.04011536 97.59812927]
[-122.04207611 97.35523224]
[-107.04404449 97.11234283]
[-92.04600525 96.86944580]
[-77.04797363 96.62654877]
[-62.04994202 96.38365173]
[-47.62250137 86.53796387]
[-31.56432152 95.36631012]
[-16.58201790 94.63787842]
[-9.92765713 91.10147858]
[-1.10434759 94.13642120]
[13.89368534 93.89352417]
[28.89171982 93.65062714]
[43.88975143 93.40773010]
[58.88778687 93.16483307]
[73.88581848 92.92194366]
[88.88385010 92.67904663]
[103.83470917 91.46583557]
[118.67568207 89.28740692]
[133.51664734 87.10897827]
[148.35762024 84.93054962]
[160.88781738 75.27110291]
[174.60383606 81.07801056]
[189.44479370 78.89958191]
[204.28576660 76.72115326]
[209.50871277 65.78906250]
[219.31408691 58.88074875]
[231.12533569 57.66657257]
[241.90884399 62.33928680]
[248.95314026 71.59481812]
[263.90399170 70.38161469]
[278.85485840 69.16841125]
[291.98400879 60.34029388]
[305.29537964 67.02285767]
[320.24624634 65.80964661]
[335.19711304 64.59644318]
[350.14794922 63.38323593]
[365.09881592 62.17002869]
[380.04968262 60.95682526]
[393.17883301 52.12870789]
[406.49020386 58.81127167]
[419.66766357 49.04978943]
[434.60028076 55.82836914]
[435.92666626 72.17378998]
[422.28231812 81.27128601]
[407.70343018 73.76213074]
[395.64364624 82.50347137]
[381.26287842 75.90768433]
[366.31201172 77.12088776]
[351.36117554 78.33409119]
[336.41030884 79.54730225]
[321.45944214 80.76050568]
[306.50860596 81.97371674]
[294.44882202 90.71504974]
[280.06805420 84.11926270]
[265.11721802 85.33247375]
[250.16635132 86.54567719]
[239.36030579 101.14665222]
[221.02473450 103.44349670]
[206.46420288 91.56212616]
[191.62322998 93.74055481]
[176.78225708 95.91898346]
[165.31359863 105.42261505]
[150.53605652 99.77152252]
[135.69508362 101.94995117]
[120.85411072 104.12837982]
[106.01313782 106.30680847]
[103.91088867 108.80367279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 45]
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[10 37]
[11 36]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[21 27]
[22 26]
[46 95]
[47 94]
[48 93]
[49 92]
[51 90]
[52 89]
[53 88]
[58 85]
[59 84]
[60 83]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
