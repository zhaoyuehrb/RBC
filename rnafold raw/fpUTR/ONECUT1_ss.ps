%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACAGUGAGAGGAAGGAAGGCAACAGUCGCCAGCAGCCGAUGUGAAGACCGGACUCCGUGCGCCCCUCGCCGCCUCUGCCUGGCCACAUCGAUGUUGUGUCCGCCGCCUGCUCGCCCGGAUCACG\
) } def
/len { sequence length } bind def

/coor [
[121.22996521 506.05059814]
[126.31904602 491.48678589]
[138.48809814 482.00430298]
[137.02920532 467.07540894]
[125.98447418 460.32330322]
[120.79762268 448.24993896]
[123.58447266 435.20877075]
[133.54020691 426.04541016]
[132.44528198 411.08541870]
[131.35034180 396.12545776]
[130.25541687 381.16546631]
[129.16049194 366.20547485]
[127.88347626 351.25994873]
[126.42458344 336.33105469]
[124.96568298 321.40216064]
[110.16989136 310.75140381]
[107.71185303 292.36785889]
[119.58813477 277.71206665]
[117.40412140 262.87191772]
[115.22010040 248.03176880]
[105.66300201 240.51126099]
[103.77310944 228.09075928]
[111.11553955 217.40443420]
[109.29354858 202.51550293]
[107.47154999 187.62655640]
[105.64955139 172.73762512]
[103.82755280 157.84869385]
[102.00555420 142.95976257]
[99.28100586 128.20927429]
[95.66399384 113.65190125]
[86.09873199 103.45399475]
[89.77863312 89.96511078]
[86.16162109 75.40773010]
[82.54460907 60.85035706]
[78.92759705 46.29298019]
[75.31058502 31.73560333]
[71.51657867 17.22334671]
[67.54615784 2.75836468]
[63.57572937 -11.70661736]
[50.12287521 -19.55891228]
[46.30235672 -34.28502274]
[53.87122726 -47.06187057]
[40.41837692 -54.91416550]
[36.59785843 -69.64027405]
[44.16672516 -82.41712189]
[40.19630051 -96.88210297]
[36.22587204 -111.34708405]
[32.25544739 -125.81206512]
[21.14128113 -137.07199097]
[25.23376083 -151.39334106]
[11.78090954 -159.24563599]
[7.96039152 -173.97174072]
[15.52926064 -186.74858093]
[11.55883312 -201.21356201]
[0.44466791 -212.47349548]
[4.53714848 -226.79483032]
[0.56672192 -241.25981140]
[-9.45649910 -254.93356323]
[0.90817040 -268.35034180]
[16.66984367 -262.10485840]
[15.03170395 -245.23023987]
[19.00213051 -230.76525879]
[29.83230591 -220.53996277]
[26.02381516 -205.18399048]
[29.99424171 -190.71900940]
[43.02519226 -183.59651184]
[47.25782776 -168.98352051]
[39.69874191 -155.36375427]
[50.52891922 -145.13847351]
[46.72042847 -129.78248596]
[50.69085312 -115.31751251]
[54.66128159 -100.85253143]
[58.63171005 -86.38755035]
[71.66265869 -79.26505280]
[75.89529419 -64.65206146]
[68.33621216 -51.03229523]
[81.36715698 -43.90979767]
[85.59979248 -29.29681015]
[78.04071045 -15.67704391]
[82.01113892 -1.21206200]
[85.98156738 13.25292015]
[90.83601379 18.92901421]
[89.86795807 28.11858940]
[93.48497009 42.67596817]
[97.10198212 57.23334503]
[100.71899414 71.79071808]
[104.33600616 86.34809875]
[113.90126801 96.54600525]
[110.22136688 110.03488922]
[113.83837891 124.59226990]
[124.13410950 113.68364716]
[139.10078430 114.68291473]
[147.85494995 126.86341858]
[144.03076172 141.36775208]
[130.40907288 147.64865112]
[116.89449310 141.13777161]
[118.71648407 156.02670288]
[120.53848267 170.91563416]
[122.36048126 185.80456543]
[124.18247986 200.69349670]
[126.00447845 215.58242798]
[137.42370605 229.96705627]
[130.06025696 245.84774780]
[132.24426270 260.68789673]
[134.42828369 275.52804565]
[145.27304077 280.69226074]
[152.16792297 290.38027954]
[153.46807861 302.07876587]
[148.96177673 312.82189941]
[139.89457703 319.94326782]
[141.35346985 334.87216187]
[142.81236267 349.80105591]
[146.79751587 358.13793945]
[144.12046814 365.11056519]
[145.21539307 380.07052612]
[146.31033325 395.03051758]
[147.40525818 409.99050903]
[148.50018311 424.95050049]
[161.92735291 436.08590698]
[163.17413330 453.14782715]
[151.95809937 465.61651611]
[153.41699219 480.54541016]
[167.19160461 487.49258423]
[175.00392151 500.79565430]
[174.36103821 516.20959473]
[165.46812439 528.81591797]
[151.16285706 534.59197998]
[136.01000977 531.69470215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 122]
[4 121]
[8 118]
[9 117]
[10 116]
[11 115]
[12 114]
[13 112]
[14 111]
[15 110]
[18 105]
[19 104]
[20 103]
[23 101]
[24 100]
[25 99]
[26 98]
[27 97]
[28 96]
[29 90]
[30 89]
[32 87]
[33 86]
[34 85]
[35 84]
[36 83]
[37 81]
[38 80]
[39 79]
[42 76]
[45 73]
[46 72]
[47 71]
[48 70]
[50 68]
[53 65]
[54 64]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
