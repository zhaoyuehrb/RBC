%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCCCCGCGAGAAGAAGAGCGGGAAGAGGCGGACAGCGAGGCCAAGAUUUCAGCUGCGGGACGGUCAGGGGAGACCUCCAGGCGCAGGGAAGGACGGCCAGGGUGACACGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[49.11440659 181.05392456]
[53.08070755 166.59091187]
[40.80616379 175.21272278]
[28.53162384 183.83453369]
[16.25708199 192.45634460]
[3.98254061 201.07815552]
[-7.69138527 210.49725342]
[-18.71299744 220.67193604]
[-29.73460960 230.84660339]
[-40.75622177 241.02128601]
[-37.29830170 255.98585510]
[-41.80128098 270.66983032]
[-53.05389023 281.12326050]
[-68.02922058 284.53427124]
[-82.69899750 279.98526001]
[-93.11711884 268.69995117]
[-96.48115540 253.71400452]
[-91.88620758 239.05856323]
[-80.56829071 228.67585754]
[-65.57186890 225.35881042]
[-50.93090057 229.99967957]
[-39.90928650 219.82499695]
[-28.88767433 209.65031433]
[-17.86606216 199.47564697]
[-32.34597778 195.56002808]
[-38.56169891 181.90847778]
[-32.00791550 168.41596985]
[-17.43497086 164.86219788]
[-5.40569258 173.82302856]
[-4.63927031 188.80361938]
[7.63527107 180.18179321]
[19.90981293 171.55998230]
[32.18435287 162.93817139]
[44.45889664 154.31636047]
[48.03563309 145.83236694]
[57.61022949 141.84730530]
[66.87310028 130.04902649]
[68.64671326 115.26040649]
[83.25444794 109.18383026]
[81.62690735 94.78600311]
[90.57454681 83.38925171]
[104.94728088 81.55329895]
[114.21015167 69.75502777]
[123.47301483 57.95675659]
[132.73588562 46.15848160]
[127.97910309 33.14449310]
[130.28874207 19.59248734]
[138.94970703 9.05668831]
[151.59562683 4.24589920]
[164.85461426 6.32749462]
[174.42828369 -5.22001505]
[184.00195312 -16.76752472]
[193.57560730 -28.31503487]
[193.16937256 -41.29052353]
[201.48789978 -50.72665024]
[213.61048889 -51.87377548]
[223.48815918 -63.16233826]
[233.36582947 -74.45089722]
[243.24349976 -85.73946381]
[253.12117004 -97.02802277]
[262.54028320 -108.70195007]
[271.48577881 -120.74262238]
[280.43130493 -132.78329468]
[283.08767700 -141.66026306]
[289.77868652 -145.02117920]
[299.04156494 -156.81945801]
[308.30444336 -168.61773682]
[317.56729126 -180.41600037]
[315.42977905 -196.07507324]
[325.05734253 -208.60845947]
[340.73812866 -210.58030701]
[353.16900635 -200.82077026]
[354.97497559 -185.12001038]
[345.08456421 -172.79299927]
[329.36557007 -171.15313721]
[320.10269165 -159.35485840]
[310.83984375 -147.55659485]
[301.57696533 -135.75831604]
[292.47198486 -123.83778381]
[283.52645874 -111.79711151]
[274.58096313 -99.75643921]
[274.79367065 -96.11470032]
[273.16949463 -92.19521332]
[269.60168457 -88.90225220]
[264.40972900 -87.15035248]
[254.53205872 -75.86179352]
[244.65438843 -64.57322693]
[234.77671814 -53.28466797]
[224.89904785 -41.99610519]
[222.49449158 -24.66806793]
[205.12312317 -18.74137115]
[195.54945374 -7.19386196]
[185.97579956 4.35364771]
[176.40213013 15.90115738]
[180.98493958 31.60285568]
[175.29222107 47.11336136]
[161.36395264 56.30457687]
[144.53416443 55.42135239]
[135.27128601 67.21962738]
[126.00842285 79.01789856]
[116.74555206 90.81616974]
[118.37309265 105.21399689]
[109.42545319 116.61074829]
[95.05271912 118.44670105]
[92.61656189 134.07922363]
[78.67137146 139.31190491]
[69.40850067 151.11016846]
[84.06517029 147.91925049]
[98.70851135 151.17082214]
[110.63726044 160.26504517]
[117.65092468 173.52432251]
[118.45568848 188.50271606]
[112.90310669 202.43716431]
[102.01746368 212.75718689]
[87.80682373 217.55903625]
[72.89262390 215.95690918]
[60.02609634 208.24638367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 34]
[3 33]
[4 32]
[5 31]
[6 30]
[7 24]
[8 23]
[9 22]
[10 21]
[36 107]
[37 106]
[39 104]
[42 101]
[43 100]
[44 99]
[45 98]
[50 94]
[51 93]
[52 92]
[53 91]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[61 81]
[62 80]
[63 79]
[65 78]
[66 77]
[67 76]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
