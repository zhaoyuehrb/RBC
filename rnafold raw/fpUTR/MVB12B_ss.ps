%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUCGGUGAGGCUCGCGCUCGAGCUGCGGCGCCGGCUCCUGCCGCCUGGGCCCCGGGCCCGGCCCCUCCCGCGCCGCCCGGGCG\
) } def
/len { sequence length } bind def

/coor [
[88.14949799 209.15147400]
[77.44624329 197.52323914]
[78.18376923 181.73616028]
[89.92451477 171.15644836]
[90.46604919 156.16622925]
[91.00758362 141.17599487]
[91.54911804 126.18578339]
[92.09066010 111.19555664]
[86.46303558 106.23775482]
[72.24824524 111.02730560]
[75.20778656 96.32213593]
[69.58016205 91.36433411]
[54.77776337 93.79106140]
[39.97536850 96.21778870]
[25.17296982 98.64452362]
[10.37057114 101.07125092]
[-4.43182659 103.49797821]
[-16.77057457 114.30017090]
[-32.20561218 108.76017761]
[-34.85869980 92.57706451]
[-22.00056648 82.39862823]
[-6.85855675 88.69557953]
[7.94384098 86.26885223]
[22.74623871 83.84212494]
[37.54863739 81.41539001]
[52.35103607 78.98866272]
[67.15343475 76.56193542]
[101.37770081 87.88683319]
[111.29331970 76.63158417]
[121.20893097 65.37633514]
[131.12454224 54.12108994]
[141.04016113 42.86584091]
[150.95578003 31.61059380]
[160.87138367 20.35534668]
[155.01771545 -6.40875769]
[174.74620056 -28.87694359]
[171.52165222 -43.52625275]
[168.29708862 -58.17556000]
[156.84274292 -69.91139221]
[161.53897095 -85.62372589]
[177.55471802 -89.14905548]
[188.41433716 -76.86083221]
[182.94639587 -61.40011597]
[186.17095947 -46.75080872]
[189.39550781 -32.10150146]
[203.61030579 -27.31197739]
[215.04273987 -37.02276993]
[226.47517395 -46.73356628]
[231.12918091 -54.86902618]
[238.50012207 -56.57950592]
[250.27569580 -65.87123108]
[262.05123901 -75.16295624]
[273.82681274 -84.45468140]
[285.60238647 -93.74640656]
[294.29129028 -108.30453491]
[310.68582153 -103.98527527]
[311.07379150 -87.03576660]
[294.89410400 -81.97084808]
[283.11853027 -72.67912292]
[271.34298706 -63.38739395]
[259.56741333 -54.09566879]
[247.79185486 -44.80394363]
[236.18597412 -35.30113602]
[224.75354004 -25.59033966]
[213.32110596 -15.87954617]
[217.65574646 -5.39421368]
[218.31541443 5.70111513]
[215.37786865 16.18107986]
[209.30999756 24.93689919]
[200.90104675 31.09358406]
[191.16268921 34.09669495]
[181.20845032 33.76010513]
[172.12663269 30.27096176]
[162.21102905 41.52620697]
[152.29541016 52.78145599]
[142.37979126 64.03670502]
[132.46417236 75.29195404]
[122.54856873 86.54719543]
[112.63294983 97.80244446]
[107.08087921 111.73709869]
[106.53934479 126.72731781]
[105.99780273 141.71754456]
[105.45626831 156.70776367]
[104.91473389 171.69798279]
[115.86146545 183.09730530]
[115.45790863 198.89643860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 84]
[5 83]
[6 82]
[7 81]
[8 80]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[28 79]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[34 73]
[36 45]
[37 44]
[38 43]
[46 65]
[47 64]
[48 63]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
