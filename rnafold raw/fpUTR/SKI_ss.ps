%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:48:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGCGGCGGCGGGGGCCGGGGGGGCCCGGGCGCGCGGGAGCGGGAGCGGCCGGGGGAGCCGGAGCGCACC\
) } def
/len { sequence length } bind def

/coor [
[134.63342285 121.29740906]
[120.62586975 115.93193817]
[107.31281281 125.01551819]
[91.20331573 124.53307343]
[78.45769501 114.66909790]
[73.94992828 99.19561005]
[59.72450638 94.43773651]
[45.40000534 89.98704529]
[30.98305702 85.84558868]
[16.56611061 81.70413971]
[1.16610885 85.33049774]
[-8.93020630 74.37998962]
[-24.33020782 78.00635529]
[-34.42652130 67.05583954]
[-48.84347153 62.91438675]
[-63.26041794 58.77293396]
[-78.66041565 62.39929581]
[-88.75673676 51.44878387]
[-103.17368317 47.30733109]
[-118.94828033 51.78995514]
[-130.52761841 40.17742157]
[-125.99987030 24.41571236]
[-110.02278137 20.71912193]
[-99.03222656 32.89038467]
[-84.61528015 37.03183746]
[-70.24647522 33.10924911]
[-59.11896133 44.35598755]
[-44.70201492 48.49744034]
[-30.28506851 52.63889694]
[-15.91626263 48.71630478]
[-4.78875160 59.96304321]
[9.58005333 56.04045486]
[20.70756531 67.28718567]
[35.12451172 71.42864227]
[49.54145813 75.57009888]
[57.06841660 74.35151672]
[64.48237610 80.21231079]
[78.70780182 84.97018433]
[88.99417114 76.37532806]
[102.19188690 74.02984619]
[114.80979156 78.55417633]
[123.51010132 88.75151062]
[125.99134827 101.92437744]
[139.99890137 107.28985596]
[154.11866760 112.35269928]
[168.34408569 117.11056519]
[183.88584900 114.15010071]
[193.50169373 125.52484131]
[207.72711182 130.28271484]
[221.95254517 135.04057312]
[239.73628235 130.85452271]
[251.02638245 144.11512756]
[265.44332886 148.25659180]
[279.86029053 152.39804077]
[294.27722168 156.53948975]
[308.95251465 150.05757141]
[323.10287476 157.61717224]
[325.87332153 173.41920471]
[315.13864136 185.34170532]
[299.13354492 184.23875427]
[290.13577271 170.95643616]
[275.71884155 166.81498718]
[261.30187988 162.67353821]
[246.88493347 158.53207397]
[235.95848083 164.15498352]
[223.77572632 160.59103394]
[217.19467163 149.26600647]
[202.96925354 144.50813293]
[188.74382019 139.75025940]
[174.21955872 143.05104065]
[163.58621216 131.33598328]
[149.36079407 126.57812500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[6 38]
[7 37]
[8 35]
[9 34]
[10 33]
[12 31]
[14 29]
[15 28]
[16 27]
[18 25]
[19 24]
[45 72]
[46 71]
[48 69]
[49 68]
[50 67]
[52 64]
[53 63]
[54 62]
[55 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
