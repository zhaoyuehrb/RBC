%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:25:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGAGGCGGGCGCACAUCGAUGGCGUCACCUUCUGGCGCCGCCGGUUGGUUUCCCUGGCAACUGGAGCAAUCAGAGCACCGCAGCCAGGGAG\
) } def
/len { sequence length } bind def

/coor [
[76.80584717 114.50332642]
[62.39453888 118.66437531]
[47.98323441 122.82541656]
[33.57192993 126.98645782]
[19.16062546 131.14750671]
[4.74931955 135.30854797]
[-9.66198540 139.46958923]
[-24.07328987 143.63063049]
[-31.06978416 154.62014771]
[-43.30867386 157.71513367]
[-53.98273849 151.76458740]
[-68.52374268 155.44686890]
[-83.06474304 159.12915039]
[-97.60575104 162.81143188]
[-112.14675140 166.49371338]
[-119.87809753 171.73120117]
[-127.22943878 170.04887390]
[-141.88424683 173.24836731]
[-153.63964844 184.68263245]
[-169.34393311 179.95953369]
[-172.84185791 163.93777466]
[-160.53507996 153.09918213]
[-145.08374023 158.59356689]
[-130.42893982 155.39407349]
[-115.82903290 151.95271301]
[-101.28803253 148.27043152]
[-86.74702454 144.58815002]
[-72.20602417 140.90586853]
[-57.66501999 137.22358704]
[-45.89040375 124.32653809]
[-28.23433495 129.21932983]
[-13.82302856 125.05828857]
[0.58827615 120.89723969]
[14.99958134 116.73619843]
[29.41088676 112.57515717]
[43.82219315 108.41410828]
[58.23349762 104.25306702]
[72.64479828 100.09202576]
[73.53560638 93.07530975]
[76.19566345 86.52153778]
[80.44712830 80.86885834]
[86.00578308 76.49517059]
[92.50000000 73.69286346]
[92.50000000 58.69286346]
[92.50000000 43.69286346]
[83.83629608 29.76906204]
[91.80042267 15.43362713]
[108.19957733 15.43362713]
[116.16370392 29.76906204]
[107.50000000 43.69286346]
[107.50000000 58.69286346]
[107.50000000 73.69286346]
[120.72755432 82.14828491]
[127.12836456 96.48328400]
[141.96258545 98.70723724]
[156.79679871 100.93119049]
[171.63101196 103.15514374]
[186.46524048 105.37910461]
[201.29945374 107.60305786]
[216.13366699 109.82701111]
[230.96789551 112.05096436]
[240.90750122 102.78673553]
[254.18334961 101.02861023]
[265.84561157 107.20313263]
[271.67831421 118.82135010]
[286.43087769 121.53456116]
[301.18347168 124.24776459]
[316.15551758 119.13427734]
[327.27334595 129.04606628]
[342.02590942 131.75927734]
[353.96246338 121.65714264]
[369.60003662 121.64282227]
[381.55505371 131.72306824]
[384.18273926 147.13830566]
[376.24237061 160.60990906]
[361.48312378 165.77702332]
[346.87390137 160.19989014]
[339.31271362 146.51185608]
[324.56011963 143.79864502]
[310.64328003 149.10620117]
[298.47024536 139.00035095]
[283.71768188 136.28713989]
[268.96511841 133.57392883]
[255.64633179 143.69422913]
[238.78297424 141.09425354]
[228.74392700 126.88518524]
[213.90971375 124.66123199]
[199.07550049 122.43727112]
[184.24128723 120.21331787]
[169.40705872 117.98936462]
[154.57284546 115.76541138]
[139.73863220 113.54145813]
[124.90440369 111.31749725]
[111.29193878 124.91600800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[17 24]
[18 23]
[43 52]
[44 51]
[45 50]
[54 93]
[55 92]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[61 86]
[65 83]
[66 82]
[67 81]
[69 79]
[70 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
