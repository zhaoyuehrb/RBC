%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAACGCCGGCUCCCGGCAUGCCGCGCGCUGACAGCCUUAUAAAUAGUCGCCUUUGCCGGCCGCCGCGAGGACGGGCAGGGCACGCACUGGCCCCGGCGCCCACCCGCACCCCUCCCCAGAGCACUGACACGGCUCCCGGGACCUCGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[208.33007812 183.31770325]
[195.54847717 175.46719360]
[182.76687622 167.61666870]
[177.94192505 167.85363770]
[172.92793274 165.02050781]
[169.63325500 159.17620850]
[157.18251038 150.81088257]
[144.73175049 142.44555664]
[132.28099060 134.08021545]
[119.83024597 125.71488953]
[107.37949371 117.34956360]
[75.72782135 113.27406311]
[60.84004211 111.44264221]
[45.95226669 109.61122894]
[31.31065941 115.60572052]
[19.62328529 106.37238312]
[4.73550844 104.54096222]
[-10.15226841 102.70954895]
[-25.04004669 100.87813568]
[-35.70447159 108.20269012]
[-48.10005569 106.33251953]
[-55.62952042 96.81688690]
[-70.47684479 94.68216705]
[-85.32416534 92.54744720]
[-100.17148590 90.41271973]
[-109.17280579 92.29541779]
[-115.29868317 88.08003998]
[-130.09936523 85.64289856]
[-144.98715210 83.81147766]
[-159.93724060 82.58884430]
[-168.80654907 85.01854706]
[-175.17878723 81.18572998]
[-190.10081482 79.65837860]
[-205.02285767 78.13103485]
[-212.56477356 91.36127472]
[-224.83973694 100.37489319]
[-239.72102356 103.61022186]
[-254.63035583 100.50672913]
[-266.98461914 91.60209656]
[-274.64331055 78.43912506]
[-276.27960205 63.29837036]
[-271.60992432 48.80305862]
[-261.44335938 37.46459198]
[-247.54132080 31.24742889]
[-232.31240845 31.22872925]
[-218.39514160 37.41173172]
[-208.20075989 48.72520065]
[-203.49551392 63.20899963]
[-188.57347107 64.73634338]
[-173.65142822 66.26368713]
[-158.71459961 67.63875580]
[-143.76451111 68.86138916]
[-141.51858521 67.08970642]
[-138.41476440 66.12873840]
[-134.76870728 66.31774902]
[-131.01560974 67.87164307]
[-127.66222382 70.84220886]
[-112.86154175 73.27935028]
[-98.03676605 75.56539917]
[-83.18944550 77.70012665]
[-68.34211731 79.83484650]
[-53.49479675 81.96956635]
[-37.61325455 74.56396484]
[-23.20863152 85.99035645]
[-8.32085419 87.82177734]
[6.56692362 89.65319061]
[21.45470047 91.48460388]
[35.03143311 85.35911560]
[47.78367996 94.72344971]
[62.67145920 96.55487061]
[77.55923462 98.38628387]
[68.23966980 86.63274384]
[74.66812134 73.08007050]
[89.66652679 72.86128235]
[96.48744202 86.22186279]
[101.00613403 71.91867065]
[97.78550720 56.42873001]
[108.99742126 46.62351990]
[113.51611328 32.32032394]
[118.03481293 18.01712799]
[108.70401764 5.61890268]
[108.47640991 -9.89650345]
[117.43949890 -22.56309891]
[132.14678955 -27.51032257]
[146.94305420 -22.83586311]
[156.13879395 -10.33714581]
[156.19807434 5.17981625]
[147.09809875 17.74843597]
[132.33801270 22.53582001]
[127.81931305 36.83901596]
[123.30062103 51.14221191]
[126.84445190 65.60909271]
[115.30932617 76.43736267]
[110.79063416 90.74055481]
[115.74481964 104.89880371]
[128.19557190 113.26413727]
[140.64633179 121.62947083]
[153.09707642 129.99479675]
[165.54783630 138.36012268]
[177.99858093 146.72546387]
[190.61738586 154.83506775]
[203.39898682 162.68559265]
[216.18058777 170.53610229]
[231.98927307 171.16566467]
[238.78480530 184.41972351]
[251.56640625 192.27024841]
[267.37509155 192.89981079]
[274.17062378 206.15385437]
[286.95223999 214.00437927]
[299.80316162 205.84255981]
[314.86199951 204.07691956]
[329.13574219 209.00444031]
[339.81072998 219.59716797]
[344.80734253 233.71606445]
[343.18505859 248.54284668]
[355.96667480 256.39337158]
[368.74826050 264.24389648]
[381.52987671 272.09442139]
[396.71832275 268.63781738]
[409.56887817 276.78143311]
[412.77059937 291.28262329]
[425.55221558 299.13314819]
[438.33380127 306.98364258]
[451.11541748 314.83416748]
[460.12487793 316.67749023]
[464.07537842 322.97744751]
[479.46325684 319.37353516]
[492.84826660 327.77691650]
[496.28930664 343.20205688]
[487.74484253 356.49746704]
[472.28421021 359.77523804]
[459.07986450 351.09069824]
[455.96575928 335.59625244]
[443.26489258 327.61578369]
[430.48327637 319.76525879]
[417.70169067 311.91473389]
[404.92007446 304.06420898]
[390.53829956 307.76553345]
[377.46411133 299.98605347]
[373.67935181 284.87600708]
[360.89773560 277.02548218]
[348.11614990 269.17495728]
[335.33453369 261.32446289]
[322.84362793 269.47567749]
[307.99121094 271.40319824]
[293.71630859 266.67160034]
[282.86712646 256.16848755]
[277.63275146 241.93865967]
[279.10171509 226.78598022]
[266.32009888 218.93545532]
[251.42565918 218.86741638]
[243.71589661 205.05184937]
[230.93429565 197.20132446]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[6 100]
[7 99]
[8 98]
[9 97]
[10 96]
[11 95]
[12 71]
[13 70]
[14 69]
[16 67]
[17 66]
[18 65]
[19 64]
[22 62]
[23 61]
[24 60]
[25 59]
[27 58]
[28 57]
[29 52]
[30 51]
[32 50]
[33 49]
[34 48]
[75 94]
[76 93]
[78 91]
[79 90]
[80 89]
[105 153]
[106 152]
[108 150]
[109 149]
[115 143]
[116 142]
[117 141]
[118 140]
[121 137]
[122 136]
[123 135]
[124 134]
[126 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
