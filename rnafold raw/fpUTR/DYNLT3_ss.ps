%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGCGGGGAUUGCGUAGGGAAAGGCCCUAGGCCAUAAACGGGGGUGGGGCCUCCCCGGAGGCCAGUGCGCGGCCGCGGUGCUCUACCGGCGUGUCGCUCCGCCCCAGGGAGAGCCGGCGCUACC\
) } def
/len { sequence length } bind def

/coor [
[26.21601486 222.78736877]
[11.56141663 225.98779297]
[-2.55744934 220.92245483]
[-11.83527946 209.13594055]
[-13.44296074 194.22235107]
[-6.88977575 180.72875977]
[-20.80062103 186.34022522]
[-24.66298294 201.25291443]
[-36.42829132 210.91886902]
[-51.45159149 211.79321289]
[-63.95928192 203.74986267]
[-77.87012482 209.36131287]
[-87.77376556 221.69940186]
[-102.47140503 219.28514099]
[-116.38224792 224.89659119]
[-126.28588867 237.23469543]
[-140.98352051 234.82043457]
[-154.89436340 240.43188477]
[-168.80522156 246.04333496]
[-182.71606445 251.65478516]
[-196.62690735 257.26623535]
[-204.20153809 271.40853882]
[-220.00650024 274.16217041]
[-231.91758728 263.41482544]
[-230.79762268 247.41091919]
[-217.50575256 238.42727661]
[-202.23835754 243.35539246]
[-188.32751465 237.74394226]
[-174.41667175 232.13249207]
[-160.50582886 226.52104187]
[-146.59497070 220.90959167]
[-137.68634033 208.97286987]
[-121.99369812 210.98574829]
[-108.08285522 205.37429810]
[-99.17421722 193.43757629]
[-83.48158264 195.45046997]
[-69.57073212 189.83901978]
[-66.14492798 175.36828613]
[-54.71992874 165.57373047]
[-39.54079819 164.37066650]
[-26.41207314 172.42936707]
[-12.50122833 166.81791687]
[0.70016158 159.69589233]
[13.02868271 151.15144348]
[19.08185005 137.54231262]
[34.83162689 136.04061890]
[47.16014862 127.49617767]
[53.21331787 113.88704681]
[68.96309662 112.38536072]
[81.29161835 103.84091187]
[83.97950745 89.60288239]
[95.88846588 81.34922028]
[110.16394043 83.83056641]
[122.49246216 75.28611755]
[134.82098389 66.74167633]
[147.14950562 58.19722748]
[159.47802734 49.65278244]
[166.41300964 35.43249512]
[181.28097534 34.54196167]
[193.60949707 25.99751472]
[198.95312500 18.45360565]
[206.35029602 17.39863396]
[218.88639832 9.16174126]
[231.42248535 0.92484814]
[234.81546021 -4.95236778]
[239.92634583 -7.73499203]
[244.78851318 -7.39145756]
[250.67675781 -14.51841259]
[258.13180542 -15.02203274]
[266.43762207 -28.48768044]
[281.32083130 -27.90510750]
[294.43313599 -35.18986893]
[307.54544067 -42.47462845]
[320.65771484 -49.75939178]
[333.77001953 -57.04415512]
[346.79119873 -64.49053192]
[359.71929932 -72.09738922]
[372.64739990 -79.70424652]
[385.48043823 -87.47042084]
[398.21643066 -95.39472198]
[410.95242310 -103.31902313]
[423.68841553 -111.24332428]
[433.94268799 -124.74466705]
[449.75503540 -118.62867737]
[448.25537109 -101.74118805]
[431.61270142 -98.50733185]
[418.87670898 -90.58303070]
[406.14071655 -82.65872955]
[393.40472412 -74.73442841]
[389.34393311 -68.46217346]
[380.25427246 -66.77615356]
[367.32617188 -59.16929245]
[354.39807129 -51.56243515]
[350.18338013 -45.39253616]
[341.05477905 -43.93185806]
[327.94247437 -36.64709854]
[314.83020020 -29.36233711]
[301.71789551 -22.07757378]
[288.60559082 -14.79281330]
[281.23764038 -1.84821999]
[265.41656494 -1.90973926]
[252.39537048 5.53664017]
[239.65937805 13.46093941]
[227.12329102 21.69783211]
[214.58718872 29.93472481]
[202.15393066 38.32603836]
[189.82540894 46.87048340]
[183.77224731 60.47961426]
[168.02247620 61.98130417]
[155.69395447 70.52574921]
[143.36543274 79.07019806]
[131.03691101 87.61463928]
[118.70838165 96.15908813]
[116.02049255 110.39711761]
[104.11153412 118.65077972]
[89.83605957 116.16943359]
[77.50753784 124.71388245]
[70.57255554 138.93417358]
[55.70459366 139.82470703]
[43.37607193 148.36914062]
[36.44108963 162.58943176]
[21.57312965 163.47996521]
[9.24460793 172.02441406]
[24.11958313 173.95704651]
[35.70089722 183.48979187]
[40.45703125 197.71578979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 42]
[7 41]
[11 37]
[12 36]
[14 34]
[15 33]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[43 123]
[44 122]
[46 120]
[47 119]
[49 117]
[50 116]
[53 113]
[54 112]
[55 111]
[56 110]
[57 109]
[59 107]
[60 106]
[62 105]
[63 104]
[64 103]
[67 102]
[69 101]
[71 99]
[72 98]
[73 97]
[74 96]
[75 95]
[76 93]
[77 92]
[78 91]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
