%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGGCACUGCGGUGAAAGCCGAGGCAGCGGGCAGACGAGCAGGGGGCGGGCGGACAUCUUGGGAUCCGGAGAGUGGCCGGGCCGGCAGAGCAGGGGGCCGAGGACACCAGGUCUGUUCUCAGAGCGAUGGGCCGCGGAGACUGAUCUGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[120.22492218 160.54547119]
[120.22492218 145.54547119]
[120.22492218 130.54547119]
[113.22663879 127.84844208]
[92.23178864 119.75732422]
[82.16530609 130.87785339]
[78.64022064 146.30134583]
[64.36278534 150.54444885]
[54.29630661 161.66497803]
[50.83083725 170.17687988]
[43.91743088 172.90397644]
[33.63184357 183.82215881]
[29.99782562 192.26348877]
[23.03156090 194.85260010]
[12.53093052 205.56411743]
[2.03029943 216.27565002]
[-8.47033119 226.98716736]
[-12.03081608 242.99513245]
[-27.75341988 247.65686035]
[-39.46407700 236.17677307]
[-35.11586761 220.36459351]
[-19.18185616 216.48654175]
[-8.68122482 205.77500916]
[1.81940663 195.06349182]
[12.32003784 184.35195923]
[22.71366119 173.53657532]
[32.99924850 162.61839294]
[43.17578125 151.59849548]
[53.24225998 140.47798157]
[56.04732132 125.84989166]
[71.04478455 120.81137085]
[81.11125946 109.69084930]
[78.06982422 102.83522034]
[71.98693848 89.12396240]
[68.94550323 82.26833344]
[53.94549942 82.26833344]
[42.94881058 93.61946869]
[27.14540482 93.78656006]
[15.91116524 82.67047882]
[15.91116524 66.86618805]
[27.14540482 55.75009918]
[42.94881058 55.91719437]
[53.94549942 67.26833344]
[68.94550323 67.26833344]
[72.90864563 60.90095520]
[65.84314728 47.66922379]
[80.83493805 48.16620636]
[84.79808807 41.79883194]
[78.17490387 28.34024811]
[65.13929749 19.37456703]
[66.46183014 4.53879404]
[53.42622375 -4.42688656]
[54.74876022 -19.26265907]
[48.12557602 -32.72124100]
[41.50239563 -46.17982483]
[29.53581047 -51.08743286]
[24.30894279 -62.47766876]
[28.13918877 -73.98782349]
[21.78490067 -87.57543182]
[15.27929211 -94.06688690]
[15.44235897 -101.49694061]
[9.35947895 -115.20819855]
[3.27659917 -128.91944885]
[-2.80628061 -142.63070679]
[-15.47514057 -152.10755920]
[-13.56383133 -166.87902832]
[-27.12963676 -176.09318542]
[-25.66313744 -192.42663574]
[-10.67294121 -199.07690430]
[2.42032170 -189.20277405]
[0.14742613 -172.96189880]
[12.38119793 -164.46577454]
[10.90497684 -148.71359253]
[16.98785591 -135.00233459]
[23.07073593 -121.29107666]
[29.15361595 -107.57981873]
[35.37250519 -93.92971802]
[41.72679520 -80.34210968]
[56.62760925 -71.11623383]
[54.96097565 -52.80300903]
[61.58415985 -39.34442520]
[68.20734406 -25.88584137]
[80.76921844 -17.88280869]
[79.92041779 -2.08438826]
[92.48229218 5.91864443]
[91.63349152 21.71706581]
[98.25666809 35.17564774]
[147.83425903 105.55307007]
[162.76017761 107.04187775]
[177.68611145 108.53068542]
[192.61204529 110.01949310]
[207.53797913 111.50829315]
[222.46391296 112.99710083]
[236.96389771 106.66772461]
[248.86036682 115.63005066]
[263.78631592 117.11885834]
[278.71221924 118.60766602]
[287.11279297 107.64076996]
[299.74072266 102.31221771]
[313.24298096 103.92038727]
[324.09170532 111.93701172]
[329.50582886 124.17362213]
[344.39920044 125.95890045]
[359.29257202 127.74417114]
[373.91555786 121.70433807]
[385.63146973 130.90141296]
[400.52484131 132.68669128]
[409.47369385 130.59375000]
[415.69549561 134.65837097]
[424.68417358 132.74377441]
[430.82397461 136.93130493]
[445.63458252 139.30726624]
[460.44522095 141.68324280]
[475.30017090 143.76428223]
[489.92312622 137.72444153]
[501.63906860 146.92152405]
[516.53240967 148.70680237]
[531.42584229 150.49206543]
[546.31921387 152.27734375]
[561.17517090 145.33241272]
[574.46081543 154.94610596]
[572.50903320 171.22868347]
[557.32763672 177.43003845]
[544.53393555 167.17073059]
[529.64056396 165.38545227]
[514.74719238 163.60017395]
[499.85379028 161.81491089]
[486.29608154 167.98243713]
[473.51489258 158.65765381]
[469.23522949 160.88719177]
[463.50286865 160.41354370]
[458.06924438 156.49386597]
[443.25863647 154.11790466]
[428.44799805 151.74192810]
[413.61447144 149.51332092]
[398.73959351 147.58007812]
[383.84619141 145.79479980]
[370.28851318 151.96232605]
[357.50729370 142.63755798]
[342.61392212 140.85227966]
[327.72055054 139.06700134]
[316.97610474 151.44497681]
[300.81338501 155.03488159]
[285.53613281 148.23442078]
[277.22341919 133.53359985]
[262.29748535 132.04479980]
[247.37156677 130.55598450]
[233.93917847 136.99185181]
[220.97511292 127.92303467]
[206.04917908 126.43422699]
[191.12324524 124.94541931]
[176.19731140 123.45661163]
[161.27137756 121.96781158]
[146.34544373 120.47900391]
[135.22491455 130.54547119]
[135.22491455 145.54547119]
[135.22491455 160.54547119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 157]
[2 156]
[3 155]
[5 32]
[6 31]
[8 29]
[9 28]
[11 27]
[12 26]
[14 25]
[15 24]
[16 23]
[17 22]
[35 44]
[36 43]
[48 87]
[49 86]
[51 84]
[53 82]
[54 81]
[55 80]
[58 78]
[59 77]
[61 76]
[62 75]
[63 74]
[64 73]
[66 71]
[88 154]
[89 153]
[90 152]
[91 151]
[92 150]
[93 149]
[95 147]
[96 146]
[97 145]
[102 141]
[103 140]
[104 139]
[106 137]
[107 136]
[109 135]
[111 134]
[112 133]
[113 132]
[114 129]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
