%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:30:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGUGUCUUCAUUCUUUCCGCCAUCUUGAUUCUUUGUCACUGACCGAGACUCAGCCGUGGGAAAU\
) } def
/len { sequence length } bind def

/coor [
[37.58276749 195.56074524]
[34.96226120 195.03961182]
[23.42225266 204.62231445]
[11.88224316 214.20501709]
[0.34223372 223.78771973]
[-11.19777584 233.37042236]
[-22.73778534 242.95312500]
[-27.91506195 258.51358032]
[-44.03165817 261.54464722]
[-54.50819778 248.92822266]
[-48.56732178 233.64300537]
[-32.32048798 231.41310120]
[-20.78047752 221.83041382]
[-9.24046803 212.24771118]
[2.29954123 202.66500854]
[13.83955097 193.08230591]
[25.37956047 183.49960327]
[35.73834229 172.65083313]
[44.77786255 160.68057251]
[53.81738281 148.71031189]
[62.85689926 136.74006653]
[71.89642334 124.76980591]
[80.93594360 112.79954529]
[77.10675049 101.77922821]
[79.18727875 90.29962158]
[86.64046478 81.32409668]
[97.54231262 77.16961670]
[109.07859802 78.90863037]
[119.18402863 67.82350159]
[129.28945923 56.73836517]
[139.39489746 45.65322876]
[142.97407532 30.24219513]
[157.26632690 26.04921341]
[167.37176514 14.96407890]
[177.47718811 3.87894511]
[187.58262634 -7.20618868]
[191.16180420 -22.61722374]
[205.45405579 -26.81020737]
[215.55947876 -37.89533997]
[225.66491699 -48.98047256]
[231.86737061 -64.75912476]
[248.74639893 -63.16703033]
[251.88911438 -46.50690842]
[236.75006104 -38.87503815]
[226.64462280 -27.78990555]
[216.53918457 -16.70477104]
[213.68281555 -2.08661890]
[198.66775513 2.89924598]
[188.56233215 13.98437977]
[178.45689392 25.06951332]
[168.35145569 36.15464783]
[165.49508667 50.77280045]
[150.48002625 55.75866699]
[140.37460327 66.84379578]
[130.26916504 77.92893219]
[120.16372681 89.01406860]
[121.96562958 106.69162750]
[110.61386108 120.36203766]
[92.90619659 121.83906555]
[83.86667633 133.80932617]
[74.82715607 145.77958679]
[65.78764343 157.74983215]
[56.74811935 169.72009277]
[47.70859909 181.69035339]
[47.52558899 186.35641479]
[46.01064301 190.33039856]
[43.54586411 193.27775574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[18 64]
[19 63]
[20 62]
[21 61]
[22 60]
[23 59]
[28 56]
[29 55]
[30 54]
[31 53]
[33 51]
[34 50]
[35 49]
[36 48]
[38 46]
[39 45]
[40 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
