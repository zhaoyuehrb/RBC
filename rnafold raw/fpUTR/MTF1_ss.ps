%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUGACGUUAGGGGAAGGUGGGGGCAAUCAUGGUGCCGCUGGGGAGGGGAGAAGCUGCUGCUGCCGCCGUUGCCGGGAGCCGCGGAGACAAGUCAUUACGUUUUCAUUUCUCACAACUGGGCUGAGCACAACUGAACC\
) } def
/len { sequence length } bind def

/coor [
[226.47738647 451.97146606]
[217.10081482 440.21389771]
[213.74528503 425.49108887]
[217.12858582 410.71136475]
[226.63186646 398.81814575]
[220.20916748 385.26272583]
[213.78646851 371.70733643]
[207.36376953 358.15191650]
[201.61177063 353.41668701]
[200.95263672 344.22485352]
[186.12335205 342.82565308]
[173.90420532 334.13378906]
[167.63487244 320.40200806]
[169.09016418 305.27658081]
[177.97891235 292.82919312]
[171.85766602 279.13500977]
[165.73640442 265.44085693]
[159.61515808 251.74667358]
[153.49389648 238.05250549]
[141.23638916 229.59068298]
[142.66848755 213.83442688]
[136.54722595 200.14025879]
[130.42597961 186.44609070]
[124.30472565 172.75192261]
[112.04721069 164.29008484]
[113.47930908 148.53382874]
[107.35805511 134.83966064]
[101.23680115 121.14550018]
[85.71572113 115.64036560]
[78.82930756 100.68083191]
[84.74031830 85.30973816]
[78.31761932 71.75433350]
[65.41651154 62.59616852]
[66.95909882 47.78165817]
[54.05799103 38.62348938]
[55.60057449 23.80897903]
[49.17787552 10.25357723]
[42.75517654 -3.30182481]
[36.18292236 -16.78535080]
[21.45480919 -21.85687828]
[14.82978821 -35.55226898]
[19.75547791 -49.56202316]
[13.03447628 -62.97202301]
[6.31347466 -76.38202667]
[-0.40752703 -89.79202271]
[-13.50807285 -98.66255188]
[-12.29359341 -113.50756073]
[-19.01459503 -126.91756439]
[-32.11514282 -135.78808594]
[-30.90066147 -150.63310242]
[-37.62166214 -164.04310608]
[-52.34977722 -169.11462402]
[-58.97480011 -182.81002808]
[-54.04911041 -196.81977844]
[-67.14965820 -205.69030762]
[-65.93517303 -220.53530884]
[-72.65618134 -233.94531250]
[-79.37718201 -247.35531616]
[-93.36132050 -255.92127991]
[-92.66462708 -272.30563354]
[-78.00378418 -279.65353394]
[-64.46061707 -270.40612793]
[-65.96717834 -254.07632446]
[-59.24617767 -240.66632080]
[-52.52517319 -227.25631714]
[-39.90536118 -219.34495544]
[-40.63910675 -203.54077148]
[-26.46739578 -199.10250854]
[-19.46031380 -185.59860229]
[-24.21166229 -170.76409912]
[-17.49066162 -157.35411072]
[-4.87084579 -149.44274902]
[-5.60459423 -133.63856506]
[1.11640763 -120.22856903]
[13.73622227 -112.31720734]
[13.00247383 -96.51303101]
[19.72347641 -83.10302734]
[26.44447708 -69.69302368]
[33.16547775 -56.28302383]
[47.33719254 -51.84476089]
[54.34427261 -38.34085464]
[49.59292603 -23.50635338]
[55.44827652 -18.89951324]
[56.31057739 -9.72452450]
[62.73328018 3.83087778]
[69.15597534 17.38628006]
[81.59768677 25.57487488]
[80.51449585 41.35895920]
[92.95620728 49.54755402]
[91.87301636 65.33163452]
[98.29572296 78.88703918]
[110.69735718 81.71808624]
[119.24085999 91.14274597]
[120.84490204 103.76187897]
[114.93096924 115.02424622]
[121.05222321 128.71841431]
[127.17347717 142.41258240]
[139.86883545 151.85391235]
[137.99888611 166.63066101]
[144.12014771 180.32482910]
[150.24139404 194.01899719]
[156.36265564 207.71316528]
[169.05799866 217.15449524]
[167.18806458 231.93125916]
[173.30932617 245.62542725]
[179.43057251 259.31958008]
[185.55183411 273.01376343]
[191.67308044 286.70791626]
[206.87605286 288.38638306]
[219.11683655 297.38970947]
[225.16735840 311.21929932]
[223.49441528 326.12088013]
[214.64680481 338.10360718]
[220.91917419 351.72921753]
[227.34187317 365.28463745]
[233.76457214 378.84002686]
[240.18727112 392.39544678]
[255.40994263 392.57324219]
[268.99050903 399.31530762]
[278.25915527 411.23638916]
[281.41976929 425.93914795]
[277.89785767 440.49612427]
[268.44403076 452.03262329]
[274.86672974 465.58801270]
[287.76782227 474.74618530]
[286.22525024 489.56069946]
[299.12634277 498.71887207]
[297.58377075 513.53338623]
[304.00646973 527.08880615]
[318.57116699 533.81549072]
[322.25283813 549.43041992]
[312.22720337 561.95501709]
[296.18508911 561.78161621]
[286.43261719 549.04309082]
[290.45108032 533.51147461]
[284.02838135 519.95605469]
[271.58666992 511.76748657]
[272.66986084 495.98339844]
[260.22814941 487.79479980]
[261.31134033 472.01071167]
[254.88862610 458.45532227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 117]
[6 116]
[7 115]
[8 114]
[10 113]
[15 108]
[16 107]
[17 106]
[18 105]
[19 104]
[21 102]
[22 101]
[23 100]
[24 99]
[26 97]
[27 96]
[28 95]
[31 91]
[32 90]
[34 88]
[36 86]
[37 85]
[38 84]
[39 82]
[42 79]
[43 78]
[44 77]
[45 76]
[47 74]
[48 73]
[50 71]
[51 70]
[54 67]
[56 65]
[57 64]
[58 63]
[123 141]
[124 140]
[126 138]
[128 136]
[129 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
