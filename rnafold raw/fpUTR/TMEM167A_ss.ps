%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:58:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUUGGUAGGCGGUGCCGUGACAAGCCCAACCGGACGGCUGGAGAGGGCGAGAAGGGCAGACGGGACAUGCAGCCUCUUCCGCCUGAGCCCCGGAAGGGUGAUGUGGCUGCGGCAUCGCCGGCCUCGCU\
) } def
/len { sequence length } bind def

/coor [
[106.43152618 655.42010498]
[94.98673248 645.25769043]
[89.58644104 630.93652344]
[91.47160339 615.74755859]
[100.20902252 603.18109131]
[113.79090118 596.12475586]
[113.79090118 581.12475586]
[113.79090118 566.12475586]
[106.05359650 553.39752197]
[113.79090118 539.59735107]
[113.79090118 524.59735107]
[113.79090118 509.59735107]
[113.79090118 494.59735107]
[113.79090118 479.59735107]
[113.79090118 464.59735107]
[113.79090118 449.59735107]
[113.79090118 434.59735107]
[113.79090118 419.59735107]
[113.79090118 404.59735107]
[113.79090118 389.59735107]
[113.79090118 374.59735107]
[113.25142670 359.60705566]
[112.17318726 344.64584351]
[111.09494019 329.68466187]
[100.47067261 315.77050781]
[108.51290131 299.25662231]
[107.07621002 284.32559204]
[105.63951111 269.39456177]
[104.20281982 254.46351624]
[92.58283234 245.21627808]
[90.91312408 230.09454346]
[100.69126892 217.96913147]
[99.25457764 203.03808594]
[97.81788635 188.10705566]
[96.38119507 173.17601013]
[93.25392151 169.44709778]
[92.50231934 163.68716431]
[95.25123596 157.49729919]
[94.53206635 142.51455688]
[93.81289673 127.53179932]
[93.09371948 112.54904938]
[85.69252777 100.68675995]
[91.92353058 88.17012024]
[89.29964447 84.42695618]
[88.18208313 80.44123840]
[88.45367432 76.73654938]
[89.83315277 73.73926544]
[91.92353058 71.73177338]
[92.64270020 56.74902725]
[93.36187744 41.76627731]
[94.08104706 26.78352547]
[91.34649658 17.96136284]
[95.00137329 11.45140743]
[96.07962036 -3.50978875]
[97.15785980 -18.47098541]
[98.23609924 -33.43218231]
[99.13487244 -48.40523148]
[99.85404968 -63.38798141]
[100.57321930 -78.37072754]
[93.50646210 -92.52599335]
[101.84507751 -104.86766815]
[99.11051941 -113.68983459]
[102.76539612 -120.19978333]
[103.84364319 -135.16098022]
[94.47372437 -148.18342590]
[98.95157623 -163.58889771]
[113.84217834 -169.55963135]
[127.72273254 -161.51538086]
[129.94526672 -145.62702942]
[118.80484009 -134.08273315]
[117.72659302 -119.12154388]
[116.82782745 -104.14849091]
[123.94602203 -91.06489563]
[115.55596924 -77.65155792]
[114.83679962 -62.66880798]
[114.11762238 -47.68605804]
[116.96753693 -40.78564835]
[113.19729614 -32.35393906]
[112.11905670 -17.39274216]
[111.04080963 -2.43154645]
[109.96257019 12.52964973]
[109.06379700 27.50269890]
[108.34462738 42.48545074]
[107.62545013 57.46819687]
[106.90628052 72.45095062]
[106.90628052 87.45095062]
[114.30747223 99.31324005]
[108.07646942 111.82987976]
[108.79563904 126.81262970]
[109.51481628 141.79537964]
[110.23398590 156.77812195]
[111.31223297 171.73931885]
[112.74892426 186.67036438]
[114.18561554 201.60139465]
[115.62230682 216.53244019]
[127.53309631 226.57090759]
[128.77740479 241.73356628]
[119.13386536 253.02682495]
[120.57055664 267.95785522]
[122.00724792 282.88891602]
[123.44393921 297.81994629]
[132.91952515 306.66604614]
[133.75885010 319.19882202]
[126.05613708 328.60641479]
[127.13438416 343.56759644]
[128.21261597 358.52880859]
[131.26367188 363.00888062]
[132.13279724 367.73641968]
[131.10563660 371.81378174]
[128.79089355 374.59735107]
[128.79089355 389.59735107]
[128.79089355 404.59735107]
[128.79089355 419.59735107]
[128.79089355 434.59735107]
[128.79089355 449.59735107]
[128.79089355 464.59735107]
[128.79089355 479.59735107]
[128.79089355 494.59735107]
[128.79089355 509.59735107]
[128.79089355 524.59735107]
[128.79089355 539.59735107]
[136.52819824 553.39752197]
[128.79089355 566.12475586]
[128.79089355 581.12475586]
[128.79089355 596.12475586]
[142.37277222 603.18109131]
[151.11019897 615.74755859]
[152.99534607 630.93652344]
[147.59506226 645.25769043]
[136.15026855 655.42010498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 125]
[7 124]
[8 123]
[10 121]
[11 120]
[12 119]
[13 118]
[14 117]
[15 116]
[16 115]
[17 114]
[18 113]
[19 112]
[20 111]
[21 110]
[22 106]
[23 105]
[24 104]
[26 101]
[27 100]
[28 99]
[29 98]
[32 95]
[33 94]
[34 93]
[35 92]
[38 91]
[39 90]
[40 89]
[41 88]
[43 86]
[48 85]
[49 84]
[50 83]
[51 82]
[53 81]
[54 80]
[55 79]
[56 78]
[57 76]
[58 75]
[59 74]
[61 72]
[63 71]
[64 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
