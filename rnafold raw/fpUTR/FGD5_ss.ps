%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:32:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAACCACCUGUCGCUCCCAAGCCAAAGACUACCAGUCCACUGACGCCAGUGACCGCGCCCAAAUUCCCUUCCUCAGCCAGGCCCGAGAGUCUUCACAGUCCAAACUCC\
) } def
/len { sequence length } bind def

/coor [
[104.13982391 453.22201538]
[91.20765686 445.41586304]
[80.99959564 434.28158569]
[74.34317017 420.72177124]
[71.77796936 405.83566284]
[73.51194763 390.82998657]
[79.40454865 376.92123413]
[88.97808075 365.23687744]
[101.45645142 356.72412109]
[115.82810974 352.07308960]
[115.40362549 337.07910156]
[114.97914886 322.08511353]
[114.55466461 307.09109497]
[102.09057617 290.74414062]
[111.99050903 271.85046387]
[110.29597473 256.94647217]
[108.60144043 242.04249573]
[106.90690613 227.13851929]
[97.78135681 215.36679077]
[103.91013336 200.78088379]
[92.13205719 191.73587036]
[90.20124817 176.64524841]
[99.76836395 164.35264587]
[98.07382965 149.44866943]
[96.37929535 134.54469299]
[82.32510376 131.67446899]
[70.06685638 123.10068512]
[61.90112686 109.83890533]
[59.58322144 93.81626892]
[45.51218796 88.61952972]
[31.44115448 83.42279816]
[17.37012291 78.22605896]
[0.41717818 78.41049194]
[-4.45308828 62.17113495]
[9.80340862 52.99569702]
[22.56685638 64.15502930]
[36.63788986 69.35176086]
[50.70892334 74.54850006]
[64.77995300 79.74523163]
[74.52973938 68.34603882]
[67.21431732 55.25082779]
[59.89889526 42.15561676]
[52.58346939 29.06040382]
[45.26804733 15.96519279]
[30.91394234 8.03475952]
[30.87542152 -8.36434269]
[45.19210815 -16.36212349]
[59.13622284 -7.73115206]
[58.36325836 8.64976883]
[65.67868042 21.74497986]
[72.99410248 34.84019089]
[80.30953217 47.93540192]
[87.62495422 61.03061676]
[95.75335693 60.88102341]
[103.44425964 62.34669113]
[110.39199066 65.24830627]
[116.34436798 69.35188293]
[126.09416199 57.95269394]
[117.99986267 45.18657303]
[114.02965546 30.60134697]
[114.53657532 15.49391556]
[119.47554016 1.20762670]
[128.40737915 -10.98719501]
[140.53787231 -20.00619316]
[154.78840637 -25.04740524]
[169.89181519 -25.66256905]
[184.50512695 -21.79698563]
[197.32891846 -13.79437923]
[207.22291565 -2.36633778]
[213.30735779 11.47096634]
[215.04121399 26.48712921]
[212.27030945 41.34692383]
[205.24102783 54.72902679]
[194.57843018 65.44351196]
[181.23059082 72.53765869]
[166.38442993 75.38064575]
[151.36003113 73.71968842]
[137.49334717 67.70248413]
[127.74356079 79.10167694]
[134.72885132 99.40684509]
[128.44104004 119.93871307]
[111.28327179 132.85015869]
[112.97780609 147.75413513]
[114.67234039 162.65811157]
[126.75485229 172.48922729]
[128.26103210 187.62811279]
[118.81410980 199.08636475]
[128.06086731 211.92411804]
[121.81089020 225.44398499]
[123.50541687 240.34796143]
[125.19995117 255.25193787]
[126.89448547 270.15591431]
[135.20991516 275.13104248]
[140.15350342 283.30316162]
[140.68443298 292.70016479]
[136.80894470 301.12442017]
[129.54866028 306.66662598]
[129.97314453 321.66061401]
[130.39761353 336.65460205]
[130.82209778 351.64859009]
[145.43386841 355.47912598]
[158.37387085 363.27224731]
[168.59310913 374.39627075]
[175.26316833 387.94940186]
[177.84330750 402.83294678]
[176.12440491 417.84033203]
[170.24578857 431.75500488]
[160.68399048 443.44897461]
[148.21417236 451.97427368]
[133.84719849 456.63973999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 100]
[11 99]
[12 98]
[13 97]
[15 92]
[16 91]
[17 90]
[18 89]
[20 87]
[23 84]
[24 83]
[25 82]
[29 39]
[30 38]
[31 37]
[32 36]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[57 79]
[58 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
