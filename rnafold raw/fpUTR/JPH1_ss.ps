%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:38:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUACACCCUGCCGUGCCCAGCACUGCCCGCGUCCGUGCCCCUGCGGGGAGCGCGCCGGGGCUGCCCCCCGA\
) } def
/len { sequence length } bind def

/coor [
[102.74799347 176.49757385]
[94.89075470 189.27505493]
[82.84987640 198.22029114]
[68.34795380 202.05358887]
[53.45963669 200.22653198]
[40.31487656 193.00053406]
[30.79417038 181.40931702]
[26.25956726 167.11116028]
[27.35979080 152.15156555]
[33.93744278 138.67066956]
[45.05151367 128.59706116]
[59.11201477 123.37190247]
[74.10916138 123.74307251]
[59.37485504 120.93235016]
[44.36929703 125.94670868]
[33.31728363 115.96160126]
[18.58297729 113.15088654]
[3.84866786 110.34016418]
[-10.88564110 107.52944946]
[-27.57719040 110.50073242]
[-35.05303574 95.28402710]
[-22.50052834 83.88793945]
[-8.07492161 92.79513550]
[6.65938759 95.60585785]
[21.39369583 98.41658020]
[36.12800598 101.22729492]
[50.07966614 96.01189423]
[62.18557358 106.19804382]
[76.91988373 109.00876617]
[82.82299042 86.42327881]
[102.63555145 81.17018127]
[110.40595245 68.33971405]
[118.17636108 55.50925064]
[125.94676208 42.67878723]
[133.44676208 29.68840790]
[140.67306519 16.54380798]
[147.89936829 3.39920688]
[147.76741028 -12.42144871]
[160.67906189 -19.84696960]
[167.90538025 -32.99156952]
[175.13168335 -46.13616943]
[174.24746704 -62.51146317]
[188.13262939 -71.23695374]
[202.50331116 -63.33660126]
[202.57618713 -46.93761444]
[188.27627563 -38.90986633]
[181.04997253 -25.76526451]
[173.82366943 -12.62066460]
[174.47250366 2.25980163]
[161.04397583 10.62551212]
[153.81767273 23.77011299]
[146.59136963 36.91471100]
[146.11604309 44.51516724]
[138.77723694 50.44919205]
[131.00682068 63.27965927]
[123.23641968 76.11012268]
[115.46601105 88.94058228]
[120.34629059 108.08736420]
[104.76059723 124.31432343]
[115.02880096 135.24885559]
[125.29700470 146.18338013]
[135.56521606 157.11790466]
[145.83341980 168.05244446]
[161.75886536 169.99150085]
[170.04916382 183.72650146]
[164.34472656 198.72113037]
[149.02149963 203.47279358]
[135.83415222 194.33641052]
[134.89889526 178.32064819]
[124.63068390 167.38612366]
[114.36248016 156.45158386]
[104.09426880 145.51705933]
[93.82606506 134.58253479]
[102.17463684 147.04452515]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 29]
[14 28]
[16 26]
[17 25]
[18 24]
[19 23]
[31 57]
[32 56]
[33 55]
[34 54]
[35 52]
[36 51]
[37 50]
[39 48]
[40 47]
[41 46]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
