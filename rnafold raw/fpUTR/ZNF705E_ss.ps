%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:50:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUCUUAGUGCCUAAAGUGUCUGCAAGUGGAAAUCCAGAGGAAGACAGAGAGAAACUGAGUUCCUGACA\
) } def
/len { sequence length } bind def

/coor [
[100.16854858 313.79495239]
[93.55540466 300.13366699]
[92.32775116 285.00564575]
[96.65161896 270.45681763]
[105.94224548 258.45477295]
[118.94315338 250.62272644]
[116.33843231 235.85061646]
[113.73370361 221.07849121]
[111.12898254 206.30638123]
[108.52426147 191.53427124]
[105.91954041 176.76214600]
[93.60928345 168.45593262]
[90.75729370 153.51200867]
[99.55308533 140.65620422]
[96.94836426 125.88408661]
[84.48436737 120.94190979]
[76.12657928 110.45745087]
[74.08689880 97.20542908]
[78.90512085 84.69299316]
[89.30610657 76.23155212]
[87.34821320 61.35987854]
[85.39031982 46.48820877]
[83.43242645 31.61653328]
[81.47453308 16.74486160]
[67.03932953 11.90893841]
[56.17951202 1.32823086]
[51.01168823 -12.86027813]
[52.51053619 -27.82404900]
[60.32547379 -40.60044098]
[72.86075592 -48.68326950]
[70.90286255 -63.55494308]
[68.94497681 -78.42662048]
[58.53796768 -91.10045624]
[64.56281281 -106.35278320]
[80.82166290 -108.49330139]
[90.58880615 -95.32003021]
[83.81664276 -80.38450623]
[85.77453613 -65.51284027]
[87.73242950 -50.64116287]
[101.93257904 -46.07812119]
[112.78800201 -35.75972748]
[118.10868835 -21.69376564]
[116.78920746 -6.65118694]
[109.03791809 6.37971878]
[96.34620667 14.78696823]
[98.30410004 29.65864182]
[100.26199341 44.53031540]
[102.21988678 59.40198898]
[104.17778015 74.27365875]
[118.50563812 81.64680481]
[125.76001740 96.03515625]
[123.16805267 111.93900299]
[111.72048187 123.27936554]
[114.32520294 138.05148315]
[126.98748779 147.12364197]
[129.41860962 162.14178467]
[120.69165802 174.15742493]
[123.29637909 188.92955017]
[125.90110016 203.70166016]
[128.50582886 218.47377014]
[131.11054993 233.24589539]
[133.71527100 248.01800537]
[148.61083984 250.93115234]
[161.44610596 259.03179932]
[170.48521423 271.22436523]
[174.50569153 285.85995483]
[172.96379089 300.95919800]
[166.06806946 314.48004150]
[154.75108337 324.59390259]
[140.54339600 329.93298340]
[125.36644745 329.77520752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[11 57]
[14 54]
[15 53]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[30 39]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
