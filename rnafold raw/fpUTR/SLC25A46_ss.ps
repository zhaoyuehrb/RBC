%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:45:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUUCCGGGUUUCCAACGUGACUUCCGGUUGUCAGAAUUUACCCCUGACGCGGCGGCGGCCGACGGGAAGCUGUGUGUGCUUAGGUCGUGGUGGCCCCGGUGGUGGUGGGCUCCGGGCGGGCUCGCGUCAUCCUGCCCCCGCUGCG\
) } def
/len { sequence length } bind def

/coor [
[98.74185181 114.77863312]
[95.22988892 114.34730530]
[84.67934418 125.00966644]
[74.12879944 135.67202759]
[74.04221344 151.24862671]
[63.19056702 161.91148376]
[48.34119797 161.73294067]
[37.79065323 172.39529419]
[27.24010658 183.05766296]
[16.68956184 193.72003174]
[6.13901567 204.38238525]
[6.05242491 219.95898438]
[-4.79921865 230.62184143]
[-19.64858627 230.44329834]
[-30.19913101 241.10565186]
[-29.86520767 256.90640259]
[-40.86207199 268.25738525]
[-56.66547775 268.42422485]
[-67.89955139 257.30798340]
[-67.89930725 241.50369263]
[-56.66489792 230.38777161]
[-40.86149597 230.55511475]
[-30.31094933 219.89274597]
[-30.64602661 205.04608154]
[-20.09816170 194.08264160]
[-4.52334738 193.83184814]
[6.02719879 183.16947937]
[16.57774544 172.50711060]
[27.12829018 161.84475708]
[37.67883682 151.18238831]
[37.34375763 136.33572388]
[47.89162445 125.37228394]
[63.46643829 125.12148285]
[74.01698303 114.45912170]
[84.56752777 103.79676056]
[73.33094788 113.73352051]
[59.52678299 119.60251617]
[44.57467270 120.80017090]
[30.01229668 117.20333099]
[17.33726311 109.18189240]
[7.85307741 97.56078339]
[2.53509951 83.53512573]
[1.93023396 68.54732513]
[6.10068512 54.13874054]
[14.61756134 41.79115677]
[26.60498238 32.77440643]
[40.83015442 28.01578331]
[55.83015060 28.00466156]
[70.06236267 32.74218750]
[82.06314087 41.74114990]
[90.59831238 54.07609177]
[94.79013062 68.47847748]
[94.20761871 83.46652222]
[95.78602600 68.54979706]
[97.36444092 53.63307190]
[95.14560699 44.70075989]
[99.13661194 38.41968155]
[101.02915955 23.53955078]
[102.92170715 8.65942192]
[96.98740387 -6.00668287]
[106.26866913 -17.65603256]
[108.16122437 -32.53616333]
[110.05377197 -47.41629028]
[108.02375031 -56.39339828]
[112.14628601 -62.58893967]
[114.35213470 -77.42585754]
[116.55797577 -92.26277924]
[118.76382446 -107.09970093]
[110.47908783 -125.42808533]
[122.99817657 -140.11251831]
[124.57658386 -155.02923584]
[126.15499878 -169.94595337]
[127.73340607 -184.86268616]
[116.74902344 -195.99270630]
[115.54027557 -211.58349609]
[124.67788696 -224.27357483]
[139.84736633 -228.07106018]
[153.88613892 -221.18290710]
[160.16554260 -206.86148071]
[155.72061157 -191.86892700]
[142.65013123 -183.28427124]
[141.07171631 -168.36755371]
[139.49330139 -153.45082092]
[137.91490173 -138.53410339]
[145.07775879 -131.13125610]
[146.98751831 -120.78471375]
[142.76651001 -110.90705109]
[133.60073853 -104.89385986]
[131.39489746 -90.05693817]
[129.18905640 -75.22001648]
[126.98320770 -60.38309479]
[124.93389893 -45.52374268]
[123.04135132 -30.64361382]
[121.14880371 -15.76348305]
[127.21846771 -2.16170502]
[117.80183411 10.55197048]
[115.90928650 25.43210030]
[114.01673889 40.31222916]
[112.28115845 55.21148300]
[110.70275116 70.12820435]
[109.12433624 85.04492950]
[115.83538055 98.45991516]
[128.71905518 106.14176941]
[141.60273743 113.82361603]
[154.48641968 121.50547028]
[167.37010193 129.18731689]
[180.25378418 136.86917114]
[193.13745117 144.55102539]
[202.17774963 146.27798462]
[206.20935059 152.53308105]
[218.92820740 160.48484802]
[231.64707947 168.43661499]
[244.36593628 176.38838196]
[258.85275269 168.48507690]
[275.25515747 168.94335938]
[289.11889648 177.54450989]
[296.72668457 191.87132263]
[296.09454346 207.98674011]
[308.97821045 215.66859436]
[321.86190796 223.35044861]
[334.74557495 231.03228760]
[350.00393677 226.91432190]
[363.66323853 234.86410522]
[367.61965942 250.16516113]
[359.52590942 263.73965454]
[344.18389893 267.53408813]
[330.69573975 259.29727173]
[327.06372070 243.91596985]
[314.18005371 236.23411560]
[301.29635620 228.55227661]
[288.41268921 220.87042236]
[276.92166138 228.31756592]
[263.27563477 230.08126831]
[250.14285278 225.75894165]
[240.11601257 216.14367676]
[235.20068359 203.07936096]
[236.41416931 189.10725403]
[223.69529724 181.15548706]
[210.97644043 173.20370483]
[198.25758362 165.25193787]
[185.45561218 157.43469238]
[172.57192993 149.75285339]
[159.68824768 142.07099915]
[146.80456543 134.38914490]
[133.92089844 126.70729828]
[121.03720856 119.02544403]
[108.15353394 111.34359741]
[105.38310242 113.20197296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[14 23]
[15 22]
[53 101]
[54 100]
[55 99]
[57 98]
[58 97]
[59 96]
[61 94]
[62 93]
[63 92]
[65 91]
[66 90]
[67 89]
[68 88]
[70 84]
[71 83]
[72 82]
[73 81]
[102 147]
[103 146]
[104 145]
[105 144]
[106 143]
[107 142]
[108 141]
[110 140]
[111 139]
[112 138]
[113 137]
[118 131]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
