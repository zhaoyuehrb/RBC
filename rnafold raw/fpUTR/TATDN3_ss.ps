%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:24:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUGCAUCCGGCUGGAAACUCAGGACGCUGCAGCUGAAACGUUCCGGCUCCGGCUCUGCUGGCCGGUCUAAAGCGGCAGCCGCCGGGGCGCA\
) } def
/len { sequence length } bind def

/coor [
[78.59384155 114.84124756]
[64.32799530 119.47650146]
[50.06214905 124.11175537]
[42.69385910 129.84875488]
[35.24740219 128.65596008]
[20.83609581 132.81701660]
[6.42478991 136.97805786]
[-7.98651505 141.13909912]
[-14.98300838 152.12861633]
[-27.22189903 155.22360229]
[-37.89596176 149.27305603]
[-52.43696594 152.95533752]
[-65.20896912 166.09124756]
[-81.88346863 160.90119934]
[-96.29476929 165.06224060]
[-110.70607758 169.22329712]
[-125.11738586 173.38433838]
[-136.09138489 185.57052612]
[-152.07348633 181.89564514]
[-156.62265015 166.14010620]
[-145.05911255 154.51185608]
[-129.27842712 158.97302246]
[-114.86711884 154.81198120]
[-100.45581818 150.65093994]
[-86.04450989 146.48989868]
[-79.83369446 135.96514893]
[-67.70614624 132.45915222]
[-56.11924744 138.41432190]
[-41.57824326 134.73204041]
[-29.80362892 121.83499908]
[-12.14755917 126.72779083]
[2.26374650 122.56674957]
[16.67505074 118.40570831]
[31.08635712 114.24465942]
[45.42689514 109.84590912]
[59.69274139 105.21065521]
[73.95858765 100.57540131]
[77.09133148 87.60326385]
[86.23719025 77.88504791]
[98.99553680 73.97160339]
[112.01753998 76.89015961]
[121.88515472 85.87462616]
[136.29646301 81.71358490]
[150.70776367 77.55253601]
[165.11906433 73.39149475]
[179.53038025 69.23045349]
[193.94168091 65.06940460]
[208.35298157 60.90836334]
[222.76429749 56.74731827]
[237.17559814 52.58627701]
[241.05828857 48.51505280]
[245.67883301 46.67125702]
[250.00646973 46.94309616]
[253.22332764 48.80364609]
[267.97589111 46.09043884]
[282.72848511 43.37723160]
[297.48104858 40.66402435]
[312.18676758 37.70726776]
[326.84155273 34.50777435]
[341.49636841 31.30827904]
[356.15115356 28.10878372]
[370.80596924 24.90929031]
[374.80285645 10.13487053]
[385.21643066 -1.08189356]
[399.65374756 -6.16347218]
[414.79721069 -3.94215631]
[427.16696167 5.07161236]
[433.92050171 18.80653572]
[433.50595093 34.10643005]
[426.01855469 47.45549011]
[413.17886353 55.78619766]
[397.93734741 57.18422318]
[383.79635620 51.32830429]
[374.00546265 39.56409073]
[359.35064697 42.76358795]
[344.69586182 45.96308136]
[330.04104614 49.16257477]
[315.38626099 52.36206818]
[309.40499878 56.95522308]
[300.19427490 55.41659927]
[285.44168091 58.12980652]
[270.68911743 60.84301376]
[255.93653870 63.55622101]
[241.33663940 66.99758148]
[226.92533875 71.15862274]
[212.51402283 75.31967163]
[198.10272217 79.48071289]
[183.69142151 83.64175415]
[169.28012085 87.80280304]
[154.86880493 91.96384430]
[140.45750427 96.12488556]
[126.04619598 100.28593445]
[120.86048889 115.59891510]
[107.63851166 124.90259552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[5 34]
[6 33]
[7 32]
[8 31]
[11 29]
[12 28]
[14 25]
[15 24]
[16 23]
[17 22]
[42 92]
[43 91]
[44 90]
[45 89]
[46 88]
[47 87]
[48 86]
[49 85]
[50 84]
[54 83]
[55 82]
[56 81]
[57 80]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
