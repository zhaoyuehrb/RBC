%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCUGAGGCCUCUGCCUAAAGACAAAGCCUGUGCUGGGGUGUGCAGGAUAUAAGGUUGGACUUCCAGACCCACUGCCCGGGAGAGGAGAGGAGCGGGCCGAGGACUCCAGCGUGCCCAGGUCUGGCAUCCUGCACUUGCUGCCCUCUGACACCUGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[-56.17065811 132.29771423]
[-70.94277191 134.90243530]
[-85.71488953 137.50715637]
[-100.48700714 140.11187744]
[-115.25912476 142.71659851]
[-130.03123474 145.32131958]
[-144.77740479 148.06915283]
[-159.49623108 150.95983887]
[-174.21505737 153.85052490]
[-188.90518188 156.88378906]
[-203.56518555 160.05934143]
[-208.95025635 169.58094788]
[-218.50328064 174.44210815]
[-228.93284607 173.24067688]
[-236.79336548 166.61824036]
[-251.56547546 169.22297668]
[-266.33758545 171.82769775]
[-281.10971069 174.43241882]
[-282.64608765 185.62263489]
[-287.02700806 196.01669312]
[-293.94494629 204.90596008]
[-302.91979980 211.68664551]
[-313.33209229 215.90086365]
[-324.46566772 217.26751709]
[-335.55712891 215.70106506]
[-345.84805298 211.31678772]
[-354.63687134 204.42239380]
[-361.32672119 195.49638367]
[-365.46591187 185.15487671]
[-380.42080688 186.31726074]
[-395.37570190 187.47964478]
[-410.33059692 188.64204407]
[-425.28549194 189.80442810]
[-440.24038696 190.96681213]
[-455.19528198 192.12919617]
[-465.27929688 204.29837036]
[-481.02221680 205.68959045]
[-493.08407593 195.47750854]
[-494.30880737 179.72073364]
[-483.96975708 167.76751709]
[-468.20092773 166.70945740]
[-456.35766602 177.17430115]
[-441.40277100 176.01191711]
[-426.44787598 174.84953308]
[-411.49298096 173.68714905]
[-396.53808594 172.52476501]
[-381.58319092 171.36236572]
[-366.62829590 170.19998169]
[-360.69326782 152.19731140]
[-347.50079346 138.51789856]
[-329.63366699 131.90072632]
[-310.61648560 133.69616699]
[-294.22018433 143.59062195]
[-283.71441650 159.66029358]
[-268.94232178 157.05557251]
[-254.17019653 154.45085144]
[-239.39808655 151.84613037]
[-225.59167480 138.34931946]
[-206.74073792 145.39933777]
[-192.08073425 142.22378540]
[-186.18019104 137.71205139]
[-177.10574341 139.13169861]
[-162.38691711 136.24101257]
[-147.66809082 133.35032654]
[-141.68116760 128.95387268]
[-132.63595581 130.54920959]
[-117.86384583 127.94448853]
[-103.09172821 125.33976746]
[-88.31961060 122.73503876]
[-73.54750061 120.13031769]
[-58.77537918 117.52559662]
[-51.55727386 107.78024292]
[-39.23538208 105.51251221]
[-28.34375572 112.48142242]
[-13.52390862 110.16364288]
[-2.14505172 100.55266571]
[12.68493652 106.06465912]
[27.50478363 103.74687195]
[42.32463074 101.42909241]
[57.14448166 99.11131287]
[71.96432495 96.79352570]
[86.78417206 94.47574615]
[97.78668213 85.84809113]
[110.89804077 90.70440674]
[124.92784882 78.81288910]
[141.04272461 85.70796967]
[155.81483459 83.10324097]
[170.58695984 80.49851990]
[185.35906982 77.89379883]
[193.31315613 73.30102539]
[200.44268799 75.38469696]
[215.26254272 73.06691742]
[230.05921936 70.60555267]
[244.83132935 68.00082397]
[259.60345459 65.39610291]
[274.37557983 62.79138184]
[289.14767456 60.18666077]
[303.91979980 57.58193588]
[310.79071045 43.79437637]
[324.30471802 36.77835083]
[339.18276978 39.03845215]
[349.75057983 49.50073624]
[364.52270508 46.89601135]
[379.29479980 44.29129028]
[394.06692505 41.68656540]
[403.13909912 29.02427864]
[418.15722656 26.59315491]
[430.17288208 35.32011414]
[444.94497681 32.71538925]
[459.71710205 30.11066818]
[474.48922729 27.50594521]
[489.23538208 24.75811386]
[495.64349365 10.62603092]
[509.15100098 2.98881817]
[524.56396484 4.78313828]
[535.95581055 15.31903934]
[538.94616699 30.54525185]
[532.38513184 44.60698700]
[518.79559326 52.09722137]
[503.40295410 50.13580322]
[492.12606812 39.47694397]
[486.13916016 43.87340546]
[477.09393311 42.27806091]
[462.32183838 44.88278580]
[447.54971313 47.48750687]
[432.77758789 50.09223175]
[424.47137451 62.40248108]
[409.52746582 65.25447845]
[396.67163086 56.45868301]
[381.89953613 59.06340408]
[367.12741089 61.66812897]
[352.35528564 64.27285004]
[346.00311279 77.71858215]
[332.79531860 84.93097687]
[317.69668579 82.96013641]
[306.52453613 72.35404968]
[291.75241089 74.95877838]
[276.98028564 77.56349945]
[262.20816040 80.16822052]
[247.43605042 82.77294159]
[232.66394043 85.37766266]
[226.59289551 89.65720367]
[217.58032227 87.88676453]
[202.76046753 90.20454407]
[187.96379089 92.66591644]
[173.19168091 95.27063751]
[158.41957092 97.87535858]
[143.64744568 100.48007965]
[136.42933655 110.22544098]
[124.10744476 112.49316406]
[113.21582794 105.52425385]
[102.21331787 114.15190887]
[89.10195923 109.29559326]
[74.28211212 111.61337280]
[59.46226120 113.93115997]
[44.64241409 116.24893951]
[29.82256699 118.56671906]
[15.00271893 120.88450623]
[2.56384683 130.66127014]
[-11.20612717 124.98348999]
[-26.02597427 127.30127716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[7 64]
[8 63]
[9 62]
[10 60]
[11 59]
[15 57]
[16 56]
[17 55]
[18 54]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[74 161]
[75 160]
[77 158]
[78 157]
[79 156]
[80 155]
[81 154]
[82 153]
[84 151]
[86 148]
[87 147]
[88 146]
[89 145]
[91 144]
[92 143]
[93 141]
[94 140]
[95 139]
[96 138]
[97 137]
[98 136]
[102 132]
[103 131]
[104 130]
[105 129]
[108 126]
[109 125]
[110 124]
[111 123]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
