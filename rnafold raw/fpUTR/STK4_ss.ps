%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGAAAGCGGAAGUGUGGGAGGGUCUGCGGGGCGGGCUCAGGAGGUCCGCGGGAGGAUGGAGCAGUGAGCGGGUCUGGGCGGCUGCUGGCAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[27.87026215 324.94955444]
[25.14277649 328.28936768]
[21.77634048 329.82122803]
[15.38965130 343.39364624]
[19.44930649 358.91455078]
[9.73068810 371.67886353]
[-6.31091022 371.89492798]
[-16.36974907 359.39694214]
[-12.72954559 343.77233887]
[1.81724501 337.00695801]
[8.20393467 323.43453979]
[13.94418621 309.57635498]
[19.02525520 295.46313477]
[10.51438141 283.26873779]
[10.81964111 268.22311401]
[20.03350258 256.10049438]
[34.78936768 251.67662048]
[39.87043762 237.56341553]
[44.95150757 223.45019531]
[41.98283768 208.85444641]
[53.93735886 198.49104309]
[59.01842499 184.37782288]
[54.13737488 173.18653870]
[58.39558411 161.31443787]
[69.99520111 155.40992737]
[75.51707458 141.46327209]
[81.03894043 127.51663208]
[86.56080627 113.56998444]
[80.90280151 100.23081970]
[86.23674774 86.75880432]
[99.49254608 80.90814972]
[97.37876892 65.22878265]
[109.25794983 56.24355698]
[114.77981567 42.29690933]
[120.30168152 28.35026169]
[125.82355499 14.40361404]
[119.79242706 0.04174378]
[125.59106445 -14.02347851]
[139.32008362 -19.68472481]
[144.84194946 -33.63137054]
[150.36381531 -47.57801819]
[155.88568115 -61.52466583]
[161.40754700 -75.47131348]
[154.63534546 -87.23851776]
[155.91694641 -100.55812073]
[164.55236816 -110.52230072]
[177.17422485 -113.59172058]
[175.55400085 -129.32974243]
[187.70954895 -137.93740845]
[193.66676331 -151.70372009]
[199.62397766 -165.47004700]
[205.58120728 -179.23635864]
[211.32145691 -193.09455872]
[206.29524231 -208.32994080]
[215.19320679 -221.67930603]
[231.18959045 -222.90219116]
[242.01332092 -211.06047058]
[239.36138916 -195.23812866]
[225.26809692 -187.57269287]
[225.74111938 -180.05998230]
[219.34751892 -173.27914429]
[213.39030457 -159.51283264]
[207.43309021 -145.74650574]
[201.47586060 -131.98019409]
[203.52220154 -117.22682190]
[190.94055176 -107.63449860]
[197.80952454 -92.37329102]
[191.47207642 -76.52208710]
[175.35420227 -69.94944763]
[169.83233643 -56.00279999]
[164.31047058 -42.05615234]
[158.78858948 -28.10950470]
[153.26672363 -14.16285706]
[159.39935303 -0.63782769]
[153.99807739 13.58471680]
[139.77020264 19.92548180]
[134.24833679 33.87213135]
[128.72645569 47.81877518]
[123.20459747 61.76542282]
[125.71333313 76.44723511]
[113.43919373 86.43001556]
[119.09719849 99.76918030]
[113.76325226 113.24119568]
[100.50745392 119.09185028]
[94.98558807 133.03849792]
[89.46372223 146.98513794]
[83.94184875 160.93179321]
[87.11543274 178.98495483]
[73.13163757 189.45889282]
[68.05056763 203.57211304]
[70.65580750 219.17733765]
[59.06471634 228.53126526]
[53.98365021 242.64448547]
[48.90258026 256.75769043]
[57.45228958 269.57208252]
[56.82443619 284.78585815]
[47.46920013 296.57330322]
[33.13846588 300.54418945]
[28.05739784 314.65740967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[12 99]
[13 98]
[17 94]
[18 93]
[19 92]
[21 90]
[22 89]
[25 87]
[26 86]
[27 85]
[28 84]
[31 81]
[33 79]
[34 78]
[35 77]
[36 76]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[47 66]
[49 64]
[50 63]
[51 62]
[52 61]
[53 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
