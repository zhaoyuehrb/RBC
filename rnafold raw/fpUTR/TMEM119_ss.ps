%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGGGAGGAGGGACGGGAGGAGGGAGGGCGGGCAGGCGCCAGCCCAGAGCAGCCCCGGGCACCAGCACGGACUCUCUCUUCCAGCCCAGGUGCCCCCCACUCUCGCUCCAUUCGGCGGGAGCACCCAGUCCUGUACGCCAAGGAACUGGUCCUGGGGGCACC\
) } def
/len { sequence length } bind def

/coor [
[333.80035400 210.72338867]
[331.20581055 225.49729919]
[322.26412964 237.54080200]
[308.87255859 244.29846191]
[293.87258911 244.33638000]
[280.44702148 237.64654541]
[271.44454956 225.64840698]
[268.77532959 210.88780212]
[273.00576782 196.49671936]
[283.23818970 185.52871704]
[297.30130005 180.31105042]
[283.08966064 175.51214600]
[268.87802124 170.71322632]
[261.50024414 171.55661011]
[254.44166565 165.68389893]
[239.84819031 168.66374207]
[229.47563171 156.71716309]
[215.35852051 151.64691162]
[201.24142456 146.57666016]
[187.12432861 141.50640869]
[173.00721741 136.43615723]
[158.89012146 131.36590576]
[144.77302551 126.29564667]
[130.65592957 121.22539520]
[116.53881836 116.15514374]
[102.42172241 111.08489227]
[87.47741699 109.79345703]
[72.69979095 112.36672974]
[57.92216492 114.94001007]
[43.14453888 117.51328278]
[30.87629700 127.50331879]
[17.01035881 122.06410980]
[2.23273230 124.63738251]
[-12.54489422 127.21066284]
[-24.77600670 138.13458252]
[-40.26517868 132.74778748]
[-43.07847977 116.59175110]
[-30.32182693 106.28642273]
[-15.11816978 112.43302917]
[-0.34054285 109.85975647]
[14.43708420 107.28648376]
[25.64832878 97.48049927]
[40.57126236 102.73565674]
[55.34888840 100.16237640]
[70.12651825 97.58910370]
[84.90414429 95.01583099]
[87.43927002 87.95728302]
[73.23698425 83.13076782]
[59.03470612 78.30426025]
[44.06221771 77.39620209]
[40.01000595 62.95391464]
[52.32474136 54.38961029]
[64.45404816 63.21519089]
[78.48178864 68.52768707]
[92.50952148 73.84017944]
[95.04464722 66.78163147]
[85.28109741 55.39422226]
[75.51754761 44.00681305]
[60.66110992 38.56650543]
[58.25073624 23.86822701]
[48.48718643 12.48081875]
[32.84699249 7.54965210]
[29.56206131 -8.51712227]
[42.01164627 -19.19138527]
[57.38868332 -13.49236870]
[59.87459183 2.71726680]
[69.63814545 14.10467434]
[83.79622650 18.73048019]
[86.90495300 34.24326324]
[96.66850281 45.63066864]
[106.43205261 57.01807785]
[115.02748108 72.12485504]
[114.80417633 86.73899841]
[107.49197388 96.96778870]
[121.60907745 102.03804016]
[135.72618103 107.10829163]
[149.84327698 112.17855072]
[163.96037292 117.24880219]
[178.07748413 122.31905365]
[192.19458008 127.38930511]
[206.31167603 132.45956421]
[220.42878723 137.52981567]
[234.54588318 142.60006714]
[250.14910889 139.98287964]
[259.51193237 151.56678772]
[273.67694092 156.50160217]
[287.88858032 161.30050659]
[302.10018921 166.09942627]
[313.34756470 164.19132996]
[321.21478271 170.57241821]
[336.08013916 172.57777405]
[350.94549561 174.58314514]
[365.81082153 176.58850098]
[380.67617798 178.59387207]
[395.54153442 180.59922791]
[410.40686035 182.60458374]
[425.27221680 184.60995483]
[440.13757324 186.61531067]
[454.32098389 170.93780518]
[475.04165649 167.94807434]
[492.72689819 178.76179504]
[506.29440308 172.36470032]
[519.86187744 165.96760559]
[533.42938232 159.57052612]
[546.99694824 153.17343140]
[560.56445312 146.77635193]
[574.13195801 140.37925720]
[587.69946289 133.98217773]
[592.80499268 119.02528381]
[607.02795410 112.13442993]
[621.92999268 117.39784241]
[628.67010498 131.69282532]
[623.24945068 146.53842163]
[608.88397217 153.12701416]
[594.09655762 147.54968262]
[580.52905273 153.94677734]
[566.96148682 160.34385681]
[553.39398193 166.74095154]
[539.82647705 173.13803101]
[526.25897217 179.53512573]
[512.69146729 185.93220520]
[499.12396240 192.32929993]
[499.62039185 196.22419739]
[499.61080933 200.15060425]
[499.09539795 204.04302979]
[498.08270264 207.83660889]
[510.67318726 215.99011230]
[523.26367188 224.14363098]
[535.85412598 232.29714966]
[548.44464111 240.45065308]
[561.11260986 248.48321533]
[573.85699463 256.39404297]
[586.60131836 264.30490112]
[600.91979980 258.32476807]
[616.01086426 261.93566895]
[626.07177734 273.74911499]
[627.23388672 289.22259521]
[619.05035400 302.40628052]
[604.66790771 308.23074341]
[589.61682129 304.45632935]
[579.68469238 292.53445435]
[578.69049072 277.04925537]
[565.94610596 269.13839722]
[553.20178223 261.22756958]
[545.82592773 260.36770630]
[540.29113770 253.04113770]
[527.70062256 244.88763428]
[515.11016846 236.73411560]
[502.51968384 228.58059692]
[489.92919922 220.42709351]
[478.45404053 227.29319763]
[465.06509399 228.59774780]
[452.32998657 224.02188110]
[442.72033691 214.38107300]
[438.13220215 201.48066711]
[423.26684570 199.47529602]
[408.40151978 197.46994019]
[393.53616333 195.46456909]
[378.67080688 193.45921326]
[363.80548096 191.45384216]
[348.94012451 189.44848633]
[334.07476807 187.44311523]
[319.20944214 185.43775940]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 88]
[12 87]
[13 86]
[15 85]
[17 83]
[18 82]
[19 81]
[20 80]
[21 79]
[22 78]
[23 77]
[24 76]
[25 75]
[26 74]
[27 46]
[28 45]
[29 44]
[30 43]
[32 41]
[33 40]
[34 39]
[56 71]
[57 70]
[58 69]
[60 67]
[61 66]
[90 163]
[91 162]
[92 161]
[93 160]
[94 159]
[95 158]
[96 157]
[97 156]
[98 155]
[101 122]
[102 121]
[103 120]
[104 119]
[105 118]
[106 117]
[107 116]
[108 115]
[126 150]
[127 149]
[128 148]
[129 147]
[130 146]
[131 144]
[132 143]
[133 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
