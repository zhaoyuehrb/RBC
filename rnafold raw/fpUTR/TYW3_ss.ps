%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:51:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGCCACCGCUCGCUUCAAUAUGGCUGCCCCCAGGGAGAGACGAGGCUACCAUGAAGGAGCCGAGCGCAGACCCUGAGUCCGUCACCC\
) } def
/len { sequence length } bind def

/coor [
[158.24754333 263.18191528]
[159.75932312 255.30596924]
[164.06250000 248.45639038]
[157.48693848 234.97447205]
[144.95343018 226.92709351]
[145.85806274 211.13175964]
[131.73518372 206.54048157]
[124.87457275 192.96157837]
[129.78608704 178.17933655]
[123.21052551 164.69741821]
[116.63495636 151.21551514]
[110.05939484 137.73359680]
[103.48382568 124.25169373]
[96.90825653 110.76978302]
[90.09840393 97.40468597]
[83.05632782 84.16046906]
[76.01425171 70.91625214]
[68.97218323 57.67203903]
[54.12617493 52.95675659]
[47.17317963 39.42492294]
[51.75997162 25.30058670]
[44.71789932 12.05637264]
[37.67582703 -1.18784130]
[30.63375282 -14.43205547]
[23.59167862 -27.67626953]
[8.74567413 -32.39155197]
[1.79267919 -45.92338562]
[6.37947178 -60.04772186]
[-0.66260183 -73.29193878]
[-7.70467520 -86.53614807]
[-19.78849792 -87.78566742]
[-29.60865021 -94.72920990]
[-34.71117401 -105.48606873]
[-33.89273071 -117.24203491]
[-27.48215485 -126.98542786]
[-42.56282806 -131.12152100]
[-51.41410065 -144.01295471]
[-49.85666656 -159.57278442]
[-38.62590027 -170.45414734]
[-23.02462769 -171.51918030]
[-10.41929150 -162.26501465]
[-6.76174641 -147.06118774]
[-13.77897263 -133.08647156]
[3.56407499 -127.75575256]
[11.84202862 -111.25901794]
[5.53953886 -93.57822418]
[12.58161163 -80.33400726]
[19.62368584 -67.08979797]
[33.89819336 -62.99419022]
[41.22852707 -49.66299057]
[36.83589172 -34.71834183]
[43.87796783 -21.47412872]
[50.92004013 -8.22991467]
[57.96211243 5.01429892]
[65.00418854 18.25851250]
[79.27869415 22.35411835]
[86.60903168 35.68531799]
[82.21639252 50.62996674]
[89.25846863 63.87417984]
[96.30054474 77.11839294]
[103.34261322 90.36260986]
[109.74333191 95.57110596]
[110.39016724 104.19421387]
[116.96573639 117.67612457]
[123.54130554 131.15803528]
[130.11686707 144.63993835]
[136.69244385 158.12185669]
[143.26800537 171.60375977]
[157.94039917 176.83428955]
[164.41691589 190.60054016]
[159.33998108 204.55619812]
[172.34381104 213.56790161]
[170.96884155 228.39891052]
[177.54441833 241.88081360]
[198.05097961 252.56015015]
[197.28085327 274.96585083]
[206.09764099 287.10110474]
[214.91441345 299.23635864]
[230.47125244 303.15609741]
[236.97473145 317.82186890]
[229.43594360 331.98330688]
[213.63801575 334.77697754]
[201.69973755 324.05981445]
[202.77915955 308.05313110]
[193.96238708 295.91787720]
[185.14559937 283.78262329]
[177.50823975 284.51837158]
[170.05758667 282.41403198]
[163.82275391 277.70800781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 74]
[4 73]
[6 71]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 61]
[16 60]
[17 59]
[18 58]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[28 48]
[29 47]
[30 46]
[35 43]
[76 86]
[77 85]
[78 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
