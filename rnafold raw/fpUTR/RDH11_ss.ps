%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:54:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUUGAAUUGGGGCGUGUCUAGAAAGAGAAGCCAUAGUCGGCGAGCAACGCUGGAGCAUCCCGCUCUGGUGCCGCUGCAGCCGGCAGAG\
) } def
/len { sequence length } bind def

/coor [
[128.82063293 131.84886169]
[122.58435059 136.53663635]
[115.60299683 140.01907349]
[108.10688782 142.18124390]
[100.34333038 142.95184326]
[92.56845093 142.30545044]
[85.03873444 140.26338196]
[78.00260162 136.89300537]
[71.69216919 132.30551147]
[66.31562805 126.65224457]
[62.05034637 120.11971283]
[59.03703690 112.92342377]
[57.37511444 105.30078125]
[42.39522171 104.52436066]
[27.41533089 103.74794006]
[13.23316479 110.76055908]
[0.92344701 102.37484741]
[-13.25871944 109.38745880]
[-25.56843758 101.00174713]
[-40.54832840 100.22533417]
[-55.52822113 99.44891357]
[-69.88180542 107.38028717]
[-83.78578949 98.68480682]
[-82.93694305 82.30764771]
[-68.20849609 75.09621429]
[-54.75180054 84.46901703]
[-39.77190781 85.24543762]
[-24.79201698 86.02185822]
[-11.68131256 78.95371246]
[1.69986737 87.39495850]
[14.81057167 80.32680511]
[28.19175148 88.76805115]
[43.17164230 89.54447174]
[58.15153503 90.32089233]
[70.20098114 69.06462097]
[91.89311218 57.81875610]
[116.20855713 60.22234726]
[135.27906799 75.49761963]
[148.90391541 69.22360229]
[162.52877808 62.94958496]
[176.15362549 56.67556763]
[189.77848816 50.40155029]
[203.40335083 44.12753296]
[216.91787720 37.61927414]
[230.19972229 30.64842796]
[243.35925293 23.44936562]
[256.51879883 16.25030327]
[261.05722046 1.34927940]
[274.50540161 -5.76413059]
[288.68328857 -1.34561467]
[301.84283447 -8.54467678]
[315.00238037 -15.74373913]
[328.16192627 -22.94280052]
[341.32147217 -30.14186287]
[354.48098755 -37.34092712]
[367.64053345 -44.53998947]
[380.80007935 -51.73904800]
[393.95962524 -58.93811035]
[399.82919312 -73.86887360]
[415.20391846 -78.45113373]
[428.28964233 -69.16977692]
[429.04809570 -53.14465714]
[416.89746094 -42.66888428]
[401.15869141 -45.77857208]
[387.99914551 -38.57950974]
[374.83959961 -31.38044739]
[361.68005371 -24.18138504]
[348.52050781 -16.98232269]
[335.36099243 -9.78326035]
[322.20144653 -2.58419847]
[309.04190063 4.61486340]
[295.88235474 11.81392574]
[291.95678711 26.13612556]
[278.71368408 33.62446213]
[263.71786499 29.40984535]
[250.55831909 36.60890579]
[237.39878845 43.80796814]
[232.94717407 49.91034698]
[223.65843201 51.01945877]
[218.99884033 56.96454620]
[209.67736816 57.75238800]
[196.05250549 64.02640533]
[182.42764282 70.30042267]
[168.80279541 76.57444000]
[155.17793274 82.84845734]
[141.55308533 89.12247467]
[142.83520508 96.81810760]
[142.70417786 104.61871338]
[141.16432190 112.26694489]
[138.26643372 119.51049042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 34]
[14 33]
[15 32]
[17 30]
[19 28]
[20 27]
[21 26]
[38 86]
[39 85]
[40 84]
[41 83]
[42 82]
[43 81]
[44 79]
[45 77]
[46 76]
[47 75]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
