%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:44:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGAGCGCCUGGAUCCAUCCGACAGCCGCGGGUGCGUGGUCGUGCGGCAAGUGAGCGAUUUGGUGAACAGACACUCCCUUCUGUAGCC\
) } def
/len { sequence length } bind def

/coor [
[126.96934509 265.93838501]
[119.31479645 253.03848267]
[118.25473785 238.07598877]
[124.01409912 224.22572327]
[135.37083435 214.42651367]
[149.91522217 210.75759888]
[164.56097412 213.99737549]
[156.17308044 201.56181335]
[147.78518677 189.12625122]
[139.39729309 176.69068909]
[132.90574646 172.82234192]
[130.94255066 163.67152405]
[122.99375916 150.95080566]
[115.04496765 138.23008728]
[107.09618378 125.50936127]
[99.14739227 112.78864288]
[90.54374695 100.50136566]
[81.30882263 88.68119812]
[72.07390594 76.86103821]
[62.23301697 65.54039764]
[51.81314087 54.75029755]
[41.39326477 43.96020126]
[30.78666306 33.35359955]
[19.99656677 22.93372536]
[4.69477320 18.91306686]
[0.91432053 4.50621367]
[-9.87577629 -5.91366196]
[-20.66587257 -16.33353806]
[-31.45597076 -26.75341225]
[-42.24606705 -37.17329025]
[-53.03616333 -47.59316254]
[-69.07042694 -51.03330612]
[-73.85012054 -66.72045135]
[-62.45831680 -78.51700592]
[-46.61392212 -74.28769684]
[-42.61628723 -58.38326263]
[-31.82619286 -47.96338654]
[-21.03609467 -37.54351044]
[-10.24599838 -27.12363434]
[0.54409909 -16.70375824]
[11.33419609 -6.28388357]
[25.86421013 -3.00852561]
[30.41644287 12.14362812]
[41.20653915 22.56350327]
[48.36050797 24.99764824]
[52.18336105 33.54032516]
[62.60323715 44.33042526]
[73.02311707 55.12052155]
[76.74238586 55.47125626]
[80.44217682 57.78386307]
[83.13239288 62.00951385]
[83.89406586 67.62611389]
[93.12898254 79.44628143]
[102.36390686 91.26644135]
[106.34177399 92.28089905]
[109.79785919 95.15026093]
[111.86695099 99.57018280]
[111.86811829 104.83985138]
[119.81690216 117.56057739]
[127.76569366 130.28129578]
[135.71447754 143.00201416]
[143.66326904 155.72273254]
[151.83285522 168.30279541]
[160.22074890 180.73835754]
[168.60864258 193.17391968]
[176.99653625 205.60948181]
[185.80055237 209.93388367]
[189.00756836 218.04727173]
[201.14282227 226.86405945]
[213.27807617 235.68083191]
[225.41333008 244.49760437]
[237.54858398 253.31439209]
[252.26403809 248.39144897]
[267.05255127 253.09033203]
[276.22763062 265.60421753]
[276.26132202 281.12124634]
[267.14059448 293.67483521]
[252.37261963 298.43783569]
[237.63594055 293.57882690]
[228.59713745 280.96612549]
[228.73181152 265.44964600]
[216.59655762 256.63287354]
[204.46130371 247.81608582]
[192.32603455 238.99931335]
[180.19078064 230.18252563]
[182.91744995 244.93261719]
[178.74310303 259.34008789]
[168.55345154 270.34783936]
[154.51058960 275.62023926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 66]
[8 65]
[9 64]
[10 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 54]
[18 53]
[19 52]
[20 48]
[21 47]
[22 46]
[23 44]
[24 43]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[68 85]
[69 84]
[70 83]
[71 82]
[72 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
