%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAGGAAAUGAACUUCAGAGAAGGGAAACACACGGCUAAGAAGAGAGAGGCAAGGGCAGGAGUGAAGGAGAGAGCUGAAGCCUGGGGCUCCGAGAUGGUCAGAGG\
) } def
/len { sequence length } bind def

/coor [
[-36.03753281 293.01086426]
[-54.28222656 295.58218384]
[-72.54319000 293.21286011]
[-89.50734711 286.07910156]
[-98.46472931 298.11096191]
[-107.42210388 310.14279175]
[-116.37948608 322.17465210]
[-112.59739685 337.34796143]
[-119.49980164 351.37976074]
[-133.82759094 357.64462280]
[-148.81562805 353.18447876]
[-157.38700867 340.10528564]
[-155.49459839 324.58261108]
[-144.03193665 313.94583130]
[-128.41133118 313.21725464]
[-119.45394897 301.18542480]
[-110.49657440 289.15356445]
[-101.53919220 277.12173462]
[-109.59861755 268.21496582]
[-115.98302460 258.03561401]
[-120.49549103 246.89501953]
[-122.99639130 235.13420105]
[-123.40767670 223.11349487]
[-121.71535492 211.20137024]
[-117.96994781 199.76327515]
[-112.28495789 189.15031433]
[-104.83347321 179.68855286]
[-95.84285736 171.66891479]
[-85.58783722 165.33834839]
[-74.38211060 160.89212036]
[-62.56873322 158.46783447]
[-50.50960922 158.14118958]
[-38.57444382 159.92356873]
[-27.12936783 163.76170349]
[-16.52572823 169.53924561]
[-7.08929539 177.08026123]
[4.40137148 167.43844604]
[15.89203835 157.79663086]
[27.38270378 148.15481567]
[38.87337112 138.51300049]
[35.32680893 126.21176147]
[36.75505066 113.44199371]
[42.97710800 102.14572906]
[53.08020401 94.05474091]
[65.55352020 90.42506409]
[78.51408386 91.84212494]
[89.99099731 98.12664032]
[94.14230347 91.05953217]
[102.50558472 89.08975983]
[114.79286194 80.48611450]
[127.08014679 71.88246918]
[133.94665527 57.62899017]
[148.81015015 56.66695404]
[151.68101501 41.35696030]
[164.26463318 32.80667496]
[178.84268188 35.63795471]
[191.12995911 27.03430748]
[203.41723633 18.43066025]
[215.70451355 9.82701492]
[216.10479736 -5.57252979]
[225.38755798 -17.64248085]
[239.82679749 -21.88186073]
[253.82604980 -16.86596489]
[266.11331177 -25.46961021]
[278.40060425 -34.07325745]
[276.98208618 -49.36650085]
[283.41479492 -63.31339264]
[295.96838379 -72.16228485]
[311.26599121 -73.53286743]
[325.19265747 -67.05646515]
[334.00216675 -54.47520065]
[335.32479858 -39.17336273]
[328.80474854 -25.26707458]
[316.19595337 -16.49705505]
[300.89004517 -15.22239685]
[287.00424194 -21.78597641]
[274.71697998 -13.18233013]
[262.42968750 -4.57868338]
[262.35507202 10.29183865]
[253.43284607 22.41033173]
[238.91590881 27.00510979]
[224.30816650 22.11429596]
[212.02088928 30.71794128]
[199.73359680 39.32158661]
[187.44631958 47.92523575]
[185.12086487 62.59247208]
[172.78237915 71.49282837]
[157.41380310 68.95423126]
[151.42616272 82.59232330]
[135.68379211 84.16974640]
[123.39650726 92.77339935]
[111.10923004 101.37704468]
[98.94837952 110.15848541]
[101.43399811 127.42043304]
[94.95542145 143.51766968]
[81.34370422 154.13697815]
[64.32823944 156.48077393]
[48.51518631 150.00366211]
[37.02451706 159.64547729]
[25.53385162 169.28729248]
[14.04318523 178.92910767]
[2.55251884 188.57092285]
[10.64189529 205.21055603]
[14.01532650 223.39102173]
[12.43583584 241.80322266]
[6.02287102 259.12295532]
[-4.75670242 274.10610962]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 18]
[5 17]
[6 16]
[7 15]
[36 102]
[37 101]
[38 100]
[39 99]
[40 98]
[47 93]
[49 92]
[50 91]
[51 90]
[53 88]
[56 85]
[57 84]
[58 83]
[59 82]
[63 78]
[64 77]
[65 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
