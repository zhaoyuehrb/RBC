%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCAGAGGCCACGCCCCCGGAAGCGGCGGUGCAGGUUUCUUGCCUUGAUGUACUGGAGCAAUCAGAUCACACGGCGGCUUGGAGAGUGAGUGCAAGGUUUU\
) } def
/len { sequence length } bind def

/coor [
[-16.14960289 119.45594025]
[-30.93903351 121.96047974]
[-45.72846603 124.46501160]
[-58.04302216 134.39790344]
[-71.88352203 128.89428711]
[-86.67295074 131.39881897]
[-101.46238708 133.90336609]
[-116.25181580 136.40789795]
[-131.04124451 138.91242981]
[-145.83067322 141.41697693]
[-160.62011719 143.92150879]
[-174.42202759 155.99081421]
[-190.62617493 149.44654846]
[-205.33235168 152.40093994]
[-220.03851318 155.35533142]
[-234.74468994 158.30972290]
[-246.75061035 168.61354065]
[-260.75250244 163.53456116]
[-275.45867920 166.48895264]
[-290.16485596 169.44334412]
[-302.10952759 180.67977905]
[-317.73275757 175.69514465]
[-320.96270752 159.61723328]
[-308.47671509 148.98561096]
[-293.11926270 154.73718262]
[-278.41308594 151.78277588]
[-263.70690918 148.82838440]
[-252.75286865 138.73588562]
[-237.69908142 143.60354614]
[-222.99291992 140.64915466]
[-208.28674316 137.69476318]
[-193.58056641 134.74037170]
[-186.53440857 124.77697754]
[-174.17921448 122.27339172]
[-163.12464905 129.13208008]
[-148.33522034 126.62754059]
[-133.54579163 124.12300110]
[-118.75635529 121.61846924]
[-103.96691895 119.11392975]
[-89.17749023 116.60939026]
[-74.38806152 114.10485077]
[-63.13134384 104.35110474]
[-48.23300552 109.67558289]
[-33.44357300 107.17104340]
[-18.65414047 104.66650391]
[-16.04896355 92.89625549]
[-9.54584217 82.70407104]
[0.08647756 75.33944702]
[11.69393539 71.71498108]
[23.87540817 72.29335785]
[35.15182877 77.02838898]
[44.14577484 85.36775208]
[49.74971771 96.31728363]
[64.70613098 95.17460632]
[79.66254425 94.03192902]
[86.78541565 83.42880249]
[98.70786285 78.84437561]
[111.09962463 81.94374847]
[119.45996094 91.60120392]
[134.44425964 90.91516876]
[149.42857361 90.22914124]
[162.86042786 81.86878204]
[175.92825317 89.01589966]
[190.91255188 88.32986450]
[205.89686584 87.64383698]
[217.35928345 74.53783417]
[234.41494751 73.70738220]
[246.60752869 85.17827606]
[261.56393433 84.03560638]
[270.04916382 80.20582581]
[276.99267578 83.09325409]
[291.97698975 82.40721893]
[305.40884399 74.04685974]
[318.47668457 81.19397736]
[331.98965454 71.90253448]
[346.67434692 79.20269012]
[347.42437744 95.58467865]
[333.46817017 104.19610596]
[319.16268921 96.17828369]
[306.80261230 104.48957062]
[292.66302490 97.39152527]
[277.67871094 98.07756042]
[262.70660400 98.99201965]
[247.75019836 100.13468933]
[240.73709106 111.06169128]
[228.50880432 115.97806549]
[215.50320435 112.85537720]
[206.58290100 102.62814331]
[191.59858704 103.31417084]
[176.61428833 104.00019836]
[164.25419617 112.31149292]
[150.11459351 105.21344757]
[135.13029480 105.89947510]
[120.14599609 106.58550262]
[109.38961792 119.00170898]
[92.99270630 120.00319672]
[80.80522156 108.98834229]
[65.84880829 110.13101959]
[50.89239502 111.27369690]
[43.65091324 128.03936768]
[29.06393051 138.88891602]
[11.08923817 140.98233032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[13 32]
[14 31]
[15 30]
[16 29]
[18 27]
[19 26]
[20 25]
[53 99]
[54 98]
[55 97]
[59 94]
[60 93]
[61 92]
[63 90]
[64 89]
[65 88]
[68 84]
[69 83]
[71 82]
[72 81]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
