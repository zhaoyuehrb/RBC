%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCUUUCUUCCCGAGGGCGGCACGAGGGCUGGGCGGUGGGGUGCGGGUGCCCGGGUGAGGGGCGGAGCUGGGGGC\
) } def
/len { sequence length } bind def

/coor [
[52.66139603 306.63662720]
[45.34827423 319.99468994]
[33.23025131 329.21820068]
[18.40685081 332.70916748]
[3.44631720 329.86270142]
[-9.05934715 321.17199707]
[-16.94346046 308.14279175]
[-18.84005165 293.03240967]
[-14.42052555 278.45889282]
[-4.45059204 266.94714355]
[9.34239769 260.49166870]
[24.56872559 260.21087646]
[30.37779427 246.38140869]
[36.18686295 232.55191040]
[41.99592972 218.72242737]
[39.79130936 203.99188232]
[52.26924133 194.26502991]
[58.07831192 180.43554688]
[52.22665024 166.78659058]
[57.92086792 152.67877197]
[72.27680969 146.63356018]
[70.07218933 131.90301514]
[82.55012512 122.17616272]
[88.35919189 108.34667969]
[86.79381561 94.45275116]
[97.81131744 85.84425354]
[89.94046783 72.60205078]
[91.35967255 57.44160461]
[101.31600189 46.15729904]
[115.83406067 42.93800354]
[114.04494476 27.21828461]
[126.10737610 18.48060799]
[131.91644287 4.65111971]
[137.72550964 -9.17836857]
[143.53457642 -23.00785637]
[149.34364319 -36.83734512]
[155.15270996 -50.66683197]
[160.96177673 -64.49632263]
[159.17266846 -80.21604156]
[171.23509216 -88.95372009]
[169.44598389 -104.67343903]
[181.50840759 -113.41111755]
[178.91305542 -129.60359192]
[191.80741882 -139.73609924]
[206.92686462 -133.38517761]
[208.71781921 -117.08411407]
[195.33790588 -107.60205078]
[197.54252625 -92.87150574]
[185.06459045 -83.14465332]
[187.26921082 -68.41410828]
[174.79127502 -58.68725204]
[168.98220825 -44.85776520]
[163.17314148 -31.02827644]
[157.36407471 -17.19878769]
[151.55500793 -3.36930060]
[145.74592590 10.46018696]
[139.93685913 24.28967476]
[142.14147949 39.02021790]
[129.66354370 48.74707413]
[137.52790833 61.36808777]
[136.43960571 76.37740326]
[126.60700989 88.00381470]
[111.64080811 91.65332031]
[113.20618439 105.54724884]
[102.18868256 114.15574646]
[96.37961578 127.98522949]
[98.16873169 143.70495605]
[86.10630035 152.44262695]
[91.83916473 166.92613220]
[85.75093842 180.86845398]
[71.90779877 186.24461365]
[66.09873199 200.07409668]
[67.88784790 215.79382324]
[55.82541656 224.53149414]
[50.01634979 238.36097717]
[44.20728302 252.19047546]
[38.39821243 266.01995850]
[48.85678101 277.08966064]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 77]
[13 76]
[14 75]
[15 74]
[17 72]
[18 71]
[21 68]
[23 66]
[24 65]
[26 63]
[30 59]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[40 49]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
