%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGGUCGAGCCUGGGCAGUACAGGCGGCGGUGCGCACUCUGCGGCGGCCUCUGCGCCUCGGGCGGGCGGGAGAGAGAGGCCGCGGCCGCCAGCGUGGGG\
) } def
/len { sequence length } bind def

/coor [
[112.32304382 275.77246094]
[98.69183350 282.03265381]
[83.86634064 284.31402588]
[68.98366547 282.44158936]
[55.18531799 276.55892944]
[43.52961731 267.11727905]
[34.91056061 254.84082031]
[29.98922348 240.67111206]
[29.14307213 225.69499207]
[32.43700790 211.06112671]
[39.61615372 197.89494324]
[25.80257034 203.74172974]
[11.98898697 209.58851624]
[-1.82459581 215.43530273]
[-15.63817883 221.28208923]
[-20.05223846 236.28376770]
[-33.10503006 244.89530945]
[-48.63342667 243.05059814]
[-59.30539322 231.62068176]
[-60.08195496 216.00239563]
[-50.59643936 203.57022095]
[-35.32762146 200.19424438]
[-21.48496628 207.46850586]
[-7.67138386 201.62171936]
[6.14219904 195.77493286]
[19.95578194 189.92814636]
[33.76936340 184.08135986]
[45.16043854 174.32208252]
[53.05691910 161.56883240]
[60.95340347 148.81556702]
[68.84988403 136.06231689]
[76.74636841 123.30905914]
[84.64285278 110.55580139]
[77.95053101 96.60671234]
[84.00347137 79.52496338]
[74.59961700 67.83875275]
[65.19576263 56.15254593]
[55.79190063 44.46633911]
[41.15138626 35.91697311]
[45.31374359 19.48191452]
[62.25876617 18.93192673]
[67.47811127 35.06248093]
[76.88196564 46.74869156]
[86.28582764 58.43489838]
[95.68968201 70.12110901]
[110.60260773 71.73497009]
[122.28881836 62.33111572]
[133.97502136 52.92725754]
[145.66123962 43.52340317]
[157.34744263 34.11954498]
[169.03366089 24.71568871]
[180.71986389 15.31183052]
[192.40606689 5.90797377]
[204.09228516 -3.49588323]
[208.92431641 -11.45705128]
[216.28625488 -13.00271511]
[222.63626099 -27.49367523]
[237.45561218 -28.98907089]
[249.28524780 -38.21185303]
[260.97146606 -47.61571121]
[272.65765381 -57.01956940]
[284.34387207 -66.42342377]
[285.79489136 -82.16096497]
[298.00225830 -92.19866943]
[313.72357178 -90.58135986]
[323.63165283 -78.26854706]
[321.84820557 -62.56520462]
[309.43133545 -52.78785324]
[293.74774170 -54.73721695]
[282.06152344 -45.33335876]
[270.37530518 -35.92950058]
[258.68911743 -26.52564430]
[255.39443970 -19.76306725]
[246.49513245 -17.01881409]
[241.00131226 -3.17441940]
[225.32577515 -1.03245664]
[213.49613953 8.19032574]
[201.80992126 17.59418297]
[190.12371826 26.99803925]
[178.43751526 36.40189743]
[166.75129700 45.80575180]
[155.06509399 55.20960999]
[143.37889099 64.61346436]
[131.69267273 74.01732635]
[120.00646973 83.42118073]
[119.47551727 110.88107300]
[97.39611053 118.45227814]
[89.49962616 131.20553589]
[81.60314178 143.95880127]
[73.70665741 156.71205139]
[65.81018066 169.46530151]
[57.91369629 182.21856689]
[72.02896118 177.14320374]
[86.99497223 176.13398743]
[101.66384125 179.26835632]
[114.91046906 186.30587769]
[125.71884918 196.70678711]
[133.25997925 209.67333984]
[136.95544434 224.21099854]
[136.52182007 239.20472717]
[131.99235535 253.50451660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[28 92]
[29 91]
[30 90]
[31 89]
[32 88]
[33 87]
[35 45]
[36 44]
[37 43]
[38 42]
[46 85]
[47 84]
[48 83]
[49 82]
[50 81]
[51 80]
[52 79]
[53 78]
[54 77]
[56 76]
[58 74]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
