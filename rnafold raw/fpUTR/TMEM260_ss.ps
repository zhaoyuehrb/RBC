%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCGACCCGGAAGCCGCCGUGGCCGCCGCACAAGCUGCGCUCGUCUCUCGGCUGGGGAGCUCCGUGUCGCACCGGGUUCUUGGGCUGGCCGUGUCCUUCUCCCUCGGUCGCCACUGGCCC\
) } def
/len { sequence length } bind def

/coor [
[6.49950647 365.97448730]
[-0.15629105 379.41696167]
[-6.81208849 392.85943604]
[-13.46788597 406.30194092]
[-19.95147514 419.82830811]
[-14.27984142 434.57986450]
[-20.77656174 448.98709106]
[-35.58724594 454.50244141]
[-49.92498016 447.85375977]
[-55.28343964 432.98559570]
[-48.48354721 418.71896362]
[-33.55955505 413.51800537]
[-33.60052109 406.03939819]
[-26.91036987 399.64611816]
[-20.25457191 386.20364380]
[-13.59877396 372.76116943]
[-6.94297695 359.31869507]
[-0.80694729 345.63113403]
[4.80030870 331.71859741]
[10.40756512 317.80606079]
[15.83669567 303.82305908]
[21.08681488 289.77185059]
[26.33693504 275.72064209]
[31.58705521 261.66943359]
[36.83717728 247.61824036]
[34.04393387 232.98789978]
[46.12199402 222.76875305]
[51.37211227 208.71754456]
[56.62223434 194.66635132]
[61.87235260 180.61514282]
[52.29046631 169.21107483]
[49.68599701 154.44378662]
[54.85702896 140.26187134]
[66.50889587 130.50836182]
[81.57661438 127.87948608]
[86.82673645 113.82828522]
[80.91088104 100.60146332]
[85.98233032 87.02845001]
[99.12206268 80.92159271]
[96.70433807 65.28621674]
[108.40688324 56.07210159]
[113.65699768 42.02090073]
[111.23928070 26.38551712]
[122.94181824 17.17140388]
[128.19194031 3.12020302]
[123.05718231 -6.63430214]
[124.18228912 -17.37793159]
[130.94422913 -25.51677513]
[140.87606812 -28.46539688]
[141.43392944 -37.70232010]
[147.16882324 -42.50254059]
[153.47914124 -56.11061859]
[159.78947449 -69.71869659]
[166.09979248 -83.32677460]
[172.41011047 -96.93485260]
[171.19636536 -112.70943451]
[183.56990051 -121.00069427]
[189.88021851 -134.60876465]
[196.19055176 -148.21684265]
[202.50086975 -161.82493591]
[208.81120300 -175.43301392]
[215.12152100 -189.04109192]
[221.43183899 -202.64916992]
[227.74217224 -216.25724792]
[226.52842712 -232.03182983]
[238.90194702 -240.32307434]
[245.21228027 -253.93115234]
[251.52259827 -267.53924561]
[252.70066833 -284.45220947]
[269.27877808 -288.00216675]
[277.27929688 -273.05462646]
[265.13067627 -261.22891235]
[258.82034302 -247.62083435]
[252.51002502 -234.01275635]
[254.17514038 -219.21151733]
[241.35025024 -209.94691467]
[235.03991699 -196.33883667]
[228.72959900 -182.73075867]
[222.41928101 -169.12268066]
[216.10894775 -155.51460266]
[209.79862976 -141.90652466]
[203.48829651 -128.29844666]
[197.17797852 -114.69036865]
[198.84307861 -99.88912964]
[186.01818848 -90.62453461]
[179.70787048 -77.01644897]
[173.39755249 -63.40837479]
[167.08721924 -49.80029678]
[160.77690125 -36.19221497]
[154.64086914 -22.50466156]
[158.36604309 -3.60064220]
[142.24313354 8.37032318]
[136.99301147 22.42152405]
[139.78625488 37.05187225]
[127.70819855 47.27101898]
[122.45807648 61.32221985]
[125.25131989 75.95256805]
[113.17326355 86.17171478]
[119.08911896 99.39853668]
[114.01766968 112.97154999]
[100.87793732 119.07840729]
[95.62781525 133.12960815]
[105.27992249 144.99485779]
[107.68121338 159.99920654]
[102.28566742 174.09722900]
[90.63585663 183.53852844]
[75.92355347 185.86526489]
[70.67343140 199.91647339]
[65.42331696 213.96766663]
[60.17319489 228.01887512]
[62.59091568 243.65425110]
[50.88837814 252.86836243]
[45.63825607 266.91955566]
[40.38813782 280.97076416]
[35.13801575 295.02197266]
[29.88789558 309.07318115]
[29.80240440 318.32653809]
[24.32010078 323.41329956]
[18.71284485 337.32583618]
[13.10558987 351.23837280]
[13.88390350 356.63781738]
[12.57004738 361.29119873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 12]
[18 120]
[19 119]
[20 118]
[21 116]
[22 115]
[23 114]
[24 113]
[25 112]
[27 110]
[28 109]
[29 108]
[30 107]
[35 102]
[36 101]
[39 98]
[41 96]
[42 95]
[44 93]
[45 92]
[49 90]
[51 89]
[52 88]
[53 87]
[54 86]
[55 85]
[57 83]
[58 82]
[59 81]
[60 80]
[61 79]
[62 78]
[63 77]
[64 76]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
