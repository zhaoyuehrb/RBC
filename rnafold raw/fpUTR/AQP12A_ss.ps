%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:28:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACCAGCCAGCUCCUGCUCUGUCCCCUCAGGUGUCCUGCAGGCACAGCUCCUCGGGGGGCCCAGGCCG\
) } def
/len { sequence length } bind def

/coor [
[90.25968170 212.22526550]
[74.92025757 213.87008667]
[61.13689804 206.94026184]
[53.30782700 193.64704895]
[53.93127823 178.23228455]
[62.80830383 165.61476135]
[77.10627747 159.82067871]
[79.78462982 145.06173706]
[82.46298981 130.30279541]
[71.39120483 120.18273926]
[56.93175888 124.17328644]
[42.47231674 128.16384888]
[31.35515022 140.21957397]
[15.41757298 136.35620117]
[11.05479527 120.54803467]
[22.75486946 109.05715179]
[38.48176193 113.70439911]
[52.94120789 109.71384430]
[67.40065002 105.72328949]
[73.04812622 85.08264160]
[89.26638031 73.58607483]
[107.58071136 74.90155792]
[115.84416199 62.38296127]
[124.10762024 49.86436081]
[132.37107849 37.34576035]
[140.63452148 24.82716370]
[148.89797974 12.30856419]
[157.16143799 -0.21003452]
[158.30656433 -15.98974419]
[171.77532959 -22.34913063]
[180.03877258 -34.86772919]
[188.30223083 -47.38632584]
[195.70486450 -60.43244553]
[202.21311951 -73.94697571]
[208.72137451 -87.46150970]
[214.92474365 -101.11867523]
[220.82012939 -114.91159058]
[218.32600403 -131.11996460]
[231.28343201 -141.17169189]
[246.36289978 -134.72642517]
[248.05195618 -118.41448975]
[234.61303711 -109.01621246]
[228.71766663 -95.22329712]
[228.99549866 -87.58784485]
[222.23590088 -80.95325470]
[215.72764587 -67.43872070]
[209.21939087 -53.92418671]
[210.26036072 -50.22409821]
[209.33468628 -45.80857849]
[206.11717224 -41.72415161]
[200.82083130 -39.12287140]
[192.55737305 -26.60427475]
[184.29393005 -14.08567524]
[183.73985291 0.79862088]
[169.68003845 8.05342007]
[161.41658020 20.57201958]
[153.15312195 33.09061813]
[144.88966370 45.60921478]
[136.62622070 58.12781525]
[128.36276245 70.64641571]
[120.09930420 83.16501617]
[127.77171326 96.95446777]
[126.32312012 113.66371918]
[115.15304565 127.47663879]
[97.22193146 132.98114014]
[94.54357910 147.74009705]
[91.86522675 162.49903870]
[103.21559143 172.94760132]
[107.09309387 187.87974548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 67]
[8 66]
[9 65]
[10 19]
[11 18]
[12 17]
[22 61]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[30 53]
[31 52]
[32 51]
[33 47]
[34 46]
[35 45]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
