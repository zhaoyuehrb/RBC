%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCGGAGGCCCCUCUUUUCGGCAGCUGGGAGGGCAGCGGGGCGGACCGACGGGAUCUCGCGAGAUUCUCGCGCGGUAGGCCCUGAGGACCCAGC\
) } def
/len { sequence length } bind def

/coor [
[33.34448242 170.90168762]
[25.82750702 169.38008118]
[19.42420197 165.28610229]
[6.04809332 172.07431030]
[-7.32801485 178.86251831]
[-20.70412254 185.65072632]
[-34.08023071 192.43891907]
[-39.07779312 207.19230652]
[-52.73976898 213.88595581]
[-66.77406311 209.03062439]
[-80.15016937 215.81883240]
[-93.52627563 222.60704041]
[-94.98834991 237.96496582]
[-104.53939819 250.08029175]
[-119.13172150 255.08705139]
[-134.10896301 251.38760376]
[-144.69194031 240.16244507]
[-147.50364685 224.99346924]
[-141.64691162 210.72105408]
[-128.99055481 201.89945984]
[-113.57321167 201.34362793]
[-100.31448364 209.23092651]
[-86.93837738 202.44273376]
[-73.56226349 195.65452576]
[-69.19516754 181.46072388]
[-55.72659302 174.38597107]
[-40.86843491 179.06282043]
[-27.49232864 172.27461243]
[-14.11622047 165.48640442]
[-0.74011213 158.69819641]
[12.63599586 151.90998840]
[22.23690414 131.64266968]
[45.37026596 131.67988586]
[57.47690201 122.82384491]
[69.58353424 113.96781158]
[81.54518127 104.91689301]
[83.40479279 90.54720306]
[94.81626892 81.61834717]
[109.21139526 83.26959229]
[121.02490234 74.02616882]
[132.83842468 64.78273773]
[144.65193176 55.53931427]
[156.46543884 46.29588699]
[168.27894592 37.05245972]
[170.33351135 21.61171532]
[182.44575500 12.40585423]
[197.15348816 14.45971203]
[208.96699524 5.21628523]
[220.78051758 -4.02714205]
[232.59402466 -13.27056885]
[238.97393799 -30.44909096]
[256.32797241 -32.43063354]
[267.83596802 -42.05175781]
[279.18664551 -51.85796738]
[290.37707520 -61.84669495]
[301.56747437 -71.83542633]
[312.75790405 -81.82415009]
[323.94830322 -91.81288147]
[335.13870239 -101.80161285]
[339.75695801 -117.53704071]
[355.75503540 -121.14176941]
[366.67547607 -108.90755463]
[361.28427124 -93.41991425]
[345.12744141 -90.61119843]
[333.93704224 -80.62246704]
[322.74661255 -70.63374329]
[311.55621338 -60.64501190]
[300.36578369 -50.65628433]
[289.17538452 -40.66755676]
[286.22576904 -33.73312378]
[277.45709229 -30.54376030]
[265.94909668 -20.92263603]
[264.51373291 -8.79122829]
[254.83769226 -0.69037849]
[241.83744812 -1.45705712]
[230.02394104 7.78636980]
[218.21043396 17.02979660]
[206.39691162 26.27322388]
[204.85290527 41.04317856]
[193.00399780 50.58561707]
[177.52238464 48.86597061]
[165.70886230 58.10939789]
[153.89535522 67.35282135]
[142.08184814 76.59625244]
[130.26832581 85.83967590]
[118.45481873 95.08310699]
[116.59520721 109.45279694]
[105.18373108 118.38165283]
[90.78860474 116.73040771]
[85.83728790 124.63901520]
[78.43957520 126.07444763]
[66.33293915 134.93048096]
[54.22629929 143.78651428]
[54.82748413 151.77958679]
[52.52445602 159.38493347]
[47.67522812 165.59257507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[10 24]
[11 23]
[12 22]
[33 93]
[34 92]
[35 91]
[36 89]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[44 81]
[47 78]
[48 77]
[49 76]
[50 75]
[52 72]
[53 71]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
