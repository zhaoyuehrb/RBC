%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCCCCAGGCGGCGCGGCUGGUCCCCAGGGGUCUGCGGGCGACUGCGCGGCUGAGGCGCCCGAGUGCGGUACUGGCGGCGGGCGGCGGGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[98.13624573 237.28753662]
[100.94953156 218.11109924]
[101.43526459 203.11897278]
[101.92098999 188.12683105]
[92.78754425 173.23829651]
[102.38529968 157.62777710]
[102.38529968 142.62777710]
[102.38529968 127.62777710]
[82.30041504 116.80104065]
[79.12372589 97.09637451]
[65.97444916 89.87858582]
[52.82516861 82.66079712]
[37.00460052 82.80300903]
[29.57071686 69.89616394]
[16.42144012 62.67837524]
[3.27216101 55.46058655]
[-9.87711716 48.24279785]
[-23.02639580 41.02500916]
[-36.17567444 33.80722046]
[-45.39518356 32.37115479]
[-49.62836456 26.13682747]
[-65.44523621 25.76666451]
[-72.45727539 12.62586498]
[-85.36592865 4.98606253]
[-98.27458954 -2.65373993]
[-111.18324280 -10.29354286]
[-127.00012207 -10.66370487]
[-134.01216125 -23.80450439]
[-146.92080688 -31.44430733]
[-159.82946777 -39.08411026]
[-176.22457886 -38.71999741]
[-184.50503540 -52.87507248]
[-176.15261841 -66.98780060]
[-159.75958252 -66.54022217]
[-152.18966675 -51.99276733]
[-139.28100586 -44.35296249]
[-126.37235260 -36.71316147]
[-111.47879028 -36.88945007]
[-103.54344177 -23.20219994]
[-90.63478851 -15.56239700]
[-77.72612762 -7.92259455]
[-64.81747437 -0.28279188]
[-49.92391205 -0.45907927]
[-41.98855972 13.22817039]
[-28.95788383 20.65793991]
[-15.80860615 27.87572861]
[-2.65932822 35.09351730]
[10.48995018 42.31130600]
[23.63922882 49.52909851]
[36.78850555 56.74688721]
[51.66854858 56.08840942]
[60.04295731 69.51152039]
[73.19223785 76.72930908]
[86.34151459 83.94709778]
[101.79009247 76.77387238]
[119.31507111 83.33176422]
[127.66278076 101.93761444]
[141.33586121 93.97785950]
[154.18675232 101.50804901]
[169.18478394 101.26515198]
[184.18281555 101.02226257]
[199.18084717 100.77936554]
[214.17887878 100.53646851]
[229.17691040 100.29357147]
[238.80224609 91.52162170]
[251.41987610 91.73464203]
[260.16528320 100.26394653]
[275.16333008 100.50684357]
[290.16134644 100.74974060]
[300.26828003 88.81725311]
[315.68933105 86.22401428]
[329.14318848 94.19445801]
[334.27731323 108.96519470]
[328.66757202 123.56192780]
[314.96267700 131.09252930]
[299.63366699 128.00128174]
[289.91845703 115.74777222]
[274.92041016 115.50487518]
[259.92239380 115.26198578]
[245.18368530 124.63532257]
[229.41981506 115.29160309]
[214.42178345 115.53450012]
[199.42373657 115.77739716]
[184.42570496 116.02029419]
[169.42767334 116.26319122]
[154.42964172 116.50608826]
[141.82933044 124.44846344]
[127.90567780 116.93564606]
[117.38529968 127.62777710]
[117.38529968 142.62777710]
[117.38529968 157.62777710]
[126.00023651 167.39390564]
[125.58293152 180.00640869]
[116.91312408 188.61256409]
[116.42739868 203.60469055]
[115.94166565 218.59683228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 96]
[3 95]
[4 94]
[6 91]
[7 90]
[8 89]
[10 54]
[11 53]
[12 52]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[19 45]
[21 44]
[23 42]
[24 41]
[25 40]
[26 39]
[28 37]
[29 36]
[30 35]
[57 88]
[59 86]
[60 85]
[61 84]
[62 83]
[63 82]
[64 81]
[67 79]
[68 78]
[69 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
