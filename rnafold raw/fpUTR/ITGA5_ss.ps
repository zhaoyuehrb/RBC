%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:10:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCGCCUCUGGGAGGUUUAGGAAGCGGCUCCGGGUCGGUGGCCCCAGGACAGGGAAGAGCGGGCGCU\
) } def
/len { sequence length } bind def

/coor [
[73.69369507 138.08389282]
[70.08822632 123.52365112]
[76.34355164 109.89020538]
[89.73331451 103.12727356]
[76.41503906 96.22629547]
[63.09675980 89.32531738]
[49.77848053 82.42434692]
[31.57515526 83.81975555]
[22.45218277 68.99874878]
[8.83361244 62.71110153]
[-6.93892479 63.95112228]
[-15.25078106 51.59141922]
[-28.86935234 45.30377197]
[-42.48792267 39.01612091]
[-56.10649490 32.72847366]
[-67.53406525 42.79478455]
[-82.06993866 47.33660889]
[-97.19570160 45.56704712]
[-110.29071045 37.79269028]
[-119.08618164 25.36049271]
[-122.05824280 10.42440414]
[-118.69197083 -4.42780495]
[-109.57059479 -16.62290001]
[-96.27444458 -24.04800797]
[-81.10715485 -25.41668320]
[-66.69655609 -20.49179459]
[-55.53936768 -10.12660885]
[-49.56864548 3.88304257]
[-49.81884766 19.10990334]
[-36.20027542 25.39755058]
[-22.58170509 31.68519974]
[-8.96313286 37.97284698]
[5.83531237 36.28308868]
[15.12125969 49.09252930]
[28.73983192 55.38017654]
[40.41243744 51.48522949]
[51.91939926 56.88431168]
[56.67945862 69.10606384]
[69.99773407 76.00704193]
[83.31601715 82.90802002]
[96.63429260 89.80899048]
[110.87888336 94.50915527]
[125.68883514 96.88938904]
[140.49877930 99.26963043]
[155.30871582 101.64986420]
[170.16900635 103.69236755]
[177.86686707 90.55223846]
[190.24755859 81.68441772]
[205.16606140 78.62529755]
[220.03764343 81.90489197]
[232.28573608 90.95499420]
[239.78825378 104.20761871]
[241.24536133 119.36666107]
[236.40460205 133.80574036]
[226.10466003 145.02317810]
[212.13006592 151.07551575]
[196.90200806 150.91410828]
[183.05882263 144.56695557]
[172.99894714 133.13372803]
[168.46530151 118.59529877]
[161.22320557 121.04747772]
[152.92848206 116.45980835]
[138.11854553 114.07957458]
[123.30859375 111.69933319]
[108.49864960 109.31909943]
[115.23416138 122.72181702]
[112.14801788 137.40090942]
[100.58569336 146.95666504]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 41]
[5 40]
[6 39]
[7 38]
[9 35]
[10 34]
[12 32]
[13 31]
[14 30]
[15 29]
[42 65]
[43 64]
[44 63]
[45 62]
[46 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
