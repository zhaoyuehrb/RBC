%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCAGUGCUGCCUGUCACACCUGAGCCAGCAGUUUGUGCAACCAGAGGAGCGCAGGCAGGGUUCCCUGCUGGGGCCCGGGCUGCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[-16.33722115 237.01013184]
[-25.46492004 233.55386353]
[-33.20396423 227.64604187]
[-45.93362808 235.58049011]
[-58.66329193 243.51495361]
[-71.39295959 251.44941711]
[-84.12261963 259.38388062]
[-96.71646118 267.53219604]
[-109.17088318 275.89205933]
[-114.69478607 283.43136597]
[-122.19012451 284.31564331]
[-134.91978455 292.25009155]
[-139.93235779 307.48995972]
[-155.02218628 312.93759155]
[-168.61364746 304.41400146]
[-170.28056335 288.45779419]
[-158.74418640 277.30917358]
[-142.85424805 279.52044678]
[-130.12458801 271.58596802]
[-117.53074646 263.43765259]
[-105.07632446 255.07777405]
[-101.19797516 248.60317993]
[-92.05708313 246.65420532]
[-79.32741547 238.71975708]
[-66.59775543 230.78529358]
[-53.86808777 222.85083008]
[-41.13842392 214.91636658]
[-41.76432800 194.21444702]
[-30.10974312 176.94032288]
[-10.44137478 169.68255615]
[9.88449669 175.31338501]
[20.75638962 164.97888184]
[31.62828064 154.64437866]
[42.50017166 144.30987549]
[53.37206268 133.97537231]
[64.24395752 123.64086914]
[75.11584473 113.30636597]
[85.98773956 102.97186279]
[90.13127899 89.61811066]
[103.67775726 86.15625000]
[114.54964447 75.82173920]
[115.69561005 62.83949661]
[125.13741302 54.45219803]
[137.35734558 54.82125092]
[148.57208252 44.85983276]
[159.78680420 34.89841461]
[171.00152588 24.93699455]
[176.25442505 5.61914539]
[195.13662720 2.07248783]
[205.65327454 -8.62330914]
[216.16992188 -19.31910515]
[226.68658447 -30.01490211]
[237.20323181 -40.71069717]
[241.36155701 -55.97565460]
[255.80187988 -59.62617493]
[257.10476685 -75.61623383]
[270.49847412 -84.44730377]
[285.70852661 -79.34494781]
[291.06704712 -64.22324371]
[282.46347046 -50.68228531]
[266.49768066 -49.10952377]
[263.09158325 -34.60960388]
[247.89903259 -30.19404793]
[237.38237000 -19.49825096]
[226.86572266 -8.80245495]
[216.34907532 1.89334154]
[205.83242798 12.58913803]
[206.82641602 23.01182556]
[201.71385193 32.40244675]
[192.02597046 37.42914581]
[180.96295166 36.15172195]
[169.74822998 46.11314011]
[158.53349304 56.07455826]
[147.31877136 66.03598022]
[142.80538940 82.90270996]
[124.88415527 86.69363403]
[114.01226044 97.02813721]
[109.86872101 110.38188934]
[96.32224274 113.84375000]
[85.45035553 124.17826080]
[74.57846069 134.51275635]
[63.70656967 144.84725952]
[52.83467484 155.18176270]
[41.96278381 165.51626587]
[31.09089279 175.85076904]
[20.21900177 186.18527222]
[23.97949600 195.39843750]
[24.94575882 205.27850342]
[23.05065918 214.99882507]
[18.46589851 223.75004578]
[11.58654308 230.80747986]
[2.99702334 235.59114075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[8 21]
[9 20]
[11 19]
[12 18]
[31 86]
[32 85]
[33 84]
[34 83]
[35 82]
[36 81]
[37 80]
[38 79]
[40 77]
[41 76]
[44 74]
[45 73]
[46 72]
[47 71]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[55 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
