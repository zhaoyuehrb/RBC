%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:53:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACAACCCCAGCGCGAGUGCCAGAGCCCAGCCGGCGCGGAGCGGGAGCGGUGCAGGCUGAGGUCUCCGAGCGGCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[41.75843430 237.32807922]
[34.00794601 250.17057800]
[40.90208435 263.97183228]
[39.21757126 279.30694580]
[29.49192619 291.28256226]
[14.82856750 296.07730103]
[-0.09347893 292.16116333]
[-10.51264381 280.78381348]
[-13.10420895 265.57568359]
[-7.04121494 251.38963318]
[5.74165821 242.75241089]
[21.16544151 242.42008972]
[28.91593170 229.57759094]
[36.16262054 216.44421387]
[42.89460754 203.03973389]
[49.62659836 189.63523865]
[56.35858536 176.23074341]
[63.09057236 162.82626343]
[69.82256317 149.42176819]
[76.29335022 135.88925171]
[82.50051117 122.23381805]
[88.44171143 108.46057129]
[86.73998260 94.58268738]
[97.67243195 85.86643219]
[103.34542847 71.98056793]
[109.01842499 58.09471130]
[114.42109680 44.10145569]
[119.55139923 30.00606537]
[124.40740204 15.81384277]
[128.98728943 1.53012455]
[133.56718445 -12.75359344]
[138.14707947 -27.03731155]
[142.72695923 -41.32102966]
[139.57269287 -56.82461548]
[150.82647705 -66.58173370]
[155.40637207 -80.86544800]
[159.98626709 -95.14916992]
[164.56614685 -109.43288422]
[158.89759827 -119.09840393]
[159.62210083 -130.05673218]
[166.23991394 -138.54017639]
[176.26831055 -141.77276611]
[181.94131470 -155.65863037]
[179.18708801 -171.82484436]
[191.98133850 -182.08346558]
[207.16241455 -175.88130188]
[209.11334229 -159.59861755]
[195.82716370 -149.98562622]
[190.15417480 -136.09977722]
[194.40161133 -117.39803314]
[178.84986877 -104.85299683]
[174.26997375 -90.56928253]
[169.69009399 -76.28556061]
[165.11019897 -62.00184250]
[168.59205627 -47.51992798]
[157.01068115 -36.74113846]
[152.43078613 -22.45742226]
[147.85090637 -8.17370415]
[143.27101135 6.11001444]
[138.69111633 20.39373207]
[139.67359924 27.91910172]
[133.64678955 35.13636780]
[128.51647949 49.23175812]
[129.20643616 56.78956223]
[122.90428925 63.76770782]
[117.23129272 77.65356445]
[111.55828857 91.53942871]
[113.26001740 105.41731262]
[102.32756805 114.13356781]
[101.94063568 123.52834320]
[96.15595245 128.44097900]
[89.94879150 142.09642029]
[89.19786835 151.46913147]
[83.22705078 156.15376282]
[76.49506378 169.55824280]
[69.76307678 182.96273804]
[63.03108597 196.36723328]
[56.29909897 209.77171326]
[49.56711197 223.17620850]
[49.57179642 230.21612549]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[14 79]
[15 78]
[16 77]
[17 76]
[18 75]
[19 74]
[20 72]
[21 71]
[22 69]
[24 67]
[25 66]
[26 65]
[27 63]
[28 62]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[35 54]
[36 53]
[37 52]
[38 51]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
