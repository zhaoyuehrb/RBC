%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAGAACUUCUUGAUUCCUCAGAUAAAUAGAGGACAGAUGCUGGACUGUAGCUAAGUAUUUCCUUUCAUCUACGGGAUAAAAUACUGAUAAUUUGAGAGUG\
) } def
/len { sequence length } bind def

/coor [
[88.01510620 288.96728516]
[74.23712158 296.10498047]
[58.90014267 293.74771118]
[47.90155029 282.80191040]
[45.47053146 267.47644043]
[52.54185867 253.66427612]
[66.39646912 246.67646790]
[68.67517853 231.85055542]
[70.95388794 217.02465820]
[68.82273865 209.81300354]
[73.53481293 201.78414917]
[76.26459503 187.03463745]
[78.99438477 172.28511047]
[81.72416687 157.53559875]
[84.45394897 142.78607178]
[64.78286743 128.84582520]
[54.99008942 106.81439972]
[39.99183273 106.58564758]
[24.99357796 106.35690308]
[9.99532223 106.12815094]
[-5.00293350 105.89940643]
[-13.45470715 118.80564880]
[-27.55173111 125.07282257]
[-42.79569626 122.70109558]
[-54.32230759 112.44728088]
[-58.45346832 97.58332825]
[-53.87093735 82.85227203]
[-42.03698349 72.95474243]
[-26.72777939 71.04900360]
[-12.82843781 77.74316406]
[-4.77418566 90.90115356]
[10.22406960 91.12989807]
[25.22232628 91.35864258]
[40.22058105 91.58739471]
[55.21883774 91.81613922]
[57.06941605 84.85758209]
[59.99404526 78.27785492]
[63.91955948 72.24157715]
[68.74774933 66.89978027]
[74.35781097 62.38608932]
[80.60940552 58.81343842]
[76.54330444 44.37505722]
[72.47720337 29.93667793]
[68.41109467 15.49829865]
[55.17596054 6.43128633]
[54.15662003 -9.57935047]
[66.13502502 -20.25162125]
[81.92237091 -17.39867401]
[89.40795135 -3.20904589]
[82.84947968 11.43219566]
[86.91558075 25.87057495]
[90.98168182 40.30895615]
[95.04778290 54.74733734]
[112.52983093 56.23550034]
[128.15061951 64.22472382]
[139.58973694 77.52822113]
[153.67640686 72.37404633]
[167.76309204 67.21986389]
[181.84976196 62.06568527]
[195.93644714 56.91150665]
[210.02311707 51.75732803]
[224.10978699 46.60314941]
[230.82154846 32.54647064]
[245.18086243 27.52007103]
[258.54037476 34.00532532]
[272.62707520 28.85114479]
[286.71374512 23.69696617]
[300.80041504 18.54278564]
[307.22714233 4.10420465]
[322.01089478 -1.48295271]
[336.38073730 5.09607506]
[341.81127930 19.93806839]
[335.08068848 34.23753357]
[320.18209839 39.51085663]
[305.95458984 32.62946320]
[291.86791992 37.78364182]
[277.78125000 42.93782043]
[263.69458008 48.09199905]
[257.67520142 61.66781235]
[243.46272278 67.09555054]
[229.26397705 60.68982315]
[215.17729187 65.84400177]
[201.09062195 70.99818420]
[187.00395203 76.15235901]
[172.91726685 81.30654144]
[158.83059692 86.46072388]
[144.74391174 91.61489868]
[145.41728210 103.09819794]
[143.19071960 114.38366699]
[138.20640564 124.75074005]
[130.78257751 133.53746033]
[121.39327240 140.18278503]
[110.63799286 144.26240540]
[99.20346832 145.51585388]
[96.47368622 160.26538086]
[93.74389648 175.01489258]
[91.01411438 189.76441956]
[88.28433228 204.51393127]
[85.77979279 219.30335999]
[83.50108337 234.12927246]
[81.22237396 248.95516968]
[92.33905792 259.78103638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 101]
[8 100]
[9 99]
[11 98]
[12 97]
[13 96]
[14 95]
[15 94]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[41 53]
[42 52]
[43 51]
[44 50]
[56 87]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
[62 81]
[65 78]
[66 77]
[67 76]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
