%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:00:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGGGGUAUCUCGAGGUGCCGGGUUGCAGGCGCUCAGGAGCGCUAGGGUUUGAGGCCUGCUUUCUGCUCGCGCCAGCAGAGCACUACCUGAGGCAGCGAGGCGCAGCGAGCCUAGCCUCCCCGCGCCCUGGGCAGUGUGGCC\
) } def
/len { sequence length } bind def

/coor [
[-49.02154541 407.65533447]
[-50.43236160 415.09548950]
[-54.33784103 421.50329590]
[-60.19614410 426.08251953]
[-67.22658539 428.28411865]
[-74.51348877 427.87197876]
[-82.84704590 440.34399414]
[-91.18059540 452.81604004]
[-99.51415253 465.28808594]
[-107.84770203 477.76013184]
[-116.18125916 490.23217773]
[-116.71330261 506.62271118]
[-131.29957581 514.11755371]
[-144.93496704 505.00665283]
[-143.59255981 488.66256714]
[-128.65330505 481.89862061]
[-120.31974792 469.42657471]
[-111.98619843 456.95452881]
[-103.65264130 444.48251343]
[-95.31909180 432.01046753]
[-86.98553467 419.53842163]
[-88.18154144 397.12344360]
[-67.55319977 386.55908203]
[-60.62696838 373.25390625]
[-53.70073700 359.94876099]
[-46.77450943 346.64358521]
[-39.84828186 333.33843994]
[-32.92205048 320.03326416]
[-25.99582100 306.72811890]
[-31.56122208 295.05813599]
[-29.33248711 282.12457275]
[-19.90608406 272.71475220]
[-6.58409119 270.44305420]
[0.63074052 257.29217529]
[7.84557199 244.14126587]
[15.06040382 230.99035645]
[22.27523422 217.83946228]
[29.49006653 204.68855286]
[36.70489883 191.53765869]
[37.16801834 184.10423279]
[44.22327042 178.18107605]
[51.72327042 165.19068909]
[59.22327042 152.20030212]
[66.72327423 139.20993042]
[66.35013580 134.37936401]
[69.06039429 129.27568054]
[74.84438324 125.82675934]
[82.90387726 113.17588806]
[90.96337128 100.52500916]
[90.64456177 96.59653473]
[92.09828186 92.55188751]
[95.33312988 89.20333862]
[99.98667145 87.33446503]
[108.85632324 75.23779297]
[117.72596741 63.14112473]
[126.59561157 51.04445648]
[135.46525574 38.94778824]
[132.47320557 21.74896049]
[142.61543274 7.95611143]
[159.25645447 5.77290869]
[167.86009216 -6.51437187]
[176.46374512 -18.80165291]
[185.06739807 -31.08893394]
[186.64482117 -46.83130646]
[200.28291321 -52.81894302]
[208.88655090 -65.10622406]
[217.49020386 -77.39350128]
[226.09384155 -89.68078613]
[234.29086304 -102.24298859]
[242.07246399 -115.06666565]
[249.85404968 -127.89035034]
[257.63565063 -140.71401978]
[265.27691650 -153.62182617]
[272.77691650 -166.61219788]
[280.27691650 -179.60258484]
[277.69869995 -192.29090881]
[284.27352905 -202.97583008]
[295.98715210 -206.17994690]
[303.76876831 -219.00363159]
[311.55035400 -231.82730103]
[305.42578125 -246.08454895]
[308.88391113 -261.21136475]
[320.59503174 -271.39120483]
[336.05599976 -272.70971680]
[349.32171631 -264.65985107]
[355.29129028 -250.33700562]
[351.66925049 -235.24858093]
[339.84838867 -225.19639587]
[324.37402344 -224.04570007]
[316.59243774 -211.22203064]
[308.81082153 -198.39834595]
[309.40850830 -180.89187622]
[293.26730347 -172.10258484]
[285.76730347 -159.11219788]
[278.26730347 -146.12182617]
[277.64212036 -138.70027161]
[270.45932007 -132.93241882]
[262.67773438 -120.10874939]
[254.89613342 -107.28507233]
[247.11453247 -94.46139526]
[247.63562012 -90.90167999]
[246.40979004 -86.91184235]
[243.25413513 -83.33849335]
[238.38113403 -81.07714081]
[229.77748108 -68.78985596]
[221.17382812 -56.50257874]
[212.57019043 -44.21529770]
[211.60815430 -29.35179329]
[197.35467529 -22.48528671]
[188.75102234 -10.19800568]
[180.14738464 2.08927464]
[171.54373169 14.37655544]
[175.53828430 26.67313194]
[171.64044189 39.20512390]
[161.06645203 47.30405807]
[147.56192017 47.81743240]
[138.69227600 59.91410065]
[129.82263184 72.01077271]
[120.95298767 84.10743713]
[112.08334351 96.20410919]
[103.61424255 108.58450317]
[95.55474854 121.23538208]
[87.49525452 133.88624573]
[79.71365356 146.70993042]
[72.21365356 159.70030212]
[64.71365356 172.69068909]
[57.21365356 185.68107605]
[49.85580063 198.75248718]
[42.64096832 211.90339661]
[35.42613602 225.05429077]
[28.21130562 238.20520020]
[20.99647331 251.35609436]
[13.78164196 264.50698853]
[6.56681013 277.65789795]
[11.77815437 294.31906128]
[3.52302551 309.31771851]
[-12.69065952 313.65432739]
[-19.61688805 326.95950317]
[-26.54311752 340.26464844]
[-33.46934509 353.56982422]
[-40.39557648 366.87500000]
[-47.32180405 380.18014526]
[-54.24803543 393.48532104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[23 143]
[24 142]
[25 141]
[26 140]
[27 139]
[28 138]
[29 137]
[33 134]
[34 133]
[35 132]
[36 131]
[37 130]
[38 129]
[39 128]
[41 127]
[42 126]
[43 125]
[44 124]
[47 123]
[48 122]
[49 121]
[53 120]
[54 119]
[55 118]
[56 117]
[57 116]
[60 112]
[61 111]
[62 110]
[63 109]
[65 107]
[66 106]
[67 105]
[68 104]
[69 100]
[70 99]
[71 98]
[72 97]
[73 95]
[74 94]
[75 93]
[78 91]
[79 90]
[80 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
