%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:22:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUAAGCUUCGACGCAGGAGGCGGGGCUGCUCAGUCCUCCAGGCGUCGGUACUCAGCGGUGUUGGAACUUCGUUGCUUGCUUGCCUGUGCGCGCGUGCGCGGAC\
) } def
/len { sequence length } bind def

/coor [
[84.50030518 178.24429321]
[69.91677094 181.75436401]
[55.13971329 179.17781067]
[42.60467148 170.93933105]
[34.37765884 158.39674377]
[31.81463814 143.61734009]
[35.33804703 129.03701782]
[44.36716080 117.05891418]
[57.41381073 109.65722656]
[72.32440948 108.05158997]
[86.68714142 103.72586823]
[72.00879669 100.63618469]
[57.33044815 97.54650879]
[42.65209961 94.45682526]
[27.97375298 91.36714935]
[13.29540443 88.27746582]
[-3.97491384 94.44671631]
[-16.64900017 82.40876770]
[-31.41245842 79.75541687]
[-46.17591858 77.10205841]
[-60.93937683 74.44870758]
[-75.70283508 71.79534912]
[-90.50399017 69.36106110]
[-105.37078094 67.36643982]
[-120.26549530 65.59234619]
[-135.16021729 63.81824875]
[-150.01097107 70.77433014]
[-163.30384827 61.17060089]
[-161.36427307 44.88655853]
[-146.18750000 38.67382431]
[-133.38612366 48.92353058]
[-118.49140167 50.69762802]
[-103.59668732 52.47172546]
[-96.46829224 50.09945679]
[-88.28929138 54.52545547]
[-81.09373474 52.36546707]
[-73.04947662 57.03189468]
[-58.28602219 59.68524933]
[-43.52256393 62.33860397]
[-28.75910378 64.99195862]
[-13.99564552 67.64530945]
[-3.78842902 60.96797943]
[8.61785603 63.17052078]
[16.38508415 73.59912109]
[31.06343079 76.68879700]
[45.74177933 79.77848053]
[60.42012787 82.86815643]
[75.09847260 85.95783997]
[89.77681732 89.04751587]
[104.05634308 84.45456696]
[114.18109131 73.38706207]
[124.30583191 62.31956482]
[123.78214264 46.75153732]
[134.20773315 35.67174911]
[149.05268860 35.26842880]
[159.17744446 24.20092964]
[169.30218506 13.13342953]
[179.42692566 2.06593060]
[189.55168152 -9.00156879]
[199.67642212 -20.06906700]
[203.28247070 -35.47383881]
[217.58200073 -39.64189911]
[227.70674133 -50.70939636]
[230.71270752 -66.83069611]
[246.26507568 -72.03220367]
[258.36489868 -60.96305847]
[254.56494141 -45.01024628]
[238.77423096 -40.58465195]
[228.64949036 -29.51715469]
[225.76763916 -14.90400314]
[210.74391174 -9.94432259]
[200.61917114 1.12317646]
[190.49443054 12.19067574]
[180.36968994 23.25817490]
[170.24493408 34.32567215]
[160.12019348 45.39317322]
[161.03663635 60.21530914]
[150.92636108 71.58355713]
[135.37333679 72.44431305]
[125.24858856 83.51181030]
[115.12384033 94.57930756]
[129.42805481 90.06385040]
[141.39352417 99.10971832]
[140.94905090 114.10313416]
[128.46876526 122.42433929]
[114.45709229 117.06942749]
[123.90840912 128.71728516]
[133.35972595 140.36514282]
[142.81105042 152.01300049]
[152.26235962 163.66085815]
[161.71368408 175.30871582]
[177.45698547 176.69569397]
[187.54428101 188.86213684]
[185.99093628 204.58990479]
[173.71852112 214.54798889]
[158.00805664 212.82844543]
[148.18026733 200.45144653]
[150.06582642 184.76004028]
[140.61450195 173.11218262]
[131.16319275 161.46432495]
[121.71186829 149.81646729]
[112.26055145 138.16860962]
[102.80923462 126.52074432]
[105.51926422 141.27391052]
[103.90029144 156.18627930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 49]
[12 48]
[13 47]
[14 46]
[15 45]
[16 44]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 35]
[24 33]
[25 32]
[26 31]
[50 81]
[51 80]
[52 79]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[62 69]
[63 68]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
