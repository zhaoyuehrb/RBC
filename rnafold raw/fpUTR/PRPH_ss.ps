%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:39:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGCAGCGGUCUGCGGCUCCUUCCCAGCCCCCGGCCUAGCUCUGCGAACGGUGACUGCCCAUCCUUGGCCGCA\
) } def
/len { sequence length } bind def

/coor [
[178.18775940 174.44490051]
[174.34750366 166.41635132]
[174.17851257 157.42202759]
[161.62100220 149.21780396]
[149.06350708 141.01358032]
[136.50601196 132.80935669]
[123.94851685 124.60514069]
[111.39102173 116.40091705]
[90.49599457 117.56186676]
[80.03940582 99.43427277]
[66.30280304 93.40883636]
[52.56620789 87.38340759]
[38.82960510 81.35797882]
[23.08373833 82.90012360]
[14.53648090 70.70202637]
[-1.20938730 72.24417114]
[-9.75664520 60.04607010]
[-23.49324608 54.02064133]
[-37.22984695 47.99520874]
[-50.96644592 41.96977615]
[-64.90226746 49.06391907]
[-80.12602234 45.49022675]
[-89.44951630 32.93608475]
[-88.47048950 17.32917976]
[-77.65119171 6.03861189]
[-62.10018158 4.39544344]
[-49.16016006 13.17552757]
[-44.94101334 28.23317719]
[-31.20441437 34.25860977]
[-17.46781349 40.28403854]
[-3.73121381 46.30947113]
[11.03212070 44.33634567]
[20.56191254 56.96542358]
[35.32524490 54.99229813]
[44.85503769 67.62137604]
[58.59163666 73.64681244]
[72.32823944 79.67224121]
[86.06483459 85.69766998]
[93.16061401 81.23918152]
[101.46096802 80.08490753]
[109.50400543 82.43813324]
[115.87317657 87.88440704]
[119.44671631 95.46450806]
[119.59523773 103.84342194]
[132.15274048 112.04763794]
[144.71023560 120.25186157]
[157.26773071 128.45608521]
[169.82522583 136.66030884]
[182.38272095 144.86453247]
[204.59121704 143.77926636]
[214.95826721 162.63079834]
[228.69485474 168.65623474]
[242.43145752 174.68167114]
[256.16806030 180.70709229]
[271.91394043 179.16494751]
[280.46118164 191.36305237]
[292.37893677 181.75961304]
[307.39672852 178.80599976]
[322.06365967 183.18096924]
[333.00930786 193.87915039]
[337.71847534 208.44219971]
[335.10903931 223.52362061]
[325.78060913 235.65782166]
[311.87680054 242.05645752]
[296.59259033 241.24916077]
[283.44018555 233.42143250]
[275.44192505 220.37205505]
[274.43576050 205.09965515]
[259.67242432 207.07276917]
[250.14262390 194.44369507]
[236.40602112 188.41825867]
[222.66943359 182.39283752]
[208.93283081 176.36740112]
[201.83332825 181.06866455]
[193.32875061 182.41938782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 49]
[4 48]
[5 47]
[6 46]
[7 45]
[8 44]
[10 38]
[11 37]
[12 36]
[13 35]
[15 33]
[17 31]
[18 30]
[19 29]
[20 28]
[51 73]
[52 72]
[53 71]
[54 70]
[56 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
