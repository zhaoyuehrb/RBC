%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:47:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCGCGCUCAGCAGGCGGGGCGGGAGCCGCGUGCGCCCGAGGACCCGGCCGGAAGGCUUGCGCCAGCUCAGG\
) } def
/len { sequence length } bind def

/coor [
[147.76559448 166.58282471]
[162.11180115 162.19659424]
[150.55410767 152.63523865]
[138.99641418 143.07388306]
[127.43871307 133.51251221]
[115.88101196 123.95115662]
[108.50424957 122.06007385]
[104.05049133 113.73931885]
[90.41541290 110.64476776]
[85.91255188 97.40785217]
[74.76538086 87.37089539]
[59.20197678 88.01760864]
[48.04013824 77.67990875]
[47.51950836 62.83859634]
[32.08671570 59.35441589]
[27.80577469 45.08827209]
[16.65860176 35.05131149]
[5.51142931 25.01435471]
[-5.63574314 14.97739506]
[-21.06853485 11.49321175]
[-25.34947586 -2.77292967]
[-36.70440292 -12.57423878]
[-48.26210022 -22.13559914]
[-59.81979752 -31.69695854]
[-71.37749481 -41.25831985]
[-87.43584442 -46.69577789]
[-86.65627289 -63.63179016]
[-70.16632080 -67.57104492]
[-61.81613922 -52.81601715]
[-50.25843811 -43.25465775]
[-38.70074081 -33.69329834]
[-27.14304161 -24.13193703]
[-19.76627731 -22.24085808]
[-15.31251717 -13.92010212]
[-0.67704630 -11.15382957]
[4.40121603 3.83022261]
[15.54838848 13.86718178]
[26.69556046 23.90414047]
[37.84273148 33.94110107]
[52.47820282 36.70737076]
[57.55646515 51.69142532]
[72.37089539 50.65786743]
[83.81869507 60.67797470]
[84.80233765 76.22371674]
[95.94950867 86.26068115]
[109.58458710 89.35523224]
[114.08744812 102.59214783]
[125.44237518 112.39345551]
[137.00007629 121.95481873]
[148.55776978 131.51617432]
[160.11546326 141.07752991]
[171.67317200 150.63890076]
[184.33808899 158.67630005]
[197.91049194 165.06298828]
[212.62272644 159.94555664]
[226.29608154 166.61590576]
[231.08410645 180.67330933]
[244.65652466 187.05999756]
[258.22891235 193.44668579]
[274.51638794 191.53599548]
[284.09649658 204.84588623]
[277.11410522 219.68428040]
[260.75204468 220.78671265]
[251.84223938 207.01908875]
[238.26982117 200.63240051]
[224.69741821 194.24571228]
[210.81401062 199.51699829]
[196.95867920 193.23333740]
[191.52380371 178.63539124]
[177.95140076 172.24870300]
[180.09138489 187.09527588]
[171.41690063 199.33264160]
[156.69931030 202.22967529]
[144.03402710 194.19285583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 52]
[3 51]
[4 50]
[5 49]
[6 48]
[8 47]
[10 45]
[11 44]
[14 41]
[16 39]
[17 38]
[18 37]
[19 36]
[21 34]
[22 32]
[23 31]
[24 30]
[25 29]
[53 70]
[54 69]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
