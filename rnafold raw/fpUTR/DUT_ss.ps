%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:37:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUGUUCCCAGGACGGGCGCGUCUUCAGGGUGGAAGCCUGGCGCACGUCCGGAGGUGCCGAGGACCCAACCAGCCCAAACUCUGGGGGAA\
) } def
/len { sequence length } bind def

/coor [
[94.79990387 236.76628113]
[84.47317505 248.50904846]
[69.00662231 250.81552124]
[55.70308685 242.59663391]
[50.84408569 227.73312378]
[56.72389221 213.24305725]
[70.56624603 205.96821594]
[73.58572388 191.27526855]
[76.60520172 176.58232117]
[79.62467957 161.88937378]
[82.64415741 147.19642639]
[71.77226257 136.86192322]
[57.25110626 140.62170410]
[42.72994995 144.38150024]
[28.20879173 148.14128113]
[13.68763542 151.90107727]
[-0.83352113 155.66085815]
[-12.14125729 167.53802490]
[-28.01529312 163.42135620]
[-32.12578201 147.54571533]
[-20.24420357 136.24261475]
[-4.59330893 141.13970947]
[9.92784786 137.37991333]
[24.44900513 133.62013245]
[38.97016144 129.86033630]
[53.49131775 126.10054779]
[68.01247406 122.34075928]
[64.70910645 96.62365723]
[77.79373932 77.11595917]
[98.15127563 71.73791504]
[101.17075348 57.04496384]
[104.19023132 42.35201645]
[107.20970917 27.65906715]
[105.56378174 23.70869827]
[105.20559692 19.80935669]
[105.97598267 16.33664322]
[107.61585236 13.58246231]
[109.79976654 11.73094940]
[112.17444611 10.84624767]
[117.62085724 -3.13004088]
[123.06726837 -17.10632896]
[120.86877441 -32.77404022]
[132.69921875 -41.82334518]
[132.92607117 -51.16695023]
[138.57281494 -56.17458344]
[144.48815918 -69.95894623]
[150.40350342 -83.74331665]
[156.31883240 -97.52767944]
[148.26402283 -110.79040527]
[149.57673645 -126.25185394]
[159.75218201 -137.96679688]
[174.87771606 -141.43058777]
[189.13725281 -135.31134033]
[197.04771423 -121.96202087]
[195.56735229 -106.51571655]
[185.26542664 -94.91184998]
[170.10319519 -91.61234283]
[164.18786621 -77.82798004]
[158.27252197 -64.04360962]
[152.35719299 -50.25924301]
[146.67550659 -36.37693405]
[149.26356506 -21.70890045]
[137.04354858 -11.65992165]
[131.59715271 2.31636691]
[126.15073395 16.29265594]
[121.90265656 30.67854500]
[118.88317871 45.37149429]
[115.86370087 60.06444168]
[112.84422302 74.75739288]
[129.43107605 87.72769928]
[133.76232910 110.81445312]
[120.58497620 133.14468384]
[132.44660950 142.32627869]
[144.30824280 151.50787354]
[156.16987610 160.68945312]
[171.02818298 156.21611023]
[185.66702271 161.36236572]
[194.45747375 174.14936829]
[194.01945496 189.66026306]
[184.52134705 201.93078613]
[169.61540222 206.24267578]
[155.03324890 200.93792725]
[146.38201904 188.05632019]
[146.98829651 172.55108643]
[135.12666321 163.36950684]
[123.26502228 154.18791199]
[111.40338898 145.00631714]
[97.33710480 150.21589661]
[94.31762695 164.90884399]
[91.29814911 179.60180664]
[88.27867126 194.29475403]
[85.25919342 208.98770142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 92]
[8 91]
[9 90]
[10 89]
[11 88]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[30 69]
[31 68]
[32 67]
[33 66]
[39 65]
[40 64]
[41 63]
[43 61]
[45 60]
[46 59]
[47 58]
[48 57]
[72 87]
[73 86]
[74 85]
[75 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
