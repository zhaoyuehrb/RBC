%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCGUGCCGUUCUUACCCGGCCUGCCCCGCGCCGCCGCUUCCGGAAGUGGGUCUCGUCUCCUCCCAAGCGGAGCAUUUGUGCCUGAAGCUGCCGGGUCUGCUACGGCACCGCGGGGCUGCAGAAACCCGGGGGCCAAGGGCGGGCUGCUUGCCGCU\
) } def
/len { sequence length } bind def

/coor [
[226.12541199 243.11402893]
[240.76368713 239.83955383]
[229.89839172 229.49812317]
[219.03308105 219.15669250]
[208.16778564 208.81526184]
[197.30247498 198.47383118]
[186.33554077 188.24024963]
[175.26805115 178.11550903]
[164.20054626 167.99075317]
[153.13304138 157.86601257]
[142.06555176 147.74127197]
[130.99804688 137.61651611]
[113.70122528 134.78962708]
[108.23921204 117.22996521]
[93.77319336 118.05500793]
[82.89120483 108.48795319]
[81.85668182 94.03540802]
[70.59130859 84.13130188]
[59.32593155 74.22719574]
[48.06055832 64.32308960]
[36.79518127 54.41898346]
[25.52980804 44.51487732]
[14.26443291 34.61077118]
[1.33156502 34.65107346]
[-7.85268927 26.12551308]
[-8.71504307 14.02633762]
[-19.78254318 3.90159249]
[-37.38235855 8.07354259]
[-53.83584213 0.94595343]
[-62.67468643 -14.47495270]
[-60.54662704 -31.96380424]
[-72.00547791 -41.64340591]
[-83.46433258 -51.32300568]
[-94.92318726 -61.00260925]
[-109.34772491 -55.91537476]
[-124.28330231 -58.71275330]
[-135.73721313 -68.54505157]
[-140.69860840 -82.69569397]
[-137.92948914 -97.33119202]
[-149.38835144 -107.01078796]
[-160.84719849 -116.69039154]
[-169.47155762 -119.86160278]
[-172.43437195 -126.67620087]
[-183.69975281 -136.58030701]
[-194.96511841 -146.48442078]
[-206.51660156 -143.41670227]
[-217.99128723 -146.30111694]
[-226.54348755 -154.30226135]
[-230.11061096 -165.33099365]
[-227.90995789 -176.58897400]
[-238.77526855 -186.93040466]
[-249.64056396 -197.27183533]
[-260.50585938 -207.61326599]
[-274.98086548 -202.63998413]
[-290.10723877 -204.97470093]
[-302.40911865 -214.08088684]
[-309.05957031 -227.86601257]
[-308.53039551 -243.16236877]
[-300.94320679 -256.45495605]
[-288.04144287 -264.68923950]
[-272.78988647 -265.97305298]
[-258.69317627 -260.01135254]
[-248.99069214 -248.17411804]
[-245.91194153 -233.18145752]
[-250.16444397 -218.47856140]
[-239.29913330 -208.13713074]
[-228.43383789 -197.79570007]
[-217.56852722 -187.45426941]
[-199.36990356 -189.03970337]
[-185.51861572 -176.64768982]
[-185.06101990 -157.74978638]
[-173.79563904 -147.84568787]
[-162.53025818 -137.94157410]
[-151.16760254 -128.14924622]
[-139.70874023 -118.46964264]
[-128.24989319 -108.79003906]
[-114.28319550 -113.96663666]
[-99.50231934 -111.44046021]
[-87.89373779 -101.79125214]
[-82.63911438 -87.53341675]
[-85.24358368 -72.46146393]
[-73.78473663 -62.78186035]
[-62.32587814 -53.10225677]
[-50.86702728 -43.42265701]
[-39.57996368 -48.05192566]
[-27.32444763 -47.41833115]
[-16.44737434 -41.58136749]
[-9.05804443 -31.60284424]
[-6.61919594 -19.35425758]
[-9.65779781 -7.16590691]
[1.40970159 2.95883822]
[18.70652580 5.78573656]
[24.16853905 23.34539604]
[35.43391418 33.24950409]
[46.69929123 43.15361023]
[57.96466446 53.05771637]
[69.23004150 62.96182251]
[80.49541473 72.86592865]
[91.76078796 82.77003479]
[106.22680664 81.94499207]
[117.10879517 91.51204681]
[118.14331818 105.96459198]
[131.07618713 105.92429352]
[140.26043701 114.44985199]
[141.12278748 126.54902649]
[152.19029236 136.67376709]
[163.25779724 146.79850769]
[174.32528687 156.92326355]
[185.39279175 167.04800415]
[196.46028137 177.17274475]
[204.95263672 180.68220520]
[207.64390564 187.60853577]
[218.50921631 197.94996643]
[229.37451172 208.29139709]
[240.23982239 218.63282776]
[251.10511780 228.97425842]
[262.46780396 238.76658630]
[274.30010986 247.98593140]
[286.13241577 257.20529175]
[304.40289307 259.29461670]
[310.40780640 275.76013184]
[322.41995239 284.74389648]
[334.43209839 293.72766113]
[346.44427490 302.71142578]
[351.73434448 303.33404541]
[355.82238770 305.71328735]
[358.23565674 309.08294678]
[358.88076782 312.60052490]
[370.33959961 322.28012085]
[381.79846191 331.95971680]
[393.25732422 341.63934326]
[407.41226196 335.81729126]
[422.65039062 337.25180054]
[435.47009277 345.61322021]
[442.92553711 358.98016357]
[443.30346680 374.28100586]
[436.51702881 387.99972534]
[424.12576294 396.98385620]
[408.97702026 399.16891479]
[394.55191040 394.05276489]
[384.16519165 382.81112671]
[380.20370483 368.02716064]
[383.57769775 353.09817505]
[372.11886597 343.41857910]
[360.66000366 333.73898315]
[349.20114136 324.05938721]
[337.46047974 314.72360229]
[325.44833374 305.73983765]
[313.43618774 296.75604248]
[301.42404175 287.77227783]
[289.37646484 289.18283081]
[279.28683472 281.75082397]
[276.91308594 269.03759766]
[265.08074951 259.81823730]
[253.24844360 250.59890747]
[252.17118835 265.56018066]
[239.91810608 274.21246338]
[225.45857239 270.22219849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 116]
[3 115]
[4 114]
[5 113]
[6 112]
[7 110]
[8 109]
[9 108]
[10 107]
[11 106]
[12 105]
[14 102]
[17 99]
[18 98]
[19 97]
[20 96]
[21 95]
[22 94]
[23 93]
[26 91]
[27 90]
[31 84]
[32 83]
[33 82]
[34 81]
[39 76]
[40 75]
[41 74]
[43 73]
[44 72]
[45 71]
[50 68]
[51 67]
[52 66]
[53 65]
[117 155]
[118 154]
[119 153]
[121 150]
[122 149]
[123 148]
[124 147]
[128 146]
[129 145]
[130 144]
[131 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
