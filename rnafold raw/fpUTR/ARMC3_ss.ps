%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:52:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCAACGAGGCACAACAAGGGACUGGGGGUUCGUCUGCUGGGUUUGCGGAGCAGCUAGCUACUCGGCGGGAUCUCCCGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[122.96620941 141.01272583]
[109.97562408 148.51235962]
[95.15312958 146.21154785]
[85.04730988 135.12675476]
[84.12291718 120.15526581]
[92.78791046 107.91178894]
[77.81095886 108.74295807]
[62.83400345 109.57413483]
[47.85704803 110.40530396]
[32.88009262 111.23647308]
[19.52985954 119.72657776]
[6.39340639 112.70639801]
[0.17024648 123.17050934]
[-10.28410244 129.16967773]
[-22.21568871 129.26100159]
[-32.54817200 123.54016113]
[-38.67601013 113.58603668]
[-53.67345047 113.30885315]
[-64.87802124 124.45484924]
[-80.68181610 124.32987976]
[-91.70872498 113.00809479]
[-91.41667938 97.20650482]
[-79.97894287 86.29991150]
[-64.18132019 86.75901031]
[-53.39626694 98.31141663]
[-38.39882660 98.58860016]
[-26.24688721 85.13851929]
[-7.81572914 84.58903503]
[5.56223440 97.72944641]
[17.84121704 89.29879761]
[32.04892349 96.25952148]
[47.02587509 95.42835236]
[62.00283051 94.59717560]
[76.97978210 93.76600647]
[91.95674133 92.93483734]
[106.70133209 90.17858887]
[120.96718597 85.54333496]
[135.23303223 80.90808105]
[149.49887085 76.27282715]
[163.76472473 71.63757324]
[178.03057861 67.00231934]
[192.29641724 62.36706161]
[206.56227112 57.73180771]
[220.44683838 52.05564117]
[233.87428284 45.36956406]
[247.30172729 38.68349075]
[260.72918701 31.99741554]
[274.15661621 25.31134033]
[283.06121826 12.23392677]
[297.90301514 13.48704052]
[311.33047485 6.80096531]
[324.75793457 0.11488979]
[333.66250610 -12.96252346]
[348.50433350 -11.70940971]
[361.93176270 -18.39548492]
[370.53408813 -32.35728836]
[386.91656494 -31.61794472]
[394.22628784 -16.93802834]
[384.94366455 -3.41898012]
[368.61782837 -4.96803570]
[355.19039917 1.71803975]
[347.24621582 14.31722069]
[331.44400024 13.54233932]
[318.01654053 20.22841454]
[304.58911133 26.91448975]
[296.64492798 39.51367188]
[280.84271240 38.73878860]
[267.41525269 45.42486572]
[253.98780823 52.11093903]
[240.56036377 58.79701614]
[227.13290405 65.48309326]
[226.17671204 68.36585236]
[223.88026428 70.98968506]
[220.35824585 72.78389740]
[215.95220947 73.24014282]
[211.19752502 71.99765778]
[196.93167114 76.63291168]
[182.66583252 81.26816559]
[168.39997864 85.90341949]
[154.13414001 90.53867340]
[139.86828613 95.17392731]
[125.60243988 99.80918121]
[111.33658600 104.44444275]
[123.83963013 112.73141479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[12 29]
[17 26]
[18 25]
[36 83]
[37 82]
[38 81]
[39 80]
[40 79]
[41 78]
[42 77]
[43 76]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[50 65]
[51 64]
[52 63]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
