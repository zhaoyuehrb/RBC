%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:27:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUCGGGUGCGGGCGCGGCUGGGGCUGCGGCUUCAGGGUGCCUCUGACAGCUGCUGCAGGAAAC\
) } def
/len { sequence length } bind def

/coor [
[94.02077484 108.95080566]
[79.35345459 112.09240723]
[67.47985077 122.54842377]
[53.41434860 117.64832306]
[38.74702835 120.78993225]
[24.07970619 123.93153381]
[9.41238499 127.07313538]
[-5.25493717 130.21473694]
[-17.12854004 140.67074585]
[-31.19404030 135.77066040]
[-45.86136246 138.91226196]
[-60.52868271 142.05386353]
[-72.32914734 153.44161987]
[-88.01465607 148.65653992]
[-91.44929504 132.62110901]
[-79.09980774 121.83119202]
[-63.67028809 127.38654327]
[-49.00296783 124.24494171]
[-34.33564377 121.10333252]
[-23.51114845 110.87203217]
[-8.39654064 115.54741669]
[6.27078056 112.40581512]
[20.93810272 109.26421356]
[35.60542297 106.12260437]
[50.27274704 102.98100281]
[61.09724426 92.74970245]
[76.21185303 97.42508698]
[90.87917328 94.28348541]
[104.26020050 87.50498199]
[115.46990204 77.53791046]
[126.67960358 67.57083893]
[137.88931274 57.60376358]
[149.09901428 47.63669205]
[160.30871582 37.66962051]
[171.28169250 27.44250298]
[182.01190186 16.96096039]
[192.74209595 6.47941923]
[203.47230530 -4.00212193]
[214.20251465 -14.48366356]
[224.93270874 -24.96520424]
[232.03819275 -40.35833740]
[248.79675293 -37.79178619]
[250.96972656 -20.97767067]
[235.41426086 -14.23500061]
[224.68405151 -3.75345898]
[213.95384216 6.72808266]
[203.22364807 17.20962334]
[192.49343872 27.69116592]
[181.76322937 38.17270660]
[179.08886719 45.34798050]
[170.27578735 48.87932205]
[159.06608582 58.84639740]
[147.85638428 68.81346893]
[136.64668274 78.78054047]
[125.43697357 88.74761200]
[114.22727203 98.71468353]
[129.12249756 100.48449707]
[141.64714050 108.73877716]
[149.14778137 121.72879028]
[150.03535461 136.70249939]
[144.12181091 150.48764038]
[132.65997314 160.16371155]
[118.07812500 163.68077087]
[103.46553040 160.29371643]
[91.91797638 150.72010803]
[85.88189697 136.98818970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[10 19]
[11 18]
[12 17]
[29 56]
[30 55]
[31 54]
[32 53]
[33 52]
[34 51]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
