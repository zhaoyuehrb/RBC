%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGAAGGACCGCCCUUUUCUUCGUAGCCUCCAAGGGAGCUGGAACAAAAAACGAAACCAAAACCUGCCUGCUCGCUCCUCUCCCCAUCGCCUGCGUUCCGCUGGUUGUGGGCUUUCUGCGGCCGCUGAGGGCGCGUCUCCCCUCCGCC\
) } def
/len { sequence length } bind def

/coor [
[130.95602417 495.74227905]
[142.56990051 485.45162964]
[140.99148560 470.53491211]
[129.28421021 461.39843750]
[127.47098541 446.29324341]
[137.13354492 434.07550049]
[135.55513000 419.15878296]
[133.97671509 404.24206543]
[132.39831543 389.32534790]
[130.66273499 374.42608643]
[128.77018738 359.54595947]
[126.87763214 344.66583252]
[124.98508453 329.78570557]
[123.09253693 314.90557861]
[121.19998932 300.02545166]
[119.30744171 285.14532471]
[104.28240204 279.28405762]
[94.19007874 266.58441162]
[91.84654236 250.43847656]
[97.98185730 235.21986389]
[111.01636505 225.09896851]
[108.81052399 210.26205444]
[106.60467529 195.42512512]
[104.39883423 180.58821106]
[102.19298553 165.75128174]
[99.98714447 150.91436768]
[84.59367371 148.52749634]
[70.64235687 141.59809875]
[59.43912888 130.77481079]
[52.03269958 117.07076263]
[49.11636353 101.76876831]
[50.96311569 86.30120850]
[57.40008163 72.11595154]
[46.19665527 62.14183044]
[30.74451637 58.74447250]
[26.38343048 44.50262451]
[15.18000221 34.52849960]
[3.97657275 24.55437469]
[-7.22685623 14.58024979]
[-22.67899323 11.18289280]
[-27.04007912 -3.05895376]
[-38.24350739 -13.03307915]
[-50.66622162 -4.49261093]
[-64.77207184 0.82607830]
[-79.74095917 2.61376762]
[-94.70261383 0.76652271]
[-108.78718567 -4.60825968]
[-121.17581177 -13.19809723]
[-131.14823914 -24.50358772]
[-138.12467957 -37.86744308]
[-141.69953918 -52.51271057]
[-141.66497803 -67.58792877]
[-138.02299500 -82.21665192]
[-130.98533630 -95.54837036]
[-120.96117401 -106.80801392]
[-108.53328705 -115.34095001]
[-94.42420959 -120.65108490]
[-79.45424652 -122.42969513]
[-64.49371338 -120.57337952]
[-50.41240311 -115.19006348]
[-38.02898407 -106.59271240]
[-28.06340981 -95.28118134]
[-21.09506989 -81.91310120]
[-17.52909279 -67.26566315]
[-17.57279778 -52.19047165]
[-21.22364807 -37.56396103]
[-28.26938248 -24.23650742]
[-17.06595421 -14.26238251]
[-2.41516089 -11.57844162]
[2.74726915 3.37682104]
[13.95069790 13.35094643]
[25.15412712 23.32507133]
[36.35755539 33.29919815]
[51.00835037 35.98313904]
[56.17078018 50.93840027]
[67.37420654 60.91252518]
[76.40975189 54.88045883]
[86.51935577 50.90269470]
[97.24274445 49.16034698]
[108.09167480 49.73273468]
[118.57218170 52.59380722]
[128.20709229 57.61329651]
[136.55773926 64.56266022]
[148.74851990 55.82281494]
[160.93930054 47.08297348]
[173.13008118 38.34313202]
[185.32086182 29.60328674]
[192.02833557 15.27428246]
[206.88020325 14.14690781]
[219.07098389 5.40706444]
[231.26176453 -3.33277893]
[237.96923828 -17.66178322]
[252.82112122 -18.78915977]
[265.01190186 -27.52900124]
[277.20269775 -36.26884460]
[286.55252075 -50.41158676]
[302.73083496 -45.34226227]
[302.33822632 -28.39286041]
[285.94253540 -24.07806396]
[273.75173950 -15.33822155]
[261.56097412 -6.59837818]
[255.72546387 7.10549498]
[240.00161743 8.85800171]
[227.81083679 17.59784508]
[215.62005615 26.33768845]
[209.78454590 40.04156113]
[194.06069946 41.79406738]
[181.86991882 50.53391266]
[169.67913818 59.27375412]
[157.48835754 68.01359558]
[145.29757690 76.75344086]
[150.52188110 93.69029999]
[149.62358093 111.39181519]
[142.71151733 127.71279144]
[130.62338257 140.67532349]
[114.82406616 148.70852661]
[117.02990723 163.54544067]
[119.23575592 178.38237000]
[121.44159698 193.21928406]
[123.64744568 208.05621338]
[125.85328674 222.89312744]
[139.14598083 227.36491394]
[149.15708923 237.09191895]
[153.96369934 250.12599182]
[152.67712402 263.89181519]
[145.60661316 275.69570923]
[134.18757629 283.25277710]
[136.08012390 298.13290405]
[137.97267151 313.01303101]
[139.86521912 327.89315796]
[141.75776672 342.77328491]
[143.65031433 357.65341187]
[145.54286194 372.53353882]
[149.75543213 380.71667480]
[147.31503296 387.74694824]
[148.89344788 402.66366577]
[150.47184753 417.58038330]
[152.05026245 432.49710083]
[164.05584717 442.42202759]
[165.44407654 457.57217407]
[155.90821838 468.95651245]
[157.48661804 483.87322998]
[170.99699402 491.50534058]
[177.41043091 505.63500977]
[174.26081848 520.82910156]
[162.75924683 531.24511719]
[147.32832336 532.87792969]
[133.90153503 525.09967041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 142]
[3 141]
[6 138]
[7 137]
[8 136]
[9 135]
[10 133]
[11 132]
[12 131]
[13 130]
[14 129]
[15 128]
[16 127]
[21 121]
[22 120]
[23 119]
[24 118]
[25 117]
[26 116]
[33 76]
[34 75]
[36 73]
[37 72]
[38 71]
[39 70]
[41 68]
[42 67]
[83 111]
[84 110]
[85 109]
[86 108]
[87 107]
[89 105]
[90 104]
[91 103]
[93 101]
[94 100]
[95 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
