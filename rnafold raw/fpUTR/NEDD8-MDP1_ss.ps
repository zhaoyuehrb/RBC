%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:49:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAGUGACCCGGAAGUAGAAGUGGCCCUUGCAGGCAAGAGUGCUGGAGGGCGGCAGCGGCGACCGGAGCGGUAGGAGCAGCAAUUUAUCCGUGUGCAGCCCCAAACUGGAAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[132.39140320 238.10270691]
[118.79742432 231.76205444]
[107.60560608 221.77490234]
[99.76437378 208.98759460]
[95.93822479 194.48377991]
[96.45140076 179.49256897]
[101.26040649 165.28434753]
[109.95771027 153.06318665]
[121.80628204 143.86474609]
[135.80203247 138.46852112]
[150.76280212 137.33210754]
[137.70692444 129.94670105]
[124.65103912 122.56130981]
[111.59516144 115.17591858]
[97.60521698 118.94785309]
[84.99365234 111.81379700]
[81.01943970 97.87995911]
[67.96356201 90.49456787]
[52.14247131 90.43440247]
[44.87429047 77.43351746]
[29.82007217 81.43454742]
[16.68476295 73.75872040]
[12.96317005 59.38216400]
[-0.09270733 51.99676895]
[-15.91379929 51.93660355]
[-23.18197823 38.93572235]
[-36.23785400 31.55032730]
[-49.29373169 24.16493225]
[-62.34960938 16.77953529]
[-75.40548706 9.39414024]
[-88.46136475 2.00874400]
[-98.91101074 5.55572653]
[-109.35562134 2.75325990]
[-116.33444214 -5.21576834]
[-117.67709351 -15.50022888]
[-130.32501221 -23.56436157]
[-142.97293091 -31.62849426]
[-155.62084961 -39.69262695]
[-172.01899719 -39.87300110]
[-179.82496643 -54.29516602]
[-171.00863647 -68.12283325]
[-154.63949585 -67.13128662]
[-147.55671692 -52.34054184]
[-134.90879822 -44.27640915]
[-122.26087952 -36.21227646]
[-109.61296082 -28.14814568]
[-90.36364746 -28.84420013]
[-81.07596588 -11.04713345]
[-68.02008820 -3.66173720]
[-54.96421432 3.72365880]
[-41.90833664 11.10905457]
[-28.85245895 18.49445152]
[-15.79658127 25.87984657]
[-0.90933311 25.41176033]
[7.29268885 38.94089127]
[20.34856606 46.32628632]
[34.58782196 42.10975647]
[47.93354797 49.41361237]
[52.25968933 64.37763977]
[67.14693451 63.90955734]
[75.34896088 77.43869019]
[88.40483856 84.82408142]
[102.39478302 81.05214691]
[115.00634766 88.18620300]
[118.98056030 102.12004089]
[132.03643799 109.50543213]
[145.09231567 116.89083099]
[158.14819336 124.27622986]
[164.24668884 123.52553558]
[169.59783936 125.28003693]
[173.30999756 128.80729675]
[188.27732849 129.79656982]
[203.24467468 130.78585815]
[218.21202087 131.77513123]
[234.46170044 123.23814392]
[248.69566345 133.41035461]
[263.68389893 134.00419617]
[277.77957153 126.81931305]
[290.19055176 135.05441284]
[305.17880249 135.64825439]
[319.27444458 128.46336365]
[331.68542480 136.69847107]
[346.67367554 137.29231262]
[361.66192627 137.88615417]
[369.25036621 124.59427643]
[382.15289307 116.36121368]
[397.40460205 115.07885742]
[411.50073242 121.04187775]
[421.20211792 132.88003540]
[424.27941895 147.87298584]
[420.02554321 162.57546997]
[409.41796875 173.60896301]
[394.89425659 178.43804932]
[379.79183960 175.95304871]
[367.58111572 166.72497559]
[361.06808472 152.87438965]
[346.07983398 152.28054810]
[331.09158325 151.68670654]
[318.06799316 158.91407776]
[304.58493042 150.63648987]
[289.59671021 150.04264832]
[276.57308960 157.27001953]
[263.09005737 148.99244690]
[248.10182190 148.39860535]
[238.93275452 156.40885925]
[226.36308289 155.95883179]
[217.22273254 146.74247742]
[202.25540161 145.75318909]
[187.28805542 144.76391602]
[172.32070923 143.77464294]
[184.20202637 152.93075562]
[192.94287109 165.12080383]
[197.80253601 179.31178284]
[198.36918640 194.30107117]
[194.59480286 208.81845093]
[186.79924011 221.63363647]
[175.64312744 231.66065979]
[162.07185364 238.04977417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 68]
[12 67]
[13 66]
[14 65]
[17 62]
[18 61]
[20 59]
[23 56]
[24 55]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[35 46]
[36 45]
[37 44]
[38 43]
[71 110]
[72 109]
[73 108]
[74 107]
[76 104]
[77 103]
[79 101]
[80 100]
[82 98]
[83 97]
[84 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
