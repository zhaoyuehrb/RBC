%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:11:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCGGCGGCGAGGGAGGAGGAAGAAGCGGAGGAGGCGGCUCCCGCGCUCGCAGGGCCGUGCCACCUGCCCGCCCGCCCGCUCGCUCGCUCGCCCGCCGCGCCGCGCUGCCGACCGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[237.88829041 372.26049805]
[244.28118896 353.33432007]
[236.83747864 340.31161499]
[229.39375305 327.28890991]
[221.95004272 314.26617432]
[214.50631714 301.24346924]
[207.06260681 288.22076416]
[199.61888123 275.19805908]
[192.00674438 262.27307129]
[184.22746277 249.44798279]
[176.44816589 236.62289429]
[168.66888428 223.79782104]
[155.45285034 216.92863464]
[154.91123962 201.11671448]
[147.13195801 188.29162598]
[139.35267639 175.46655273]
[131.40754700 162.74353027]
[123.29794312 150.12472534]
[115.18833160 137.50592041]
[99.71463776 140.46354675]
[84.28420258 137.28797913]
[71.23585510 128.46057129]
[62.54737854 115.31929779]
[59.53570557 99.85604095]
[62.65732956 84.41459656]
[71.43909454 71.33548737]
[63.00462341 58.93146515]
[54.57014847 46.52744675]
[46.13567734 34.12342834]
[38.62925720 28.70371056]
[37.64815521 21.28610229]
[23.67818832 13.85975933]
[23.30633736 -1.03020322]
[15.19672489 -13.64900589]
[7.08711243 -26.26780891]
[-6.88285542 -33.69415283]
[-7.25470686 -48.58411407]
[-15.36431885 -61.20291901]
[-23.47393227 -73.82172394]
[-34.36661148 -75.55187225]
[-42.29946136 -82.89253998]
[-44.76453400 -93.18857574]
[-41.16933060 -102.91107178]
[-48.61304855 -115.93378448]
[-55.67499161 -121.92115784]
[-56.07593918 -129.39262390]
[-63.17906952 -142.60418701]
[-70.28219604 -155.81575012]
[-77.38533020 -169.02732849]
[-90.21126556 -180.11477661]
[-83.10768127 -195.50878906]
[-66.34881592 -192.94430542]
[-64.17375946 -176.13044739]
[-57.07062912 -162.91888428]
[-49.96749878 -149.70732117]
[-42.86437225 -136.49574280]
[-35.59033203 -123.37750244]
[-28.14661598 -110.35478973]
[-10.78334713 -102.00921631]
[-10.85512829 -81.93133545]
[-2.74551606 -69.31253052]
[5.36409616 -56.69372940]
[18.75400925 -50.16996384]
[19.70591545 -34.37742233]
[27.81552696 -21.75861931]
[35.92514038 -9.13981533]
[49.31505203 -2.61605334]
[50.26696014 13.17649078]
[58.53969955 25.68895531]
[66.97416687 38.09297562]
[75.40863800 50.49699402]
[83.84310913 62.90101242]
[97.51708984 59.61169815]
[111.49100494 61.20133209]
[124.07679749 67.47789001]
[133.75408936 77.68315887]
[139.35383606 90.58432007]
[140.19961548 104.62290955]
[136.18922424 118.10304260]
[127.80712891 129.39631653]
[135.91674805 142.01512146]
[144.02635193 154.63392639]
[151.38954163 160.24668884]
[152.17774963 167.68725586]
[159.95704651 180.51234436]
[167.73632812 193.33741760]
[181.50878906 201.12393188]
[181.49395752 216.01852417]
[189.27325439 228.84361267]
[197.05253601 241.66868591]
[204.83181763 254.49377441]
[212.04682922 260.29580688]
[212.64160156 267.75433350]
[220.08531189 280.77703857]
[227.52903748 293.79974365]
[234.97274780 306.82247925]
[242.41647339 319.84518433]
[249.86018372 332.86788940]
[257.30389404 345.89062500]
[268.18231201 346.05419922]
[277.90921021 350.74346924]
[284.70922852 359.02651978]
[287.37347412 369.32275391]
[285.47378540 379.70431519]
[279.43008423 388.25689697]
[285.83792114 401.81933594]
[292.24572754 415.38177490]
[298.65356445 428.94421387]
[311.54461670 438.11651611]
[309.98577881 452.92932129]
[323.76724243 461.81768799]
[322.69030762 478.18142700]
[307.86282349 485.18695068]
[294.53802490 475.62756348]
[296.42333984 459.33715820]
[283.99060059 451.13491821]
[285.09112549 435.35202026]
[278.68328857 421.78958130]
[272.27545166 408.22714233]
[265.86764526 394.66470337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[4 97]
[5 96]
[6 95]
[7 94]
[8 93]
[9 91]
[10 90]
[11 89]
[12 88]
[14 86]
[15 85]
[16 84]
[17 82]
[18 81]
[19 80]
[26 72]
[27 71]
[28 70]
[29 69]
[31 68]
[33 66]
[34 65]
[35 64]
[37 62]
[38 61]
[39 60]
[43 58]
[44 57]
[46 56]
[47 55]
[48 54]
[49 53]
[105 120]
[106 119]
[107 118]
[108 117]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
