%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGAGGCGCCCUGGAGUCUCCCCUCCAGCGAGAGGGGCUGCGCGGGCCGGGCCGGGCCGGGCUGGGCUGGAGCAGCGGCGGCCGCGGGAGCCGAGCUUGCAGCGAGGGACCGGCUGAGGCGCGCGGGAGGGAAGGAGGCAAGGGCUCCGCGGCGCUGUCGCCGCCGCUGCCGCUCACUCUCGGGGAAGAG\
) } def
/len { sequence length } bind def

/coor [
[51.36318588 280.73611450]
[45.24811554 283.17169189]
[38.73069000 283.58709717]
[32.34841919 297.16159058]
[25.96614838 310.73605347]
[19.58387947 324.31054688]
[13.20160866 337.88504028]
[6.81933784 351.45953369]
[0.43706727 365.03399658]
[8.03460693 378.56387329]
[6.19506216 393.97152710]
[-4.37422514 405.33239746]
[-19.60914803 408.27804565]
[-33.65156555 401.67575073]
[-41.10188675 388.06427002]
[-39.09530640 372.67749023]
[-28.40339851 361.43191528]
[-13.13741684 358.65173340]
[-6.75514650 345.07723999]
[-0.37287602 331.50277710]
[6.00939465 317.92828369]
[12.39166451 304.35379028]
[18.77393532 290.77932739]
[25.15620613 277.20483398]
[20.49102592 254.55180359]
[40.03909683 240.88642883]
[45.06729126 226.75428772]
[50.09548569 212.62216187]
[45.18762589 201.55555725]
[49.27278137 189.73446655]
[60.67419434 183.68247986]
[65.93174744 169.63406372]
[71.18930817 155.58563232]
[76.44686127 141.53721619]
[81.70442200 127.48880005]
[86.96198273 113.44038391]
[80.41666412 105.25208282]
[79.00369263 94.04094696]
[83.96919250 82.98712158]
[69.79660034 78.07411194]
[55.62400818 73.16110229]
[41.45141602 68.24808502]
[27.27882576 63.33507919]
[11.70565128 66.12555695]
[2.21465278 54.64643478]
[-13.35852242 57.43691635]
[-22.84952164 45.95779419]
[-37.02210999 41.04478455]
[-51.19470215 36.13177109]
[-65.36729431 31.21876144]
[-80.94046783 34.00924301]
[-90.43146515 22.53012085]
[-104.60405731 17.61710930]
[-118.77664948 12.70409870]
[-132.94923401 7.79108810]
[-147.05723572 14.91429996]
[-162.04364014 9.89602184]
[-169.01728821 -4.28649044]
[-163.84085083 -19.21900558]
[-149.58540344 -26.04232597]
[-134.70845032 -20.70829582]
[-128.03622437 -6.38150263]
[-113.86363983 -1.46849167]
[-99.69104767 3.44451904]
[-85.51845551 8.35752964]
[-70.95899963 5.21563911]
[-60.45428085 17.04617119]
[-46.28169250 21.95918274]
[-32.10910034 26.87219238]
[-17.93651009 31.78520393]
[-3.37705326 28.64331245]
[7.12766361 40.47384644]
[21.68712044 37.33195496]
[32.19183731 49.16248703]
[46.36442947 54.07549667]
[60.53701782 58.98851013]
[74.70960999 63.90151978]
[88.88220215 68.81452942]
[103.78493500 67.10906982]
[116.48115540 59.12120819]
[129.17736816 51.13334274]
[141.87359619 43.14548111]
[154.56982422 35.15761566]
[167.26603699 27.16975212]
[174.82640076 13.27186108]
[189.71925354 13.04324627]
[202.41548157 5.05538273]
[215.11169434 -2.93248081]
[230.78837585 -29.56153297]
[240.99948120 -40.54940033]
[251.21058655 -51.53726578]
[261.42169189 -62.52513504]
[271.63281250 -73.51300049]
[281.84393311 -84.50086975]
[283.01290894 -89.61923218]
[285.76049805 -93.39218140]
[289.30581665 -95.44274139]
[292.83178711 -95.76034546]
[303.56707764 -106.23667145]
[314.30239868 -116.71299744]
[325.03768921 -127.18932343]
[335.77297974 -137.66564941]
[336.13180542 -153.23835754]
[347.16815186 -163.70991516]
[362.01214600 -163.27185059]
[355.50866699 -178.82533264]
[355.47152710 -195.64697266]
[361.87817383 -211.16113281]
[373.72167969 -223.00320435]
[389.16873169 -229.37994385]
[405.84344482 -229.34107971]
[421.19284058 -222.92074585]
[431.58145142 -233.74095154]
[441.97006226 -244.56115723]
[452.27026367 -255.46554565]
[462.48135376 -266.45343018]
[461.65228271 -282.23593140]
[472.28790283 -293.92608643]
[488.07830811 -294.58825684]
[499.65533447 -283.82962036]
[500.15054321 -268.03311157]
[489.27011108 -256.57046509]
[473.46923828 -256.24230957]
[463.25811768 -245.25444031]
[461.00430298 -238.20381165]
[452.79025269 -234.17254639]
[442.40164185 -223.35234070]
[432.01303101 -212.53213501]
[438.10641479 -200.73875427]
[440.26885986 -187.61845398]
[438.27569580 -174.44830322]
[432.30734253 -162.51464844]
[422.93322754 -152.98742676]
[411.05734253 -146.80552673]
[397.83126831 -144.58419800]
[384.54235840 -146.55392456]
[372.48846436 -152.53654480]
[372.56399536 -137.68630981]
[361.82611084 -126.90888977]
[346.24929810 -126.93035889]
[335.51400757 -116.45403290]
[324.77871704 -105.97770691]
[314.04342651 -95.50138092]
[303.30810547 -85.02505493]
[292.83178711 -74.28975677]
[282.62066650 -63.30188751]
[272.40957642 -52.31402206]
[262.19845581 -41.32615662]
[251.98735046 -30.33828926]
[241.77622986 -19.35042191]
[244.56776428 -4.61246634]
[258.08984375 1.88007212]
[271.61193848 8.37261009]
[285.13403320 14.86514854]
[298.65612793 21.35768700]
[312.17822266 27.85022545]
[328.48010254 26.06685638]
[337.95596313 39.45119095]
[330.85781860 54.23457718]
[314.48764038 55.20912933]
[305.68566895 41.37231827]
[292.16360474 34.87977982]
[278.64151001 28.38723946]
[265.11941528 21.89470100]
[251.59732056 15.40216351]
[238.07522583 8.90962505]
[223.09956360 9.76374054]
[210.40335083 17.75160408]
[197.70712280 25.73946762]
[191.05487061 39.06601334]
[175.25390625 39.86597443]
[162.55767822 47.85383606]
[149.86146545 55.84170151]
[137.16523743 63.82956314]
[124.46901703 71.81742859]
[111.77279663 79.80529022]
[121.43391418 95.88388062]
[115.97327423 112.48783112]
[101.01039886 118.69793701]
[95.75283813 132.74635315]
[90.49528503 146.79478455]
[85.23772430 160.84320068]
[79.98017120 174.89161682]
[74.72261047 188.94003296]
[78.18183136 207.01922607]
[64.22762299 217.65034485]
[59.19942474 231.78248596]
[54.17123032 245.91462708]
[58.61355972 251.18380737]
[61.18312073 257.52313232]
[61.65611649 264.29534912]
[60.01781845 270.83020020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[26 188]
[27 187]
[28 186]
[31 184]
[32 183]
[33 182]
[34 181]
[35 180]
[36 179]
[39 78]
[40 77]
[41 76]
[42 75]
[43 74]
[45 72]
[47 70]
[48 69]
[49 68]
[50 67]
[52 65]
[53 64]
[54 63]
[55 62]
[79 176]
[80 175]
[81 174]
[82 173]
[83 172]
[84 171]
[86 169]
[87 168]
[88 167]
[89 150]
[90 149]
[91 148]
[92 147]
[93 146]
[94 145]
[98 144]
[99 143]
[100 142]
[101 141]
[102 140]
[105 137]
[112 128]
[113 127]
[114 126]
[115 124]
[116 123]
[151 166]
[152 165]
[153 164]
[154 163]
[155 162]
[156 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
