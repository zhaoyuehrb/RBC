%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:14:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCAUCCCCCAGCCGCCGCCAGCCCCGCCGAGGGGAGCCAGCGCCGUCUCUGAGGGGCGUCCGGCGCCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[55.37794876 315.86099243]
[58.36273575 296.71051025]
[58.98261261 281.72332764]
[59.60248566 266.73614502]
[56.64685440 259.72283936]
[60.57038498 251.14614868]
[61.80907822 236.19738770]
[63.04776764 221.24861145]
[61.02113342 218.92242432]
[59.93870163 215.53939819]
[60.25608826 211.51614380]
[62.24348831 207.44421387]
[65.92444611 204.00959778]
[61.54826736 189.77238464]
[72.43655396 178.29389954]
[76.11883545 163.75288391]
[79.80111694 149.21188354]
[83.48339844 134.67088318]
[87.16567993 120.12987518]
[77.80850983 108.80166626]
[76.85727692 94.13946533]
[84.67229462 81.69718170]
[98.29331207 76.18784332]
[101.97560120 61.64683914]
[105.65788269 47.10583496]
[109.34016418 32.56483078]
[113.02244568 18.02382660]
[108.90964508 2.74654007]
[119.53454590 -7.69188595]
[115.42174530 -22.96917152]
[126.04664612 -33.40759659]
[129.72892761 -47.94860077]
[133.41120911 -62.48960495]
[137.09349060 -77.03060913]
[132.98069763 -92.30789185]
[143.60560608 -102.74632263]
[142.67950439 -112.13226318]
[147.75219727 -117.80587769]
[152.03224182 -132.18229675]
[147.70167542 -147.99931335]
[159.42514038 -159.46633911]
[175.14253235 -154.78706360]
[178.68515015 -138.77513123]
[166.40866089 -127.90224457]
[162.12861633 -113.52583313]
[158.14660645 -99.06404114]
[162.52278137 -84.82682037]
[151.63450623 -73.34832764]
[147.95222473 -58.80732346]
[144.26994324 -44.26631927]
[140.58764648 -29.72531509]
[144.96383667 -15.48809910]
[134.07554626 -4.00960350]
[138.45173645 10.22761250]
[127.56344604 21.70610809]
[123.88116455 36.24711227]
[120.19888306 50.78811646]
[116.51660156 65.32911682]
[112.83432007 79.87012482]
[122.19149017 91.19833374]
[123.14272308 105.86053467]
[115.32770538 118.30281830]
[101.70668793 123.81215668]
[98.02439880 138.35316467]
[94.34211731 152.89416504]
[90.65983582 167.43516541]
[86.97755432 181.97618103]
[91.09035492 197.25346375]
[80.46545410 207.69187927]
[77.99653625 222.48730469]
[76.75784302 237.43606567]
[75.51915741 252.38484192]
[74.58967590 267.35601807]
[73.96979523 282.34320068]
[73.34992218 297.33038330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 75]
[3 74]
[4 73]
[6 72]
[7 71]
[8 70]
[13 69]
[15 67]
[16 66]
[17 65]
[18 64]
[19 63]
[23 59]
[24 58]
[25 57]
[26 56]
[27 55]
[29 53]
[31 51]
[32 50]
[33 49]
[34 48]
[36 46]
[38 45]
[39 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
