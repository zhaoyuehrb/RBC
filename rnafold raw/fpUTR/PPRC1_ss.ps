%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGUUCCUUUCCCACAAUCGGCUGGGCGAGGCGGCGCCAGCGAUCAGAGCAGCGCUGGGUGUUCAGGGGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[100.53363800 246.49697876]
[95.19601440 231.92683411]
[99.47427368 217.01119995]
[111.72334290 207.48545837]
[111.10346985 192.49826050]
[110.48359680 177.51107788]
[109.86372375 162.52389526]
[109.24385071 147.53671265]
[108.62397003 132.54951477]
[99.02640533 133.07131958]
[89.84303284 130.87072754]
[81.81597900 126.22406006]
[75.56562042 119.60113525]
[71.54288483 111.61929321]
[69.99738312 102.98664856]
[70.96366882 94.43952942]
[74.26602173 86.67974854]
[79.54093170 80.31697845]
[71.86265564 67.43116760]
[64.18437958 54.54535675]
[56.50609970 41.65954590]
[49.21438599 35.67753601]
[48.78947830 28.07873917]
[41.65026855 14.88663292]
[34.51105499 1.69452631]
[27.37184525 -11.49757957]
[19.96151924 -24.53932381]
[12.28324413 -37.42513275]
[-3.09703803 -41.06140518]
[-11.33010674 -54.55184937]
[-7.53142834 -69.89282990]
[6.04530859 -77.98281097]
[21.34526634 -74.02214813]
[29.29125214 -60.36063766]
[25.16905403 -45.10340881]
[32.84732819 -32.21759796]
[39.15760040 -27.96287155]
[40.56395340 -18.63679123]
[47.70316315 -5.44468451]
[54.84237289 7.74742174]
[61.98158646 20.93952751]
[69.39191437 33.98126984]
[77.07018280 46.86708069]
[84.74845886 59.75289154]
[92.42673492 72.63870239]
[111.80670166 72.25691223]
[128.06529236 84.81121063]
[133.15051270 105.90660095]
[148.13769531 105.28672791]
[163.12487793 104.66684723]
[178.11206055 104.04697418]
[193.09925842 103.42710114]
[206.56788635 95.12612152]
[219.60403442 102.33085632]
[233.15791321 93.09915161]
[247.81022644 100.46406555]
[248.48791504 116.84920502]
[234.49385071 125.39894104]
[220.22390747 117.31803894]
[207.82725525 125.57468414]
[193.71913147 118.41428375]
[178.73194885 119.03416443]
[163.74475098 119.65403748]
[148.75756836 120.27391052]
[133.77038574 120.89378357]
[123.61116028 131.92964172]
[124.23103333 146.91682434]
[124.85090637 161.90402222]
[125.47077942 176.89120483]
[126.09066010 191.87838745]
[126.71053314 206.86557007]
[139.70439148 215.34727478]
[145.19976807 229.85865784]
[141.08357239 244.81982422]
[128.93855286 254.47789001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 71]
[5 70]
[6 69]
[7 68]
[8 67]
[9 66]
[18 45]
[19 44]
[20 43]
[21 42]
[23 41]
[24 40]
[25 39]
[26 38]
[27 36]
[28 35]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
