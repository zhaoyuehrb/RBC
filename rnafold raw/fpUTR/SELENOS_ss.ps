%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:56:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCACGACCGCGUCCGGGCGCGCCACGUGUGCGUAGGAGCGCACCGGAAGCGCCCGGCUGGAGGCGCGGCGGCAGGGCUGGGCGGCGGCGGCGGCGGCGGUC\
) } def
/len { sequence length } bind def

/coor [
[93.67489624 268.17285156]
[93.67489624 253.17285156]
[93.67489624 238.17285156]
[93.67489624 223.17285156]
[84.06774902 208.57308960]
[93.18643951 192.66505432]
[92.73339081 177.67189026]
[89.32854462 170.96965027]
[92.50000000 162.22056580]
[92.50000000 147.22056580]
[92.50000000 132.22056580]
[92.50000000 117.22055817]
[83.41391754 111.03800964]
[78.93857574 100.30209351]
[81.17003632 88.23365784]
[90.06864166 78.87364197]
[77.98686981 69.98371124]
[65.90510559 61.09377670]
[53.82333755 52.20384216]
[41.74157333 43.31391144]
[29.65980530 34.42397690]
[17.57803917 25.53404427]
[4.69700909 30.69940376]
[-8.94025326 28.79705811]
[-19.74384880 20.43692207]
[-24.92411804 7.91439438]
[-23.21158600 -5.41899109]
[-35.01933670 -14.66977406]
[-43.86237335 -17.56899071]
[-47.03843689 -24.38262558]
[-58.56139755 -33.98581696]
[-70.08436584 -43.58901215]
[-81.60732269 -53.19220352]
[-93.13028717 -62.79539490]
[-104.65325165 -72.39859009]
[-120.89610291 -74.65734863]
[-126.80980682 -89.95310211]
[-116.31085968 -102.55088806]
[-100.19967651 -99.49118805]
[-95.05006409 -83.92155457]
[-83.52709961 -74.31835938]
[-72.00413513 -64.71516418]
[-60.48117065 -55.11197662]
[-48.95820618 -45.50878143]
[-37.43524170 -35.90559006]
[-25.76855469 -26.47752571]
[-13.96080208 -17.22674370]
[1.58837557 -22.24427223]
[17.24012375 -17.00992203]
[26.83279228 -3.37782717]
[26.46797180 13.45227718]
[38.54973984 22.34221077]
[50.63150406 31.23214340]
[62.71327209 40.12207413]
[74.79503632 49.01200867]
[86.87680817 57.90194321]
[98.95857239 66.79187775]
[113.67034912 69.71823120]
[128.23448181 66.12849426]
[142.79861450 62.53876114]
[157.36273193 58.94902420]
[163.01687622 46.61422348]
[174.60145569 39.93263626]
[187.72016907 41.17840958]
[197.54389954 49.66542053]
[212.20979309 46.51720428]
[224.07868958 36.05584335]
[238.14639282 40.94959641]
[252.81230164 37.80138016]
[267.47821045 34.65316391]
[282.14410400 31.50494576]
[290.51348877 18.09863472]
[305.92980957 14.61842728]
[319.24688721 23.12907028]
[322.56393433 38.58134842]
[313.91296387 51.80770111]
[298.42648315 54.96116638]
[285.29232788 46.17084885]
[270.62643433 49.31906509]
[255.96051025 52.46728134]
[241.29461670 55.61549759]
[230.47473145 65.85167694]
[215.35801697 61.18310928]
[200.69210815 64.33132172]
[192.25401306 78.79120636]
[175.66168213 82.83235931]
[160.95246887 73.51315308]
[146.38833618 77.10289001]
[131.82421875 80.69261932]
[117.26008606 84.28235626]
[120.59780121 104.40516663]
[107.50000000 117.22055817]
[107.50000000 132.22056580]
[107.50000000 147.22056580]
[107.50000000 162.22056580]
[107.72654724 177.21884155]
[108.17959595 192.21200562]
[117.07734680 201.69993591]
[117.05435181 214.30416870]
[108.67489624 223.17285156]
[108.67489624 238.17285156]
[108.67489624 253.17285156]
[108.67489624 268.17285156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 100]
[6 97]
[7 96]
[9 95]
[10 94]
[11 93]
[12 92]
[16 57]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[27 47]
[28 46]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[58 90]
[59 89]
[60 88]
[61 87]
[65 84]
[66 83]
[68 81]
[69 80]
[70 79]
[71 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
