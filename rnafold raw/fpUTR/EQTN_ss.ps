%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:02:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAGACACAGGACCUGCUGGGCCACAGAAAGGAGGCUCUGGGUAGACGCACUAGAUUACUGGAUAAAUCACUUCAAUUUCCCA\
) } def
/len { sequence length } bind def

/coor [
[183.24696350 129.76974487]
[168.67774963 126.20072174]
[154.10853577 122.63169098]
[143.45434570 128.67160034]
[131.17160034 125.64056396]
[124.11254883 114.65828705]
[109.68516541 110.55333710]
[96.08006287 113.77713776]
[86.20989227 103.87404633]
[71.78250122 99.76910400]
[57.35511780 95.66415405]
[42.92773438 91.55921173]
[27.53696251 95.22454834]
[17.41295815 84.29962921]
[2.98557425 80.19468689]
[-11.44181061 76.08974457]
[-26.83258247 79.75508118]
[-36.95658493 68.83016205]
[-51.38397217 64.72521973]
[-61.88774490 75.85757446]
[-76.36560822 80.82246399]
[-91.49064636 78.47900391]
[-103.78723907 69.36569214]
[-110.42971802 55.57671356]
[-109.89169312 40.28066254]
[-102.29679871 26.99246788]
[-89.39028168 18.76565552]
[-74.13796997 17.49068642]
[-60.04473114 23.46054077]
[-50.34908676 35.30339050]
[-47.27902603 50.29783249]
[-32.85164261 54.40277863]
[-18.49281311 50.44382858]
[-7.33686543 61.66235733]
[7.09051895 65.76730347]
[21.51790428 69.87224579]
[35.87673187 65.91329956]
[47.03268051 77.13182831]
[61.46006393 81.23677063]
[75.88745117 85.34171295]
[90.31483459 89.44666290]
[103.91993713 86.22286224]
[113.79010773 96.12595367]
[128.21749878 100.23089600]
[145.83015442 95.25754547]
[157.67756653 108.06247711]
[172.24678040 111.63150787]
[186.81599426 115.20053101]
[203.12657166 94.28615570]
[227.74772644 84.62641144]
[253.78196716 88.84612274]
[273.97732544 105.69319916]
[287.40475464 99.00712585]
[300.83221436 92.32104492]
[314.25967407 85.63497162]
[322.86199951 71.67317200]
[339.24447632 72.41251373]
[346.55419922 87.09243011]
[337.27154541 100.61148071]
[320.94573975 99.06242371]
[307.51828003 105.74849701]
[294.09085083 112.43457031]
[280.66339111 119.12065125]
[282.45822144 126.55979156]
[283.09078979 134.18997192]
[282.54495239 141.83062744]
[280.83248901 149.30075073]
[277.99279785 156.42318726]
[274.09207153 163.02885437]
[269.22171021 168.96078491]
[263.49606323 174.07774353]
[257.05001831 178.25773621]
[250.03553772 181.40080261]
[242.61825562 183.43147278]
[234.97349548 184.30053711]
[227.28216553 183.98628235]
[219.72640991 182.49499512]
[212.48536682 179.86083984]
[205.73089600 176.14511108]
[199.62350464 171.43479919]
[194.30848694 165.84049988]
[189.91255188 159.49389648]
[186.54074097 152.54460144]
[184.27391052 145.15669250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[6 44]
[7 43]
[9 41]
[10 40]
[11 39]
[12 38]
[14 36]
[15 35]
[16 34]
[18 32]
[19 31]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
