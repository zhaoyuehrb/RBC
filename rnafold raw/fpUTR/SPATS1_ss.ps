%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:05:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGUGGGAGAAGCAGGCGGCUGCGGUGUCCCUUUUGCCCUAGGCUCUCGGUUCUCAGGCCUCGGCGUGCGGCGUGCGUUCGGCAGUUCAGUUGCCAGUUG\
) } def
/len { sequence length } bind def

/coor [
[41.14583206 308.12692261]
[35.72720718 322.11401367]
[30.30858040 336.10110474]
[35.44727325 351.29888916]
[26.64823151 364.71368408]
[10.66132927 366.05477905]
[-0.24965142 354.29339600]
[2.28526044 338.45187378]
[16.32149696 330.68246460]
[21.74012184 316.69537354]
[27.15874672 302.70831299]
[32.14406967 288.56097412]
[36.69136047 274.26684570]
[41.23865128 259.97271729]
[37.72375870 245.49879456]
[49.28051376 234.69360352]
[53.82780457 220.39947510]
[58.37509537 206.10534668]
[62.92238617 191.81121826]
[67.46967316 177.51708984]
[72.01696777 163.22296143]
[76.56425476 148.92883301]
[81.11154938 134.63470459]
[77.59665680 120.16075897]
[89.15341187 109.35558319]
[86.35011292 95.65766144]
[96.55245972 86.09712982]
[101.09974670 71.80300140]
[105.64704132 57.50886917]
[110.19432831 43.21473694]
[97.56879425 31.80063629]
[91.14215088 16.09942055]
[92.13491058 -0.78235435]
[100.30462646 -15.52656269]
[114.00286865 -25.25568771]
[130.50764465 -28.09436798]
[134.16635132 -42.64132309]
[137.82505798 -57.18827820]
[141.48376465 -71.73522949]
[137.34620667 -87.00582886]
[147.95417786 -97.46146393]
[151.61288452 -112.00841522]
[147.47531128 -127.27901459]
[158.08328247 -137.73464966]
[161.74198914 -152.28160095]
[165.40069580 -166.82856750]
[157.15562439 -177.61003113]
[156.68902588 -190.97903442]
[163.94699097 -201.98237610]
[176.05551147 -206.67448425]
[180.16046143 -221.10186768]
[184.26541138 -235.52925110]
[188.37034607 -249.95663452]
[183.84780884 -265.71984863]
[195.43098450 -277.32855225]
[211.20411682 -272.84069824]
[214.94113159 -256.87301636]
[202.79772949 -245.85168457]
[198.69279480 -231.42430115]
[194.58784485 -216.99691772]
[190.48289490 -202.56953430]
[199.28941345 -188.33450317]
[195.07429504 -171.78866577]
[179.94764709 -163.16986084]
[176.28894043 -148.62289429]
[172.63023376 -134.07594299]
[177.02949524 -119.84584045]
[166.15983582 -108.34971619]
[162.50112915 -93.80275726]
[166.90037537 -79.57265472]
[156.03071594 -68.07652283]
[152.37200928 -53.52957153]
[148.71330261 -38.98261642]
[145.05459595 -24.43566322]
[155.81327820 -16.83283424]
[163.32199097 -5.96906614]
[166.64776611 6.84474802]
[165.36399841 20.05311775]
[159.60502625 32.04477310]
[150.05247498 41.34923172]
[137.85462952 46.81709671]
[124.48845673 47.76202774]
[119.94116974 62.05615616]
[115.39387512 76.35028839]
[110.84658813 90.64441681]
[113.64988708 104.34233856]
[103.44754028 113.90287018]
[106.63718414 129.39921570]
[95.40567780 139.18199158]
[90.85838318 153.47612000]
[86.31109619 167.77024841]
[81.76380920 182.06437683]
[77.21651459 196.35850525]
[72.66922760 210.65263367]
[68.12193298 224.94676208]
[63.57464600 239.24089050]
[66.76428223 254.73724365]
[55.53277969 264.52001953]
[50.98548889 278.81414795]
[46.43819809 293.10827637]
[47.52296829 299.91757202]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[12 100]
[13 99]
[14 98]
[16 96]
[17 95]
[18 94]
[19 93]
[20 92]
[21 91]
[22 90]
[23 89]
[25 87]
[27 85]
[28 84]
[29 83]
[30 82]
[36 74]
[37 73]
[38 72]
[39 71]
[41 69]
[42 68]
[44 66]
[45 65]
[46 64]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
