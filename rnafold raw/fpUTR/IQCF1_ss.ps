%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:55:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCCUUUCUUCCUCCACCCUUCCUGCCUAUGCUAUGGCUGGAUGAACACAGAUGUGAGGGGAUUUGAACCAUCUACAAUCAAUCCAUAUGUGACCA\
) } def
/len { sequence length } bind def

/coor [
[186.52697754 254.41149902]
[192.44615173 240.57139587]
[201.03045654 228.20632935]
[190.67926025 217.35032654]
[186.99763489 216.96301270]
[183.35017395 214.65441895]
[180.69515991 210.47685242]
[179.92156982 204.93528748]
[170.64918518 193.14448547]
[161.37680054 181.35368347]
[142.99481201 175.71878052]
[139.96202087 155.91482544]
[129.96047974 144.73585510]
[119.95894623 133.55688477]
[109.95741272 122.37792206]
[99.95587921 111.19895172]
[89.77823639 100.18007660]
[79.42704773 89.32406616]
[69.07586670 78.46805573]
[51.35467148 73.78961182]
[47.69783401 56.70673370]
[37.00742340 46.18460846]
[25.21662521 36.91222382]
[12.47074413 29.00384331]
[-0.27513707 21.09546089]
[-16.08079529 20.39423943]
[-22.81618118 7.10951710]
[-35.56206131 -0.79886514]
[-48.30794525 -8.70724678]
[-62.62522507 -2.72434425]
[-77.71701813 -6.33231258]
[-87.78022003 -18.14381409]
[-88.94532776 -33.61708832]
[-80.76432800 -46.80234146]
[-66.38298798 -52.62957764]
[-51.33122253 -48.85810471]
[-41.39674377 -36.93812943]
[-40.39956284 -21.45312881]
[-27.65368080 -13.54474640]
[-14.90779877 -5.63636446]
[-0.01381065 -5.50080347]
[7.63324499 8.34957981]
[20.37912560 16.25796127]
[33.12500763 24.16634369]
[30.96791840 9.32225513]
[38.62986374 -3.57327056]
[52.69837189 -8.77683163]
[66.90762329 -3.97087002]
[74.92910004 8.70413876]
[73.19021606 23.60300636]
[62.46541977 34.09008408]
[47.52954483 35.49419785]
[58.21995926 46.01631927]
[70.42892456 46.26866150]
[79.42855835 55.10842133]
[79.93187714 68.11687469]
[90.28305817 78.97288513]
[100.63424683 89.82889557]
[108.17514801 93.10442352]
[111.13484192 101.19741821]
[121.13637543 112.37638855]
[131.13790894 123.55535126]
[141.13945007 134.73431396]
[151.14097595 145.91328430]
[162.24942017 145.90739441]
[171.28404236 151.98129272]
[175.30371094 161.85937500]
[173.16758728 172.08129883]
[182.43997192 183.87210083]
[191.71237183 195.66290283]
[201.53527832 206.99914551]
[211.88645935 217.85514832]
[224.64598083 209.86894226]
[238.75204468 204.61499023]
[253.62701416 202.30847168]
[268.66177368 203.04382324]
[283.24066162 206.79092407]
[296.76669312 213.39636230]
[308.68597412 222.58961487]
[318.51037598 233.99423218]
[325.83767700 247.14321899]
[330.36776733 261.49810791]
[331.91519165 276.47109985]
[330.41650391 291.44906616]
[325.93316650 305.81863403]
[318.64871216 318.99139404]
[308.86145020 330.42791748]
[296.97216797 339.65991211]
[283.46771240 346.30932617]
[268.90109253 350.10388184]
[253.86882019 350.88815308]
[238.98641968 348.63006592]
[224.86332703 343.42205811]
[212.07788086 335.47741699]
[201.15364075 325.12145996]
[192.53794861 312.77825928]
[186.58358765 298.95327759]
[183.53442383 284.21258545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 72]
[4 71]
[8 70]
[9 69]
[10 68]
[12 64]
[13 63]
[14 62]
[15 61]
[16 60]
[17 58]
[18 57]
[19 56]
[21 53]
[22 52]
[23 44]
[24 43]
[25 42]
[27 40]
[28 39]
[29 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
