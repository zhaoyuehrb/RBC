%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 19:18:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGCAGGGCCAGGCCGGCAGAAGGCAGGGUGGGUGGGGCUGAGUCAGAGGAGAAGGGAUAAAUGCCAGGUCCUAACCCAAGUACCCACCUGUCAUUCGUUCGUCCUCAGUGCAGGGCAACAGGACUUUAGGUUCAAG\
) } def
/len { sequence length } bind def

/coor [
[76.55074310 130.46495056]
[77.05918121 115.47356415]
[69.56349182 115.21934509]
[62.11247635 128.23788452]
[54.66146469 141.25642395]
[57.28743362 153.94065857]
[50.74602890 164.65249634]
[39.03725815 167.89442444]
[31.29393578 180.74124146]
[23.55061340 193.58807373]
[20.55253029 210.27482605]
[3.68794775 212.01327515]
[-2.65113258 196.28900146]
[10.70378685 185.84475708]
[18.44710922 172.99792480]
[26.19043159 160.15109253]
[25.53664970 142.65031433]
[41.64292145 133.80541992]
[49.09393692 120.78687286]
[56.54494858 107.76833344]
[57.05338287 92.77695465]
[50.50152588 79.28350067]
[43.94966888 65.79005432]
[37.24574661 52.37150574]
[30.39061928 39.02957153]
[23.53549004 25.68763733]
[16.68036079 12.34570408]
[9.82523251 -0.99623024]
[2.97010350 -14.33816433]
[-3.79258966 -20.60623169]
[-3.88533235 -28.05998421]
[-10.43719006 -41.55343246]
[-16.98904800 -55.04688263]
[-23.54090500 -68.54032898]
[-30.09276199 -82.03378296]
[-36.64461899 -95.52722931]
[-43.65008163 -108.79084778]
[-51.10109329 -121.80938721]
[-58.55210876 -134.82792664]
[-69.68414307 -144.88166809]
[-83.39191437 -150.97239685]
[-97.09969330 -157.06312561]
[-114.02941132 -157.96911621]
[-117.84544373 -174.48802185]
[-103.02848053 -182.72779846]
[-91.00896454 -170.77088928]
[-77.30119324 -164.68017578]
[-63.59341812 -158.58944702]
[-52.69143677 -168.89219666]
[-57.99831390 -182.92205811]
[-63.30519485 -196.95191956]
[-68.61207581 -210.98178101]
[-83.43702698 -215.16830444]
[-92.84422302 -227.14152527]
[-93.39086914 -242.18031311]
[-85.07676697 -254.50970459]
[-90.38364410 -268.53955078]
[-105.38706970 -272.49896240]
[-115.17170715 -284.54223633]
[-115.97517395 -300.03851318]
[-107.48850250 -313.02911377]
[-92.97500610 -318.51895142]
[-78.01541901 -314.39700317]
[-68.36200714 -302.24829102]
[-67.72669220 -286.74423218]
[-76.35378265 -273.84643555]
[-71.04690552 -259.81658936]
[-56.65430069 -256.07614136]
[-47.11112213 -244.44035339]
[-46.23922729 -229.23860168]
[-54.58221054 -216.28866577]
[-49.27533340 -202.25880432]
[-43.96845245 -188.22894287]
[-38.66157150 -174.19908142]
[-35.17458344 -160.84169006]
[-38.28200531 -149.31782532]
[-45.53356552 -142.27894592]
[-38.08255386 -129.26040649]
[-30.63154030 -116.24185944]
[-27.25576019 -114.97453308]
[-24.35152245 -111.96118927]
[-22.75487900 -107.45407867]
[-23.15117073 -102.07908630]
[-16.59931374 -88.58563995]
[-10.04745579 -75.09218597]
[-3.49559808 -61.59873962]
[3.05625916 -48.10528946]
[9.60811615 -34.61184311]
[16.31203842 -21.19329262]
[23.16716576 -7.85135889]
[30.02229500 5.49057531]
[36.87742233 18.83250999]
[43.73255157 32.17444229]
[50.58768082 45.51637650]
[56.49213409 50.06659317]
[57.44311905 59.23819733]
[63.99497604 72.73164368]
[70.54682922 86.22509766]
[135.97558594 72.03824615]
[150.47175598 75.89323425]
[164.96792603 79.74822998]
[174.15237427 78.93055725]
[179.74623108 83.85760498]
[194.15158081 88.03921509]
[208.55694580 92.22083282]
[222.96229553 96.40244293]
[237.36764526 100.58405304]
[251.09278870 92.74849701]
[266.31628418 96.99361420]
[274.00628662 110.80083466]
[269.60046387 125.97859192]
[255.71269226 133.52218628]
[240.58236694 128.95613098]
[233.18603516 114.98940277]
[218.78068542 110.80779266]
[204.37532043 106.62618256]
[189.96997070 102.44457245]
[175.56462097 98.26295471]
[161.11294556 94.24440002]
[146.61676025 90.38941193]
[132.12059021 86.53442383]
[127.35037231 92.32190704]
[113.03970337 109.68435669]
[119.59156036 123.17780304]
[126.14341736 136.67124939]
[132.69526672 150.16470337]
[139.24713135 163.65815735]
[151.60458374 175.26547241]
[143.87176514 190.35321045]
[127.23300171 187.09928894]
[125.75367737 170.21000671]
[119.20182037 156.71656799]
[112.64996338 143.22311401]
[106.09810638 129.72966003]
[99.54624939 116.23621368]
[92.05056000 115.98199463]
[91.54212952 130.97337341]
[91.03346252 145.96475220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[8 16]
[9 15]
[10 14]
[21 98]
[22 97]
[23 96]
[24 94]
[25 93]
[26 92]
[27 91]
[28 90]
[29 89]
[31 88]
[32 87]
[33 86]
[34 85]
[35 84]
[36 83]
[37 79]
[38 78]
[39 77]
[40 48]
[41 47]
[42 46]
[49 74]
[50 73]
[51 72]
[52 71]
[56 67]
[57 66]
[99 121]
[100 120]
[101 119]
[103 118]
[104 117]
[105 116]
[106 115]
[107 114]
[123 135]
[124 134]
[125 133]
[126 132]
[127 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
