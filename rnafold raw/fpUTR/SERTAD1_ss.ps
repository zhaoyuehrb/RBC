%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Sep 13 20:04:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGUUAGGAGUCUGGAGUCGUGAGCCGGAGUCAGAACUGCGUCUCGCGACCCAGGCGCGGGUUUCCAGAGGACAGCCAACAAGCGAUGCUGCCGCCGCCGUUUCCUGAUUGGUUGUGGGUGGCUACCUCUUCGUUCUGAUUGGCCGCUAGUGAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[114.54435730 258.84997559]
[123.37448120 249.91802979]
[119.02021027 235.56393433]
[114.66593933 221.20982361]
[110.31167603 206.85571289]
[105.95740509 192.50161743]
[101.60313416 178.14750671]
[97.24886322 163.79341125]
[92.89459229 149.43930054]
[88.54032135 135.08518982]
[75.52546692 127.62774658]
[60.93991852 131.12942505]
[46.35437012 134.63110352]
[31.76881981 138.13278198]
[17.18327141 141.63446045]
[2.59772253 145.13615417]
[-5.06355429 150.20719910]
[-12.30854416 148.56040955]
[-26.96003151 151.77503967]
[-41.61151886 154.98968506]
[-56.26300812 158.20431519]
[-70.91449738 161.41896057]
[-85.56598663 164.63359070]
[-100.21747589 167.84823608]
[-114.86895752 171.06286621]
[-126.69032288 181.57791138]
[-140.78005981 176.74794006]
[-155.43154907 179.96258545]
[-167.25291443 190.47761536]
[-181.34265137 185.64765930]
[-195.99414062 188.86228943]
[-210.64562988 192.07693481]
[-222.38922119 203.52333069]
[-238.09835815 198.81646729]
[-241.61285400 182.79833984]
[-229.31727600 171.94703674]
[-213.86027527 177.42544556]
[-199.20878601 174.21080017]
[-184.55729675 170.99617004]
[-173.78390503 160.71105957]
[-158.64619446 165.31109619]
[-143.99470520 162.09645081]
[-133.22131348 151.81135559]
[-118.08359528 156.41137695]
[-103.43211365 153.19674683]
[-88.78062439 149.98210144]
[-74.12913513 146.76747131]
[-59.47764587 143.55282593]
[-44.82615662 140.33819580]
[-30.17466927 137.12355042]
[-15.52318096 133.90892029]
[-0.90395796 130.55059814]
[13.68159103 127.04891968]
[28.26713943 123.54724121]
[42.85268784 120.04555511]
[57.43823624 116.54387665]
[72.02378845 113.04219818]
[72.50305176 90.82825470]
[87.22760010 76.09230042]
[106.66805267 75.67238617]
[114.75512695 63.03913116]
[122.84220123 50.40587234]
[130.92927551 37.77261353]
[127.75598907 22.52243233]
[136.13740540 9.82571507]
[150.69567871 6.89445353]
[158.78274536 -5.73880482]
[166.86982727 -18.37206268]
[160.89694214 -30.82696152]
[161.86405945 -44.49740219]
[169.41058350 -55.80698013]
[181.46876526 -61.85019302]
[194.82917786 -61.13859940]
[203.16273499 -73.61064148]
[211.49629211 -86.08268738]
[219.82984924 -98.55473328]
[228.16339111 -111.02677917]
[236.49694824 -123.49881744]
[244.83050537 -135.97087097]
[253.16406250 -148.44290161]
[250.29080200 -163.75245667]
[258.91989136 -176.28216553]
[273.53289795 -178.92703247]
[281.86645508 -191.39907837]
[284.05004883 -200.32334900]
[290.48806763 -204.03196716]
[299.06488037 -216.33799744]
[300.60797119 -232.08377075]
[314.23297119 -238.10115051]
[322.80978394 -250.40716553]
[324.35284424 -266.15295410]
[337.97784424 -272.17031860]
[346.55465698 -284.47634888]
[347.40841675 -300.85324097]
[362.13903809 -308.06027222]
[375.59292603 -298.68344116]
[373.92987061 -282.36883545]
[358.86068726 -275.89953613]
[350.28387451 -263.59350586]
[349.35427856 -248.72793579]
[335.11581421 -241.83035278]
[326.53897095 -229.52432251]
[325.60937500 -214.65875244]
[311.37091064 -207.76116943]
[302.79409790 -195.45515442]
[294.33850098 -183.06552124]
[286.00494385 -170.59347534]
[289.15356445 -156.08065796]
[280.87982178 -143.31352234]
[265.63610840 -140.10935974]
[257.30255127 -127.63731384]
[248.96899414 -115.16526794]
[240.63543701 -102.69322205]
[232.30189514 -90.22117615]
[223.96833801 -77.74913788]
[215.63478088 -65.27709198]
[207.30122375 -52.80504608]
[213.47479248 -37.62001801]
[209.35774231 -21.58214951]
[196.37583923 -11.03920650]
[179.50308228 -10.28498840]
[171.41600037 2.34827018]
[163.32893372 14.98152828]
[166.76188660 29.42972565]
[158.74040222 42.35684967]
[143.56253052 45.85968781]
[135.47546387 58.49294662]
[127.38838196 71.12620544]
[119.30130768 83.75946045]
[124.69551849 91.35413361]
[127.09643555 100.70378113]
[125.95378876 110.62892914]
[121.18069458 119.78840637]
[113.19565582 126.86029816]
[102.89442444 130.73092651]
[107.24869537 145.08503723]
[111.60296631 159.43913269]
[115.95723724 173.79324341]
[120.31150818 188.14733887]
[124.66577911 202.50144958]
[129.02005005 216.85556030]
[133.37431335 231.20965576]
[137.72859192 245.56376648]
[154.99530029 250.95452881]
[165.51026917 265.48019409]
[165.24325562 283.25366211]
[154.48782349 297.20886230]
[159.40228271 311.38095093]
[164.31672668 325.55303955]
[177.06410217 335.86984253]
[174.23626709 352.02334595]
[158.74226379 357.39617920]
[146.52098083 346.46127319]
[150.14463806 330.46749878]
[145.23019409 316.29541016]
[140.31573486 302.12329102]
[128.24813843 300.34457397]
[118.03290558 293.54669189]
[111.65742493 282.97802734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 143]
[3 142]
[4 141]
[5 140]
[6 139]
[7 138]
[8 137]
[9 136]
[10 135]
[11 57]
[12 56]
[13 55]
[14 54]
[15 53]
[16 52]
[18 51]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[27 42]
[28 41]
[30 39]
[31 38]
[32 37]
[60 129]
[61 128]
[62 127]
[63 126]
[66 123]
[67 122]
[68 121]
[73 117]
[74 116]
[75 115]
[76 114]
[77 113]
[78 112]
[79 111]
[80 110]
[83 107]
[84 106]
[86 105]
[87 104]
[89 102]
[90 101]
[92 99]
[93 98]
[147 156]
[148 155]
[149 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
